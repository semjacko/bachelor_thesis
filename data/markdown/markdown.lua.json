{
  "_filename": "markdown.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/markdown/markdown.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 16
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 16
  }, {
    "from": 19,
    "label": "has",
    "to": 16
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 21,
    "label": "has",
    "to": 16
  }, {
    "from": 21,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 16
  }, {
    "from": 32,
    "label": "has",
    "to": 38
  }, {
    "from": 32,
    "label": "has",
    "to": 16
  }, {
    "from": 32,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 35
  }, {
    "from": 40,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 40,
    "label": "has",
    "to": 16
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 16
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 50,
    "label": "has",
    "to": 43
  }, {
    "from": 50,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 49,
    "label": "has",
    "to": 16
  }, {
    "from": 49,
    "label": "has",
    "to": 16
  }, {
    "from": 49,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 16
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 16
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 24
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 70,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 70,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 68,
    "label": "has",
    "to": 16
  }, {
    "from": 68,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 87,
    "label": "has",
    "to": 92
  }, {
    "from": 87,
    "label": "has",
    "to": 93
  }, {
    "from": 87,
    "label": "has",
    "to": 94
  }, {
    "from": 87,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 87,
    "label": "has",
    "to": 99
  }, {
    "from": 87,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 101,
    "label": "has",
    "to": 16
  }, {
    "from": 101,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 16
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 16
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 112,
    "label": "has",
    "to": 116
  }, {
    "from": 112,
    "label": "has",
    "to": 16
  }, {
    "from": 112,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 118,
    "label": "has",
    "to": 16
  }, {
    "from": 118,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 124,
    "label": "has",
    "to": 128
  }, {
    "from": 124,
    "label": "has",
    "to": 16
  }, {
    "from": 124,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 16
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 132,
    "label": "has",
    "to": 16
  }, {
    "from": 132,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 16
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 137,
    "label": "has",
    "to": 16
  }, {
    "from": 137,
    "label": "has",
    "to": 16
  }, {
    "from": 137,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 141,
    "label": "has",
    "to": 16
  }, {
    "from": 141,
    "label": "has",
    "to": 146
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 147,
    "label": "has",
    "to": 149
  }, {
    "from": 141,
    "label": "has",
    "to": 16
  }, {
    "from": 141,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 141,
    "label": "has",
    "to": 16
  }, {
    "from": 141,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 152,
    "label": "has",
    "to": 156
  }, {
    "from": 141,
    "label": "has",
    "to": 16
  }, {
    "from": 141,
    "label": "has",
    "to": 157
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 157,
    "label": "has",
    "to": 161
  }, {
    "from": 157,
    "label": "has",
    "to": 162
  }, {
    "from": 141,
    "label": "has",
    "to": 16
  }, {
    "from": 141,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 159
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 163,
    "label": "has",
    "to": 166
  }, {
    "from": 163,
    "label": "has",
    "to": 167
  }, {
    "from": 141,
    "label": "has",
    "to": 16
  }, {
    "from": 141,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 168,
    "label": "has",
    "to": 170
  }, {
    "from": 141,
    "label": "has",
    "to": 16
  }, {
    "from": 141,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 141,
    "label": "has",
    "to": 16
  }, {
    "from": 141,
    "label": "has",
    "to": 174
  }, {
    "from": 141,
    "label": "has",
    "to": 16
  }, {
    "from": 141,
    "label": "has",
    "to": 175
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 179,
    "label": "has",
    "to": 181
  }, {
    "from": 179,
    "label": "has",
    "to": 154
  }, {
    "from": 179,
    "label": "has",
    "to": 182
  }, {
    "from": 179,
    "label": "has",
    "to": 183
  }, {
    "from": 179,
    "label": "has",
    "to": 184
  }, {
    "from": 178,
    "label": "has",
    "to": 185
  }, {
    "from": 176,
    "label": "has",
    "to": 16
  }, {
    "from": 176,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 189,
    "label": "has",
    "to": 16
  }, {
    "from": 189,
    "label": "has",
    "to": 16
  }, {
    "from": 188,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 43
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 195,
    "label": "has",
    "to": 198
  }, {
    "from": 192,
    "label": "has",
    "to": 196
  }, {
    "from": 192,
    "label": "has",
    "to": 16
  }, {
    "from": 188,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 199,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 199,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 205,
    "label": "has",
    "to": 209
  }, {
    "from": 205,
    "label": "has",
    "to": 210
  }, {
    "from": 205,
    "label": "has",
    "to": 211
  }, {
    "from": 205,
    "label": "has",
    "to": 212
  }, {
    "from": 205,
    "label": "has",
    "to": 213
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 199,
    "label": "has",
    "to": 16
  }, {
    "from": 199,
    "label": "has",
    "to": 16
  }, {
    "from": 188,
    "label": "has",
    "to": 214
  }, {
    "from": 188,
    "label": "has",
    "to": 215
  }, {
    "from": 188,
    "label": "has",
    "to": 216
  }, {
    "from": 188,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 188,
    "label": "has",
    "to": 219
  }, {
    "from": 188,
    "label": "has",
    "to": 16
  }, {
    "from": 188,
    "label": "has",
    "to": 16
  }, {
    "from": 187,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 221,
    "label": "has",
    "to": 16
  }, {
    "from": 221,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 221,
    "label": "has",
    "to": 16
  }, {
    "from": 221,
    "label": "has",
    "to": 16
  }, {
    "from": 221,
    "label": "has",
    "to": 16
  }, {
    "from": 220,
    "label": "has",
    "to": 228
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 228,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 228,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 228,
    "label": "has",
    "to": 16
  }, {
    "from": 220,
    "label": "has",
    "to": 235
  }, {
    "from": 220,
    "label": "has",
    "to": 236
  }, {
    "from": 220,
    "label": "has",
    "to": 16
  }, {
    "from": 220,
    "label": "has",
    "to": 16
  }, {
    "from": 187,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 121
  }, {
    "from": 237,
    "label": "has",
    "to": 239
  }, {
    "from": 237,
    "label": "has",
    "to": 240
  }, {
    "from": 237,
    "label": "has",
    "to": 241
  }, {
    "from": 187,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 243,
    "label": "has",
    "to": 244
  }, {
    "from": 187,
    "label": "has",
    "to": 16
  }, {
    "from": 187,
    "label": "has",
    "to": 245
  }, {
    "from": 246,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 189,
    "label": "has",
    "to": 16
  }, {
    "from": 189,
    "label": "has",
    "to": 16
  }, {
    "from": 246,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 43
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 195,
    "label": "has",
    "to": 198
  }, {
    "from": 192,
    "label": "has",
    "to": 196
  }, {
    "from": 192,
    "label": "has",
    "to": 16
  }, {
    "from": 246,
    "label": "has",
    "to": 199
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 199,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 199,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 205,
    "label": "has",
    "to": 209
  }, {
    "from": 205,
    "label": "has",
    "to": 210
  }, {
    "from": 205,
    "label": "has",
    "to": 211
  }, {
    "from": 205,
    "label": "has",
    "to": 212
  }, {
    "from": 205,
    "label": "has",
    "to": 213
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 199,
    "label": "has",
    "to": 16
  }, {
    "from": 199,
    "label": "has",
    "to": 16
  }, {
    "from": 246,
    "label": "has",
    "to": 214
  }, {
    "from": 246,
    "label": "has",
    "to": 215
  }, {
    "from": 246,
    "label": "has",
    "to": 216
  }, {
    "from": 246,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 246,
    "label": "has",
    "to": 219
  }, {
    "from": 246,
    "label": "has",
    "to": 16
  }, {
    "from": 246,
    "label": "has",
    "to": 16
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 190
  }, {
    "from": 190,
    "label": "has",
    "to": 191
  }, {
    "from": 248,
    "label": "has",
    "to": 16
  }, {
    "from": 248,
    "label": "has",
    "to": 16
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 250,
    "label": "has",
    "to": 193
  }, {
    "from": 250,
    "label": "has",
    "to": 43
  }, {
    "from": 250,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 195,
    "label": "has",
    "to": 198
  }, {
    "from": 250,
    "label": "has",
    "to": 196
  }, {
    "from": 250,
    "label": "has",
    "to": 16
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 252,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 252,
    "label": "has",
    "to": 202
  }, {
    "from": 252,
    "label": "has",
    "to": 203
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 252,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 205,
    "label": "has",
    "to": 209
  }, {
    "from": 205,
    "label": "has",
    "to": 210
  }, {
    "from": 205,
    "label": "has",
    "to": 211
  }, {
    "from": 205,
    "label": "has",
    "to": 212
  }, {
    "from": 205,
    "label": "has",
    "to": 213
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 252,
    "label": "has",
    "to": 16
  }, {
    "from": 252,
    "label": "has",
    "to": 16
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 254,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 221,
    "label": "has",
    "to": 16
  }, {
    "from": 221,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 221,
    "label": "has",
    "to": 16
  }, {
    "from": 221,
    "label": "has",
    "to": 16
  }, {
    "from": 221,
    "label": "has",
    "to": 16
  }, {
    "from": 254,
    "label": "has",
    "to": 228
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 228,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 228,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 228,
    "label": "has",
    "to": 16
  }, {
    "from": 254,
    "label": "has",
    "to": 235
  }, {
    "from": 254,
    "label": "has",
    "to": 236
  }, {
    "from": 254,
    "label": "has",
    "to": 16
  }, {
    "from": 254,
    "label": "has",
    "to": 16
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 256,
    "label": "has",
    "to": 222
  }, {
    "from": 256,
    "label": "has",
    "to": 16
  }, {
    "from": 256,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 256,
    "label": "has",
    "to": 16
  }, {
    "from": 256,
    "label": "has",
    "to": 16
  }, {
    "from": 256,
    "label": "has",
    "to": 16
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 258,
    "label": "has",
    "to": 229
  }, {
    "from": 258,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 258,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 258,
    "label": "has",
    "to": 16
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 260,
    "label": "has",
    "to": 261
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 261,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 261,
    "label": "has",
    "to": 236
  }, {
    "from": 261,
    "label": "has",
    "to": 16
  }, {
    "from": 261,
    "label": "has",
    "to": 266
  }, {
    "from": 261,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 268,
    "label": "has",
    "to": 270
  }, {
    "from": 261,
    "label": "has",
    "to": 271
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 261,
    "label": "has",
    "to": 16
  }, {
    "from": 260,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 273,
    "label": "has",
    "to": 275
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 273,
    "label": "has",
    "to": 277
  }, {
    "from": 273,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 273,
    "label": "has",
    "to": 16
  }, {
    "from": 260,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 280,
    "label": "has",
    "to": 121
  }, {
    "from": 280,
    "label": "has",
    "to": 282
  }, {
    "from": 280,
    "label": "has",
    "to": 240
  }, {
    "from": 280,
    "label": "has",
    "to": 283
  }, {
    "from": 260,
    "label": "has",
    "to": 16
  }, {
    "from": 260,
    "label": "has",
    "to": 284
  }, {
    "from": 285,
    "label": "has",
    "to": 262
  }, {
    "from": 285,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 265
  }, {
    "from": 285,
    "label": "has",
    "to": 236
  }, {
    "from": 285,
    "label": "has",
    "to": 16
  }, {
    "from": 285,
    "label": "has",
    "to": 266
  }, {
    "from": 285,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 268,
    "label": "has",
    "to": 270
  }, {
    "from": 285,
    "label": "has",
    "to": 271
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 285,
    "label": "has",
    "to": 16
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 287,
    "label": "has",
    "to": 274
  }, {
    "from": 287,
    "label": "has",
    "to": 275
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 287,
    "label": "has",
    "to": 277
  }, {
    "from": 287,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 287,
    "label": "has",
    "to": 16
  }, {
    "from": 287,
    "label": "has",
    "to": 288
  }, {
    "from": 289,
    "label": "has",
    "to": 290
  }, {
    "from": 290,
    "label": "has",
    "to": 262
  }, {
    "from": 290,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 292
  }, {
    "from": 292,
    "label": "has",
    "to": 265
  }, {
    "from": 290,
    "label": "has",
    "to": 236
  }, {
    "from": 290,
    "label": "has",
    "to": 16
  }, {
    "from": 290,
    "label": "has",
    "to": 266
  }, {
    "from": 290,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 270
  }, {
    "from": 290,
    "label": "has",
    "to": 271
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 290,
    "label": "has",
    "to": 16
  }, {
    "from": 289,
    "label": "has",
    "to": 295
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 295,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 295,
    "label": "has",
    "to": 16
  }, {
    "from": 289,
    "label": "has",
    "to": 299
  }, {
    "from": 299,
    "label": "has",
    "to": 300
  }, {
    "from": 299,
    "label": "has",
    "to": 121
  }, {
    "from": 299,
    "label": "has",
    "to": 301
  }, {
    "from": 299,
    "label": "has",
    "to": 240
  }, {
    "from": 299,
    "label": "has",
    "to": 283
  }, {
    "from": 289,
    "label": "has",
    "to": 16
  }, {
    "from": 289,
    "label": "has",
    "to": 302
  }, {
    "from": 303,
    "label": "has",
    "to": 262
  }, {
    "from": 303,
    "label": "has",
    "to": 291
  }, {
    "from": 291,
    "label": "has",
    "to": 292
  }, {
    "from": 292,
    "label": "has",
    "to": 265
  }, {
    "from": 303,
    "label": "has",
    "to": 236
  }, {
    "from": 303,
    "label": "has",
    "to": 16
  }, {
    "from": 303,
    "label": "has",
    "to": 266
  }, {
    "from": 303,
    "label": "has",
    "to": 293
  }, {
    "from": 293,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 270
  }, {
    "from": 303,
    "label": "has",
    "to": 271
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 303,
    "label": "has",
    "to": 16
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 305,
    "label": "has",
    "to": 296
  }, {
    "from": 305,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 305,
    "label": "has",
    "to": 16
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 307,
    "label": "has",
    "to": 13
  }, {
    "from": 307,
    "label": "has",
    "to": 177
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 308,
    "label": "has",
    "to": 310
  }, {
    "from": 310,
    "label": "has",
    "to": 311
  }, {
    "from": 310,
    "label": "has",
    "to": 312
  }, {
    "from": 310,
    "label": "has",
    "to": 313
  }, {
    "from": 310,
    "label": "has",
    "to": 314
  }, {
    "from": 314,
    "label": "has",
    "to": 185
  }, {
    "from": 314,
    "label": "has",
    "to": 315
  }, {
    "from": 310,
    "label": "has",
    "to": 316
  }, {
    "from": 316,
    "label": "has",
    "to": 317
  }, {
    "from": 316,
    "label": "has",
    "to": 318
  }, {
    "from": 310,
    "label": "has",
    "to": 319
  }, {
    "from": 310,
    "label": "has",
    "to": 320
  }, {
    "from": 310,
    "label": "has",
    "to": 321
  }, {
    "from": 308,
    "label": "has",
    "to": 185
  }, {
    "from": 307,
    "label": "has",
    "to": 16
  }, {
    "from": 307,
    "label": "has",
    "to": 322
  }, {
    "from": 323,
    "label": "has",
    "to": 324
  }, {
    "from": 323,
    "label": "has",
    "to": 210
  }, {
    "from": 323,
    "label": "has",
    "to": 325
  }, {
    "from": 323,
    "label": "has",
    "to": 326
  }, {
    "from": 323,
    "label": "has",
    "to": 327
  }, {
    "from": 323,
    "label": "has",
    "to": 328
  }, {
    "from": 323,
    "label": "has",
    "to": 329
  }, {
    "from": 323,
    "label": "has",
    "to": 330
  }, {
    "from": 323,
    "label": "has",
    "to": 16
  }, {
    "from": 323,
    "label": "has",
    "to": 331
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 332,
    "label": "has",
    "to": 335
  }, {
    "from": 336,
    "label": "has",
    "to": 337
  }, {
    "from": 336,
    "label": "has",
    "to": 338
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 338,
    "label": "has",
    "to": 340
  }, {
    "from": 336,
    "label": "has",
    "to": 341
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 342,
    "label": "has",
    "to": 16
  }, {
    "from": 342,
    "label": "has",
    "to": 345
  }, {
    "from": 346,
    "label": "has",
    "to": 347
  }, {
    "from": 346,
    "label": "has",
    "to": 216
  }, {
    "from": 346,
    "label": "has",
    "to": 348
  }, {
    "from": 348,
    "label": "has",
    "to": 349
  }, {
    "from": 348,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 350,
    "label": "has",
    "to": 352
  }, {
    "from": 350,
    "label": "has",
    "to": 353
  }, {
    "from": 348,
    "label": "has",
    "to": 354
  }, {
    "from": 346,
    "label": "has",
    "to": 16
  }, {
    "from": 346,
    "label": "has",
    "to": 355
  }, {
    "from": 356,
    "label": "has",
    "to": 357
  }, {
    "from": 357,
    "label": "has",
    "to": 339
  }, {
    "from": 357,
    "label": "has",
    "to": 358
  }, {
    "from": 356,
    "label": "has",
    "to": 16
  }, {
    "from": 356,
    "label": "has",
    "to": 359
  }, {
    "from": 360,
    "label": "has",
    "to": 361
  }, {
    "from": 360,
    "label": "has",
    "to": 362
  }, {
    "from": 362,
    "label": "has",
    "to": 363
  }, {
    "from": 362,
    "label": "has",
    "to": 364
  }, {
    "from": 360,
    "label": "has",
    "to": 365
  }, {
    "from": 365,
    "label": "has",
    "to": 366
  }, {
    "from": 360,
    "label": "has",
    "to": 16
  }, {
    "from": 360,
    "label": "has",
    "to": 367
  }, {
    "from": 368,
    "label": "has",
    "to": 369
  }, {
    "from": 368,
    "label": "has",
    "to": 370
  }, {
    "from": 368,
    "label": "has",
    "to": 371
  }, {
    "from": 368,
    "label": "has",
    "to": 372
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 368,
    "label": "has",
    "to": 16
  }, {
    "from": 368,
    "label": "has",
    "to": 374
  }, {
    "from": 375,
    "label": "has",
    "to": 376
  }, {
    "from": 375,
    "label": "has",
    "to": 377
  }, {
    "from": 375,
    "label": "has",
    "to": 24
  }, {
    "from": 375,
    "label": "has",
    "to": 378
  }, {
    "from": 378,
    "label": "has",
    "to": 379
  }, {
    "from": 378,
    "label": "has",
    "to": 380
  }, {
    "from": 378,
    "label": "has",
    "to": 381
  }, {
    "from": 378,
    "label": "has",
    "to": 382
  }, {
    "from": 378,
    "label": "has",
    "to": 383
  }, {
    "from": 378,
    "label": "has",
    "to": 384
  }, {
    "from": 384,
    "label": "has",
    "to": 385
  }, {
    "from": 384,
    "label": "has",
    "to": 386
  }, {
    "from": 384,
    "label": "has",
    "to": 387
  }, {
    "from": 384,
    "label": "has",
    "to": 388
  }, {
    "from": 384,
    "label": "has",
    "to": 389
  }, {
    "from": 384,
    "label": "has",
    "to": 390
  }, {
    "from": 384,
    "label": "has",
    "to": 391
  }, {
    "from": 384,
    "label": "has",
    "to": 392
  }, {
    "from": 384,
    "label": "has",
    "to": 393
  }, {
    "from": 384,
    "label": "has",
    "to": 85
  }, {
    "from": 375,
    "label": "has",
    "to": 16
  }, {
    "from": 375,
    "label": "has",
    "to": 16
  }, {
    "from": 375,
    "label": "has",
    "to": 394
  }, {
    "from": 395,
    "label": "has",
    "to": 396
  }, {
    "from": 395,
    "label": "has",
    "to": 16
  }, {
    "from": 395,
    "label": "has",
    "to": 397
  }, {
    "from": 395,
    "label": "has",
    "to": 398
  }, {
    "from": 395,
    "label": "has",
    "to": 399
  }, {
    "from": 395,
    "label": "has",
    "to": 16
  }, {
    "from": 395,
    "label": "has",
    "to": 400
  }, {
    "from": 401,
    "label": "has",
    "to": 402
  }, {
    "from": 402,
    "label": "has",
    "to": 403
  }, {
    "from": 402,
    "label": "has",
    "to": 404
  }, {
    "from": 402,
    "label": "has",
    "to": 405
  }, {
    "from": 405,
    "label": "has",
    "to": 406
  }, {
    "from": 402,
    "label": "has",
    "to": 407
  }, {
    "from": 402,
    "label": "has",
    "to": 408
  }, {
    "from": 402,
    "label": "has",
    "to": 16
  }, {
    "from": 402,
    "label": "has",
    "to": 409
  }, {
    "from": 402,
    "label": "has",
    "to": 410
  }, {
    "from": 402,
    "label": "has",
    "to": 411
  }, {
    "from": 402,
    "label": "has",
    "to": 412
  }, {
    "from": 412,
    "label": "has",
    "to": 413
  }, {
    "from": 412,
    "label": "has",
    "to": 414
  }, {
    "from": 402,
    "label": "has",
    "to": 16
  }, {
    "from": 401,
    "label": "has",
    "to": 415
  }, {
    "from": 415,
    "label": "has",
    "to": 403
  }, {
    "from": 415,
    "label": "has",
    "to": 416
  }, {
    "from": 415,
    "label": "has",
    "to": 417
  }, {
    "from": 415,
    "label": "has",
    "to": 410
  }, {
    "from": 415,
    "label": "has",
    "to": 418
  }, {
    "from": 415,
    "label": "has",
    "to": 419
  }, {
    "from": 415,
    "label": "has",
    "to": 16
  }, {
    "from": 415,
    "label": "has",
    "to": 16
  }, {
    "from": 401,
    "label": "has",
    "to": 420
  }, {
    "from": 401,
    "label": "has",
    "to": 421
  }, {
    "from": 401,
    "label": "has",
    "to": 16
  }, {
    "from": 401,
    "label": "has",
    "to": 422
  }, {
    "from": 423,
    "label": "has",
    "to": 403
  }, {
    "from": 423,
    "label": "has",
    "to": 404
  }, {
    "from": 423,
    "label": "has",
    "to": 405
  }, {
    "from": 405,
    "label": "has",
    "to": 406
  }, {
    "from": 423,
    "label": "has",
    "to": 407
  }, {
    "from": 423,
    "label": "has",
    "to": 408
  }, {
    "from": 423,
    "label": "has",
    "to": 16
  }, {
    "from": 423,
    "label": "has",
    "to": 409
  }, {
    "from": 423,
    "label": "has",
    "to": 410
  }, {
    "from": 423,
    "label": "has",
    "to": 411
  }, {
    "from": 423,
    "label": "has",
    "to": 412
  }, {
    "from": 412,
    "label": "has",
    "to": 413
  }, {
    "from": 412,
    "label": "has",
    "to": 414
  }, {
    "from": 423,
    "label": "has",
    "to": 16
  }, {
    "from": 423,
    "label": "has",
    "to": 424
  }, {
    "from": 425,
    "label": "has",
    "to": 403
  }, {
    "from": 425,
    "label": "has",
    "to": 416
  }, {
    "from": 425,
    "label": "has",
    "to": 417
  }, {
    "from": 425,
    "label": "has",
    "to": 410
  }, {
    "from": 425,
    "label": "has",
    "to": 418
  }, {
    "from": 425,
    "label": "has",
    "to": 419
  }, {
    "from": 425,
    "label": "has",
    "to": 16
  }, {
    "from": 425,
    "label": "has",
    "to": 16
  }, {
    "from": 425,
    "label": "has",
    "to": 426
  }, {
    "from": 427,
    "label": "has",
    "to": 428
  }, {
    "from": 428,
    "label": "has",
    "to": 429
  }, {
    "from": 428,
    "label": "has",
    "to": 430
  }, {
    "from": 428,
    "label": "has",
    "to": 405
  }, {
    "from": 405,
    "label": "has",
    "to": 406
  }, {
    "from": 428,
    "label": "has",
    "to": 407
  }, {
    "from": 428,
    "label": "has",
    "to": 408
  }, {
    "from": 428,
    "label": "has",
    "to": 16
  }, {
    "from": 428,
    "label": "has",
    "to": 409
  }, {
    "from": 428,
    "label": "has",
    "to": 410
  }, {
    "from": 428,
    "label": "has",
    "to": 411
  }, {
    "from": 428,
    "label": "has",
    "to": 412
  }, {
    "from": 412,
    "label": "has",
    "to": 413
  }, {
    "from": 412,
    "label": "has",
    "to": 414
  }, {
    "from": 428,
    "label": "has",
    "to": 16
  }, {
    "from": 427,
    "label": "has",
    "to": 431
  }, {
    "from": 431,
    "label": "has",
    "to": 429
  }, {
    "from": 431,
    "label": "has",
    "to": 416
  }, {
    "from": 431,
    "label": "has",
    "to": 418
  }, {
    "from": 431,
    "label": "has",
    "to": 432
  }, {
    "from": 431,
    "label": "has",
    "to": 410
  }, {
    "from": 431,
    "label": "has",
    "to": 433
  }, {
    "from": 431,
    "label": "has",
    "to": 16
  }, {
    "from": 431,
    "label": "has",
    "to": 16
  }, {
    "from": 427,
    "label": "has",
    "to": 434
  }, {
    "from": 427,
    "label": "has",
    "to": 435
  }, {
    "from": 427,
    "label": "has",
    "to": 16
  }, {
    "from": 427,
    "label": "has",
    "to": 436
  }, {
    "from": 437,
    "label": "has",
    "to": 429
  }, {
    "from": 437,
    "label": "has",
    "to": 430
  }, {
    "from": 437,
    "label": "has",
    "to": 405
  }, {
    "from": 405,
    "label": "has",
    "to": 406
  }, {
    "from": 437,
    "label": "has",
    "to": 407
  }, {
    "from": 437,
    "label": "has",
    "to": 408
  }, {
    "from": 437,
    "label": "has",
    "to": 16
  }, {
    "from": 437,
    "label": "has",
    "to": 409
  }, {
    "from": 437,
    "label": "has",
    "to": 410
  }, {
    "from": 437,
    "label": "has",
    "to": 411
  }, {
    "from": 437,
    "label": "has",
    "to": 412
  }, {
    "from": 412,
    "label": "has",
    "to": 413
  }, {
    "from": 412,
    "label": "has",
    "to": 414
  }, {
    "from": 437,
    "label": "has",
    "to": 16
  }, {
    "from": 437,
    "label": "has",
    "to": 438
  }, {
    "from": 439,
    "label": "has",
    "to": 429
  }, {
    "from": 439,
    "label": "has",
    "to": 416
  }, {
    "from": 439,
    "label": "has",
    "to": 418
  }, {
    "from": 439,
    "label": "has",
    "to": 432
  }, {
    "from": 439,
    "label": "has",
    "to": 410
  }, {
    "from": 439,
    "label": "has",
    "to": 433
  }, {
    "from": 439,
    "label": "has",
    "to": 16
  }, {
    "from": 439,
    "label": "has",
    "to": 16
  }, {
    "from": 439,
    "label": "has",
    "to": 440
  }, {
    "from": 441,
    "label": "has",
    "to": 442
  }, {
    "from": 442,
    "label": "has",
    "to": 16
  }, {
    "from": 441,
    "label": "has",
    "to": 443
  }, {
    "from": 443,
    "label": "has",
    "to": 444
  }, {
    "from": 444,
    "label": "has",
    "to": 16
  }, {
    "from": 443,
    "label": "has",
    "to": 445
  }, {
    "from": 445,
    "label": "has",
    "to": 16
  }, {
    "from": 443,
    "label": "has",
    "to": 446
  }, {
    "from": 446,
    "label": "has",
    "to": 16
  }, {
    "from": 443,
    "label": "has",
    "to": 447
  }, {
    "from": 443,
    "label": "has",
    "to": 448
  }, {
    "from": 448,
    "label": "has",
    "to": 449
  }, {
    "from": 448,
    "label": "has",
    "to": 450
  }, {
    "from": 448,
    "label": "has",
    "to": 451
  }, {
    "from": 443,
    "label": "has",
    "to": 216
  }, {
    "from": 443,
    "label": "has",
    "to": 452
  }, {
    "from": 452,
    "label": "has",
    "to": 453
  }, {
    "from": 453,
    "label": "has",
    "to": 454
  }, {
    "from": 452,
    "label": "has",
    "to": 455
  }, {
    "from": 455,
    "label": "has",
    "to": 456
  }, {
    "from": 452,
    "label": "has",
    "to": 457
  }, {
    "from": 457,
    "label": "has",
    "to": 458
  }, {
    "from": 452,
    "label": "has",
    "to": 455
  }, {
    "from": 455,
    "label": "has",
    "to": 456
  }, {
    "from": 452,
    "label": "has",
    "to": 459
  }, {
    "from": 452,
    "label": "has",
    "to": 460
  }, {
    "from": 452,
    "label": "has",
    "to": 461
  }, {
    "from": 461,
    "label": "has",
    "to": 462
  }, {
    "from": 452,
    "label": "has",
    "to": 463
  }, {
    "from": 452,
    "label": "has",
    "to": 464
  }, {
    "from": 443,
    "label": "has",
    "to": 16
  }, {
    "from": 441,
    "label": "has",
    "to": 465
  }, {
    "from": 465,
    "label": "has",
    "to": 466
  }, {
    "from": 465,
    "label": "has",
    "to": 467
  }, {
    "from": 465,
    "label": "has",
    "to": 468
  }, {
    "from": 465,
    "label": "has",
    "to": 16
  }, {
    "from": 441,
    "label": "has",
    "to": 469
  }, {
    "from": 441,
    "label": "has",
    "to": 470
  }, {
    "from": 441,
    "label": "has",
    "to": 471
  }, {
    "from": 441,
    "label": "has",
    "to": 472
  }, {
    "from": 441,
    "label": "has",
    "to": 16
  }, {
    "from": 441,
    "label": "has",
    "to": 473
  }, {
    "from": 474,
    "label": "has",
    "to": 16
  }, {
    "from": 474,
    "label": "has",
    "to": 475
  }, {
    "from": 476,
    "label": "has",
    "to": 444
  }, {
    "from": 444,
    "label": "has",
    "to": 16
  }, {
    "from": 476,
    "label": "has",
    "to": 445
  }, {
    "from": 445,
    "label": "has",
    "to": 16
  }, {
    "from": 476,
    "label": "has",
    "to": 446
  }, {
    "from": 446,
    "label": "has",
    "to": 16
  }, {
    "from": 476,
    "label": "has",
    "to": 447
  }, {
    "from": 476,
    "label": "has",
    "to": 448
  }, {
    "from": 448,
    "label": "has",
    "to": 449
  }, {
    "from": 448,
    "label": "has",
    "to": 450
  }, {
    "from": 448,
    "label": "has",
    "to": 451
  }, {
    "from": 476,
    "label": "has",
    "to": 216
  }, {
    "from": 476,
    "label": "has",
    "to": 452
  }, {
    "from": 452,
    "label": "has",
    "to": 453
  }, {
    "from": 453,
    "label": "has",
    "to": 454
  }, {
    "from": 452,
    "label": "has",
    "to": 455
  }, {
    "from": 455,
    "label": "has",
    "to": 456
  }, {
    "from": 452,
    "label": "has",
    "to": 457
  }, {
    "from": 457,
    "label": "has",
    "to": 458
  }, {
    "from": 452,
    "label": "has",
    "to": 455
  }, {
    "from": 455,
    "label": "has",
    "to": 456
  }, {
    "from": 452,
    "label": "has",
    "to": 459
  }, {
    "from": 452,
    "label": "has",
    "to": 460
  }, {
    "from": 452,
    "label": "has",
    "to": 461
  }, {
    "from": 461,
    "label": "has",
    "to": 462
  }, {
    "from": 452,
    "label": "has",
    "to": 463
  }, {
    "from": 452,
    "label": "has",
    "to": 464
  }, {
    "from": 476,
    "label": "has",
    "to": 16
  }, {
    "from": 476,
    "label": "has",
    "to": 477
  }, {
    "from": 478,
    "label": "has",
    "to": 449
  }, {
    "from": 478,
    "label": "has",
    "to": 450
  }, {
    "from": 478,
    "label": "has",
    "to": 451
  }, {
    "from": 479,
    "label": "has",
    "to": 466
  }, {
    "from": 479,
    "label": "has",
    "to": 467
  }, {
    "from": 479,
    "label": "has",
    "to": 468
  }, {
    "from": 479,
    "label": "has",
    "to": 16
  }, {
    "from": 479,
    "label": "has",
    "to": 480
  }, {
    "from": 481,
    "label": "has",
    "to": 24
  }, {
    "from": 481,
    "label": "has",
    "to": 482
  }, {
    "from": 482,
    "label": "has",
    "to": 483
  }, {
    "from": 482,
    "label": "has",
    "to": 484
  }, {
    "from": 482,
    "label": "has",
    "to": 485
  }, {
    "from": 482,
    "label": "has",
    "to": 486
  }, {
    "from": 482,
    "label": "has",
    "to": 487
  }, {
    "from": 487,
    "label": "has",
    "to": 488
  }, {
    "from": 487,
    "label": "has",
    "to": 489
  }, {
    "from": 487,
    "label": "has",
    "to": 489
  }, {
    "from": 481,
    "label": "has",
    "to": 490
  }, {
    "from": 481,
    "label": "has",
    "to": 491
  }, {
    "from": 481,
    "label": "has",
    "to": 16
  }, {
    "from": 481,
    "label": "has",
    "to": 492
  }, {
    "from": 493,
    "label": "has",
    "to": 494
  }, {
    "from": 494,
    "label": "has",
    "to": 495
  }, {
    "from": 494,
    "label": "has",
    "to": 496
  }, {
    "from": 493,
    "label": "has",
    "to": 497
  }, {
    "from": 497,
    "label": "has",
    "to": 498
  }, {
    "from": 497,
    "label": "has",
    "to": 499
  }, {
    "from": 497,
    "label": "has",
    "to": 500
  }, {
    "from": 497,
    "label": "has",
    "to": 501
  }, {
    "from": 493,
    "label": "has",
    "to": 16
  }, {
    "from": 493,
    "label": "has",
    "to": 502
  }, {
    "from": 503,
    "label": "has",
    "to": 16
  }, {
    "from": 503,
    "label": "has",
    "to": 504
  }, {
    "from": 505,
    "label": "has",
    "to": 506
  }, {
    "from": 505,
    "label": "has",
    "to": 507
  }, {
    "from": 505,
    "label": "has",
    "to": 508
  }, {
    "from": 505,
    "label": "has",
    "to": 509
  }, {
    "from": 505,
    "label": "has",
    "to": 510
  }, {
    "from": 505,
    "label": "has",
    "to": 511
  }, {
    "from": 505,
    "label": "has",
    "to": 512
  }, {
    "from": 505,
    "label": "has",
    "to": 513
  }, {
    "from": 505,
    "label": "has",
    "to": 16
  }, {
    "from": 505,
    "label": "has",
    "to": 514
  }, {
    "from": 515,
    "label": "has",
    "to": 516
  }, {
    "from": 515,
    "label": "has",
    "to": 517
  }, {
    "from": 515,
    "label": "has",
    "to": 518
  }, {
    "from": 515,
    "label": "has",
    "to": 519
  }, {
    "from": 519,
    "label": "has",
    "to": 520
  }, {
    "from": 519,
    "label": "has",
    "to": 521
  }, {
    "from": 519,
    "label": "has",
    "to": 522
  }, {
    "from": 515,
    "label": "has",
    "to": 16
  }, {
    "from": 515,
    "label": "has",
    "to": 523
  }, {
    "from": 524,
    "label": "has",
    "to": 525
  }, {
    "from": 524,
    "label": "has",
    "to": 526
  }, {
    "from": 526,
    "label": "has",
    "to": 527
  }, {
    "from": 526,
    "label": "has",
    "to": 528
  }, {
    "from": 526,
    "label": "has",
    "to": 529
  }, {
    "from": 526,
    "label": "has",
    "to": 530
  }, {
    "from": 526,
    "label": "has",
    "to": 16
  }, {
    "from": 524,
    "label": "has",
    "to": 531
  }, {
    "from": 524,
    "label": "has",
    "to": 532
  }, {
    "from": 524,
    "label": "has",
    "to": 533
  }, {
    "from": 524,
    "label": "has",
    "to": 534
  }, {
    "from": 524,
    "label": "has",
    "to": 535
  }, {
    "from": 524,
    "label": "has",
    "to": 536
  }, {
    "from": 524,
    "label": "has",
    "to": 537
  }, {
    "from": 524,
    "label": "has",
    "to": 538
  }, {
    "from": 524,
    "label": "has",
    "to": 16
  }, {
    "from": 524,
    "label": "has",
    "to": 539
  }, {
    "from": 540,
    "label": "has",
    "to": 527
  }, {
    "from": 540,
    "label": "has",
    "to": 528
  }, {
    "from": 540,
    "label": "has",
    "to": 529
  }, {
    "from": 540,
    "label": "has",
    "to": 530
  }, {
    "from": 540,
    "label": "has",
    "to": 16
  }, {
    "from": 540,
    "label": "has",
    "to": 541
  }, {
    "from": 542,
    "label": "has",
    "to": 543
  }, {
    "from": 542,
    "label": "has",
    "to": 544
  }, {
    "from": 542,
    "label": "has",
    "to": 545
  }, {
    "from": 542,
    "label": "has",
    "to": 546
  }, {
    "from": 542,
    "label": "has",
    "to": 547
  }, {
    "from": 542,
    "label": "has",
    "to": 548
  }, {
    "from": 542,
    "label": "has",
    "to": 549
  }, {
    "from": 542,
    "label": "has",
    "to": 16
  }, {
    "from": 542,
    "label": "has",
    "to": 550
  }, {
    "from": 551,
    "label": "has",
    "to": 552
  }, {
    "from": 551,
    "label": "has",
    "to": 553
  }, {
    "from": 551,
    "label": "has",
    "to": 16
  }, {
    "from": 551,
    "label": "has",
    "to": 554
  }, {
    "from": 555,
    "label": "has",
    "to": 556
  }, {
    "from": 555,
    "label": "has",
    "to": 557
  }, {
    "from": 557,
    "label": "has",
    "to": 558
  }, {
    "from": 555,
    "label": "has",
    "to": 559
  }, {
    "from": 559,
    "label": "has",
    "to": 560
  }, {
    "from": 555,
    "label": "has",
    "to": 561
  }, {
    "from": 562,
    "label": "has",
    "to": 563
  }, {
    "from": 562,
    "label": "has",
    "to": 557
  }, {
    "from": 557,
    "label": "has",
    "to": 558
  }, {
    "from": 562,
    "label": "has",
    "to": 559
  }, {
    "from": 559,
    "label": "has",
    "to": 560
  }, {
    "from": 562,
    "label": "has",
    "to": 564
  }, {
    "from": 565,
    "label": "has",
    "to": 566
  }, {
    "from": 565,
    "label": "has",
    "to": 567
  }, {
    "from": 568,
    "label": "has",
    "to": 24
  }, {
    "from": 568,
    "label": "has",
    "to": 569
  }, {
    "from": 569,
    "label": "has",
    "to": 570
  }, {
    "from": 569,
    "label": "has",
    "to": 571
  }, {
    "from": 571,
    "label": "has",
    "to": 572
  }, {
    "from": 572,
    "label": "has",
    "to": 573
  }, {
    "from": 573,
    "label": "has",
    "to": 574
  }, {
    "from": 569,
    "label": "has",
    "to": 575
  }, {
    "from": 575,
    "label": "has",
    "to": 576
  }, {
    "from": 575,
    "label": "has",
    "to": 577
  }, {
    "from": 577,
    "label": "has",
    "to": 578
  }, {
    "from": 575,
    "label": "has",
    "to": 579
  }, {
    "from": 579,
    "label": "has",
    "to": 580
  }, {
    "from": 579,
    "label": "has",
    "to": 581
  }, {
    "from": 579,
    "label": "has",
    "to": 582
  }, {
    "from": 579,
    "label": "has",
    "to": 583
  }, {
    "from": 583,
    "label": "has",
    "to": 584
  }, {
    "from": 579,
    "label": "has",
    "to": 585
  }, {
    "from": 579,
    "label": "has",
    "to": 586
  }, {
    "from": 575,
    "label": "has",
    "to": 587
  }, {
    "from": 587,
    "label": "has",
    "to": 588
  }, {
    "from": 587,
    "label": "has",
    "to": 589
  }, {
    "from": 587,
    "label": "has",
    "to": 590
  }, {
    "from": 590,
    "label": "has",
    "to": 591
  }, {
    "from": 587,
    "label": "has",
    "to": 592
  }, {
    "from": 592,
    "label": "has",
    "to": 580
  }, {
    "from": 592,
    "label": "has",
    "to": 593
  }, {
    "from": 593,
    "label": "has",
    "to": 582
  }, {
    "from": 593,
    "label": "has",
    "to": 594
  }, {
    "from": 594,
    "label": "has",
    "to": 595
  }, {
    "from": 593,
    "label": "has",
    "to": 585
  }, {
    "from": 593,
    "label": "has",
    "to": 581
  }, {
    "from": 593,
    "label": "has",
    "to": 596
  }, {
    "from": 593,
    "label": "has",
    "to": 585
  }, {
    "from": 575,
    "label": "has",
    "to": 581
  }, {
    "from": 575,
    "label": "has",
    "to": 597
  }, {
    "from": 597,
    "label": "has",
    "to": 598
  }, {
    "from": 575,
    "label": "has",
    "to": 581
  }, {
    "from": 568,
    "label": "has",
    "to": 16
  }, {
    "from": 568,
    "label": "has",
    "to": 16
  }, {
    "from": 568,
    "label": "has",
    "to": 16
  }, {
    "from": 568,
    "label": "has",
    "to": 16
  }, {
    "from": 568,
    "label": "has",
    "to": 16
  }, {
    "from": 568,
    "label": "has",
    "to": 16
  }, {
    "from": 568,
    "label": "has",
    "to": 599
  }, {
    "from": 600,
    "label": "has",
    "to": 601
  }, {
    "from": 601,
    "label": "has",
    "to": 602
  }, {
    "from": 601,
    "label": "has",
    "to": 603
  }, {
    "from": 601,
    "label": "has",
    "to": 16
  }, {
    "from": 601,
    "label": "has",
    "to": 604
  }, {
    "from": 601,
    "label": "has",
    "to": 605
  }, {
    "from": 605,
    "label": "has",
    "to": 606
  }, {
    "from": 605,
    "label": "has",
    "to": 607
  }, {
    "from": 605,
    "label": "has",
    "to": 608
  }, {
    "from": 605,
    "label": "has",
    "to": 609
  }, {
    "from": 605,
    "label": "has",
    "to": 610
  }, {
    "from": 605,
    "label": "has",
    "to": 611
  }, {
    "from": 605,
    "label": "has",
    "to": 612
  }, {
    "from": 612,
    "label": "has",
    "to": 613
  }, {
    "from": 612,
    "label": "has",
    "to": 614
  }, {
    "from": 612,
    "label": "has",
    "to": 615
  }, {
    "from": 615,
    "label": "has",
    "to": 616
  }, {
    "from": 615,
    "label": "has",
    "to": 608
  }, {
    "from": 615,
    "label": "has",
    "to": 617
  }, {
    "from": 612,
    "label": "has",
    "to": 618
  }, {
    "from": 612,
    "label": "has",
    "to": 619
  }, {
    "from": 605,
    "label": "has",
    "to": 620
  }, {
    "from": 601,
    "label": "has",
    "to": 621
  }, {
    "from": 601,
    "label": "has",
    "to": 622
  }, {
    "from": 622,
    "label": "has",
    "to": 623
  }, {
    "from": 622,
    "label": "has",
    "to": 624
  }, {
    "from": 622,
    "label": "has",
    "to": 608
  }, {
    "from": 601,
    "label": "has",
    "to": 16
  }, {
    "from": 600,
    "label": "has",
    "to": 625
  }, {
    "from": 625,
    "label": "has",
    "to": 626
  }, {
    "from": 625,
    "label": "has",
    "to": 16
  }, {
    "from": 625,
    "label": "has",
    "to": 627
  }, {
    "from": 625,
    "label": "has",
    "to": 628
  }, {
    "from": 625,
    "label": "has",
    "to": 16
  }, {
    "from": 625,
    "label": "has",
    "to": 629
  }, {
    "from": 625,
    "label": "has",
    "to": 630
  }, {
    "from": 625,
    "label": "has",
    "to": 16
  }, {
    "from": 625,
    "label": "has",
    "to": 16
  }, {
    "from": 600,
    "label": "has",
    "to": 631
  }, {
    "from": 600,
    "label": "has",
    "to": 632
  }, {
    "from": 600,
    "label": "has",
    "to": 633
  }, {
    "from": 600,
    "label": "has",
    "to": 634
  }, {
    "from": 600,
    "label": "has",
    "to": 635
  }, {
    "from": 635,
    "label": "has",
    "to": 636
  }, {
    "from": 600,
    "label": "has",
    "to": 637
  }, {
    "from": 637,
    "label": "has",
    "to": 638
  }, {
    "from": 600,
    "label": "has",
    "to": 639
  }, {
    "from": 639,
    "label": "has",
    "to": 640
  }, {
    "from": 600,
    "label": "has",
    "to": 641
  }, {
    "from": 641,
    "label": "has",
    "to": 642
  }, {
    "from": 600,
    "label": "has",
    "to": 643
  }, {
    "from": 643,
    "label": "has",
    "to": 644
  }, {
    "from": 600,
    "label": "has",
    "to": 645
  }, {
    "from": 645,
    "label": "has",
    "to": 646
  }, {
    "from": 600,
    "label": "has",
    "to": 647
  }, {
    "from": 647,
    "label": "has",
    "to": 648
  }, {
    "from": 600,
    "label": "has",
    "to": 649
  }, {
    "from": 649,
    "label": "has",
    "to": 650
  }, {
    "from": 600,
    "label": "has",
    "to": 651
  }, {
    "from": 651,
    "label": "has",
    "to": 652
  }, {
    "from": 651,
    "label": "has",
    "to": 653
  }, {
    "from": 651,
    "label": "has",
    "to": 654
  }, {
    "from": 654,
    "label": "has",
    "to": 608
  }, {
    "from": 654,
    "label": "has",
    "to": 655
  }, {
    "from": 654,
    "label": "has",
    "to": 656
  }, {
    "from": 651,
    "label": "has",
    "to": 657
  }, {
    "from": 600,
    "label": "has",
    "to": 658
  }, {
    "from": 658,
    "label": "has",
    "to": 659
  }, {
    "from": 658,
    "label": "has",
    "to": 657
  }, {
    "from": 600,
    "label": "has",
    "to": 660
  }, {
    "from": 660,
    "label": "has",
    "to": 661
  }, {
    "from": 660,
    "label": "has",
    "to": 662
  }, {
    "from": 660,
    "label": "has",
    "to": 663
  }, {
    "from": 660,
    "label": "has",
    "to": 664
  }, {
    "from": 660,
    "label": "has",
    "to": 665
  }, {
    "from": 660,
    "label": "has",
    "to": 666
  }, {
    "from": 660,
    "label": "has",
    "to": 663
  }, {
    "from": 660,
    "label": "has",
    "to": 657
  }, {
    "from": 600,
    "label": "has",
    "to": 667
  }, {
    "from": 667,
    "label": "has",
    "to": 659
  }, {
    "from": 667,
    "label": "has",
    "to": 657
  }, {
    "from": 600,
    "label": "has",
    "to": 668
  }, {
    "from": 668,
    "label": "has",
    "to": 669
  }, {
    "from": 668,
    "label": "has",
    "to": 664
  }, {
    "from": 668,
    "label": "has",
    "to": 670
  }, {
    "from": 600,
    "label": "has",
    "to": 671
  }, {
    "from": 672,
    "label": "has",
    "to": 602
  }, {
    "from": 672,
    "label": "has",
    "to": 603
  }, {
    "from": 672,
    "label": "has",
    "to": 16
  }, {
    "from": 672,
    "label": "has",
    "to": 604
  }, {
    "from": 672,
    "label": "has",
    "to": 605
  }, {
    "from": 605,
    "label": "has",
    "to": 606
  }, {
    "from": 605,
    "label": "has",
    "to": 607
  }, {
    "from": 605,
    "label": "has",
    "to": 608
  }, {
    "from": 605,
    "label": "has",
    "to": 609
  }, {
    "from": 605,
    "label": "has",
    "to": 610
  }, {
    "from": 605,
    "label": "has",
    "to": 611
  }, {
    "from": 605,
    "label": "has",
    "to": 612
  }, {
    "from": 612,
    "label": "has",
    "to": 613
  }, {
    "from": 612,
    "label": "has",
    "to": 614
  }, {
    "from": 612,
    "label": "has",
    "to": 615
  }, {
    "from": 615,
    "label": "has",
    "to": 616
  }, {
    "from": 615,
    "label": "has",
    "to": 608
  }, {
    "from": 615,
    "label": "has",
    "to": 617
  }, {
    "from": 612,
    "label": "has",
    "to": 618
  }, {
    "from": 612,
    "label": "has",
    "to": 619
  }, {
    "from": 605,
    "label": "has",
    "to": 620
  }, {
    "from": 672,
    "label": "has",
    "to": 621
  }, {
    "from": 672,
    "label": "has",
    "to": 622
  }, {
    "from": 622,
    "label": "has",
    "to": 623
  }, {
    "from": 622,
    "label": "has",
    "to": 624
  }, {
    "from": 622,
    "label": "has",
    "to": 608
  }, {
    "from": 672,
    "label": "has",
    "to": 16
  }, {
    "from": 672,
    "label": "has",
    "to": 673
  }, {
    "from": 674,
    "label": "has",
    "to": 626
  }, {
    "from": 674,
    "label": "has",
    "to": 16
  }, {
    "from": 674,
    "label": "has",
    "to": 627
  }, {
    "from": 674,
    "label": "has",
    "to": 628
  }, {
    "from": 674,
    "label": "has",
    "to": 16
  }, {
    "from": 674,
    "label": "has",
    "to": 629
  }, {
    "from": 674,
    "label": "has",
    "to": 630
  }, {
    "from": 674,
    "label": "has",
    "to": 16
  }, {
    "from": 674,
    "label": "has",
    "to": 16
  }, {
    "from": 674,
    "label": "has",
    "to": 675
  }, {
    "from": 676,
    "label": "has",
    "to": 16
  }, {
    "from": 677,
    "label": "has",
    "to": 16
  }, {
    "from": 678,
    "label": "has",
    "to": 16
  }, {
    "from": 679,
    "label": "has",
    "to": 636
  }, {
    "from": 680,
    "label": "has",
    "to": 638
  }, {
    "from": 681,
    "label": "has",
    "to": 640
  }, {
    "from": 682,
    "label": "has",
    "to": 642
  }, {
    "from": 683,
    "label": "has",
    "to": 644
  }, {
    "from": 684,
    "label": "has",
    "to": 646
  }, {
    "from": 685,
    "label": "has",
    "to": 648
  }, {
    "from": 686,
    "label": "has",
    "to": 650
  }, {
    "from": 687,
    "label": "has",
    "to": 652
  }, {
    "from": 687,
    "label": "has",
    "to": 653
  }, {
    "from": 687,
    "label": "has",
    "to": 654
  }, {
    "from": 654,
    "label": "has",
    "to": 608
  }, {
    "from": 654,
    "label": "has",
    "to": 655
  }, {
    "from": 654,
    "label": "has",
    "to": 656
  }, {
    "from": 687,
    "label": "has",
    "to": 657
  }, {
    "from": 687,
    "label": "has",
    "to": 688
  }, {
    "from": 689,
    "label": "has",
    "to": 659
  }, {
    "from": 689,
    "label": "has",
    "to": 657
  }, {
    "from": 690,
    "label": "has",
    "to": 661
  }, {
    "from": 690,
    "label": "has",
    "to": 662
  }, {
    "from": 690,
    "label": "has",
    "to": 663
  }, {
    "from": 690,
    "label": "has",
    "to": 664
  }, {
    "from": 690,
    "label": "has",
    "to": 665
  }, {
    "from": 690,
    "label": "has",
    "to": 666
  }, {
    "from": 690,
    "label": "has",
    "to": 663
  }, {
    "from": 690,
    "label": "has",
    "to": 657
  }, {
    "from": 690,
    "label": "has",
    "to": 691
  }, {
    "from": 176,
    "label": "calls",
    "to": 19
  }, {
    "from": 600,
    "label": "calls",
    "to": 707
  }, {
    "from": 101,
    "label": "calls",
    "to": 694
  }, {
    "from": 568,
    "label": "calls",
    "to": 700
  }, {
    "from": 568,
    "label": "calls",
    "to": 700
  }, {
    "from": 505,
    "label": "calls",
    "to": 427
  }, {
    "from": 42,
    "label": "calls",
    "to": 702
  }, {
    "from": 49,
    "label": "calls",
    "to": 702
  }, {
    "from": 141,
    "label": "calls",
    "to": 702
  }, {
    "from": 246,
    "label": "calls",
    "to": 702
  }, {
    "from": 187,
    "label": "calls",
    "to": 702
  }, {
    "from": 285,
    "label": "calls",
    "to": 702
  }, {
    "from": 303,
    "label": "calls",
    "to": 702
  }, {
    "from": 332,
    "label": "calls",
    "to": 702
  }, {
    "from": 346,
    "label": "calls",
    "to": 702
  }, {
    "from": 476,
    "label": "calls",
    "to": 702
  }, {
    "from": 493,
    "label": "calls",
    "to": 702
  }, {
    "from": 493,
    "label": "calls",
    "to": 702
  }, {
    "from": 332,
    "label": "calls",
    "to": 705
  }, {
    "from": 568,
    "label": "calls",
    "to": 705
  }, {
    "from": 568,
    "label": "calls",
    "to": 705
  }, {
    "from": 568,
    "label": "calls",
    "to": 705
  }, {
    "from": 568,
    "label": "calls",
    "to": 705
  }, {
    "from": 600,
    "label": "calls",
    "to": 705
  }, {
    "from": 600,
    "label": "calls",
    "to": 705
  }, {
    "from": 323,
    "label": "calls",
    "to": 176
  }, {
    "from": 600,
    "label": "calls",
    "to": 542
  }, {
    "from": 346,
    "label": "calls",
    "to": 68
  }, {
    "from": 542,
    "label": "calls",
    "to": 336
  }, {
    "from": 505,
    "label": "calls",
    "to": 401
  }, {
    "from": 600,
    "label": "calls",
    "to": 672
  }, {
    "from": 600,
    "label": "calls",
    "to": 672
  }, {
    "from": 187,
    "label": "calls",
    "to": 49
  }, {
    "from": 187,
    "label": "calls",
    "to": 49
  }, {
    "from": 260,
    "label": "calls",
    "to": 49
  }, {
    "from": 260,
    "label": "calls",
    "to": 49
  }, {
    "from": 289,
    "label": "calls",
    "to": 49
  }, {
    "from": 289,
    "label": "calls",
    "to": 49
  }, {
    "from": 254,
    "label": "calls",
    "to": 256
  }, {
    "from": 118,
    "label": "calls",
    "to": 112
  }, {
    "from": 21,
    "label": "calls",
    "to": 704
  }, {
    "from": 21,
    "label": "calls",
    "to": 704
  }, {
    "from": 49,
    "label": "calls",
    "to": 704
  }, {
    "from": 49,
    "label": "calls",
    "to": 704
  }, {
    "from": 68,
    "label": "calls",
    "to": 704
  }, {
    "from": 68,
    "label": "calls",
    "to": 704
  }, {
    "from": 68,
    "label": "calls",
    "to": 704
  }, {
    "from": 68,
    "label": "calls",
    "to": 704
  }, {
    "from": 246,
    "label": "calls",
    "to": 704
  }, {
    "from": 246,
    "label": "calls",
    "to": 704
  }, {
    "from": 246,
    "label": "calls",
    "to": 704
  }, {
    "from": 307,
    "label": "calls",
    "to": 704
  }, {
    "from": 307,
    "label": "calls",
    "to": 704
  }, {
    "from": 307,
    "label": "calls",
    "to": 704
  }, {
    "from": 307,
    "label": "calls",
    "to": 704
  }, {
    "from": 307,
    "label": "calls",
    "to": 704
  }, {
    "from": 307,
    "label": "calls",
    "to": 704
  }, {
    "from": 49,
    "label": "calls",
    "to": 711
  }, {
    "from": 176,
    "label": "calls",
    "to": 711
  }, {
    "from": 246,
    "label": "calls",
    "to": 711
  }, {
    "from": 692,
    "label": "calls",
    "to": 600
  }, {
    "from": 505,
    "label": "calls",
    "to": 346
  }, {
    "from": 141,
    "label": "calls",
    "to": 137
  }, {
    "from": 476,
    "label": "calls",
    "to": 715
  }, {
    "from": 141,
    "label": "calls",
    "to": 132
  }, {
    "from": 260,
    "label": "calls",
    "to": 285
  }, {
    "from": 246,
    "label": "calls",
    "to": 187
  }, {
    "from": 323,
    "label": "calls",
    "to": 187
  }, {
    "from": 505,
    "label": "calls",
    "to": 441
  }, {
    "from": 124,
    "label": "calls",
    "to": 118
  }, {
    "from": 124,
    "label": "calls",
    "to": 118
  }, {
    "from": 124,
    "label": "calls",
    "to": 118
  }, {
    "from": 124,
    "label": "calls",
    "to": 118
  }, {
    "from": 360,
    "label": "calls",
    "to": 360
  }, {
    "from": 479,
    "label": "calls",
    "to": 360
  }, {
    "from": 542,
    "label": "calls",
    "to": 360
  }, {
    "from": 600,
    "label": "calls",
    "to": 699
  }, {
    "from": 246,
    "label": "calls",
    "to": 250
  }, {
    "from": 542,
    "label": "calls",
    "to": 515
  }, {
    "from": 375,
    "label": "calls",
    "to": 342
  }, {
    "from": 423,
    "label": "calls",
    "to": 342
  }, {
    "from": 425,
    "label": "calls",
    "to": 342
  }, {
    "from": 425,
    "label": "calls",
    "to": 342
  }, {
    "from": 423,
    "label": "calls",
    "to": 342
  }, {
    "from": 423,
    "label": "calls",
    "to": 342
  }, {
    "from": 425,
    "label": "calls",
    "to": 342
  }, {
    "from": 425,
    "label": "calls",
    "to": 342
  }, {
    "from": 425,
    "label": "calls",
    "to": 342
  }, {
    "from": 474,
    "label": "calls",
    "to": 342
  }, {
    "from": 479,
    "label": "calls",
    "to": 342
  }, {
    "from": 246,
    "label": "calls",
    "to": 21
  }, {
    "from": 323,
    "label": "calls",
    "to": 21
  }, {
    "from": 246,
    "label": "calls",
    "to": 307
  }, {
    "from": 323,
    "label": "calls",
    "to": 307
  }, {
    "from": 542,
    "label": "calls",
    "to": 87
  }, {
    "from": 254,
    "label": "calls",
    "to": 258
  }, {
    "from": 423,
    "label": "calls",
    "to": 395
  }, {
    "from": 423,
    "label": "calls",
    "to": 395
  }, {
    "from": 423,
    "label": "calls",
    "to": 395
  }, {
    "from": 425,
    "label": "calls",
    "to": 395
  }, {
    "from": 425,
    "label": "calls",
    "to": 395
  }, {
    "from": 425,
    "label": "calls",
    "to": 395
  }, {
    "from": 423,
    "label": "calls",
    "to": 395
  }, {
    "from": 423,
    "label": "calls",
    "to": 395
  }, {
    "from": 425,
    "label": "calls",
    "to": 395
  }, {
    "from": 425,
    "label": "calls",
    "to": 395
  }, {
    "from": 476,
    "label": "calls",
    "to": 701
  }, {
    "from": 246,
    "label": "calls",
    "to": 248
  }, {
    "from": 505,
    "label": "calls",
    "to": 493
  }, {
    "from": 505,
    "label": "calls",
    "to": 375
  }, {
    "from": 505,
    "label": "calls",
    "to": 481
  }, {
    "from": 305,
    "label": "calls",
    "to": 368
  }, {
    "from": 305,
    "label": "calls",
    "to": 368
  }, {
    "from": 375,
    "label": "calls",
    "to": 368
  }, {
    "from": 246,
    "label": "calls",
    "to": 252
  }, {
    "from": 289,
    "label": "calls",
    "to": 303
  }, {
    "from": 692,
    "label": "calls",
    "to": 713
  }, {
    "from": 692,
    "label": "calls",
    "to": 713
  }, {
    "from": 505,
    "label": "calls",
    "to": 503
  }, {
    "from": 323,
    "label": "calls",
    "to": 289
  }, {
    "from": 307,
    "label": "calls",
    "to": 505
  }, {
    "from": 307,
    "label": "calls",
    "to": 505
  }, {
    "from": 307,
    "label": "calls",
    "to": 505
  }, {
    "from": 12,
    "label": "calls",
    "to": 714
  }, {
    "from": 141,
    "label": "calls",
    "to": 130
  }, {
    "from": 124,
    "label": "calls",
    "to": 12
  }, {
    "from": 124,
    "label": "calls",
    "to": 12
  }, {
    "from": 246,
    "label": "calls",
    "to": 12
  }, {
    "from": 323,
    "label": "calls",
    "to": 12
  }, {
    "from": 12,
    "label": "calls",
    "to": 695
  }, {
    "from": 132,
    "label": "calls",
    "to": 695
  }, {
    "from": 360,
    "label": "calls",
    "to": 695
  }, {
    "from": 368,
    "label": "calls",
    "to": 695
  }, {
    "from": 112,
    "label": "calls",
    "to": 101
  }, {
    "from": 336,
    "label": "calls",
    "to": 101
  }, {
    "from": 342,
    "label": "calls",
    "to": 101
  }, {
    "from": 187,
    "label": "calls",
    "to": 246
  }, {
    "from": 542,
    "label": "calls",
    "to": 124
  }, {
    "from": 2,
    "label": "calls",
    "to": 697
  }, {
    "from": 600,
    "label": "calls",
    "to": 697
  }, {
    "from": 600,
    "label": "calls",
    "to": 697
  }, {
    "from": 600,
    "label": "calls",
    "to": 697
  }, {
    "from": 600,
    "label": "calls",
    "to": 697
  }, {
    "from": 600,
    "label": "calls",
    "to": 697
  }, {
    "from": 600,
    "label": "calls",
    "to": 697
  }, {
    "from": 289,
    "label": "calls",
    "to": 305
  }, {
    "from": 187,
    "label": "calls",
    "to": 254
  }, {
    "from": 600,
    "label": "calls",
    "to": 698
  }, {
    "from": 246,
    "label": "calls",
    "to": 65
  }, {
    "from": 246,
    "label": "calls",
    "to": 65
  }, {
    "from": 287,
    "label": "calls",
    "to": 65
  }, {
    "from": 246,
    "label": "calls",
    "to": 323
  }, {
    "from": 287,
    "label": "calls",
    "to": 323
  }, {
    "from": 542,
    "label": "calls",
    "to": 323
  }, {
    "from": 246,
    "label": "calls",
    "to": 60
  }, {
    "from": 305,
    "label": "calls",
    "to": 60
  }, {
    "from": 305,
    "label": "calls",
    "to": 60
  }, {
    "from": 305,
    "label": "calls",
    "to": 32
  }, {
    "from": 305,
    "label": "calls",
    "to": 32
  }, {
    "from": 515,
    "label": "calls",
    "to": 32
  }, {
    "from": 246,
    "label": "calls",
    "to": 693
  }, {
    "from": 323,
    "label": "calls",
    "to": 693
  }, {
    "from": 346,
    "label": "calls",
    "to": 356
  }, {
    "from": 568,
    "label": "calls",
    "to": 710
  }, {
    "from": 568,
    "label": "calls",
    "to": 710
  }, {
    "from": 568,
    "label": "calls",
    "to": 710
  }, {
    "from": 568,
    "label": "calls",
    "to": 710
  }, {
    "from": 568,
    "label": "calls",
    "to": 710
  }, {
    "from": 600,
    "label": "calls",
    "to": 674
  }, {
    "from": 600,
    "label": "calls",
    "to": 674
  }, {
    "from": 260,
    "label": "calls",
    "to": 287
  }, {
    "from": 40,
    "label": "calls",
    "to": 708
  }, {
    "from": 375,
    "label": "calls",
    "to": 708
  }, {
    "from": 692,
    "label": "calls",
    "to": 706
  }, {
    "from": 68,
    "label": "calls",
    "to": 42
  }, {
    "from": 118,
    "label": "calls",
    "to": 42
  }, {
    "from": 476,
    "label": "calls",
    "to": 478
  }, {
    "from": 476,
    "label": "calls",
    "to": 478
  }, {
    "from": 476,
    "label": "calls",
    "to": 478
  }, {
    "from": 692,
    "label": "calls",
    "to": 709
  }, {
    "from": 2,
    "label": "calls",
    "to": 709
  }, {
    "from": 551,
    "label": "calls",
    "to": 709
  }, {
    "from": 479,
    "label": "calls",
    "to": 476
  }, {
    "from": 479,
    "label": "calls",
    "to": 476
  }, {
    "from": 600,
    "label": "calls",
    "to": 696
  }, {
    "from": 600,
    "label": "calls",
    "to": 696
  }, {
    "from": 600,
    "label": "calls",
    "to": 696
  }, {
    "from": 600,
    "label": "calls",
    "to": 696
  }, {
    "from": 600,
    "label": "calls",
    "to": 696
  }, {
    "from": 600,
    "label": "calls",
    "to": 696
  }, {
    "from": 42,
    "label": "calls",
    "to": 712
  }, {
    "from": 2,
    "label": "calls",
    "to": 703
  }, {
    "from": 2,
    "label": "calls",
    "to": 703
  }, {
    "from": 542,
    "label": "calls",
    "to": 524
  }, {
    "from": 323,
    "label": "calls",
    "to": 260
  }, {
    "from": 1,
    "label": "contains",
    "to": 692
  }, {
    "from": 692,
    "label": "declares",
    "to": 2
  }, {
    "from": 692,
    "label": "declares",
    "to": 10
  }, {
    "from": 692,
    "label": "declares",
    "to": 12
  }, {
    "from": 692,
    "label": "declares",
    "to": 18
  }, {
    "from": 692,
    "label": "declares",
    "to": 19
  }, {
    "from": 692,
    "label": "declares",
    "to": 21
  }, {
    "from": 692,
    "label": "declares",
    "to": 32
  }, {
    "from": 692,
    "label": "declares",
    "to": 40
  }, {
    "from": 692,
    "label": "declares",
    "to": 42
  }, {
    "from": 692,
    "label": "declares",
    "to": 49
  }, {
    "from": 692,
    "label": "declares",
    "to": 60
  }, {
    "from": 692,
    "label": "declares",
    "to": 65
  }, {
    "from": 692,
    "label": "declares",
    "to": 68
  }, {
    "from": 692,
    "label": "declares",
    "to": 87
  }, {
    "from": 692,
    "label": "declares",
    "to": 101
  }, {
    "from": 692,
    "label": "declares",
    "to": 108
  }, {
    "from": 692,
    "label": "declares",
    "to": 110
  }, {
    "from": 692,
    "label": "declares",
    "to": 112
  }, {
    "from": 692,
    "label": "declares",
    "to": 118
  }, {
    "from": 692,
    "label": "declares",
    "to": 124
  }, {
    "from": 692,
    "label": "declares",
    "to": 130
  }, {
    "from": 692,
    "label": "declares",
    "to": 132
  }, {
    "from": 692,
    "label": "declares",
    "to": 137
  }, {
    "from": 692,
    "label": "declares",
    "to": 141
  }, {
    "from": 692,
    "label": "declares",
    "to": 176
  }, {
    "from": 692,
    "label": "declares",
    "to": 187
  }, {
    "from": 692,
    "label": "declares",
    "to": 246
  }, {
    "from": 692,
    "label": "declares",
    "to": 248
  }, {
    "from": 692,
    "label": "declares",
    "to": 250
  }, {
    "from": 692,
    "label": "declares",
    "to": 252
  }, {
    "from": 692,
    "label": "declares",
    "to": 254
  }, {
    "from": 692,
    "label": "declares",
    "to": 256
  }, {
    "from": 692,
    "label": "declares",
    "to": 258
  }, {
    "from": 692,
    "label": "declares",
    "to": 260
  }, {
    "from": 692,
    "label": "declares",
    "to": 285
  }, {
    "from": 692,
    "label": "declares",
    "to": 287
  }, {
    "from": 692,
    "label": "declares",
    "to": 289
  }, {
    "from": 692,
    "label": "declares",
    "to": 303
  }, {
    "from": 692,
    "label": "declares",
    "to": 305
  }, {
    "from": 692,
    "label": "declares",
    "to": 307
  }, {
    "from": 692,
    "label": "declares",
    "to": 323
  }, {
    "from": 692,
    "label": "declares",
    "to": 332
  }, {
    "from": 692,
    "label": "declares",
    "to": 336
  }, {
    "from": 692,
    "label": "declares",
    "to": 342
  }, {
    "from": 692,
    "label": "declares",
    "to": 346
  }, {
    "from": 692,
    "label": "declares",
    "to": 356
  }, {
    "from": 692,
    "label": "declares",
    "to": 360
  }, {
    "from": 692,
    "label": "declares",
    "to": 368
  }, {
    "from": 692,
    "label": "declares",
    "to": 375
  }, {
    "from": 692,
    "label": "declares",
    "to": 395
  }, {
    "from": 692,
    "label": "declares",
    "to": 401
  }, {
    "from": 692,
    "label": "declares",
    "to": 423
  }, {
    "from": 692,
    "label": "declares",
    "to": 425
  }, {
    "from": 692,
    "label": "declares",
    "to": 427
  }, {
    "from": 692,
    "label": "declares",
    "to": 437
  }, {
    "from": 692,
    "label": "declares",
    "to": 439
  }, {
    "from": 692,
    "label": "declares",
    "to": 441
  }, {
    "from": 692,
    "label": "declares",
    "to": 474
  }, {
    "from": 692,
    "label": "declares",
    "to": 476
  }, {
    "from": 692,
    "label": "declares",
    "to": 478
  }, {
    "from": 692,
    "label": "declares",
    "to": 479
  }, {
    "from": 692,
    "label": "declares",
    "to": 481
  }, {
    "from": 692,
    "label": "declares",
    "to": 493
  }, {
    "from": 692,
    "label": "declares",
    "to": 503
  }, {
    "from": 692,
    "label": "declares",
    "to": 505
  }, {
    "from": 692,
    "label": "declares",
    "to": 515
  }, {
    "from": 692,
    "label": "declares",
    "to": 524
  }, {
    "from": 692,
    "label": "declares",
    "to": 540
  }, {
    "from": 692,
    "label": "declares",
    "to": 542
  }, {
    "from": 692,
    "label": "declares",
    "to": 551
  }, {
    "from": 692,
    "label": "declares",
    "to": 555
  }, {
    "from": 692,
    "label": "declares",
    "to": 562
  }, {
    "from": 692,
    "label": "declares",
    "to": 565
  }, {
    "from": 692,
    "label": "declares",
    "to": 568
  }, {
    "from": 692,
    "label": "declares",
    "to": 600
  }, {
    "from": 692,
    "label": "declares",
    "to": 672
  }, {
    "from": 692,
    "label": "declares",
    "to": 674
  }, {
    "from": 692,
    "label": "declares",
    "to": 676
  }, {
    "from": 692,
    "label": "declares",
    "to": 677
  }, {
    "from": 692,
    "label": "declares",
    "to": 678
  }, {
    "from": 692,
    "label": "declares",
    "to": 679
  }, {
    "from": 692,
    "label": "declares",
    "to": 680
  }, {
    "from": 692,
    "label": "declares",
    "to": 681
  }, {
    "from": 692,
    "label": "declares",
    "to": 682
  }, {
    "from": 692,
    "label": "declares",
    "to": 683
  }, {
    "from": 692,
    "label": "declares",
    "to": 684
  }, {
    "from": 692,
    "label": "declares",
    "to": 685
  }, {
    "from": 692,
    "label": "declares",
    "to": 686
  }, {
    "from": 692,
    "label": "declares",
    "to": 687
  }, {
    "from": 692,
    "label": "declares",
    "to": 689
  }, {
    "from": 692,
    "label": "declares",
    "to": 690
  }, {
    "from": 1,
    "label": "contains",
    "to": 716
  }, {
    "from": 1,
    "label": "contains",
    "to": 717
  }, {
    "from": 635,
    "label": "hasArgument",
    "to": 679
  }, {
    "from": 637,
    "label": "hasArgument",
    "to": 680
  }, {
    "from": 639,
    "label": "hasArgument",
    "to": 681
  }, {
    "from": 641,
    "label": "hasArgument",
    "to": 682
  }, {
    "from": 643,
    "label": "hasArgument",
    "to": 683
  }, {
    "from": 645,
    "label": "hasArgument",
    "to": 684
  }, {
    "from": 647,
    "label": "hasArgument",
    "to": 685
  }, {
    "from": 649,
    "label": "hasArgument",
    "to": 686
  }, {
    "from": 651,
    "label": "hasArgument",
    "to": 687
  }, {
    "from": 658,
    "label": "hasArgument",
    "to": 689
  }, {
    "from": 660,
    "label": "hasArgument",
    "to": 690
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "markdown",
    "type": "module"
  }, {
    "id": 2,
    "text": "function lock(t)\r\n\tfunction lock_new_index(t, k, v)\r\n\t\terror(\"module has been locked -- \" .. k .. \" must be declared local\", 2)\r\n\tend\r\n\r\n\tlocal mt = {__newindex = lock_new_index}\r\n\tif getmetatable(t) then mt.__index = getmetatable(t).__index end\r\n\tsetmetatable(t, mt)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function lock_new_index(t, k, v)\r\n\t\terror(\"module has been locked -- \" .. k .. \" must be declared local\", 2)\r\n\tend",
    "type": "statement:globalfunction"
  }, {
    "id": 4,
    "text": "error(\"module has been locked -- \" .. k .. \" must be declared local\", 2)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "local mt = {__newindex = lock_new_index}",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if getmetatable(t) then mt.__index = getmetatable(t).__index end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "mt.__index = getmetatable(t).__index",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "setmetatable(t, mt)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function lock_new_index(t, k, v)\r\n\t\terror(\"module has been locked -- \" .. k .. \" must be declared local\", 2)\r\n\tend",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function map(t, f)\r\n\tlocal out = {}\r\n\tfor k,v in pairs(t) do out[k] = f(v,k) end\r\n\treturn out\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local out = {}",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "for k,v in pairs(t) do out[k] = f(v,k) end",
    "type": "statement:genericfor"
  }, {
    "id": 15,
    "text": "out[k] = f(v,k)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function identity(text) return text end",
    "type": "function"
  }, {
    "id": 19,
    "text": "function iff(t, a, b) if t then return a else return b end end",
    "type": "function"
  }, {
    "id": 20,
    "text": "if t then return a else return b end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "function split(text, sep)\r\n\tsep = sep or \"\\n\"\r\n\tlocal lines = {}\r\n\tlocal pos = 1\r\n\twhile true do\r\n\t\tlocal b,e = text:find(sep, pos)\r\n\t\tif not b then table.insert(lines, text:sub(pos)) break end\r\n\t\ttable.insert(lines, text:sub(pos, b-1))\r\n\t\tpos = e + 1\r\n\tend\r\n\treturn lines\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "sep = sep or \"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "local lines = {}",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local pos = 1",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "while true do\r\n\t\tlocal b,e = text:find(sep, pos)\r\n\t\tif not b then table.insert(lines, text:sub(pos)) break end\r\n\t\ttable.insert(lines, text:sub(pos, b-1))\r\n\t\tpos = e + 1\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 26,
    "text": "local b,e = text:find(sep, pos)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if not b then table.insert(lines, text:sub(pos)) break end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "table.insert(lines, text:sub(pos))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "table.insert(lines, text:sub(pos, b-1))",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "pos = e + 1",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function detab(text)\r\n\tlocal tab_width = 4\r\n\tlocal function rep(match)\r\n\t\tlocal spaces = -match:len()\r\n\t\twhile spaces<1 do spaces = spaces + tab_width end\r\n\t\treturn match .. string.rep(\" \", spaces)\r\n\tend\r\n\ttext = text:gsub(\"([^\\n]-)\\t\", rep)\r\n\treturn text\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local tab_width = 4",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local function rep(match)\r\n\t\tlocal spaces = -match:len()\r\n\t\twhile spaces<1 do spaces = spaces + tab_width end\r\n\t\treturn match .. string.rep(\" \", spaces)\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 35,
    "text": "local spaces = -match:len()",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "while spaces<1 do spaces = spaces + tab_width end",
    "type": "statement:while"
  }, {
    "id": 37,
    "text": "spaces = spaces + tab_width",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "text = text:gsub(\"([^\\n]-)\\t\", rep)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "local function rep(match)\r\n\t\tlocal spaces = -match:len()\r\n\t\twhile spaces<1 do spaces = spaces + tab_width end\r\n\t\treturn match .. string.rep(\" \", spaces)\r\n\tend",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function find_first(s, patterns, index)\r\n\tlocal res = {}\r\n\tfor _,p in ipairs(patterns) do\r\n\t\tlocal match = {s:find(p, index)}\r\n\t\tif #match>0 and (#res==0 or match[1] < res[1]) then res = match end\r\n\tend\r\n\treturn unpack(res)\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "for _,p in ipairs(patterns) do\r\n\t\tlocal match = {s:find(p, index)}\r\n\t\tif #match>0 and (#res==0 or match[1] < res[1]) then res = match end\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 45,
    "text": "local match = {s:find(p, index)}",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if #match>0 and (#res==0 or match[1] < res[1]) then res = match end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "res = match",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function splice(array, start, stop, replacement)\r\n\tif replacement then\r\n\t\tlocal n = stop - start + 1\r\n\t\twhile n > 0 do\r\n\t\t\ttable.remove(array, start)\r\n\t\t\tn = n - 1\r\n\t\tend\r\n\t\tfor i,v in ipairs(replacement) do\r\n\t\t\ttable.insert(array, start, v)\r\n\t\tend\r\n\t\treturn array\r\n\telse\r\n\t\tlocal res = {}\r\n\t\tfor i = start,stop do\r\n\t\t\ttable.insert(res, array[i])\r\n\t\tend\r\n\t\treturn res\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "if replacement then\r\n\t\tlocal n = stop - start + 1\r\n\t\twhile n > 0 do\r\n\t\t\ttable.remove(array, start)\r\n\t\t\tn = n - 1\r\n\t\tend\r\n\t\tfor i,v in ipairs(replacement) do\r\n\t\t\ttable.insert(array, start, v)\r\n\t\tend\r\n\t\treturn array\r\n\telse\r\n\t\tlocal res = {}\r\n\t\tfor i = start,stop do\r\n\t\t\ttable.insert(res, array[i])\r\n\t\tend\r\n\t\treturn res\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "local n = stop - start + 1",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "while n > 0 do\r\n\t\t\ttable.remove(array, start)\r\n\t\t\tn = n - 1\r\n\t\tend",
    "type": "statement:while"
  }, {
    "id": 53,
    "text": "table.remove(array, start)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "n = n - 1",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "for i,v in ipairs(replacement) do\r\n\t\t\ttable.insert(array, start, v)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 56,
    "text": "table.insert(array, start, v)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "for i = start,stop do\r\n\t\t\ttable.insert(res, array[i])\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 58,
    "text": "table.insert(res, array[i])",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function outdent(text)\r\n\ttext = \"\\n\" .. text\r\n\ttext = text:gsub(\"\\n  ? ? ?\", \"\\n\")\r\n\ttext = text:sub(2)\r\n\treturn text\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "text = \"\\n\" .. text",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "text = text:gsub(\"\\n  ? ? ?\", \"\\n\")",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "text = text:sub(2)",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function indent(text)\r\n\ttext = text:gsub(\"\\n\", \"\\n    \")\r\n\treturn text\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "text = text:gsub(\"\\n\", \"\\n    \")",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function tokenize_html(html)\r\n\tlocal tokens = {}\r\n\tlocal pos = 1\r\n\twhile true do\r\n\t\tlocal start = find_first(html, {\"<!%-%-\", \"<[a-z/!$]\", \"<%?\"}, pos)\r\n\t\tif not start then\r\n\t\t\ttable.insert(tokens, {type=\"text\", text=html:sub(pos)})\r\n\t\t\tbreak\r\n\t\tend\r\n\t\tif start ~= pos then table.insert(tokens, {type=\"text\", text = html:sub(pos, start-1)}) end\r\n\t\t\r\n\t\tlocal _, stop\r\n\t\tif html:match(\"^<!%-%-\", start) then\r\n\t\t\t_,stop = html:find(\"%-%->\", start)\r\n\t\telseif html:match(\"^<%?\", start) then\r\n\t\t\t_,stop = html:find(\"?>\", start)\r\n\t\telse\r\n\t\t\t_,stop = html:find(\"%b<>\", start)\r\n\t\tend\r\n\t\tif not stop then\r\n\t\t\t-- error(\"Could not match html tag \" .. html:sub(start,start+30)) \r\n\t\t \ttable.insert(tokens, {type=\"text\", text=html:sub(start, start)})\r\n\t\t\tpos = start + 1\r\n\t\telse\r\n\t\t\ttable.insert(tokens, {type=\"tag\", text=html:sub(start, stop)})\r\n\t\t\tpos = stop + 1\r\n\t\tend\r\n\tend\r\n\treturn tokens\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "local tokens = {}",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "while true do\r\n\t\tlocal start = find_first(html, {\"<!%-%-\", \"<[a-z/!$]\", \"<%?\"}, pos)\r\n\t\tif not start then\r\n\t\t\ttable.insert(tokens, {type=\"text\", text=html:sub(pos)})\r\n\t\t\tbreak\r\n\t\tend\r\n\t\tif start ~= pos then table.insert(tokens, {type=\"text\", text = html:sub(pos, start-1)}) end\r\n\t\t\r\n\t\tlocal _, stop\r\n\t\tif html:match(\"^<!%-%-\", start) then\r\n\t\t\t_,stop = html:find(\"%-%->\", start)\r\n\t\telseif html:match(\"^<%?\", start) then\r\n\t\t\t_,stop = html:find(\"?>\", start)\r\n\t\telse\r\n\t\t\t_,stop = html:find(\"%b<>\", start)\r\n\t\tend\r\n\t\tif not stop then\r\n\t\t\t-- error(\"Could not match html tag \" .. html:sub(start,start+30)) \r\n\t\t \ttable.insert(tokens, {type=\"text\", text=html:sub(start, start)})\r\n\t\t\tpos = start + 1\r\n\t\telse\r\n\t\t\ttable.insert(tokens, {type=\"tag\", text=html:sub(start, stop)})\r\n\t\t\tpos = stop + 1\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 71,
    "text": "local start = find_first(html, {\"<!%-%-\", \"<[a-z/!$]\", \"<%?\"}, pos)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if not start then\r\n\t\t\ttable.insert(tokens, {type=\"text\", text=html:sub(pos)})\r\n\t\t\tbreak\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "table.insert(tokens, {type=\"text\", text=html:sub(pos)})",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "if start ~= pos then table.insert(tokens, {type=\"text\", text = html:sub(pos, start-1)}) end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "table.insert(tokens, {type=\"text\", text = html:sub(pos, start-1)})",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "local _, stop",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "if html:match(\"^<!%-%-\", start) then\r\n\t\t\t_,stop = html:find(\"%-%->\", start)\r\n\t\telseif html:match(\"^<%?\", start) then\r\n\t\t\t_,stop = html:find(\"?>\", start)\r\n\t\telse\r\n\t\t\t_,stop = html:find(\"%b<>\", start)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "_,stop = html:find(\"%-%->\", start)",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "_,stop = html:find(\"?>\", start)",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "_,stop = html:find(\"%b<>\", start)",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "if not stop then\r\n\t\t\t-- error(\"Could not match html tag \" .. html:sub(start,start+30)) \r\n\t\t \ttable.insert(tokens, {type=\"text\", text=html:sub(start, start)})\r\n\t\t\tpos = start + 1\r\n\t\telse\r\n\t\t\ttable.insert(tokens, {type=\"tag\", text=html:sub(start, stop)})\r\n\t\t\tpos = stop + 1\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "table.insert(tokens, {type=\"text\", text=html:sub(start, start)})",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "pos = start + 1",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "table.insert(tokens, {type=\"tag\", text=html:sub(start, stop)})",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "pos = stop + 1",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function init_hash(text)\r\n\tHASH.inited = true\r\n\tHASH.identifier = \"\"\r\n\tHASH.counter = 0\r\n\tHASH.table = {}\r\n\t\r\n\tlocal s = \"HASH\"\r\n\tlocal counter = 0\r\n\tlocal id\r\n\twhile true do\r\n\t\tid  = s .. counter\r\n\t\tif not text:find(id, 1, true) then break end\r\n\t\tcounter = counter + 1\r\n\tend\r\n\tHASH.identifier = id\r\nend",
    "type": "function"
  }, {
    "id": 88,
    "text": "HASH.inited = true",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "HASH.identifier = \"\"",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "HASH.counter = 0",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "HASH.table = {}",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "local s = \"HASH\"",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "local counter = 0",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "local id",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "while true do\r\n\t\tid  = s .. counter\r\n\t\tif not text:find(id, 1, true) then break end\r\n\t\tcounter = counter + 1\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 96,
    "text": "id  = s .. counter",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "if not text:find(id, 1, true) then break end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "counter = counter + 1",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "HASH.identifier = id",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function hash(s)\r\n\tassert(HASH.inited)\r\n\tif not HASH.table[s] then\r\n\t\tHASH.counter = HASH.counter + 1\r\n\t\tlocal id = HASH.identifier .. HASH.counter .. \"X\"\r\n\t\tHASH.table[s] = id\r\n\tend\r\n\treturn HASH.table[s]\r\nend",
    "type": "function"
  }, {
    "id": 102,
    "text": "assert(HASH.inited)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "if not HASH.table[s] then\r\n\t\tHASH.counter = HASH.counter + 1\r\n\t\tlocal id = HASH.identifier .. HASH.counter .. \"X\"\r\n\t\tHASH.table[s] = id\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "HASH.counter = HASH.counter + 1",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "local id = HASH.identifier .. HASH.counter .. \"X\"",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "HASH.table[s] = id",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function block_pattern(tag)\r\n\treturn \"\\n<\" .. tag .. \".-\\n</\" .. tag .. \">[ \\t]*\\n\"\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function line_pattern(tag)\r\n\treturn \"\\n<\" .. tag .. \".-</\" .. tag .. \">[ \\t]*\\n\"\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function protect_range(text, start, stop)\r\n\tlocal s = text:sub(start, stop)\r\n\tlocal h = hash(s)\r\n\tPD.blocks[h] = s\r\n\ttext = text:sub(1,start) .. h .. text:sub(stop)\r\n\treturn text\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "local s = text:sub(start, stop)",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "local h = hash(s)",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "PD.blocks[h] = s",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "text = text:sub(1,start) .. h .. text:sub(stop)",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function protect_matches(text, patterns)\r\n\twhile true do\r\n\t\tlocal start, stop = find_first(text, patterns)\r\n\t\tif not start then break end\r\n\t\ttext = protect_range(text, start, stop)\r\n\tend\r\n\treturn text\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "while true do\r\n\t\tlocal start, stop = find_first(text, patterns)\r\n\t\tif not start then break end\r\n\t\ttext = protect_range(text, start, stop)\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 120,
    "text": "local start, stop = find_first(text, patterns)",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "if not start then break end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "text = protect_range(text, start, stop)",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function protect(text)\r\n\t-- First protect potentially nested block tags\r\n\ttext = protect_matches(text, map(PD.tags, block_pattern))\r\n\t-- Then protect block tags at the line level.\r\n\ttext = protect_matches(text, map(PD.tags, line_pattern))\r\n\t-- Protect <hr> and comment tags\r\n\ttext = protect_matches(text, {\"\\n<hr[^>]->[ \\t]*\\n\"})\r\n\ttext = protect_matches(text, {\"\\n<!%-%-.-%-%->[ \\t]*\\n\"})\r\n\treturn text\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "text = protect_matches(text, map(PD.tags, block_pattern))",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "text = protect_matches(text, map(PD.tags, line_pattern))",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "text = protect_matches(text, {\"\\n<hr[^>]->[ \\t]*\\n\"})",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "text = protect_matches(text, {\"\\n<!%-%-.-%-%->[ \\t]*\\n\"})",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function is_protected(s)\r\n\treturn PD.blocks[s]\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function unprotect(text)\r\n\tfor k,v in pairs(PD.blocks) do\r\n\t\tv = v:gsub(\"%%\", \"%%%%\")\r\n\t\ttext = text:gsub(k, v)\r\n\tend\r\n\treturn text\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "for k,v in pairs(PD.blocks) do\r\n\t\tv = v:gsub(\"%%\", \"%%%%\")\r\n\t\ttext = text:gsub(k, v)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 134,
    "text": "v = v:gsub(\"%%\", \"%%%%\")",
    "type": "statement:assign"
  }, {
    "id": 135,
    "text": "text = text:gsub(k, v)",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "function is_ruler_of(line, char)\r\n\tif not line:match(\"^[ %\" .. char .. \"]*$\") then return false end\r\n\tif not line:match(\"%\" .. char .. \".*%\" .. char .. \".*%\" .. char) then return false end\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 138,
    "text": "if not line:match(\"^[ %\" .. char .. \"]*$\") then return false end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "if not line:match(\"%\" .. char .. \".*%\" .. char .. \".*%\" .. char) then return false end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function classify(line)\r\n\tlocal info = {line = line, text = line}\r\n\t\r\n\tif line:match(\"^    \") then\r\n\t\tinfo.type = \"indented\"\r\n\t\tinfo.outdented = line:sub(5)\r\n\t\treturn info\r\n\tend\r\n\t\r\n\tfor _,c in ipairs({'*', '-', '_', '='}) do\r\n\t\tif is_ruler_of(line, c) then\r\n\t\t\tinfo.type = \"ruler\"\r\n\t\t\tinfo.ruler_char = c\r\n\t\t\treturn info\r\n\t\tend\r\n\tend\r\n\t\r\n\tif line == \"\" then\r\n\t\tinfo.type = \"blank\"\r\n\t\treturn info\r\n\tend\r\n\t\r\n\tif line:match(\"^(#+)[ \\t]*(.-)[ \\t]*#*[ \\t]*$\") then\r\n\t\tlocal m1, m2 = line:match(\"^(#+)[ \\t]*(.-)[ \\t]*#*[ \\t]*$\")\r\n\t\tinfo.type = \"header\"\r\n\t\tinfo.level = m1:len()\r\n\t\tinfo.text = m2\r\n\t\treturn info\r\n\tend\r\n\t\r\n\tif line:match(\"^ ? ? ?(%d+)%.[ \\t]+(.+)\") then\r\n\t\tlocal number, text = line:match(\"^ ? ? ?(%d+)%.[ \\t]+(.+)\")\r\n\t\tinfo.type = \"list_item\"\r\n\t\tinfo.list_type = \"numeric\"\r\n\t\tinfo.number = 0 + number\r\n\t\tinfo.text = text\r\n\t\treturn info\r\n\tend\r\n\t\r\n\tif line:match(\"^ ? ? ?([%*%+%-])[ \\t]+(.+)\") then\r\n\t\tlocal bullet, text = line:match(\"^ ? ? ?([%*%+%-])[ \\t]+(.+)\")\r\n\t\tinfo.type = \"list_item\"\r\n\t\tinfo.list_type = \"bullet\"\r\n\t\tinfo.bullet = bullet\r\n\t\tinfo.text= text\r\n\t\treturn info\r\n\tend\r\n\t\r\n\tif line:match(\"^>[ \\t]?(.*)\") then\r\n\t\tinfo.type = \"blockquote\"\r\n\t\tinfo.text = line:match(\"^>[ \\t]?(.*)\")\r\n\t\treturn info\r\n\tend\r\n\t\r\n\tif is_protected(line) then\r\n\t\tinfo.type = \"raw\"\r\n\t\tinfo.html = unprotect(line)\r\n\t\treturn info\r\n\tend\r\n\t\r\n\tinfo.type = \"normal\"\r\n\treturn info\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "local info = {line = line, text = line}",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "if line:match(\"^    \") then\r\n\t\tinfo.type = \"indented\"\r\n\t\tinfo.outdented = line:sub(5)\r\n\t\treturn info\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "info.type = \"indented\"",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "info.outdented = line:sub(5)",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "for _,c in ipairs({'*', '-', '_', '='}) do\r\n\t\tif is_ruler_of(line, c) then\r\n\t\t\tinfo.type = \"ruler\"\r\n\t\t\tinfo.ruler_char = c\r\n\t\t\treturn info\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 147,
    "text": "if is_ruler_of(line, c) then\r\n\t\t\tinfo.type = \"ruler\"\r\n\t\t\tinfo.ruler_char = c\r\n\t\t\treturn info\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "info.type = \"ruler\"",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "info.ruler_char = c",
    "type": "statement:assign"
  }, {
    "id": 150,
    "text": "if line == \"\" then\r\n\t\tinfo.type = \"blank\"\r\n\t\treturn info\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 151,
    "text": "info.type = \"blank\"",
    "type": "statement:assign"
  }, {
    "id": 152,
    "text": "if line:match(\"^(#+)[ \\t]*(.-)[ \\t]*#*[ \\t]*$\") then\r\n\t\tlocal m1, m2 = line:match(\"^(#+)[ \\t]*(.-)[ \\t]*#*[ \\t]*$\")\r\n\t\tinfo.type = \"header\"\r\n\t\tinfo.level = m1:len()\r\n\t\tinfo.text = m2\r\n\t\treturn info\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 153,
    "text": "local m1, m2 = line:match(\"^(#+)[ \\t]*(.-)[ \\t]*#*[ \\t]*$\")",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "info.type = \"header\"",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "info.level = m1:len()",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "info.text = m2",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "if line:match(\"^ ? ? ?(%d+)%.[ \\t]+(.+)\") then\r\n\t\tlocal number, text = line:match(\"^ ? ? ?(%d+)%.[ \\t]+(.+)\")\r\n\t\tinfo.type = \"list_item\"\r\n\t\tinfo.list_type = \"numeric\"\r\n\t\tinfo.number = 0 + number\r\n\t\tinfo.text = text\r\n\t\treturn info\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 158,
    "text": "local number, text = line:match(\"^ ? ? ?(%d+)%.[ \\t]+(.+)\")",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "info.type = \"list_item\"",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "info.list_type = \"numeric\"",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "info.number = 0 + number",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "info.text = text",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "if line:match(\"^ ? ? ?([%*%+%-])[ \\t]+(.+)\") then\r\n\t\tlocal bullet, text = line:match(\"^ ? ? ?([%*%+%-])[ \\t]+(.+)\")\r\n\t\tinfo.type = \"list_item\"\r\n\t\tinfo.list_type = \"bullet\"\r\n\t\tinfo.bullet = bullet\r\n\t\tinfo.text= text\r\n\t\treturn info\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "local bullet, text = line:match(\"^ ? ? ?([%*%+%-])[ \\t]+(.+)\")",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "info.list_type = \"bullet\"",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "info.bullet = bullet",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "info.text= text",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "if line:match(\"^>[ \\t]?(.*)\") then\r\n\t\tinfo.type = \"blockquote\"\r\n\t\tinfo.text = line:match(\"^>[ \\t]?(.*)\")\r\n\t\treturn info\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 169,
    "text": "info.type = \"blockquote\"",
    "type": "statement:assign"
  }, {
    "id": 170,
    "text": "info.text = line:match(\"^>[ \\t]?(.*)\")",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "if is_protected(line) then\r\n\t\tinfo.type = \"raw\"\r\n\t\tinfo.html = unprotect(line)\r\n\t\treturn info\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 172,
    "text": "info.type = \"raw\"",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "info.html = unprotect(line)",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "info.type = \"normal\"",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 176,
    "text": "function headers(array)\r\n\tlocal i = 1\r\n\twhile i <= #array - 1 do\r\n\t\tif array[i].type  == \"normal\" and array[i+1].type == \"ruler\" and \r\n\t\t\t(array[i+1].ruler_char == \"-\" or array[i+1].ruler_char == \"=\") then\r\n\t\t\tlocal info = {line = array[i].line}\r\n\t\t\tinfo.text = info.line\r\n\t\t\tinfo.type = \"header\"\r\n\t\t\tinfo.level = iff(array[i+1].ruler_char == \"=\", 1, 2)\r\n\t\t\ttable.remove(array, i+1)\r\n\t\t\tarray[i] = info\r\n\t\tend\r\n\t\ti = i + 1\r\n\tend\r\n\treturn array\r\nend",
    "type": "function"
  }, {
    "id": 177,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "while i <= #array - 1 do\r\n\t\tif array[i].type  == \"normal\" and array[i+1].type == \"ruler\" and \r\n\t\t\t(array[i+1].ruler_char == \"-\" or array[i+1].ruler_char == \"=\") then\r\n\t\t\tlocal info = {line = array[i].line}\r\n\t\t\tinfo.text = info.line\r\n\t\t\tinfo.type = \"header\"\r\n\t\t\tinfo.level = iff(array[i+1].ruler_char == \"=\", 1, 2)\r\n\t\t\ttable.remove(array, i+1)\r\n\t\t\tarray[i] = info\r\n\t\tend\r\n\t\ti = i + 1\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 179,
    "text": "if array[i].type  == \"normal\" and array[i+1].type == \"ruler\" and \r\n\t\t\t(array[i+1].ruler_char == \"-\" or array[i+1].ruler_char == \"=\") then\r\n\t\t\tlocal info = {line = array[i].line}\r\n\t\t\tinfo.text = info.line\r\n\t\t\tinfo.type = \"header\"\r\n\t\t\tinfo.level = iff(array[i+1].ruler_char == \"=\", 1, 2)\r\n\t\t\ttable.remove(array, i+1)\r\n\t\t\tarray[i] = info\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 180,
    "text": "local info = {line = array[i].line}",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "info.text = info.line",
    "type": "statement:assign"
  }, {
    "id": 182,
    "text": "info.level = iff(array[i+1].ruler_char == \"=\", 1, 2)",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "table.remove(array, i+1)",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "array[i] = info",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function lists(array, sublist)\r\n\tlocal function process_list(arr)\r\n\t\tlocal function any_blanks(arr)\r\n\t\t\tfor i = 1, #arr do\r\n\t\t\t\tif arr[i].type == \"blank\" then return true end\r\n\t\t\tend\r\n\t\t\treturn false\r\n\t\tend\r\n\t\t\r\n\t\tlocal function split_list_items(arr)\r\n\t\t\tlocal acc = {arr[1]}\r\n\t\t\tlocal res = {}\r\n\t\t\tfor i=2,#arr do\r\n\t\t\t\tif arr[i].type == \"list_item\" then\r\n\t\t\t\t\ttable.insert(res, acc)\r\n\t\t\t\t\tacc = {arr[i]}\r\n\t\t\t\telse\r\n\t\t\t\t\ttable.insert(acc, arr[i])\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\ttable.insert(res, acc)\r\n\t\t\treturn res\r\n\t\tend\r\n\t\t\r\n\t\tlocal function process_list_item(lines, block)\r\n\t\t\twhile lines[#lines].type == \"blank\" do\r\n\t\t\t\ttable.remove(lines)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tlocal itemtext = lines[1].text\r\n\t\t\tfor i=2,#lines do\r\n\t\t\t\titemtext = itemtext .. \"\\n\" .. outdent(lines[i].line)\r\n\t\t\tend\r\n\t\t\tif block then\r\n\t\t\t\titemtext = block_transform(itemtext, true)\r\n\t\t\t\tif not itemtext:find(\"<pre>\") then itemtext = indent(itemtext) end\r\n\t\t\t\treturn \"    <li>\" .. itemtext .. \"</li>\"\r\n\t\t\telse\r\n\t\t\t\tlocal lines = split(itemtext)\r\n\t\t\t\tlines = map(lines, classify)\r\n\t\t\t\tlines = lists(lines, true)\r\n\t\t\t\tlines = blocks_to_html(lines, true)\r\n\t\t\t\titemtext = table.concat(lines, \"\\n\")\r\n\t\t\t\tif not itemtext:find(\"<pre>\") then itemtext = indent(itemtext) end\r\n\t\t\t\treturn \"    <li>\" .. itemtext .. \"</li>\"\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\tlocal block_list = any_blanks(arr)\r\n\t\tlocal items = split_list_items(arr)\r\n\t\tlocal out = \"\"\r\n\t\tfor _, item in ipairs(items) do\r\n\t\t\tout = out .. process_list_item(item, block_list) .. \"\\n\"\r\n\t\tend\r\n\t\tif arr[1].list_type == \"numeric\" then\r\n\t\t\treturn \"<ol>\\n\" .. out .. \"</ol>\"\r\n\t\telse\r\n\t\t\treturn \"<ul>\\n\" .. out .. \"</ul>\"\r\n\t\tend\r\n\tend\r\n\t\r\n\t-- Finds the range of lines composing the first list in the array. A list\r\n\t-- starts with (^ list_item) or (blank list_item) and ends with\r\n\t-- (blank* $) or (blank normal).\r\n\t--\r\n\t-- A sublist can start with just (list_item) does not need a blank...\r\n\tlocal function find_list(array, sublist)\r\n\t\tlocal function find_list_start(array, sublist)\r\n\t\t\tif array[1].type == \"list_item\" then return 1 end\r\n\t\t\tif sublist then\r\n\t\t\t\tfor i = 1,#array do\r\n\t\t\t\t\tif array[i].type == \"list_item\" then return i end\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tfor i = 1, #array-1 do\r\n\t\t\t\t\tif array[i].type == \"blank\" and array[i+1].type == \"list_item\" then\r\n\t\t\t\t\t\treturn i+1\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\treturn nil\r\n\t\tend\r\n\t\tlocal function find_list_end(array, start)\r\n\t\t\tlocal pos = #array\r\n\t\t\tfor i = start, #array-1 do\r\n\t\t\t\tif array[i].type == \"blank\" and array[i+1].type ~= \"list_item\" \r\n\t\t\t\t\tand array[i+1].type ~= \"indented\" and array[i+1].type ~= \"blank\" then\r\n\t\t\t\t\tpos = i-1\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\twhile pos > start and array[pos].type == \"blank\" do\r\n\t\t\t\tpos = pos - 1\r\n\t\t\tend\r\n\t\t\treturn pos\r\n\t\tend\r\n\t\t\r\n\t\tlocal start = find_list_start(array, sublist)\r\n\t\tif not start then return nil end\r\n\t\treturn start, find_list_end(array, start)\r\n\tend\r\n\t\r\n\twhile true do\r\n\t\tlocal start, stop = find_list(array, sublist)\r\n\t\tif not start then break end\r\n\t\tlocal text = process_list(splice(array, start, stop))\r\n\t\tlocal info = {\r\n\t\t\tline = text,\r\n\t\t\ttype = \"raw\",\r\n\t\t\thtml = text\r\n\t\t}\r\n\t\tarray = splice(array, start, stop, {info})\r\n\tend\r\n\t\r\n\t-- Convert any remaining list items to normal\r\n\tfor _,line in ipairs(array) do\r\n\t\tif line.type == \"list_item\" then line.type = \"normal\" end\r\n\tend\r\n\t\r\n\treturn array\r\nend",
    "type": "function"
  }, {
    "id": 188,
    "text": "local function process_list(arr)\r\n\t\tlocal function any_blanks(arr)\r\n\t\t\tfor i = 1, #arr do\r\n\t\t\t\tif arr[i].type == \"blank\" then return true end\r\n\t\t\tend\r\n\t\t\treturn false\r\n\t\tend\r\n\t\t\r\n\t\tlocal function split_list_items(arr)\r\n\t\t\tlocal acc = {arr[1]}\r\n\t\t\tlocal res = {}\r\n\t\t\tfor i=2,#arr do\r\n\t\t\t\tif arr[i].type == \"list_item\" then\r\n\t\t\t\t\ttable.insert(res, acc)\r\n\t\t\t\t\tacc = {arr[i]}\r\n\t\t\t\telse\r\n\t\t\t\t\ttable.insert(acc, arr[i])\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\ttable.insert(res, acc)\r\n\t\t\treturn res\r\n\t\tend\r\n\t\t\r\n\t\tlocal function process_list_item(lines, block)\r\n\t\t\twhile lines[#lines].type == \"blank\" do\r\n\t\t\t\ttable.remove(lines)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tlocal itemtext = lines[1].text\r\n\t\t\tfor i=2,#lines do\r\n\t\t\t\titemtext = itemtext .. \"\\n\" .. outdent(lines[i].line)\r\n\t\t\tend\r\n\t\t\tif block then\r\n\t\t\t\titemtext = block_transform(itemtext, true)\r\n\t\t\t\tif not itemtext:find(\"<pre>\") then itemtext = indent(itemtext) end\r\n\t\t\t\treturn \"    <li>\" .. itemtext .. \"</li>\"\r\n\t\t\telse\r\n\t\t\t\tlocal lines = split(itemtext)\r\n\t\t\t\tlines = map(lines, classify)\r\n\t\t\t\tlines = lists(lines, true)\r\n\t\t\t\tlines = blocks_to_html(lines, true)\r\n\t\t\t\titemtext = table.concat(lines, \"\\n\")\r\n\t\t\t\tif not itemtext:find(\"<pre>\") then itemtext = indent(itemtext) end\r\n\t\t\t\treturn \"    <li>\" .. itemtext .. \"</li>\"\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\tlocal block_list = any_blanks(arr)\r\n\t\tlocal items = split_list_items(arr)\r\n\t\tlocal out = \"\"\r\n\t\tfor _, item in ipairs(items) do\r\n\t\t\tout = out .. process_list_item(item, block_list) .. \"\\n\"\r\n\t\tend\r\n\t\tif arr[1].list_type == \"numeric\" then\r\n\t\t\treturn \"<ol>\\n\" .. out .. \"</ol>\"\r\n\t\telse\r\n\t\t\treturn \"<ul>\\n\" .. out .. \"</ul>\"\r\n\t\tend\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 189,
    "text": "local function any_blanks(arr)\r\n\t\t\tfor i = 1, #arr do\r\n\t\t\t\tif arr[i].type == \"blank\" then return true end\r\n\t\t\tend\r\n\t\t\treturn false\r\n\t\tend",
    "type": "statement:localfunction"
  }, {
    "id": 190,
    "text": "for i = 1, #arr do\r\n\t\t\t\tif arr[i].type == \"blank\" then return true end\r\n\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 191,
    "text": "if arr[i].type == \"blank\" then return true end",
    "type": "statement:if"
  }, {
    "id": 192,
    "text": "local function split_list_items(arr)\r\n\t\t\tlocal acc = {arr[1]}\r\n\t\t\tlocal res = {}\r\n\t\t\tfor i=2,#arr do\r\n\t\t\t\tif arr[i].type == \"list_item\" then\r\n\t\t\t\t\ttable.insert(res, acc)\r\n\t\t\t\t\tacc = {arr[i]}\r\n\t\t\t\telse\r\n\t\t\t\t\ttable.insert(acc, arr[i])\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\ttable.insert(res, acc)\r\n\t\t\treturn res\r\n\t\tend",
    "type": "statement:localfunction"
  }, {
    "id": 193,
    "text": "local acc = {arr[1]}",
    "type": "statement:localassign"
  }, {
    "id": 194,
    "text": "for i=2,#arr do\r\n\t\t\t\tif arr[i].type == \"list_item\" then\r\n\t\t\t\t\ttable.insert(res, acc)\r\n\t\t\t\t\tacc = {arr[i]}\r\n\t\t\t\telse\r\n\t\t\t\t\ttable.insert(acc, arr[i])\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 195,
    "text": "if arr[i].type == \"list_item\" then\r\n\t\t\t\t\ttable.insert(res, acc)\r\n\t\t\t\t\tacc = {arr[i]}\r\n\t\t\t\telse\r\n\t\t\t\t\ttable.insert(acc, arr[i])\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "table.insert(res, acc)",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "acc = {arr[i]}",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "table.insert(acc, arr[i])",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "local function process_list_item(lines, block)\r\n\t\t\twhile lines[#lines].type == \"blank\" do\r\n\t\t\t\ttable.remove(lines)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tlocal itemtext = lines[1].text\r\n\t\t\tfor i=2,#lines do\r\n\t\t\t\titemtext = itemtext .. \"\\n\" .. outdent(lines[i].line)\r\n\t\t\tend\r\n\t\t\tif block then\r\n\t\t\t\titemtext = block_transform(itemtext, true)\r\n\t\t\t\tif not itemtext:find(\"<pre>\") then itemtext = indent(itemtext) end\r\n\t\t\t\treturn \"    <li>\" .. itemtext .. \"</li>\"\r\n\t\t\telse\r\n\t\t\t\tlocal lines = split(itemtext)\r\n\t\t\t\tlines = map(lines, classify)\r\n\t\t\t\tlines = lists(lines, true)\r\n\t\t\t\tlines = blocks_to_html(lines, true)\r\n\t\t\t\titemtext = table.concat(lines, \"\\n\")\r\n\t\t\t\tif not itemtext:find(\"<pre>\") then itemtext = indent(itemtext) end\r\n\t\t\t\treturn \"    <li>\" .. itemtext .. \"</li>\"\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:localfunction"
  }, {
    "id": 200,
    "text": "while lines[#lines].type == \"blank\" do\r\n\t\t\t\ttable.remove(lines)\r\n\t\t\tend",
    "type": "statement:while"
  }, {
    "id": 201,
    "text": "table.remove(lines)",
    "type": "statement:functioncall"
  }, {
    "id": 202,
    "text": "local itemtext = lines[1].text",
    "type": "statement:localassign"
  }, {
    "id": 203,
    "text": "for i=2,#lines do\r\n\t\t\t\titemtext = itemtext .. \"\\n\" .. outdent(lines[i].line)\r\n\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 204,
    "text": "itemtext = itemtext .. \"\\n\" .. outdent(lines[i].line)",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "if block then\r\n\t\t\t\titemtext = block_transform(itemtext, true)\r\n\t\t\t\tif not itemtext:find(\"<pre>\") then itemtext = indent(itemtext) end\r\n\t\t\t\treturn \"    <li>\" .. itemtext .. \"</li>\"\r\n\t\t\telse\r\n\t\t\t\tlocal lines = split(itemtext)\r\n\t\t\t\tlines = map(lines, classify)\r\n\t\t\t\tlines = lists(lines, true)\r\n\t\t\t\tlines = blocks_to_html(lines, true)\r\n\t\t\t\titemtext = table.concat(lines, \"\\n\")\r\n\t\t\t\tif not itemtext:find(\"<pre>\") then itemtext = indent(itemtext) end\r\n\t\t\t\treturn \"    <li>\" .. itemtext .. \"</li>\"\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "itemtext = block_transform(itemtext, true)",
    "type": "statement:assign"
  }, {
    "id": 207,
    "text": "if not itemtext:find(\"<pre>\") then itemtext = indent(itemtext) end",
    "type": "statement:if"
  }, {
    "id": 208,
    "text": "itemtext = indent(itemtext)",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "local lines = split(itemtext)",
    "type": "statement:localassign"
  }, {
    "id": 210,
    "text": "lines = map(lines, classify)",
    "type": "statement:assign"
  }, {
    "id": 211,
    "text": "lines = lists(lines, true)",
    "type": "statement:assign"
  }, {
    "id": 212,
    "text": "lines = blocks_to_html(lines, true)",
    "type": "statement:assign"
  }, {
    "id": 213,
    "text": "itemtext = table.concat(lines, \"\\n\")",
    "type": "statement:assign"
  }, {
    "id": 214,
    "text": "local block_list = any_blanks(arr)",
    "type": "statement:localassign"
  }, {
    "id": 215,
    "text": "local items = split_list_items(arr)",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "local out = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "for _, item in ipairs(items) do\r\n\t\t\tout = out .. process_list_item(item, block_list) .. \"\\n\"\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 218,
    "text": "out = out .. process_list_item(item, block_list) .. \"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 219,
    "text": "if arr[1].list_type == \"numeric\" then\r\n\t\t\treturn \"<ol>\\n\" .. out .. \"</ol>\"\r\n\t\telse\r\n\t\t\treturn \"<ul>\\n\" .. out .. \"</ul>\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 220,
    "text": "local function find_list(array, sublist)\r\n\t\tlocal function find_list_start(array, sublist)\r\n\t\t\tif array[1].type == \"list_item\" then return 1 end\r\n\t\t\tif sublist then\r\n\t\t\t\tfor i = 1,#array do\r\n\t\t\t\t\tif array[i].type == \"list_item\" then return i end\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tfor i = 1, #array-1 do\r\n\t\t\t\t\tif array[i].type == \"blank\" and array[i+1].type == \"list_item\" then\r\n\t\t\t\t\t\treturn i+1\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\treturn nil\r\n\t\tend\r\n\t\tlocal function find_list_end(array, start)\r\n\t\t\tlocal pos = #array\r\n\t\t\tfor i = start, #array-1 do\r\n\t\t\t\tif array[i].type == \"blank\" and array[i+1].type ~= \"list_item\" \r\n\t\t\t\t\tand array[i+1].type ~= \"indented\" and array[i+1].type ~= \"blank\" then\r\n\t\t\t\t\tpos = i-1\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\twhile pos > start and array[pos].type == \"blank\" do\r\n\t\t\t\tpos = pos - 1\r\n\t\t\tend\r\n\t\t\treturn pos\r\n\t\tend\r\n\t\t\r\n\t\tlocal start = find_list_start(array, sublist)\r\n\t\tif not start then return nil end\r\n\t\treturn start, find_list_end(array, start)\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 221,
    "text": "local function find_list_start(array, sublist)\r\n\t\t\tif array[1].type == \"list_item\" then return 1 end\r\n\t\t\tif sublist then\r\n\t\t\t\tfor i = 1,#array do\r\n\t\t\t\t\tif array[i].type == \"list_item\" then return i end\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tfor i = 1, #array-1 do\r\n\t\t\t\t\tif array[i].type == \"blank\" and array[i+1].type == \"list_item\" then\r\n\t\t\t\t\t\treturn i+1\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\treturn nil\r\n\t\tend",
    "type": "statement:localfunction"
  }, {
    "id": 222,
    "text": "if array[1].type == \"list_item\" then return 1 end",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "if sublist then\r\n\t\t\t\tfor i = 1,#array do\r\n\t\t\t\t\tif array[i].type == \"list_item\" then return i end\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tfor i = 1, #array-1 do\r\n\t\t\t\t\tif array[i].type == \"blank\" and array[i+1].type == \"list_item\" then\r\n\t\t\t\t\t\treturn i+1\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 224,
    "text": "for i = 1,#array do\r\n\t\t\t\t\tif array[i].type == \"list_item\" then return i end\r\n\t\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 225,
    "text": "if array[i].type == \"list_item\" then return i end",
    "type": "statement:if"
  }, {
    "id": 226,
    "text": "for i = 1, #array-1 do\r\n\t\t\t\t\tif array[i].type == \"blank\" and array[i+1].type == \"list_item\" then\r\n\t\t\t\t\t\treturn i+1\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 227,
    "text": "if array[i].type == \"blank\" and array[i+1].type == \"list_item\" then\r\n\t\t\t\t\t\treturn i+1\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 228,
    "text": "local function find_list_end(array, start)\r\n\t\t\tlocal pos = #array\r\n\t\t\tfor i = start, #array-1 do\r\n\t\t\t\tif array[i].type == \"blank\" and array[i+1].type ~= \"list_item\" \r\n\t\t\t\t\tand array[i+1].type ~= \"indented\" and array[i+1].type ~= \"blank\" then\r\n\t\t\t\t\tpos = i-1\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\twhile pos > start and array[pos].type == \"blank\" do\r\n\t\t\t\tpos = pos - 1\r\n\t\t\tend\r\n\t\t\treturn pos\r\n\t\tend",
    "type": "statement:localfunction"
  }, {
    "id": 229,
    "text": "local pos = #array",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "for i = start, #array-1 do\r\n\t\t\t\tif array[i].type == \"blank\" and array[i+1].type ~= \"list_item\" \r\n\t\t\t\t\tand array[i+1].type ~= \"indented\" and array[i+1].type ~= \"blank\" then\r\n\t\t\t\t\tpos = i-1\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 231,
    "text": "if array[i].type == \"blank\" and array[i+1].type ~= \"list_item\" \r\n\t\t\t\t\tand array[i+1].type ~= \"indented\" and array[i+1].type ~= \"blank\" then\r\n\t\t\t\t\tpos = i-1\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 232,
    "text": "pos = i-1",
    "type": "statement:assign"
  }, {
    "id": 233,
    "text": "while pos > start and array[pos].type == \"blank\" do\r\n\t\t\t\tpos = pos - 1\r\n\t\t\tend",
    "type": "statement:while"
  }, {
    "id": 234,
    "text": "pos = pos - 1",
    "type": "statement:assign"
  }, {
    "id": 235,
    "text": "local start = find_list_start(array, sublist)",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "if not start then return nil end",
    "type": "statement:if"
  }, {
    "id": 237,
    "text": "while true do\r\n\t\tlocal start, stop = find_list(array, sublist)\r\n\t\tif not start then break end\r\n\t\tlocal text = process_list(splice(array, start, stop))\r\n\t\tlocal info = {\r\n\t\t\tline = text,\r\n\t\t\ttype = \"raw\",\r\n\t\t\thtml = text\r\n\t\t}\r\n\t\tarray = splice(array, start, stop, {info})\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 238,
    "text": "local start, stop = find_list(array, sublist)",
    "type": "statement:localassign"
  }, {
    "id": 239,
    "text": "local text = process_list(splice(array, start, stop))",
    "type": "statement:localassign"
  }, {
    "id": 240,
    "text": "local info = {\r\n\t\t\tline = text,\r\n\t\t\ttype = \"raw\",\r\n\t\t\thtml = text\r\n\t\t}",
    "type": "statement:localassign"
  }, {
    "id": 241,
    "text": "array = splice(array, start, stop, {info})",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "for _,line in ipairs(array) do\r\n\t\tif line.type == \"list_item\" then line.type = \"normal\" end\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 243,
    "text": "if line.type == \"list_item\" then line.type = \"normal\" end",
    "type": "statement:if"
  }, {
    "id": 244,
    "text": "line.type = \"normal\"",
    "type": "statement:assign"
  }, {
    "id": 245,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 246,
    "text": "local function process_list(arr)\r\n\t\tlocal function any_blanks(arr)\r\n\t\t\tfor i = 1, #arr do\r\n\t\t\t\tif arr[i].type == \"blank\" then return true end\r\n\t\t\tend\r\n\t\t\treturn false\r\n\t\tend\r\n\t\t\r\n\t\tlocal function split_list_items(arr)\r\n\t\t\tlocal acc = {arr[1]}\r\n\t\t\tlocal res = {}\r\n\t\t\tfor i=2,#arr do\r\n\t\t\t\tif arr[i].type == \"list_item\" then\r\n\t\t\t\t\ttable.insert(res, acc)\r\n\t\t\t\t\tacc = {arr[i]}\r\n\t\t\t\telse\r\n\t\t\t\t\ttable.insert(acc, arr[i])\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\ttable.insert(res, acc)\r\n\t\t\treturn res\r\n\t\tend\r\n\t\t\r\n\t\tlocal function process_list_item(lines, block)\r\n\t\t\twhile lines[#lines].type == \"blank\" do\r\n\t\t\t\ttable.remove(lines)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tlocal itemtext = lines[1].text\r\n\t\t\tfor i=2,#lines do\r\n\t\t\t\titemtext = itemtext .. \"\\n\" .. outdent(lines[i].line)\r\n\t\t\tend\r\n\t\t\tif block then\r\n\t\t\t\titemtext = block_transform(itemtext, true)\r\n\t\t\t\tif not itemtext:find(\"<pre>\") then itemtext = indent(itemtext) end\r\n\t\t\t\treturn \"    <li>\" .. itemtext .. \"</li>\"\r\n\t\t\telse\r\n\t\t\t\tlocal lines = split(itemtext)\r\n\t\t\t\tlines = map(lines, classify)\r\n\t\t\t\tlines = lists(lines, true)\r\n\t\t\t\tlines = blocks_to_html(lines, true)\r\n\t\t\t\titemtext = table.concat(lines, \"\\n\")\r\n\t\t\t\tif not itemtext:find(\"<pre>\") then itemtext = indent(itemtext) end\r\n\t\t\t\treturn \"    <li>\" .. itemtext .. \"</li>\"\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\tlocal block_list = any_blanks(arr)\r\n\t\tlocal items = split_list_items(arr)\r\n\t\tlocal out = \"\"\r\n\t\tfor _, item in ipairs(items) do\r\n\t\t\tout = out .. process_list_item(item, block_list) .. \"\\n\"\r\n\t\tend\r\n\t\tif arr[1].list_type == \"numeric\" then\r\n\t\t\treturn \"<ol>\\n\" .. out .. \"</ol>\"\r\n\t\telse\r\n\t\t\treturn \"<ul>\\n\" .. out .. \"</ul>\"\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "local function any_blanks(arr)\r\n\t\t\tfor i = 1, #arr do\r\n\t\t\t\tif arr[i].type == \"blank\" then return true end\r\n\t\t\tend\r\n\t\t\treturn false\r\n\t\tend",
    "type": "function"
  }, {
    "id": 249,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 250,
    "text": "local function split_list_items(arr)\r\n\t\t\tlocal acc = {arr[1]}\r\n\t\t\tlocal res = {}\r\n\t\t\tfor i=2,#arr do\r\n\t\t\t\tif arr[i].type == \"list_item\" then\r\n\t\t\t\t\ttable.insert(res, acc)\r\n\t\t\t\t\tacc = {arr[i]}\r\n\t\t\t\telse\r\n\t\t\t\t\ttable.insert(acc, arr[i])\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\ttable.insert(res, acc)\r\n\t\t\treturn res\r\n\t\tend",
    "type": "function"
  }, {
    "id": 251,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 252,
    "text": "local function process_list_item(lines, block)\r\n\t\t\twhile lines[#lines].type == \"blank\" do\r\n\t\t\t\ttable.remove(lines)\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tlocal itemtext = lines[1].text\r\n\t\t\tfor i=2,#lines do\r\n\t\t\t\titemtext = itemtext .. \"\\n\" .. outdent(lines[i].line)\r\n\t\t\tend\r\n\t\t\tif block then\r\n\t\t\t\titemtext = block_transform(itemtext, true)\r\n\t\t\t\tif not itemtext:find(\"<pre>\") then itemtext = indent(itemtext) end\r\n\t\t\t\treturn \"    <li>\" .. itemtext .. \"</li>\"\r\n\t\t\telse\r\n\t\t\t\tlocal lines = split(itemtext)\r\n\t\t\t\tlines = map(lines, classify)\r\n\t\t\t\tlines = lists(lines, true)\r\n\t\t\t\tlines = blocks_to_html(lines, true)\r\n\t\t\t\titemtext = table.concat(lines, \"\\n\")\r\n\t\t\t\tif not itemtext:find(\"<pre>\") then itemtext = indent(itemtext) end\r\n\t\t\t\treturn \"    <li>\" .. itemtext .. \"</li>\"\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 253,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 254,
    "text": "local function find_list(array, sublist)\r\n\t\tlocal function find_list_start(array, sublist)\r\n\t\t\tif array[1].type == \"list_item\" then return 1 end\r\n\t\t\tif sublist then\r\n\t\t\t\tfor i = 1,#array do\r\n\t\t\t\t\tif array[i].type == \"list_item\" then return i end\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tfor i = 1, #array-1 do\r\n\t\t\t\t\tif array[i].type == \"blank\" and array[i+1].type == \"list_item\" then\r\n\t\t\t\t\t\treturn i+1\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\treturn nil\r\n\t\tend\r\n\t\tlocal function find_list_end(array, start)\r\n\t\t\tlocal pos = #array\r\n\t\t\tfor i = start, #array-1 do\r\n\t\t\t\tif array[i].type == \"blank\" and array[i+1].type ~= \"list_item\" \r\n\t\t\t\t\tand array[i+1].type ~= \"indented\" and array[i+1].type ~= \"blank\" then\r\n\t\t\t\t\tpos = i-1\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\twhile pos > start and array[pos].type == \"blank\" do\r\n\t\t\t\tpos = pos - 1\r\n\t\t\tend\r\n\t\t\treturn pos\r\n\t\tend\r\n\t\t\r\n\t\tlocal start = find_list_start(array, sublist)\r\n\t\tif not start then return nil end\r\n\t\treturn start, find_list_end(array, start)\r\n\tend",
    "type": "function"
  }, {
    "id": 255,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 256,
    "text": "local function find_list_start(array, sublist)\r\n\t\t\tif array[1].type == \"list_item\" then return 1 end\r\n\t\t\tif sublist then\r\n\t\t\t\tfor i = 1,#array do\r\n\t\t\t\t\tif array[i].type == \"list_item\" then return i end\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tfor i = 1, #array-1 do\r\n\t\t\t\t\tif array[i].type == \"blank\" and array[i+1].type == \"list_item\" then\r\n\t\t\t\t\t\treturn i+1\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\treturn nil\r\n\t\tend",
    "type": "function"
  }, {
    "id": 257,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 258,
    "text": "local function find_list_end(array, start)\r\n\t\t\tlocal pos = #array\r\n\t\t\tfor i = start, #array-1 do\r\n\t\t\t\tif array[i].type == \"blank\" and array[i+1].type ~= \"list_item\" \r\n\t\t\t\t\tand array[i+1].type ~= \"indented\" and array[i+1].type ~= \"blank\" then\r\n\t\t\t\t\tpos = i-1\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\twhile pos > start and array[pos].type == \"blank\" do\r\n\t\t\t\tpos = pos - 1\r\n\t\t\tend\r\n\t\t\treturn pos\r\n\t\tend",
    "type": "function"
  }, {
    "id": 259,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 260,
    "text": "function blockquotes(lines)\r\n\tlocal function find_blockquote(lines)\r\n\t\tlocal start\r\n\t\tfor i,line in ipairs(lines) do\r\n\t\t\tif line.type == \"blockquote\" then\r\n\t\t\t\tstart = i\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\t\tif not start then return nil end\r\n\t\t\r\n\t\tlocal stop = #lines\r\n\t\tfor i = start+1, #lines do\r\n\t\t\tif lines[i].type == \"blank\" or lines[i].type == \"blockquote\" then\r\n\t\t\telseif lines[i].type == \"normal\" then\r\n\t\t\t\tif lines[i-1].type == \"blank\" then stop = i-1 break end\r\n\t\t\telse\r\n\t\t\t\tstop = i-1 break\r\n\t\t\tend\r\n\t\tend\r\n\t\twhile lines[stop].type == \"blank\" do stop = stop - 1 end\r\n\t\treturn start, stop\r\n\tend\r\n\t\r\n\tlocal function process_blockquote(lines)\r\n\t\tlocal raw = lines[1].text\r\n\t\tfor i = 2,#lines do\r\n\t\t\traw = raw .. \"\\n\" .. lines[i].text\r\n\t\tend\r\n\t\tlocal bt = block_transform(raw)\r\n\t\tif not bt:find(\"<pre>\") then bt = indent(bt) end\r\n\t\treturn \"<blockquote>\\n    \" .. bt ..\r\n\t\t\t\"\\n</blockquote>\"\r\n\tend\r\n\t\r\n\twhile true do\r\n\t\tlocal start, stop = find_blockquote(lines)\r\n\t\tif not start then break end\r\n\t\tlocal text = process_blockquote(splice(lines, start, stop))\r\n\t\tlocal info = {\r\n\t\t\tline = text,\r\n\t\t\ttype = \"raw\",\r\n\t\t\thtml = text\r\n\t\t}\r\n\t\tlines = splice(lines, start, stop, {info})\r\n\tend\r\n\treturn lines\r\nend",
    "type": "function"
  }, {
    "id": 261,
    "text": "local function find_blockquote(lines)\r\n\t\tlocal start\r\n\t\tfor i,line in ipairs(lines) do\r\n\t\t\tif line.type == \"blockquote\" then\r\n\t\t\t\tstart = i\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\t\tif not start then return nil end\r\n\t\t\r\n\t\tlocal stop = #lines\r\n\t\tfor i = start+1, #lines do\r\n\t\t\tif lines[i].type == \"blank\" or lines[i].type == \"blockquote\" then\r\n\t\t\telseif lines[i].type == \"normal\" then\r\n\t\t\t\tif lines[i-1].type == \"blank\" then stop = i-1 break end\r\n\t\t\telse\r\n\t\t\t\tstop = i-1 break\r\n\t\t\tend\r\n\t\tend\r\n\t\twhile lines[stop].type == \"blank\" do stop = stop - 1 end\r\n\t\treturn start, stop\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 262,
    "text": "local start",
    "type": "statement:localassign"
  }, {
    "id": 263,
    "text": "for i,line in ipairs(lines) do\r\n\t\t\tif line.type == \"blockquote\" then\r\n\t\t\t\tstart = i\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 264,
    "text": "if line.type == \"blockquote\" then\r\n\t\t\t\tstart = i\r\n\t\t\t\tbreak\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 265,
    "text": "start = i",
    "type": "statement:assign"
  }, {
    "id": 266,
    "text": "local stop = #lines",
    "type": "statement:localassign"
  }, {
    "id": 267,
    "text": "for i = start+1, #lines do\r\n\t\t\tif lines[i].type == \"blank\" or lines[i].type == \"blockquote\" then\r\n\t\t\telseif lines[i].type == \"normal\" then\r\n\t\t\t\tif lines[i-1].type == \"blank\" then stop = i-1 break end\r\n\t\t\telse\r\n\t\t\t\tstop = i-1 break\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 268,
    "text": "if lines[i].type == \"blank\" or lines[i].type == \"blockquote\" then\r\n\t\t\telseif lines[i].type == \"normal\" then\r\n\t\t\t\tif lines[i-1].type == \"blank\" then stop = i-1 break end\r\n\t\t\telse\r\n\t\t\t\tstop = i-1 break\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 269,
    "text": "if lines[i-1].type == \"blank\" then stop = i-1 break end",
    "type": "statement:if"
  }, {
    "id": 270,
    "text": "stop = i-1",
    "type": "statement:assign"
  }, {
    "id": 271,
    "text": "while lines[stop].type == \"blank\" do stop = stop - 1 end",
    "type": "statement:while"
  }, {
    "id": 272,
    "text": "stop = stop - 1",
    "type": "statement:assign"
  }, {
    "id": 273,
    "text": "local function process_blockquote(lines)\r\n\t\tlocal raw = lines[1].text\r\n\t\tfor i = 2,#lines do\r\n\t\t\traw = raw .. \"\\n\" .. lines[i].text\r\n\t\tend\r\n\t\tlocal bt = block_transform(raw)\r\n\t\tif not bt:find(\"<pre>\") then bt = indent(bt) end\r\n\t\treturn \"<blockquote>\\n    \" .. bt ..\r\n\t\t\t\"\\n</blockquote>\"\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 274,
    "text": "local raw = lines[1].text",
    "type": "statement:localassign"
  }, {
    "id": 275,
    "text": "for i = 2,#lines do\r\n\t\t\traw = raw .. \"\\n\" .. lines[i].text\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 276,
    "text": "raw = raw .. \"\\n\" .. lines[i].text",
    "type": "statement:assign"
  }, {
    "id": 277,
    "text": "local bt = block_transform(raw)",
    "type": "statement:localassign"
  }, {
    "id": 278,
    "text": "if not bt:find(\"<pre>\") then bt = indent(bt) end",
    "type": "statement:if"
  }, {
    "id": 279,
    "text": "bt = indent(bt)",
    "type": "statement:assign"
  }, {
    "id": 280,
    "text": "while true do\r\n\t\tlocal start, stop = find_blockquote(lines)\r\n\t\tif not start then break end\r\n\t\tlocal text = process_blockquote(splice(lines, start, stop))\r\n\t\tlocal info = {\r\n\t\t\tline = text,\r\n\t\t\ttype = \"raw\",\r\n\t\t\thtml = text\r\n\t\t}\r\n\t\tlines = splice(lines, start, stop, {info})\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 281,
    "text": "local start, stop = find_blockquote(lines)",
    "type": "statement:localassign"
  }, {
    "id": 282,
    "text": "local text = process_blockquote(splice(lines, start, stop))",
    "type": "statement:localassign"
  }, {
    "id": 283,
    "text": "lines = splice(lines, start, stop, {info})",
    "type": "statement:assign"
  }, {
    "id": 284,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 285,
    "text": "local function find_blockquote(lines)\r\n\t\tlocal start\r\n\t\tfor i,line in ipairs(lines) do\r\n\t\t\tif line.type == \"blockquote\" then\r\n\t\t\t\tstart = i\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\t\tif not start then return nil end\r\n\t\t\r\n\t\tlocal stop = #lines\r\n\t\tfor i = start+1, #lines do\r\n\t\t\tif lines[i].type == \"blank\" or lines[i].type == \"blockquote\" then\r\n\t\t\telseif lines[i].type == \"normal\" then\r\n\t\t\t\tif lines[i-1].type == \"blank\" then stop = i-1 break end\r\n\t\t\telse\r\n\t\t\t\tstop = i-1 break\r\n\t\t\tend\r\n\t\tend\r\n\t\twhile lines[stop].type == \"blank\" do stop = stop - 1 end\r\n\t\treturn start, stop\r\n\tend",
    "type": "function"
  }, {
    "id": 286,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 287,
    "text": "local function process_blockquote(lines)\r\n\t\tlocal raw = lines[1].text\r\n\t\tfor i = 2,#lines do\r\n\t\t\traw = raw .. \"\\n\" .. lines[i].text\r\n\t\tend\r\n\t\tlocal bt = block_transform(raw)\r\n\t\tif not bt:find(\"<pre>\") then bt = indent(bt) end\r\n\t\treturn \"<blockquote>\\n    \" .. bt ..\r\n\t\t\t\"\\n</blockquote>\"\r\n\tend",
    "type": "function"
  }, {
    "id": 288,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 289,
    "text": "function codeblocks(lines)\r\n\tlocal function find_codeblock(lines)\r\n\t\tlocal start\r\n\t\tfor i,line in ipairs(lines) do\r\n\t\t\tif line.type == \"indented\" then start = i break end\r\n\t\tend\r\n\t\tif not start then return nil end\r\n\t\t\r\n\t\tlocal stop = #lines\r\n\t\tfor i = start+1, #lines do\r\n\t\t\tif lines[i].type ~= \"indented\" and lines[i].type ~= \"blank\" then\r\n\t\t\t\tstop = i-1\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\t\twhile lines[stop].type == \"blank\" do stop = stop - 1 end\r\n\t\treturn start, stop\r\n\tend\r\n\t\r\n\tlocal function process_codeblock(lines)\r\n\t\tlocal raw = detab(encode_code(outdent(lines[1].line)))\r\n\t\tfor i = 2,#lines do\r\n\t\t\traw = raw .. \"\\n\" .. detab(encode_code(outdent(lines[i].line)))\r\n\t\tend\r\n\t\treturn \"<pre><code>\" .. raw .. \"\\n</code></pre>\"\r\n\tend\r\n\t\r\n\twhile true do\r\n\t\tlocal start, stop = find_codeblock(lines)\r\n\t\tif not start then break end\r\n\t\tlocal text = process_codeblock(splice(lines, start, stop))\r\n\t\tlocal info = {\r\n\t\t\tline = text,\r\n\t\t\ttype = \"raw\",\r\n\t\t\thtml = text\r\n\t\t}\r\n\t\tlines = splice(lines, start, stop, {info})\r\n\tend\r\n\treturn lines\r\nend",
    "type": "function"
  }, {
    "id": 290,
    "text": "local function find_codeblock(lines)\r\n\t\tlocal start\r\n\t\tfor i,line in ipairs(lines) do\r\n\t\t\tif line.type == \"indented\" then start = i break end\r\n\t\tend\r\n\t\tif not start then return nil end\r\n\t\t\r\n\t\tlocal stop = #lines\r\n\t\tfor i = start+1, #lines do\r\n\t\t\tif lines[i].type ~= \"indented\" and lines[i].type ~= \"blank\" then\r\n\t\t\t\tstop = i-1\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\t\twhile lines[stop].type == \"blank\" do stop = stop - 1 end\r\n\t\treturn start, stop\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 291,
    "text": "for i,line in ipairs(lines) do\r\n\t\t\tif line.type == \"indented\" then start = i break end\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 292,
    "text": "if line.type == \"indented\" then start = i break end",
    "type": "statement:if"
  }, {
    "id": 293,
    "text": "for i = start+1, #lines do\r\n\t\t\tif lines[i].type ~= \"indented\" and lines[i].type ~= \"blank\" then\r\n\t\t\t\tstop = i-1\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 294,
    "text": "if lines[i].type ~= \"indented\" and lines[i].type ~= \"blank\" then\r\n\t\t\t\tstop = i-1\r\n\t\t\t\tbreak\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 295,
    "text": "local function process_codeblock(lines)\r\n\t\tlocal raw = detab(encode_code(outdent(lines[1].line)))\r\n\t\tfor i = 2,#lines do\r\n\t\t\traw = raw .. \"\\n\" .. detab(encode_code(outdent(lines[i].line)))\r\n\t\tend\r\n\t\treturn \"<pre><code>\" .. raw .. \"\\n</code></pre>\"\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 296,
    "text": "local raw = detab(encode_code(outdent(lines[1].line)))",
    "type": "statement:localassign"
  }, {
    "id": 297,
    "text": "for i = 2,#lines do\r\n\t\t\traw = raw .. \"\\n\" .. detab(encode_code(outdent(lines[i].line)))\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 298,
    "text": "raw = raw .. \"\\n\" .. detab(encode_code(outdent(lines[i].line)))",
    "type": "statement:assign"
  }, {
    "id": 299,
    "text": "while true do\r\n\t\tlocal start, stop = find_codeblock(lines)\r\n\t\tif not start then break end\r\n\t\tlocal text = process_codeblock(splice(lines, start, stop))\r\n\t\tlocal info = {\r\n\t\t\tline = text,\r\n\t\t\ttype = \"raw\",\r\n\t\t\thtml = text\r\n\t\t}\r\n\t\tlines = splice(lines, start, stop, {info})\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 300,
    "text": "local start, stop = find_codeblock(lines)",
    "type": "statement:localassign"
  }, {
    "id": 301,
    "text": "local text = process_codeblock(splice(lines, start, stop))",
    "type": "statement:localassign"
  }, {
    "id": 302,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 303,
    "text": "local function find_codeblock(lines)\r\n\t\tlocal start\r\n\t\tfor i,line in ipairs(lines) do\r\n\t\t\tif line.type == \"indented\" then start = i break end\r\n\t\tend\r\n\t\tif not start then return nil end\r\n\t\t\r\n\t\tlocal stop = #lines\r\n\t\tfor i = start+1, #lines do\r\n\t\t\tif lines[i].type ~= \"indented\" and lines[i].type ~= \"blank\" then\r\n\t\t\t\tstop = i-1\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\t\twhile lines[stop].type == \"blank\" do stop = stop - 1 end\r\n\t\treturn start, stop\r\n\tend",
    "type": "function"
  }, {
    "id": 304,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 305,
    "text": "local function process_codeblock(lines)\r\n\t\tlocal raw = detab(encode_code(outdent(lines[1].line)))\r\n\t\tfor i = 2,#lines do\r\n\t\t\traw = raw .. \"\\n\" .. detab(encode_code(outdent(lines[i].line)))\r\n\t\tend\r\n\t\treturn \"<pre><code>\" .. raw .. \"\\n</code></pre>\"\r\n\tend",
    "type": "function"
  }, {
    "id": 306,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 307,
    "text": "function blocks_to_html(lines, no_paragraphs)\r\n\tlocal out = {}\r\n\tlocal i = 1\r\n\twhile i <= #lines do\r\n\t\tlocal line = lines[i]\r\n\t\tif line.type == \"ruler\" then\r\n\t\t\ttable.insert(out, \"<hr/>\")\r\n\t\telseif line.type == \"raw\" then\r\n\t\t\ttable.insert(out, line.html)\r\n\t\telseif line.type == \"normal\" then\r\n\t\t\tlocal s = line.line\r\n\t\t\t\r\n\t\t\twhile i+1 <= #lines and lines[i+1].type == \"normal\" do\r\n\t\t\t\ti = i + 1\r\n\t\t\t\ts = s .. \"\\n\" .. lines[i].line\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif no_paragraphs then\r\n\t\t\t\ttable.insert(out, span_transform(s))\r\n\t\t\telse\r\n\t\t\t\ttable.insert(out, \"<p>\" .. span_transform(s) .. \"</p>\")\r\n\t\t\tend\r\n\t\telseif line.type == \"header\" then\r\n\t\t\tlocal s = \"<h\" .. line.level .. \">\" .. span_transform(line.text) .. \"</h\" .. line.level .. \">\"\r\n\t\t\ttable.insert(out, s)\r\n\t\telse\r\n\t\t\ttable.insert(out, line.line)\r\n\t\tend\r\n\t\ti = i + 1\r\n\tend\r\n\treturn out\r\nend",
    "type": "function"
  }, {
    "id": 308,
    "text": "while i <= #lines do\r\n\t\tlocal line = lines[i]\r\n\t\tif line.type == \"ruler\" then\r\n\t\t\ttable.insert(out, \"<hr/>\")\r\n\t\telseif line.type == \"raw\" then\r\n\t\t\ttable.insert(out, line.html)\r\n\t\telseif line.type == \"normal\" then\r\n\t\t\tlocal s = line.line\r\n\t\t\t\r\n\t\t\twhile i+1 <= #lines and lines[i+1].type == \"normal\" do\r\n\t\t\t\ti = i + 1\r\n\t\t\t\ts = s .. \"\\n\" .. lines[i].line\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif no_paragraphs then\r\n\t\t\t\ttable.insert(out, span_transform(s))\r\n\t\t\telse\r\n\t\t\t\ttable.insert(out, \"<p>\" .. span_transform(s) .. \"</p>\")\r\n\t\t\tend\r\n\t\telseif line.type == \"header\" then\r\n\t\t\tlocal s = \"<h\" .. line.level .. \">\" .. span_transform(line.text) .. \"</h\" .. line.level .. \">\"\r\n\t\t\ttable.insert(out, s)\r\n\t\telse\r\n\t\t\ttable.insert(out, line.line)\r\n\t\tend\r\n\t\ti = i + 1\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 309,
    "text": "local line = lines[i]",
    "type": "statement:localassign"
  }, {
    "id": 310,
    "text": "if line.type == \"ruler\" then\r\n\t\t\ttable.insert(out, \"<hr/>\")\r\n\t\telseif line.type == \"raw\" then\r\n\t\t\ttable.insert(out, line.html)\r\n\t\telseif line.type == \"normal\" then\r\n\t\t\tlocal s = line.line\r\n\t\t\t\r\n\t\t\twhile i+1 <= #lines and lines[i+1].type == \"normal\" do\r\n\t\t\t\ti = i + 1\r\n\t\t\t\ts = s .. \"\\n\" .. lines[i].line\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif no_paragraphs then\r\n\t\t\t\ttable.insert(out, span_transform(s))\r\n\t\t\telse\r\n\t\t\t\ttable.insert(out, \"<p>\" .. span_transform(s) .. \"</p>\")\r\n\t\t\tend\r\n\t\telseif line.type == \"header\" then\r\n\t\t\tlocal s = \"<h\" .. line.level .. \">\" .. span_transform(line.text) .. \"</h\" .. line.level .. \">\"\r\n\t\t\ttable.insert(out, s)\r\n\t\telse\r\n\t\t\ttable.insert(out, line.line)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 311,
    "text": "table.insert(out, \"<hr/>\")",
    "type": "statement:functioncall"
  }, {
    "id": 312,
    "text": "table.insert(out, line.html)",
    "type": "statement:functioncall"
  }, {
    "id": 313,
    "text": "local s = line.line",
    "type": "statement:localassign"
  }, {
    "id": 314,
    "text": "while i+1 <= #lines and lines[i+1].type == \"normal\" do\r\n\t\t\t\ti = i + 1\r\n\t\t\t\ts = s .. \"\\n\" .. lines[i].line\r\n\t\t\tend",
    "type": "statement:while"
  }, {
    "id": 315,
    "text": "s = s .. \"\\n\" .. lines[i].line",
    "type": "statement:assign"
  }, {
    "id": 316,
    "text": "if no_paragraphs then\r\n\t\t\t\ttable.insert(out, span_transform(s))\r\n\t\t\telse\r\n\t\t\t\ttable.insert(out, \"<p>\" .. span_transform(s) .. \"</p>\")\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 317,
    "text": "table.insert(out, span_transform(s))",
    "type": "statement:functioncall"
  }, {
    "id": 318,
    "text": "table.insert(out, \"<p>\" .. span_transform(s) .. \"</p>\")",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "local s = \"<h\" .. line.level .. \">\" .. span_transform(line.text) .. \"</h\" .. line.level .. \">\"",
    "type": "statement:localassign"
  }, {
    "id": 320,
    "text": "table.insert(out, s)",
    "type": "statement:functioncall"
  }, {
    "id": 321,
    "text": "table.insert(out, line.line)",
    "type": "statement:functioncall"
  }, {
    "id": 322,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 323,
    "text": "function block_transform(text, sublist)\r\n\tlocal lines = split(text)\r\n\tlines = map(lines, classify)\r\n\tlines = headers(lines)\r\n\tlines = lists(lines, sublist)\r\n\tlines = codeblocks(lines)\r\n\tlines = blockquotes(lines)\r\n\tlines = blocks_to_html(lines)\r\n\tlocal text = table.concat(lines, \"\\n\")\r\n\treturn text\r\nend",
    "type": "function"
  }, {
    "id": 324,
    "text": "local lines = split(text)",
    "type": "statement:localassign"
  }, {
    "id": 325,
    "text": "lines = headers(lines)",
    "type": "statement:assign"
  }, {
    "id": 326,
    "text": "lines = lists(lines, sublist)",
    "type": "statement:assign"
  }, {
    "id": 327,
    "text": "lines = codeblocks(lines)",
    "type": "statement:assign"
  }, {
    "id": 328,
    "text": "lines = blockquotes(lines)",
    "type": "statement:assign"
  }, {
    "id": 329,
    "text": "lines = blocks_to_html(lines)",
    "type": "statement:assign"
  }, {
    "id": 330,
    "text": "local text = table.concat(lines, \"\\n\")",
    "type": "statement:localassign"
  }, {
    "id": 331,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 332,
    "text": "function print_lines(lines)\r\n\tfor i, line in ipairs(lines) do\r\n\t\tprint(i, line.type, line.text or line.line)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 333,
    "text": "for i, line in ipairs(lines) do\r\n\t\tprint(i, line.type, line.text or line.line)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 334,
    "text": "print(i, line.type, line.text or line.line)",
    "type": "statement:functioncall"
  }, {
    "id": 335,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 336,
    "text": "function init_escape_table()\r\n\tescape_table = {}\r\n\tfor i = 1,#escape_chars do\r\n\t\tlocal c = escape_chars:sub(i,i)\r\n\t\tescape_table[c] = hash(c)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 337,
    "text": "escape_table = {}",
    "type": "statement:assign"
  }, {
    "id": 338,
    "text": "for i = 1,#escape_chars do\r\n\t\tlocal c = escape_chars:sub(i,i)\r\n\t\tescape_table[c] = hash(c)\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 339,
    "text": "local c = escape_chars:sub(i,i)",
    "type": "statement:localassign"
  }, {
    "id": 340,
    "text": "escape_table[c] = hash(c)",
    "type": "statement:assign"
  }, {
    "id": 341,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 342,
    "text": "function add_escape(text)\r\n\tif not escape_table[text] then\r\n\t\tescape_table[text] = hash(text)\r\n\tend\r\n\treturn escape_table[text]\r\nend",
    "type": "function"
  }, {
    "id": 343,
    "text": "if not escape_table[text] then\r\n\t\tescape_table[text] = hash(text)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 344,
    "text": "escape_table[text] = hash(text)",
    "type": "statement:assign"
  }, {
    "id": 345,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 346,
    "text": "function escape_special_chars(text)\r\n\tlocal tokens = tokenize_html(text)\r\n\t\r\n\tlocal out = \"\"\r\n\tfor _, token in ipairs(tokens) do\r\n\t\tlocal t = token.text\r\n\t\tif token.type == \"tag\" then\r\n\t\t\t-- In tags, encode * and _ so they don't conflict with their use in markdown.\r\n\t\t\tt = t:gsub(\"%*\", escape_table[\"*\"])\r\n\t\t\tt = t:gsub(\"%_\", escape_table[\"_\"])\r\n\t\telse\r\n\t\t\tt = encode_backslash_escapes(t)\r\n\t\tend\r\n\t\tout = out .. t\r\n\tend\r\n\treturn out\r\nend",
    "type": "function"
  }, {
    "id": 347,
    "text": "local tokens = tokenize_html(text)",
    "type": "statement:localassign"
  }, {
    "id": 348,
    "text": "for _, token in ipairs(tokens) do\r\n\t\tlocal t = token.text\r\n\t\tif token.type == \"tag\" then\r\n\t\t\t-- In tags, encode * and _ so they don't conflict with their use in markdown.\r\n\t\t\tt = t:gsub(\"%*\", escape_table[\"*\"])\r\n\t\t\tt = t:gsub(\"%_\", escape_table[\"_\"])\r\n\t\telse\r\n\t\t\tt = encode_backslash_escapes(t)\r\n\t\tend\r\n\t\tout = out .. t\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 349,
    "text": "local t = token.text",
    "type": "statement:localassign"
  }, {
    "id": 350,
    "text": "if token.type == \"tag\" then\r\n\t\t\t-- In tags, encode * and _ so they don't conflict with their use in markdown.\r\n\t\t\tt = t:gsub(\"%*\", escape_table[\"*\"])\r\n\t\t\tt = t:gsub(\"%_\", escape_table[\"_\"])\r\n\t\telse\r\n\t\t\tt = encode_backslash_escapes(t)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 351,
    "text": "t = t:gsub(\"%*\", escape_table[\"*\"])",
    "type": "statement:assign"
  }, {
    "id": 352,
    "text": "t = t:gsub(\"%_\", escape_table[\"_\"])",
    "type": "statement:assign"
  }, {
    "id": 353,
    "text": "t = encode_backslash_escapes(t)",
    "type": "statement:assign"
  }, {
    "id": 354,
    "text": "out = out .. t",
    "type": "statement:assign"
  }, {
    "id": 355,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 356,
    "text": "function encode_backslash_escapes(t)\r\n\tfor i=1,escape_chars:len() do\r\n\t\tlocal c = escape_chars:sub(i,i)\r\n\t\tt = t:gsub(\"\\\\%\" .. c, escape_table[c])\r\n\tend\r\n\treturn t\r\nend",
    "type": "function"
  }, {
    "id": 357,
    "text": "for i=1,escape_chars:len() do\r\n\t\tlocal c = escape_chars:sub(i,i)\r\n\t\tt = t:gsub(\"\\\\%\" .. c, escape_table[c])\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 358,
    "text": "t = t:gsub(\"\\\\%\" .. c, escape_table[c])",
    "type": "statement:assign"
  }, {
    "id": 359,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 360,
    "text": "function unescape_special_chars(t)\r\n\tlocal tin = t\r\n\tfor k,v in pairs(escape_table) do\r\n\t\tk = k:gsub(\"%%\", \"%%%%\")\r\n\t\tt = t:gsub(v,k)\r\n\tend\r\n\tif t ~= tin then t = unescape_special_chars(t) end\r\n\treturn t\r\nend",
    "type": "function"
  }, {
    "id": 361,
    "text": "local tin = t",
    "type": "statement:localassign"
  }, {
    "id": 362,
    "text": "for k,v in pairs(escape_table) do\r\n\t\tk = k:gsub(\"%%\", \"%%%%\")\r\n\t\tt = t:gsub(v,k)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 363,
    "text": "k = k:gsub(\"%%\", \"%%%%\")",
    "type": "statement:assign"
  }, {
    "id": 364,
    "text": "t = t:gsub(v,k)",
    "type": "statement:assign"
  }, {
    "id": 365,
    "text": "if t ~= tin then t = unescape_special_chars(t) end",
    "type": "statement:if"
  }, {
    "id": 366,
    "text": "t = unescape_special_chars(t)",
    "type": "statement:assign"
  }, {
    "id": 367,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 368,
    "text": "function encode_code(s)\r\n\ts = s:gsub(\"%&\", \"&amp;\")\r\n\ts = s:gsub(\"<\", \"&lt;\")\r\n\ts = s:gsub(\">\", \"&gt;\")\r\n\tfor k,v in pairs(escape_table) do\r\n\t\ts = s:gsub(\"%\"..k, v)\r\n\tend\r\n\treturn s\r\nend",
    "type": "function"
  }, {
    "id": 369,
    "text": "s = s:gsub(\"%&\", \"&amp;\")",
    "type": "statement:assign"
  }, {
    "id": 370,
    "text": "s = s:gsub(\"<\", \"&lt;\")",
    "type": "statement:assign"
  }, {
    "id": 371,
    "text": "s = s:gsub(\">\", \"&gt;\")",
    "type": "statement:assign"
  }, {
    "id": 372,
    "text": "for k,v in pairs(escape_table) do\r\n\t\ts = s:gsub(\"%\"..k, v)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 373,
    "text": "s = s:gsub(\"%\"..k, v)",
    "type": "statement:assign"
  }, {
    "id": 374,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 375,
    "text": "function code_spans(s)\r\n\ts = s:gsub(\"\\\\\\\\\", escape_table[\"\\\\\"])\r\n\ts = s:gsub(\"\\\\`\", escape_table[\"`\"])\r\n\r\n\tlocal pos = 1\r\n\twhile true do\r\n\t\tlocal start, stop = s:find(\"`+\", pos)\r\n\t\tif not start then return s end\r\n\t\tlocal count = stop - start + 1\r\n\t\t-- Find a matching numbert of backticks\r\n\t\tlocal estart, estop = s:find(string.rep(\"`\", count), stop+1)\r\n\t\tlocal brstart = s:find(\"\\n\", stop+1)\r\n\t\tif estart and (not brstart or estart < brstart) then\r\n\t\t\tlocal code = s:sub(stop+1, estart-1)\r\n\t\t\tcode = code:gsub(\"^[ \\t]+\", \"\")\r\n\t\t\tcode = code:gsub(\"[ \\t]+$\", \"\")\r\n\t\t\tcode = code:gsub(escape_table[\"\\\\\"], escape_table[\"\\\\\"] .. escape_table[\"\\\\\"])\r\n\t\t\tcode = code:gsub(escape_table[\"`\"], escape_table[\"\\\\\"] .. escape_table[\"`\"])\r\n\t\t\tcode = \"<code>\" .. encode_code(code) .. \"</code>\"\r\n\t\t\tcode = add_escape(code)\r\n\t\t\ts = s:sub(1, start-1) .. code .. s:sub(estop+1)\r\n\t\t\tpos = start + code:len()\r\n\t\telse\r\n\t\t\tpos = stop + 1\r\n\t\tend\r\n\tend\r\n\treturn s\r\nend",
    "type": "function"
  }, {
    "id": 376,
    "text": "s = s:gsub(\"\\\\\\\\\", escape_table[\"\\\\\"])",
    "type": "statement:assign"
  }, {
    "id": 377,
    "text": "s = s:gsub(\"\\\\`\", escape_table[\"`\"])",
    "type": "statement:assign"
  }, {
    "id": 378,
    "text": "while true do\r\n\t\tlocal start, stop = s:find(\"`+\", pos)\r\n\t\tif not start then return s end\r\n\t\tlocal count = stop - start + 1\r\n\t\t-- Find a matching numbert of backticks\r\n\t\tlocal estart, estop = s:find(string.rep(\"`\", count), stop+1)\r\n\t\tlocal brstart = s:find(\"\\n\", stop+1)\r\n\t\tif estart and (not brstart or estart < brstart) then\r\n\t\t\tlocal code = s:sub(stop+1, estart-1)\r\n\t\t\tcode = code:gsub(\"^[ \\t]+\", \"\")\r\n\t\t\tcode = code:gsub(\"[ \\t]+$\", \"\")\r\n\t\t\tcode = code:gsub(escape_table[\"\\\\\"], escape_table[\"\\\\\"] .. escape_table[\"\\\\\"])\r\n\t\t\tcode = code:gsub(escape_table[\"`\"], escape_table[\"\\\\\"] .. escape_table[\"`\"])\r\n\t\t\tcode = \"<code>\" .. encode_code(code) .. \"</code>\"\r\n\t\t\tcode = add_escape(code)\r\n\t\t\ts = s:sub(1, start-1) .. code .. s:sub(estop+1)\r\n\t\t\tpos = start + code:len()\r\n\t\telse\r\n\t\t\tpos = stop + 1\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 379,
    "text": "local start, stop = s:find(\"`+\", pos)",
    "type": "statement:localassign"
  }, {
    "id": 380,
    "text": "if not start then return s end",
    "type": "statement:if"
  }, {
    "id": 381,
    "text": "local count = stop - start + 1",
    "type": "statement:localassign"
  }, {
    "id": 382,
    "text": "local estart, estop = s:find(string.rep(\"`\", count), stop+1)",
    "type": "statement:localassign"
  }, {
    "id": 383,
    "text": "local brstart = s:find(\"\\n\", stop+1)",
    "type": "statement:localassign"
  }, {
    "id": 384,
    "text": "if estart and (not brstart or estart < brstart) then\r\n\t\t\tlocal code = s:sub(stop+1, estart-1)\r\n\t\t\tcode = code:gsub(\"^[ \\t]+\", \"\")\r\n\t\t\tcode = code:gsub(\"[ \\t]+$\", \"\")\r\n\t\t\tcode = code:gsub(escape_table[\"\\\\\"], escape_table[\"\\\\\"] .. escape_table[\"\\\\\"])\r\n\t\t\tcode = code:gsub(escape_table[\"`\"], escape_table[\"\\\\\"] .. escape_table[\"`\"])\r\n\t\t\tcode = \"<code>\" .. encode_code(code) .. \"</code>\"\r\n\t\t\tcode = add_escape(code)\r\n\t\t\ts = s:sub(1, start-1) .. code .. s:sub(estop+1)\r\n\t\t\tpos = start + code:len()\r\n\t\telse\r\n\t\t\tpos = stop + 1\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 385,
    "text": "local code = s:sub(stop+1, estart-1)",
    "type": "statement:localassign"
  }, {
    "id": 386,
    "text": "code = code:gsub(\"^[ \\t]+\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 387,
    "text": "code = code:gsub(\"[ \\t]+$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 388,
    "text": "code = code:gsub(escape_table[\"\\\\\"], escape_table[\"\\\\\"] .. escape_table[\"\\\\\"])",
    "type": "statement:assign"
  }, {
    "id": 389,
    "text": "code = code:gsub(escape_table[\"`\"], escape_table[\"\\\\\"] .. escape_table[\"`\"])",
    "type": "statement:assign"
  }, {
    "id": 390,
    "text": "code = \"<code>\" .. encode_code(code) .. \"</code>\"",
    "type": "statement:assign"
  }, {
    "id": 391,
    "text": "code = add_escape(code)",
    "type": "statement:assign"
  }, {
    "id": 392,
    "text": "s = s:sub(1, start-1) .. code .. s:sub(estop+1)",
    "type": "statement:assign"
  }, {
    "id": 393,
    "text": "pos = start + code:len()",
    "type": "statement:assign"
  }, {
    "id": 394,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 395,
    "text": "function encode_alt(s)\r\n\tif not s then return s end\r\n\ts = s:gsub('&', '&amp;')\r\n\ts = s:gsub('\"', '&quot;')\r\n\ts = s:gsub('<', '&lt;')\r\n\treturn s\r\nend",
    "type": "function"
  }, {
    "id": 396,
    "text": "if not s then return s end",
    "type": "statement:if"
  }, {
    "id": 397,
    "text": "s = s:gsub('&', '&amp;')",
    "type": "statement:assign"
  }, {
    "id": 398,
    "text": "s = s:gsub('\"', '&quot;')",
    "type": "statement:assign"
  }, {
    "id": 399,
    "text": "s = s:gsub('<', '&lt;')",
    "type": "statement:assign"
  }, {
    "id": 400,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 401,
    "text": "function images(text)\r\n\tlocal function reference_link(alt, id)\r\n\t\talt = encode_alt(alt:match(\"%b[]\"):sub(2,-2))\r\n\t\tid = id:match(\"%[(.*)%]\"):lower()\r\n\t\tif id == \"\" then id = text:lower() end\r\n\t\tlink_database[id] = link_database[id] or {}\r\n\t\tif not link_database[id].url then return nil end\r\n\t\tlocal url = link_database[id].url or id\r\n\t\turl = encode_alt(url)\r\n\t\tlocal title = encode_alt(link_database[id].title)\r\n\t\tif title then title = \" title=\\\"\" .. title .. \"\\\"\" else title = \"\" end\r\n\t\treturn add_escape ('<img src=\"' .. url .. '\" alt=\"' .. alt .. '\"' .. title .. \"/>\")\r\n\tend\r\n\t\r\n\tlocal function inline_link(alt, link)\r\n\t\talt = encode_alt(alt:match(\"%b[]\"):sub(2,-2))\r\n\t\tlocal url, title = link:match(\"%(<?(.-)>?[ \\t]*['\\\"](.+)['\\\"]\")\r\n\t\turl = url or link:match(\"%(<?(.-)>?%)\")\r\n\t\turl = encode_alt(url)\r\n\t\ttitle = encode_alt(title)\r\n\t\tif title then\r\n\t\t\treturn add_escape('<img src=\"' .. url .. '\" alt=\"' .. alt .. '\" title=\"' .. title .. '\"/>')\r\n\t\telse\r\n\t\t\treturn add_escape('<img src=\"' .. url .. '\" alt=\"' .. alt .. '\"/>')\r\n\t\tend\r\n\tend\r\n\t\r\n\ttext = text:gsub(\"!(%b[])[ \\t]*\\n?[ \\t]*(%b[])\", reference_link)\r\n\ttext = text:gsub(\"!(%b[])(%b())\", inline_link)\r\n\treturn text\r\nend",
    "type": "function"
  }, {
    "id": 402,
    "text": "local function reference_link(alt, id)\r\n\t\talt = encode_alt(alt:match(\"%b[]\"):sub(2,-2))\r\n\t\tid = id:match(\"%[(.*)%]\"):lower()\r\n\t\tif id == \"\" then id = text:lower() end\r\n\t\tlink_database[id] = link_database[id] or {}\r\n\t\tif not link_database[id].url then return nil end\r\n\t\tlocal url = link_database[id].url or id\r\n\t\turl = encode_alt(url)\r\n\t\tlocal title = encode_alt(link_database[id].title)\r\n\t\tif title then title = \" title=\\\"\" .. title .. \"\\\"\" else title = \"\" end\r\n\t\treturn add_escape ('<img src=\"' .. url .. '\" alt=\"' .. alt .. '\"' .. title .. \"/>\")\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 403,
    "text": "alt = encode_alt(alt:match(\"%b[]\"):sub(2,-2))",
    "type": "statement:assign"
  }, {
    "id": 404,
    "text": "id = id:match(\"%[(.*)%]\"):lower()",
    "type": "statement:assign"
  }, {
    "id": 405,
    "text": "if id == \"\" then id = text:lower() end",
    "type": "statement:if"
  }, {
    "id": 406,
    "text": "id = text:lower()",
    "type": "statement:assign"
  }, {
    "id": 407,
    "text": "link_database[id] = link_database[id] or {}",
    "type": "statement:assign"
  }, {
    "id": 408,
    "text": "if not link_database[id].url then return nil end",
    "type": "statement:if"
  }, {
    "id": 409,
    "text": "local url = link_database[id].url or id",
    "type": "statement:localassign"
  }, {
    "id": 410,
    "text": "url = encode_alt(url)",
    "type": "statement:assign"
  }, {
    "id": 411,
    "text": "local title = encode_alt(link_database[id].title)",
    "type": "statement:localassign"
  }, {
    "id": 412,
    "text": "if title then title = \" title=\\\"\" .. title .. \"\\\"\" else title = \"\" end",
    "type": "statement:if"
  }, {
    "id": 413,
    "text": "title = \" title=\\\"\" .. title .. \"\\\"\"",
    "type": "statement:assign"
  }, {
    "id": 414,
    "text": "title = \"\"",
    "type": "statement:assign"
  }, {
    "id": 415,
    "text": "local function inline_link(alt, link)\r\n\t\talt = encode_alt(alt:match(\"%b[]\"):sub(2,-2))\r\n\t\tlocal url, title = link:match(\"%(<?(.-)>?[ \\t]*['\\\"](.+)['\\\"]\")\r\n\t\turl = url or link:match(\"%(<?(.-)>?%)\")\r\n\t\turl = encode_alt(url)\r\n\t\ttitle = encode_alt(title)\r\n\t\tif title then\r\n\t\t\treturn add_escape('<img src=\"' .. url .. '\" alt=\"' .. alt .. '\" title=\"' .. title .. '\"/>')\r\n\t\telse\r\n\t\t\treturn add_escape('<img src=\"' .. url .. '\" alt=\"' .. alt .. '\"/>')\r\n\t\tend\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 416,
    "text": "local url, title = link:match(\"%(<?(.-)>?[ \\t]*['\\\"](.+)['\\\"]\")",
    "type": "statement:localassign"
  }, {
    "id": 417,
    "text": "url = url or link:match(\"%(<?(.-)>?%)\")",
    "type": "statement:assign"
  }, {
    "id": 418,
    "text": "title = encode_alt(title)",
    "type": "statement:assign"
  }, {
    "id": 419,
    "text": "if title then\r\n\t\t\treturn add_escape('<img src=\"' .. url .. '\" alt=\"' .. alt .. '\" title=\"' .. title .. '\"/>')\r\n\t\telse\r\n\t\t\treturn add_escape('<img src=\"' .. url .. '\" alt=\"' .. alt .. '\"/>')\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 420,
    "text": "text = text:gsub(\"!(%b[])[ \\t]*\\n?[ \\t]*(%b[])\", reference_link)",
    "type": "statement:assign"
  }, {
    "id": 421,
    "text": "text = text:gsub(\"!(%b[])(%b())\", inline_link)",
    "type": "statement:assign"
  }, {
    "id": 422,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 423,
    "text": "local function reference_link(alt, id)\r\n\t\talt = encode_alt(alt:match(\"%b[]\"):sub(2,-2))\r\n\t\tid = id:match(\"%[(.*)%]\"):lower()\r\n\t\tif id == \"\" then id = text:lower() end\r\n\t\tlink_database[id] = link_database[id] or {}\r\n\t\tif not link_database[id].url then return nil end\r\n\t\tlocal url = link_database[id].url or id\r\n\t\turl = encode_alt(url)\r\n\t\tlocal title = encode_alt(link_database[id].title)\r\n\t\tif title then title = \" title=\\\"\" .. title .. \"\\\"\" else title = \"\" end\r\n\t\treturn add_escape ('<img src=\"' .. url .. '\" alt=\"' .. alt .. '\"' .. title .. \"/>\")\r\n\tend",
    "type": "function"
  }, {
    "id": 424,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 425,
    "text": "local function inline_link(alt, link)\r\n\t\talt = encode_alt(alt:match(\"%b[]\"):sub(2,-2))\r\n\t\tlocal url, title = link:match(\"%(<?(.-)>?[ \\t]*['\\\"](.+)['\\\"]\")\r\n\t\turl = url or link:match(\"%(<?(.-)>?%)\")\r\n\t\turl = encode_alt(url)\r\n\t\ttitle = encode_alt(title)\r\n\t\tif title then\r\n\t\t\treturn add_escape('<img src=\"' .. url .. '\" alt=\"' .. alt .. '\" title=\"' .. title .. '\"/>')\r\n\t\telse\r\n\t\t\treturn add_escape('<img src=\"' .. url .. '\" alt=\"' .. alt .. '\"/>')\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 426,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 427,
    "text": "function anchors(text)\r\n\tlocal function reference_link(text, id)\r\n\t\ttext = text:match(\"%b[]\"):sub(2,-2)\r\n\t\tid = id:match(\"%b[]\"):sub(2,-2):lower()\r\n\t\tif id == \"\" then id = text:lower() end\r\n\t\tlink_database[id] = link_database[id] or {}\r\n\t\tif not link_database[id].url then return nil end\r\n\t\tlocal url = link_database[id].url or id\r\n\t\turl = encode_alt(url)\r\n\t\tlocal title = encode_alt(link_database[id].title)\r\n\t\tif title then title = \" title=\\\"\" .. title .. \"\\\"\" else title = \"\" end\r\n\t\treturn add_escape(\"<a href=\\\"\" .. url .. \"\\\"\" .. title .. \">\") .. text .. add_escape(\"</a>\")\r\n\tend\r\n\t\r\n\tlocal function inline_link(text, link)\r\n\t\ttext = text:match(\"%b[]\"):sub(2,-2)\r\n\t\tlocal url, title = link:match(\"%(<?(.-)>?[ \\t]*['\\\"](.+)['\\\"]\")\r\n\t\ttitle = encode_alt(title)\r\n\t\turl  = url or  link:match(\"%(<?(.-)>?%)\") or \"\"\r\n\t\turl = encode_alt(url)\r\n\t\tif title then\r\n\t\t\treturn add_escape(\"<a href=\\\"\" .. url .. \"\\\" title=\\\"\" .. title .. \"\\\">\") .. text .. \"</a>\"\r\n\t\telse\r\n\t\t\treturn add_escape(\"<a href=\\\"\" .. url .. \"\\\">\") .. text .. add_escape(\"</a>\")\r\n\t\tend\r\n\tend\r\n\t\r\n\ttext = text:gsub(\"(%b[])[ \\t]*\\n?[ \\t]*(%b[])\", reference_link)\r\n\ttext = text:gsub(\"(%b[])(%b())\", inline_link)\r\n\treturn text\r\nend",
    "type": "function"
  }, {
    "id": 428,
    "text": "local function reference_link(text, id)\r\n\t\ttext = text:match(\"%b[]\"):sub(2,-2)\r\n\t\tid = id:match(\"%b[]\"):sub(2,-2):lower()\r\n\t\tif id == \"\" then id = text:lower() end\r\n\t\tlink_database[id] = link_database[id] or {}\r\n\t\tif not link_database[id].url then return nil end\r\n\t\tlocal url = link_database[id].url or id\r\n\t\turl = encode_alt(url)\r\n\t\tlocal title = encode_alt(link_database[id].title)\r\n\t\tif title then title = \" title=\\\"\" .. title .. \"\\\"\" else title = \"\" end\r\n\t\treturn add_escape(\"<a href=\\\"\" .. url .. \"\\\"\" .. title .. \">\") .. text .. add_escape(\"</a>\")\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 429,
    "text": "text = text:match(\"%b[]\"):sub(2,-2)",
    "type": "statement:assign"
  }, {
    "id": 430,
    "text": "id = id:match(\"%b[]\"):sub(2,-2):lower()",
    "type": "statement:assign"
  }, {
    "id": 431,
    "text": "local function inline_link(text, link)\r\n\t\ttext = text:match(\"%b[]\"):sub(2,-2)\r\n\t\tlocal url, title = link:match(\"%(<?(.-)>?[ \\t]*['\\\"](.+)['\\\"]\")\r\n\t\ttitle = encode_alt(title)\r\n\t\turl  = url or  link:match(\"%(<?(.-)>?%)\") or \"\"\r\n\t\turl = encode_alt(url)\r\n\t\tif title then\r\n\t\t\treturn add_escape(\"<a href=\\\"\" .. url .. \"\\\" title=\\\"\" .. title .. \"\\\">\") .. text .. \"</a>\"\r\n\t\telse\r\n\t\t\treturn add_escape(\"<a href=\\\"\" .. url .. \"\\\">\") .. text .. add_escape(\"</a>\")\r\n\t\tend\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 432,
    "text": "url  = url or  link:match(\"%(<?(.-)>?%)\") or \"\"",
    "type": "statement:assign"
  }, {
    "id": 433,
    "text": "if title then\r\n\t\t\treturn add_escape(\"<a href=\\\"\" .. url .. \"\\\" title=\\\"\" .. title .. \"\\\">\") .. text .. \"</a>\"\r\n\t\telse\r\n\t\t\treturn add_escape(\"<a href=\\\"\" .. url .. \"\\\">\") .. text .. add_escape(\"</a>\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 434,
    "text": "text = text:gsub(\"(%b[])[ \\t]*\\n?[ \\t]*(%b[])\", reference_link)",
    "type": "statement:assign"
  }, {
    "id": 435,
    "text": "text = text:gsub(\"(%b[])(%b())\", inline_link)",
    "type": "statement:assign"
  }, {
    "id": 436,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 437,
    "text": "local function reference_link(text, id)\r\n\t\ttext = text:match(\"%b[]\"):sub(2,-2)\r\n\t\tid = id:match(\"%b[]\"):sub(2,-2):lower()\r\n\t\tif id == \"\" then id = text:lower() end\r\n\t\tlink_database[id] = link_database[id] or {}\r\n\t\tif not link_database[id].url then return nil end\r\n\t\tlocal url = link_database[id].url or id\r\n\t\turl = encode_alt(url)\r\n\t\tlocal title = encode_alt(link_database[id].title)\r\n\t\tif title then title = \" title=\\\"\" .. title .. \"\\\"\" else title = \"\" end\r\n\t\treturn add_escape(\"<a href=\\\"\" .. url .. \"\\\"\" .. title .. \">\") .. text .. add_escape(\"</a>\")\r\n\tend",
    "type": "function"
  }, {
    "id": 438,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 439,
    "text": "local function inline_link(text, link)\r\n\t\ttext = text:match(\"%b[]\"):sub(2,-2)\r\n\t\tlocal url, title = link:match(\"%(<?(.-)>?[ \\t]*['\\\"](.+)['\\\"]\")\r\n\t\ttitle = encode_alt(title)\r\n\t\turl  = url or  link:match(\"%(<?(.-)>?%)\") or \"\"\r\n\t\turl = encode_alt(url)\r\n\t\tif title then\r\n\t\t\treturn add_escape(\"<a href=\\\"\" .. url .. \"\\\" title=\\\"\" .. title .. \"\\\">\") .. text .. \"</a>\"\r\n\t\telse\r\n\t\t\treturn add_escape(\"<a href=\\\"\" .. url .. \"\\\">\") .. text .. add_escape(\"</a>\")\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 440,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 441,
    "text": "function auto_links(text)\r\n\tlocal function link(s)\r\n\t\treturn add_escape(\"<a href=\\\"\" .. s .. \"\\\">\") .. s .. \"</a>\"\r\n\tend\r\n\t-- Encode chars as a mix of dec and hex entitites to (perhaps) fool\r\n\t-- spambots.\r\n\tlocal function encode_email_address(s)\r\n\t\t-- Use a deterministic encoding to make unit testing possible.\r\n\t\t-- Code 45% hex, 45% dec, 10% plain.\r\n\t\tlocal hex = {code = function(c) return \"&#x\" .. string.format(\"%x\", c:byte()) .. \";\" end, count = 1, rate = 0.45}\r\n\t\tlocal dec = {code = function(c) return \"&#\" .. c:byte() .. \";\" end, count = 0, rate = 0.45}\r\n\t\tlocal plain = {code = function(c) return c end, count = 0, rate = 0.1}\r\n\t\tlocal codes = {hex, dec, plain}\r\n\t\tlocal function swap(t,k1,k2) local temp = t[k2] t[k2] = t[k1] t[k1] = temp end\r\n\t\t\r\n\t\tlocal out = \"\"\r\n\t\tfor i = 1,s:len() do\r\n\t\t\tfor _,code in ipairs(codes) do code.count = code.count + code.rate end\r\n\t\t\tif codes[1].count < codes[2].count then swap(codes,1,2) end\r\n\t\t\tif codes[2].count < codes[3].count then swap(codes,2,3) end\r\n\t\t\tif codes[1].count < codes[2].count then swap(codes,1,2) end\r\n\t\t\t\r\n\t\t\tlocal code = codes[1]\r\n\t\t\tlocal c = s:sub(i,i)\r\n\t\t\t-- Force encoding of \"@\" to make email address more invisible.\r\n\t\t\tif c == \"@\" and code == plain then code = codes[2] end\r\n\t\t\tout = out .. code.code(c)\r\n\t\t\tcode.count = code.count - 1\r\n\t\tend\t\r\n\t\treturn out\r\n\tend\r\n\tlocal function mail(s)\r\n\t\ts = unescape_special_chars(s)\r\n\t\tlocal address = encode_email_address(\"mailto:\" .. s)\r\n\t\tlocal text = encode_email_address(s)\r\n\t\treturn add_escape(\"<a href=\\\"\" .. address .. \"\\\">\") .. text .. \"</a>\"\r\n\tend\r\n\t-- links\r\n\ttext = text:gsub(\"<(https?:[^'\\\">%s]+)>\", link)\r\n\ttext = text:gsub(\"<(ftp:[^'\\\">%s]+)>\", link)\r\n\t\r\n\t-- mail\r\n\ttext = text:gsub(\"<mailto:([^'\\\">%s]+)>\", mail)\r\n\ttext = text:gsub(\"<([-.%w]+%@[-.%w]+)>\", mail)\r\n\treturn text\r\nend",
    "type": "function"
  }, {
    "id": 442,
    "text": "local function link(s)\r\n\t\treturn add_escape(\"<a href=\\\"\" .. s .. \"\\\">\") .. s .. \"</a>\"\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 443,
    "text": "local function encode_email_address(s)\r\n\t\t-- Use a deterministic encoding to make unit testing possible.\r\n\t\t-- Code 45% hex, 45% dec, 10% plain.\r\n\t\tlocal hex = {code = function(c) return \"&#x\" .. string.format(\"%x\", c:byte()) .. \";\" end, count = 1, rate = 0.45}\r\n\t\tlocal dec = {code = function(c) return \"&#\" .. c:byte() .. \";\" end, count = 0, rate = 0.45}\r\n\t\tlocal plain = {code = function(c) return c end, count = 0, rate = 0.1}\r\n\t\tlocal codes = {hex, dec, plain}\r\n\t\tlocal function swap(t,k1,k2) local temp = t[k2] t[k2] = t[k1] t[k1] = temp end\r\n\t\t\r\n\t\tlocal out = \"\"\r\n\t\tfor i = 1,s:len() do\r\n\t\t\tfor _,code in ipairs(codes) do code.count = code.count + code.rate end\r\n\t\t\tif codes[1].count < codes[2].count then swap(codes,1,2) end\r\n\t\t\tif codes[2].count < codes[3].count then swap(codes,2,3) end\r\n\t\t\tif codes[1].count < codes[2].count then swap(codes,1,2) end\r\n\t\t\t\r\n\t\t\tlocal code = codes[1]\r\n\t\t\tlocal c = s:sub(i,i)\r\n\t\t\t-- Force encoding of \"@\" to make email address more invisible.\r\n\t\t\tif c == \"@\" and code == plain then code = codes[2] end\r\n\t\t\tout = out .. code.code(c)\r\n\t\t\tcode.count = code.count - 1\r\n\t\tend\t\r\n\t\treturn out\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 444,
    "text": "local hex = {code = function(c) return \"&#x\" .. string.format(\"%x\", c:byte()) .. \";\" end, count = 1, rate = 0.45}",
    "type": "statement:localassign"
  }, {
    "id": 445,
    "text": "local dec = {code = function(c) return \"&#\" .. c:byte() .. \";\" end, count = 0, rate = 0.45}",
    "type": "statement:localassign"
  }, {
    "id": 446,
    "text": "local plain = {code = function(c) return c end, count = 0, rate = 0.1}",
    "type": "statement:localassign"
  }, {
    "id": 447,
    "text": "local codes = {hex, dec, plain}",
    "type": "statement:localassign"
  }, {
    "id": 448,
    "text": "local function swap(t,k1,k2) local temp = t[k2] t[k2] = t[k1] t[k1] = temp end",
    "type": "statement:localfunction"
  }, {
    "id": 449,
    "text": "local temp = t[k2]",
    "type": "statement:localassign"
  }, {
    "id": 450,
    "text": "t[k2] = t[k1]",
    "type": "statement:assign"
  }, {
    "id": 451,
    "text": "t[k1] = temp",
    "type": "statement:assign"
  }, {
    "id": 452,
    "text": "for i = 1,s:len() do\r\n\t\t\tfor _,code in ipairs(codes) do code.count = code.count + code.rate end\r\n\t\t\tif codes[1].count < codes[2].count then swap(codes,1,2) end\r\n\t\t\tif codes[2].count < codes[3].count then swap(codes,2,3) end\r\n\t\t\tif codes[1].count < codes[2].count then swap(codes,1,2) end\r\n\t\t\t\r\n\t\t\tlocal code = codes[1]\r\n\t\t\tlocal c = s:sub(i,i)\r\n\t\t\t-- Force encoding of \"@\" to make email address more invisible.\r\n\t\t\tif c == \"@\" and code == plain then code = codes[2] end\r\n\t\t\tout = out .. code.code(c)\r\n\t\t\tcode.count = code.count - 1\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 453,
    "text": "for _,code in ipairs(codes) do code.count = code.count + code.rate end",
    "type": "statement:genericfor"
  }, {
    "id": 454,
    "text": "code.count = code.count + code.rate",
    "type": "statement:assign"
  }, {
    "id": 455,
    "text": "if codes[1].count < codes[2].count then swap(codes,1,2) end",
    "type": "statement:if"
  }, {
    "id": 456,
    "text": "swap(codes,1,2)",
    "type": "statement:functioncall"
  }, {
    "id": 457,
    "text": "if codes[2].count < codes[3].count then swap(codes,2,3) end",
    "type": "statement:if"
  }, {
    "id": 458,
    "text": "swap(codes,2,3)",
    "type": "statement:functioncall"
  }, {
    "id": 459,
    "text": "local code = codes[1]",
    "type": "statement:localassign"
  }, {
    "id": 460,
    "text": "local c = s:sub(i,i)",
    "type": "statement:localassign"
  }, {
    "id": 461,
    "text": "if c == \"@\" and code == plain then code = codes[2] end",
    "type": "statement:if"
  }, {
    "id": 462,
    "text": "code = codes[2]",
    "type": "statement:assign"
  }, {
    "id": 463,
    "text": "out = out .. code.code(c)",
    "type": "statement:assign"
  }, {
    "id": 464,
    "text": "code.count = code.count - 1",
    "type": "statement:assign"
  }, {
    "id": 465,
    "text": "local function mail(s)\r\n\t\ts = unescape_special_chars(s)\r\n\t\tlocal address = encode_email_address(\"mailto:\" .. s)\r\n\t\tlocal text = encode_email_address(s)\r\n\t\treturn add_escape(\"<a href=\\\"\" .. address .. \"\\\">\") .. text .. \"</a>\"\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 466,
    "text": "s = unescape_special_chars(s)",
    "type": "statement:assign"
  }, {
    "id": 467,
    "text": "local address = encode_email_address(\"mailto:\" .. s)",
    "type": "statement:localassign"
  }, {
    "id": 468,
    "text": "local text = encode_email_address(s)",
    "type": "statement:localassign"
  }, {
    "id": 469,
    "text": "text = text:gsub(\"<(https?:[^'\\\">%s]+)>\", link)",
    "type": "statement:assign"
  }, {
    "id": 470,
    "text": "text = text:gsub(\"<(ftp:[^'\\\">%s]+)>\", link)",
    "type": "statement:assign"
  }, {
    "id": 471,
    "text": "text = text:gsub(\"<mailto:([^'\\\">%s]+)>\", mail)",
    "type": "statement:assign"
  }, {
    "id": 472,
    "text": "text = text:gsub(\"<([-.%w]+%@[-.%w]+)>\", mail)",
    "type": "statement:assign"
  }, {
    "id": 473,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 474,
    "text": "local function link(s)\r\n\t\treturn add_escape(\"<a href=\\\"\" .. s .. \"\\\">\") .. s .. \"</a>\"\r\n\tend",
    "type": "function"
  }, {
    "id": 475,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 476,
    "text": "local function encode_email_address(s)\r\n\t\t-- Use a deterministic encoding to make unit testing possible.\r\n\t\t-- Code 45% hex, 45% dec, 10% plain.\r\n\t\tlocal hex = {code = function(c) return \"&#x\" .. string.format(\"%x\", c:byte()) .. \";\" end, count = 1, rate = 0.45}\r\n\t\tlocal dec = {code = function(c) return \"&#\" .. c:byte() .. \";\" end, count = 0, rate = 0.45}\r\n\t\tlocal plain = {code = function(c) return c end, count = 0, rate = 0.1}\r\n\t\tlocal codes = {hex, dec, plain}\r\n\t\tlocal function swap(t,k1,k2) local temp = t[k2] t[k2] = t[k1] t[k1] = temp end\r\n\t\t\r\n\t\tlocal out = \"\"\r\n\t\tfor i = 1,s:len() do\r\n\t\t\tfor _,code in ipairs(codes) do code.count = code.count + code.rate end\r\n\t\t\tif codes[1].count < codes[2].count then swap(codes,1,2) end\r\n\t\t\tif codes[2].count < codes[3].count then swap(codes,2,3) end\r\n\t\t\tif codes[1].count < codes[2].count then swap(codes,1,2) end\r\n\t\t\t\r\n\t\t\tlocal code = codes[1]\r\n\t\t\tlocal c = s:sub(i,i)\r\n\t\t\t-- Force encoding of \"@\" to make email address more invisible.\r\n\t\t\tif c == \"@\" and code == plain then code = codes[2] end\r\n\t\t\tout = out .. code.code(c)\r\n\t\t\tcode.count = code.count - 1\r\n\t\tend\t\r\n\t\treturn out\r\n\tend",
    "type": "function"
  }, {
    "id": 477,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 478,
    "text": "local function swap(t,k1,k2) local temp = t[k2] t[k2] = t[k1] t[k1] = temp end",
    "type": "function"
  }, {
    "id": 479,
    "text": "local function mail(s)\r\n\t\ts = unescape_special_chars(s)\r\n\t\tlocal address = encode_email_address(\"mailto:\" .. s)\r\n\t\tlocal text = encode_email_address(s)\r\n\t\treturn add_escape(\"<a href=\\\"\" .. address .. \"\\\">\") .. text .. \"</a>\"\r\n\tend",
    "type": "function"
  }, {
    "id": 480,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 481,
    "text": "function amps_and_angles(s)\r\n\t-- encode amps not part of &..; expression\r\n\tlocal pos = 1\r\n\twhile true do\r\n\t\tlocal amp = s:find(\"&\", pos)\r\n\t\tif not amp then break end\r\n\t\tlocal semi = s:find(\";\", amp+1)\r\n\t\tlocal stop = s:find(\"[ \\t\\n&]\", amp+1)\r\n\t\tif not semi or (stop and stop < semi) or (semi - amp) > 15 then\r\n\t\t\ts = s:sub(1,amp-1) .. \"&amp;\" .. s:sub(amp+1)\r\n\t\t\tpos = amp+1\r\n\t\telse\r\n\t\t\tpos = amp+1\r\n\t\tend\r\n\tend\r\n\t\r\n\t-- encode naked <'s\r\n\ts = s:gsub(\"<([^a-zA-Z/?$!])\", \"&lt;%1\")\r\n\ts = s:gsub(\"<$\", \"&lt;\")\r\n\t\r\n\t-- what about >, nothing done in the original markdown source to handle them\r\n\treturn s\r\nend",
    "type": "function"
  }, {
    "id": 482,
    "text": "while true do\r\n\t\tlocal amp = s:find(\"&\", pos)\r\n\t\tif not amp then break end\r\n\t\tlocal semi = s:find(\";\", amp+1)\r\n\t\tlocal stop = s:find(\"[ \\t\\n&]\", amp+1)\r\n\t\tif not semi or (stop and stop < semi) or (semi - amp) > 15 then\r\n\t\t\ts = s:sub(1,amp-1) .. \"&amp;\" .. s:sub(amp+1)\r\n\t\t\tpos = amp+1\r\n\t\telse\r\n\t\t\tpos = amp+1\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 483,
    "text": "local amp = s:find(\"&\", pos)",
    "type": "statement:localassign"
  }, {
    "id": 484,
    "text": "if not amp then break end",
    "type": "statement:if"
  }, {
    "id": 485,
    "text": "local semi = s:find(\";\", amp+1)",
    "type": "statement:localassign"
  }, {
    "id": 486,
    "text": "local stop = s:find(\"[ \\t\\n&]\", amp+1)",
    "type": "statement:localassign"
  }, {
    "id": 487,
    "text": "if not semi or (stop and stop < semi) or (semi - amp) > 15 then\r\n\t\t\ts = s:sub(1,amp-1) .. \"&amp;\" .. s:sub(amp+1)\r\n\t\t\tpos = amp+1\r\n\t\telse\r\n\t\t\tpos = amp+1\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 488,
    "text": "s = s:sub(1,amp-1) .. \"&amp;\" .. s:sub(amp+1)",
    "type": "statement:assign"
  }, {
    "id": 489,
    "text": "pos = amp+1",
    "type": "statement:assign"
  }, {
    "id": 490,
    "text": "s = s:gsub(\"<([^a-zA-Z/?$!])\", \"&lt;%1\")",
    "type": "statement:assign"
  }, {
    "id": 491,
    "text": "s = s:gsub(\"<$\", \"&lt;\")",
    "type": "statement:assign"
  }, {
    "id": 492,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 493,
    "text": "function emphasis(text)\r\n\tfor _, s in ipairs {\"%*%*\", \"%_%_\"} do\r\n\t\ttext = text:gsub(s .. \"([^%s][%*%_]?)\" .. s, \"<strong>%1</strong>\")\r\n\t\ttext = text:gsub(s .. \"([^%s][^<>]-[^%s][%*%_]?)\" .. s, \"<strong>%1</strong>\")\r\n\tend\r\n\tfor _, s in ipairs {\"%*\", \"%_\"} do\r\n\t\ttext = text:gsub(s .. \"([^%s_])\" .. s, \"<em>%1</em>\")\r\n\t\ttext = text:gsub(s .. \"(<strong>[^%s_]</strong>)\" .. s, \"<em>%1</em>\")\r\n\t\ttext = text:gsub(s .. \"([^%s_][^<>_]-[^%s_])\" .. s, \"<em>%1</em>\")\r\n\t\ttext = text:gsub(s .. \"([^<>_]-<strong>[^<>_]-</strong>[^<>_]-)\" .. s, \"<em>%1</em>\")\r\n\tend\r\n\treturn text\r\nend",
    "type": "function"
  }, {
    "id": 494,
    "text": "for _, s in ipairs {\"%*%*\", \"%_%_\"} do\r\n\t\ttext = text:gsub(s .. \"([^%s][%*%_]?)\" .. s, \"<strong>%1</strong>\")\r\n\t\ttext = text:gsub(s .. \"([^%s][^<>]-[^%s][%*%_]?)\" .. s, \"<strong>%1</strong>\")\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 495,
    "text": "text = text:gsub(s .. \"([^%s][%*%_]?)\" .. s, \"<strong>%1</strong>\")",
    "type": "statement:assign"
  }, {
    "id": 496,
    "text": "text = text:gsub(s .. \"([^%s][^<>]-[^%s][%*%_]?)\" .. s, \"<strong>%1</strong>\")",
    "type": "statement:assign"
  }, {
    "id": 497,
    "text": "for _, s in ipairs {\"%*\", \"%_\"} do\r\n\t\ttext = text:gsub(s .. \"([^%s_])\" .. s, \"<em>%1</em>\")\r\n\t\ttext = text:gsub(s .. \"(<strong>[^%s_]</strong>)\" .. s, \"<em>%1</em>\")\r\n\t\ttext = text:gsub(s .. \"([^%s_][^<>_]-[^%s_])\" .. s, \"<em>%1</em>\")\r\n\t\ttext = text:gsub(s .. \"([^<>_]-<strong>[^<>_]-</strong>[^<>_]-)\" .. s, \"<em>%1</em>\")\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 498,
    "text": "text = text:gsub(s .. \"([^%s_])\" .. s, \"<em>%1</em>\")",
    "type": "statement:assign"
  }, {
    "id": 499,
    "text": "text = text:gsub(s .. \"(<strong>[^%s_]</strong>)\" .. s, \"<em>%1</em>\")",
    "type": "statement:assign"
  }, {
    "id": 500,
    "text": "text = text:gsub(s .. \"([^%s_][^<>_]-[^%s_])\" .. s, \"<em>%1</em>\")",
    "type": "statement:assign"
  }, {
    "id": 501,
    "text": "text = text:gsub(s .. \"([^<>_]-<strong>[^<>_]-</strong>[^<>_]-)\" .. s, \"<em>%1</em>\")",
    "type": "statement:assign"
  }, {
    "id": 502,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 503,
    "text": "function line_breaks(text)\r\n\treturn text:gsub(\"  +\\n\", \" <br/>\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 504,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 505,
    "text": "function span_transform(text)\r\n\ttext = code_spans(text)\r\n\ttext = escape_special_chars(text)\r\n\ttext = images(text)\r\n\ttext = anchors(text)\r\n\ttext = auto_links(text)\r\n\ttext = amps_and_angles(text)\r\n\ttext = emphasis(text)\r\n\ttext = line_breaks(text)\r\n\treturn text\r\nend",
    "type": "function"
  }, {
    "id": 506,
    "text": "text = code_spans(text)",
    "type": "statement:assign"
  }, {
    "id": 507,
    "text": "text = escape_special_chars(text)",
    "type": "statement:assign"
  }, {
    "id": 508,
    "text": "text = images(text)",
    "type": "statement:assign"
  }, {
    "id": 509,
    "text": "text = anchors(text)",
    "type": "statement:assign"
  }, {
    "id": 510,
    "text": "text = auto_links(text)",
    "type": "statement:assign"
  }, {
    "id": 511,
    "text": "text = amps_and_angles(text)",
    "type": "statement:assign"
  }, {
    "id": 512,
    "text": "text = emphasis(text)",
    "type": "statement:assign"
  }, {
    "id": 513,
    "text": "text = line_breaks(text)",
    "type": "statement:assign"
  }, {
    "id": 514,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 515,
    "text": "function cleanup(text)\r\n\t-- Standardize line endings\r\n\ttext = text:gsub(\"\\r\\n\", \"\\n\")  -- DOS to UNIX\r\n\ttext = text:gsub(\"\\r\", \"\\n\")    -- Mac to UNIX\r\n\t\r\n\t-- Convert all tabs to spaces\r\n\ttext = detab(text)\r\n\t\r\n\t-- Strip lines with only spaces and tabs\r\n\twhile true do\r\n\t\tlocal subs\r\n\t\ttext, subs = text:gsub(\"\\n[ \\t]+\\n\", \"\\n\\n\")\r\n\t\tif subs == 0 then break end\r\n\tend\r\n\t\r\n\treturn \"\\n\" .. text .. \"\\n\"\r\nend",
    "type": "function"
  }, {
    "id": 516,
    "text": "text = text:gsub(\"\\r\\n\", \"\\n\")",
    "type": "statement:assign"
  }, {
    "id": 517,
    "text": "text = text:gsub(\"\\r\", \"\\n\")",
    "type": "statement:assign"
  }, {
    "id": 518,
    "text": "text = detab(text)",
    "type": "statement:assign"
  }, {
    "id": 519,
    "text": "while true do\r\n\t\tlocal subs\r\n\t\ttext, subs = text:gsub(\"\\n[ \\t]+\\n\", \"\\n\\n\")\r\n\t\tif subs == 0 then break end\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 520,
    "text": "local subs",
    "type": "statement:localassign"
  }, {
    "id": 521,
    "text": "text, subs = text:gsub(\"\\n[ \\t]+\\n\", \"\\n\\n\")",
    "type": "statement:assign"
  }, {
    "id": 522,
    "text": "if subs == 0 then break end",
    "type": "statement:if"
  }, {
    "id": 523,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 524,
    "text": "function strip_link_definitions(text)\r\n\tlocal linkdb = {}\r\n\t\r\n\tlocal function link_def(id, url, title)\r\n\t\tid = id:match(\"%[(.+)%]\"):lower()\r\n\t\tlinkdb[id] = linkdb[id] or {}\r\n\t\tlinkdb[id].url = url or linkdb[id].url\r\n\t\tlinkdb[id].title = title or linkdb[id].title\r\n\t\treturn \"\"\r\n\tend\r\n\r\n\tlocal def_no_title = \"\\n ? ? ?(%b[]):[ \\t]*\\n?[ \\t]*<?([^%s>]+)>?[ \\t]*\"\r\n\tlocal def_title1 = def_no_title .. \"[ \\t]+\\n?[ \\t]*[\\\"'(]([^\\n]+)[\\\"')][ \\t]*\"\r\n\tlocal def_title2 = def_no_title .. \"[ \\t]*\\n[ \\t]*[\\\"'(]([^\\n]+)[\\\"')][ \\t]*\"\r\n\tlocal def_title3 = def_no_title .. \"[ \\t]*\\n?[ \\t]+[\\\"'(]([^\\n]+)[\\\"')][ \\t]*\"\r\n\t\r\n\ttext = text:gsub(def_title1, link_def)\r\n\ttext = text:gsub(def_title2, link_def)\r\n\ttext = text:gsub(def_title3, link_def)\r\n\ttext = text:gsub(def_no_title, link_def)\r\n\treturn text, linkdb\r\nend",
    "type": "function"
  }, {
    "id": 525,
    "text": "local linkdb = {}",
    "type": "statement:localassign"
  }, {
    "id": 526,
    "text": "local function link_def(id, url, title)\r\n\t\tid = id:match(\"%[(.+)%]\"):lower()\r\n\t\tlinkdb[id] = linkdb[id] or {}\r\n\t\tlinkdb[id].url = url or linkdb[id].url\r\n\t\tlinkdb[id].title = title or linkdb[id].title\r\n\t\treturn \"\"\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 527,
    "text": "id = id:match(\"%[(.+)%]\"):lower()",
    "type": "statement:assign"
  }, {
    "id": 528,
    "text": "linkdb[id] = linkdb[id] or {}",
    "type": "statement:assign"
  }, {
    "id": 529,
    "text": "linkdb[id].url = url or linkdb[id].url",
    "type": "statement:assign"
  }, {
    "id": 530,
    "text": "linkdb[id].title = title or linkdb[id].title",
    "type": "statement:assign"
  }, {
    "id": 531,
    "text": "local def_no_title = \"\\n ? ? ?(%b[]):[ \\t]*\\n?[ \\t]*<?([^%s>]+)>?[ \\t]*\"",
    "type": "statement:localassign"
  }, {
    "id": 532,
    "text": "local def_title1 = def_no_title .. \"[ \\t]+\\n?[ \\t]*[\\\"'(]([^\\n]+)[\\\"')][ \\t]*\"",
    "type": "statement:localassign"
  }, {
    "id": 533,
    "text": "local def_title2 = def_no_title .. \"[ \\t]*\\n[ \\t]*[\\\"'(]([^\\n]+)[\\\"')][ \\t]*\"",
    "type": "statement:localassign"
  }, {
    "id": 534,
    "text": "local def_title3 = def_no_title .. \"[ \\t]*\\n?[ \\t]+[\\\"'(]([^\\n]+)[\\\"')][ \\t]*\"",
    "type": "statement:localassign"
  }, {
    "id": 535,
    "text": "text = text:gsub(def_title1, link_def)",
    "type": "statement:assign"
  }, {
    "id": 536,
    "text": "text = text:gsub(def_title2, link_def)",
    "type": "statement:assign"
  }, {
    "id": 537,
    "text": "text = text:gsub(def_title3, link_def)",
    "type": "statement:assign"
  }, {
    "id": 538,
    "text": "text = text:gsub(def_no_title, link_def)",
    "type": "statement:assign"
  }, {
    "id": 539,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 540,
    "text": "local function link_def(id, url, title)\r\n\t\tid = id:match(\"%[(.+)%]\"):lower()\r\n\t\tlinkdb[id] = linkdb[id] or {}\r\n\t\tlinkdb[id].url = url or linkdb[id].url\r\n\t\tlinkdb[id].title = title or linkdb[id].title\r\n\t\treturn \"\"\r\n\tend",
    "type": "function"
  }, {
    "id": 541,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 542,
    "text": "function markdown(text)\r\n\tinit_hash(text)\r\n\tinit_escape_table()\r\n\t\r\n\ttext = cleanup(text)\r\n\ttext = protect(text)\r\n\ttext, link_database = strip_link_definitions(text)\r\n\ttext = block_transform(text)\r\n\ttext = unescape_special_chars(text)\r\n\treturn text\r\nend",
    "type": "function"
  }, {
    "id": 543,
    "text": "init_hash(text)",
    "type": "statement:functioncall"
  }, {
    "id": 544,
    "text": "init_escape_table()",
    "type": "statement:functioncall"
  }, {
    "id": 545,
    "text": "text = cleanup(text)",
    "type": "statement:assign"
  }, {
    "id": 546,
    "text": "text = protect(text)",
    "type": "statement:assign"
  }, {
    "id": 547,
    "text": "text, link_database = strip_link_definitions(text)",
    "type": "statement:assign"
  }, {
    "id": 548,
    "text": "text = block_transform(text)",
    "type": "statement:assign"
  }, {
    "id": 549,
    "text": "text = unescape_special_chars(text)",
    "type": "statement:assign"
  }, {
    "id": 550,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 551,
    "text": "function OptionParser:new()\r\n\tlocal o = {short = {}, long = {}}\r\n\tsetmetatable(o, self)\r\n\treturn o\r\nend",
    "type": "function"
  }, {
    "id": 552,
    "text": "local o = {short = {}, long = {}}",
    "type": "statement:localassign"
  }, {
    "id": 553,
    "text": "setmetatable(o, self)",
    "type": "statement:functioncall"
  }, {
    "id": 554,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 555,
    "text": "function OptionParser:flag(short, long, f)\r\n\tlocal info = {type = \"flag\", f = f}\r\n\tif short then self.short[short] = info end\r\n\tif long then self.long[long] = info end\r\nend",
    "type": "function"
  }, {
    "id": 556,
    "text": "local info = {type = \"flag\", f = f}",
    "type": "statement:localassign"
  }, {
    "id": 557,
    "text": "if short then self.short[short] = info end",
    "type": "statement:if"
  }, {
    "id": 558,
    "text": "self.short[short] = info",
    "type": "statement:assign"
  }, {
    "id": 559,
    "text": "if long then self.long[long] = info end",
    "type": "statement:if"
  }, {
    "id": 560,
    "text": "self.long[long] = info",
    "type": "statement:assign"
  }, {
    "id": 561,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 562,
    "text": "function OptionParser:param(short, long, f)\r\n\tlocal info = {type = \"param\", f = f}\r\n\tif short then self.short[short] = info end\r\n\tif long then self.long[long] = info end\r\nend",
    "type": "function"
  }, {
    "id": 563,
    "text": "local info = {type = \"param\", f = f}",
    "type": "statement:localassign"
  }, {
    "id": 564,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 565,
    "text": "function OptionParser:arg(f)\r\n\tself.arg = f\r\nend",
    "type": "function"
  }, {
    "id": 566,
    "text": "self.arg = f",
    "type": "statement:assign"
  }, {
    "id": 567,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 568,
    "text": "function OptionParser:run(args)\r\n\tlocal pos = 1\r\n\twhile pos <= #args do\r\n\t\tlocal arg = args[pos]\r\n\t\tif arg == \"--\" then\r\n\t\t\tfor i=pos+1,#args do\r\n\t\t\t\tif self.arg then self.arg(args[i]) end\r\n\t\t\t\treturn true\r\n\t\t\tend\r\n\t\tend\r\n\t\tif arg:match(\"^%-%-\") then\r\n\t\t\tlocal info = self.long[arg:sub(3)]\r\n\t\t\tif not info then print(\"Unknown flag: \" .. arg) return false end\r\n\t\t\tif info.type == \"flag\" then\r\n\t\t\t\tinfo.f()\r\n\t\t\t\tpos = pos + 1\r\n\t\t\telse\r\n\t\t\t\tparam = args[pos+1]\r\n\t\t\t\tif not param then print(\"No parameter for flag: \" .. arg) return false end\r\n\t\t\t\tinfo.f(param)\r\n\t\t\t\tpos = pos+2\r\n\t\t\tend\r\n\t\telseif arg:match(\"^%-\") then\r\n\t\t\tfor i=2,arg:len() do\r\n\t\t\t\tlocal c = arg:sub(i,i)\r\n\t\t\t\tlocal info = self.short[c]\r\n\t\t\t\tif not info then print(\"Unknown flag: -\" .. c) return false end\r\n\t\t\t\tif info.type == \"flag\" then\r\n\t\t\t\t\tinfo.f()\r\n\t\t\t\telse\r\n\t\t\t\t\tif i == arg:len() then\r\n\t\t\t\t\t\tparam = args[pos+1]\r\n\t\t\t\t\t\tif not param then print(\"No parameter for flag: -\" .. c) return false end\r\n\t\t\t\t\t\tinfo.f(param)\r\n\t\t\t\t\t\tpos = pos + 1\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tparam = arg:sub(i+1)\r\n\t\t\t\t\t\tinfo.f(param)\r\n\t\t\t\t\tend\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tpos = pos + 1\r\n\t\telse\r\n\t\t\tif self.arg then self.arg(arg) end\r\n\t\t\tpos = pos + 1\r\n\t\tend\r\n\tend\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 569,
    "text": "while pos <= #args do\r\n\t\tlocal arg = args[pos]\r\n\t\tif arg == \"--\" then\r\n\t\t\tfor i=pos+1,#args do\r\n\t\t\t\tif self.arg then self.arg(args[i]) end\r\n\t\t\t\treturn true\r\n\t\t\tend\r\n\t\tend\r\n\t\tif arg:match(\"^%-%-\") then\r\n\t\t\tlocal info = self.long[arg:sub(3)]\r\n\t\t\tif not info then print(\"Unknown flag: \" .. arg) return false end\r\n\t\t\tif info.type == \"flag\" then\r\n\t\t\t\tinfo.f()\r\n\t\t\t\tpos = pos + 1\r\n\t\t\telse\r\n\t\t\t\tparam = args[pos+1]\r\n\t\t\t\tif not param then print(\"No parameter for flag: \" .. arg) return false end\r\n\t\t\t\tinfo.f(param)\r\n\t\t\t\tpos = pos+2\r\n\t\t\tend\r\n\t\telseif arg:match(\"^%-\") then\r\n\t\t\tfor i=2,arg:len() do\r\n\t\t\t\tlocal c = arg:sub(i,i)\r\n\t\t\t\tlocal info = self.short[c]\r\n\t\t\t\tif not info then print(\"Unknown flag: -\" .. c) return false end\r\n\t\t\t\tif info.type == \"flag\" then\r\n\t\t\t\t\tinfo.f()\r\n\t\t\t\telse\r\n\t\t\t\t\tif i == arg:len() then\r\n\t\t\t\t\t\tparam = args[pos+1]\r\n\t\t\t\t\t\tif not param then print(\"No parameter for flag: -\" .. c) return false end\r\n\t\t\t\t\t\tinfo.f(param)\r\n\t\t\t\t\t\tpos = pos + 1\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tparam = arg:sub(i+1)\r\n\t\t\t\t\t\tinfo.f(param)\r\n\t\t\t\t\tend\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tpos = pos + 1\r\n\t\telse\r\n\t\t\tif self.arg then self.arg(arg) end\r\n\t\t\tpos = pos + 1\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 570,
    "text": "local arg = args[pos]",
    "type": "statement:localassign"
  }, {
    "id": 571,
    "text": "if arg == \"--\" then\r\n\t\t\tfor i=pos+1,#args do\r\n\t\t\t\tif self.arg then self.arg(args[i]) end\r\n\t\t\t\treturn true\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 572,
    "text": "for i=pos+1,#args do\r\n\t\t\t\tif self.arg then self.arg(args[i]) end\r\n\t\t\t\treturn true\r\n\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 573,
    "text": "if self.arg then self.arg(args[i]) end",
    "type": "statement:if"
  }, {
    "id": 574,
    "text": "self.arg(args[i])",
    "type": "statement:functioncall"
  }, {
    "id": 575,
    "text": "if arg:match(\"^%-%-\") then\r\n\t\t\tlocal info = self.long[arg:sub(3)]\r\n\t\t\tif not info then print(\"Unknown flag: \" .. arg) return false end\r\n\t\t\tif info.type == \"flag\" then\r\n\t\t\t\tinfo.f()\r\n\t\t\t\tpos = pos + 1\r\n\t\t\telse\r\n\t\t\t\tparam = args[pos+1]\r\n\t\t\t\tif not param then print(\"No parameter for flag: \" .. arg) return false end\r\n\t\t\t\tinfo.f(param)\r\n\t\t\t\tpos = pos+2\r\n\t\t\tend\r\n\t\telseif arg:match(\"^%-\") then\r\n\t\t\tfor i=2,arg:len() do\r\n\t\t\t\tlocal c = arg:sub(i,i)\r\n\t\t\t\tlocal info = self.short[c]\r\n\t\t\t\tif not info then print(\"Unknown flag: -\" .. c) return false end\r\n\t\t\t\tif info.type == \"flag\" then\r\n\t\t\t\t\tinfo.f()\r\n\t\t\t\telse\r\n\t\t\t\t\tif i == arg:len() then\r\n\t\t\t\t\t\tparam = args[pos+1]\r\n\t\t\t\t\t\tif not param then print(\"No parameter for flag: -\" .. c) return false end\r\n\t\t\t\t\t\tinfo.f(param)\r\n\t\t\t\t\t\tpos = pos + 1\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tparam = arg:sub(i+1)\r\n\t\t\t\t\t\tinfo.f(param)\r\n\t\t\t\t\tend\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tpos = pos + 1\r\n\t\telse\r\n\t\t\tif self.arg then self.arg(arg) end\r\n\t\t\tpos = pos + 1\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 576,
    "text": "local info = self.long[arg:sub(3)]",
    "type": "statement:localassign"
  }, {
    "id": 577,
    "text": "if not info then print(\"Unknown flag: \" .. arg) return false end",
    "type": "statement:if"
  }, {
    "id": 578,
    "text": "print(\"Unknown flag: \" .. arg)",
    "type": "statement:functioncall"
  }, {
    "id": 579,
    "text": "if info.type == \"flag\" then\r\n\t\t\t\tinfo.f()\r\n\t\t\t\tpos = pos + 1\r\n\t\t\telse\r\n\t\t\t\tparam = args[pos+1]\r\n\t\t\t\tif not param then print(\"No parameter for flag: \" .. arg) return false end\r\n\t\t\t\tinfo.f(param)\r\n\t\t\t\tpos = pos+2\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 580,
    "text": "info.f()",
    "type": "statement:functioncall"
  }, {
    "id": 581,
    "text": "pos = pos + 1",
    "type": "statement:assign"
  }, {
    "id": 582,
    "text": "param = args[pos+1]",
    "type": "statement:assign"
  }, {
    "id": 583,
    "text": "if not param then print(\"No parameter for flag: \" .. arg) return false end",
    "type": "statement:if"
  }, {
    "id": 584,
    "text": "print(\"No parameter for flag: \" .. arg)",
    "type": "statement:functioncall"
  }, {
    "id": 585,
    "text": "info.f(param)",
    "type": "statement:functioncall"
  }, {
    "id": 586,
    "text": "pos = pos+2",
    "type": "statement:assign"
  }, {
    "id": 587,
    "text": "for i=2,arg:len() do\r\n\t\t\t\tlocal c = arg:sub(i,i)\r\n\t\t\t\tlocal info = self.short[c]\r\n\t\t\t\tif not info then print(\"Unknown flag: -\" .. c) return false end\r\n\t\t\t\tif info.type == \"flag\" then\r\n\t\t\t\t\tinfo.f()\r\n\t\t\t\telse\r\n\t\t\t\t\tif i == arg:len() then\r\n\t\t\t\t\t\tparam = args[pos+1]\r\n\t\t\t\t\t\tif not param then print(\"No parameter for flag: -\" .. c) return false end\r\n\t\t\t\t\t\tinfo.f(param)\r\n\t\t\t\t\t\tpos = pos + 1\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tparam = arg:sub(i+1)\r\n\t\t\t\t\t\tinfo.f(param)\r\n\t\t\t\t\tend\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 588,
    "text": "local c = arg:sub(i,i)",
    "type": "statement:localassign"
  }, {
    "id": 589,
    "text": "local info = self.short[c]",
    "type": "statement:localassign"
  }, {
    "id": 590,
    "text": "if not info then print(\"Unknown flag: -\" .. c) return false end",
    "type": "statement:if"
  }, {
    "id": 591,
    "text": "print(\"Unknown flag: -\" .. c)",
    "type": "statement:functioncall"
  }, {
    "id": 592,
    "text": "if info.type == \"flag\" then\r\n\t\t\t\t\tinfo.f()\r\n\t\t\t\telse\r\n\t\t\t\t\tif i == arg:len() then\r\n\t\t\t\t\t\tparam = args[pos+1]\r\n\t\t\t\t\t\tif not param then print(\"No parameter for flag: -\" .. c) return false end\r\n\t\t\t\t\t\tinfo.f(param)\r\n\t\t\t\t\t\tpos = pos + 1\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tparam = arg:sub(i+1)\r\n\t\t\t\t\t\tinfo.f(param)\r\n\t\t\t\t\tend\r\n\t\t\t\t\tbreak\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 593,
    "text": "if i == arg:len() then\r\n\t\t\t\t\t\tparam = args[pos+1]\r\n\t\t\t\t\t\tif not param then print(\"No parameter for flag: -\" .. c) return false end\r\n\t\t\t\t\t\tinfo.f(param)\r\n\t\t\t\t\t\tpos = pos + 1\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tparam = arg:sub(i+1)\r\n\t\t\t\t\t\tinfo.f(param)\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 594,
    "text": "if not param then print(\"No parameter for flag: -\" .. c) return false end",
    "type": "statement:if"
  }, {
    "id": 595,
    "text": "print(\"No parameter for flag: -\" .. c)",
    "type": "statement:functioncall"
  }, {
    "id": 596,
    "text": "param = arg:sub(i+1)",
    "type": "statement:assign"
  }, {
    "id": 597,
    "text": "if self.arg then self.arg(arg) end",
    "type": "statement:if"
  }, {
    "id": 598,
    "text": "self.arg(arg)",
    "type": "statement:functioncall"
  }, {
    "id": 599,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 600,
    "text": "local function run_command_line(arg)\r\n\t-- Generate output for input s given options\r\n\tlocal function run(s, options)\r\n\t\ts = markdown(s)\r\n\t\tif not options.wrap_header then return s end\r\n\t\tlocal header = \"\"\r\n\t\tif options.header then\r\n\t\t\tlocal f = io.open(options.header) or error(\"Could not open file: \" .. options.header) \r\n\t\t\theader = f:read(\"*a\")\r\n\t\t\tf:close()\r\n\t\telse\r\n\t\t\theader = [[\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html>\r\n<head>\r\n\t<meta http-equiv=\"content-type\" content=\"text/html; charset=CHARSET\" />\r\n\t<title>TITLE</title>\r\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"STYLESHEET\" />\r\n</head>\r\n<body>\r\n]]\r\n\t\t\tlocal title = options.title or s:match(\"<h1>(.-)</h1>\") or s:match(\"<h2>(.-)</h2>\") or \r\n\t\t\t\ts:match(\"<h3>(.-)</h3>\") or \"Untitled\"\r\n\t\t\theader = header:gsub(\"TITLE\", title)\r\n\t\t\tif options.inline_style then\r\n\t\t\t\tlocal style = \"\"\r\n\t\t\t\tlocal f = io.open(options.stylesheet)\r\n\t\t\t\tif f then \r\n\t\t\t\t\tstyle = f:read(\"*a\") f:close() \r\n\t\t\t\telse\r\n\t\t\t\t\terror(\"Could not include style sheet \" .. options.stylesheet .. \": File not found\")\r\n\t\t\t\tend\r\n\t\t\t\theader = header:gsub('<link rel=\"stylesheet\" type=\"text/css\" href=\"STYLESHEET\" />',\r\n\t\t\t\t\t\"<style type=\\\"text/css\\\"><!--\\n\" .. style .. \"\\n--></style>\")\r\n\t\t\telse\r\n\t\t\t\theader = header:gsub(\"STYLESHEET\", options.stylesheet)\r\n\t\t\tend\r\n\t\t\theader = header:gsub(\"CHARSET\", options.charset)\r\n\t\tend\r\n\t\tlocal footer = \"</body></html>\"\r\n\t\tif options.footer then\r\n\t\t\tlocal f = io.open(options.footer) or error(\"Could not open file: \" .. options.footer)\r\n\t\t\tfooter = f:read(\"*a\")\r\n\t\t\tf:close()\r\n\t\tend\r\n\t\treturn header .. s .. footer\r\n\tend\r\n\t\r\n\t-- Generate output path name from input path name given options.\t\r\n\tlocal function outpath(path, options)\r\n\t\tif options.append then return path .. \".html\" end\r\n\t\tlocal m = path:match(\"^(.+%.html)[^/\\\\]+$\") if m then return m end\r\n\t\tm = path:match(\"^(.+%.)[^/\\\\]*$\") if m and path ~= m .. \"html\" then return m .. \"html\" end\r\n\t\treturn path .. \".html\"\r\n\tend\r\n\t\r\n\t-- Default commandline options\r\n\tlocal options = {\r\n\t\twrap_header = true,\r\n\t\theader = nil,\r\n\t\tfooter = nil,\r\n\t\tcharset = \"utf-8\",\r\n\t\ttitle = nil,\r\n\t\tstylesheet = \"default.css\",\r\n\t\tinline_style = false\r\n\t}\r\n\tlocal help = [[\r\nUsage: markdown.lua [OPTION] [FILE]\r\nRuns the markdown text markup to HTML converter on each file specified on the\r\ncommand line. If no files are specified, runs on standard input.\r\n\r\nNo header:\r\n    -n, --no-wrap        Don't wrap the output in <html>... tags.\r\nCustom header:\r\n    -e, --header FILE    Use content of FILE for header.\r\n    -f, --footer FILE    Use content of FILE for footer.\r\nGenerated header:\r\n    -c, --charset SET    Specifies charset (default utf-8).\r\n    -i, --title TITLE    Specifies title (default from first <h1> tag).\r\n    -s, --style STYLE    Specifies style sheet file (default default.css).\r\n\t-l, --inline-style   Include the style sheet file inline in the header.\r\nGenerated files:\r\n    -a, --append         Append .html extension (instead of replacing).\r\nOther options:\r\n    -h, --help           Print this help text.\r\n    -t, --test           Run the unit tests.\r\n]]\r\n\r\n\tlocal run_stdin = true\r\n\tlocal op = OptionParser:new()\r\n\top:flag(\"n\", \"no-wrap\", function () options.wrap_header = false end)\r\n\top:param(\"e\", \"header\", function (x) options.header = x end)\r\n\top:param(\"f\", \"footer\", function (x) options.footer = x end)\r\n\top:param(\"c\", \"charset\", function (x) options.charset = x end)\r\n\top:param(\"i\", \"title\", function(x) options.title = x end)\r\n\top:param(\"s\", \"style\", function(x) options.stylesheet = x end)\r\n\top:flag(\"l\", \"inline-style\", function(x) options.inline_style = true end)\r\n\top:flag(\"a\", \"append\", function() options.append = true end)\r\n\top:flag(\"t\", \"test\", function() \r\n\t\tlocal n = arg[0]:gsub(\"markdown.lua\", \"markdown-tests.lua\")\r\n\t\tlocal f = io.open(n)\r\n\t\tif f then \r\n\t\t\tf:close() dofile(n) \r\n\t\telse\r\n\t\t\terror(\"Cannot find markdown-tests.lua\")\r\n\t\tend\r\n\t\trun_stdin = false \r\n\tend)\r\n\top:flag(\"h\", \"help\", function() print(help) run_stdin = false end)\r\n\top:arg(function(path) \r\n\t\t\tlocal file = io.open(path) or error(\"Could not open file: \" .. path)\r\n\t\t\tlocal s = file:read(\"*a\")\r\n\t\t\tfile:close()\r\n\t\t\ts = run(s, options)\r\n\t\t\tfile = io.open(outpath(path, options), \"w\") or error(\"Could not open output file: \" .. outpath(path, options))\r\n\t\t\tfile:write(s)\r\n\t\t\tfile:close()\r\n\t\t\trun_stdin = false\r\n\t\tend\r\n\t)\r\n\t\r\n\tif not op:run(arg) then\r\n\t\tprint(help)\r\n\t\trun_stdin = false\r\n\tend\r\n\r\n\tif run_stdin then\r\n\t\tlocal s = io.read(\"*a\")\r\n\t\ts = run(s, options)\r\n\t\tio.write(s)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 601,
    "text": "local function run(s, options)\r\n\t\ts = markdown(s)\r\n\t\tif not options.wrap_header then return s end\r\n\t\tlocal header = \"\"\r\n\t\tif options.header then\r\n\t\t\tlocal f = io.open(options.header) or error(\"Could not open file: \" .. options.header) \r\n\t\t\theader = f:read(\"*a\")\r\n\t\t\tf:close()\r\n\t\telse\r\n\t\t\theader = [[\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html>\r\n<head>\r\n\t<meta http-equiv=\"content-type\" content=\"text/html; charset=CHARSET\" />\r\n\t<title>TITLE</title>\r\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"STYLESHEET\" />\r\n</head>\r\n<body>\r\n]]\r\n\t\t\tlocal title = options.title or s:match(\"<h1>(.-)</h1>\") or s:match(\"<h2>(.-)</h2>\") or \r\n\t\t\t\ts:match(\"<h3>(.-)</h3>\") or \"Untitled\"\r\n\t\t\theader = header:gsub(\"TITLE\", title)\r\n\t\t\tif options.inline_style then\r\n\t\t\t\tlocal style = \"\"\r\n\t\t\t\tlocal f = io.open(options.stylesheet)\r\n\t\t\t\tif f then \r\n\t\t\t\t\tstyle = f:read(\"*a\") f:close() \r\n\t\t\t\telse\r\n\t\t\t\t\terror(\"Could not include style sheet \" .. options.stylesheet .. \": File not found\")\r\n\t\t\t\tend\r\n\t\t\t\theader = header:gsub('<link rel=\"stylesheet\" type=\"text/css\" href=\"STYLESHEET\" />',\r\n\t\t\t\t\t\"<style type=\\\"text/css\\\"><!--\\n\" .. style .. \"\\n--></style>\")\r\n\t\t\telse\r\n\t\t\t\theader = header:gsub(\"STYLESHEET\", options.stylesheet)\r\n\t\t\tend\r\n\t\t\theader = header:gsub(\"CHARSET\", options.charset)\r\n\t\tend\r\n\t\tlocal footer = \"</body></html>\"\r\n\t\tif options.footer then\r\n\t\t\tlocal f = io.open(options.footer) or error(\"Could not open file: \" .. options.footer)\r\n\t\t\tfooter = f:read(\"*a\")\r\n\t\t\tf:close()\r\n\t\tend\r\n\t\treturn header .. s .. footer\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 602,
    "text": "s = markdown(s)",
    "type": "statement:assign"
  }, {
    "id": 603,
    "text": "if not options.wrap_header then return s end",
    "type": "statement:if"
  }, {
    "id": 604,
    "text": "local header = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 605,
    "text": "if options.header then\r\n\t\t\tlocal f = io.open(options.header) or error(\"Could not open file: \" .. options.header) \r\n\t\t\theader = f:read(\"*a\")\r\n\t\t\tf:close()\r\n\t\telse\r\n\t\t\theader = [[\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html>\r\n<head>\r\n\t<meta http-equiv=\"content-type\" content=\"text/html; charset=CHARSET\" />\r\n\t<title>TITLE</title>\r\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"STYLESHEET\" />\r\n</head>\r\n<body>\r\n]]\r\n\t\t\tlocal title = options.title or s:match(\"<h1>(.-)</h1>\") or s:match(\"<h2>(.-)</h2>\") or \r\n\t\t\t\ts:match(\"<h3>(.-)</h3>\") or \"Untitled\"\r\n\t\t\theader = header:gsub(\"TITLE\", title)\r\n\t\t\tif options.inline_style then\r\n\t\t\t\tlocal style = \"\"\r\n\t\t\t\tlocal f = io.open(options.stylesheet)\r\n\t\t\t\tif f then \r\n\t\t\t\t\tstyle = f:read(\"*a\") f:close() \r\n\t\t\t\telse\r\n\t\t\t\t\terror(\"Could not include style sheet \" .. options.stylesheet .. \": File not found\")\r\n\t\t\t\tend\r\n\t\t\t\theader = header:gsub('<link rel=\"stylesheet\" type=\"text/css\" href=\"STYLESHEET\" />',\r\n\t\t\t\t\t\"<style type=\\\"text/css\\\"><!--\\n\" .. style .. \"\\n--></style>\")\r\n\t\t\telse\r\n\t\t\t\theader = header:gsub(\"STYLESHEET\", options.stylesheet)\r\n\t\t\tend\r\n\t\t\theader = header:gsub(\"CHARSET\", options.charset)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 606,
    "text": "local f = io.open(options.header) or error(\"Could not open file: \" .. options.header)",
    "type": "statement:localassign"
  }, {
    "id": 607,
    "text": "header = f:read(\"*a\")",
    "type": "statement:assign"
  }, {
    "id": 608,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 609,
    "text": "header = [[\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html>\r\n<head>\r\n\t<meta http-equiv=\"content-type\" content=\"text/html; charset=CHARSET\" />\r\n\t<title>TITLE</title>\r\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"STYLESHEET\" />\r\n</head>\r\n<body>\r\n]]",
    "type": "statement:assign"
  }, {
    "id": 610,
    "text": "local title = options.title or s:match(\"<h1>(.-)</h1>\") or s:match(\"<h2>(.-)</h2>\") or \r\n\t\t\t\ts:match(\"<h3>(.-)</h3>\") or \"Untitled\"",
    "type": "statement:localassign"
  }, {
    "id": 611,
    "text": "header = header:gsub(\"TITLE\", title)",
    "type": "statement:assign"
  }, {
    "id": 612,
    "text": "if options.inline_style then\r\n\t\t\t\tlocal style = \"\"\r\n\t\t\t\tlocal f = io.open(options.stylesheet)\r\n\t\t\t\tif f then \r\n\t\t\t\t\tstyle = f:read(\"*a\") f:close() \r\n\t\t\t\telse\r\n\t\t\t\t\terror(\"Could not include style sheet \" .. options.stylesheet .. \": File not found\")\r\n\t\t\t\tend\r\n\t\t\t\theader = header:gsub('<link rel=\"stylesheet\" type=\"text/css\" href=\"STYLESHEET\" />',\r\n\t\t\t\t\t\"<style type=\\\"text/css\\\"><!--\\n\" .. style .. \"\\n--></style>\")\r\n\t\t\telse\r\n\t\t\t\theader = header:gsub(\"STYLESHEET\", options.stylesheet)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 613,
    "text": "local style = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 614,
    "text": "local f = io.open(options.stylesheet)",
    "type": "statement:localassign"
  }, {
    "id": 615,
    "text": "if f then \r\n\t\t\t\t\tstyle = f:read(\"*a\") f:close() \r\n\t\t\t\telse\r\n\t\t\t\t\terror(\"Could not include style sheet \" .. options.stylesheet .. \": File not found\")\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 616,
    "text": "style = f:read(\"*a\")",
    "type": "statement:assign"
  }, {
    "id": 617,
    "text": "error(\"Could not include style sheet \" .. options.stylesheet .. \": File not found\")",
    "type": "statement:functioncall"
  }, {
    "id": 618,
    "text": "header = header:gsub('<link rel=\"stylesheet\" type=\"text/css\" href=\"STYLESHEET\" />',\r\n\t\t\t\t\t\"<style type=\\\"text/css\\\"><!--\\n\" .. style .. \"\\n--></style>\")",
    "type": "statement:assign"
  }, {
    "id": 619,
    "text": "header = header:gsub(\"STYLESHEET\", options.stylesheet)",
    "type": "statement:assign"
  }, {
    "id": 620,
    "text": "header = header:gsub(\"CHARSET\", options.charset)",
    "type": "statement:assign"
  }, {
    "id": 621,
    "text": "local footer = \"</body></html>\"",
    "type": "statement:localassign"
  }, {
    "id": 622,
    "text": "if options.footer then\r\n\t\t\tlocal f = io.open(options.footer) or error(\"Could not open file: \" .. options.footer)\r\n\t\t\tfooter = f:read(\"*a\")\r\n\t\t\tf:close()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 623,
    "text": "local f = io.open(options.footer) or error(\"Could not open file: \" .. options.footer)",
    "type": "statement:localassign"
  }, {
    "id": 624,
    "text": "footer = f:read(\"*a\")",
    "type": "statement:assign"
  }, {
    "id": 625,
    "text": "local function outpath(path, options)\r\n\t\tif options.append then return path .. \".html\" end\r\n\t\tlocal m = path:match(\"^(.+%.html)[^/\\\\]+$\") if m then return m end\r\n\t\tm = path:match(\"^(.+%.)[^/\\\\]*$\") if m and path ~= m .. \"html\" then return m .. \"html\" end\r\n\t\treturn path .. \".html\"\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 626,
    "text": "if options.append then return path .. \".html\" end",
    "type": "statement:if"
  }, {
    "id": 627,
    "text": "local m = path:match(\"^(.+%.html)[^/\\\\]+$\")",
    "type": "statement:localassign"
  }, {
    "id": 628,
    "text": "if m then return m end",
    "type": "statement:if"
  }, {
    "id": 629,
    "text": "m = path:match(\"^(.+%.)[^/\\\\]*$\")",
    "type": "statement:assign"
  }, {
    "id": 630,
    "text": "if m and path ~= m .. \"html\" then return m .. \"html\" end",
    "type": "statement:if"
  }, {
    "id": 631,
    "text": "local options = {\r\n\t\twrap_header = true,\r\n\t\theader = nil,\r\n\t\tfooter = nil,\r\n\t\tcharset = \"utf-8\",\r\n\t\ttitle = nil,\r\n\t\tstylesheet = \"default.css\",\r\n\t\tinline_style = false\r\n\t}",
    "type": "statement:localassign"
  }, {
    "id": 632,
    "text": "local help = [[\r\nUsage: markdown.lua [OPTION] [FILE]\r\nRuns the markdown text markup to HTML converter on each file specified on the\r\ncommand line. If no files are specified, runs on standard input.\r\n\r\nNo header:\r\n    -n, --no-wrap        Don't wrap the output in <html>... tags.\r\nCustom header:\r\n    -e, --header FILE    Use content of FILE for header.\r\n    -f, --footer FILE    Use content of FILE for footer.\r\nGenerated header:\r\n    -c, --charset SET    Specifies charset (default utf-8).\r\n    -i, --title TITLE    Specifies title (default from first <h1> tag).\r\n    -s, --style STYLE    Specifies style sheet file (default default.css).\r\n\t-l, --inline-style   Include the style sheet file inline in the header.\r\nGenerated files:\r\n    -a, --append         Append .html extension (instead of replacing).\r\nOther options:\r\n    -h, --help           Print this help text.\r\n    -t, --test           Run the unit tests.\r\n]]",
    "type": "statement:localassign"
  }, {
    "id": 633,
    "text": "local run_stdin = true",
    "type": "statement:localassign"
  }, {
    "id": 634,
    "text": "local op = OptionParser:new()",
    "type": "statement:localassign"
  }, {
    "id": 635,
    "text": "op:flag(\"n\", \"no-wrap\", function () options.wrap_header = false end)",
    "type": "statement:functioncall"
  }, {
    "id": 636,
    "text": "options.wrap_header = false",
    "type": "statement:assign"
  }, {
    "id": 637,
    "text": "op:param(\"e\", \"header\", function (x) options.header = x end)",
    "type": "statement:functioncall"
  }, {
    "id": 638,
    "text": "options.header = x",
    "type": "statement:assign"
  }, {
    "id": 639,
    "text": "op:param(\"f\", \"footer\", function (x) options.footer = x end)",
    "type": "statement:functioncall"
  }, {
    "id": 640,
    "text": "options.footer = x",
    "type": "statement:assign"
  }, {
    "id": 641,
    "text": "op:param(\"c\", \"charset\", function (x) options.charset = x end)",
    "type": "statement:functioncall"
  }, {
    "id": 642,
    "text": "options.charset = x",
    "type": "statement:assign"
  }, {
    "id": 643,
    "text": "op:param(\"i\", \"title\", function(x) options.title = x end)",
    "type": "statement:functioncall"
  }, {
    "id": 644,
    "text": "options.title = x",
    "type": "statement:assign"
  }, {
    "id": 645,
    "text": "op:param(\"s\", \"style\", function(x) options.stylesheet = x end)",
    "type": "statement:functioncall"
  }, {
    "id": 646,
    "text": "options.stylesheet = x",
    "type": "statement:assign"
  }, {
    "id": 647,
    "text": "op:flag(\"l\", \"inline-style\", function(x) options.inline_style = true end)",
    "type": "statement:functioncall"
  }, {
    "id": 648,
    "text": "options.inline_style = true",
    "type": "statement:assign"
  }, {
    "id": 649,
    "text": "op:flag(\"a\", \"append\", function() options.append = true end)",
    "type": "statement:functioncall"
  }, {
    "id": 650,
    "text": "options.append = true",
    "type": "statement:assign"
  }, {
    "id": 651,
    "text": "op:flag(\"t\", \"test\", function() \r\n\t\tlocal n = arg[0]:gsub(\"markdown.lua\", \"markdown-tests.lua\")\r\n\t\tlocal f = io.open(n)\r\n\t\tif f then \r\n\t\t\tf:close() dofile(n) \r\n\t\telse\r\n\t\t\terror(\"Cannot find markdown-tests.lua\")\r\n\t\tend\r\n\t\trun_stdin = false \r\n\tend)",
    "type": "statement:functioncall"
  }, {
    "id": 652,
    "text": "local n = arg[0]:gsub(\"markdown.lua\", \"markdown-tests.lua\")",
    "type": "statement:localassign"
  }, {
    "id": 653,
    "text": "local f = io.open(n)",
    "type": "statement:localassign"
  }, {
    "id": 654,
    "text": "if f then \r\n\t\t\tf:close() dofile(n) \r\n\t\telse\r\n\t\t\terror(\"Cannot find markdown-tests.lua\")\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 655,
    "text": "dofile(n)",
    "type": "statement:functioncall"
  }, {
    "id": 656,
    "text": "error(\"Cannot find markdown-tests.lua\")",
    "type": "statement:functioncall"
  }, {
    "id": 657,
    "text": "run_stdin = false",
    "type": "statement:assign"
  }, {
    "id": 658,
    "text": "op:flag(\"h\", \"help\", function() print(help) run_stdin = false end)",
    "type": "statement:functioncall"
  }, {
    "id": 659,
    "text": "print(help)",
    "type": "statement:functioncall"
  }, {
    "id": 660,
    "text": "op:arg(function(path) \r\n\t\t\tlocal file = io.open(path) or error(\"Could not open file: \" .. path)\r\n\t\t\tlocal s = file:read(\"*a\")\r\n\t\t\tfile:close()\r\n\t\t\ts = run(s, options)\r\n\t\t\tfile = io.open(outpath(path, options), \"w\") or error(\"Could not open output file: \" .. outpath(path, options))\r\n\t\t\tfile:write(s)\r\n\t\t\tfile:close()\r\n\t\t\trun_stdin = false\r\n\t\tend\r\n\t)",
    "type": "statement:functioncall"
  }, {
    "id": 661,
    "text": "local file = io.open(path) or error(\"Could not open file: \" .. path)",
    "type": "statement:localassign"
  }, {
    "id": 662,
    "text": "local s = file:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 663,
    "text": "file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 664,
    "text": "s = run(s, options)",
    "type": "statement:assign"
  }, {
    "id": 665,
    "text": "file = io.open(outpath(path, options), \"w\") or error(\"Could not open output file: \" .. outpath(path, options))",
    "type": "statement:assign"
  }, {
    "id": 666,
    "text": "file:write(s)",
    "type": "statement:functioncall"
  }, {
    "id": 667,
    "text": "if not op:run(arg) then\r\n\t\tprint(help)\r\n\t\trun_stdin = false\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 668,
    "text": "if run_stdin then\r\n\t\tlocal s = io.read(\"*a\")\r\n\t\ts = run(s, options)\r\n\t\tio.write(s)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 669,
    "text": "local s = io.read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 670,
    "text": "io.write(s)",
    "type": "statement:functioncall"
  }, {
    "id": 671,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 672,
    "text": "local function run(s, options)\r\n\t\ts = markdown(s)\r\n\t\tif not options.wrap_header then return s end\r\n\t\tlocal header = \"\"\r\n\t\tif options.header then\r\n\t\t\tlocal f = io.open(options.header) or error(\"Could not open file: \" .. options.header) \r\n\t\t\theader = f:read(\"*a\")\r\n\t\t\tf:close()\r\n\t\telse\r\n\t\t\theader = [[\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html>\r\n<head>\r\n\t<meta http-equiv=\"content-type\" content=\"text/html; charset=CHARSET\" />\r\n\t<title>TITLE</title>\r\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"STYLESHEET\" />\r\n</head>\r\n<body>\r\n]]\r\n\t\t\tlocal title = options.title or s:match(\"<h1>(.-)</h1>\") or s:match(\"<h2>(.-)</h2>\") or \r\n\t\t\t\ts:match(\"<h3>(.-)</h3>\") or \"Untitled\"\r\n\t\t\theader = header:gsub(\"TITLE\", title)\r\n\t\t\tif options.inline_style then\r\n\t\t\t\tlocal style = \"\"\r\n\t\t\t\tlocal f = io.open(options.stylesheet)\r\n\t\t\t\tif f then \r\n\t\t\t\t\tstyle = f:read(\"*a\") f:close() \r\n\t\t\t\telse\r\n\t\t\t\t\terror(\"Could not include style sheet \" .. options.stylesheet .. \": File not found\")\r\n\t\t\t\tend\r\n\t\t\t\theader = header:gsub('<link rel=\"stylesheet\" type=\"text/css\" href=\"STYLESHEET\" />',\r\n\t\t\t\t\t\"<style type=\\\"text/css\\\"><!--\\n\" .. style .. \"\\n--></style>\")\r\n\t\t\telse\r\n\t\t\t\theader = header:gsub(\"STYLESHEET\", options.stylesheet)\r\n\t\t\tend\r\n\t\t\theader = header:gsub(\"CHARSET\", options.charset)\r\n\t\tend\r\n\t\tlocal footer = \"</body></html>\"\r\n\t\tif options.footer then\r\n\t\t\tlocal f = io.open(options.footer) or error(\"Could not open file: \" .. options.footer)\r\n\t\t\tfooter = f:read(\"*a\")\r\n\t\t\tf:close()\r\n\t\tend\r\n\t\treturn header .. s .. footer\r\n\tend",
    "type": "function"
  }, {
    "id": 673,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 674,
    "text": "local function outpath(path, options)\r\n\t\tif options.append then return path .. \".html\" end\r\n\t\tlocal m = path:match(\"^(.+%.html)[^/\\\\]+$\") if m then return m end\r\n\t\tm = path:match(\"^(.+%.)[^/\\\\]*$\") if m and path ~= m .. \"html\" then return m .. \"html\" end\r\n\t\treturn path .. \".html\"\r\n\tend",
    "type": "function"
  }, {
    "id": 675,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 676,
    "text": "function(c) return \"&#x\" .. string.format(\"%x\", c:byte()) .. \";\" end",
    "type": "function"
  }, {
    "id": 677,
    "text": "function(c) return \"&#\" .. c:byte() .. \";\" end",
    "type": "function"
  }, {
    "id": 678,
    "text": "function(c) return c end",
    "type": "function"
  }, {
    "id": 679,
    "text": "function () options.wrap_header = false end",
    "type": "function"
  }, {
    "id": 680,
    "text": "function (x) options.header = x end",
    "type": "function"
  }, {
    "id": 681,
    "text": "function (x) options.footer = x end",
    "type": "function"
  }, {
    "id": 682,
    "text": "function (x) options.charset = x end",
    "type": "function"
  }, {
    "id": 683,
    "text": "function(x) options.title = x end",
    "type": "function"
  }, {
    "id": 684,
    "text": "function(x) options.stylesheet = x end",
    "type": "function"
  }, {
    "id": 685,
    "text": "function(x) options.inline_style = true end",
    "type": "function"
  }, {
    "id": 686,
    "text": "function() options.append = true end",
    "type": "function"
  }, {
    "id": 687,
    "text": "function() \r\n\t\tlocal n = arg[0]:gsub(\"markdown.lua\", \"markdown-tests.lua\")\r\n\t\tlocal f = io.open(n)\r\n\t\tif f then \r\n\t\t\tf:close() dofile(n) \r\n\t\telse\r\n\t\t\terror(\"Cannot find markdown-tests.lua\")\r\n\t\tend\r\n\t\trun_stdin = false \r\n\tend",
    "type": "function"
  }, {
    "id": 688,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 689,
    "text": "function() print(help) run_stdin = false end",
    "type": "function"
  }, {
    "id": 690,
    "text": "function(path) \r\n\t\t\tlocal file = io.open(path) or error(\"Could not open file: \" .. path)\r\n\t\t\tlocal s = file:read(\"*a\")\r\n\t\t\tfile:close()\r\n\t\t\ts = run(s, options)\r\n\t\t\tfile = io.open(outpath(path, options), \"w\") or error(\"Could not open output file: \" .. outpath(path, options))\r\n\t\t\tfile:write(s)\r\n\t\t\tfile:close()\r\n\t\t\trun_stdin = false\r\n\t\tend",
    "type": "function"
  }, {
    "id": 691,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 692,
    "text": "",
    "type": "function container"
  }, {
    "id": 693,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 694,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 695,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 696,
    "text": "open",
    "type": "global function"
  }, {
    "id": 697,
    "text": "error",
    "type": "global function"
  }, {
    "id": 698,
    "text": "dofile",
    "type": "global function"
  }, {
    "id": 699,
    "text": "read",
    "type": "global function"
  }, {
    "id": 700,
    "text": "arg",
    "type": "global function"
  }, {
    "id": 701,
    "text": "code",
    "type": "global function"
  }, {
    "id": 702,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 703,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 704,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 705,
    "text": "print",
    "type": "global function"
  }, {
    "id": 706,
    "text": "lock",
    "type": "global function"
  }, {
    "id": 707,
    "text": "write",
    "type": "global function"
  }, {
    "id": 708,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 709,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 710,
    "text": "f",
    "type": "global function"
  }, {
    "id": 711,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 712,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 713,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 714,
    "text": "f",
    "type": "global function"
  }, {
    "id": 715,
    "text": "format",
    "type": "global function"
  }, {
    "id": 716,
    "text": "",
    "type": "variable container"
  }, {
    "id": 717,
    "text": "",
    "type": "require container"
  } ]
}