{
  "_filename": "test.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-cjson/tests/test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 8,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 16
  }, {
    "from": 8,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 12
  }, {
    "from": 23,
    "label": "has",
    "to": 13
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 6
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 6
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 6
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 6
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 35
  }, {
    "from": 43,
    "label": "has",
    "to": 6
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "calls",
    "to": 50
  }, {
    "from": 45,
    "label": "calls",
    "to": 50
  }, {
    "from": 2,
    "label": "calls",
    "to": 63
  }, {
    "from": 8,
    "label": "calls",
    "to": 63
  }, {
    "from": 25,
    "label": "calls",
    "to": 49
  }, {
    "from": 25,
    "label": "calls",
    "to": 49
  }, {
    "from": 25,
    "label": "calls",
    "to": 53
  }, {
    "from": 45,
    "label": "calls",
    "to": 53
  }, {
    "from": 8,
    "label": "calls",
    "to": 23
  }, {
    "from": 8,
    "label": "calls",
    "to": 23
  }, {
    "from": 8,
    "label": "calls",
    "to": 23
  }, {
    "from": 8,
    "label": "calls",
    "to": 23
  }, {
    "from": 25,
    "label": "calls",
    "to": 54
  }, {
    "from": 25,
    "label": "calls",
    "to": 48
  }, {
    "from": 45,
    "label": "calls",
    "to": 47
  }, {
    "from": 45,
    "label": "calls",
    "to": 47
  }, {
    "from": 45,
    "label": "calls",
    "to": 47
  }, {
    "from": 45,
    "label": "calls",
    "to": 47
  }, {
    "from": 8,
    "label": "calls",
    "to": 58
  }, {
    "from": 8,
    "label": "calls",
    "to": 58
  }, {
    "from": 8,
    "label": "calls",
    "to": 58
  }, {
    "from": 45,
    "label": "calls",
    "to": 57
  }, {
    "from": 45,
    "label": "calls",
    "to": 57
  }, {
    "from": 45,
    "label": "calls",
    "to": 62
  }, {
    "from": 45,
    "label": "calls",
    "to": 62
  }, {
    "from": 45,
    "label": "calls",
    "to": 56
  }, {
    "from": 45,
    "label": "calls",
    "to": 60
  }, {
    "from": 45,
    "label": "calls",
    "to": 55
  }, {
    "from": 2,
    "label": "calls",
    "to": 61
  }, {
    "from": 45,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 51
  }, {
    "from": 45,
    "label": "calls",
    "to": 51
  }, {
    "from": 45,
    "label": "calls",
    "to": 8
  }, {
    "from": 45,
    "label": "calls",
    "to": 59
  }, {
    "from": 45,
    "label": "calls",
    "to": 59
  }, {
    "from": 45,
    "label": "calls",
    "to": 52
  }, {
    "from": 45,
    "label": "calls",
    "to": 52
  }, {
    "from": 45,
    "label": "calls",
    "to": 52
  }, {
    "from": 45,
    "label": "calls",
    "to": 52
  }, {
    "from": 45,
    "label": "calls",
    "to": 52
  }, {
    "from": 45,
    "label": "calls",
    "to": 52
  }, {
    "from": 45,
    "label": "calls",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 45
  }, {
    "from": 45,
    "label": "declares",
    "to": 2
  }, {
    "from": 45,
    "label": "declares",
    "to": 8
  }, {
    "from": 45,
    "label": "declares",
    "to": 23
  }, {
    "from": 45,
    "label": "declares",
    "to": 25
  }, {
    "from": 45,
    "label": "declares",
    "to": 29
  }, {
    "from": 45,
    "label": "declares",
    "to": 33
  }, {
    "from": 45,
    "label": "declares",
    "to": 34
  }, {
    "from": 45,
    "label": "declares",
    "to": 37
  }, {
    "from": 45,
    "label": "declares",
    "to": 40
  }, {
    "from": 45,
    "label": "declares",
    "to": 43
  }, {
    "from": 1,
    "label": "contains",
    "to": 65
  }, {
    "from": 1,
    "label": "contains",
    "to": 66
  }, {
    "from": 66,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "requires",
    "to": 46
  }, {
    "from": 66,
    "label": "initializes",
    "to": 64
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function gen_ascii()\r\n    local chars = {}\r\n    for i = 0, 255 do chars[i + 1] = string.char(i) end\r\n    return table.concat(chars)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local chars = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "for i = 0, 255 do chars[i + 1] = string.char(i) end",
    "type": "statement:numericfor"
  }, {
    "id": 5,
    "text": "chars[i + 1] = string.char(i)",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function gen_utf16_escaped()\r\n    -- Create raw table escapes\r\n    local utf16_escaped = {}\r\n    local count = 0\r\n\r\n    local function append_escape(code)\r\n        local esc = string.format('\\\\u%04X', code)\r\n        table.insert(utf16_escaped, esc)\r\n    end\r\n\r\n    table.insert(utf16_escaped, '\"')\r\n    for i = 0, 0xD7FF do\r\n        append_escape(i)\r\n    end\r\n    -- Skip 0xD800 - 0xDFFF since they are used to encode supplementary\r\n    -- codepoints\r\n    for i = 0xE000, 0xFFFF do\r\n        append_escape(i)\r\n    end\r\n    -- Append surrogate pair for each supplementary codepoint\r\n    for high = 0xD800, 0xDBFF do\r\n        for low = 0xDC00, 0xDFFF do\r\n            append_escape(high)\r\n            append_escape(low)\r\n        end\r\n    end\r\n    table.insert(utf16_escaped, '\"')\r\n\r\n    return table.concat(utf16_escaped)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local utf16_escaped = {}",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local count = 0",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local function append_escape(code)\r\n        local esc = string.format('\\\\u%04X', code)\r\n        table.insert(utf16_escaped, esc)\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 12,
    "text": "local esc = string.format('\\\\u%04X', code)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "table.insert(utf16_escaped, esc)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "table.insert(utf16_escaped, '\"')",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "for i = 0, 0xD7FF do\r\n        append_escape(i)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 16,
    "text": "append_escape(i)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "for i = 0xE000, 0xFFFF do\r\n        append_escape(i)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 18,
    "text": "for high = 0xD800, 0xDBFF do\r\n        for low = 0xDC00, 0xDFFF do\r\n            append_escape(high)\r\n            append_escape(low)\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 19,
    "text": "for low = 0xDC00, 0xDFFF do\r\n            append_escape(high)\r\n            append_escape(low)\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 20,
    "text": "append_escape(high)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "append_escape(low)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function append_escape(code)\r\n        local esc = string.format('\\\\u%04X', code)\r\n        table.insert(utf16_escaped, esc)\r\n    end",
    "type": "function"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function test_decode_cycle(filename)\r\n    local obj1 = json.decode(file_load(filename))\r\n    local obj2 = json.decode(json.encode(obj1))\r\n    return compare_values(obj1, obj2)\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "local obj1 = json.decode(file_load(filename))",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local obj2 = json.decode(json.encode(obj1))",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function()\r\n        cjson.encode_sparse_array(true, 2, 3)\r\n        cjson.encode_max_depth(5)\r\n        return \"Setting sparse array (true, 2, 3) / max depth (5)\"\r\n    end",
    "type": "function"
  }, {
    "id": 30,
    "text": "cjson.encode_sparse_array(true, 2, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "cjson.encode_max_depth(5)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function () end",
    "type": "function"
  }, {
    "id": 34,
    "text": "function ()\r\n        json.refuse_invalid_numbers(\"encode\")\r\n        return 'Setting refuse_invalid_numbers(\"encode\")'\r\n    end",
    "type": "function"
  }, {
    "id": 35,
    "text": "json.refuse_invalid_numbers(\"encode\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function ()\r\n        json.refuse_invalid_numbers(false)\r\n        return 'Setting refuse_invalid_numbers(false).'\r\n    end",
    "type": "function"
  }, {
    "id": 38,
    "text": "json.refuse_invalid_numbers(false)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function ()\r\n        print('NOTE: receiving \"-nan\" in the following test is ok..')\r\n        return\r\n    end",
    "type": "function"
  }, {
    "id": 41,
    "text": "print('NOTE: receiving \"-nan\" in the following test is ok..')",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function ()\r\n        json.refuse_invalid_numbers(\"encode\")\r\n        return 'Setting refuse_invalid_numbers(\"encode\")'\r\n    end",
    "type": "function"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "",
    "type": "function container"
  }, {
    "id": 46,
    "text": "cjson",
    "type": "module"
  }, {
    "id": 47,
    "text": "refuse_invalid_numbers",
    "type": "global function"
  }, {
    "id": 48,
    "text": "encode",
    "type": "global function"
  }, {
    "id": 49,
    "text": "decode",
    "type": "global function"
  }, {
    "id": 50,
    "text": "encode_max_depth",
    "type": "global function"
  }, {
    "id": 51,
    "text": "format",
    "type": "global function"
  }, {
    "id": 52,
    "text": "run_test_group",
    "type": "global function"
  }, {
    "id": 53,
    "text": "file_load",
    "type": "global function"
  }, {
    "id": 54,
    "text": "compare_values",
    "type": "global function"
  }, {
    "id": 55,
    "text": "encode_sparse_array",
    "type": "global function"
  }, {
    "id": 56,
    "text": "run_test",
    "type": "global function"
  }, {
    "id": 57,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 58,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 59,
    "text": "print",
    "type": "global function"
  }, {
    "id": 60,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 61,
    "text": "char",
    "type": "global function"
  }, {
    "id": 62,
    "text": "require",
    "type": "global function"
  }, {
    "id": 63,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 64,
    "text": "",
    "type": "global variable"
  }, {
    "id": 65,
    "text": "",
    "type": "variable container"
  }, {
    "id": 66,
    "text": "",
    "type": "require container"
  }, {
    "id": 67,
    "text": "",
    "type": "require local variable"
  } ]
}