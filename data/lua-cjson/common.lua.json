{
  "_filename": "common.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-cjson/tests/common.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 13,
    "label": "has",
    "to": 20
  }, {
    "from": 13,
    "label": "has",
    "to": 21
  }, {
    "from": 13,
    "label": "has",
    "to": 10
  }, {
    "from": 13,
    "label": "has",
    "to": 22
  }, {
    "from": 13,
    "label": "has",
    "to": 23
  }, {
    "from": 13,
    "label": "has",
    "to": 24
  }, {
    "from": 13,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 30
  }, {
    "from": 13,
    "label": "has",
    "to": 33
  }, {
    "from": 13,
    "label": "has",
    "to": 10
  }, {
    "from": 13,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 10
  }, {
    "from": 35,
    "label": "has",
    "to": 10
  }, {
    "from": 35,
    "label": "has",
    "to": 10
  }, {
    "from": 35,
    "label": "has",
    "to": 10
  }, {
    "from": 35,
    "label": "has",
    "to": 10
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 45,
    "label": "has",
    "to": 53
  }, {
    "from": 45,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 45,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 45,
    "label": "has",
    "to": 10
  }, {
    "from": 45,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 46
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 49
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 59,
    "label": "has",
    "to": 65
  }, {
    "from": 59,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 59,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 10
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 67,
    "label": "has",
    "to": 10
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 67,
    "label": "has",
    "to": 10
  }, {
    "from": 67,
    "label": "has",
    "to": 73
  }, {
    "from": 67,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 67,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 76,
    "label": "has",
    "to": 79
  }, {
    "from": 67,
    "label": "has",
    "to": 10
  }, {
    "from": 67,
    "label": "has",
    "to": 10
  }, {
    "from": 67,
    "label": "has",
    "to": 80
  }, {
    "from": 67,
    "label": "has",
    "to": 10
  }, {
    "from": 67,
    "label": "has",
    "to": 10
  }, {
    "from": 67,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 88
  }, {
    "from": 82,
    "label": "has",
    "to": 89
  }, {
    "from": 82,
    "label": "has",
    "to": 90
  }, {
    "from": 82,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 82,
    "label": "has",
    "to": 93
  }, {
    "from": 82,
    "label": "has",
    "to": 94
  }, {
    "from": 82,
    "label": "has",
    "to": 95
  }, {
    "from": 82,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 82,
    "label": "has",
    "to": 98
  }, {
    "from": 82,
    "label": "has",
    "to": 99
  }, {
    "from": 82,
    "label": "has",
    "to": 10
  }, {
    "from": 82,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 84
  }, {
    "from": 101,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 101,
    "label": "has",
    "to": 87
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 99
  }, {
    "from": 103,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 10
  }, {
    "from": 103,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 103,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 105
  }, {
    "from": 115,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 115,
    "label": "has",
    "to": 99
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 10
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 13,
    "label": "calls",
    "to": 132
  }, {
    "from": 2,
    "label": "calls",
    "to": 121
  }, {
    "from": 13,
    "label": "calls",
    "to": 121
  }, {
    "from": 67,
    "label": "calls",
    "to": 121
  }, {
    "from": 67,
    "label": "calls",
    "to": 121
  }, {
    "from": 67,
    "label": "calls",
    "to": 121
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 35,
    "label": "calls",
    "to": 133
  }, {
    "from": 45,
    "label": "calls",
    "to": 124
  }, {
    "from": 45,
    "label": "calls",
    "to": 124
  }, {
    "from": 59,
    "label": "calls",
    "to": 124
  }, {
    "from": 103,
    "label": "calls",
    "to": 124
  }, {
    "from": 67,
    "label": "calls",
    "to": 67
  }, {
    "from": 82,
    "label": "calls",
    "to": 67
  }, {
    "from": 103,
    "label": "calls",
    "to": 115
  }, {
    "from": 45,
    "label": "calls",
    "to": 122
  }, {
    "from": 59,
    "label": "calls",
    "to": 122
  }, {
    "from": 103,
    "label": "calls",
    "to": 125
  }, {
    "from": 13,
    "label": "calls",
    "to": 126
  }, {
    "from": 13,
    "label": "calls",
    "to": 126
  }, {
    "from": 13,
    "label": "calls",
    "to": 126
  }, {
    "from": 13,
    "label": "calls",
    "to": 126
  }, {
    "from": 13,
    "label": "calls",
    "to": 126
  }, {
    "from": 82,
    "label": "calls",
    "to": 101
  }, {
    "from": 82,
    "label": "calls",
    "to": 101
  }, {
    "from": 82,
    "label": "calls",
    "to": 101
  }, {
    "from": 82,
    "label": "calls",
    "to": 129
  }, {
    "from": 103,
    "label": "calls",
    "to": 82
  }, {
    "from": 2,
    "label": "calls",
    "to": 130
  }, {
    "from": 35,
    "label": "calls",
    "to": 130
  }, {
    "from": 35,
    "label": "calls",
    "to": 130
  }, {
    "from": 35,
    "label": "calls",
    "to": 130
  }, {
    "from": 35,
    "label": "calls",
    "to": 130
  }, {
    "from": 35,
    "label": "calls",
    "to": 130
  }, {
    "from": 35,
    "label": "calls",
    "to": 130
  }, {
    "from": 67,
    "label": "calls",
    "to": 130
  }, {
    "from": 67,
    "label": "calls",
    "to": 130
  }, {
    "from": 103,
    "label": "calls",
    "to": 130
  }, {
    "from": 103,
    "label": "calls",
    "to": 130
  }, {
    "from": 82,
    "label": "calls",
    "to": 128
  }, {
    "from": 115,
    "label": "calls",
    "to": 128
  }, {
    "from": 13,
    "label": "calls",
    "to": 35
  }, {
    "from": 13,
    "label": "calls",
    "to": 35
  }, {
    "from": 13,
    "label": "calls",
    "to": 35
  }, {
    "from": 42,
    "label": "calls",
    "to": 35
  }, {
    "from": 101,
    "label": "calls",
    "to": 35
  }, {
    "from": 42,
    "label": "calls",
    "to": 127
  }, {
    "from": 101,
    "label": "calls",
    "to": 127
  }, {
    "from": 82,
    "label": "calls",
    "to": 127
  }, {
    "from": 82,
    "label": "calls",
    "to": 127
  }, {
    "from": 115,
    "label": "calls",
    "to": 127
  }, {
    "from": 115,
    "label": "calls",
    "to": 127
  }, {
    "from": 13,
    "label": "calls",
    "to": 120
  }, {
    "from": 35,
    "label": "calls",
    "to": 120
  }, {
    "from": 45,
    "label": "calls",
    "to": 120
  }, {
    "from": 59,
    "label": "calls",
    "to": 120
  }, {
    "from": 101,
    "label": "calls",
    "to": 120
  }, {
    "from": 115,
    "label": "calls",
    "to": 120
  }, {
    "from": 117,
    "label": "calls",
    "to": 120
  }, {
    "from": 82,
    "label": "calls",
    "to": 123
  }, {
    "from": 103,
    "label": "calls",
    "to": 123
  }, {
    "from": 119,
    "label": "calls",
    "to": 131
  }, {
    "from": 35,
    "label": "calls",
    "to": 13
  }, {
    "from": 103,
    "label": "calls",
    "to": 117
  }, {
    "from": 103,
    "label": "calls",
    "to": 117
  }, {
    "from": 1,
    "label": "contains",
    "to": 119
  }, {
    "from": 119,
    "label": "declares",
    "to": 2
  }, {
    "from": 119,
    "label": "declares",
    "to": 13
  }, {
    "from": 119,
    "label": "declares",
    "to": 35
  }, {
    "from": 119,
    "label": "declares",
    "to": 42
  }, {
    "from": 119,
    "label": "declares",
    "to": 45
  }, {
    "from": 119,
    "label": "declares",
    "to": 59
  }, {
    "from": 119,
    "label": "declares",
    "to": 67
  }, {
    "from": 119,
    "label": "declares",
    "to": 82
  }, {
    "from": 119,
    "label": "declares",
    "to": 101
  }, {
    "from": 119,
    "label": "declares",
    "to": 103
  }, {
    "from": 119,
    "label": "declares",
    "to": 115
  }, {
    "from": 119,
    "label": "declares",
    "to": 117
  }, {
    "from": 134,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 135
  }, {
    "from": 1,
    "label": "contains",
    "to": 136
  }, {
    "from": 136,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "requires",
    "to": 1
  }, {
    "from": 134,
    "label": "requires",
    "to": 1
  }, {
    "from": 134,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "common",
    "type": "module"
  }, {
    "id": 2,
    "text": "function is_array(table)\r\n    local max = 0\r\n    local count = 0\r\n    for k, v in pairs(table) do\r\n        if type(k) == \"number\" then\r\n            if k > max then max = k end\r\n            count = count + 1\r\n        else\r\n            return -1\r\n        end\r\n    end\r\n    if max > count * 2 then\r\n        return -1\r\n    end\r\n\r\n    return max\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local max = 0",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local count = 0",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "for k, v in pairs(table) do\r\n        if type(k) == \"number\" then\r\n            if k > max then max = k end\r\n            count = count + 1\r\n        else\r\n            return -1\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 6,
    "text": "if type(k) == \"number\" then\r\n            if k > max then max = k end\r\n            count = count + 1\r\n        else\r\n            return -1\r\n        end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "if k > max then max = k end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "max = k",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "count = count + 1",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "if max > count * 2 then\r\n        return -1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function serialise_table(value, indent, depth)\r\n    local spacing, spacing2, indent2\r\n    if indent then\r\n        spacing = \"\\n\" .. indent\r\n        spacing2 = spacing .. \"  \"\r\n        indent2 = indent .. \"  \"\r\n    else\r\n        spacing, spacing2, indent2 = \" \", \" \", false\r\n    end\r\n    depth = depth + 1\r\n    if depth > 50 then\r\n        return \"Cannot serialise any further: too many nested tables\"\r\n    end\r\n\r\n    local max = is_array(value)\r\n\r\n    local comma = false\r\n    local fragment = { \"{\" .. spacing2 }\r\n    if max > 0 then\r\n        -- Serialise array\r\n        for i = 1, max do\r\n            if comma then\r\n                table.insert(fragment, \",\" .. spacing2)\r\n            end\r\n            table.insert(fragment, serialise_value(value[i], indent2, depth))\r\n            comma = true\r\n        end\r\n    elseif max < 0 then\r\n        -- Serialise table\r\n        for k, v in pairs(value) do\r\n            if comma then\r\n                table.insert(fragment, \",\" .. spacing2)\r\n            end\r\n            table.insert(fragment, string.format(\r\n                \"[%s] = %s\", serialise_value(k, indent2, depth),\r\n                             serialise_value(v, indent2, depth))\r\n            )\r\n            comma = true\r\n        end\r\n    end\r\n    table.insert(fragment, spacing .. \"}\")\r\n\r\n    return table.concat(fragment)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local spacing, spacing2, indent2",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if indent then\r\n        spacing = \"\\n\" .. indent\r\n        spacing2 = spacing .. \"  \"\r\n        indent2 = indent .. \"  \"\r\n    else\r\n        spacing, spacing2, indent2 = \" \", \" \", false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "spacing = \"\\n\" .. indent",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "spacing2 = spacing .. \"  \"",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "indent2 = indent .. \"  \"",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "spacing, spacing2, indent2 = \" \", \" \", false",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "depth = depth + 1",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if depth > 50 then\r\n        return \"Cannot serialise any further: too many nested tables\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "local max = is_array(value)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local comma = false",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local fragment = { \"{\" .. spacing2 }",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if max > 0 then\r\n        -- Serialise array\r\n        for i = 1, max do\r\n            if comma then\r\n                table.insert(fragment, \",\" .. spacing2)\r\n            end\r\n            table.insert(fragment, serialise_value(value[i], indent2, depth))\r\n            comma = true\r\n        end\r\n    elseif max < 0 then\r\n        -- Serialise table\r\n        for k, v in pairs(value) do\r\n            if comma then\r\n                table.insert(fragment, \",\" .. spacing2)\r\n            end\r\n            table.insert(fragment, string.format(\r\n                \"[%s] = %s\", serialise_value(k, indent2, depth),\r\n                             serialise_value(v, indent2, depth))\r\n            )\r\n            comma = true\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "for i = 1, max do\r\n            if comma then\r\n                table.insert(fragment, \",\" .. spacing2)\r\n            end\r\n            table.insert(fragment, serialise_value(value[i], indent2, depth))\r\n            comma = true\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 27,
    "text": "if comma then\r\n                table.insert(fragment, \",\" .. spacing2)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "table.insert(fragment, \",\" .. spacing2)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "table.insert(fragment, serialise_value(value[i], indent2, depth))",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "comma = true",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "for k, v in pairs(value) do\r\n            if comma then\r\n                table.insert(fragment, \",\" .. spacing2)\r\n            end\r\n            table.insert(fragment, string.format(\r\n                \"[%s] = %s\", serialise_value(k, indent2, depth),\r\n                             serialise_value(v, indent2, depth))\r\n            )\r\n            comma = true\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 32,
    "text": "table.insert(fragment, string.format(\r\n                \"[%s] = %s\", serialise_value(k, indent2, depth),\r\n                             serialise_value(v, indent2, depth))\r\n            )",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "table.insert(fragment, spacing .. \"}\")",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function serialise_value(value, indent, depth)\r\n    if indent == nil then indent = \"\" end\r\n    if depth == nil then depth = 0 end\r\n\r\n    if value == cjson.null then\r\n        return \"cjson.null\"\r\n    elseif type(value) == \"string\" then\r\n        return string.format(\"%q\", value)\r\n    elseif type(value) == \"nil\" or type(value) == \"number\" or\r\n           type(value) == \"boolean\" then\r\n        return tostring(value)\r\n    elseif type(value) == \"table\" then\r\n        return serialise_table(value, indent, depth)\r\n    else\r\n        return \"\\\"<\" .. type(value) .. \">\\\"\"\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "if indent == nil then indent = \"\" end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "indent = \"\"",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "if depth == nil then depth = 0 end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "depth = 0",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "if value == cjson.null then\r\n        return \"cjson.null\"\r\n    elseif type(value) == \"string\" then\r\n        return string.format(\"%q\", value)\r\n    elseif type(value) == \"nil\" or type(value) == \"number\" or\r\n           type(value) == \"boolean\" then\r\n        return tostring(value)\r\n    elseif type(value) == \"table\" then\r\n        return serialise_table(value, indent, depth)\r\n    else\r\n        return \"\\\"<\" .. type(value) .. \">\\\"\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function dump_value(value)\r\n    print(serialise_value(value))\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "print(serialise_value(value))",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function file_load(filename)\r\n    local file\r\n    if filename == nil then\r\n        file = io.stdin\r\n    else\r\n        local err\r\n        file, err = io.open(filename)\r\n        if file == nil then\r\n            error(string.format(\"Unable to read '%s': %s\", filename, err))\r\n        end\r\n    end\r\n    local data = file:read(\"*a\")\r\n\r\n    if filename ~= nil then\r\n        file:close()\r\n    end\r\n\r\n    if data == nil then\r\n        error(\"Failed to read \" .. filename)\r\n    end\r\n\r\n    return data\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local file",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "if filename == nil then\r\n        file = io.stdin\r\n    else\r\n        local err\r\n        file, err = io.open(filename)\r\n        if file == nil then\r\n            error(string.format(\"Unable to read '%s': %s\", filename, err))\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "file = io.stdin",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "local err",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "file, err = io.open(filename)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "if file == nil then\r\n            error(string.format(\"Unable to read '%s': %s\", filename, err))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "error(string.format(\"Unable to read '%s': %s\", filename, err))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "local data = file:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if filename ~= nil then\r\n        file:close()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "if data == nil then\r\n        error(\"Failed to read \" .. filename)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "error(\"Failed to read \" .. filename)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function file_save(filename, data)\r\n    local file\r\n    if filename == nil then\r\n        file = io.stdout\r\n    else\r\n        local err\r\n        file, err = io.open(filename, \"w\")\r\n        if file == nil then\r\n            error(string.format(\"Unable to write '%s': %s\", filename, err))\r\n        end\r\n    end\r\n    file:write(data)\r\n    if filename ~= nil then\r\n        file:close()\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "if filename == nil then\r\n        file = io.stdout\r\n    else\r\n        local err\r\n        file, err = io.open(filename, \"w\")\r\n        if file == nil then\r\n            error(string.format(\"Unable to write '%s': %s\", filename, err))\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "file = io.stdout",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "file, err = io.open(filename, \"w\")",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "if file == nil then\r\n            error(string.format(\"Unable to write '%s': %s\", filename, err))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "error(string.format(\"Unable to write '%s': %s\", filename, err))",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "file:write(data)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function compare_values(val1, val2)\r\n    local type1 = type(val1)\r\n    local type2 = type(val2)\r\n    if type1 ~= type2 then\r\n        return false\r\n    end\r\n\r\n    -- Check for NaN\r\n    if type1 == \"number\" and val1 ~= val1 and val2 ~= val2 then\r\n        return true\r\n    end\r\n\r\n    if type1 ~= \"table\" then\r\n        return val1 == val2\r\n    end\r\n\r\n    -- check_keys stores all the keys that must be checked in val2\r\n    local check_keys = {}\r\n    for k, _ in pairs(val1) do\r\n        check_keys[k] = true\r\n    end\r\n\r\n    for k, v in pairs(val2) do\r\n        if not check_keys[k] then\r\n            return false\r\n        end\r\n\r\n        if not compare_values(val1[k], val2[k]) then\r\n            return false\r\n        end\r\n\r\n        check_keys[k] = nil\r\n    end\r\n    for k, _ in pairs(check_keys) do\r\n        -- Not the same if any keys from val1 were not found in val2\r\n        return false\r\n    end\r\n    return true\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "local type1 = type(val1)",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "local type2 = type(val2)",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "if type1 ~= type2 then\r\n        return false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "if type1 == \"number\" and val1 ~= val1 and val2 ~= val2 then\r\n        return true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "if type1 ~= \"table\" then\r\n        return val1 == val2\r\n    end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "local check_keys = {}",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "for k, _ in pairs(val1) do\r\n        check_keys[k] = true\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 75,
    "text": "check_keys[k] = true",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "for k, v in pairs(val2) do\r\n        if not check_keys[k] then\r\n            return false\r\n        end\r\n\r\n        if not compare_values(val1[k], val2[k]) then\r\n            return false\r\n        end\r\n\r\n        check_keys[k] = nil\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 77,
    "text": "if not check_keys[k] then\r\n            return false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "if not compare_values(val1[k], val2[k]) then\r\n            return false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "check_keys[k] = nil",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "for k, _ in pairs(check_keys) do\r\n        -- Not the same if any keys from val1 were not found in val2\r\n        return false\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function run_test(testname, func, input, should_work, output)\r\n    local function status_line(name, status, value)\r\n        local statusmap = { [true] = \":success\", [false] = \":error\" }\r\n        if status ~= nil then\r\n            name = name .. statusmap[status]\r\n        end\r\n        print(string.format(\"[%s] %s\", name, serialise_value(value, false)))\r\n    end\r\n\r\n    local result = { pcall(func, unpack(input)) }\r\n    local success = table.remove(result, 1)\r\n\r\n    local correct = false\r\n    if success == should_work and compare_values(result, output) then\r\n        correct = true\r\n    end\r\n\r\n    local teststatus = { [true] = \"PASS\", [false] = \"FAIL\" }\r\n    print(\"==> Test \" .. testname .. \": \" .. teststatus[correct])\r\n\r\n    status_line(\"Input\", nil, input)\r\n    if not correct then\r\n        status_line(\"Expected\", should_work, output)\r\n    end\r\n    status_line(\"Received\", success, result)\r\n    print()\r\n\r\n    return correct, result\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "local function status_line(name, status, value)\r\n        local statusmap = { [true] = \":success\", [false] = \":error\" }\r\n        if status ~= nil then\r\n            name = name .. statusmap[status]\r\n        end\r\n        print(string.format(\"[%s] %s\", name, serialise_value(value, false)))\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 84,
    "text": "local statusmap = { [true] = \":success\", [false] = \":error\" }",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "if status ~= nil then\r\n            name = name .. statusmap[status]\r\n        end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "name = name .. statusmap[status]",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "print(string.format(\"[%s] %s\", name, serialise_value(value, false)))",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "local result = { pcall(func, unpack(input)) }",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local success = table.remove(result, 1)",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "local correct = false",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if success == should_work and compare_values(result, output) then\r\n        correct = true\r\n    end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "correct = true",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "local teststatus = { [true] = \"PASS\", [false] = \"FAIL\" }",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "print(\"==> Test \" .. testname .. \": \" .. teststatus[correct])",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "status_line(\"Input\", nil, input)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "if not correct then\r\n        status_line(\"Expected\", should_work, output)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "status_line(\"Expected\", should_work, output)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "status_line(\"Received\", success, result)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "local function status_line(name, status, value)\r\n        local statusmap = { [true] = \":success\", [false] = \":error\" }\r\n        if status ~= nil then\r\n            name = name .. statusmap[status]\r\n        end\r\n        print(string.format(\"[%s] %s\", name, serialise_value(value, false)))\r\n    end",
    "type": "function"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function run_test_group(testgroup, tests)\r\n    local function run_config(configname, func)\r\n        local success, msg = pcall(func)\r\n        if msg then\r\n            print(string.format(\"==> Config %s: %s\", configname, msg))\r\n        end\r\n        print()\r\n    end\r\n\r\n    local function test_id(group, id)\r\n        return string.format(\"%s [%d]\", group, id)\r\n    end\r\n\r\n    for k, v in ipairs(tests) do\r\n        if type(v) == \"function\" then\r\n            -- Useful for changing configuration during a batch\r\n            run_config(test_id(testgroup, k), v)\r\n        elseif type(v) == \"table\" then\r\n            run_test(test_id(testgroup, k), unpack(v))\r\n        else\r\n            error(\"Testgroup can only contain functions and tables\")\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "local function run_config(configname, func)\r\n        local success, msg = pcall(func)\r\n        if msg then\r\n            print(string.format(\"==> Config %s: %s\", configname, msg))\r\n        end\r\n        print()\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 105,
    "text": "local success, msg = pcall(func)",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "if msg then\r\n            print(string.format(\"==> Config %s: %s\", configname, msg))\r\n        end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "print(string.format(\"==> Config %s: %s\", configname, msg))",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "local function test_id(group, id)\r\n        return string.format(\"%s [%d]\", group, id)\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 109,
    "text": "for k, v in ipairs(tests) do\r\n        if type(v) == \"function\" then\r\n            -- Useful for changing configuration during a batch\r\n            run_config(test_id(testgroup, k), v)\r\n        elseif type(v) == \"table\" then\r\n            run_test(test_id(testgroup, k), unpack(v))\r\n        else\r\n            error(\"Testgroup can only contain functions and tables\")\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 110,
    "text": "if type(v) == \"function\" then\r\n            -- Useful for changing configuration during a batch\r\n            run_config(test_id(testgroup, k), v)\r\n        elseif type(v) == \"table\" then\r\n            run_test(test_id(testgroup, k), unpack(v))\r\n        else\r\n            error(\"Testgroup can only contain functions and tables\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "run_config(test_id(testgroup, k), v)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "run_test(test_id(testgroup, k), unpack(v))",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "error(\"Testgroup can only contain functions and tables\")",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "local function run_config(configname, func)\r\n        local success, msg = pcall(func)\r\n        if msg then\r\n            print(string.format(\"==> Config %s: %s\", configname, msg))\r\n        end\r\n        print()\r\n    end",
    "type": "function"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "local function test_id(group, id)\r\n        return string.format(\"%s [%d]\", group, id)\r\n    end",
    "type": "function"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "",
    "type": "function container"
  }, {
    "id": 120,
    "text": "format",
    "type": "global function"
  }, {
    "id": 121,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 122,
    "text": "open",
    "type": "global function"
  }, {
    "id": 123,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 124,
    "text": "error",
    "type": "global function"
  }, {
    "id": 125,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 126,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 127,
    "text": "print",
    "type": "global function"
  }, {
    "id": 128,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 129,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 130,
    "text": "type",
    "type": "global function"
  }, {
    "id": 131,
    "text": "require",
    "type": "global function"
  }, {
    "id": 132,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 133,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 134,
    "text": "",
    "type": "global variable"
  }, {
    "id": 135,
    "text": "",
    "type": "variable container"
  }, {
    "id": 136,
    "text": "",
    "type": "require container"
  } ]
}