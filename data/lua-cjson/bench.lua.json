{
  "_filename": "bench.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-cjson/tests/bench.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 14
  }, {
    "from": 3,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 15,
    "label": "has",
    "to": 24
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 5
  }, {
    "from": 26,
    "label": "has",
    "to": 6
  }, {
    "from": 26,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 26,
    "label": "has",
    "to": 9
  }, {
    "from": 26,
    "label": "has",
    "to": 10
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 12
  }, {
    "from": 28,
    "label": "has",
    "to": 13
  }, {
    "from": 28,
    "label": "has",
    "to": 10
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 30,
    "label": "has",
    "to": 10
  }, {
    "from": 30,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 34
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 36
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "calls",
    "to": 49
  }, {
    "from": 30,
    "label": "calls",
    "to": 48
  }, {
    "from": 41,
    "label": "calls",
    "to": 48
  }, {
    "from": 3,
    "label": "calls",
    "to": 50
  }, {
    "from": 43,
    "label": "calls",
    "to": 50
  }, {
    "from": 30,
    "label": "calls",
    "to": 51
  }, {
    "from": 3,
    "label": "calls",
    "to": 52
  }, {
    "from": 26,
    "label": "calls",
    "to": 53
  }, {
    "from": 28,
    "label": "calls",
    "to": 26
  }, {
    "from": 28,
    "label": "calls",
    "to": 26
  }, {
    "from": 3,
    "label": "calls",
    "to": 26
  }, {
    "from": 28,
    "label": "calls",
    "to": 54
  }, {
    "from": 26,
    "label": "calls",
    "to": 55
  }, {
    "from": 43,
    "label": "calls",
    "to": 56
  }, {
    "from": 43,
    "label": "calls",
    "to": 57
  }, {
    "from": 30,
    "label": "calls",
    "to": 3
  }, {
    "from": 43,
    "label": "calls",
    "to": 30
  }, {
    "from": 26,
    "label": "calls",
    "to": 47
  }, {
    "from": 26,
    "label": "calls",
    "to": 47
  }, {
    "from": 3,
    "label": "calls",
    "to": 28
  }, {
    "from": 43,
    "label": "calls",
    "to": 59
  }, {
    "from": 43,
    "label": "calls",
    "to": 59
  }, {
    "from": 43,
    "label": "calls",
    "to": 59
  }, {
    "from": 39,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 58
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 43,
    "label": "declares",
    "to": 3
  }, {
    "from": 43,
    "label": "declares",
    "to": 26
  }, {
    "from": 43,
    "label": "declares",
    "to": 28
  }, {
    "from": 43,
    "label": "declares",
    "to": 30
  }, {
    "from": 43,
    "label": "declares",
    "to": 39
  }, {
    "from": 43,
    "label": "declares",
    "to": 41
  }, {
    "from": 1,
    "label": "contains",
    "to": 60
  }, {
    "from": 1,
    "label": "contains",
    "to": 61
  }, {
    "from": 61,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "requires",
    "to": 44
  }, {
    "from": 61,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "requires",
    "to": 2
  }, {
    "from": 61,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "requires",
    "to": 46
  }, {
    "from": 64,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "requires",
    "to": 44
  }, {
    "from": 65,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "requires",
    "to": 2
  }, {
    "from": 65,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "requires",
    "to": 44
  }, {
    "from": 66,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "requires",
    "to": 2
  }, {
    "from": 66,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "requires",
    "to": 44
  }, {
    "from": 67,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "bench",
    "type": "module"
  }, {
    "id": 2,
    "text": "common",
    "type": "module"
  }, {
    "id": 3,
    "text": "function benchmark(tests, seconds, rep)\r\n    local function bench(func, iter)\r\n        -- collectgarbage(\"stop\")\r\n        collectgarbage(\"collect\")\r\n        local t = socket.gettime()\r\n        for i = 1, iter do\r\n            func(i)\r\n        end\r\n        t = socket.gettime() - t\r\n        -- collectgarbage(\"restart\")\r\n        return (iter / t)\r\n    end\r\n\r\n    -- Roughly calculate the number of interations required\r\n    -- to obtain a particular time period.\r\n    local function calc_iter(func, seconds)\r\n        local base_iter = 10\r\n        local rate = (bench(func, base_iter) + bench(func, base_iter)) / 2\r\n        return math.ceil(seconds * rate)\r\n    end\r\n\r\n    local test_results = {}\r\n    for name, func in pairs(tests) do\r\n        -- k(number), v(string)\r\n        -- k(string), v(function)\r\n        -- k(number), v(function)\r\n        if type(func) == \"string\" then\r\n            name = func\r\n            func = _G[name]\r\n        end\r\n        local iter = calc_iter(func, seconds)\r\n        local result = {}\r\n        for i = 1, rep do\r\n            result[i] = bench(func, iter)\r\n        end\r\n        table.sort(result)\r\n        test_results[name] = result[rep]\r\n    end\r\n\r\n    return test_results\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function bench(func, iter)\r\n        -- collectgarbage(\"stop\")\r\n        collectgarbage(\"collect\")\r\n        local t = socket.gettime()\r\n        for i = 1, iter do\r\n            func(i)\r\n        end\r\n        t = socket.gettime() - t\r\n        -- collectgarbage(\"restart\")\r\n        return (iter / t)\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 5,
    "text": "collectgarbage(\"collect\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "local t = socket.gettime()",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "for i = 1, iter do\r\n            func(i)\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 8,
    "text": "func(i)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "t = socket.gettime() - t",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "local function calc_iter(func, seconds)\r\n        local base_iter = 10\r\n        local rate = (bench(func, base_iter) + bench(func, base_iter)) / 2\r\n        return math.ceil(seconds * rate)\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 12,
    "text": "local base_iter = 10",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local rate = (bench(func, base_iter) + bench(func, base_iter)) / 2",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local test_results = {}",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "for name, func in pairs(tests) do\r\n        -- k(number), v(string)\r\n        -- k(string), v(function)\r\n        -- k(number), v(function)\r\n        if type(func) == \"string\" then\r\n            name = func\r\n            func = _G[name]\r\n        end\r\n        local iter = calc_iter(func, seconds)\r\n        local result = {}\r\n        for i = 1, rep do\r\n            result[i] = bench(func, iter)\r\n        end\r\n        table.sort(result)\r\n        test_results[name] = result[rep]\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 16,
    "text": "if type(func) == \"string\" then\r\n            name = func\r\n            func = _G[name]\r\n        end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "name = func",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "func = _G[name]",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "local iter = calc_iter(func, seconds)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local result = {}",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "for i = 1, rep do\r\n            result[i] = bench(func, iter)\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 22,
    "text": "result[i] = bench(func, iter)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "table.sort(result)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "test_results[name] = result[rep]",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "local function bench(func, iter)\r\n        -- collectgarbage(\"stop\")\r\n        collectgarbage(\"collect\")\r\n        local t = socket.gettime()\r\n        for i = 1, iter do\r\n            func(i)\r\n        end\r\n        t = socket.gettime() - t\r\n        -- collectgarbage(\"restart\")\r\n        return (iter / t)\r\n    end",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function calc_iter(func, seconds)\r\n        local base_iter = 10\r\n        local rate = (bench(func, base_iter) + bench(func, base_iter)) / 2\r\n        return math.ceil(seconds * rate)\r\n    end",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function bench_file(filename)\r\n    local data_json = file_load(filename)\r\n    local data_obj = json.decode(data_json)\r\n\r\n    local function test_encode ()\r\n        json.encode(data_obj)\r\n    end\r\n    local function test_decode ()\r\n        json.decode(data_json)\r\n    end\r\n\r\n    local tests = {\r\n        encode = test_encode,\r\n        decode = test_decode\r\n    }\r\n\r\n    return benchmark(tests, 0.1, 5)\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "local data_json = file_load(filename)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local data_obj = json.decode(data_json)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local function test_encode ()\r\n        json.encode(data_obj)\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 34,
    "text": "json.encode(data_obj)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "local function test_decode ()\r\n        json.decode(data_json)\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 36,
    "text": "json.decode(data_json)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "local tests = {\r\n        encode = test_encode,\r\n        decode = test_decode\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function test_encode ()\r\n        json.encode(data_obj)\r\n    end",
    "type": "function"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "local function test_decode ()\r\n        json.decode(data_json)\r\n    end",
    "type": "function"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "",
    "type": "function container"
  }, {
    "id": 44,
    "text": "cjson",
    "type": "module"
  }, {
    "id": 45,
    "text": "encode",
    "type": "global function"
  }, {
    "id": 46,
    "text": "socket",
    "type": "module"
  }, {
    "id": 47,
    "text": "gettime",
    "type": "global function"
  }, {
    "id": 48,
    "text": "decode",
    "type": "global function"
  }, {
    "id": 49,
    "text": "format",
    "type": "global function"
  }, {
    "id": 50,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 51,
    "text": "file_load",
    "type": "global function"
  }, {
    "id": 52,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 53,
    "text": "func",
    "type": "global function"
  }, {
    "id": 54,
    "text": "ceil",
    "type": "global function"
  }, {
    "id": 55,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 56,
    "text": "print",
    "type": "global function"
  }, {
    "id": 57,
    "text": "encode_keep_buffer",
    "type": "global function"
  }, {
    "id": 58,
    "text": "type",
    "type": "global function"
  }, {
    "id": 59,
    "text": "require",
    "type": "global function"
  }, {
    "id": 60,
    "text": "",
    "type": "variable container"
  }, {
    "id": 61,
    "text": "",
    "type": "require container"
  }, {
    "id": 62,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "global variable"
  }, {
    "id": 64,
    "text": "",
    "type": "require container"
  }, {
    "id": 65,
    "text": "",
    "type": "require container"
  }, {
    "id": 66,
    "text": "",
    "type": "require container"
  }, {
    "id": 67,
    "text": "",
    "type": "require container"
  } ]
}