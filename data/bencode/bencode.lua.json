{
  "_filename": "bencode.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/bencode/bencode.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 6
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 17,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 13
  }, {
    "from": 24,
    "label": "has",
    "to": 14
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 14
  }, {
    "from": 17,
    "label": "has",
    "to": 6
  }, {
    "from": 17,
    "label": "has",
    "to": 6
  }, {
    "from": 17,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 6
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 30
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 6
  }, {
    "from": 42,
    "label": "has",
    "to": 6
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 6
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 6
  }, {
    "from": 47,
    "label": "has",
    "to": 6
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 43
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 6
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 6
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 43
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 62,
    "label": "has",
    "to": 67
  }, {
    "from": 62,
    "label": "has",
    "to": 68
  }, {
    "from": 61,
    "label": "has",
    "to": 6
  }, {
    "from": 61,
    "label": "has",
    "to": 6
  }, {
    "from": 61,
    "label": "has",
    "to": 59
  }, {
    "from": 61,
    "label": "has",
    "to": 6
  }, {
    "from": 61,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 6
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 70,
    "label": "has",
    "to": 75
  }, {
    "from": 70,
    "label": "has",
    "to": 6
  }, {
    "from": 70,
    "label": "has",
    "to": 76
  }, {
    "from": 70,
    "label": "has",
    "to": 6
  }, {
    "from": 70,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 6
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 78,
    "label": "has",
    "to": 6
  }, {
    "from": 78,
    "label": "has",
    "to": 83
  }, {
    "from": 78,
    "label": "has",
    "to": 6
  }, {
    "from": 78,
    "label": "has",
    "to": 6
  }, {
    "from": 78,
    "label": "has",
    "to": 6
  }, {
    "from": 78,
    "label": "has",
    "to": 6
  }, {
    "from": 78,
    "label": "has",
    "to": 6
  }, {
    "from": 78,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "calls",
    "to": 10
  }, {
    "from": 78,
    "label": "calls",
    "to": 61
  }, {
    "from": 2,
    "label": "calls",
    "to": 90
  }, {
    "from": 17,
    "label": "calls",
    "to": 90
  }, {
    "from": 10,
    "label": "calls",
    "to": 37
  }, {
    "from": 17,
    "label": "calls",
    "to": 37
  }, {
    "from": 17,
    "label": "calls",
    "to": 37
  }, {
    "from": 42,
    "label": "calls",
    "to": 37
  }, {
    "from": 85,
    "label": "calls",
    "to": 27
  }, {
    "from": 85,
    "label": "calls",
    "to": 2
  }, {
    "from": 78,
    "label": "calls",
    "to": 53
  }, {
    "from": 85,
    "label": "calls",
    "to": 33
  }, {
    "from": 78,
    "label": "calls",
    "to": 70
  }, {
    "from": 10,
    "label": "calls",
    "to": 93
  }, {
    "from": 10,
    "label": "calls",
    "to": 93
  }, {
    "from": 17,
    "label": "calls",
    "to": 93
  }, {
    "from": 17,
    "label": "calls",
    "to": 93
  }, {
    "from": 17,
    "label": "calls",
    "to": 93
  }, {
    "from": 27,
    "label": "calls",
    "to": 93
  }, {
    "from": 27,
    "label": "calls",
    "to": 93
  }, {
    "from": 27,
    "label": "calls",
    "to": 93
  }, {
    "from": 33,
    "label": "calls",
    "to": 93
  }, {
    "from": 33,
    "label": "calls",
    "to": 93
  }, {
    "from": 33,
    "label": "calls",
    "to": 93
  }, {
    "from": 53,
    "label": "calls",
    "to": 93
  }, {
    "from": 17,
    "label": "calls",
    "to": 94
  }, {
    "from": 10,
    "label": "calls",
    "to": 95
  }, {
    "from": 17,
    "label": "calls",
    "to": 95
  }, {
    "from": 53,
    "label": "calls",
    "to": 78
  }, {
    "from": 61,
    "label": "calls",
    "to": 78
  }, {
    "from": 61,
    "label": "calls",
    "to": 78
  }, {
    "from": 85,
    "label": "calls",
    "to": 17
  }, {
    "from": 47,
    "label": "calls",
    "to": 89
  }, {
    "from": 70,
    "label": "calls",
    "to": 89
  }, {
    "from": 85,
    "label": "calls",
    "to": 96
  }, {
    "from": 78,
    "label": "calls",
    "to": 47
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 17,
    "label": "calls",
    "to": 97
  }, {
    "from": 85,
    "label": "calls",
    "to": 97
  }, {
    "from": 47,
    "label": "calls",
    "to": 91
  }, {
    "from": 42,
    "label": "calls",
    "to": 98
  }, {
    "from": 53,
    "label": "calls",
    "to": 92
  }, {
    "from": 61,
    "label": "calls",
    "to": 92
  }, {
    "from": 70,
    "label": "calls",
    "to": 92
  }, {
    "from": 78,
    "label": "calls",
    "to": 92
  }, {
    "from": 1,
    "label": "contains",
    "to": 85
  }, {
    "from": 85,
    "label": "declares",
    "to": 2
  }, {
    "from": 85,
    "label": "declares",
    "to": 10
  }, {
    "from": 85,
    "label": "declares",
    "to": 17
  }, {
    "from": 85,
    "label": "declares",
    "to": 27
  }, {
    "from": 85,
    "label": "declares",
    "to": 33
  }, {
    "from": 85,
    "label": "declares",
    "to": 37
  }, {
    "from": 85,
    "label": "declares",
    "to": 42
  }, {
    "from": 85,
    "label": "declares",
    "to": 47
  }, {
    "from": 85,
    "label": "declares",
    "to": 53
  }, {
    "from": 85,
    "label": "declares",
    "to": 61
  }, {
    "from": 85,
    "label": "declares",
    "to": 70
  }, {
    "from": 85,
    "label": "declares",
    "to": 78
  }, {
    "from": 86,
    "label": "calls",
    "to": 78
  }, {
    "from": 87,
    "label": "calls",
    "to": 42
  }, {
    "from": 87,
    "label": "calls",
    "to": 78
  }, {
    "from": 88,
    "label": "calls",
    "to": 78
  }, {
    "from": 1,
    "label": "contains",
    "to": 99
  }, {
    "from": 1,
    "label": "contains",
    "to": 100
  }, {
    "from": 99,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 99,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 99,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 99,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 99,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 99,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 99,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 99,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 99,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 99,
    "label": "initializes",
    "to": 119
  }, {
    "from": 99,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 122,
    "label": "requires",
    "to": 1
  }, {
    "from": 123,
    "label": "requires",
    "to": 1
  }, {
    "from": 124,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "bencode",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function islist(t) \r\n\tlocal n = #t \r\n\tfor k, v in pairs(t) do \r\n\t\tif type(k) ~= \"number\" \r\n\t\tor k % 1 ~= 0 \t\t-- integer?\r\n\t\tor k < 1\r\n\t\tor k > n \r\n\t\tthen \r\n\t\t\treturn false \r\n\t\tend \r\n\tend \r\n\tfor i = 1, n do\r\n\t\tif t[i] == nil then \r\n\t\t\treturn false \r\n\t\tend \r\n\tend \r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local n = #t",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "for k, v in pairs(t) do \r\n\t\tif type(k) ~= \"number\" \r\n\t\tor k % 1 ~= 0 \t\t-- integer?\r\n\t\tor k < 1\r\n\t\tor k > n \r\n\t\tthen \r\n\t\t\treturn false \r\n\t\tend \r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 5,
    "text": "if type(k) ~= \"number\" \r\n\t\tor k % 1 ~= 0 \t\t-- integer?\r\n\t\tor k < 1\r\n\t\tor k > n \r\n\t\tthen \r\n\t\t\treturn false \r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "for i = 1, n do\r\n\t\tif t[i] == nil then \r\n\t\t\treturn false \r\n\t\tend \r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 8,
    "text": "if t[i] == nil then \r\n\t\t\treturn false \r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function encode_list(t, x)\r\n\r\n\tinsert(t, \"l\")\r\n\r\n\tfor _,v in ipairs(x) do \r\n\t\tlocal err,ev = encode_rec(t, v);    if err then return err,ev end\r\n\tend\r\n\r\n\tinsert(t, \"e\") \r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "insert(t, \"l\")",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "for _,v in ipairs(x) do \r\n\t\tlocal err,ev = encode_rec(t, v);    if err then return err,ev end\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 13,
    "text": "local err,ev = encode_rec(t, v)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if err then return err,ev end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "insert(t, \"e\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function encode_dict(t, x)\r\n\tinsert(t, \"d\")\r\n\t-- bittorrent requires the keys to be sorted.\r\n\tlocal sortedkeys = {}\r\n\tfor k, v in pairs(x) do\r\n\t\tif type(k) ~= \"string\" then\r\n\t\t\treturn \"bencoding requires dictionary keys to be strings\", k\r\n\t\tend\r\n\t\tinsert(sortedkeys, k)\r\n\tend\r\n\tsort(sortedkeys)\r\n\r\n\tfor k, v in ipairs(sortedkeys) do\r\n\t\tlocal err,ev = encode_rec(t, v);    if err then return err,ev end\r\n\t\t      err,ev = encode_rec(t, x[v]); if err then return err,ev end\r\n\tend\r\n\tinsert(t, \"e\")\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "insert(t, \"d\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local sortedkeys = {}",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "for k, v in pairs(x) do\r\n\t\tif type(k) ~= \"string\" then\r\n\t\t\treturn \"bencoding requires dictionary keys to be strings\", k\r\n\t\tend\r\n\t\tinsert(sortedkeys, k)\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 21,
    "text": "if type(k) ~= \"string\" then\r\n\t\t\treturn \"bencoding requires dictionary keys to be strings\", k\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "insert(sortedkeys, k)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "sort(sortedkeys)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "for k, v in ipairs(sortedkeys) do\r\n\t\tlocal err,ev = encode_rec(t, v);    if err then return err,ev end\r\n\t\t      err,ev = encode_rec(t, x[v]); if err then return err,ev end\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "err,ev = encode_rec(t, x[v])",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function encode_int(t, x)\r\n\r\n\tif x % 1 ~= 0 then return \"number is not an integer\", x end\r\n\tinsert(t, \"i\" )\r\n\tinsert(t,  x  )\r\n\tinsert(t, \"e\" )\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "if x % 1 ~= 0 then return \"number is not an integer\", x end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "insert(t, \"i\" )",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "insert(t,  x  )",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "insert(t, \"e\" )",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function encode_str(t, x)\r\n\r\n\tinsert(t, #x  ) \r\n\tinsert(t, \":\" )\r\n\tinsert(t,  x  )\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "insert(t, #x  )",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "insert(t, \":\" )",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function(t, x)\r\n\r\n\tlocal  typx = type(x)\r\n\tif     typx == \"string\" then  return encode_str  (t, x)\r\n\telseif typx == \"number\" then  return encode_int  (t, x)\r\n\telseif typx == \"table\"  then\r\n\r\n\t\tif islist(x)    then  return encode_list (t, x)\r\n\t\telse                  return encode_dict (t, x)\r\n\t\tend\r\n\telse\r\n\t\treturn \"type cannot be converted to an acceptable type for bencoding\", typx\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "local  typx = type(x)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if     typx == \"string\" then  return encode_str  (t, x)\r\n\telseif typx == \"number\" then  return encode_int  (t, x)\r\n\telseif typx == \"table\"  then\r\n\r\n\t\tif islist(x)    then  return encode_list (t, x)\r\n\t\telse                  return encode_dict (t, x)\r\n\t\tend\r\n\telse\r\n\t\treturn \"type cannot be converted to an acceptable type for bencoding\", typx\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "if islist(x)    then  return encode_list (t, x)\r\n\t\telse                  return encode_dict (t, x)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function encode(x)\r\n\r\n\tlocal t = {}\r\n\tlocal err, val = encode_rec(t,x)\r\n\tif not err then\r\n\t\treturn concat(t)\r\n\telse\r\n\t\treturn nil, err, val\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local err, val = encode_rec(t,x)",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "if not err then\r\n\t\treturn concat(t)\r\n\telse\r\n\t\treturn nil, err, val\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "local function decode_integer(s, index) \r\n\tlocal a, b, int = find(s, \"^(%-?%d+)e\", index) \r\n\tif not int then return nil, \"not a number\", nil end\r\n\tint = tonumber(int) \r\n\tif not int then return nil, \"not a number\", int end\r\n\treturn int, b + 1 \r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local a, b, int = find(s, \"^(%-?%d+)e\", index)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if not int then return nil, \"not a number\", nil end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "int = tonumber(int)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "if not int then return nil, \"not a number\", int end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "local function decode_list(s, index) \r\n\tlocal t = {} \r\n\twhile sub(s, index, index) ~= \"e\" do \r\n\t\tlocal obj, ev\r\n\t\tobj, index, ev = decode(s, index) \r\n\t\tif not obj then return obj, index, ev end\r\n\t\tinsert(t, obj)\r\n\tend \r\n\tindex = index + 1 \r\n\treturn t, index \r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "while sub(s, index, index) ~= \"e\" do \r\n\t\tlocal obj, ev\r\n\t\tobj, index, ev = decode(s, index) \r\n\t\tif not obj then return obj, index, ev end\r\n\t\tinsert(t, obj)\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 55,
    "text": "local obj, ev",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "obj, index, ev = decode(s, index)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "if not obj then return obj, index, ev end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "insert(t, obj)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "index = index + 1",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "local function decode_dictionary(s, index) \r\n\tlocal t = {} \r\n\twhile sub(s, index, index) ~= \"e\" do \r\n\t\tlocal obj1, obj2, ev\r\n\r\n\t\tobj1, index, ev = decode(s, index) \r\n\t\tif not obj1 then return obj1, index, ev end\r\n\r\n\t\tobj2, index, ev = decode(s, index) \r\n\t\tif not obj2 then return obj2, index, ev end\r\n\r\n\t\tt[obj1] = obj2 \r\n\tend \r\n\tindex = index + 1 \r\n\treturn t, index \r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "while sub(s, index, index) ~= \"e\" do \r\n\t\tlocal obj1, obj2, ev\r\n\r\n\t\tobj1, index, ev = decode(s, index) \r\n\t\tif not obj1 then return obj1, index, ev end\r\n\r\n\t\tobj2, index, ev = decode(s, index) \r\n\t\tif not obj2 then return obj2, index, ev end\r\n\r\n\t\tt[obj1] = obj2 \r\n\tend",
    "type": "statement:while"
  }, {
    "id": 63,
    "text": "local obj1, obj2, ev",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "obj1, index, ev = decode(s, index)",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "if not obj1 then return obj1, index, ev end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "obj2, index, ev = decode(s, index)",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "if not obj2 then return obj2, index, ev end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "t[obj1] = obj2",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "local function decode_string(s, index) \r\n\tlocal a, b, len = find(s, \"^([0-9]+):\", index) \r\n\tif not len then return nil, \"not a length\", len end\r\n\tindex = b + 1 \r\n\t \r\n\tlocal v = sub(s, index, index + len - 1) \r\n\tif #v < len - 1 then return nil, \"truncated string at end of input\", v end\r\n\tindex = index + len \r\n\treturn v, index \r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "local a, b, len = find(s, \"^([0-9]+):\", index)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if not len then return nil, \"not a length\", len end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "index = b + 1",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "local v = sub(s, index, index + len - 1)",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "if #v < len - 1 then return nil, \"truncated string at end of input\", v end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "index = index + len",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function decode(s, index) \r\n\tif not s then return nil, \"no data\", nil end\r\n\tindex = index or 1 \r\n\tlocal t = sub(s, index, index) \r\n\tif not t then return nil, \"truncation error\", nil end\r\n\r\n\tif t == \"i\" then \r\n\t\treturn decode_integer(s, index + 1) \r\n\telseif t == \"l\" then \r\n\t\treturn decode_list(s, index + 1) \r\n\telseif t == \"d\" then \r\n\t\treturn decode_dictionary(s, index + 1) \r\n\telseif t >= '0' and t <= '9' then \r\n\t\treturn decode_string(s, index) \r\n\telse \r\n\t\treturn nil, \"invalid type\", t\r\n\tend \r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "if not s then return nil, \"no data\", nil end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "index = index or 1",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "local t = sub(s, index, index)",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "if not t then return nil, \"truncation error\", nil end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "if t == \"i\" then \r\n\t\treturn decode_integer(s, index + 1) \r\n\telseif t == \"l\" then \r\n\t\treturn decode_list(s, index + 1) \r\n\telseif t == \"d\" then \r\n\t\treturn decode_dictionary(s, index + 1) \r\n\telseif t >= '0' and t <= '9' then \r\n\t\treturn decode_string(s, index) \r\n\telse \r\n\t\treturn nil, \"invalid type\", t\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "",
    "type": "function container"
  }, {
    "id": 86,
    "text": "",
    "type": "function container"
  }, {
    "id": 87,
    "text": "",
    "type": "function container"
  }, {
    "id": 88,
    "text": "",
    "type": "function container"
  }, {
    "id": 89,
    "text": "find",
    "type": "global function"
  }, {
    "id": 90,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 91,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 92,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 93,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 94,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 95,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 96,
    "text": "module",
    "type": "global function"
  }, {
    "id": 97,
    "text": "type",
    "type": "global function"
  }, {
    "id": 98,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 99,
    "text": "",
    "type": "variable container"
  }, {
    "id": 100,
    "text": "",
    "type": "require container"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "n/a"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "n/a"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "n/a"
  }, {
    "id": 115,
    "text": "",
    "type": "local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "n/a"
  }, {
    "id": 117,
    "text": "",
    "type": "local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "n/a"
  }, {
    "id": 119,
    "text": "",
    "type": "local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "global variable"
  }, {
    "id": 121,
    "text": "",
    "type": "n/a"
  }, {
    "id": 122,
    "text": "",
    "type": "global variable"
  }, {
    "id": 123,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "require local variable"
  } ]
}