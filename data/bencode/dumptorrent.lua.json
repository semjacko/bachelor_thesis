{
  "_filename": "dumptorrent.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/bencode/examples/dumptorrent.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 7,
    "label": "has",
    "to": 18
  }, {
    "from": 4,
    "label": "has",
    "to": 19
  }, {
    "from": 4,
    "label": "calls",
    "to": 30
  }, {
    "from": 4,
    "label": "calls",
    "to": 30
  }, {
    "from": 20,
    "label": "calls",
    "to": 21
  }, {
    "from": 20,
    "label": "calls",
    "to": 21
  }, {
    "from": 4,
    "label": "calls",
    "to": 22
  }, {
    "from": 20,
    "label": "calls",
    "to": 24
  }, {
    "from": 20,
    "label": "calls",
    "to": 23
  }, {
    "from": 4,
    "label": "calls",
    "to": 4
  }, {
    "from": 20,
    "label": "calls",
    "to": 4
  }, {
    "from": 4,
    "label": "calls",
    "to": 27
  }, {
    "from": 4,
    "label": "calls",
    "to": 27
  }, {
    "from": 4,
    "label": "calls",
    "to": 27
  }, {
    "from": 4,
    "label": "calls",
    "to": 27
  }, {
    "from": 4,
    "label": "calls",
    "to": 27
  }, {
    "from": 4,
    "label": "calls",
    "to": 27
  }, {
    "from": 4,
    "label": "calls",
    "to": 27
  }, {
    "from": 4,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 27
  }, {
    "from": 20,
    "label": "calls",
    "to": 3
  }, {
    "from": 4,
    "label": "calls",
    "to": 28
  }, {
    "from": 4,
    "label": "calls",
    "to": 28
  }, {
    "from": 20,
    "label": "calls",
    "to": 28
  }, {
    "from": 20,
    "label": "calls",
    "to": 29
  }, {
    "from": 4,
    "label": "calls",
    "to": 26
  }, {
    "from": 4,
    "label": "calls",
    "to": 26
  }, {
    "from": 4,
    "label": "calls",
    "to": 26
  }, {
    "from": 4,
    "label": "calls",
    "to": 25
  }, {
    "from": 4,
    "label": "calls",
    "to": 25
  }, {
    "from": 4,
    "label": "calls",
    "to": 25
  }, {
    "from": 2,
    "label": "contains",
    "to": 20
  }, {
    "from": 20,
    "label": "declares",
    "to": 4
  }, {
    "from": 2,
    "label": "contains",
    "to": 31
  }, {
    "from": 2,
    "label": "contains",
    "to": 32
  }, {
    "from": 32,
    "label": "initializes",
    "to": 33
  }, {
    "from": 33,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "bencode",
    "type": "module"
  }, {
    "id": 2,
    "text": "dumptorrent",
    "type": "module"
  }, {
    "id": 3,
    "text": "function decode(s, index) \r\n\tif not s then return nil, \"no data\", nil end\r\n\tindex = index or 1 \r\n\tlocal t = sub(s, index, index) \r\n\tif not t then return nil, \"truncation error\", nil end\r\n\r\n\tif t == \"i\" then \r\n\t\treturn decode_integer(s, index + 1) \r\n\telseif t == \"l\" then \r\n\t\treturn decode_list(s, index + 1) \r\n\telseif t == \"d\" then \r\n\t\treturn decode_dictionary(s, index + 1) \r\n\telseif t >= '0' and t <= '9' then \r\n\t\treturn decode_string(s, index) \r\n\telse \r\n\t\treturn nil, \"invalid type\", t\r\n\tend \r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function table_print (tt, indent, done)\r\n  done = done or {}\r\n  indent = indent or 0\r\n  if type(tt) == \"table\" then\r\n    for key, value in pairs (tt) do\r\n      io.write(string.rep (\" \", indent)) -- indent it\r\n      if type (value) == \"table\" and not done [value] then\r\n        done [value] = true\r\n        io.write(string.format(\"[%s] => table\\n\", tostring (key)));\r\n        io.write(string.rep (\" \", indent+4)) -- indent it\r\n        io.write(\"(\\n\");\r\n        table_print (value, indent + 7, done)\r\n        io.write(string.rep (\" \", indent+4)) -- indent it\r\n        io.write(\")\\n\");\r\n      else\r\n        io.write(string.format(\"[%s] => %s\\n\",\r\n            tostring (key), tostring(value)))\r\n      end\r\n    end\r\n  else\r\n    io.write(tt .. \"\\n\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "done = done or {}",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "indent = indent or 0",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "if type(tt) == \"table\" then\r\n    for key, value in pairs (tt) do\r\n      io.write(string.rep (\" \", indent)) -- indent it\r\n      if type (value) == \"table\" and not done [value] then\r\n        done [value] = true\r\n        io.write(string.format(\"[%s] => table\\n\", tostring (key)));\r\n        io.write(string.rep (\" \", indent+4)) -- indent it\r\n        io.write(\"(\\n\");\r\n        table_print (value, indent + 7, done)\r\n        io.write(string.rep (\" \", indent+4)) -- indent it\r\n        io.write(\")\\n\");\r\n      else\r\n        io.write(string.format(\"[%s] => %s\\n\",\r\n            tostring (key), tostring(value)))\r\n      end\r\n    end\r\n  else\r\n    io.write(tt .. \"\\n\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "for key, value in pairs (tt) do\r\n      io.write(string.rep (\" \", indent)) -- indent it\r\n      if type (value) == \"table\" and not done [value] then\r\n        done [value] = true\r\n        io.write(string.format(\"[%s] => table\\n\", tostring (key)));\r\n        io.write(string.rep (\" \", indent+4)) -- indent it\r\n        io.write(\"(\\n\");\r\n        table_print (value, indent + 7, done)\r\n        io.write(string.rep (\" \", indent+4)) -- indent it\r\n        io.write(\")\\n\");\r\n      else\r\n        io.write(string.format(\"[%s] => %s\\n\",\r\n            tostring (key), tostring(value)))\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "io.write(string.rep (\" \", indent))",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "if type (value) == \"table\" and not done [value] then\r\n        done [value] = true\r\n        io.write(string.format(\"[%s] => table\\n\", tostring (key)));\r\n        io.write(string.rep (\" \", indent+4)) -- indent it\r\n        io.write(\"(\\n\");\r\n        table_print (value, indent + 7, done)\r\n        io.write(string.rep (\" \", indent+4)) -- indent it\r\n        io.write(\")\\n\");\r\n      else\r\n        io.write(string.format(\"[%s] => %s\\n\",\r\n            tostring (key), tostring(value)))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "done [value] = true",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "io.write(string.format(\"[%s] => table\\n\", tostring (key)))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "io.write(string.rep (\" \", indent+4))",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "io.write(\"(\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "table_print (value, indent + 7, done)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "io.write(\")\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "io.write(string.format(\"[%s] => %s\\n\",\r\n            tostring (key), tostring(value)))",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "io.write(tt .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "",
    "type": "function container"
  }, {
    "id": 21,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 22,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 23,
    "text": "open",
    "type": "global function"
  }, {
    "id": 24,
    "text": "print",
    "type": "global function"
  }, {
    "id": 25,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 26,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 27,
    "text": "write",
    "type": "global function"
  }, {
    "id": 28,
    "text": "type",
    "type": "global function"
  }, {
    "id": 29,
    "text": "require",
    "type": "global function"
  }, {
    "id": 30,
    "text": "format",
    "type": "global function"
  }, {
    "id": 31,
    "text": "",
    "type": "variable container"
  }, {
    "id": 32,
    "text": "",
    "type": "require container"
  }, {
    "id": 33,
    "text": "",
    "type": "global variable"
  } ]
}