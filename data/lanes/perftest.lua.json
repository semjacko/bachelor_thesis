{
  "_filename": "perftest.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lanes/tests/perftest.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 10
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 10
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 21,
    "label": "has",
    "to": 10
  }, {
    "from": 15,
    "label": "has",
    "to": 27
  }, {
    "from": 15,
    "label": "has",
    "to": 28
  }, {
    "from": 15,
    "label": "has",
    "to": 29
  }, {
    "from": 15,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 15,
    "label": "has",
    "to": 35
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 15,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 10
  }, {
    "from": 37,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 10
  }, {
    "from": 39,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 39,
    "label": "has",
    "to": 10
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 43,
    "label": "has",
    "to": 10
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 15,
    "label": "calls",
    "to": 52
  }, {
    "from": 45,
    "label": "calls",
    "to": 48
  }, {
    "from": 45,
    "label": "calls",
    "to": 48
  }, {
    "from": 45,
    "label": "calls",
    "to": 48
  }, {
    "from": 45,
    "label": "calls",
    "to": 60
  }, {
    "from": 15,
    "label": "calls",
    "to": 53
  }, {
    "from": 15,
    "label": "calls",
    "to": 53
  }, {
    "from": 8,
    "label": "calls",
    "to": 50
  }, {
    "from": 8,
    "label": "calls",
    "to": 50
  }, {
    "from": 8,
    "label": "calls",
    "to": 50
  }, {
    "from": 8,
    "label": "calls",
    "to": 50
  }, {
    "from": 45,
    "label": "calls",
    "to": 50
  }, {
    "from": 45,
    "label": "calls",
    "to": 50
  }, {
    "from": 45,
    "label": "calls",
    "to": 8
  }, {
    "from": 45,
    "label": "calls",
    "to": 5
  }, {
    "from": 45,
    "label": "calls",
    "to": 5
  }, {
    "from": 45,
    "label": "calls",
    "to": 46
  }, {
    "from": 45,
    "label": "calls",
    "to": 46
  }, {
    "from": 8,
    "label": "calls",
    "to": 56
  }, {
    "from": 15,
    "label": "calls",
    "to": 59
  }, {
    "from": 15,
    "label": "calls",
    "to": 59
  }, {
    "from": 45,
    "label": "calls",
    "to": 54
  }, {
    "from": 15,
    "label": "calls",
    "to": 55
  }, {
    "from": 45,
    "label": "calls",
    "to": 47
  }, {
    "from": 45,
    "label": "calls",
    "to": 4
  }, {
    "from": 45,
    "label": "calls",
    "to": 4
  }, {
    "from": 15,
    "label": "calls",
    "to": 58
  }, {
    "from": 15,
    "label": "calls",
    "to": 39
  }, {
    "from": 15,
    "label": "calls",
    "to": 37
  }, {
    "from": 45,
    "label": "calls",
    "to": 49
  }, {
    "from": 45,
    "label": "calls",
    "to": 15
  }, {
    "from": 45,
    "label": "calls",
    "to": 57
  }, {
    "from": 45,
    "label": "calls",
    "to": 57
  }, {
    "from": 45,
    "label": "calls",
    "to": 62
  }, {
    "from": 45,
    "label": "calls",
    "to": 62
  }, {
    "from": 8,
    "label": "calls",
    "to": 61
  }, {
    "from": 15,
    "label": "calls",
    "to": 51
  }, {
    "from": 3,
    "label": "contains",
    "to": 45
  }, {
    "from": 45,
    "label": "declares",
    "to": 5
  }, {
    "from": 45,
    "label": "declares",
    "to": 8
  }, {
    "from": 45,
    "label": "declares",
    "to": 15
  }, {
    "from": 45,
    "label": "declares",
    "to": 37
  }, {
    "from": 45,
    "label": "declares",
    "to": 39
  }, {
    "from": 45,
    "label": "declares",
    "to": 41
  }, {
    "from": 45,
    "label": "declares",
    "to": 43
  }, {
    "from": 3,
    "label": "contains",
    "to": 63
  }, {
    "from": 3,
    "label": "contains",
    "to": 64
  }, {
    "from": 63,
    "label": "initializes",
    "to": 65
  }, {
    "from": 65,
    "label": "assigns",
    "to": 66
  }, {
    "from": 63,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  }, {
    "from": 63,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 63,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 63,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 63,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 63,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 63,
    "label": "initializes",
    "to": 79
  }, {
    "from": 63,
    "label": "initializes",
    "to": 80
  }, {
    "from": 63,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 63,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 63,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 63,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 63,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 64,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "requires",
    "to": 1
  }, {
    "from": 64,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lanes",
    "type": "module"
  }, {
    "id": 2,
    "text": "argtable",
    "type": "module"
  }, {
    "id": 3,
    "text": "perftest",
    "type": "module"
  }, {
    "id": 4,
    "text": "function( ...)\r\n\t-- aggregrate all strings together, separated by \",\" as well as tables\r\n\t-- the strings are a list of libraries to open\r\n\t-- the tables contain the lane options\r\n\tlocal opt = {}\r\n\tlocal libs = nil\r\n\r\n\tlocal n = select( '#', ...)\r\n\r\n\t-- we need at least a function\r\n\tif n == 0 then\r\n\t\terror( \"No parameters!\", 2)\r\n\tend\r\n\r\n\t-- all arguments but the last must be nil, strings, or tables\r\n\tfor i = 1, n - 1 do\r\n\t\tlocal v = select( i, ...)\r\n\t\tlocal tv = type( v)\r\n\t\tif tv == \"string\" then\r\n\t\t\tlibs = libs and libs .. \",\" .. v or v\r\n\t\telseif tv == \"table\" then\r\n\t\t\tfor k, vv in pairs( v) do\r\n\t\t\t\topt[k]= vv\r\n\t\t\tend\r\n\t\telseif v == nil then\r\n\t\t\t-- skip\r\n\t\telse\r\n\t\t\terror( \"Bad parameter \" .. i .. \": \" .. tv .. \" \" .. string_format( \"%q\", tostring( v)), 2)\r\n\t\tend\r\n\tend\r\n\r\n\t-- the last argument should be a function or a string\r\n\tlocal func = select( n, ...)\r\n\tlocal functype = type( func)\r\n\tif functype ~= \"function\" and functype ~= \"string\" then\r\n\t\terror( \"Last parameter not function or string: \" .. functype .. \" \" .. string_format( \"%q\", tostring( func)), 2)\r\n\tend\r\n\r\n\t-- check that the caller only provides reserved library names, and those only once\r\n\t-- \"*\" is a special case that doesn't require individual checking\r\n\tif libs and libs ~= \"*\" then\r\n\t\tlocal found = {}\r\n\t\tfor s in string_gmatch(libs, \"[%a%d.]+\") do\r\n\t\t\tif not valid_libs[s] then\r\n\t\t\t\terror( \"Bad library name: \" .. s, 2)\r\n\t\t\telse\r\n\t\t\t\tfound[s] = (found[s] or 0) + 1\r\n\t\t\t\tif found[s] > 1 then\r\n\t\t\t\t\terror( \"libs specification contains '\" .. s .. \"' more than once\", 2)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\t-- validate that each option is known and properly valued\r\n\tfor k, v in pairs( opt) do\r\n\t\tlocal validator = opt_validators[k]\r\n\t\tif not validator then\r\n\t\t\terror( (type( k) == \"number\" and \"Unkeyed option: \" .. type( v) .. \" \" .. string_format( \"%q\", tostring( v)) or \"Bad '\" .. tostring( k) .. \"' option\"), 2)\r\n\t\telse\r\n\t\t\topt[k] = validator( v)\r\n\t\tend\r\n\tend\r\n\r\n\tlocal cancelstep, priority, globals, package, required, gc_cb = opt.cancelstep, opt.priority, opt.globals, opt.package or package, opt.required, opt.gc_cb\r\n\treturn function( ...)\r\n\t\t-- must pass functions args last else they will be truncated to the first one\r\n\t\treturn core_lane_new( func, libs, cancelstep, priority, globals, package, required, gc_cb, ...)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function HELP()\r\n    io.stderr:write( \"Usage: lua perftest.lua [threads]\\n\" )\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "io.stderr:write( \"Usage: lua perftest.lua [threads]\\n\" )",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function prio_param(v)\r\n    if v==true then return 2,-2 end\r\n\r\n    local a,b= string.match( v, \"^([%+%-]?%d+)%,([%+%-]?%d+)$\" )\r\n    if a then\r\n        return tonumber(a), tonumber(b)\r\n    elseif tonumber(v) then\r\n        return tonumber(v)\r\n    else\r\n        error( \"Bad priority: \"..v )\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "if v==true then return 2,-2 end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "local a,b= string.match( v, \"^([%+%-]?%d+)%,([%+%-]?%d+)$\" )",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if a then\r\n        return tonumber(a), tonumber(b)\r\n    elseif tonumber(v) then\r\n        return tonumber(v)\r\n    else\r\n        error( \"Bad priority: \"..v )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "error( \"Bad priority: \"..v )",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function sieve_lane(N,id)\r\n\r\n if MSYS then\r\n   io.stderr:setvbuf \"no\"\r\n end\r\n\r\n -- generate all the numbers from 2 to n\r\n local function gen (n)\r\n  return coroutine.wrap(function ()\r\n    for i=2,n do coroutine.yield(i) end\r\n  end)\r\n end\r\n\r\n -- filter the numbers generated by `g', removing multiples of `p'\r\n local function filter (p, g)\r\n  return coroutine.wrap(function ()\r\n    while 1 do\r\n      local n = g()\r\n      if n == nil then return end\r\n      if math.fmod(n, p) ~= 0 then coroutine.yield(n) end\r\n    end\r\n  end)\r\n end\r\n\r\n local ret= {}      -- returned values: { 2, 3, 5, 7, 11, ... }\r\n N=N or 1000\t    -- from caller\r\n local x = gen(N)   -- generate primes up to N\r\n while 1 do\r\n  local n = x()\t\t-- pick a number until done\r\n  if n == nil then break end\r\n  --print(n)\t\t-- must be a prime number\r\n  table.insert( ret, n )\r\n\r\n  x = filter(n, x)\t-- now remove its multiples\r\n end\r\n \r\n io.stderr:write(id..(MSYS and \"\\n\" or \"\\t\"))   -- mark we're ready\r\n\r\n return ret     \r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "if MSYS then\r\n   io.stderr:setvbuf \"no\"\r\n end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "io.stderr:setvbuf \"no\"",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "local function gen (n)\r\n  return coroutine.wrap(function ()\r\n    for i=2,n do coroutine.yield(i) end\r\n  end)\r\n end",
    "type": "statement:localfunction"
  }, {
    "id": 19,
    "text": "for i=2,n do coroutine.yield(i) end",
    "type": "statement:numericfor"
  }, {
    "id": 20,
    "text": "coroutine.yield(i)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "local function filter (p, g)\r\n  return coroutine.wrap(function ()\r\n    while 1 do\r\n      local n = g()\r\n      if n == nil then return end\r\n      if math.fmod(n, p) ~= 0 then coroutine.yield(n) end\r\n    end\r\n  end)\r\n end",
    "type": "statement:localfunction"
  }, {
    "id": 22,
    "text": "while 1 do\r\n      local n = g()\r\n      if n == nil then return end\r\n      if math.fmod(n, p) ~= 0 then coroutine.yield(n) end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 23,
    "text": "local n = g()",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if n == nil then return end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "if math.fmod(n, p) ~= 0 then coroutine.yield(n) end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "coroutine.yield(n)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "local ret= {}",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "N=N or 1000",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "local x = gen(N)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "while 1 do\r\n  local n = x()\t\t-- pick a number until done\r\n  if n == nil then break end\r\n  --print(n)\t\t-- must be a prime number\r\n  table.insert( ret, n )\r\n\r\n  x = filter(n, x)\t-- now remove its multiples\r\n end",
    "type": "statement:while"
  }, {
    "id": 31,
    "text": "local n = x()",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if n == nil then break end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "table.insert( ret, n )",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "x = filter(n, x)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "io.stderr:write(id..(MSYS and \"\\n\" or \"\\t\"))",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function gen (n)\r\n  return coroutine.wrap(function ()\r\n    for i=2,n do coroutine.yield(i) end\r\n  end)\r\n end",
    "type": "function"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "local function filter (p, g)\r\n  return coroutine.wrap(function ()\r\n    while 1 do\r\n      local n = g()\r\n      if n == nil then return end\r\n      if math.fmod(n, p) ~= 0 then coroutine.yield(n) end\r\n    end\r\n  end)\r\n end",
    "type": "function"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function ()\r\n    for i=2,n do coroutine.yield(i) end\r\n  end",
    "type": "function"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function ()\r\n    while 1 do\r\n      local n = g()\r\n      if n == nil then return end\r\n      if math.fmod(n, p) ~= 0 then coroutine.yield(n) end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "",
    "type": "function container"
  }, {
    "id": 46,
    "text": "now_secs",
    "type": "global function"
  }, {
    "id": 47,
    "text": "set_singlethreaded",
    "type": "global function"
  }, {
    "id": 48,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 49,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 50,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 51,
    "text": "fmod",
    "type": "global function"
  }, {
    "id": 52,
    "text": "x",
    "type": "global function"
  }, {
    "id": 53,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 54,
    "text": "argtable",
    "type": "global function"
  }, {
    "id": 55,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 56,
    "text": "match",
    "type": "global function"
  }, {
    "id": 57,
    "text": "type",
    "type": "global function"
  }, {
    "id": 58,
    "text": "g",
    "type": "global function"
  }, {
    "id": 59,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 60,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 61,
    "text": "error",
    "type": "global function"
  }, {
    "id": 62,
    "text": "require",
    "type": "global function"
  }, {
    "id": 63,
    "text": "",
    "type": "variable container"
  }, {
    "id": 64,
    "text": "",
    "type": "require container"
  }, {
    "id": 65,
    "text": "",
    "type": "local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "n/a"
  }, {
    "id": 67,
    "text": "",
    "type": "local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "n/a"
  }, {
    "id": 69,
    "text": "",
    "type": "local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "number"
  }, {
    "id": 71,
    "text": "",
    "type": "local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "number"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "boolean"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "number"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "boolean"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "global variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "global variable"
  }, {
    "id": 90,
    "text": "",
    "type": "n/a"
  }, {
    "id": 91,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "require local variable"
  } ]
}