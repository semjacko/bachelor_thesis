{
  "_filename": "basic.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lanes/tests/basic.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 21
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 21
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 21
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 21
  }, {
    "from": 55,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 61
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 62
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 63
  }, {
    "from": 55,
    "label": "has",
    "to": 64
  }, {
    "from": 55,
    "label": "has",
    "to": 65
  }, {
    "from": 55,
    "label": "has",
    "to": 66
  }, {
    "from": 55,
    "label": "has",
    "to": 67
  }, {
    "from": 55,
    "label": "has",
    "to": 68
  }, {
    "from": 55,
    "label": "has",
    "to": 69
  }, {
    "from": 55,
    "label": "has",
    "to": 59
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 70
  }, {
    "from": 55,
    "label": "has",
    "to": 71
  }, {
    "from": 55,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 21
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 21
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 78,
    "label": "has",
    "to": 21
  }, {
    "from": 78,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 80
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 85,
    "label": "has",
    "to": 89
  }, {
    "from": 85,
    "label": "has",
    "to": 21
  }, {
    "from": 85,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 80
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 91,
    "label": "has",
    "to": 94
  }, {
    "from": 91,
    "label": "has",
    "to": 21
  }, {
    "from": 91,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 96,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 102,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 102,
    "label": "has",
    "to": 107
  }, {
    "from": 102,
    "label": "has",
    "to": 108
  }, {
    "from": 102,
    "label": "has",
    "to": 109
  }, {
    "from": 102,
    "label": "has",
    "to": 110
  }, {
    "from": 102,
    "label": "has",
    "to": 111
  }, {
    "from": 102,
    "label": "has",
    "to": 112
  }, {
    "from": 102,
    "label": "has",
    "to": 113
  }, {
    "from": 102,
    "label": "has",
    "to": 114
  }, {
    "from": 102,
    "label": "has",
    "to": 115
  }, {
    "from": 102,
    "label": "has",
    "to": 116
  }, {
    "from": 102,
    "label": "has",
    "to": 117
  }, {
    "from": 102,
    "label": "has",
    "to": 118
  }, {
    "from": 102,
    "label": "has",
    "to": 119
  }, {
    "from": 102,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 21
  }, {
    "from": 102,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 35
  }, {
    "from": 123,
    "label": "has",
    "to": 41
  }, {
    "from": 124,
    "label": "has",
    "to": 47
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 127,
    "label": "has",
    "to": 130
  }, {
    "from": 127,
    "label": "has",
    "to": 131
  }, {
    "from": 127,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 21
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 137,
    "label": "has",
    "to": 139
  }, {
    "from": 137,
    "label": "has",
    "to": 140
  }, {
    "from": 137,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 137,
    "label": "has",
    "to": 21
  }, {
    "from": 137,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "calls",
    "to": 52
  }, {
    "from": 144,
    "label": "calls",
    "to": 52
  }, {
    "from": 144,
    "label": "calls",
    "to": 52
  }, {
    "from": 144,
    "label": "calls",
    "to": 52
  }, {
    "from": 144,
    "label": "calls",
    "to": 148
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 15,
    "label": "calls",
    "to": 149
  }, {
    "from": 25,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 78,
    "label": "calls",
    "to": 149
  }, {
    "from": 85,
    "label": "calls",
    "to": 149
  }, {
    "from": 85,
    "label": "calls",
    "to": 149
  }, {
    "from": 85,
    "label": "calls",
    "to": 149
  }, {
    "from": 91,
    "label": "calls",
    "to": 149
  }, {
    "from": 91,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 96,
    "label": "calls",
    "to": 149
  }, {
    "from": 102,
    "label": "calls",
    "to": 149
  }, {
    "from": 102,
    "label": "calls",
    "to": 149
  }, {
    "from": 102,
    "label": "calls",
    "to": 149
  }, {
    "from": 102,
    "label": "calls",
    "to": 149
  }, {
    "from": 102,
    "label": "calls",
    "to": 149
  }, {
    "from": 102,
    "label": "calls",
    "to": 149
  }, {
    "from": 102,
    "label": "calls",
    "to": 149
  }, {
    "from": 102,
    "label": "calls",
    "to": 149
  }, {
    "from": 102,
    "label": "calls",
    "to": 149
  }, {
    "from": 102,
    "label": "calls",
    "to": 149
  }, {
    "from": 102,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 149
  }, {
    "from": 144,
    "label": "calls",
    "to": 53
  }, {
    "from": 144,
    "label": "calls",
    "to": 53
  }, {
    "from": 144,
    "label": "calls",
    "to": 53
  }, {
    "from": 5,
    "label": "calls",
    "to": 171
  }, {
    "from": 144,
    "label": "calls",
    "to": 73
  }, {
    "from": 144,
    "label": "calls",
    "to": 73
  }, {
    "from": 102,
    "label": "calls",
    "to": 150
  }, {
    "from": 144,
    "label": "calls",
    "to": 151
  }, {
    "from": 144,
    "label": "calls",
    "to": 151
  }, {
    "from": 144,
    "label": "calls",
    "to": 151
  }, {
    "from": 144,
    "label": "calls",
    "to": 151
  }, {
    "from": 144,
    "label": "calls",
    "to": 50
  }, {
    "from": 144,
    "label": "calls",
    "to": 50
  }, {
    "from": 144,
    "label": "calls",
    "to": 50
  }, {
    "from": 144,
    "label": "calls",
    "to": 50
  }, {
    "from": 144,
    "label": "calls",
    "to": 50
  }, {
    "from": 144,
    "label": "calls",
    "to": 50
  }, {
    "from": 144,
    "label": "calls",
    "to": 50
  }, {
    "from": 144,
    "label": "calls",
    "to": 50
  }, {
    "from": 144,
    "label": "calls",
    "to": 50
  }, {
    "from": 144,
    "label": "calls",
    "to": 50
  }, {
    "from": 144,
    "label": "calls",
    "to": 50
  }, {
    "from": 144,
    "label": "calls",
    "to": 50
  }, {
    "from": 144,
    "label": "calls",
    "to": 50
  }, {
    "from": 144,
    "label": "calls",
    "to": 50
  }, {
    "from": 144,
    "label": "calls",
    "to": 50
  }, {
    "from": 144,
    "label": "calls",
    "to": 50
  }, {
    "from": 144,
    "label": "calls",
    "to": 152
  }, {
    "from": 144,
    "label": "calls",
    "to": 152
  }, {
    "from": 144,
    "label": "calls",
    "to": 152
  }, {
    "from": 144,
    "label": "calls",
    "to": 152
  }, {
    "from": 144,
    "label": "calls",
    "to": 152
  }, {
    "from": 144,
    "label": "calls",
    "to": 152
  }, {
    "from": 144,
    "label": "calls",
    "to": 152
  }, {
    "from": 144,
    "label": "calls",
    "to": 152
  }, {
    "from": 144,
    "label": "calls",
    "to": 152
  }, {
    "from": 144,
    "label": "calls",
    "to": 152
  }, {
    "from": 144,
    "label": "calls",
    "to": 152
  }, {
    "from": 78,
    "label": "calls",
    "to": 152
  }, {
    "from": 78,
    "label": "calls",
    "to": 152
  }, {
    "from": 85,
    "label": "calls",
    "to": 152
  }, {
    "from": 91,
    "label": "calls",
    "to": 152
  }, {
    "from": 144,
    "label": "calls",
    "to": 152
  }, {
    "from": 144,
    "label": "calls",
    "to": 152
  }, {
    "from": 144,
    "label": "calls",
    "to": 152
  }, {
    "from": 144,
    "label": "calls",
    "to": 152
  }, {
    "from": 144,
    "label": "calls",
    "to": 15
  }, {
    "from": 144,
    "label": "calls",
    "to": 15
  }, {
    "from": 144,
    "label": "calls",
    "to": 169
  }, {
    "from": 144,
    "label": "calls",
    "to": 169
  }, {
    "from": 144,
    "label": "calls",
    "to": 154
  }, {
    "from": 144,
    "label": "calls",
    "to": 154
  }, {
    "from": 144,
    "label": "calls",
    "to": 4
  }, {
    "from": 144,
    "label": "calls",
    "to": 4
  }, {
    "from": 144,
    "label": "calls",
    "to": 4
  }, {
    "from": 102,
    "label": "calls",
    "to": 155
  }, {
    "from": 144,
    "label": "calls",
    "to": 156
  }, {
    "from": 144,
    "label": "calls",
    "to": 156
  }, {
    "from": 144,
    "label": "calls",
    "to": 156
  }, {
    "from": 144,
    "label": "calls",
    "to": 156
  }, {
    "from": 144,
    "label": "calls",
    "to": 76
  }, {
    "from": 144,
    "label": "calls",
    "to": 76
  }, {
    "from": 144,
    "label": "calls",
    "to": 76
  }, {
    "from": 144,
    "label": "calls",
    "to": 76
  }, {
    "from": 144,
    "label": "calls",
    "to": 76
  }, {
    "from": 15,
    "label": "calls",
    "to": 23
  }, {
    "from": 144,
    "label": "calls",
    "to": 23
  }, {
    "from": 144,
    "label": "calls",
    "to": 165
  }, {
    "from": 144,
    "label": "calls",
    "to": 165
  }, {
    "from": 144,
    "label": "calls",
    "to": 74
  }, {
    "from": 144,
    "label": "calls",
    "to": 74
  }, {
    "from": 144,
    "label": "calls",
    "to": 74
  }, {
    "from": 144,
    "label": "calls",
    "to": 74
  }, {
    "from": 144,
    "label": "calls",
    "to": 145
  }, {
    "from": 144,
    "label": "calls",
    "to": 145
  }, {
    "from": 144,
    "label": "calls",
    "to": 161
  }, {
    "from": 144,
    "label": "calls",
    "to": 161
  }, {
    "from": 25,
    "label": "calls",
    "to": 166
  }, {
    "from": 144,
    "label": "calls",
    "to": 166
  }, {
    "from": 78,
    "label": "calls",
    "to": 166
  }, {
    "from": 85,
    "label": "calls",
    "to": 166
  }, {
    "from": 91,
    "label": "calls",
    "to": 166
  }, {
    "from": 144,
    "label": "calls",
    "to": 166
  }, {
    "from": 144,
    "label": "calls",
    "to": 166
  }, {
    "from": 144,
    "label": "calls",
    "to": 5
  }, {
    "from": 144,
    "label": "calls",
    "to": 5
  }, {
    "from": 144,
    "label": "calls",
    "to": 5
  }, {
    "from": 144,
    "label": "calls",
    "to": 5
  }, {
    "from": 144,
    "label": "calls",
    "to": 5
  }, {
    "from": 144,
    "label": "calls",
    "to": 5
  }, {
    "from": 144,
    "label": "calls",
    "to": 5
  }, {
    "from": 144,
    "label": "calls",
    "to": 5
  }, {
    "from": 144,
    "label": "calls",
    "to": 5
  }, {
    "from": 144,
    "label": "calls",
    "to": 5
  }, {
    "from": 144,
    "label": "calls",
    "to": 5
  }, {
    "from": 144,
    "label": "calls",
    "to": 5
  }, {
    "from": 144,
    "label": "calls",
    "to": 5
  }, {
    "from": 102,
    "label": "calls",
    "to": 5
  }, {
    "from": 144,
    "label": "calls",
    "to": 5
  }, {
    "from": 144,
    "label": "calls",
    "to": 5
  }, {
    "from": 144,
    "label": "calls",
    "to": 167
  }, {
    "from": 144,
    "label": "calls",
    "to": 167
  }, {
    "from": 144,
    "label": "calls",
    "to": 167
  }, {
    "from": 144,
    "label": "calls",
    "to": 167
  }, {
    "from": 144,
    "label": "calls",
    "to": 157
  }, {
    "from": 144,
    "label": "calls",
    "to": 158
  }, {
    "from": 144,
    "label": "calls",
    "to": 146
  }, {
    "from": 144,
    "label": "calls",
    "to": 153
  }, {
    "from": 144,
    "label": "calls",
    "to": 153
  }, {
    "from": 144,
    "label": "calls",
    "to": 153
  }, {
    "from": 144,
    "label": "calls",
    "to": 153
  }, {
    "from": 144,
    "label": "calls",
    "to": 153
  }, {
    "from": 144,
    "label": "calls",
    "to": 153
  }, {
    "from": 144,
    "label": "calls",
    "to": 153
  }, {
    "from": 144,
    "label": "calls",
    "to": 153
  }, {
    "from": 144,
    "label": "calls",
    "to": 96
  }, {
    "from": 144,
    "label": "calls",
    "to": 96
  }, {
    "from": 144,
    "label": "calls",
    "to": 96
  }, {
    "from": 144,
    "label": "calls",
    "to": 163
  }, {
    "from": 5,
    "label": "calls",
    "to": 170
  }, {
    "from": 5,
    "label": "calls",
    "to": 170
  }, {
    "from": 102,
    "label": "calls",
    "to": 159
  }, {
    "from": 102,
    "label": "calls",
    "to": 159
  }, {
    "from": 15,
    "label": "calls",
    "to": 160
  }, {
    "from": 15,
    "label": "calls",
    "to": 160
  }, {
    "from": 15,
    "label": "calls",
    "to": 160
  }, {
    "from": 15,
    "label": "calls",
    "to": 160
  }, {
    "from": 15,
    "label": "calls",
    "to": 160
  }, {
    "from": 144,
    "label": "calls",
    "to": 160
  }, {
    "from": 144,
    "label": "calls",
    "to": 160
  }, {
    "from": 78,
    "label": "calls",
    "to": 160
  }, {
    "from": 102,
    "label": "calls",
    "to": 160
  }, {
    "from": 144,
    "label": "calls",
    "to": 160
  }, {
    "from": 144,
    "label": "calls",
    "to": 164
  }, {
    "from": 144,
    "label": "calls",
    "to": 164
  }, {
    "from": 144,
    "label": "calls",
    "to": 168
  }, {
    "from": 144,
    "label": "calls",
    "to": 168
  }, {
    "from": 15,
    "label": "calls",
    "to": 162
  }, {
    "from": 78,
    "label": "calls",
    "to": 162
  }, {
    "from": 102,
    "label": "calls",
    "to": 162
  }, {
    "from": 3,
    "label": "contains",
    "to": 144
  }, {
    "from": 144,
    "label": "declares",
    "to": 5
  }, {
    "from": 144,
    "label": "declares",
    "to": 12
  }, {
    "from": 144,
    "label": "declares",
    "to": 15
  }, {
    "from": 144,
    "label": "declares",
    "to": 23
  }, {
    "from": 144,
    "label": "declares",
    "to": 25
  }, {
    "from": 144,
    "label": "declares",
    "to": 32
  }, {
    "from": 144,
    "label": "declares",
    "to": 38
  }, {
    "from": 144,
    "label": "declares",
    "to": 44
  }, {
    "from": 144,
    "label": "declares",
    "to": 50
  }, {
    "from": 144,
    "label": "declares",
    "to": 52
  }, {
    "from": 144,
    "label": "declares",
    "to": 53
  }, {
    "from": 144,
    "label": "declares",
    "to": 55
  }, {
    "from": 144,
    "label": "declares",
    "to": 73
  }, {
    "from": 144,
    "label": "declares",
    "to": 74
  }, {
    "from": 144,
    "label": "declares",
    "to": 76
  }, {
    "from": 144,
    "label": "declares",
    "to": 78
  }, {
    "from": 144,
    "label": "declares",
    "to": 85
  }, {
    "from": 144,
    "label": "declares",
    "to": 91
  }, {
    "from": 144,
    "label": "declares",
    "to": 96
  }, {
    "from": 144,
    "label": "declares",
    "to": 102
  }, {
    "from": 144,
    "label": "declares",
    "to": 122
  }, {
    "from": 144,
    "label": "declares",
    "to": 123
  }, {
    "from": 144,
    "label": "declares",
    "to": 124
  }, {
    "from": 144,
    "label": "declares",
    "to": 125
  }, {
    "from": 144,
    "label": "declares",
    "to": 127
  }, {
    "from": 144,
    "label": "declares",
    "to": 133
  }, {
    "from": 144,
    "label": "declares",
    "to": 134
  }, {
    "from": 144,
    "label": "declares",
    "to": 136
  }, {
    "from": 144,
    "label": "declares",
    "to": 137
  }, {
    "from": 3,
    "label": "contains",
    "to": 172
  }, {
    "from": 3,
    "label": "contains",
    "to": 173
  }, {
    "from": 172,
    "label": "initializes",
    "to": 174
  }, {
    "from": 174,
    "label": "assigns",
    "to": 175
  }, {
    "from": 172,
    "label": "initializes",
    "to": 176
  }, {
    "from": 176,
    "label": "assigns",
    "to": 177
  }, {
    "from": 172,
    "label": "initializes",
    "to": 178
  }, {
    "from": 178,
    "label": "assigns",
    "to": 179
  }, {
    "from": 172,
    "label": "initializes",
    "to": 180
  }, {
    "from": 180,
    "label": "assigns",
    "to": 181
  }, {
    "from": 172,
    "label": "initializes",
    "to": 182
  }, {
    "from": 172,
    "label": "initializes",
    "to": 183
  }, {
    "from": 183,
    "label": "assigns",
    "to": 184
  }, {
    "from": 172,
    "label": "initializes",
    "to": 185
  }, {
    "from": 185,
    "label": "assigns",
    "to": 186
  }, {
    "from": 172,
    "label": "initializes",
    "to": 187
  }, {
    "from": 187,
    "label": "assigns",
    "to": 188
  }, {
    "from": 172,
    "label": "initializes",
    "to": 189
  }, {
    "from": 189,
    "label": "assigns",
    "to": 190
  }, {
    "from": 172,
    "label": "initializes",
    "to": 191
  }, {
    "from": 191,
    "label": "assigns",
    "to": 192
  }, {
    "from": 172,
    "label": "initializes",
    "to": 193
  }, {
    "from": 193,
    "label": "assigns",
    "to": 194
  }, {
    "from": 172,
    "label": "initializes",
    "to": 195
  }, {
    "from": 195,
    "label": "assigns",
    "to": 196
  }, {
    "from": 172,
    "label": "initializes",
    "to": 197
  }, {
    "from": 197,
    "label": "assigns",
    "to": 198
  }, {
    "from": 172,
    "label": "initializes",
    "to": 199
  }, {
    "from": 199,
    "label": "assigns",
    "to": 200
  }, {
    "from": 172,
    "label": "initializes",
    "to": 201
  }, {
    "from": 201,
    "label": "assigns",
    "to": 202
  }, {
    "from": 172,
    "label": "initializes",
    "to": 203
  }, {
    "from": 203,
    "label": "assigns",
    "to": 204
  }, {
    "from": 172,
    "label": "initializes",
    "to": 205
  }, {
    "from": 205,
    "label": "assigns",
    "to": 206
  }, {
    "from": 172,
    "label": "initializes",
    "to": 207
  }, {
    "from": 172,
    "label": "initializes",
    "to": 208
  }, {
    "from": 208,
    "label": "assigns",
    "to": 209
  }, {
    "from": 172,
    "label": "initializes",
    "to": 210
  }, {
    "from": 210,
    "label": "assigns",
    "to": 211
  }, {
    "from": 172,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "assigns",
    "to": 213
  }, {
    "from": 172,
    "label": "initializes",
    "to": 214
  }, {
    "from": 214,
    "label": "assigns",
    "to": 215
  }, {
    "from": 172,
    "label": "initializes",
    "to": 216
  }, {
    "from": 216,
    "label": "assigns",
    "to": 217
  }, {
    "from": 172,
    "label": "initializes",
    "to": 218
  }, {
    "from": 218,
    "label": "assigns",
    "to": 219
  }, {
    "from": 172,
    "label": "initializes",
    "to": 220
  }, {
    "from": 220,
    "label": "assigns",
    "to": 221
  }, {
    "from": 172,
    "label": "initializes",
    "to": 222
  }, {
    "from": 222,
    "label": "assigns",
    "to": 223
  }, {
    "from": 172,
    "label": "initializes",
    "to": 224
  }, {
    "from": 224,
    "label": "assigns",
    "to": 225
  }, {
    "from": 172,
    "label": "initializes",
    "to": 226
  }, {
    "from": 226,
    "label": "assigns",
    "to": 227
  }, {
    "from": 172,
    "label": "initializes",
    "to": 228
  }, {
    "from": 228,
    "label": "assigns",
    "to": 229
  }, {
    "from": 172,
    "label": "initializes",
    "to": 230
  }, {
    "from": 230,
    "label": "assigns",
    "to": 231
  }, {
    "from": 172,
    "label": "initializes",
    "to": 232
  }, {
    "from": 232,
    "label": "assigns",
    "to": 233
  }, {
    "from": 172,
    "label": "initializes",
    "to": 234
  }, {
    "from": 234,
    "label": "assigns",
    "to": 235
  }, {
    "from": 172,
    "label": "initializes",
    "to": 236
  }, {
    "from": 236,
    "label": "assigns",
    "to": 237
  }, {
    "from": 172,
    "label": "initializes",
    "to": 238
  }, {
    "from": 238,
    "label": "assigns",
    "to": 239
  }, {
    "from": 172,
    "label": "initializes",
    "to": 240
  }, {
    "from": 240,
    "label": "assigns",
    "to": 241
  }, {
    "from": 172,
    "label": "initializes",
    "to": 242
  }, {
    "from": 242,
    "label": "assigns",
    "to": 243
  }, {
    "from": 243,
    "label": "assigns",
    "to": 244
  }, {
    "from": 243,
    "label": "assigns",
    "to": 245
  }, {
    "from": 243,
    "label": "assigns",
    "to": 246
  }, {
    "from": 243,
    "label": "assigns",
    "to": 247
  }, {
    "from": 243,
    "label": "assigns",
    "to": 248
  }, {
    "from": 172,
    "label": "initializes",
    "to": 249
  }, {
    "from": 249,
    "label": "assigns",
    "to": 250
  }, {
    "from": 172,
    "label": "initializes",
    "to": 251
  }, {
    "from": 251,
    "label": "assigns",
    "to": 252
  }, {
    "from": 172,
    "label": "initializes",
    "to": 253
  }, {
    "from": 253,
    "label": "assigns",
    "to": 254
  }, {
    "from": 172,
    "label": "initializes",
    "to": 255
  }, {
    "from": 255,
    "label": "assigns",
    "to": 256
  }, {
    "from": 172,
    "label": "initializes",
    "to": 257
  }, {
    "from": 257,
    "label": "assigns",
    "to": 258
  }, {
    "from": 172,
    "label": "initializes",
    "to": 259
  }, {
    "from": 259,
    "label": "assigns",
    "to": 260
  }, {
    "from": 172,
    "label": "initializes",
    "to": 261
  }, {
    "from": 261,
    "label": "assigns",
    "to": 262
  }, {
    "from": 172,
    "label": "initializes",
    "to": 263
  }, {
    "from": 263,
    "label": "assigns",
    "to": 264
  }, {
    "from": 172,
    "label": "initializes",
    "to": 265
  }, {
    "from": 265,
    "label": "assigns",
    "to": 266
  }, {
    "from": 172,
    "label": "initializes",
    "to": 267
  }, {
    "from": 172,
    "label": "initializes",
    "to": 268
  }, {
    "from": 268,
    "label": "assigns",
    "to": 269
  }, {
    "from": 172,
    "label": "initializes",
    "to": 270
  }, {
    "from": 172,
    "label": "initializes",
    "to": 271
  }, {
    "from": 271,
    "label": "assigns",
    "to": 272
  }, {
    "from": 172,
    "label": "initializes",
    "to": 273
  }, {
    "from": 273,
    "label": "assigns",
    "to": 274
  }, {
    "from": 172,
    "label": "initializes",
    "to": 275
  }, {
    "from": 172,
    "label": "initializes",
    "to": 276
  }, {
    "from": 276,
    "label": "assigns",
    "to": 277
  }, {
    "from": 172,
    "label": "initializes",
    "to": 278
  }, {
    "from": 278,
    "label": "assigns",
    "to": 279
  }, {
    "from": 172,
    "label": "initializes",
    "to": 280
  }, {
    "from": 172,
    "label": "initializes",
    "to": 281
  }, {
    "from": 172,
    "label": "initializes",
    "to": 282
  }, {
    "from": 172,
    "label": "initializes",
    "to": 283
  }, {
    "from": 283,
    "label": "assigns",
    "to": 284
  }, {
    "from": 172,
    "label": "initializes",
    "to": 285
  }, {
    "from": 172,
    "label": "initializes",
    "to": 286
  }, {
    "from": 172,
    "label": "initializes",
    "to": 287
  }, {
    "from": 172,
    "label": "initializes",
    "to": 288
  }, {
    "from": 172,
    "label": "initializes",
    "to": 289
  }, {
    "from": 172,
    "label": "initializes",
    "to": 290
  }, {
    "from": 290,
    "label": "assigns",
    "to": 291
  }, {
    "from": 173,
    "label": "initializes",
    "to": 292
  }, {
    "from": 292,
    "label": "requires",
    "to": 1
  }, {
    "from": 173,
    "label": "initializes",
    "to": 293
  }, {
    "from": 293,
    "label": "requires",
    "to": 2
  }, {
    "from": 294,
    "label": "initializes",
    "to": 293
  }, {
    "from": 293,
    "label": "requires",
    "to": 147
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 122
  }, {
    "from": 40,
    "label": "hasArgument",
    "to": 123
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 124
  }, {
    "from": 120,
    "label": "hasArgument",
    "to": 133
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 136
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lanes",
    "type": "module"
  }, {
    "id": 2,
    "text": "assert",
    "type": "module"
  }, {
    "id": 3,
    "text": "basic",
    "type": "module"
  }, {
    "id": 4,
    "text": "function( ...)\r\n\t-- aggregrate all strings together, separated by \",\" as well as tables\r\n\t-- the strings are a list of libraries to open\r\n\t-- the tables contain the lane options\r\n\tlocal opt = {}\r\n\tlocal libs = nil\r\n\r\n\tlocal n = select( '#', ...)\r\n\r\n\t-- we need at least a function\r\n\tif n == 0 then\r\n\t\terror( \"No parameters!\", 2)\r\n\tend\r\n\r\n\t-- all arguments but the last must be nil, strings, or tables\r\n\tfor i = 1, n - 1 do\r\n\t\tlocal v = select( i, ...)\r\n\t\tlocal tv = type( v)\r\n\t\tif tv == \"string\" then\r\n\t\t\tlibs = libs and libs .. \",\" .. v or v\r\n\t\telseif tv == \"table\" then\r\n\t\t\tfor k, vv in pairs( v) do\r\n\t\t\t\topt[k]= vv\r\n\t\t\tend\r\n\t\telseif v == nil then\r\n\t\t\t-- skip\r\n\t\telse\r\n\t\t\terror( \"Bad parameter \" .. i .. \": \" .. tv .. \" \" .. string_format( \"%q\", tostring( v)), 2)\r\n\t\tend\r\n\tend\r\n\r\n\t-- the last argument should be a function or a string\r\n\tlocal func = select( n, ...)\r\n\tlocal functype = type( func)\r\n\tif functype ~= \"function\" and functype ~= \"string\" then\r\n\t\terror( \"Last parameter not function or string: \" .. functype .. \" \" .. string_format( \"%q\", tostring( func)), 2)\r\n\tend\r\n\r\n\t-- check that the caller only provides reserved library names, and those only once\r\n\t-- \"*\" is a special case that doesn't require individual checking\r\n\tif libs and libs ~= \"*\" then\r\n\t\tlocal found = {}\r\n\t\tfor s in string_gmatch(libs, \"[%a%d.]+\") do\r\n\t\t\tif not valid_libs[s] then\r\n\t\t\t\terror( \"Bad library name: \" .. s, 2)\r\n\t\t\telse\r\n\t\t\t\tfound[s] = (found[s] or 0) + 1\r\n\t\t\t\tif found[s] > 1 then\r\n\t\t\t\t\terror( \"libs specification contains '\" .. s .. \"' more than once\", 2)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\t-- validate that each option is known and properly valued\r\n\tfor k, v in pairs( opt) do\r\n\t\tlocal validator = opt_validators[k]\r\n\t\tif not validator then\r\n\t\t\terror( (type( k) == \"number\" and \"Unkeyed option: \" .. type( v) .. \" \" .. string_format( \"%q\", tostring( v)) or \"Bad '\" .. tostring( k) .. \"' option\"), 2)\r\n\t\telse\r\n\t\t\topt[k] = validator( v)\r\n\t\tend\r\n\tend\r\n\r\n\tlocal cancelstep, priority, globals, package, required, gc_cb = opt.cancelstep, opt.priority, opt.globals, opt.package or package, opt.required, opt.gc_cb\r\n\treturn function( ...)\r\n\t\t-- must pass functions args last else they will be truncated to the first one\r\n\t\treturn core_lane_new( func, libs, cancelstep, priority, globals, package, required, gc_cb, ...)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function PRINT(...)\r\n    local str=\"\"\r\n    for i=1,select('#',...) do\r\n        str= str..tostring(select(i,...))..\"\\t\"\r\n    end\r\n    if io then\r\n        io.stderr:write(str..\"\\n\")\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local str=\"\"",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "for i=1,select('#',...) do\r\n        str= str..tostring(select(i,...))..\"\\t\"\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 8,
    "text": "str= str..tostring(select(i,...))..\"\\t\"",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if io then\r\n        io.stderr:write(str..\"\\n\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "io.stderr:write(str..\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function( name_, status_)\r\n\tPRINT( \"\t\t\t\t---> lane '\" .. name_ .. \"' collected with status \" .. status_)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "PRINT( \"\t\t\t\t---> lane '\" .. name_ .. \"' collected with status \" .. status_)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function subtable( a, b )\r\n    --\r\n    assert( type(a)==\"table\" and type(b)==\"table\" )\r\n\r\n    for k,v in pairs(b) do\r\n        if type(v)~=type(a[k]) then\r\n            return false    -- not subtable (different types, or missing key)\r\n        elseif type(v)==\"table\" then\r\n            if not tables_match(v,a[k]) then return false end\r\n        else\r\n            if a[k] ~= v then return false end\r\n        end\r\n    end\r\n    return true     -- is a subtable\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "assert( type(a)==\"table\" and type(b)==\"table\" )",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "for k,v in pairs(b) do\r\n        if type(v)~=type(a[k]) then\r\n            return false    -- not subtable (different types, or missing key)\r\n        elseif type(v)==\"table\" then\r\n            if not tables_match(v,a[k]) then return false end\r\n        else\r\n            if a[k] ~= v then return false end\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 18,
    "text": "if type(v)~=type(a[k]) then\r\n            return false    -- not subtable (different types, or missing key)\r\n        elseif type(v)==\"table\" then\r\n            if not tables_match(v,a[k]) then return false end\r\n        else\r\n            if a[k] ~= v then return false end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "if not tables_match(v,a[k]) then return false end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "if a[k] ~= v then return false end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function( a, b )\r\n    return subtable( a, b ) and subtable( b, a )\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function task( a, b, c )\r\n    set_debug_threadname( \"task(\"..a..\",\"..b..\",\"..c..\")\")\r\n    --error \"111\"     -- testing error messages\r\n    assert(hey)\r\n    local v=0\r\n    for i=a,b,c do\r\n        v= v+i\r\n    end\r\n    return v, hey\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "set_debug_threadname( \"task(\"..a..\",\"..b..\",\"..c..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "assert(hey)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local v=0",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "for i=a,b,c do\r\n        v= v+i\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 30,
    "text": "v= v+i",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function()\r\n\tlocal a,b\r\n\tset_finalizer( function() print( \"wait_send\", a, b) end)\r\n\ta,b = limited:send( \"key\", \"bybye\") -- infinite timeout, returns only when lane is cancelled\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local a,b",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "set_finalizer( function() print( \"wait_send\", a, b) end)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "print( \"wait_send\", a, b)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "a,b = limited:send( \"key\", \"bybye\")",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function()\r\n\tlocal k, v\r\n\tset_finalizer( function() print( \"wait_receive\", k, v) end)\r\n\tk, v = limited:receive( \"dummy\") -- infinite timeout, returns only when lane is cancelled\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "local k, v",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "set_finalizer( function() print( \"wait_receive\", k, v) end)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "print( \"wait_receive\", k, v)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "k, v = limited:receive( \"dummy\")",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function()\r\n\tlocal k, v1, v2\r\n\tset_finalizer( function() print( \"wait_receive_batched\", k, v1, v2) end)\r\n\tk, v1, v2 = limited:receive( limited.batched, \"dummy\", 2) -- infinite timeout, returns only when lane is cancelled\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local k, v1, v2",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "set_finalizer( function() print( \"wait_receive_batched\", k, v1, v2) end)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "print( \"wait_receive_batched\", k, v1, v2)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "k, v1, v2 = limited:receive( limited.batched, \"dummy\", 2)",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "local function WR(...) io.stderr:write(...) end",
    "type": "function"
  }, {
    "id": 51,
    "text": "io.stderr:write(...)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "local function receive() return linda:receive( \"->\" ) end",
    "type": "function"
  }, {
    "id": 53,
    "text": "local function send(...) linda:send( \"<-\", ... ) end",
    "type": "function"
  }, {
    "id": 54,
    "text": "linda:send( \"<-\", ... )",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "function( linda )\r\n\tset_debug_threadname \"chunk\"\r\n    local function receive() return linda:receive( \"->\" ) end\r\n    local function send(...) linda:send( \"<-\", ... ) end\r\n\r\n    WR( \"Lane starts!\\n\" )\r\n\r\n    local k,v\r\n    k,v=receive(); WR( v..\" received\\n\" ); assert( v==1 )\r\n    k,v=receive(); WR( v..\" received\\n\" ); assert( v==2 )\r\n    k,v=receive(); WR( v..\" received\\n\" ); assert( v==3 )\r\n\r\n    send( 1,2,3 );              WR( \"1,2,3 sent\\n\" )\r\n    send 'a';                   WR( \"'a' sent\\n\" )\r\n    send { 'a', 'b', 'c', d=10 }; WR( \"{'a','b','c',d=10} sent\\n\" )\r\n\r\n    k,v=receive(); WR( v..\" received\\n\" ); assert( v==4 )\r\n\r\n    WR( \"Lane ends!\\n\" )\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "set_debug_threadname \"chunk\"",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "WR( \"Lane starts!\\n\" )",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "local k,v",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "k,v=receive()",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "WR( v..\" received\\n\" )",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert( v==1 )",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert( v==2 )",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "assert( v==3 )",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "send( 1,2,3 )",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "WR( \"1,2,3 sent\\n\" )",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "send 'a'",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "WR( \"'a' sent\\n\" )",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "send { 'a', 'b', 'c', d=10 }",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "WR( \"{'a','b','c',d=10} sent\\n\" )",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "assert( v==4 )",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "WR( \"Lane ends!\\n\" )",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "local function PEEK() return linda:get(\"<-\") end",
    "type": "function"
  }, {
    "id": 74,
    "text": "local function SEND(...) linda:send( \"->\", ... ) end",
    "type": "function"
  }, {
    "id": 75,
    "text": "linda:send( \"->\", ... )",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "local function RECEIVE() local k,v = linda:receive( 1, \"<-\" ) return v end",
    "type": "function"
  }, {
    "id": 77,
    "text": "local k,v = linda:receive( 1, \"<-\" )",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local function dump_g( _x)\r\n\tset_debug_threadname \"dump_g\"\r\n\tassert(print)\r\n\tprint( \"### dumping _G for '\" .. _x .. \"'\")\r\n\tfor k, v in pairs( _G) do\r\n\t\tprint( \"\\t\" .. k .. \": \" .. type( v))\r\n\tend\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "set_debug_threadname \"dump_g\"",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "assert(print)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "print( \"### dumping _G for '\" .. _x .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "for k, v in pairs( _G) do\r\n\t\tprint( \"\\t\" .. k .. \": \" .. type( v))\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 83,
    "text": "print( \"\\t\" .. k .. \": \" .. type( v))",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "local function io_os_f( _x)\r\n\tset_debug_threadname \"io_os_f\"\r\n\tassert(print)\r\n\tprint( \"### checking io and os libs existence for '\" .. _x .. \"'\")\r\n\tassert(io)\r\n\tassert(os)\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "set_debug_threadname \"io_os_f\"",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "print( \"### checking io and os libs existence for '\" .. _x .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "assert(io)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "assert(os)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "local function coro_f( _x)\r\n\tset_debug_threadname \"coro_f\"\r\n\tassert(print)\r\n\tprint( \"### checking coroutine lib existence for '\" .. _x .. \"'\")\r\n\tassert(coroutine)\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 92,
    "text": "set_debug_threadname \"coro_f\"",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "print( \"### checking coroutine lib existence for '\" .. _x .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "assert(coroutine)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "local function STAGE(str)\r\n        io.stderr:write( ch_in..\": \"..str..\"\\n\" )\r\n        linda:send( nil, ch_out, str )\r\n        local k,v= linda:receive( nil, ch_in )\r\n        assert(v==str)\r\n    end",
    "type": "function"
  }, {
    "id": 97,
    "text": "io.stderr:write( ch_in..\": \"..str..\"\\n\" )",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "linda:send( nil, ch_out, str )",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "local k,v= linda:receive( nil, ch_in )",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "assert(v==str)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "local function chunk2( linda )\r\n    assert( upvalue==\"123\" )    -- even when running as separate thread\r\n    -- function name & line number should be there even as separate thread\r\n    --\r\n    local info= debug.getinfo(1)    -- 1 = us\r\n    --\r\n    for k,v in pairs(info) do PRINT(k,v) end\r\n\r\n    assert( info.nups == (_VERSION == \"Lua 5.1\" and 2 or 3) )    -- one upvalue + PRINT + _ENV (Lua 5.2 only)\r\n    assert( info.what == \"Lua\" )\r\n    --assert( info.name == \"chunk2\" )   -- name does not seem to come through\r\n    assert( string.match( info.source, \"^@.*basic.lua$\" ) )\r\n    assert( string.match( info.short_src, \"^.*basic.lua$\" ) )\r\n    -- These vary so let's not be picky (they're there..)\r\n    --\r\n    assert( info.linedefined > 200 )   -- start of 'chunk2'\r\n    assert( info.currentline > info.linedefined )   -- line of 'debug.getinfo'\r\n    assert( info.lastlinedefined > info.currentline )   -- end of 'chunk2'\r\n    local k,func= linda:receive( \"down\" )\r\n    assert( type(func)==\"function\" )\r\n    assert( k==\"down\" )\r\n\r\n    func(linda)\r\n\r\n    local k,str= linda:receive( \"down\" )\r\n    assert( str==\"ok\" )\r\n\r\n    linda:send( \"up\", function() return \":)\" end, \"ok2\" )\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "assert( upvalue==\"123\" )",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "local info= debug.getinfo(1)",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "for k,v in pairs(info) do PRINT(k,v) end",
    "type": "statement:genericfor"
  }, {
    "id": 106,
    "text": "PRINT(k,v)",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "assert( info.nups == (_VERSION == \"Lua 5.1\" and 2 or 3) )",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "assert( info.what == \"Lua\" )",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "assert( string.match( info.source, \"^@.*basic.lua$\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "assert( string.match( info.short_src, \"^.*basic.lua$\" ) )",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "assert( info.linedefined > 200 )",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "assert( info.currentline > info.linedefined )",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "assert( info.lastlinedefined > info.currentline )",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "local k,func= linda:receive( \"down\" )",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "assert( type(func)==\"function\" )",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "assert( k==\"down\" )",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "func(linda)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "local k,str= linda:receive( \"down\" )",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "assert( str==\"ok\" )",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "linda:send( \"up\", function() return \":)\" end, \"ok2\" )",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "function() print( \"wait_send\", a, b) end",
    "type": "function"
  }, {
    "id": 123,
    "text": "function() print( \"wait_receive\", k, v) end",
    "type": "function"
  }, {
    "id": 124,
    "text": "function() print( \"wait_receive_batched\", k, v1, v2) end",
    "type": "function"
  }, {
    "id": 125,
    "text": "function() lanes_gen( \"xxx\", {gc_cb = gc_cb}, io_os_f ) end",
    "type": "function"
  }, {
    "id": 126,
    "text": "lanes_gen( \"xxx\", {gc_cb = gc_cb}, io_os_f )",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "function( linda, ch_in, ch_out )\r\n\t\tset_debug_threadname( \"criss cross \" .. ch_in .. \" -> \" .. ch_out)\r\n    local function STAGE(str)\r\n        io.stderr:write( ch_in..\": \"..str..\"\\n\" )\r\n        linda:send( nil, ch_out, str )\r\n        local k,v= linda:receive( nil, ch_in )\r\n        assert(v==str)\r\n    end\r\n    STAGE(\"Hello\")\r\n    STAGE(\"I was here first!\")\r\n    STAGE(\"So what?\")\r\n  end",
    "type": "function"
  }, {
    "id": 128,
    "text": "set_debug_threadname( \"criss cross \" .. ch_in .. \" -> \" .. ch_out)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "STAGE(\"Hello\")",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "STAGE(\"I was here first!\")",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "STAGE(\"So what?\")",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function() return \":)\" end",
    "type": "function"
  }, {
    "id": 134,
    "text": "function(linda) linda:send( \"up\", \"ready!\" ) end",
    "type": "function"
  }, {
    "id": 135,
    "text": "linda:send( \"up\", \"ready!\" )",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 137,
    "text": "function(arg)\r\n\t\tset_debug_threadname \"join test lane\"\r\n\t\tset_finalizer( function() end)\r\n    aux= {}\r\n    for i, v in ipairs(arg) do\r\n\t   table.insert (aux, 1, v)\r\n    end\r\n\t\t-- unpack was renamed table.unpack in Lua 5.2: cater for both!\r\n    return (unpack or table.unpack)(aux)\r\nend",
    "type": "function"
  }, {
    "id": 138,
    "text": "set_debug_threadname \"join test lane\"",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "set_finalizer( function() end)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "aux= {}",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "for i, v in ipairs(arg) do\r\n\t   table.insert (aux, 1, v)\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 142,
    "text": "table.insert (aux, 1, v)",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "",
    "type": "function container"
  }, {
    "id": 145,
    "text": "linda",
    "type": "global function"
  }, {
    "id": 146,
    "text": "fails",
    "type": "global function"
  }, {
    "id": 147,
    "text": "math",
    "type": "module"
  }, {
    "id": 148,
    "text": "S",
    "type": "global function"
  }, {
    "id": 149,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 150,
    "text": "func",
    "type": "global function"
  }, {
    "id": 151,
    "text": "time",
    "type": "global function"
  }, {
    "id": 152,
    "text": "print",
    "type": "global function"
  }, {
    "id": 153,
    "text": "lanes_gen",
    "type": "global function"
  }, {
    "id": 154,
    "text": "lanes_linda",
    "type": "global function"
  }, {
    "id": 155,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 156,
    "text": "set_finalizer",
    "type": "global function"
  }, {
    "id": 157,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 158,
    "text": "task_launch2",
    "type": "global function"
  }, {
    "id": 159,
    "text": "match",
    "type": "global function"
  }, {
    "id": 160,
    "text": "type",
    "type": "global function"
  }, {
    "id": 161,
    "text": "f",
    "type": "global function"
  }, {
    "id": 162,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 163,
    "text": "error",
    "type": "global function"
  }, {
    "id": 164,
    "text": "require",
    "type": "global function"
  }, {
    "id": 165,
    "text": "tc",
    "type": "global function"
  }, {
    "id": 166,
    "text": "set_debug_threadname",
    "type": "global function"
  }, {
    "id": 167,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 168,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 169,
    "text": "task_launch",
    "type": "global function"
  }, {
    "id": 170,
    "text": "select",
    "type": "global function"
  }, {
    "id": 171,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 172,
    "text": "",
    "type": "variable container"
  }, {
    "id": 173,
    "text": "",
    "type": "require container"
  }, {
    "id": 174,
    "text": "",
    "type": "local variable"
  }, {
    "id": 175,
    "text": "",
    "type": "n/a"
  }, {
    "id": 176,
    "text": "",
    "type": "local variable"
  }, {
    "id": 177,
    "text": "",
    "type": "n/a"
  }, {
    "id": 178,
    "text": "",
    "type": "local variable"
  }, {
    "id": 179,
    "text": "",
    "type": "n/a"
  }, {
    "id": 180,
    "text": "",
    "type": "local variable"
  }, {
    "id": 181,
    "text": "",
    "type": "n/a"
  }, {
    "id": 182,
    "text": "",
    "type": "local variable"
  }, {
    "id": 183,
    "text": "",
    "type": "local variable"
  }, {
    "id": 184,
    "text": "",
    "type": "n/a"
  }, {
    "id": 185,
    "text": "",
    "type": "local variable"
  }, {
    "id": 186,
    "text": "",
    "type": "n/a"
  }, {
    "id": 187,
    "text": "",
    "type": "local variable"
  }, {
    "id": 188,
    "text": "",
    "type": "n/a"
  }, {
    "id": 189,
    "text": "",
    "type": "local variable"
  }, {
    "id": 190,
    "text": "",
    "type": "n/a"
  }, {
    "id": 191,
    "text": "",
    "type": "local variable"
  }, {
    "id": 192,
    "text": "",
    "type": "n/a"
  }, {
    "id": 193,
    "text": "",
    "type": "local variable"
  }, {
    "id": 194,
    "text": "",
    "type": "n/a"
  }, {
    "id": 195,
    "text": "",
    "type": "local variable"
  }, {
    "id": 196,
    "text": "",
    "type": "n/a"
  }, {
    "id": 197,
    "text": "",
    "type": "local variable"
  }, {
    "id": 198,
    "text": "",
    "type": "n/a"
  }, {
    "id": 199,
    "text": "",
    "type": "local variable"
  }, {
    "id": 200,
    "text": "",
    "type": "n/a"
  }, {
    "id": 201,
    "text": "",
    "type": "local variable"
  }, {
    "id": 202,
    "text": "",
    "type": "n/a"
  }, {
    "id": 203,
    "text": "",
    "type": "local variable"
  }, {
    "id": 204,
    "text": "",
    "type": "number"
  }, {
    "id": 205,
    "text": "",
    "type": "local variable"
  }, {
    "id": 206,
    "text": "",
    "type": "n/a"
  }, {
    "id": 207,
    "text": "",
    "type": "local variable"
  }, {
    "id": 208,
    "text": "",
    "type": "local variable"
  }, {
    "id": 209,
    "text": "",
    "type": "n/a"
  }, {
    "id": 210,
    "text": "",
    "type": "local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "n/a"
  }, {
    "id": 212,
    "text": "",
    "type": "local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "n/a"
  }, {
    "id": 214,
    "text": "",
    "type": "local variable"
  }, {
    "id": 215,
    "text": "",
    "type": "n/a"
  }, {
    "id": 216,
    "text": "",
    "type": "local variable"
  }, {
    "id": 217,
    "text": "",
    "type": "n/a"
  }, {
    "id": 218,
    "text": "",
    "type": "local variable"
  }, {
    "id": 219,
    "text": "",
    "type": "n/a"
  }, {
    "id": 220,
    "text": "",
    "type": "local variable"
  }, {
    "id": 221,
    "text": "",
    "type": "n/a"
  }, {
    "id": 222,
    "text": "",
    "type": "local variable"
  }, {
    "id": 223,
    "text": "",
    "type": "n/a"
  }, {
    "id": 224,
    "text": "",
    "type": "local variable"
  }, {
    "id": 225,
    "text": "",
    "type": "n/a"
  }, {
    "id": 226,
    "text": "",
    "type": "local variable"
  }, {
    "id": 227,
    "text": "",
    "type": "n/a"
  }, {
    "id": 228,
    "text": "",
    "type": "local variable"
  }, {
    "id": 229,
    "text": "",
    "type": "n/a"
  }, {
    "id": 230,
    "text": "",
    "type": "local variable"
  }, {
    "id": 231,
    "text": "",
    "type": "n/a"
  }, {
    "id": 232,
    "text": "",
    "type": "local variable"
  }, {
    "id": 233,
    "text": "",
    "type": "n/a"
  }, {
    "id": 234,
    "text": "",
    "type": "local variable"
  }, {
    "id": 235,
    "text": "",
    "type": "n/a"
  }, {
    "id": 236,
    "text": "",
    "type": "local variable"
  }, {
    "id": 237,
    "text": "",
    "type": "n/a"
  }, {
    "id": 238,
    "text": "",
    "type": "local variable"
  }, {
    "id": 239,
    "text": "",
    "type": "n/a"
  }, {
    "id": 240,
    "text": "",
    "type": "local variable"
  }, {
    "id": 241,
    "text": "",
    "type": "n/a"
  }, {
    "id": 242,
    "text": "",
    "type": "local variable"
  }, {
    "id": 243,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 244,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 245,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 246,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 247,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 248,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 249,
    "text": "",
    "type": "local variable"
  }, {
    "id": 250,
    "text": "",
    "type": "n/a"
  }, {
    "id": 251,
    "text": "",
    "type": "local variable"
  }, {
    "id": 252,
    "text": "",
    "type": "n/a"
  }, {
    "id": 253,
    "text": "",
    "type": "local variable"
  }, {
    "id": 254,
    "text": "",
    "type": "n/a"
  }, {
    "id": 255,
    "text": "",
    "type": "local variable"
  }, {
    "id": 256,
    "text": "",
    "type": "n/a"
  }, {
    "id": 257,
    "text": "",
    "type": "local variable"
  }, {
    "id": 258,
    "text": "",
    "type": "n/a"
  }, {
    "id": 259,
    "text": "",
    "type": "local variable"
  }, {
    "id": 260,
    "text": "",
    "type": "string"
  }, {
    "id": 261,
    "text": "",
    "type": "local variable"
  }, {
    "id": 262,
    "text": "",
    "type": "n/a"
  }, {
    "id": 263,
    "text": "",
    "type": "local variable"
  }, {
    "id": 264,
    "text": "",
    "type": "n/a"
  }, {
    "id": 265,
    "text": "",
    "type": "local variable"
  }, {
    "id": 266,
    "text": "",
    "type": "n/a"
  }, {
    "id": 267,
    "text": "",
    "type": "local variable"
  }, {
    "id": 268,
    "text": "",
    "type": "local variable"
  }, {
    "id": 269,
    "text": "",
    "type": "n/a"
  }, {
    "id": 270,
    "text": "",
    "type": "local variable"
  }, {
    "id": 271,
    "text": "",
    "type": "local variable"
  }, {
    "id": 272,
    "text": "",
    "type": "n/a"
  }, {
    "id": 273,
    "text": "",
    "type": "local variable"
  }, {
    "id": 274,
    "text": "",
    "type": "n/a"
  }, {
    "id": 275,
    "text": "",
    "type": "local variable"
  }, {
    "id": 276,
    "text": "",
    "type": "local variable"
  }, {
    "id": 277,
    "text": "",
    "type": "n/a"
  }, {
    "id": 278,
    "text": "",
    "type": "local variable"
  }, {
    "id": 279,
    "text": "",
    "type": "n/a"
  }, {
    "id": 280,
    "text": "",
    "type": "local variable"
  }, {
    "id": 281,
    "text": "",
    "type": "local variable"
  }, {
    "id": 282,
    "text": "",
    "type": "local variable"
  }, {
    "id": 283,
    "text": "",
    "type": "global variable"
  }, {
    "id": 284,
    "text": "",
    "type": "n/a"
  }, {
    "id": 285,
    "text": "",
    "type": "global variable"
  }, {
    "id": 286,
    "text": "",
    "type": "global variable"
  }, {
    "id": 287,
    "text": "",
    "type": "global variable"
  }, {
    "id": 288,
    "text": "",
    "type": "global variable"
  }, {
    "id": 289,
    "text": "",
    "type": "global variable"
  }, {
    "id": 290,
    "text": "",
    "type": "global variable"
  }, {
    "id": 291,
    "text": "",
    "type": "n/a"
  }, {
    "id": 292,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 293,
    "text": "",
    "type": "global variable"
  }, {
    "id": 294,
    "text": "",
    "type": "require container"
  } ]
}