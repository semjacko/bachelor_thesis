{
  "_filename": "assert.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lanes/tests/assert.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 3
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 3
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 19,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 20
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 36
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 39
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 10
  }, {
    "from": 50,
    "label": "has",
    "to": 3
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 13
  }, {
    "from": 52,
    "label": "has",
    "to": 3
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 16
  }, {
    "from": 54,
    "label": "has",
    "to": 17
  }, {
    "from": 54,
    "label": "has",
    "to": 3
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 3
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 60,
    "label": "has",
    "to": 3
  }, {
    "from": 60,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 3
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 3
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 3
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 71
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 3
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 3
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 3
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 3
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 3
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 3
  }, {
    "from": 91,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 91,
    "label": "has",
    "to": 3
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 94,
    "label": "has",
    "to": 97
  }, {
    "from": 94,
    "label": "has",
    "to": 98
  }, {
    "from": 94,
    "label": "has",
    "to": 3
  }, {
    "from": 94,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 100,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 20
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 3
  }, {
    "from": 100,
    "label": "has",
    "to": 95
  }, {
    "from": 100,
    "label": "has",
    "to": 96
  }, {
    "from": 100,
    "label": "has",
    "to": 97
  }, {
    "from": 100,
    "label": "has",
    "to": 98
  }, {
    "from": 100,
    "label": "has",
    "to": 3
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 19,
    "label": "calls",
    "to": 114
  }, {
    "from": 107,
    "label": "calls",
    "to": 109
  }, {
    "from": 107,
    "label": "calls",
    "to": 109
  }, {
    "from": 107,
    "label": "calls",
    "to": 109
  }, {
    "from": 107,
    "label": "calls",
    "to": 109
  }, {
    "from": 107,
    "label": "calls",
    "to": 109
  }, {
    "from": 107,
    "label": "calls",
    "to": 109
  }, {
    "from": 107,
    "label": "calls",
    "to": 109
  }, {
    "from": 107,
    "label": "calls",
    "to": 109
  }, {
    "from": 19,
    "label": "calls",
    "to": 115
  }, {
    "from": 29,
    "label": "calls",
    "to": 115
  }, {
    "from": 107,
    "label": "calls",
    "to": 2
  }, {
    "from": 107,
    "label": "calls",
    "to": 2
  }, {
    "from": 107,
    "label": "calls",
    "to": 2
  }, {
    "from": 107,
    "label": "calls",
    "to": 119
  }, {
    "from": 107,
    "label": "calls",
    "to": 119
  }, {
    "from": 19,
    "label": "calls",
    "to": 119
  }, {
    "from": 19,
    "label": "calls",
    "to": 119
  }, {
    "from": 29,
    "label": "calls",
    "to": 119
  }, {
    "from": 45,
    "label": "calls",
    "to": 119
  }, {
    "from": 5,
    "label": "calls",
    "to": 116
  }, {
    "from": 19,
    "label": "calls",
    "to": 116
  }, {
    "from": 107,
    "label": "calls",
    "to": 35
  }, {
    "from": 107,
    "label": "calls",
    "to": 35
  }, {
    "from": 107,
    "label": "calls",
    "to": 9
  }, {
    "from": 107,
    "label": "calls",
    "to": 9
  }, {
    "from": 107,
    "label": "calls",
    "to": 9
  }, {
    "from": 107,
    "label": "calls",
    "to": 113
  }, {
    "from": 107,
    "label": "calls",
    "to": 113
  }, {
    "from": 107,
    "label": "calls",
    "to": 110
  }, {
    "from": 107,
    "label": "calls",
    "to": 110
  }, {
    "from": 107,
    "label": "calls",
    "to": 110
  }, {
    "from": 107,
    "label": "calls",
    "to": 110
  }, {
    "from": 9,
    "label": "calls",
    "to": 5
  }, {
    "from": 12,
    "label": "calls",
    "to": 5
  }, {
    "from": 15,
    "label": "calls",
    "to": 5
  }, {
    "from": 107,
    "label": "calls",
    "to": 5
  }, {
    "from": 107,
    "label": "calls",
    "to": 5
  }, {
    "from": 107,
    "label": "calls",
    "to": 5
  }, {
    "from": 107,
    "label": "calls",
    "to": 5
  }, {
    "from": 107,
    "label": "calls",
    "to": 5
  }, {
    "from": 107,
    "label": "calls",
    "to": 5
  }, {
    "from": 107,
    "label": "calls",
    "to": 5
  }, {
    "from": 107,
    "label": "calls",
    "to": 5
  }, {
    "from": 19,
    "label": "calls",
    "to": 5
  }, {
    "from": 19,
    "label": "calls",
    "to": 5
  }, {
    "from": 29,
    "label": "calls",
    "to": 5
  }, {
    "from": 29,
    "label": "calls",
    "to": 5
  }, {
    "from": 107,
    "label": "calls",
    "to": 5
  }, {
    "from": 107,
    "label": "calls",
    "to": 5
  }, {
    "from": 35,
    "label": "calls",
    "to": 5
  }, {
    "from": 35,
    "label": "calls",
    "to": 5
  }, {
    "from": 41,
    "label": "calls",
    "to": 5
  }, {
    "from": 45,
    "label": "calls",
    "to": 5
  }, {
    "from": 45,
    "label": "calls",
    "to": 5
  }, {
    "from": 35,
    "label": "calls",
    "to": 111
  }, {
    "from": 41,
    "label": "calls",
    "to": 111
  }, {
    "from": 107,
    "label": "calls",
    "to": 117
  }, {
    "from": 19,
    "label": "calls",
    "to": 19
  }, {
    "from": 107,
    "label": "calls",
    "to": 19
  }, {
    "from": 107,
    "label": "calls",
    "to": 12
  }, {
    "from": 107,
    "label": "calls",
    "to": 12
  }, {
    "from": 107,
    "label": "calls",
    "to": 112
  }, {
    "from": 12,
    "label": "calls",
    "to": 112
  }, {
    "from": 15,
    "label": "calls",
    "to": 112
  }, {
    "from": 107,
    "label": "calls",
    "to": 112
  }, {
    "from": 107,
    "label": "calls",
    "to": 112
  }, {
    "from": 107,
    "label": "calls",
    "to": 112
  }, {
    "from": 19,
    "label": "calls",
    "to": 112
  }, {
    "from": 19,
    "label": "calls",
    "to": 112
  }, {
    "from": 29,
    "label": "calls",
    "to": 112
  }, {
    "from": 29,
    "label": "calls",
    "to": 112
  }, {
    "from": 107,
    "label": "calls",
    "to": 112
  }, {
    "from": 107,
    "label": "calls",
    "to": 112
  }, {
    "from": 45,
    "label": "calls",
    "to": 118
  }, {
    "from": 29,
    "label": "calls",
    "to": 29
  }, {
    "from": 107,
    "label": "calls",
    "to": 29
  }, {
    "from": 107,
    "label": "calls",
    "to": 15
  }, {
    "from": 107,
    "label": "calls",
    "to": 15
  }, {
    "from": 1,
    "label": "contains",
    "to": 107
  }, {
    "from": 107,
    "label": "declares",
    "to": 2
  }, {
    "from": 107,
    "label": "declares",
    "to": 5
  }, {
    "from": 107,
    "label": "declares",
    "to": 9
  }, {
    "from": 107,
    "label": "declares",
    "to": 12
  }, {
    "from": 107,
    "label": "declares",
    "to": 15
  }, {
    "from": 107,
    "label": "declares",
    "to": 19
  }, {
    "from": 107,
    "label": "declares",
    "to": 29
  }, {
    "from": 107,
    "label": "declares",
    "to": 35
  }, {
    "from": 107,
    "label": "declares",
    "to": 41
  }, {
    "from": 107,
    "label": "declares",
    "to": 45
  }, {
    "from": 107,
    "label": "declares",
    "to": 50
  }, {
    "from": 107,
    "label": "declares",
    "to": 52
  }, {
    "from": 107,
    "label": "declares",
    "to": 54
  }, {
    "from": 107,
    "label": "declares",
    "to": 56
  }, {
    "from": 107,
    "label": "declares",
    "to": 60
  }, {
    "from": 107,
    "label": "declares",
    "to": 64
  }, {
    "from": 107,
    "label": "declares",
    "to": 67
  }, {
    "from": 107,
    "label": "declares",
    "to": 70
  }, {
    "from": 107,
    "label": "declares",
    "to": 74
  }, {
    "from": 107,
    "label": "declares",
    "to": 77
  }, {
    "from": 107,
    "label": "declares",
    "to": 80
  }, {
    "from": 107,
    "label": "declares",
    "to": 83
  }, {
    "from": 107,
    "label": "declares",
    "to": 86
  }, {
    "from": 107,
    "label": "declares",
    "to": 91
  }, {
    "from": 107,
    "label": "declares",
    "to": 94
  }, {
    "from": 107,
    "label": "declares",
    "to": 100
  }, {
    "from": 107,
    "label": "declares",
    "to": 103
  }, {
    "from": 107,
    "label": "declares",
    "to": 105
  }, {
    "from": 1,
    "label": "declares",
    "to": 108
  }, {
    "from": 1,
    "label": "contains",
    "to": 121
  }, {
    "from": 1,
    "label": "contains",
    "to": 122
  }, {
    "from": 121,
    "label": "initializes",
    "to": 123
  }, {
    "from": 123,
    "label": "assigns",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 125,
    "label": "assigns",
    "to": 126
  }, {
    "from": 121,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 121,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 121,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 121,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "assigns",
    "to": 134
  }, {
    "from": 121,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "assigns",
    "to": 136
  }, {
    "from": 121,
    "label": "initializes",
    "to": 137
  }, {
    "from": 137,
    "label": "assigns",
    "to": 138
  }, {
    "from": 1,
    "label": "provides",
    "to": 139
  }, {
    "from": 120,
    "label": "represents",
    "to": 140
  }, {
    "from": 139,
    "label": "provides",
    "to": 140
  }, {
    "from": 141,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "assert",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function try_maxint( n )\r\n    return (n > n-1) and n-1   -- false when outside the integer range \r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function _assert( cond, msg, lev ) \r\n    -- original 'assert' provides no level override, so we use 'error'.\r\n    --\r\n    if not cond then\r\n        error( msg or \"assertion failed!\", (lev or 1)+1 )\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "if not cond then\r\n        error( msg or \"assertion failed!\", (lev or 1)+1 )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "error( msg or \"assertion failed!\", (lev or 1)+1 )",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function assert_v( v0 )\r\n    return function(v,msg) \r\n                _assert( v == v0, msg or av_msg, 2 )\r\n                return v\r\n           end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "_assert( v == v0, msg or av_msg, 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function assert_t( str )\r\n    return function(v,msg) \r\n                _assert( type(v) == str, msg or at_msg, 2 )\r\n                return v\r\n           end\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "_assert( type(v) == str, msg or at_msg, 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "local function assert_t2( str )\r\n    return function(v,subtype,msg) \r\n                local t,st= type(v)\r\n                _assert( t==str and ((not subtype) or (st==subtype)),\r\n                         msg or at_msg, 2 )\r\n                return v\r\n           end\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local t,st= type(v)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "_assert( t==str and ((not subtype) or (st==subtype)),\r\n                         msg or at_msg, 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "local function subf1(v,t,msg,lev)\r\n            _assert(lev)\r\n            for k,f in pairs(t) do\r\n                -- 'f' is an assert function, or subtable\r\n                local ft= type(f)\r\n                if ft==\"function\" then\r\n                    f( v[k], msg, lev+1 )\r\n                elseif ft==\"table\" then\r\n                    _assert( type(v[k])==\"table\", msg or \"no subtable \"..tostring(k), lev+1 )\r\n                    subf1( v[k], f, msg, lev+1 )\r\n                else\r\n                    error( \"Bad constraints table for '\"..tostring(k)..\"'! (not a function)\", lev+1 )\r\n                end\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 20,
    "text": "_assert(lev)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "for k,f in pairs(t) do\r\n                -- 'f' is an assert function, or subtable\r\n                local ft= type(f)\r\n                if ft==\"function\" then\r\n                    f( v[k], msg, lev+1 )\r\n                elseif ft==\"table\" then\r\n                    _assert( type(v[k])==\"table\", msg or \"no subtable \"..tostring(k), lev+1 )\r\n                    subf1( v[k], f, msg, lev+1 )\r\n                else\r\n                    error( \"Bad constraints table for '\"..tostring(k)..\"'! (not a function)\", lev+1 )\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 22,
    "text": "local ft= type(f)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if ft==\"function\" then\r\n                    f( v[k], msg, lev+1 )\r\n                elseif ft==\"table\" then\r\n                    _assert( type(v[k])==\"table\", msg or \"no subtable \"..tostring(k), lev+1 )\r\n                    subf1( v[k], f, msg, lev+1 )\r\n                else\r\n                    error( \"Bad constraints table for '\"..tostring(k)..\"'! (not a function)\", lev+1 )\r\n                end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "f( v[k], msg, lev+1 )",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "_assert( type(v[k])==\"table\", msg or \"no subtable \"..tostring(k), lev+1 )",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "subf1( v[k], f, msg, lev+1 )",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "error( \"Bad constraints table for '\"..tostring(k)..\"'! (not a function)\", lev+1 )",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function subf2(v,t,msg,lev)\r\n            _assert(lev)\r\n            for k,vv in pairs(v) do\r\n                if type(k)==\"number\" then\r\n                    -- skip them\r\n                elseif not t[k] then\r\n                    _assert( false, msg or \"extra field: '\"..tostring(k)..\"'\", lev+1 )\r\n                elseif type(vv)==\"table\" then\r\n                    subf2( vv, t[k], msg, lev+1 )\r\n                end\r\n            end\r\n        end",
    "type": "function"
  }, {
    "id": 30,
    "text": "for k,vv in pairs(v) do\r\n                if type(k)==\"number\" then\r\n                    -- skip them\r\n                elseif not t[k] then\r\n                    _assert( false, msg or \"extra field: '\"..tostring(k)..\"'\", lev+1 )\r\n                elseif type(vv)==\"table\" then\r\n                    subf2( vv, t[k], msg, lev+1 )\r\n                end\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 31,
    "text": "if type(k)==\"number\" then\r\n                    -- skip them\r\n                elseif not t[k] then\r\n                    _assert( false, msg or \"extra field: '\"..tostring(k)..\"'\", lev+1 )\r\n                elseif type(vv)==\"table\" then\r\n                    subf2( vv, t[k], msg, lev+1 )\r\n                end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "_assert( false, msg or \"extra field: '\"..tostring(k)..\"'\", lev+1 )",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "subf2( vv, t[k], msg, lev+1 )",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function assert.fails( func_block, err_msg )\r\n    --\r\n    local st,err= pcall( func_block )\r\n    if st then\r\n        _assert( false, \"Block expected to fail, but didn't.\", 2 )\r\n    elseif err_msg and err ~= err_msg then\r\n        _assert( false, \"Failed with wrong error message: \\n\"..\r\n                       \"'\"..err..\"'\\nexpected: '\"..err_msg..\"'\", 2 )\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "local st,err= pcall( func_block )",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "if st then\r\n        _assert( false, \"Block expected to fail, but didn't.\", 2 )\r\n    elseif err_msg and err ~= err_msg then\r\n        _assert( false, \"Failed with wrong error message: \\n\"..\r\n                       \"'\"..err..\"'\\nexpected: '\"..err_msg..\"'\", 2 )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "_assert( false, \"Block expected to fail, but didn't.\", 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "_assert( false, \"Failed with wrong error message: \\n\"..\r\n                       \"'\"..err..\"'\\nexpected: '\"..err_msg..\"'\", 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function assert.failsnot( func_block, err_msg )\r\n    --\r\n    local st,err= pcall( func_block )\r\n    if not st then\r\n        _assert( false, \"Block expected NOT to fail, but did.\"..\r\n                        (err and \"\\n\\tError: '\"..err..\"'\" or \"\"), 2 )\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "if not st then\r\n        _assert( false, \"Block expected NOT to fail, but did.\"..\r\n                        (err and \"\\n\\tError: '\"..err..\"'\" or \"\"), 2 )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "_assert( false, \"Block expected NOT to fail, but did.\"..\r\n                        (err and \"\\n\\tError: '\"..err..\"'\" or \"\"), 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function assert.nilerr( func_block, err_msg )\r\n    --\r\n    local v,err= func_block()\r\n    _assert( v==nil, \"Expected to return nil, but didn't: \"..tostring(v), 2 )\r\n    if err_msg and err ~= err_msg then\r\n        _assert( false, \"Failed with wrong error message: \\n\"..\r\n                       \"'\"..err..\"'\\nexpected: '\"..err_msg..\"'\", 2 )\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local v,err= func_block()",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "_assert( v==nil, \"Expected to return nil, but didn't: \"..tostring(v), 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "if err_msg and err ~= err_msg then\r\n        _assert( false, \"Failed with wrong error message: \\n\"..\r\n                       \"'\"..err..\"'\\nexpected: '\"..err_msg..\"'\", 2 )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function(v,msg) \r\n                _assert( v == v0, msg or av_msg, 2 )\r\n                return v\r\n           end",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function(v,msg) \r\n                _assert( type(v) == str, msg or at_msg, 2 )\r\n                return v\r\n           end",
    "type": "function"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function(v,subtype,msg) \r\n                local t,st= type(v)\r\n                _assert( t==str and ((not subtype) or (st==subtype)),\r\n                         msg or at_msg, 2 )\r\n                return v\r\n           end",
    "type": "function"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function(_,v,msg)     -- plain 'assert()' (compatibility)\r\n            if v then return v end\r\n            _assert( v, msg, 2 )\r\n        end",
    "type": "function"
  }, {
    "id": 57,
    "text": "if v then return v end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "_assert( v, msg, 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function( v, msg )\r\n        local s= tostring(v)\r\n        _assert( s, msg or at_msg, 2 )\r\n        return v\r\n    end",
    "type": "function"
  }, {
    "id": 61,
    "text": "local s= tostring(v)",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "_assert( s, msg or at_msg, 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function( v, msg )\r\n        -- 'char' is _not_ doing int->string conversion\r\n        _assert( type(v)==\"string\" and v:len()==1, msg or at_msg, 2 )\r\n        return v\r\n    end",
    "type": "function"
  }, {
    "id": 65,
    "text": "_assert( type(v)==\"string\" and v:len()==1, msg or at_msg, 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function( v, msg )\r\n        _assert( tonumber(v), msg or at_msg, 2 )\r\n        return v\r\n    end",
    "type": "function"
  }, {
    "id": 68,
    "text": "_assert( tonumber(v), msg or at_msg, 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function( v, msg )\r\n        local n= tonumber(v)\r\n        _assert( n and (n >= INT_MIN) and (n <= INT_MAX) and math.floor(n) == n,\r\n                    msg or at_msg, 2 )\r\n        return v\r\n    end",
    "type": "function"
  }, {
    "id": 71,
    "text": "local n= tonumber(v)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "_assert( n and (n >= INT_MIN) and (n <= INT_MAX) and math.floor(n) == n,\r\n                    msg or at_msg, 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function( v, msg )\r\n        local n= tonumber(v)\r\n        -- unsigned integer upper range is the same as integers' (there's no\r\n        -- real unsigned within the Lua)\r\n        _assert( n and (n >= 0) and (n <= INT_MAX) and math.floor(n) == n,\r\n                    msg or at_msg, 2 )\r\n        return v\r\n    end",
    "type": "function"
  }, {
    "id": 75,
    "text": "_assert( n and (n >= 0) and (n <= INT_MAX) and math.floor(n) == n,\r\n                    msg or at_msg, 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function( v, msg )\r\n        assert( tostring(v) or type(v)==\"table\", msg or at_msg, 2 )\r\n        return v\r\n    end",
    "type": "function"
  }, {
    "id": 78,
    "text": "assert( tostring(v) or type(v)==\"table\", msg or at_msg, 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function( v, msg )\r\n        assert( tonumber(v) or type(v)==\"table\", msg or at_msg, 2 )\r\n        return v\r\n    end",
    "type": "function"
  }, {
    "id": 81,
    "text": "assert( tonumber(v) or type(v)==\"table\", msg or at_msg, 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function( v, msg )\r\n        assert( v ~= nil, msg or av_msg, 2 )\r\n        return v\r\n    end",
    "type": "function"
  }, {
    "id": 84,
    "text": "assert( v ~= nil, msg or av_msg, 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function(v,msg,lev)\r\n            if ( (lo and v<lo) or (hi and v>hi) ) then\r\n                msg= msg or \"not in range: (\"..(lo or \"\")..\",\"..(hi or \"\")..\")\"\r\n                _assert( false, msg, 2 )\r\n            end\r\n            return v\r\n        end",
    "type": "function"
  }, {
    "id": 87,
    "text": "if ( (lo and v<lo) or (hi and v>hi) ) then\r\n                msg= msg or \"not in range: (\"..(lo or \"\")..\",\"..(hi or \"\")..\")\"\r\n                _assert( false, msg, 2 )\r\n            end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "msg= msg or \"not in range: (\"..(lo or \"\")..\",\"..(hi or \"\")..\")\"",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "_assert( false, msg, 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function( lo, hi )\r\n        _assert( lo and hi and lo <= hi, \"Bad limits\", 2 )\r\n             -- make sure the limits make sense (just once)\r\n\r\n        return function(v,msg,lev)\r\n            if ( (lo and v<lo) or (hi and v>hi) ) then\r\n                msg= msg or \"not in range: (\"..(lo or \"\")..\",\"..(hi or \"\")..\")\"\r\n                _assert( false, msg, 2 )\r\n            end\r\n            return v\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 92,
    "text": "_assert( lo and hi and lo <= hi, \"Bad limits\", 2 )",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function( v, msg, lev )\r\n            lev= (lev or 1)+1\r\n            _assert( type(v)==\"table\" ,msg, lev )\r\n            subf1( v, tbl, msg, lev )\r\n            subf2( v, tbl, msg, lev )\r\n            return v\r\n        end",
    "type": "function"
  }, {
    "id": 95,
    "text": "lev= (lev or 1)+1",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "_assert( type(v)==\"table\" ,msg, lev )",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "subf1( v, tbl, msg, lev )",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "subf2( v, tbl, msg, lev )",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function( tbl )\r\n\r\n        -- check all keys in 't' (including numeric, if any) that they do exist,\r\n        -- and carry the right type\r\n        --\r\n        local function subf1(v,t,msg,lev)\r\n            _assert(lev)\r\n            for k,f in pairs(t) do\r\n                -- 'f' is an assert function, or subtable\r\n                local ft= type(f)\r\n                if ft==\"function\" then\r\n                    f( v[k], msg, lev+1 )\r\n                elseif ft==\"table\" then\r\n                    _assert( type(v[k])==\"table\", msg or \"no subtable \"..tostring(k), lev+1 )\r\n                    subf1( v[k], f, msg, lev+1 )\r\n                else\r\n                    error( \"Bad constraints table for '\"..tostring(k)..\"'! (not a function)\", lev+1 )\r\n                end\r\n            end\r\n        end\r\n                        \r\n        -- check there are no other (non-numeric) keys in 'v'\r\n        local function subf2(v,t,msg,lev)\r\n            _assert(lev)\r\n            for k,vv in pairs(v) do\r\n                if type(k)==\"number\" then\r\n                    -- skip them\r\n                elseif not t[k] then\r\n                    _assert( false, msg or \"extra field: '\"..tostring(k)..\"'\", lev+1 )\r\n                elseif type(vv)==\"table\" then\r\n                    subf2( vv, t[k], msg, lev+1 )\r\n                end\r\n            end\r\n        end\r\n        \r\n        _assert( type(tbl)==\"table\", \"Wrong parameter to assert['{}']\" )\r\n\r\n        return function( v, msg, lev )\r\n            lev= (lev or 1)+1\r\n            _assert( type(v)==\"table\" ,msg, lev )\r\n            subf1( v, tbl, msg, lev )\r\n            subf2( v, tbl, msg, lev )\r\n            return v\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 101,
    "text": "_assert( type(tbl)==\"table\", \"Wrong parameter to assert['{}']\" )",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function() assert( false ) end",
    "type": "function"
  }, {
    "id": 104,
    "text": "assert( false )",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "function() assert( nil ) end",
    "type": "function"
  }, {
    "id": 106,
    "text": "assert( nil )",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "",
    "type": "function container"
  }, {
    "id": 108,
    "text": "fails",
    "type": "global function"
  }, {
    "id": 109,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 110,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 111,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 112,
    "text": "type",
    "type": "global function"
  }, {
    "id": 113,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 114,
    "text": "f",
    "type": "global function"
  }, {
    "id": 115,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 116,
    "text": "error",
    "type": "global function"
  }, {
    "id": 117,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 118,
    "text": "func_block",
    "type": "global function"
  }, {
    "id": 119,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 120,
    "text": "",
    "type": "local variable"
  }, {
    "id": 121,
    "text": "",
    "type": "variable container"
  }, {
    "id": 122,
    "text": "",
    "type": "require container"
  }, {
    "id": 123,
    "text": "",
    "type": "local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 125,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 126,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 127,
    "text": "",
    "type": "local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "unop"
  }, {
    "id": 131,
    "text": "",
    "type": "local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "string"
  }, {
    "id": 133,
    "text": "",
    "type": "local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "string"
  }, {
    "id": 135,
    "text": "",
    "type": "global variable"
  }, {
    "id": 136,
    "text": "",
    "type": "n/a"
  }, {
    "id": 137,
    "text": "",
    "type": "global variable"
  }, {
    "id": 138,
    "text": "",
    "type": "n/a"
  }, {
    "id": 139,
    "text": "",
    "type": "interface container"
  }, {
    "id": 140,
    "text": "",
    "type": "interface"
  }, {
    "id": 141,
    "text": "",
    "type": "global variable"
  } ]
}