{
  "_filename": "test.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/md5/tests/test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 6,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "calls",
    "to": 19
  }, {
    "from": 17,
    "label": "calls",
    "to": 19
  }, {
    "from": 17,
    "label": "calls",
    "to": 19
  }, {
    "from": 17,
    "label": "calls",
    "to": 19
  }, {
    "from": 17,
    "label": "calls",
    "to": 3
  }, {
    "from": 17,
    "label": "calls",
    "to": 3
  }, {
    "from": 17,
    "label": "calls",
    "to": 3
  }, {
    "from": 17,
    "label": "calls",
    "to": 3
  }, {
    "from": 17,
    "label": "calls",
    "to": 3
  }, {
    "from": 17,
    "label": "calls",
    "to": 3
  }, {
    "from": 17,
    "label": "calls",
    "to": 3
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 6,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 22
  }, {
    "from": 17,
    "label": "calls",
    "to": 24
  }, {
    "from": 17,
    "label": "calls",
    "to": 28
  }, {
    "from": 17,
    "label": "calls",
    "to": 31
  }, {
    "from": 17,
    "label": "calls",
    "to": 18
  }, {
    "from": 17,
    "label": "calls",
    "to": 18
  }, {
    "from": 17,
    "label": "calls",
    "to": 18
  }, {
    "from": 17,
    "label": "calls",
    "to": 18
  }, {
    "from": 17,
    "label": "calls",
    "to": 18
  }, {
    "from": 17,
    "label": "calls",
    "to": 18
  }, {
    "from": 17,
    "label": "calls",
    "to": 20
  }, {
    "from": 17,
    "label": "calls",
    "to": 20
  }, {
    "from": 3,
    "label": "calls",
    "to": 20
  }, {
    "from": 17,
    "label": "calls",
    "to": 20
  }, {
    "from": 17,
    "label": "calls",
    "to": 20
  }, {
    "from": 3,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 27
  }, {
    "from": 17,
    "label": "calls",
    "to": 26
  }, {
    "from": 17,
    "label": "calls",
    "to": 26
  }, {
    "from": 17,
    "label": "calls",
    "to": 26
  }, {
    "from": 17,
    "label": "calls",
    "to": 32
  }, {
    "from": 17,
    "label": "calls",
    "to": 32
  }, {
    "from": 17,
    "label": "calls",
    "to": 6
  }, {
    "from": 17,
    "label": "calls",
    "to": 18
  }, {
    "from": 17,
    "label": "calls",
    "to": 18
  }, {
    "from": 17,
    "label": "calls",
    "to": 18
  }, {
    "from": 17,
    "label": "calls",
    "to": 18
  }, {
    "from": 17,
    "label": "calls",
    "to": 18
  }, {
    "from": 17,
    "label": "calls",
    "to": 18
  }, {
    "from": 17,
    "label": "calls",
    "to": 18
  }, {
    "from": 17,
    "label": "calls",
    "to": 18
  }, {
    "from": 17,
    "label": "calls",
    "to": 18
  }, {
    "from": 6,
    "label": "calls",
    "to": 25
  }, {
    "from": 6,
    "label": "calls",
    "to": 25
  }, {
    "from": 17,
    "label": "calls",
    "to": 25
  }, {
    "from": 17,
    "label": "calls",
    "to": 19
  }, {
    "from": 17,
    "label": "calls",
    "to": 19
  }, {
    "from": 17,
    "label": "calls",
    "to": 19
  }, {
    "from": 17,
    "label": "calls",
    "to": 19
  }, {
    "from": 17,
    "label": "calls",
    "to": 19
  }, {
    "from": 17,
    "label": "calls",
    "to": 19
  }, {
    "from": 17,
    "label": "calls",
    "to": 19
  }, {
    "from": 6,
    "label": "calls",
    "to": 29
  }, {
    "from": 17,
    "label": "calls",
    "to": 30
  }, {
    "from": 17,
    "label": "calls",
    "to": 30
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 17,
    "label": "calls",
    "to": 21
  }, {
    "from": 3,
    "label": "calls",
    "to": 23
  }, {
    "from": 6,
    "label": "calls",
    "to": 23
  }, {
    "from": 2,
    "label": "contains",
    "to": 17
  }, {
    "from": 17,
    "label": "declares",
    "to": 3
  }, {
    "from": 17,
    "label": "declares",
    "to": 6
  }, {
    "from": 2,
    "label": "contains",
    "to": 33
  }, {
    "from": 2,
    "label": "contains",
    "to": 34
  }, {
    "from": 34,
    "label": "initializes",
    "to": 35
  }, {
    "from": 35,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "md5",
    "type": "module"
  }, {
    "id": 2,
    "text": "test",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function invert (s)\r\n  return md5.exor(s, string.rep('\\255', string.len(s)))\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function contchars (s)\r\n  local a = {}\r\n  for i=0,255 do a[string.char(i)] = 0 end\r\n  for c in string.gmatch(s, '.') do\r\n    a[c] = a[c] + 1\r\n  end\r\n  local av = string.len(s)/256\r\n  for i=0,255 do\r\n    local c = string.char(i)\r\n    assert(a[c] < av*tolerance and a[c] > av/tolerance, i)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local a = {}",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "for i=0,255 do a[string.char(i)] = 0 end",
    "type": "statement:numericfor"
  }, {
    "id": 9,
    "text": "a[string.char(i)] = 0",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "for c in string.gmatch(s, '.') do\r\n    a[c] = a[c] + 1\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "a[c] = a[c] + 1",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "local av = string.len(s)/256",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "for i=0,255 do\r\n    local c = string.char(i)\r\n    assert(a[c] < av*tolerance and a[c] > av/tolerance, i)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 14,
    "text": "local c = string.char(i)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "assert(a[c] < av*tolerance and a[c] > av/tolerance, i)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "",
    "type": "function container"
  }, {
    "id": 18,
    "text": "crypt",
    "type": "global function"
  }, {
    "id": 19,
    "text": "decrypt",
    "type": "global function"
  }, {
    "id": 20,
    "text": "exor",
    "type": "global function"
  }, {
    "id": 21,
    "text": "sumhexa",
    "type": "global function"
  }, {
    "id": 22,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 23,
    "text": "len",
    "type": "global function"
  }, {
    "id": 24,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 25,
    "text": "char",
    "type": "global function"
  }, {
    "id": 26,
    "text": "print",
    "type": "global function"
  }, {
    "id": 27,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 28,
    "text": "loadlib",
    "type": "global function"
  }, {
    "id": 29,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 30,
    "text": "require",
    "type": "global function"
  }, {
    "id": 31,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 32,
    "text": "find",
    "type": "global function"
  }, {
    "id": 33,
    "text": "",
    "type": "variable container"
  }, {
    "id": 34,
    "text": "",
    "type": "require container"
  }, {
    "id": 35,
    "text": "",
    "type": "require local variable"
  } ]
}