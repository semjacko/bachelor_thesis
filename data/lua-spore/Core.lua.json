{
  "_filename": "Core.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-spore/src/Spore/Core.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 5,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 11
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 11
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 18
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 21
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 11
  }, {
    "from": 24,
    "label": "has",
    "to": 11
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 31,
    "label": "has",
    "to": 11
  }, {
    "from": 31,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 31,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 31,
    "label": "has",
    "to": 11
  }, {
    "from": 31,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 11
  }, {
    "from": 31,
    "label": "calls",
    "to": 67
  }, {
    "from": 17,
    "label": "calls",
    "to": 5
  }, {
    "from": 24,
    "label": "calls",
    "to": 5
  }, {
    "from": 5,
    "label": "calls",
    "to": 63
  }, {
    "from": 31,
    "label": "calls",
    "to": 64
  }, {
    "from": 17,
    "label": "calls",
    "to": 68
  }, {
    "from": 17,
    "label": "calls",
    "to": 68
  }, {
    "from": 17,
    "label": "calls",
    "to": 68
  }, {
    "from": 24,
    "label": "calls",
    "to": 68
  }, {
    "from": 24,
    "label": "calls",
    "to": 68
  }, {
    "from": 31,
    "label": "calls",
    "to": 61
  }, {
    "from": 31,
    "label": "calls",
    "to": 59
  }, {
    "from": 5,
    "label": "calls",
    "to": 69
  }, {
    "from": 31,
    "label": "calls",
    "to": 69
  }, {
    "from": 53,
    "label": "calls",
    "to": 70
  }, {
    "from": 53,
    "label": "calls",
    "to": 70
  }, {
    "from": 53,
    "label": "calls",
    "to": 70
  }, {
    "from": 5,
    "label": "calls",
    "to": 70
  }, {
    "from": 17,
    "label": "calls",
    "to": 70
  }, {
    "from": 24,
    "label": "calls",
    "to": 70
  }, {
    "from": 5,
    "label": "calls",
    "to": 66
  }, {
    "from": 31,
    "label": "calls",
    "to": 65
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 53,
    "label": "declares",
    "to": 5
  }, {
    "from": 53,
    "label": "declares",
    "to": 15
  }, {
    "from": 53,
    "label": "declares",
    "to": 17
  }, {
    "from": 53,
    "label": "declares",
    "to": 24
  }, {
    "from": 53,
    "label": "declares",
    "to": 28
  }, {
    "from": 53,
    "label": "declares",
    "to": 31
  }, {
    "from": 53,
    "label": "declares",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 71
  }, {
    "from": 1,
    "label": "contains",
    "to": 72
  }, {
    "from": 71,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 71,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 71,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 71,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 71,
    "label": "initializes",
    "to": 81
  }, {
    "from": 72,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "requires",
    "to": 62
  }, {
    "from": 72,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "requires",
    "to": 3
  }, {
    "from": 72,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "requires",
    "to": 2
  }, {
    "from": 72,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "requires",
    "to": 86
  }, {
    "from": 72,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "requires",
    "to": 4
  }, {
    "from": 72,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "requires",
    "to": 4
  }, {
    "from": 1,
    "label": "provides",
    "to": 89
  }, {
    "from": 79,
    "label": "represents",
    "to": 90
  }, {
    "from": 89,
    "label": "provides",
    "to": 90
  }, {
    "from": 79,
    "label": "represents",
    "to": 91
  }, {
    "from": 79,
    "label": "represents",
    "to": 92
  }, {
    "from": 79,
    "label": "represents",
    "to": 93
  }, {
    "from": 79,
    "label": "represents",
    "to": 94
  }, {
    "from": 79,
    "label": "represents",
    "to": 95
  }, {
    "from": 79,
    "label": "represents",
    "to": 96
  }, {
    "from": 79,
    "label": "represents",
    "to": 97
  }, {
    "from": 79,
    "label": "represents",
    "to": 98
  }, {
    "from": 79,
    "label": "represents",
    "to": 99
  }, {
    "from": 79,
    "label": "represents",
    "to": 100
  }, {
    "from": 79,
    "label": "represents",
    "to": 101
  }, {
    "from": 79,
    "label": "represents",
    "to": 102
  }, {
    "from": 79,
    "label": "represents",
    "to": 103
  }, {
    "from": 79,
    "label": "represents",
    "to": 104
  }, {
    "from": 79,
    "label": "represents",
    "to": 105
  }, {
    "from": 79,
    "label": "represents",
    "to": 106
  }, {
    "from": 79,
    "label": "represents",
    "to": 107
  }, {
    "from": 79,
    "label": "represents",
    "to": 108
  }, {
    "from": 79,
    "label": "represents",
    "to": 109
  }, {
    "from": 79,
    "label": "represents",
    "to": 110
  }, {
    "from": 79,
    "label": "represents",
    "to": 111
  }, {
    "from": 79,
    "label": "represents",
    "to": 112
  }, {
    "from": 113,
    "label": "requires",
    "to": 1
  }, {
    "from": 79,
    "label": "represents",
    "to": 114
  }, {
    "from": 79,
    "label": "contains",
    "to": 54
  }, {
    "from": 79,
    "label": "contains",
    "to": 55
  }, {
    "from": 79,
    "label": "contains",
    "to": 56
  }, {
    "from": 79,
    "label": "contains",
    "to": 57
  }, {
    "from": 79,
    "label": "contains",
    "to": 58
  }, {
    "from": 79,
    "label": "contains",
    "to": 60
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Core",
    "type": "module"
  }, {
    "id": 2,
    "text": "Protocols",
    "type": "module"
  }, {
    "id": 3,
    "text": "Request",
    "type": "module"
  }, {
    "id": 4,
    "text": "Spore",
    "type": "module"
  }, {
    "id": 5,
    "text": "local function _enable_if (self, cond, mw, args)\r\n    if not mw:match'^Spore%.Middleware%.' then\r\n        mw = 'Spore.Middleware.' .. mw\r\n    end\r\n    local m = require(mw)\r\n    assert(type(m.call) == 'function', mw .. \" without a function call\")\r\n    local f = function (req)\r\n        return m.call(args, req)\r\n    end\r\n    local t = self.middlewares; t[#t+1] = { cond = cond, code = f }\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "if not mw:match'^Spore%.Middleware%.' then\r\n        mw = 'Spore.Middleware.' .. mw\r\n    end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "mw = 'Spore.Middleware.' .. mw",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "local m = require(mw)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "assert(type(m.call) == 'function', mw .. \" without a function call\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "local f = function (req)\r\n        return m.call(args, req)\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "local t = self.middlewares",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "t[#t+1] = { cond = cond, code = f }",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function (req)\r\n        return m.call(args, req)\r\n    end",
    "type": "function"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function m:enable_if (cond, mw, args)\r\n    local checktype = require 'Spore'.checktype\r\n    checktype('enable_if', 2, cond, 'function')\r\n    checktype('enable_if', 3, mw, 'string')\r\n    args = args or {}\r\n    checktype('enable_if', 4, args, 'table')\r\n    return _enable_if(self, cond, mw, args)\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local checktype = require 'Spore'.checktype",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "checktype('enable_if', 2, cond, 'function')",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "checktype('enable_if', 3, mw, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "args = args or {}",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "checktype('enable_if', 4, args, 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function m:enable (mw, args)\r\n    local checktype = require 'Spore'.checktype\r\n    checktype('enable', 2, mw, 'string')\r\n    args = args or {}\r\n    checktype('enable', 3, args, 'table')\r\n    return _enable_if(self, function () return true end, mw, args)\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "checktype('enable', 2, mw, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "checktype('enable', 3, args, 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function m:reset_middlewares ()\r\n    self.middlewares = {}\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "self.middlewares = {}",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function m:http_request (env)\r\n    local spore = env.spore\r\n    local req = Request.new(env)\r\n    local callbacks = {}\r\n    local response\r\n    local middlewares = self.middlewares\r\n    for i = 1, #middlewares do\r\n        local mw = middlewares[i]\r\n        if mw.cond(req) then\r\n            local res = mw.code(req)\r\n            if type(res) == 'function' then\r\n                callbacks[#callbacks+1] = res\r\n            elseif res then\r\n                if res.status == 599 then\r\n                    return res\r\n                end\r\n                response = res\r\n                break\r\n            end\r\n        end\r\n    end\r\n\r\n    if response == nil then\r\n        req:finalize()\r\n        response = Protocols.request(req)\r\n    end\r\n\r\n    for i = #callbacks, 1, -1 do\r\n        local cb = callbacks[i]\r\n        response = cb(response)\r\n    end\r\n\r\n    return response\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local spore = env.spore",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "local req = Request.new(env)",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local callbacks = {}",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local response",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "local middlewares = self.middlewares",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "for i = 1, #middlewares do\r\n        local mw = middlewares[i]\r\n        if mw.cond(req) then\r\n            local res = mw.code(req)\r\n            if type(res) == 'function' then\r\n                callbacks[#callbacks+1] = res\r\n            elseif res then\r\n                if res.status == 599 then\r\n                    return res\r\n                end\r\n                response = res\r\n                break\r\n            end\r\n        end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 38,
    "text": "local mw = middlewares[i]",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if mw.cond(req) then\r\n            local res = mw.code(req)\r\n            if type(res) == 'function' then\r\n                callbacks[#callbacks+1] = res\r\n            elseif res then\r\n                if res.status == 599 then\r\n                    return res\r\n                end\r\n                response = res\r\n                break\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "local res = mw.code(req)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if type(res) == 'function' then\r\n                callbacks[#callbacks+1] = res\r\n            elseif res then\r\n                if res.status == 599 then\r\n                    return res\r\n                end\r\n                response = res\r\n                break\r\n            end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "callbacks[#callbacks+1] = res",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "if res.status == 599 then\r\n                    return res\r\n                end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "response = res",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "if response == nil then\r\n        req:finalize()\r\n        response = Protocols.request(req)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "req:finalize()",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "response = Protocols.request(req)",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "for i = #callbacks, 1, -1 do\r\n        local cb = callbacks[i]\r\n        response = cb(response)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 49,
    "text": "local cb = callbacks[i]",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "response = cb(response)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function () return true end",
    "type": "function"
  }, {
    "id": 53,
    "text": "",
    "type": "function container"
  }, {
    "id": 54,
    "text": "function m.new_from_discovery (api, opts)\r\n    opts = opts or {}\r\n    checktype('new_from_discovery', 2, opts, 'table')\r\n    if type(api) == 'string' then\r\n        local content = slurp(api)\r\n        return new_from_lua(convert(decode(content)), opts)\r\n    end\r\n    if type(api) == 'table' then\r\n        local discovery = new_from_lua {\r\n            base_url = 'https://www.googleapis.com/discovery/v1/',\r\n            methods = {\r\n                get = {\r\n                    path = 'apis/:api/:version/rest',\r\n                    method = 'GET',\r\n                    required_params = { 'api', 'version' },\r\n                    expected_status = { 200 },\r\n                },\r\n            },\r\n        }\r\n        discovery:enable 'Format.JSON'\r\n        local r = discovery:get(api)\r\n        return new_from_lua(convert(r.body), opts)\r\n    end\r\n    error(\"bad argument #1 to new_from_discovery (string or table expected, got \"\r\n          .. type(api) .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "function m.generate_nonce ()\r\n    return format('%08x', time())\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "function m.generate_timestamp ()\r\n    return tostring(time())\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "function m.generate_nonce ()\r\n    return digest('sha1', tostring(random()) .. 'random' .. tostring(time()), 'keyyyy')\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "function m.reset ()\r\n    collectgarbage 'collect'\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "local function request (req)\r\n    local spore = req.env.spore\r\n    local prot = protocol[spore.url_scheme]\r\n    assert(prot, \"not protocol \" .. spore.url_scheme)\r\n\r\n    local form_data = spore.form_data\r\n    if form_data then\r\n        local content, boundary = _form_data(form_data)\r\n        req.source = ltn12.source.string(content)\r\n        req.headers['content-length'] = content:len()\r\n        req.headers['content-type'] = 'multipart/form-data; boundary=' .. boundary\r\n    end\r\n\r\n    local payload = spore.payload\r\n    if payload then\r\n        if payload:sub(1, 1) == '@' then\r\n            local fname = payload:sub(2)\r\n            payload = slurp(fname)\r\n        end\r\n        req.source = ltn12.source.string(payload)\r\n        req.headers['content-length'] = payload:len()\r\n        req.headers['content-type'] = req.headers['content-type'] or 'application/x-www-form-urlencoded'\r\n    end\r\n\r\n    if req.method == 'POST' and not req.headers['content-length'] then\r\n        req.headers['content-length'] = 0\r\n    end\r\n\r\n    local t = {}\r\n    req.sink = ltn12.sink.table(t)\r\n\r\n    if spore.debug then\r\n        spore.debug:write(req.method, \" \", req.url, \"\\n\")\r\n        for k, v in pairs(req.headers) do\r\n            spore.debug:write(k, \": \", v, \"\\n\")\r\n        end\r\n    end\r\n    local r, status, headers, line = prot.request(req)\r\n    if spore.debug then\r\n        spore.debug:write(line or status, \"\\n\")\r\n    end\r\n    return {\r\n        request = req,\r\n        status = status,\r\n        headers = headers,\r\n        body = tconcat(t),\r\n    }\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "function m.new (env)\r\n    local obj = {\r\n        env = env,\r\n        redirect = m.redirect,\r\n        headers = {\r\n            ['user-agent'] = env.HTTP_USER_AGENT,\r\n        },\r\n    }\r\n    return setmetatable(obj, {\r\n        __index = m,\r\n    })\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "new",
    "type": "global function"
  }, {
    "id": 62,
    "text": "ltn12",
    "type": "module"
  }, {
    "id": 63,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 64,
    "text": "code",
    "type": "global function"
  }, {
    "id": 65,
    "text": "cb",
    "type": "global function"
  }, {
    "id": 66,
    "text": "call",
    "type": "global function"
  }, {
    "id": 67,
    "text": "cond",
    "type": "global function"
  }, {
    "id": 68,
    "text": "checktype",
    "type": "global function"
  }, {
    "id": 69,
    "text": "type",
    "type": "global function"
  }, {
    "id": 70,
    "text": "require",
    "type": "global function"
  }, {
    "id": 71,
    "text": "",
    "type": "variable container"
  }, {
    "id": 72,
    "text": "",
    "type": "require container"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "n/a"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 81,
    "text": "",
    "type": "global variable"
  }, {
    "id": 82,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 86,
    "text": "(mw)",
    "type": "module"
  }, {
    "id": 87,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "interface container"
  }, {
    "id": 90,
    "text": "",
    "type": "interface"
  }, {
    "id": 91,
    "text": "",
    "type": "interface"
  }, {
    "id": 92,
    "text": "",
    "type": "interface"
  }, {
    "id": 93,
    "text": "",
    "type": "interface"
  }, {
    "id": 94,
    "text": "",
    "type": "interface"
  }, {
    "id": 95,
    "text": "",
    "type": "interface"
  }, {
    "id": 96,
    "text": "",
    "type": "interface"
  }, {
    "id": 97,
    "text": "",
    "type": "interface"
  }, {
    "id": 98,
    "text": "",
    "type": "interface"
  }, {
    "id": 99,
    "text": "",
    "type": "interface"
  }, {
    "id": 100,
    "text": "",
    "type": "interface"
  }, {
    "id": 101,
    "text": "",
    "type": "interface"
  }, {
    "id": 102,
    "text": "",
    "type": "interface"
  }, {
    "id": 103,
    "text": "",
    "type": "interface"
  }, {
    "id": 104,
    "text": "",
    "type": "interface"
  }, {
    "id": 105,
    "text": "",
    "type": "interface"
  }, {
    "id": 106,
    "text": "",
    "type": "interface"
  }, {
    "id": 107,
    "text": "",
    "type": "interface"
  }, {
    "id": 108,
    "text": "",
    "type": "interface"
  }, {
    "id": 109,
    "text": "",
    "type": "interface"
  }, {
    "id": 110,
    "text": "",
    "type": "interface"
  }, {
    "id": 111,
    "text": "",
    "type": "interface"
  }, {
    "id": 112,
    "text": "",
    "type": "interface"
  }, {
    "id": 113,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "interface"
  } ]
}