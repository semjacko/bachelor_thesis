{
  "_filename": "Basic.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-spore/src/Spore/Middleware/Proxy/Basic.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "calls",
    "to": 45
  }, {
    "from": 1,
    "label": "contains",
    "to": 4
  }, {
    "from": 4,
    "label": "declares",
    "to": 3
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 30
  }, {
    "from": 22,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 22,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 22,
    "label": "has",
    "to": 36
  }, {
    "from": 9,
    "label": "calls",
    "to": 41
  }, {
    "from": 22,
    "label": "calls",
    "to": 41
  }, {
    "from": 9,
    "label": "calls",
    "to": 40
  }, {
    "from": 16,
    "label": "calls",
    "to": 9
  }, {
    "from": 9,
    "label": "calls",
    "to": 44
  }, {
    "from": 22,
    "label": "calls",
    "to": 43
  }, {
    "from": 22,
    "label": "calls",
    "to": 16
  }, {
    "from": 9,
    "label": "calls",
    "to": 39
  }, {
    "from": 4,
    "label": "calls",
    "to": 45
  }, {
    "from": 4,
    "label": "calls",
    "to": 45
  }, {
    "from": 4,
    "label": "calls",
    "to": 45
  }, {
    "from": 4,
    "label": "declares",
    "to": 9
  }, {
    "from": 4,
    "label": "declares",
    "to": 16
  }, {
    "from": 4,
    "label": "declares",
    "to": 22
  }, {
    "from": 1,
    "label": "contains",
    "to": 47
  }, {
    "from": 1,
    "label": "contains",
    "to": 48
  }, {
    "from": 47,
    "label": "initializes",
    "to": 49
  }, {
    "from": 47,
    "label": "initializes",
    "to": 50
  }, {
    "from": 48,
    "label": "initializes",
    "to": 51
  }, {
    "from": 1,
    "label": "provides",
    "to": 52
  }, {
    "from": 52,
    "label": "provides",
    "to": 53
  }, {
    "from": 1,
    "label": "contains",
    "to": 55
  }, {
    "from": 1,
    "label": "contains",
    "to": 56
  }, {
    "from": 55,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 55,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 55,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 55,
    "label": "initializes",
    "to": 63
  }, {
    "from": 56,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "requires",
    "to": 38
  }, {
    "from": 56,
    "label": "initializes",
    "to": 65
  }, {
    "from": 65,
    "label": "requires",
    "to": 42
  }, {
    "from": 56,
    "label": "initializes",
    "to": 66
  }, {
    "from": 66,
    "label": "requires",
    "to": 54
  }, {
    "from": 1,
    "label": "provides",
    "to": 67
  }, {
    "from": 46,
    "label": "represents",
    "to": 68
  }, {
    "from": 67,
    "label": "provides",
    "to": 68
  }, {
    "from": 59,
    "label": "contains",
    "to": 2
  }, {
    "from": 59,
    "label": "contains",
    "to": 5
  }, {
    "from": 59,
    "label": "contains",
    "to": 6
  }, {
    "from": 59,
    "label": "contains",
    "to": 7
  }, {
    "from": 59,
    "label": "contains",
    "to": 8
  }, {
    "from": 59,
    "label": "contains",
    "to": 37
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Basic",
    "type": "module"
  }, {
    "id": 2,
    "text": "function m.new_from_discovery (api, opts)\r\n    opts = opts or {}\r\n    checktype('new_from_discovery', 2, opts, 'table')\r\n    if type(api) == 'string' then\r\n        local content = slurp(api)\r\n        return new_from_lua(convert(decode(content)), opts)\r\n    end\r\n    if type(api) == 'table' then\r\n        local discovery = new_from_lua {\r\n            base_url = 'https://www.googleapis.com/discovery/v1/',\r\n            methods = {\r\n                get = {\r\n                    path = 'apis/:api/:version/rest',\r\n                    method = 'GET',\r\n                    required_params = { 'api', 'version' },\r\n                    expected_status = { 200 },\r\n                },\r\n            },\r\n        }\r\n        discovery:enable 'Format.JSON'\r\n        local r = discovery:get(api)\r\n        return new_from_lua(convert(r.body), opts)\r\n    end\r\n    error(\"bad argument #1 to new_from_discovery (string or table expected, got \"\r\n          .. type(api) .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function m:call (req)\r\n    if req.env.spore.authentication and self.username and self.password then\r\n        req.headers['authorization'] =\r\n            'Basic ' .. mime.b64(self.username .. ':' .. self.password)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "",
    "type": "function container"
  }, {
    "id": 5,
    "text": "function m.generate_nonce ()\r\n    return format('%08x', time())\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function m.generate_timestamp ()\r\n    return tostring(time())\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function m.generate_nonce ()\r\n    return digest('sha1', tostring(random()) .. 'random' .. tostring(time()), 'keyyyy')\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function m.reset ()\r\n    collectgarbage 'collect'\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local function _env_proxy (scheme)\r\n    local name = scheme:upper() .. '_PROXY'\r\n    local v = os.getenv(name)\r\n    assert(v, \"no \" .. name)\r\n    local proxy = url.parse(v)\r\n    return {\r\n        proxy = url.build{\r\n            scheme  = proxy.scheme,\r\n            host    = proxy.host,\r\n            port    = proxy.port,\r\n        },\r\n        userinfo    = proxy.userinfo,\r\n    }\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local name = scheme:upper() .. '_PROXY'",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local v = os.getenv(name)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "assert(v, \"no \" .. name)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "local proxy = url.parse(v)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function env_proxy (scheme)\r\n    local r = cache[scheme]\r\n    if not r then\r\n        r = _env_proxy(scheme)\r\n        cache[scheme] = r\r\n    end\r\n    return r\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local r = cache[scheme]",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if not r then\r\n        r = _env_proxy(scheme)\r\n        cache[scheme] = r\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "r = _env_proxy(scheme)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "cache[scheme] = r",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function m:call (req)\r\n    local env = req.env\r\n    if not self.proxy then\r\n        self = env_proxy(env.spore.url_scheme)\r\n    end\r\n    req.headers['host'] = env.SERVER_NAME\r\n\r\n    local proxy = url.parse(self.proxy)\r\n    env.SERVER_NAME = proxy.host\r\n    env.SERVER_PORT = proxy.port\r\n\r\n    local userinfo\r\n    if self.userinfo then\r\n        userinfo = self.userinfo\r\n    elseif self.username and self.password then\r\n        userinfo = self.username .. ':' .. self.password\r\n    end\r\n    if userinfo then\r\n        req.headers['proxy-authorization'] = 'Basic ' .. mime.b64(userinfo)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local env = req.env",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if not self.proxy then\r\n        self = env_proxy(env.spore.url_scheme)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "self = env_proxy(env.spore.url_scheme)",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "req.headers['host'] = env.SERVER_NAME",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "local proxy = url.parse(self.proxy)",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "env.SERVER_NAME = proxy.host",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "env.SERVER_PORT = proxy.port",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "local userinfo",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "if self.userinfo then\r\n        userinfo = self.userinfo\r\n    elseif self.username and self.password then\r\n        userinfo = self.username .. ':' .. self.password\r\n    end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "userinfo = self.userinfo",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "userinfo = self.username .. ':' .. self.password",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "if userinfo then\r\n        req.headers['proxy-authorization'] = 'Basic ' .. mime.b64(userinfo)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "req.headers['proxy-authorization'] = 'Basic ' .. mime.b64(userinfo)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function m.new (env)\r\n    local obj = {\r\n        env = env,\r\n        redirect = m.redirect,\r\n        headers = {\r\n            ['user-agent'] = env.HTTP_USER_AGENT,\r\n        },\r\n    }\r\n    return setmetatable(obj, {\r\n        __index = m,\r\n    })\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "os",
    "type": "module"
  }, {
    "id": 39,
    "text": "getenv",
    "type": "global function"
  }, {
    "id": 40,
    "text": "build",
    "type": "global function"
  }, {
    "id": 41,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 42,
    "text": "mime",
    "type": "module"
  }, {
    "id": 43,
    "text": "b64",
    "type": "global function"
  }, {
    "id": 44,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 45,
    "text": "require",
    "type": "global function"
  }, {
    "id": 46,
    "text": "",
    "type": "local variable"
  }, {
    "id": 47,
    "text": "",
    "type": "variable container"
  }, {
    "id": 48,
    "text": "",
    "type": "require container"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "global variable"
  }, {
    "id": 51,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "interface container"
  }, {
    "id": 53,
    "text": "",
    "type": "interface"
  }, {
    "id": 54,
    "text": "url",
    "type": "module"
  }, {
    "id": 55,
    "text": "",
    "type": "variable container"
  }, {
    "id": 56,
    "text": "",
    "type": "require container"
  }, {
    "id": 57,
    "text": "",
    "type": "local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "n/a"
  }, {
    "id": 59,
    "text": "",
    "type": "local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 61,
    "text": "",
    "type": "local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 63,
    "text": "",
    "type": "global variable"
  }, {
    "id": 64,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "interface container"
  }, {
    "id": 68,
    "text": "",
    "type": "interface"
  } ]
}