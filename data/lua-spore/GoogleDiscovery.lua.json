{
  "_filename": "GoogleDiscovery.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-spore/src/Spore/GoogleDiscovery.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 4,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 14,
    "label": "has",
    "to": 24
  }, {
    "from": 4,
    "label": "has",
    "to": 25
  }, {
    "from": 4,
    "label": "has",
    "to": 26
  }, {
    "from": 4,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 14,
    "label": "has",
    "to": 24
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 26
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 30,
    "label": "has",
    "to": 26
  }, {
    "from": 30,
    "label": "has",
    "to": 39
  }, {
    "from": 30,
    "label": "has",
    "to": 40
  }, {
    "from": 30,
    "label": "calls",
    "to": 51
  }, {
    "from": 4,
    "label": "calls",
    "to": 52
  }, {
    "from": 4,
    "label": "calls",
    "to": 52
  }, {
    "from": 4,
    "label": "calls",
    "to": 52
  }, {
    "from": 30,
    "label": "calls",
    "to": 48
  }, {
    "from": 30,
    "label": "calls",
    "to": 53
  }, {
    "from": 30,
    "label": "calls",
    "to": 49
  }, {
    "from": 30,
    "label": "calls",
    "to": 49
  }, {
    "from": 30,
    "label": "calls",
    "to": 49
  }, {
    "from": 4,
    "label": "calls",
    "to": 28
  }, {
    "from": 4,
    "label": "calls",
    "to": 28
  }, {
    "from": 30,
    "label": "calls",
    "to": 54
  }, {
    "from": 30,
    "label": "calls",
    "to": 54
  }, {
    "from": 30,
    "label": "calls",
    "to": 54
  }, {
    "from": 41,
    "label": "calls",
    "to": 55
  }, {
    "from": 41,
    "label": "calls",
    "to": 55
  }, {
    "from": 41,
    "label": "calls",
    "to": 55
  }, {
    "from": 41,
    "label": "calls",
    "to": 55
  }, {
    "from": 30,
    "label": "calls",
    "to": 50
  }, {
    "from": 30,
    "label": "calls",
    "to": 4
  }, {
    "from": 30,
    "label": "calls",
    "to": 4
  }, {
    "from": 1,
    "label": "contains",
    "to": 41
  }, {
    "from": 41,
    "label": "declares",
    "to": 4
  }, {
    "from": 41,
    "label": "declares",
    "to": 28
  }, {
    "from": 41,
    "label": "declares",
    "to": 30
  }, {
    "from": 1,
    "label": "contains",
    "to": 57
  }, {
    "from": 1,
    "label": "contains",
    "to": 58
  }, {
    "from": 57,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 57,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 57,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "assigns",
    "to": 64
  }, {
    "from": 57,
    "label": "initializes",
    "to": 65
  }, {
    "from": 65,
    "label": "assigns",
    "to": 66
  }, {
    "from": 57,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 68,
    "label": "assigns",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 57,
    "label": "initializes",
    "to": 73
  }, {
    "from": 57,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 58,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "requires",
    "to": 3
  }, {
    "from": 58,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "requires",
    "to": 3
  }, {
    "from": 58,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "requires",
    "to": 2
  }, {
    "from": 58,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "requires",
    "to": 47
  }, {
    "from": 1,
    "label": "provides",
    "to": 80
  }, {
    "from": 56,
    "label": "represents",
    "to": 81
  }, {
    "from": 80,
    "label": "provides",
    "to": 81
  }, {
    "from": 56,
    "label": "contains",
    "to": 30
  }, {
    "from": 65,
    "label": "contains",
    "to": 30
  }, {
    "from": 82,
    "label": "contains",
    "to": 30
  }, {
    "from": 83,
    "label": "contains",
    "to": 30
  }, {
    "from": 84,
    "label": "contains",
    "to": 30
  }, {
    "from": 85,
    "label": "contains",
    "to": 30
  }, {
    "from": 86,
    "label": "contains",
    "to": 30
  }, {
    "from": 87,
    "label": "contains",
    "to": 30
  }, {
    "from": 88,
    "label": "contains",
    "to": 30
  }, {
    "from": 89,
    "label": "contains",
    "to": 30
  }, {
    "from": 90,
    "label": "contains",
    "to": 30
  }, {
    "from": 91,
    "label": "contains",
    "to": 30
  }, {
    "from": 92,
    "label": "contains",
    "to": 30
  }, {
    "from": 93,
    "label": "contains",
    "to": 30
  }, {
    "from": 94,
    "label": "contains",
    "to": 30
  }, {
    "from": 95,
    "label": "contains",
    "to": 30
  }, {
    "from": 96,
    "label": "contains",
    "to": 30
  }, {
    "from": 97,
    "label": "contains",
    "to": 30
  }, {
    "from": 98,
    "label": "contains",
    "to": 30
  }, {
    "from": 99,
    "label": "contains",
    "to": 30
  }, {
    "from": 100,
    "label": "contains",
    "to": 30
  }, {
    "from": 101,
    "label": "contains",
    "to": 30
  }, {
    "from": 102,
    "label": "contains",
    "to": 30
  }, {
    "from": 103,
    "label": "contains",
    "to": 30
  }, {
    "from": 65,
    "label": "contains",
    "to": 42
  }, {
    "from": 65,
    "label": "contains",
    "to": 43
  }, {
    "from": 65,
    "label": "contains",
    "to": 44
  }, {
    "from": 65,
    "label": "contains",
    "to": 45
  }, {
    "from": 65,
    "label": "contains",
    "to": 46
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "GoogleDiscovery",
    "type": "module"
  }, {
    "id": 2,
    "text": "Protocols",
    "type": "module"
  }, {
    "id": 3,
    "text": "Spore",
    "type": "module"
  }, {
    "id": 4,
    "text": "local function convert (gdoc)\r\n    local meta\r\n    local documentation = gdoc.documentationLink\r\n    if documentation then\r\n        meta = {\r\n            documentation = documentation,\r\n        }\r\n    end\r\n    local spore = {\r\n        name = gdoc.title,\r\n        version = gdoc.version,\r\n        description = gdoc.description,\r\n        base_url = 'https://www.googleapis.com' .. gdoc.basePath,\r\n        methods = {},\r\n        meta = meta,\r\n    }\r\n\r\n    local function populate (resources)\r\n        for _, resource in pairs(resources) do\r\n            if not resource.methods then\r\n                populate(resource)\r\n            else\r\n                for _, meth in pairs(resource.methods) do\r\n                    local methname = meth.id:gsub('%w+%.', '', 1):gsub('%.', '_')\r\n                    local required_params\r\n                    local optional_params = { 'alt', 'fields', 'key', 'prettyPrint', 'userIp' }\r\n                    for pname, param in pairs(meth.parameters or {}) do\r\n                        if param.required then\r\n                            if not required_params then\r\n                                required_params = {}\r\n                            end\r\n                            required_params[#required_params+1] = pname\r\n                        else\r\n                            optional_params[#optional_params+1] = pname\r\n                        end\r\n                    end\r\n                    spore.methods[methname] = {\r\n                        path = meth.path:gsub('{([%w_]+)}', ':%1'),\r\n                        method = meth.httpMethod,\r\n                        required_params = required_params,\r\n                        optional_params = optional_params,\r\n                        required_payload = (meth.httpMethod == 'POST')\r\n                                        or (meth.httpMethod == 'PUT')\r\n                                        or nil,\r\n                        expected_status = expected_status[meth.httpMethod],\r\n                    }\r\n                end\r\n            end\r\n        end\r\n    end  -- populate\r\n\r\n    populate(gdoc.resources)\r\n    return spore\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local meta",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local documentation = gdoc.documentationLink",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "if documentation then\r\n        meta = {\r\n            documentation = documentation,\r\n        }\r\n    end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "meta = {\r\n            documentation = documentation,\r\n        }",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "local spore = {\r\n        name = gdoc.title,\r\n        version = gdoc.version,\r\n        description = gdoc.description,\r\n        base_url = 'https://www.googleapis.com' .. gdoc.basePath,\r\n        methods = {},\r\n        meta = meta,\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local function populate (resources)\r\n        for _, resource in pairs(resources) do\r\n            if not resource.methods then\r\n                populate(resource)\r\n            else\r\n                for _, meth in pairs(resource.methods) do\r\n                    local methname = meth.id:gsub('%w+%.', '', 1):gsub('%.', '_')\r\n                    local required_params\r\n                    local optional_params = { 'alt', 'fields', 'key', 'prettyPrint', 'userIp' }\r\n                    for pname, param in pairs(meth.parameters or {}) do\r\n                        if param.required then\r\n                            if not required_params then\r\n                                required_params = {}\r\n                            end\r\n                            required_params[#required_params+1] = pname\r\n                        else\r\n                            optional_params[#optional_params+1] = pname\r\n                        end\r\n                    end\r\n                    spore.methods[methname] = {\r\n                        path = meth.path:gsub('{([%w_]+)}', ':%1'),\r\n                        method = meth.httpMethod,\r\n                        required_params = required_params,\r\n                        optional_params = optional_params,\r\n                        required_payload = (meth.httpMethod == 'POST')\r\n                                        or (meth.httpMethod == 'PUT')\r\n                                        or nil,\r\n                        expected_status = expected_status[meth.httpMethod],\r\n                    }\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 11,
    "text": "for _, resource in pairs(resources) do\r\n            if not resource.methods then\r\n                populate(resource)\r\n            else\r\n                for _, meth in pairs(resource.methods) do\r\n                    local methname = meth.id:gsub('%w+%.', '', 1):gsub('%.', '_')\r\n                    local required_params\r\n                    local optional_params = { 'alt', 'fields', 'key', 'prettyPrint', 'userIp' }\r\n                    for pname, param in pairs(meth.parameters or {}) do\r\n                        if param.required then\r\n                            if not required_params then\r\n                                required_params = {}\r\n                            end\r\n                            required_params[#required_params+1] = pname\r\n                        else\r\n                            optional_params[#optional_params+1] = pname\r\n                        end\r\n                    end\r\n                    spore.methods[methname] = {\r\n                        path = meth.path:gsub('{([%w_]+)}', ':%1'),\r\n                        method = meth.httpMethod,\r\n                        required_params = required_params,\r\n                        optional_params = optional_params,\r\n                        required_payload = (meth.httpMethod == 'POST')\r\n                                        or (meth.httpMethod == 'PUT')\r\n                                        or nil,\r\n                        expected_status = expected_status[meth.httpMethod],\r\n                    }\r\n                end\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 12,
    "text": "if not resource.methods then\r\n                populate(resource)\r\n            else\r\n                for _, meth in pairs(resource.methods) do\r\n                    local methname = meth.id:gsub('%w+%.', '', 1):gsub('%.', '_')\r\n                    local required_params\r\n                    local optional_params = { 'alt', 'fields', 'key', 'prettyPrint', 'userIp' }\r\n                    for pname, param in pairs(meth.parameters or {}) do\r\n                        if param.required then\r\n                            if not required_params then\r\n                                required_params = {}\r\n                            end\r\n                            required_params[#required_params+1] = pname\r\n                        else\r\n                            optional_params[#optional_params+1] = pname\r\n                        end\r\n                    end\r\n                    spore.methods[methname] = {\r\n                        path = meth.path:gsub('{([%w_]+)}', ':%1'),\r\n                        method = meth.httpMethod,\r\n                        required_params = required_params,\r\n                        optional_params = optional_params,\r\n                        required_payload = (meth.httpMethod == 'POST')\r\n                                        or (meth.httpMethod == 'PUT')\r\n                                        or nil,\r\n                        expected_status = expected_status[meth.httpMethod],\r\n                    }\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "populate(resource)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "for _, meth in pairs(resource.methods) do\r\n                    local methname = meth.id:gsub('%w+%.', '', 1):gsub('%.', '_')\r\n                    local required_params\r\n                    local optional_params = { 'alt', 'fields', 'key', 'prettyPrint', 'userIp' }\r\n                    for pname, param in pairs(meth.parameters or {}) do\r\n                        if param.required then\r\n                            if not required_params then\r\n                                required_params = {}\r\n                            end\r\n                            required_params[#required_params+1] = pname\r\n                        else\r\n                            optional_params[#optional_params+1] = pname\r\n                        end\r\n                    end\r\n                    spore.methods[methname] = {\r\n                        path = meth.path:gsub('{([%w_]+)}', ':%1'),\r\n                        method = meth.httpMethod,\r\n                        required_params = required_params,\r\n                        optional_params = optional_params,\r\n                        required_payload = (meth.httpMethod == 'POST')\r\n                                        or (meth.httpMethod == 'PUT')\r\n                                        or nil,\r\n                        expected_status = expected_status[meth.httpMethod],\r\n                    }\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 15,
    "text": "local methname = meth.id:gsub('%w+%.', '', 1):gsub('%.', '_')",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local required_params",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local optional_params = { 'alt', 'fields', 'key', 'prettyPrint', 'userIp' }",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "for pname, param in pairs(meth.parameters or {}) do\r\n                        if param.required then\r\n                            if not required_params then\r\n                                required_params = {}\r\n                            end\r\n                            required_params[#required_params+1] = pname\r\n                        else\r\n                            optional_params[#optional_params+1] = pname\r\n                        end\r\n                    end",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "if param.required then\r\n                            if not required_params then\r\n                                required_params = {}\r\n                            end\r\n                            required_params[#required_params+1] = pname\r\n                        else\r\n                            optional_params[#optional_params+1] = pname\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "if not required_params then\r\n                                required_params = {}\r\n                            end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "required_params = {}",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "required_params[#required_params+1] = pname",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "optional_params[#optional_params+1] = pname",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "spore.methods[methname] = {\r\n                        path = meth.path:gsub('{([%w_]+)}', ':%1'),\r\n                        method = meth.httpMethod,\r\n                        required_params = required_params,\r\n                        optional_params = optional_params,\r\n                        required_payload = (meth.httpMethod == 'POST')\r\n                                        or (meth.httpMethod == 'PUT')\r\n                                        or nil,\r\n                        expected_status = expected_status[meth.httpMethod],\r\n                    }",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "populate(gdoc.resources)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function populate (resources)\r\n        for _, resource in pairs(resources) do\r\n            if not resource.methods then\r\n                populate(resource)\r\n            else\r\n                for _, meth in pairs(resource.methods) do\r\n                    local methname = meth.id:gsub('%w+%.', '', 1):gsub('%.', '_')\r\n                    local required_params\r\n                    local optional_params = { 'alt', 'fields', 'key', 'prettyPrint', 'userIp' }\r\n                    for pname, param in pairs(meth.parameters or {}) do\r\n                        if param.required then\r\n                            if not required_params then\r\n                                required_params = {}\r\n                            end\r\n                            required_params[#required_params+1] = pname\r\n                        else\r\n                            optional_params[#optional_params+1] = pname\r\n                        end\r\n                    end\r\n                    spore.methods[methname] = {\r\n                        path = meth.path:gsub('{([%w_]+)}', ':%1'),\r\n                        method = meth.httpMethod,\r\n                        required_params = required_params,\r\n                        optional_params = optional_params,\r\n                        required_payload = (meth.httpMethod == 'POST')\r\n                                        or (meth.httpMethod == 'PUT')\r\n                                        or nil,\r\n                        expected_status = expected_status[meth.httpMethod],\r\n                    }\r\n                end\r\n            end\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function m.new_from_discovery (api, opts)\r\n    opts = opts or {}\r\n    checktype('new_from_discovery', 2, opts, 'table')\r\n    if type(api) == 'string' then\r\n        local content = slurp(api)\r\n        return new_from_lua(convert(decode(content)), opts)\r\n    end\r\n    if type(api) == 'table' then\r\n        local discovery = new_from_lua {\r\n            base_url = 'https://www.googleapis.com/discovery/v1/',\r\n            methods = {\r\n                get = {\r\n                    path = 'apis/:api/:version/rest',\r\n                    method = 'GET',\r\n                    required_params = { 'api', 'version' },\r\n                    expected_status = { 200 },\r\n                },\r\n            },\r\n        }\r\n        discovery:enable 'Format.JSON'\r\n        local r = discovery:get(api)\r\n        return new_from_lua(convert(r.body), opts)\r\n    end\r\n    error(\"bad argument #1 to new_from_discovery (string or table expected, got \"\r\n          .. type(api) .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "opts = opts or {}",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "checktype('new_from_discovery', 2, opts, 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "if type(api) == 'string' then\r\n        local content = slurp(api)\r\n        return new_from_lua(convert(decode(content)), opts)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "local content = slurp(api)",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if type(api) == 'table' then\r\n        local discovery = new_from_lua {\r\n            base_url = 'https://www.googleapis.com/discovery/v1/',\r\n            methods = {\r\n                get = {\r\n                    path = 'apis/:api/:version/rest',\r\n                    method = 'GET',\r\n                    required_params = { 'api', 'version' },\r\n                    expected_status = { 200 },\r\n                },\r\n            },\r\n        }\r\n        discovery:enable 'Format.JSON'\r\n        local r = discovery:get(api)\r\n        return new_from_lua(convert(r.body), opts)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "local discovery = new_from_lua {\r\n            base_url = 'https://www.googleapis.com/discovery/v1/',\r\n            methods = {\r\n                get = {\r\n                    path = 'apis/:api/:version/rest',\r\n                    method = 'GET',\r\n                    required_params = { 'api', 'version' },\r\n                    expected_status = { 200 },\r\n                },\r\n            },\r\n        }",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "discovery:enable 'Format.JSON'",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "local r = discovery:get(api)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "error(\"bad argument #1 to new_from_discovery (string or table expected, got \"\r\n          .. type(api) .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "",
    "type": "function container"
  }, {
    "id": 42,
    "text": "function m.generate_nonce ()\r\n    return format('%08x', time())\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "function m.generate_timestamp ()\r\n    return tostring(time())\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "function m.generate_nonce ()\r\n    return digest('sha1', tostring(random()) .. 'random' .. tostring(time()), 'keyyyy')\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "function m.reset ()\r\n    collectgarbage 'collect'\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "function m.new (env)\r\n    local obj = {\r\n        env = env,\r\n        redirect = m.redirect,\r\n        headers = {\r\n            ['user-agent'] = env.HTTP_USER_AGENT,\r\n        },\r\n    }\r\n    return setmetatable(obj, {\r\n        __index = m,\r\n    })\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "json",
    "type": "module"
  }, {
    "id": 48,
    "text": "slurp",
    "type": "global function"
  }, {
    "id": 49,
    "text": "new_from_lua",
    "type": "global function"
  }, {
    "id": 50,
    "text": "error",
    "type": "global function"
  }, {
    "id": 51,
    "text": "decode",
    "type": "global function"
  }, {
    "id": 52,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 53,
    "text": "checktype",
    "type": "global function"
  }, {
    "id": 54,
    "text": "type",
    "type": "global function"
  }, {
    "id": 55,
    "text": "require",
    "type": "global function"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "variable container"
  }, {
    "id": 58,
    "text": "",
    "type": "require container"
  }, {
    "id": 59,
    "text": "",
    "type": "local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "n/a"
  }, {
    "id": 61,
    "text": "",
    "type": "local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "n/a"
  }, {
    "id": 63,
    "text": "",
    "type": "local variable"
  }, {
    "id": 64,
    "text": "",
    "type": "n/a"
  }, {
    "id": 65,
    "text": "",
    "type": "local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 67,
    "text": "",
    "type": "local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 69,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 70,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 71,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 72,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 73,
    "text": "",
    "type": "global variable"
  }, {
    "id": 74,
    "text": "",
    "type": "global variable"
  }, {
    "id": 75,
    "text": "",
    "type": "n/a"
  }, {
    "id": 76,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "interface container"
  }, {
    "id": 81,
    "text": "",
    "type": "interface"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  } ]
}