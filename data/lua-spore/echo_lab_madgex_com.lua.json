{
  "_filename": "echo_lab_madgex_com.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-spore/eg/echo_lab_madgex_com.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "calls",
    "to": 6
  }, {
    "from": 3,
    "label": "calls",
    "to": 6
  }, {
    "from": 3,
    "label": "calls",
    "to": 6
  }, {
    "from": 3,
    "label": "calls",
    "to": 6
  }, {
    "from": 3,
    "label": "calls",
    "to": 6
  }, {
    "from": 3,
    "label": "calls",
    "to": 6
  }, {
    "from": 3,
    "label": "calls",
    "to": 7
  }, {
    "from": 3,
    "label": "calls",
    "to": 4
  }, {
    "from": 3,
    "label": "calls",
    "to": 5
  }, {
    "from": 3,
    "label": "calls",
    "to": 5
  }, {
    "from": 3,
    "label": "calls",
    "to": 5
  }, {
    "from": 3,
    "label": "calls",
    "to": 5
  }, {
    "from": 3,
    "label": "calls",
    "to": 5
  }, {
    "from": 3,
    "label": "calls",
    "to": 5
  }, {
    "from": 3,
    "label": "calls",
    "to": 5
  }, {
    "from": 3,
    "label": "calls",
    "to": 5
  }, {
    "from": 1,
    "label": "contains",
    "to": 3
  }, {
    "from": 1,
    "label": "contains",
    "to": 8
  }, {
    "from": 1,
    "label": "contains",
    "to": 9
  }, {
    "from": 9,
    "label": "initializes",
    "to": 10
  }, {
    "from": 10,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "echo_lab_madgex_com",
    "type": "module"
  }, {
    "id": 2,
    "text": "Spore",
    "type": "module"
  }, {
    "id": 3,
    "text": "",
    "type": "function container"
  }, {
    "id": 4,
    "text": "local function new_from_string (...)\r\n    local args = {...}\r\n    local opts = {}\r\n    local nb\r\n    for i = 1, #args do\r\n        local arg = args[i]\r\n        if i > 1 and type(arg) == 'table' then\r\n            opts = arg\r\n            break\r\n        end\r\n        checktype('new_from_string', i, arg, 'string')\r\n        nb = i\r\n    end\r\n\r\n    local obj = new()\r\n    local json = require 'json'\r\n    for i = 1, nb do\r\n        local spec = json.decode(args[i])\r\n        populate(obj, spec, opts)\r\n    end\r\n    return obj\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 6,
    "text": "print",
    "type": "global function"
  }, {
    "id": 7,
    "text": "require",
    "type": "global function"
  }, {
    "id": 8,
    "text": "",
    "type": "variable container"
  }, {
    "id": 9,
    "text": "",
    "type": "require container"
  }, {
    "id": 10,
    "text": "",
    "type": "require local variable"
  } ]
}