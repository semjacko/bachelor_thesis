{
  "_filename": "Protocols.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-spore/src/Spore/Protocols.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 42
  }, {
    "from": 5,
    "label": "calls",
    "to": 42
  }, {
    "from": 9,
    "label": "calls",
    "to": 42
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 10,
    "label": "has",
    "to": 19
  }, {
    "from": 10,
    "label": "has",
    "to": 19
  }, {
    "from": 10,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 22
  }, {
    "from": 27,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 27,
    "label": "has",
    "to": 37
  }, {
    "from": 27,
    "label": "has",
    "to": 38
  }, {
    "from": 27,
    "label": "has",
    "to": 37
  }, {
    "from": 27,
    "label": "has",
    "to": 39
  }, {
    "from": 27,
    "label": "has",
    "to": 19
  }, {
    "from": 27,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 42,
    "label": "has",
    "to": 52
  }, {
    "from": 42,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 42,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 42,
    "label": "has",
    "to": 22
  }, {
    "from": 42,
    "label": "has",
    "to": 62
  }, {
    "from": 42,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 42,
    "label": "has",
    "to": 67
  }, {
    "from": 42,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 42,
    "label": "has",
    "to": 19
  }, {
    "from": 42,
    "label": "has",
    "to": 70
  }, {
    "from": 10,
    "label": "calls",
    "to": 87
  }, {
    "from": 10,
    "label": "calls",
    "to": 87
  }, {
    "from": 42,
    "label": "calls",
    "to": 87
  }, {
    "from": 27,
    "label": "calls",
    "to": 93
  }, {
    "from": 42,
    "label": "calls",
    "to": 93
  }, {
    "from": 21,
    "label": "calls",
    "to": 82
  }, {
    "from": 10,
    "label": "calls",
    "to": 76
  }, {
    "from": 10,
    "label": "calls",
    "to": 84
  }, {
    "from": 27,
    "label": "calls",
    "to": 89
  }, {
    "from": 42,
    "label": "calls",
    "to": 89
  }, {
    "from": 42,
    "label": "calls",
    "to": 81
  }, {
    "from": 42,
    "label": "calls",
    "to": 81
  }, {
    "from": 27,
    "label": "calls",
    "to": 21
  }, {
    "from": 71,
    "label": "calls",
    "to": 80
  }, {
    "from": 42,
    "label": "calls",
    "to": 27
  }, {
    "from": 71,
    "label": "calls",
    "to": 92
  }, {
    "from": 27,
    "label": "calls",
    "to": 10
  }, {
    "from": 42,
    "label": "calls",
    "to": 10
  }, {
    "from": 71,
    "label": "calls",
    "to": 88
  }, {
    "from": 21,
    "label": "calls",
    "to": 78
  }, {
    "from": 10,
    "label": "calls",
    "to": 94
  }, {
    "from": 42,
    "label": "calls",
    "to": 74
  }, {
    "from": 21,
    "label": "calls",
    "to": 86
  }, {
    "from": 71,
    "label": "calls",
    "to": 95
  }, {
    "from": 71,
    "label": "calls",
    "to": 95
  }, {
    "from": 71,
    "label": "calls",
    "to": 95
  }, {
    "from": 71,
    "label": "calls",
    "to": 95
  }, {
    "from": 71,
    "label": "calls",
    "to": 95
  }, {
    "from": 71,
    "label": "calls",
    "to": 95
  }, {
    "from": 71,
    "label": "calls",
    "to": 95
  }, {
    "from": 71,
    "label": "calls",
    "to": 95
  }, {
    "from": 71,
    "label": "calls",
    "to": 95
  }, {
    "from": 10,
    "label": "calls",
    "to": 95
  }, {
    "from": 21,
    "label": "calls",
    "to": 91
  }, {
    "from": 42,
    "label": "calls",
    "to": 90
  }, {
    "from": 1,
    "label": "contains",
    "to": 71
  }, {
    "from": 71,
    "label": "declares",
    "to": 10
  }, {
    "from": 71,
    "label": "declares",
    "to": 21
  }, {
    "from": 71,
    "label": "declares",
    "to": 27
  }, {
    "from": 71,
    "label": "declares",
    "to": 42
  }, {
    "from": 97,
    "label": "requires",
    "to": 1
  }, {
    "from": 98,
    "label": "requires",
    "to": 1
  }, {
    "from": 99,
    "label": "requires",
    "to": 1
  }, {
    "from": 100,
    "label": "requires",
    "to": 1
  }, {
    "from": 102,
    "label": "requires",
    "to": 1
  }, {
    "from": 103,
    "label": "requires",
    "to": 1
  }, {
    "from": 104,
    "label": "requires",
    "to": 1
  }, {
    "from": 105,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 106
  }, {
    "from": 1,
    "label": "contains",
    "to": 107
  }, {
    "from": 106,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 106,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 106,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 106,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 106,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  }, {
    "from": 106,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "assigns",
    "to": 119
  }, {
    "from": 106,
    "label": "initializes",
    "to": 120
  }, {
    "from": 106,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "assigns",
    "to": 122
  }, {
    "from": 122,
    "label": "assigns",
    "to": 123
  }, {
    "from": 123,
    "label": "assigns",
    "to": 124
  }, {
    "from": 122,
    "label": "assigns",
    "to": 125
  }, {
    "from": 125,
    "label": "assigns",
    "to": 126
  }, {
    "from": 106,
    "label": "initializes",
    "to": 127
  }, {
    "from": 106,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 106,
    "label": "initializes",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 107,
    "label": "initializes",
    "to": 132
  }, {
    "from": 132,
    "label": "requires",
    "to": 83
  }, {
    "from": 107,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "requires",
    "to": 75
  }, {
    "from": 107,
    "label": "initializes",
    "to": 134
  }, {
    "from": 134,
    "label": "requires",
    "to": 79
  }, {
    "from": 107,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "requires",
    "to": 77
  }, {
    "from": 107,
    "label": "initializes",
    "to": 136
  }, {
    "from": 136,
    "label": "requires",
    "to": 73
  }, {
    "from": 107,
    "label": "initializes",
    "to": 137
  }, {
    "from": 137,
    "label": "requires",
    "to": 85
  }, {
    "from": 107,
    "label": "initializes",
    "to": 138
  }, {
    "from": 138,
    "label": "requires",
    "to": 101
  }, {
    "from": 107,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "requires",
    "to": 83
  }, {
    "from": 1,
    "label": "provides",
    "to": 140
  }, {
    "from": 96,
    "label": "represents",
    "to": 141
  }, {
    "from": 140,
    "label": "provides",
    "to": 141
  }, {
    "from": 142,
    "label": "requires",
    "to": 1
  }, {
    "from": 116,
    "label": "contains",
    "to": 3
  }, {
    "from": 116,
    "label": "contains",
    "to": 4
  }, {
    "from": 116,
    "label": "contains",
    "to": 6
  }, {
    "from": 116,
    "label": "contains",
    "to": 7
  }, {
    "from": 116,
    "label": "contains",
    "to": 8
  }, {
    "from": 116,
    "label": "contains",
    "to": 72
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Protocols",
    "type": "module"
  }, {
    "id": 2,
    "text": "function m:http_request (env)\r\n    local spore = env.spore\r\n    local req = Request.new(env)\r\n    local callbacks = {}\r\n    local response\r\n    local middlewares = self.middlewares\r\n    for i = 1, #middlewares do\r\n        local mw = middlewares[i]\r\n        if mw.cond(req) then\r\n            local res = mw.code(req)\r\n            if type(res) == 'function' then\r\n                callbacks[#callbacks+1] = res\r\n            elseif res then\r\n                if res.status == 599 then\r\n                    return res\r\n                end\r\n                response = res\r\n                break\r\n            end\r\n        end\r\n    end\r\n\r\n    if response == nil then\r\n        req:finalize()\r\n        response = Protocols.request(req)\r\n    end\r\n\r\n    for i = #callbacks, 1, -1 do\r\n        local cb = callbacks[i]\r\n        response = cb(response)\r\n    end\r\n\r\n    return response\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function m.new_from_discovery (api, opts)\r\n    opts = opts or {}\r\n    checktype('new_from_discovery', 2, opts, 'table')\r\n    if type(api) == 'string' then\r\n        local content = slurp(api)\r\n        return new_from_lua(convert(decode(content)), opts)\r\n    end\r\n    if type(api) == 'table' then\r\n        local discovery = new_from_lua {\r\n            base_url = 'https://www.googleapis.com/discovery/v1/',\r\n            methods = {\r\n                get = {\r\n                    path = 'apis/:api/:version/rest',\r\n                    method = 'GET',\r\n                    required_params = { 'api', 'version' },\r\n                    expected_status = { 200 },\r\n                },\r\n            },\r\n        }\r\n        discovery:enable 'Format.JSON'\r\n        local r = discovery:get(api)\r\n        return new_from_lua(convert(r.body), opts)\r\n    end\r\n    error(\"bad argument #1 to new_from_discovery (string or table expected, got \"\r\n          .. type(api) .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function m.generate_nonce ()\r\n    return format('%08x', time())\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function m:call (req)\r\n    local function add_header ()\r\n        self.nc = self.nc + 1\r\n        local nc = format('%08X', self.nc)\r\n        local cnonce = m.generate_nonce()\r\n        local uri = path_query(req.url)\r\n        local ha1, ha2, response\r\n        ha1 = digest('md5', self.username .. ':'\r\n                         .. self.realm .. ':'\r\n                         .. self.password)\r\n        ha2 = digest('md5', req.method .. ':'\r\n                         .. uri)\r\n        if self.qop then\r\n            response = digest('md5', ha1 .. ':'\r\n                                  .. self.nonce .. ':'\r\n                                  .. nc .. ':'\r\n                                  .. cnonce .. ':'\r\n                                  .. self.qop .. ':'\r\n                                  .. ha2)\r\n        else\r\n            response = digest('md5', ha1 .. ':'\r\n                                  .. self.nonce .. ':'\r\n                                  .. ha2)\r\n        end\r\n        local auth = 'Digest username=\"' .. self.username\r\n                  .. '\", realm=\"' .. self.realm\r\n                  .. '\", nonce=\"' .. self.nonce\r\n                  .. '\", uri=\"' .. uri\r\n                  .. '\", algorithm=\"' .. self.algorithm\r\n                  .. '\", nc=' .. nc\r\n                  .. ', cnonce=\"' .. cnonce\r\n                  .. '\", response=\"' .. response\r\n                  .. '\", opaque=\"' .. self.opaque .. '\"'\r\n        if self.qop then\r\n            auth = auth .. ', qop=' .. self.qop\r\n        end\r\n        req.headers['authorization'] = auth\r\n    end  -- add_header\r\n\r\n    if req.env.spore.authentication and self.username and self.password then\r\n        if self.nonce then\r\n            req:finalize()\r\n            add_header()\r\n        end\r\n\r\n        return  function (res)\r\n            if res.status == 401 and res.headers['www-authenticate'] then\r\n                for k, v in res.headers['www-authenticate']:gmatch'(%w+)=\"([^\"]*)\"' do\r\n                    self[k] = v\r\n                end\r\n                if self.qop then\r\n                    for v in self.qop:gmatch'([%w%-]+)[,;]?' do\r\n                        self.qop = v\r\n                        if v == 'auth' then\r\n                            break\r\n                        end\r\n                    end\r\n                    if self.qop ~= 'auth' then\r\n                        error(self.qop .. \" is not supported\")\r\n                    end\r\n                end\r\n                if not self.algorithm then\r\n                    self.algorithm = 'MD5'\r\n                end\r\n                if self.algorithm ~= 'MD5' then\r\n                    error(self.algorithm .. \" is not supported\")\r\n                end\r\n                self.nc = 0\r\n                add_header()\r\n                return Protocols.request(req)\r\n            end\r\n            return res\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function m.generate_timestamp ()\r\n    return tostring(time())\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function m.generate_nonce ()\r\n    return digest('sha1', tostring(random()) .. 'random' .. tostring(time()), 'keyyyy')\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function m.reset ()\r\n    collectgarbage 'collect'\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function m:call (req)\r\n    local nredirect = 0\r\n\r\n    return  function (res)\r\n                while nredirect < m.max_redirect do\r\n                    local location = res.headers and res.headers['location']\r\n                    local status = res.status\r\n                    if location and (status == 301 or status == 302\r\n                                  or status == 303 or status == 307) then\r\n                        if req.headers['host'] then\r\n                            local uri = url.parse(location)\r\n                            req.headers['host'] = uri.host\r\n                            local proxy = url.parse(req.url)\r\n                            uri.host = proxy.host\r\n                            uri.port = proxy.port\r\n                            req.url = url.build(uri)\r\n                            req.env.spore.url_scheme = uri.scheme\r\n                        else\r\n                            req.url = url.absolute(req.url, location)\r\n                            req.env.spore.url_scheme = url.parse(location).scheme\r\n                        end\r\n                        req.headers['cookie'] = nil\r\n                        res = Protocols.request(req)\r\n                        nredirect = nredirect + 1\r\n                    else\r\n                        break\r\n                    end\r\n                end\r\n                return res\r\n            end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local function slurp (name)\r\n    local uri = url.parse(name)\r\n    if not uri.scheme or uri.scheme == 'file' then\r\n        local f, msg = io.open(uri.path)\r\n        assert(f, msg)\r\n        local content = f:read '*a'\r\n        f:close()\r\n        return content\r\n    else\r\n        local res = m.request{\r\n            env = {\r\n                spore = {\r\n                    url_scheme = uri.scheme,\r\n                    debug = require'Spore'.debug,\r\n                },\r\n            },\r\n            method = 'GET',\r\n            url = name,\r\n        }\r\n        assert(res.status == 200, res.status .. \" not expected\")\r\n        return res.body\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local uri = url.parse(name)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if not uri.scheme or uri.scheme == 'file' then\r\n        local f, msg = io.open(uri.path)\r\n        assert(f, msg)\r\n        local content = f:read '*a'\r\n        f:close()\r\n        return content\r\n    else\r\n        local res = m.request{\r\n            env = {\r\n                spore = {\r\n                    url_scheme = uri.scheme,\r\n                    debug = require'Spore'.debug,\r\n                },\r\n            },\r\n            method = 'GET',\r\n            url = name,\r\n        }\r\n        assert(res.status == 200, res.status .. \" not expected\")\r\n        return res.body\r\n    end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "local f, msg = io.open(uri.path)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "assert(f, msg)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "local content = f:read '*a'",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "local res = m.request{\r\n            env = {\r\n                spore = {\r\n                    url_scheme = uri.scheme,\r\n                    debug = require'Spore'.debug,\r\n                },\r\n            },\r\n            method = 'GET',\r\n            url = name,\r\n        }",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "assert(res.status == 200, res.status .. \" not expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function boundary (size)\r\n    local t = {}\r\n    for i = 1, 3 * size do\r\n        t[#t+1] = math.random(256) - 1\r\n    end\r\n    local b = mime.b64(string.char(unpack(t))):gsub('%W', 'X')\r\n    return b\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "for i = 1, 3 * size do\r\n        t[#t+1] = math.random(256) - 1\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 24,
    "text": "t[#t+1] = math.random(256) - 1",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "local b = mime.b64(string.char(unpack(t))):gsub('%W', 'X')",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function _form_data (data)\r\n    local p = {}\r\n    for k, v in pairs(data) do\r\n        if v:sub(1, 1) == '@' then\r\n            local fname = v:sub(2)\r\n            local content = slurp(fname)\r\n            p[#p+1] = 'content-disposition: form-data; name=\"' .. k .. '\"; filename=\"' .. fname ..'\"\\r\\n'\r\n                   .. 'content-type: application/octet-stream\\r\\n\\r\\n'\r\n                   .. content\r\n        else\r\n            p[#p+1] = 'content-disposition: form-data; name=\"' .. k .. '\"\\r\\n\\r\\n' .. v\r\n        end\r\n    end\r\n\r\n    local b = boundary(10)\r\n    local t = {}\r\n    for i = 1, #p do\r\n        t[#t+1] = '--'\r\n        t[#t+1] = b\r\n        t[#t+1] = '\\r\\n'\r\n        t[#t+1] = p[i]\r\n        t[#t+1] = '\\r\\n'\r\n    end\r\n    t[#t+1] = '--'\r\n    t[#t+1] = b\r\n    t[#t+1] = '--'\r\n    t[#t+1] = '\\r\\n'\r\n    return tconcat(t), b\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local p = {}",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "for k, v in pairs(data) do\r\n        if v:sub(1, 1) == '@' then\r\n            local fname = v:sub(2)\r\n            local content = slurp(fname)\r\n            p[#p+1] = 'content-disposition: form-data; name=\"' .. k .. '\"; filename=\"' .. fname ..'\"\\r\\n'\r\n                   .. 'content-type: application/octet-stream\\r\\n\\r\\n'\r\n                   .. content\r\n        else\r\n            p[#p+1] = 'content-disposition: form-data; name=\"' .. k .. '\"\\r\\n\\r\\n' .. v\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 30,
    "text": "if v:sub(1, 1) == '@' then\r\n            local fname = v:sub(2)\r\n            local content = slurp(fname)\r\n            p[#p+1] = 'content-disposition: form-data; name=\"' .. k .. '\"; filename=\"' .. fname ..'\"\\r\\n'\r\n                   .. 'content-type: application/octet-stream\\r\\n\\r\\n'\r\n                   .. content\r\n        else\r\n            p[#p+1] = 'content-disposition: form-data; name=\"' .. k .. '\"\\r\\n\\r\\n' .. v\r\n        end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "local fname = v:sub(2)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "local content = slurp(fname)",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "p[#p+1] = 'content-disposition: form-data; name=\"' .. k .. '\"; filename=\"' .. fname ..'\"\\r\\n'\r\n                   .. 'content-type: application/octet-stream\\r\\n\\r\\n'\r\n                   .. content",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "p[#p+1] = 'content-disposition: form-data; name=\"' .. k .. '\"\\r\\n\\r\\n' .. v",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "local b = boundary(10)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "for i = 1, #p do\r\n        t[#t+1] = '--'\r\n        t[#t+1] = b\r\n        t[#t+1] = '\\r\\n'\r\n        t[#t+1] = p[i]\r\n        t[#t+1] = '\\r\\n'\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 37,
    "text": "t[#t+1] = '--'",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "t[#t+1] = b",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "t[#t+1] = '\\r\\n'",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "t[#t+1] = p[i]",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "local function request (req)\r\n    local spore = req.env.spore\r\n    local prot = protocol[spore.url_scheme]\r\n    assert(prot, \"not protocol \" .. spore.url_scheme)\r\n\r\n    local form_data = spore.form_data\r\n    if form_data then\r\n        local content, boundary = _form_data(form_data)\r\n        req.source = ltn12.source.string(content)\r\n        req.headers['content-length'] = content:len()\r\n        req.headers['content-type'] = 'multipart/form-data; boundary=' .. boundary\r\n    end\r\n\r\n    local payload = spore.payload\r\n    if payload then\r\n        if payload:sub(1, 1) == '@' then\r\n            local fname = payload:sub(2)\r\n            payload = slurp(fname)\r\n        end\r\n        req.source = ltn12.source.string(payload)\r\n        req.headers['content-length'] = payload:len()\r\n        req.headers['content-type'] = req.headers['content-type'] or 'application/x-www-form-urlencoded'\r\n    end\r\n\r\n    if req.method == 'POST' and not req.headers['content-length'] then\r\n        req.headers['content-length'] = 0\r\n    end\r\n\r\n    local t = {}\r\n    req.sink = ltn12.sink.table(t)\r\n\r\n    if spore.debug then\r\n        spore.debug:write(req.method, \" \", req.url, \"\\n\")\r\n        for k, v in pairs(req.headers) do\r\n            spore.debug:write(k, \": \", v, \"\\n\")\r\n        end\r\n    end\r\n    local r, status, headers, line = prot.request(req)\r\n    if spore.debug then\r\n        spore.debug:write(line or status, \"\\n\")\r\n    end\r\n    return {\r\n        request = req,\r\n        status = status,\r\n        headers = headers,\r\n        body = tconcat(t),\r\n    }\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local spore = req.env.spore",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local prot = protocol[spore.url_scheme]",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "assert(prot, \"not protocol \" .. spore.url_scheme)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "local form_data = spore.form_data",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "if form_data then\r\n        local content, boundary = _form_data(form_data)\r\n        req.source = ltn12.source.string(content)\r\n        req.headers['content-length'] = content:len()\r\n        req.headers['content-type'] = 'multipart/form-data; boundary=' .. boundary\r\n    end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "local content, boundary = _form_data(form_data)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "req.source = ltn12.source.string(content)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "req.headers['content-length'] = content:len()",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "req.headers['content-type'] = 'multipart/form-data; boundary=' .. boundary",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "local payload = spore.payload",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if payload then\r\n        if payload:sub(1, 1) == '@' then\r\n            local fname = payload:sub(2)\r\n            payload = slurp(fname)\r\n        end\r\n        req.source = ltn12.source.string(payload)\r\n        req.headers['content-length'] = payload:len()\r\n        req.headers['content-type'] = req.headers['content-type'] or 'application/x-www-form-urlencoded'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "if payload:sub(1, 1) == '@' then\r\n            local fname = payload:sub(2)\r\n            payload = slurp(fname)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "local fname = payload:sub(2)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "payload = slurp(fname)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "req.source = ltn12.source.string(payload)",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "req.headers['content-length'] = payload:len()",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "req.headers['content-type'] = req.headers['content-type'] or 'application/x-www-form-urlencoded'",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if req.method == 'POST' and not req.headers['content-length'] then\r\n        req.headers['content-length'] = 0\r\n    end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "req.headers['content-length'] = 0",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "req.sink = ltn12.sink.table(t)",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "if spore.debug then\r\n        spore.debug:write(req.method, \" \", req.url, \"\\n\")\r\n        for k, v in pairs(req.headers) do\r\n            spore.debug:write(k, \": \", v, \"\\n\")\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "spore.debug:write(req.method, \" \", req.url, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "for k, v in pairs(req.headers) do\r\n            spore.debug:write(k, \": \", v, \"\\n\")\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 66,
    "text": "spore.debug:write(k, \": \", v, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "local r, status, headers, line = prot.request(req)",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if spore.debug then\r\n        spore.debug:write(line or status, \"\\n\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "spore.debug:write(line or status, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "",
    "type": "function container"
  }, {
    "id": 72,
    "text": "function m.new (env)\r\n    local obj = {\r\n        env = env,\r\n        redirect = m.redirect,\r\n        headers = {\r\n            ['user-agent'] = env.HTTP_USER_AGENT,\r\n        },\r\n    }\r\n    return setmetatable(obj, {\r\n        __index = m,\r\n    })\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "ltn12",
    "type": "module"
  }, {
    "id": 74,
    "text": "sink.table",
    "type": "global function"
  }, {
    "id": 75,
    "text": "io",
    "type": "module"
  }, {
    "id": 76,
    "text": "open",
    "type": "global function"
  }, {
    "id": 77,
    "text": "string",
    "type": "module"
  }, {
    "id": 78,
    "text": "char",
    "type": "global function"
  }, {
    "id": 79,
    "text": "math",
    "type": "module"
  }, {
    "id": 80,
    "text": "randomseed",
    "type": "global function"
  }, {
    "id": 81,
    "text": "source.string",
    "type": "global function"
  }, {
    "id": 82,
    "text": "random",
    "type": "global function"
  }, {
    "id": 83,
    "text": "table",
    "type": "module"
  }, {
    "id": 84,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 85,
    "text": "mime",
    "type": "module"
  }, {
    "id": 86,
    "text": "b64",
    "type": "global function"
  }, {
    "id": 87,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 88,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 89,
    "text": "tconcat",
    "type": "global function"
  }, {
    "id": 90,
    "text": "request",
    "type": "global function"
  }, {
    "id": 91,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 92,
    "text": "time",
    "type": "global function"
  }, {
    "id": 93,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 94,
    "text": "request",
    "type": "global function"
  }, {
    "id": 95,
    "text": "require",
    "type": "global function"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 101,
    "text": "url",
    "type": "module"
  }, {
    "id": 102,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "variable container"
  }, {
    "id": 107,
    "text": "",
    "type": "require container"
  }, {
    "id": 108,
    "text": "",
    "type": "local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "n/a"
  }, {
    "id": 110,
    "text": "",
    "type": "local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "n/a"
  }, {
    "id": 112,
    "text": "",
    "type": "local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "n/a"
  }, {
    "id": 114,
    "text": "",
    "type": "local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "n/a"
  }, {
    "id": 116,
    "text": "",
    "type": "local variable"
  }, {
    "id": 117,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 118,
    "text": "",
    "type": "local variable"
  }, {
    "id": 119,
    "text": "",
    "type": "n/a"
  }, {
    "id": 120,
    "text": "",
    "type": "local variable"
  }, {
    "id": 121,
    "text": "",
    "type": "local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 123,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 124,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 125,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 126,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 127,
    "text": "",
    "type": "global variable"
  }, {
    "id": 128,
    "text": "",
    "type": "global variable"
  }, {
    "id": 129,
    "text": "",
    "type": "n/a"
  }, {
    "id": 130,
    "text": "",
    "type": "global variable"
  }, {
    "id": 131,
    "text": "",
    "type": "n/a"
  }, {
    "id": 132,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "interface container"
  }, {
    "id": 141,
    "text": "",
    "type": "interface"
  }, {
    "id": 142,
    "text": "",
    "type": "require local variable"
  } ]
}