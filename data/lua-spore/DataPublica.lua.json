{
  "_filename": "DataPublica.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-spore/src/Spore/Middleware/Auth/DataPublica.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 8,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 8,
    "label": "has",
    "to": 16
  }, {
    "from": 8,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 8,
    "label": "has",
    "to": 20
  }, {
    "from": 8,
    "label": "has",
    "to": 21
  }, {
    "from": 4,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 4,
    "label": "has",
    "to": 21
  }, {
    "from": 4,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 9
  }, {
    "from": 30,
    "label": "has",
    "to": 10
  }, {
    "from": 30,
    "label": "has",
    "to": 11
  }, {
    "from": 30,
    "label": "has",
    "to": 12
  }, {
    "from": 30,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 30,
    "label": "has",
    "to": 16
  }, {
    "from": 30,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 30,
    "label": "has",
    "to": 20
  }, {
    "from": 30,
    "label": "has",
    "to": 21
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 4,
    "label": "calls",
    "to": 42
  }, {
    "from": 30,
    "label": "calls",
    "to": 45
  }, {
    "from": 30,
    "label": "calls",
    "to": 40
  }, {
    "from": 30,
    "label": "calls",
    "to": 43
  }, {
    "from": 30,
    "label": "calls",
    "to": 44
  }, {
    "from": 4,
    "label": "calls",
    "to": 41
  }, {
    "from": 32,
    "label": "calls",
    "to": 46
  }, {
    "from": 32,
    "label": "calls",
    "to": 46
  }, {
    "from": 32,
    "label": "calls",
    "to": 46
  }, {
    "from": 32,
    "label": "calls",
    "to": 46
  }, {
    "from": 32,
    "label": "calls",
    "to": 46
  }, {
    "from": 30,
    "label": "calls",
    "to": 38
  }, {
    "from": 4,
    "label": "calls",
    "to": 30
  }, {
    "from": 1,
    "label": "contains",
    "to": 32
  }, {
    "from": 32,
    "label": "declares",
    "to": 4
  }, {
    "from": 32,
    "label": "declares",
    "to": 30
  }, {
    "from": 1,
    "label": "contains",
    "to": 49
  }, {
    "from": 1,
    "label": "contains",
    "to": 50
  }, {
    "from": 49,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 49,
    "label": "initializes",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 49,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 49,
    "label": "initializes",
    "to": 57
  }, {
    "from": 49,
    "label": "initializes",
    "to": 58
  }, {
    "from": 50,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "requires",
    "to": 39
  }, {
    "from": 50,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "requires",
    "to": 39
  }, {
    "from": 50,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "requires",
    "to": 48
  }, {
    "from": 50,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "requires",
    "to": 63
  }, {
    "from": 50,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 65
  }, {
    "from": 47,
    "label": "represents",
    "to": 66
  }, {
    "from": 65,
    "label": "provides",
    "to": 66
  }, {
    "from": 67,
    "label": "requires",
    "to": 63
  }, {
    "from": 68,
    "label": "requires",
    "to": 63
  }, {
    "from": 69,
    "label": "requires",
    "to": 63
  }, {
    "from": 70,
    "label": "requires",
    "to": 63
  }, {
    "from": 71,
    "label": "requires",
    "to": 63
  }, {
    "from": 72,
    "label": "requires",
    "to": 63
  }, {
    "from": 73,
    "label": "requires",
    "to": 63
  }, {
    "from": 55,
    "label": "contains",
    "to": 3
  }, {
    "from": 55,
    "label": "contains",
    "to": 33
  }, {
    "from": 55,
    "label": "contains",
    "to": 34
  }, {
    "from": 55,
    "label": "contains",
    "to": 35
  }, {
    "from": 55,
    "label": "contains",
    "to": 36
  }, {
    "from": 55,
    "label": "contains",
    "to": 37
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "DataPublica",
    "type": "module"
  }, {
    "id": 2,
    "text": "Protocols",
    "type": "module"
  }, {
    "id": 3,
    "text": "function m.new_from_discovery (api, opts)\r\n    opts = opts or {}\r\n    checktype('new_from_discovery', 2, opts, 'table')\r\n    if type(api) == 'string' then\r\n        local content = slurp(api)\r\n        return new_from_lua(convert(decode(content)), opts)\r\n    end\r\n    if type(api) == 'table' then\r\n        local discovery = new_from_lua {\r\n            base_url = 'https://www.googleapis.com/discovery/v1/',\r\n            methods = {\r\n                get = {\r\n                    path = 'apis/:api/:version/rest',\r\n                    method = 'GET',\r\n                    required_params = { 'api', 'version' },\r\n                    expected_status = { 200 },\r\n                },\r\n            },\r\n        }\r\n        discovery:enable 'Format.JSON'\r\n        local r = discovery:get(api)\r\n        return new_from_lua(convert(r.body), opts)\r\n    end\r\n    error(\"bad argument #1 to new_from_discovery (string or table expected, got \"\r\n          .. type(api) .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function m:call (req)\r\n    local env = req.env\r\n    local spore = env.spore\r\n    local params = spore.params\r\n\r\n     local function get_string_to_sign ()\r\n        local u = url.parse(req.url)\r\n        u.query = nil\r\n        local t = { url.build(u) }      -- url without query\r\n\r\n        local names = {}\r\n        for k in pairs(params) do\r\n            if k ~= 'reference' and k ~= 'tablename' then\r\n                names[#names+1] = k\r\n            end\r\n        end\r\n        tsort(names)\r\n        for i = 1, #names do\r\n            local name = names[i]\r\n            t[#t+1] = name .. '=' .. spore.params[name]\r\n        end\r\n        t[#t+1] = self.password\r\n        return tconcat(t, ',')\r\n    end -- get_string_to_sign\r\n\r\n    if spore.authentication and self.key and self.password then\r\n        params.format = params.format or 'json'\r\n        params.limit = params.limit or 50\r\n        params.offset = params.offset or 0\r\n        params.key = self.key\r\n\r\n        req:finalize()\r\n        req.url = req.url .. '&signature=' .. digest('sha1', get_string_to_sign())\r\n\r\n        return request(req)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local env = req.env",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local spore = env.spore",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local params = spore.params",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local function get_string_to_sign ()\r\n        local u = url.parse(req.url)\r\n        u.query = nil\r\n        local t = { url.build(u) }      -- url without query\r\n\r\n        local names = {}\r\n        for k in pairs(params) do\r\n            if k ~= 'reference' and k ~= 'tablename' then\r\n                names[#names+1] = k\r\n            end\r\n        end\r\n        tsort(names)\r\n        for i = 1, #names do\r\n            local name = names[i]\r\n            t[#t+1] = name .. '=' .. spore.params[name]\r\n        end\r\n        t[#t+1] = self.password\r\n        return tconcat(t, ',')\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 9,
    "text": "local u = url.parse(req.url)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "u.query = nil",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "local t = { url.build(u) }",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local names = {}",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "for k in pairs(params) do\r\n            if k ~= 'reference' and k ~= 'tablename' then\r\n                names[#names+1] = k\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 14,
    "text": "if k ~= 'reference' and k ~= 'tablename' then\r\n                names[#names+1] = k\r\n            end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "names[#names+1] = k",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "tsort(names)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "for i = 1, #names do\r\n            local name = names[i]\r\n            t[#t+1] = name .. '=' .. spore.params[name]\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 18,
    "text": "local name = names[i]",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "t[#t+1] = name .. '=' .. spore.params[name]",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "t[#t+1] = self.password",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 22,
    "text": "if spore.authentication and self.key and self.password then\r\n        params.format = params.format or 'json'\r\n        params.limit = params.limit or 50\r\n        params.offset = params.offset or 0\r\n        params.key = self.key\r\n\r\n        req:finalize()\r\n        req.url = req.url .. '&signature=' .. digest('sha1', get_string_to_sign())\r\n\r\n        return request(req)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "params.format = params.format or 'json'",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "params.limit = params.limit or 50",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "params.offset = params.offset or 0",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "params.key = self.key",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "req:finalize()",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "req.url = req.url .. '&signature=' .. digest('sha1', get_string_to_sign())",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function get_string_to_sign ()\r\n        local u = url.parse(req.url)\r\n        u.query = nil\r\n        local t = { url.build(u) }      -- url without query\r\n\r\n        local names = {}\r\n        for k in pairs(params) do\r\n            if k ~= 'reference' and k ~= 'tablename' then\r\n                names[#names+1] = k\r\n            end\r\n        end\r\n        tsort(names)\r\n        for i = 1, #names do\r\n            local name = names[i]\r\n            t[#t+1] = name .. '=' .. spore.params[name]\r\n        end\r\n        t[#t+1] = self.password\r\n        return tconcat(t, ',')\r\n    end",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "",
    "type": "function container"
  }, {
    "id": 33,
    "text": "function m.generate_nonce ()\r\n    return format('%08x', time())\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "function m.generate_timestamp ()\r\n    return tostring(time())\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "function m.generate_nonce ()\r\n    return digest('sha1', tostring(random()) .. 'random' .. tostring(time()), 'keyyyy')\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "function m.reset ()\r\n    collectgarbage 'collect'\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "function m.new (env)\r\n    local obj = {\r\n        env = env,\r\n        redirect = m.redirect,\r\n        headers = {\r\n            ['user-agent'] = env.HTTP_USER_AGENT,\r\n        },\r\n    }\r\n    return setmetatable(obj, {\r\n        __index = m,\r\n    })\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "build",
    "type": "global function"
  }, {
    "id": 39,
    "text": "table",
    "type": "module"
  }, {
    "id": 40,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 41,
    "text": "digest",
    "type": "global function"
  }, {
    "id": 42,
    "text": "request",
    "type": "global function"
  }, {
    "id": 43,
    "text": "tconcat",
    "type": "global function"
  }, {
    "id": 44,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 45,
    "text": "tsort",
    "type": "global function"
  }, {
    "id": 46,
    "text": "require",
    "type": "global function"
  }, {
    "id": 47,
    "text": "",
    "type": "local variable"
  }, {
    "id": 48,
    "text": "crypto",
    "type": "module"
  }, {
    "id": 49,
    "text": "",
    "type": "variable container"
  }, {
    "id": 50,
    "text": "",
    "type": "require container"
  }, {
    "id": 51,
    "text": "",
    "type": "local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "n/a"
  }, {
    "id": 53,
    "text": "",
    "type": "local variable"
  }, {
    "id": 54,
    "text": "",
    "type": "n/a"
  }, {
    "id": 55,
    "text": "",
    "type": "local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 57,
    "text": "",
    "type": "global variable"
  }, {
    "id": 58,
    "text": "",
    "type": "global variable"
  }, {
    "id": 59,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 63,
    "text": "url",
    "type": "module"
  }, {
    "id": 64,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "interface container"
  }, {
    "id": 66,
    "text": "",
    "type": "interface"
  }, {
    "id": 67,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 71,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "require local variable"
  } ]
}