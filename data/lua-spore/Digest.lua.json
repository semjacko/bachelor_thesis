{
  "_filename": "Digest.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-spore/src/Spore/Middleware/Auth/Digest.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 17
  }, {
    "from": 11,
    "label": "has",
    "to": 18
  }, {
    "from": 11,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 11,
    "label": "has",
    "to": 22
  }, {
    "from": 11,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 11,
    "label": "has",
    "to": 25
  }, {
    "from": 10,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 30,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 30,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 30,
    "label": "has",
    "to": 43
  }, {
    "from": 30,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 5
  }, {
    "from": 26,
    "label": "has",
    "to": 5
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 10,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 12
  }, {
    "from": 45,
    "label": "has",
    "to": 13
  }, {
    "from": 45,
    "label": "has",
    "to": 14
  }, {
    "from": 45,
    "label": "has",
    "to": 15
  }, {
    "from": 45,
    "label": "has",
    "to": 16
  }, {
    "from": 45,
    "label": "has",
    "to": 17
  }, {
    "from": 45,
    "label": "has",
    "to": 18
  }, {
    "from": 45,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 45,
    "label": "has",
    "to": 22
  }, {
    "from": 45,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 45,
    "label": "has",
    "to": 25
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 30,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 30,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 30,
    "label": "has",
    "to": 43
  }, {
    "from": 30,
    "label": "has",
    "to": 29
  }, {
    "from": 47,
    "label": "has",
    "to": 5
  }, {
    "from": 47,
    "label": "has",
    "to": 5
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 4,
    "label": "calls",
    "to": 63
  }, {
    "from": 45,
    "label": "calls",
    "to": 63
  }, {
    "from": 10,
    "label": "calls",
    "to": 53
  }, {
    "from": 45,
    "label": "calls",
    "to": 60
  }, {
    "from": 45,
    "label": "calls",
    "to": 60
  }, {
    "from": 45,
    "label": "calls",
    "to": 60
  }, {
    "from": 45,
    "label": "calls",
    "to": 60
  }, {
    "from": 45,
    "label": "calls",
    "to": 4
  }, {
    "from": 7,
    "label": "calls",
    "to": 58
  }, {
    "from": 10,
    "label": "calls",
    "to": 45
  }, {
    "from": 10,
    "label": "calls",
    "to": 45
  }, {
    "from": 10,
    "label": "calls",
    "to": 61
  }, {
    "from": 10,
    "label": "calls",
    "to": 61
  }, {
    "from": 7,
    "label": "calls",
    "to": 57
  }, {
    "from": 49,
    "label": "calls",
    "to": 62
  }, {
    "from": 49,
    "label": "calls",
    "to": 62
  }, {
    "from": 49,
    "label": "calls",
    "to": 62
  }, {
    "from": 49,
    "label": "calls",
    "to": 62
  }, {
    "from": 49,
    "label": "calls",
    "to": 62
  }, {
    "from": 4,
    "label": "calls",
    "to": 59
  }, {
    "from": 45,
    "label": "calls",
    "to": 7
  }, {
    "from": 1,
    "label": "contains",
    "to": 49
  }, {
    "from": 49,
    "label": "declares",
    "to": 4
  }, {
    "from": 49,
    "label": "declares",
    "to": 7
  }, {
    "from": 49,
    "label": "declares",
    "to": 10
  }, {
    "from": 49,
    "label": "declares",
    "to": 45
  }, {
    "from": 49,
    "label": "declares",
    "to": 47
  }, {
    "from": 1,
    "label": "contains",
    "to": 72
  }, {
    "from": 1,
    "label": "contains",
    "to": 73
  }, {
    "from": 72,
    "label": "initializes",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 72,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 72,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 72,
    "label": "initializes",
    "to": 80
  }, {
    "from": 73,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "requires",
    "to": 55
  }, {
    "from": 73,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "requires",
    "to": 56
  }, {
    "from": 73,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "requires",
    "to": 67
  }, {
    "from": 73,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "requires",
    "to": 71
  }, {
    "from": 73,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 86
  }, {
    "from": 64,
    "label": "represents",
    "to": 87
  }, {
    "from": 86,
    "label": "provides",
    "to": 87
  }, {
    "from": 78,
    "label": "contains",
    "to": 3
  }, {
    "from": 64,
    "label": "contains",
    "to": 4
  }, {
    "from": 65,
    "label": "contains",
    "to": 4
  }, {
    "from": 66,
    "label": "contains",
    "to": 4
  }, {
    "from": 68,
    "label": "contains",
    "to": 4
  }, {
    "from": 69,
    "label": "contains",
    "to": 4
  }, {
    "from": 70,
    "label": "contains",
    "to": 4
  }, {
    "from": 78,
    "label": "contains",
    "to": 4
  }, {
    "from": 88,
    "label": "contains",
    "to": 4
  }, {
    "from": 89,
    "label": "contains",
    "to": 4
  }, {
    "from": 90,
    "label": "contains",
    "to": 4
  }, {
    "from": 91,
    "label": "contains",
    "to": 4
  }, {
    "from": 92,
    "label": "contains",
    "to": 4
  }, {
    "from": 93,
    "label": "contains",
    "to": 4
  }, {
    "from": 94,
    "label": "contains",
    "to": 4
  }, {
    "from": 95,
    "label": "contains",
    "to": 4
  }, {
    "from": 96,
    "label": "contains",
    "to": 4
  }, {
    "from": 97,
    "label": "contains",
    "to": 4
  }, {
    "from": 98,
    "label": "contains",
    "to": 4
  }, {
    "from": 99,
    "label": "contains",
    "to": 4
  }, {
    "from": 100,
    "label": "contains",
    "to": 4
  }, {
    "from": 101,
    "label": "contains",
    "to": 4
  }, {
    "from": 102,
    "label": "contains",
    "to": 4
  }, {
    "from": 103,
    "label": "contains",
    "to": 4
  }, {
    "from": 104,
    "label": "contains",
    "to": 4
  }, {
    "from": 78,
    "label": "contains",
    "to": 50
  }, {
    "from": 78,
    "label": "contains",
    "to": 51
  }, {
    "from": 78,
    "label": "contains",
    "to": 52
  }, {
    "from": 78,
    "label": "contains",
    "to": 54
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Digest",
    "type": "module"
  }, {
    "id": 2,
    "text": "Protocols",
    "type": "module"
  }, {
    "id": 3,
    "text": "function m.new_from_discovery (api, opts)\r\n    opts = opts or {}\r\n    checktype('new_from_discovery', 2, opts, 'table')\r\n    if type(api) == 'string' then\r\n        local content = slurp(api)\r\n        return new_from_lua(convert(decode(content)), opts)\r\n    end\r\n    if type(api) == 'table' then\r\n        local discovery = new_from_lua {\r\n            base_url = 'https://www.googleapis.com/discovery/v1/',\r\n            methods = {\r\n                get = {\r\n                    path = 'apis/:api/:version/rest',\r\n                    method = 'GET',\r\n                    required_params = { 'api', 'version' },\r\n                    expected_status = { 200 },\r\n                },\r\n            },\r\n        }\r\n        discovery:enable 'Format.JSON'\r\n        local r = discovery:get(api)\r\n        return new_from_lua(convert(r.body), opts)\r\n    end\r\n    error(\"bad argument #1 to new_from_discovery (string or table expected, got \"\r\n          .. type(api) .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function m.generate_nonce ()\r\n    return format('%08x', time())\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function path_query (uri)\r\n    local t = url.parse(uri)\r\n    return url.build{ path = t.path, query = t.query }\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local t = url.parse(uri)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function m:call (req)\r\n    local function add_header ()\r\n        self.nc = self.nc + 1\r\n        local nc = format('%08X', self.nc)\r\n        local cnonce = m.generate_nonce()\r\n        local uri = path_query(req.url)\r\n        local ha1, ha2, response\r\n        ha1 = digest('md5', self.username .. ':'\r\n                         .. self.realm .. ':'\r\n                         .. self.password)\r\n        ha2 = digest('md5', req.method .. ':'\r\n                         .. uri)\r\n        if self.qop then\r\n            response = digest('md5', ha1 .. ':'\r\n                                  .. self.nonce .. ':'\r\n                                  .. nc .. ':'\r\n                                  .. cnonce .. ':'\r\n                                  .. self.qop .. ':'\r\n                                  .. ha2)\r\n        else\r\n            response = digest('md5', ha1 .. ':'\r\n                                  .. self.nonce .. ':'\r\n                                  .. ha2)\r\n        end\r\n        local auth = 'Digest username=\"' .. self.username\r\n                  .. '\", realm=\"' .. self.realm\r\n                  .. '\", nonce=\"' .. self.nonce\r\n                  .. '\", uri=\"' .. uri\r\n                  .. '\", algorithm=\"' .. self.algorithm\r\n                  .. '\", nc=' .. nc\r\n                  .. ', cnonce=\"' .. cnonce\r\n                  .. '\", response=\"' .. response\r\n                  .. '\", opaque=\"' .. self.opaque .. '\"'\r\n        if self.qop then\r\n            auth = auth .. ', qop=' .. self.qop\r\n        end\r\n        req.headers['authorization'] = auth\r\n    end  -- add_header\r\n\r\n    if req.env.spore.authentication and self.username and self.password then\r\n        if self.nonce then\r\n            req:finalize()\r\n            add_header()\r\n        end\r\n\r\n        return  function (res)\r\n            if res.status == 401 and res.headers['www-authenticate'] then\r\n                for k, v in res.headers['www-authenticate']:gmatch'(%w+)=\"([^\"]*)\"' do\r\n                    self[k] = v\r\n                end\r\n                if self.qop then\r\n                    for v in self.qop:gmatch'([%w%-]+)[,;]?' do\r\n                        self.qop = v\r\n                        if v == 'auth' then\r\n                            break\r\n                        end\r\n                    end\r\n                    if self.qop ~= 'auth' then\r\n                        error(self.qop .. \" is not supported\")\r\n                    end\r\n                end\r\n                if not self.algorithm then\r\n                    self.algorithm = 'MD5'\r\n                end\r\n                if self.algorithm ~= 'MD5' then\r\n                    error(self.algorithm .. \" is not supported\")\r\n                end\r\n                self.nc = 0\r\n                add_header()\r\n                return Protocols.request(req)\r\n            end\r\n            return res\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local function add_header ()\r\n        self.nc = self.nc + 1\r\n        local nc = format('%08X', self.nc)\r\n        local cnonce = m.generate_nonce()\r\n        local uri = path_query(req.url)\r\n        local ha1, ha2, response\r\n        ha1 = digest('md5', self.username .. ':'\r\n                         .. self.realm .. ':'\r\n                         .. self.password)\r\n        ha2 = digest('md5', req.method .. ':'\r\n                         .. uri)\r\n        if self.qop then\r\n            response = digest('md5', ha1 .. ':'\r\n                                  .. self.nonce .. ':'\r\n                                  .. nc .. ':'\r\n                                  .. cnonce .. ':'\r\n                                  .. self.qop .. ':'\r\n                                  .. ha2)\r\n        else\r\n            response = digest('md5', ha1 .. ':'\r\n                                  .. self.nonce .. ':'\r\n                                  .. ha2)\r\n        end\r\n        local auth = 'Digest username=\"' .. self.username\r\n                  .. '\", realm=\"' .. self.realm\r\n                  .. '\", nonce=\"' .. self.nonce\r\n                  .. '\", uri=\"' .. uri\r\n                  .. '\", algorithm=\"' .. self.algorithm\r\n                  .. '\", nc=' .. nc\r\n                  .. ', cnonce=\"' .. cnonce\r\n                  .. '\", response=\"' .. response\r\n                  .. '\", opaque=\"' .. self.opaque .. '\"'\r\n        if self.qop then\r\n            auth = auth .. ', qop=' .. self.qop\r\n        end\r\n        req.headers['authorization'] = auth\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 12,
    "text": "self.nc = self.nc + 1",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "local nc = format('%08X', self.nc)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local cnonce = m.generate_nonce()",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local uri = path_query(req.url)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local ha1, ha2, response",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "ha1 = digest('md5', self.username .. ':'\r\n                         .. self.realm .. ':'\r\n                         .. self.password)",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "ha2 = digest('md5', req.method .. ':'\r\n                         .. uri)",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "if self.qop then\r\n            response = digest('md5', ha1 .. ':'\r\n                                  .. self.nonce .. ':'\r\n                                  .. nc .. ':'\r\n                                  .. cnonce .. ':'\r\n                                  .. self.qop .. ':'\r\n                                  .. ha2)\r\n        else\r\n            response = digest('md5', ha1 .. ':'\r\n                                  .. self.nonce .. ':'\r\n                                  .. ha2)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "response = digest('md5', ha1 .. ':'\r\n                                  .. self.nonce .. ':'\r\n                                  .. nc .. ':'\r\n                                  .. cnonce .. ':'\r\n                                  .. self.qop .. ':'\r\n                                  .. ha2)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "response = digest('md5', ha1 .. ':'\r\n                                  .. self.nonce .. ':'\r\n                                  .. ha2)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "local auth = 'Digest username=\"' .. self.username\r\n                  .. '\", realm=\"' .. self.realm\r\n                  .. '\", nonce=\"' .. self.nonce\r\n                  .. '\", uri=\"' .. uri\r\n                  .. '\", algorithm=\"' .. self.algorithm\r\n                  .. '\", nc=' .. nc\r\n                  .. ', cnonce=\"' .. cnonce\r\n                  .. '\", response=\"' .. response\r\n                  .. '\", opaque=\"' .. self.opaque .. '\"'",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if self.qop then\r\n            auth = auth .. ', qop=' .. self.qop\r\n        end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "auth = auth .. ', qop=' .. self.qop",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "req.headers['authorization'] = auth",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "if req.env.spore.authentication and self.username and self.password then\r\n        if self.nonce then\r\n            req:finalize()\r\n            add_header()\r\n        end\r\n\r\n        return  function (res)\r\n            if res.status == 401 and res.headers['www-authenticate'] then\r\n                for k, v in res.headers['www-authenticate']:gmatch'(%w+)=\"([^\"]*)\"' do\r\n                    self[k] = v\r\n                end\r\n                if self.qop then\r\n                    for v in self.qop:gmatch'([%w%-]+)[,;]?' do\r\n                        self.qop = v\r\n                        if v == 'auth' then\r\n                            break\r\n                        end\r\n                    end\r\n                    if self.qop ~= 'auth' then\r\n                        error(self.qop .. \" is not supported\")\r\n                    end\r\n                end\r\n                if not self.algorithm then\r\n                    self.algorithm = 'MD5'\r\n                end\r\n                if self.algorithm ~= 'MD5' then\r\n                    error(self.algorithm .. \" is not supported\")\r\n                end\r\n                self.nc = 0\r\n                add_header()\r\n                return Protocols.request(req)\r\n            end\r\n            return res\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "if self.nonce then\r\n            req:finalize()\r\n            add_header()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "req:finalize()",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "add_header()",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "if res.status == 401 and res.headers['www-authenticate'] then\r\n                for k, v in res.headers['www-authenticate']:gmatch'(%w+)=\"([^\"]*)\"' do\r\n                    self[k] = v\r\n                end\r\n                if self.qop then\r\n                    for v in self.qop:gmatch'([%w%-]+)[,;]?' do\r\n                        self.qop = v\r\n                        if v == 'auth' then\r\n                            break\r\n                        end\r\n                    end\r\n                    if self.qop ~= 'auth' then\r\n                        error(self.qop .. \" is not supported\")\r\n                    end\r\n                end\r\n                if not self.algorithm then\r\n                    self.algorithm = 'MD5'\r\n                end\r\n                if self.algorithm ~= 'MD5' then\r\n                    error(self.algorithm .. \" is not supported\")\r\n                end\r\n                self.nc = 0\r\n                add_header()\r\n                return Protocols.request(req)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "for k, v in res.headers['www-authenticate']:gmatch'(%w+)=\"([^\"]*)\"' do\r\n                    self[k] = v\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 32,
    "text": "self[k] = v",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if self.qop then\r\n                    for v in self.qop:gmatch'([%w%-]+)[,;]?' do\r\n                        self.qop = v\r\n                        if v == 'auth' then\r\n                            break\r\n                        end\r\n                    end\r\n                    if self.qop ~= 'auth' then\r\n                        error(self.qop .. \" is not supported\")\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "for v in self.qop:gmatch'([%w%-]+)[,;]?' do\r\n                        self.qop = v\r\n                        if v == 'auth' then\r\n                            break\r\n                        end\r\n                    end",
    "type": "statement:genericfor"
  }, {
    "id": 35,
    "text": "self.qop = v",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "if v == 'auth' then\r\n                            break\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "if self.qop ~= 'auth' then\r\n                        error(self.qop .. \" is not supported\")\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "error(self.qop .. \" is not supported\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "if not self.algorithm then\r\n                    self.algorithm = 'MD5'\r\n                end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "self.algorithm = 'MD5'",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "if self.algorithm ~= 'MD5' then\r\n                    error(self.algorithm .. \" is not supported\")\r\n                end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "error(self.algorithm .. \" is not supported\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "self.nc = 0",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function add_header ()\r\n        self.nc = self.nc + 1\r\n        local nc = format('%08X', self.nc)\r\n        local cnonce = m.generate_nonce()\r\n        local uri = path_query(req.url)\r\n        local ha1, ha2, response\r\n        ha1 = digest('md5', self.username .. ':'\r\n                         .. self.realm .. ':'\r\n                         .. self.password)\r\n        ha2 = digest('md5', req.method .. ':'\r\n                         .. uri)\r\n        if self.qop then\r\n            response = digest('md5', ha1 .. ':'\r\n                                  .. self.nonce .. ':'\r\n                                  .. nc .. ':'\r\n                                  .. cnonce .. ':'\r\n                                  .. self.qop .. ':'\r\n                                  .. ha2)\r\n        else\r\n            response = digest('md5', ha1 .. ':'\r\n                                  .. self.nonce .. ':'\r\n                                  .. ha2)\r\n        end\r\n        local auth = 'Digest username=\"' .. self.username\r\n                  .. '\", realm=\"' .. self.realm\r\n                  .. '\", nonce=\"' .. self.nonce\r\n                  .. '\", uri=\"' .. uri\r\n                  .. '\", algorithm=\"' .. self.algorithm\r\n                  .. '\", nc=' .. nc\r\n                  .. ', cnonce=\"' .. cnonce\r\n                  .. '\", response=\"' .. response\r\n                  .. '\", opaque=\"' .. self.opaque .. '\"'\r\n        if self.qop then\r\n            auth = auth .. ', qop=' .. self.qop\r\n        end\r\n        req.headers['authorization'] = auth\r\n    end",
    "type": "function"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function (res)\r\n            if res.status == 401 and res.headers['www-authenticate'] then\r\n                for k, v in res.headers['www-authenticate']:gmatch'(%w+)=\"([^\"]*)\"' do\r\n                    self[k] = v\r\n                end\r\n                if self.qop then\r\n                    for v in self.qop:gmatch'([%w%-]+)[,;]?' do\r\n                        self.qop = v\r\n                        if v == 'auth' then\r\n                            break\r\n                        end\r\n                    end\r\n                    if self.qop ~= 'auth' then\r\n                        error(self.qop .. \" is not supported\")\r\n                    end\r\n                end\r\n                if not self.algorithm then\r\n                    self.algorithm = 'MD5'\r\n                end\r\n                if self.algorithm ~= 'MD5' then\r\n                    error(self.algorithm .. \" is not supported\")\r\n                end\r\n                self.nc = 0\r\n                add_header()\r\n                return Protocols.request(req)\r\n            end\r\n            return res\r\n        end",
    "type": "function"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "",
    "type": "function container"
  }, {
    "id": 50,
    "text": "function m.generate_timestamp ()\r\n    return tostring(time())\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "function m.generate_nonce ()\r\n    return digest('sha1', tostring(random()) .. 'random' .. tostring(time()), 'keyyyy')\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "function m.reset ()\r\n    collectgarbage 'collect'\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local function request (req)\r\n    local spore = req.env.spore\r\n    local prot = protocol[spore.url_scheme]\r\n    assert(prot, \"not protocol \" .. spore.url_scheme)\r\n\r\n    local form_data = spore.form_data\r\n    if form_data then\r\n        local content, boundary = _form_data(form_data)\r\n        req.source = ltn12.source.string(content)\r\n        req.headers['content-length'] = content:len()\r\n        req.headers['content-type'] = 'multipart/form-data; boundary=' .. boundary\r\n    end\r\n\r\n    local payload = spore.payload\r\n    if payload then\r\n        if payload:sub(1, 1) == '@' then\r\n            local fname = payload:sub(2)\r\n            payload = slurp(fname)\r\n        end\r\n        req.source = ltn12.source.string(payload)\r\n        req.headers['content-length'] = payload:len()\r\n        req.headers['content-type'] = req.headers['content-type'] or 'application/x-www-form-urlencoded'\r\n    end\r\n\r\n    if req.method == 'POST' and not req.headers['content-length'] then\r\n        req.headers['content-length'] = 0\r\n    end\r\n\r\n    local t = {}\r\n    req.sink = ltn12.sink.table(t)\r\n\r\n    if spore.debug then\r\n        spore.debug:write(req.method, \" \", req.url, \"\\n\")\r\n        for k, v in pairs(req.headers) do\r\n            spore.debug:write(k, \": \", v, \"\\n\")\r\n        end\r\n    end\r\n    local r, status, headers, line = prot.request(req)\r\n    if spore.debug then\r\n        spore.debug:write(line or status, \"\\n\")\r\n    end\r\n    return {\r\n        request = req,\r\n        status = status,\r\n        headers = headers,\r\n        body = tconcat(t),\r\n    }\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "function m.new (env)\r\n    local obj = {\r\n        env = env,\r\n        redirect = m.redirect,\r\n        headers = {\r\n            ['user-agent'] = env.HTTP_USER_AGENT,\r\n        },\r\n    }\r\n    return setmetatable(obj, {\r\n        __index = m,\r\n    })\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "os",
    "type": "module"
  }, {
    "id": 56,
    "text": "string",
    "type": "module"
  }, {
    "id": 57,
    "text": "build",
    "type": "global function"
  }, {
    "id": 58,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 59,
    "text": "time",
    "type": "global function"
  }, {
    "id": 60,
    "text": "digest",
    "type": "global function"
  }, {
    "id": 61,
    "text": "error",
    "type": "global function"
  }, {
    "id": 62,
    "text": "require",
    "type": "global function"
  }, {
    "id": 63,
    "text": "format",
    "type": "global function"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "local variable"
  }, {
    "id": 67,
    "text": "crypto",
    "type": "module"
  }, {
    "id": 68,
    "text": "",
    "type": "local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "local variable"
  }, {
    "id": 71,
    "text": "url",
    "type": "module"
  }, {
    "id": 72,
    "text": "",
    "type": "variable container"
  }, {
    "id": 73,
    "text": "",
    "type": "require container"
  }, {
    "id": 74,
    "text": "",
    "type": "local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "n/a"
  }, {
    "id": 76,
    "text": "",
    "type": "local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "n/a"
  }, {
    "id": 78,
    "text": "",
    "type": "local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 80,
    "text": "",
    "type": "global variable"
  }, {
    "id": 81,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "interface container"
  }, {
    "id": 87,
    "text": "",
    "type": "interface"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  } ]
}