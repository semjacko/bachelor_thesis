{
  "_filename": "OAuth.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-spore/src/Spore/Middleware/Auth/OAuth.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 7
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 22
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 20
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 15,
    "label": "has",
    "to": 28
  }, {
    "from": 15,
    "label": "has",
    "to": 29
  }, {
    "from": 15,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 15,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 31
  }, {
    "from": 15,
    "label": "has",
    "to": 33
  }, {
    "from": 15,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 20
  }, {
    "from": 34,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 35
  }, {
    "from": 15,
    "label": "has",
    "to": 36
  }, {
    "from": 15,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 15,
    "label": "has",
    "to": 41
  }, {
    "from": 15,
    "label": "has",
    "to": 7
  }, {
    "from": 11,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 42,
    "label": "has",
    "to": 49
  }, {
    "from": 42,
    "label": "has",
    "to": 50
  }, {
    "from": 42,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 51,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 51,
    "label": "has",
    "to": 61
  }, {
    "from": 42,
    "label": "has",
    "to": 62
  }, {
    "from": 42,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 42,
    "label": "has",
    "to": 65
  }, {
    "from": 42,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 42,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 42,
    "label": "has",
    "to": 73
  }, {
    "from": 11,
    "label": "has",
    "to": 7
  }, {
    "from": 11,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 16
  }, {
    "from": 75,
    "label": "has",
    "to": 17
  }, {
    "from": 75,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 75,
    "label": "has",
    "to": 22
  }, {
    "from": 75,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 20
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 75,
    "label": "has",
    "to": 28
  }, {
    "from": 75,
    "label": "has",
    "to": 29
  }, {
    "from": 75,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 75,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 31
  }, {
    "from": 75,
    "label": "has",
    "to": 33
  }, {
    "from": 75,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 20
  }, {
    "from": 34,
    "label": "has",
    "to": 21
  }, {
    "from": 75,
    "label": "has",
    "to": 35
  }, {
    "from": 75,
    "label": "has",
    "to": 36
  }, {
    "from": 75,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 75,
    "label": "has",
    "to": 41
  }, {
    "from": 75,
    "label": "has",
    "to": 7
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 11,
    "label": "calls",
    "to": 75
  }, {
    "from": 9,
    "label": "calls",
    "to": 89
  }, {
    "from": 11,
    "label": "calls",
    "to": 89
  }, {
    "from": 75,
    "label": "calls",
    "to": 93
  }, {
    "from": 75,
    "label": "calls",
    "to": 93
  }, {
    "from": 11,
    "label": "calls",
    "to": 93
  }, {
    "from": 11,
    "label": "calls",
    "to": 93
  }, {
    "from": 11,
    "label": "calls",
    "to": 93
  }, {
    "from": 11,
    "label": "calls",
    "to": 93
  }, {
    "from": 11,
    "label": "calls",
    "to": 93
  }, {
    "from": 77,
    "label": "calls",
    "to": 97
  }, {
    "from": 77,
    "label": "calls",
    "to": 97
  }, {
    "from": 77,
    "label": "calls",
    "to": 97
  }, {
    "from": 77,
    "label": "calls",
    "to": 97
  }, {
    "from": 77,
    "label": "calls",
    "to": 97
  }, {
    "from": 77,
    "label": "calls",
    "to": 97
  }, {
    "from": 77,
    "label": "calls",
    "to": 97
  }, {
    "from": 77,
    "label": "calls",
    "to": 97
  }, {
    "from": 77,
    "label": "calls",
    "to": 97
  }, {
    "from": 77,
    "label": "calls",
    "to": 97
  }, {
    "from": 11,
    "label": "calls",
    "to": 90
  }, {
    "from": 75,
    "label": "calls",
    "to": 96
  }, {
    "from": 6,
    "label": "calls",
    "to": 87
  }, {
    "from": 9,
    "label": "calls",
    "to": 87
  }, {
    "from": 9,
    "label": "calls",
    "to": 87
  }, {
    "from": 11,
    "label": "calls",
    "to": 87
  }, {
    "from": 11,
    "label": "calls",
    "to": 9
  }, {
    "from": 11,
    "label": "calls",
    "to": 91
  }, {
    "from": 75,
    "label": "calls",
    "to": 92
  }, {
    "from": 9,
    "label": "calls",
    "to": 94
  }, {
    "from": 75,
    "label": "calls",
    "to": 95
  }, {
    "from": 11,
    "label": "calls",
    "to": 95
  }, {
    "from": 11,
    "label": "calls",
    "to": 86
  }, {
    "from": 6,
    "label": "calls",
    "to": 88
  }, {
    "from": 9,
    "label": "calls",
    "to": 88
  }, {
    "from": 11,
    "label": "calls",
    "to": 6
  }, {
    "from": 75,
    "label": "calls",
    "to": 83
  }, {
    "from": 1,
    "label": "contains",
    "to": 77
  }, {
    "from": 77,
    "label": "declares",
    "to": 6
  }, {
    "from": 77,
    "label": "declares",
    "to": 9
  }, {
    "from": 77,
    "label": "declares",
    "to": 11
  }, {
    "from": 77,
    "label": "declares",
    "to": 75
  }, {
    "from": 1,
    "label": "contains",
    "to": 107
  }, {
    "from": 1,
    "label": "contains",
    "to": 108
  }, {
    "from": 107,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 107,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 107,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 107,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 107,
    "label": "initializes",
    "to": 117
  }, {
    "from": 108,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "requires",
    "to": 82
  }, {
    "from": 108,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "requires",
    "to": 80
  }, {
    "from": 108,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "requires",
    "to": 81
  }, {
    "from": 108,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "requires",
    "to": 84
  }, {
    "from": 108,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "requires",
    "to": 84
  }, {
    "from": 108,
    "label": "initializes",
    "to": 123
  }, {
    "from": 123,
    "label": "requires",
    "to": 101
  }, {
    "from": 108,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "requires",
    "to": 85
  }, {
    "from": 108,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "requires",
    "to": 105
  }, {
    "from": 108,
    "label": "initializes",
    "to": 126
  }, {
    "from": 126,
    "label": "requires",
    "to": 3
  }, {
    "from": 108,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 128
  }, {
    "from": 98,
    "label": "represents",
    "to": 129
  }, {
    "from": 128,
    "label": "provides",
    "to": 129
  }, {
    "from": 115,
    "label": "contains",
    "to": 4
  }, {
    "from": 115,
    "label": "contains",
    "to": 5
  }, {
    "from": 98,
    "label": "contains",
    "to": 6
  }, {
    "from": 99,
    "label": "contains",
    "to": 6
  }, {
    "from": 100,
    "label": "contains",
    "to": 6
  }, {
    "from": 102,
    "label": "contains",
    "to": 6
  }, {
    "from": 103,
    "label": "contains",
    "to": 6
  }, {
    "from": 104,
    "label": "contains",
    "to": 6
  }, {
    "from": 106,
    "label": "contains",
    "to": 6
  }, {
    "from": 115,
    "label": "contains",
    "to": 6
  }, {
    "from": 130,
    "label": "contains",
    "to": 6
  }, {
    "from": 131,
    "label": "contains",
    "to": 6
  }, {
    "from": 132,
    "label": "contains",
    "to": 6
  }, {
    "from": 133,
    "label": "contains",
    "to": 6
  }, {
    "from": 134,
    "label": "contains",
    "to": 6
  }, {
    "from": 135,
    "label": "contains",
    "to": 6
  }, {
    "from": 136,
    "label": "contains",
    "to": 6
  }, {
    "from": 137,
    "label": "contains",
    "to": 6
  }, {
    "from": 138,
    "label": "contains",
    "to": 6
  }, {
    "from": 139,
    "label": "contains",
    "to": 6
  }, {
    "from": 140,
    "label": "contains",
    "to": 6
  }, {
    "from": 141,
    "label": "contains",
    "to": 6
  }, {
    "from": 142,
    "label": "contains",
    "to": 6
  }, {
    "from": 143,
    "label": "contains",
    "to": 6
  }, {
    "from": 144,
    "label": "contains",
    "to": 6
  }, {
    "from": 145,
    "label": "contains",
    "to": 6
  }, {
    "from": 98,
    "label": "contains",
    "to": 9
  }, {
    "from": 99,
    "label": "contains",
    "to": 9
  }, {
    "from": 100,
    "label": "contains",
    "to": 9
  }, {
    "from": 102,
    "label": "contains",
    "to": 9
  }, {
    "from": 103,
    "label": "contains",
    "to": 9
  }, {
    "from": 104,
    "label": "contains",
    "to": 9
  }, {
    "from": 106,
    "label": "contains",
    "to": 9
  }, {
    "from": 115,
    "label": "contains",
    "to": 9
  }, {
    "from": 130,
    "label": "contains",
    "to": 9
  }, {
    "from": 131,
    "label": "contains",
    "to": 9
  }, {
    "from": 132,
    "label": "contains",
    "to": 9
  }, {
    "from": 133,
    "label": "contains",
    "to": 9
  }, {
    "from": 134,
    "label": "contains",
    "to": 9
  }, {
    "from": 135,
    "label": "contains",
    "to": 9
  }, {
    "from": 136,
    "label": "contains",
    "to": 9
  }, {
    "from": 137,
    "label": "contains",
    "to": 9
  }, {
    "from": 138,
    "label": "contains",
    "to": 9
  }, {
    "from": 139,
    "label": "contains",
    "to": 9
  }, {
    "from": 140,
    "label": "contains",
    "to": 9
  }, {
    "from": 141,
    "label": "contains",
    "to": 9
  }, {
    "from": 142,
    "label": "contains",
    "to": 9
  }, {
    "from": 143,
    "label": "contains",
    "to": 9
  }, {
    "from": 144,
    "label": "contains",
    "to": 9
  }, {
    "from": 145,
    "label": "contains",
    "to": 9
  }, {
    "from": 115,
    "label": "contains",
    "to": 78
  }, {
    "from": 115,
    "label": "contains",
    "to": 79
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "OAuth",
    "type": "module"
  }, {
    "id": 2,
    "text": "Protocols",
    "type": "module"
  }, {
    "id": 3,
    "text": "Request",
    "type": "module"
  }, {
    "id": 4,
    "text": "function m.new_from_discovery (api, opts)\r\n    opts = opts or {}\r\n    checktype('new_from_discovery', 2, opts, 'table')\r\n    if type(api) == 'string' then\r\n        local content = slurp(api)\r\n        return new_from_lua(convert(decode(content)), opts)\r\n    end\r\n    if type(api) == 'table' then\r\n        local discovery = new_from_lua {\r\n            base_url = 'https://www.googleapis.com/discovery/v1/',\r\n            methods = {\r\n                get = {\r\n                    path = 'apis/:api/:version/rest',\r\n                    method = 'GET',\r\n                    required_params = { 'api', 'version' },\r\n                    expected_status = { 200 },\r\n                },\r\n            },\r\n        }\r\n        discovery:enable 'Format.JSON'\r\n        local r = discovery:get(api)\r\n        return new_from_lua(convert(r.body), opts)\r\n    end\r\n    error(\"bad argument #1 to new_from_discovery (string or table expected, got \"\r\n          .. type(api) .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function m.generate_nonce ()\r\n    return format('%08x', time())\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function m.generate_timestamp ()\r\n    return tostring(time())\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function m.generate_nonce ()\r\n    return digest('sha1', tostring(random()) .. 'random' .. tostring(time()), 'keyyyy')\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function m:call (req)\r\n    local env = req.env\r\n    local spore = env.spore\r\n    local oparams\r\n\r\n    local function base_string ()\r\n        local query_keys, query_vals = {}, {}\r\n        local query_string = env.QUERY_STRING\r\n        if query_string then\r\n            for k, v in query_string:gmatch '([^=]+)=([^&]*)&?' do\r\n                query_keys[#query_keys+1] = k\r\n                query_vals[k] = v\r\n            end\r\n        end\r\n        local payload = spore.payload\r\n        if payload then\r\n            local ct = req.headers['content-type']\r\n            if not ct or ct == 'application/x-www-form-urlencoded' then\r\n                for k, v in payload:gmatch '([^=&]+)=?([^&]*)&?' do\r\n                    query_keys[#query_keys+1] = k\r\n                    query_vals[k] = v:gsub('+', '%%20')\r\n                end\r\n            end\r\n        end\r\n\r\n        local scheme = spore.url_scheme\r\n        local port = env.SERVER_PORT\r\n        if port == '80' and scheme == 'http' then\r\n            port = nil\r\n        end\r\n        if port == '443' and scheme == 'https' then\r\n            port = nil\r\n        end\r\n        local base_url = url.build {\r\n            scheme  = scheme,\r\n            host    = env.SERVER_NAME,\r\n            port    = port,\r\n            path    = env.PATH_INFO,\r\n            -- no query\r\n        }\r\n        for k, v in pairs(oparams) do\r\n            query_keys[#query_keys+1] = k\r\n            query_vals[k] = v\r\n        end\r\n        tsort(query_keys)\r\n        local params = {}\r\n        for i = 1, #query_keys do\r\n            local k = query_keys[i]\r\n            local v = query_vals[k]\r\n            params[#params+1] = k .. '=' .. v\r\n        end\r\n        local normalized = tconcat(params, '&')\r\n\r\n        return req.method:upper() .. '&' .. escape(base_url) .. '&' .. escape(normalized)\r\n    end  -- base_string\r\n\r\n    if spore.authentication\r\n    and self.oauth_consumer_key and self.oauth_consumer_secret then\r\n        oparams = {\r\n            oauth_signature_method  = self.oauth_signature_method or 'HMAC-SHA1',\r\n            oauth_consumer_key      = self.oauth_consumer_key,\r\n            oauth_token             = self.oauth_token,\r\n            oauth_verifier          = self.oauth_verifier,\r\n        }\r\n        if not oparams.oauth_token then\r\n            oparams.oauth_callback  = self.oauth_callback or 'oob'      -- out-of-band\r\n        end\r\n        for k, v in pairs(oparams) do\r\n            oparams[k] = escape(v)\r\n        end\r\n\r\n        req:finalize()\r\n\r\n        local signature_key = escape(self.oauth_consumer_secret) .. '&' .. escape(self.oauth_token_secret or '')\r\n        local oauth_signature\r\n        if self.oauth_signature_method == 'PLAINTEXT' then\r\n            oauth_signature = escape(signature_key)\r\n        else\r\n            oparams.oauth_timestamp = m.generate_timestamp()\r\n            oparams.oauth_nonce = m.generate_nonce()\r\n            local oauth_signature_base_string = base_string()\r\n            if oparams.oauth_signature_method == 'HMAC-SHA1' then\r\n                local hmac_binary = digest('sha1', oauth_signature_base_string, signature_key, true)\r\n                local hmac_b64 = mime.b64(hmac_binary)\r\n                oauth_signature = escape(hmac_b64)\r\n            else\r\n                error(oparams.oauth_signature_method .. \" is not supported\")\r\n            end\r\n            spore.oauth_signature_base_string = oauth_signature_base_string\r\n        end\r\n\r\n        local auth = 'OAuth'\r\n        if self.realm then\r\n            auth = auth .. ' realm=\"' .. tostring(self.realm) .. '\",'\r\n        end\r\n        auth = auth ..  ' oauth_consumer_key=\"' .. oparams.oauth_consumer_key .. '\"'\r\n                    .. ', oauth_signature_method=\"' .. oparams.oauth_signature_method .. '\"'\r\n                    .. ', oauth_signature=\"' .. oauth_signature ..'\"'\r\n        if oparams.oauth_signature_method ~= 'PLAINTEXT' then\r\n            auth = auth .. ', oauth_timestamp=\"' .. oparams.oauth_timestamp .. '\"'\r\n                        .. ', oauth_nonce=\"' .. oparams.oauth_nonce .. '\"'\r\n        end\r\n        if not oparams.oauth_token then      -- 1) request token\r\n            auth = auth .. ', oauth_callback=\"' .. oparams.oauth_callback .. '\"'\r\n        else\r\n            if oparams.oauth_verifier then   -- 2) access token\r\n                auth = auth .. ', oauth_token=\"' .. oparams.oauth_token .. '\"'\r\n                            .. ', oauth_verifier=\"' .. oparams.oauth_verifier .. '\"'\r\n            else                            -- 3) client requests\r\n                auth = auth .. ', oauth_token=\"' .. oparams.oauth_token .. '\"'\r\n            end\r\n        end\r\n        req.headers['authorization'] = auth\r\n\r\n        return request(req)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local env = req.env",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local spore = env.spore",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local oparams",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local function base_string ()\r\n        local query_keys, query_vals = {}, {}\r\n        local query_string = env.QUERY_STRING\r\n        if query_string then\r\n            for k, v in query_string:gmatch '([^=]+)=([^&]*)&?' do\r\n                query_keys[#query_keys+1] = k\r\n                query_vals[k] = v\r\n            end\r\n        end\r\n        local payload = spore.payload\r\n        if payload then\r\n            local ct = req.headers['content-type']\r\n            if not ct or ct == 'application/x-www-form-urlencoded' then\r\n                for k, v in payload:gmatch '([^=&]+)=?([^&]*)&?' do\r\n                    query_keys[#query_keys+1] = k\r\n                    query_vals[k] = v:gsub('+', '%%20')\r\n                end\r\n            end\r\n        end\r\n\r\n        local scheme = spore.url_scheme\r\n        local port = env.SERVER_PORT\r\n        if port == '80' and scheme == 'http' then\r\n            port = nil\r\n        end\r\n        if port == '443' and scheme == 'https' then\r\n            port = nil\r\n        end\r\n        local base_url = url.build {\r\n            scheme  = scheme,\r\n            host    = env.SERVER_NAME,\r\n            port    = port,\r\n            path    = env.PATH_INFO,\r\n            -- no query\r\n        }\r\n        for k, v in pairs(oparams) do\r\n            query_keys[#query_keys+1] = k\r\n            query_vals[k] = v\r\n        end\r\n        tsort(query_keys)\r\n        local params = {}\r\n        for i = 1, #query_keys do\r\n            local k = query_keys[i]\r\n            local v = query_vals[k]\r\n            params[#params+1] = k .. '=' .. v\r\n        end\r\n        local normalized = tconcat(params, '&')\r\n\r\n        return req.method:upper() .. '&' .. escape(base_url) .. '&' .. escape(normalized)\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 16,
    "text": "local query_keys, query_vals = {}, {}",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local query_string = env.QUERY_STRING",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if query_string then\r\n            for k, v in query_string:gmatch '([^=]+)=([^&]*)&?' do\r\n                query_keys[#query_keys+1] = k\r\n                query_vals[k] = v\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "for k, v in query_string:gmatch '([^=]+)=([^&]*)&?' do\r\n                query_keys[#query_keys+1] = k\r\n                query_vals[k] = v\r\n            end",
    "type": "statement:genericfor"
  }, {
    "id": 20,
    "text": "query_keys[#query_keys+1] = k",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "query_vals[k] = v",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "local payload = spore.payload",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if payload then\r\n            local ct = req.headers['content-type']\r\n            if not ct or ct == 'application/x-www-form-urlencoded' then\r\n                for k, v in payload:gmatch '([^=&]+)=?([^&]*)&?' do\r\n                    query_keys[#query_keys+1] = k\r\n                    query_vals[k] = v:gsub('+', '%%20')\r\n                end\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "local ct = req.headers['content-type']",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if not ct or ct == 'application/x-www-form-urlencoded' then\r\n                for k, v in payload:gmatch '([^=&]+)=?([^&]*)&?' do\r\n                    query_keys[#query_keys+1] = k\r\n                    query_vals[k] = v:gsub('+', '%%20')\r\n                end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "for k, v in payload:gmatch '([^=&]+)=?([^&]*)&?' do\r\n                    query_keys[#query_keys+1] = k\r\n                    query_vals[k] = v:gsub('+', '%%20')\r\n                end",
    "type": "statement:genericfor"
  }, {
    "id": 27,
    "text": "query_vals[k] = v:gsub('+', '%%20')",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "local scheme = spore.url_scheme",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local port = env.SERVER_PORT",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if port == '80' and scheme == 'http' then\r\n            port = nil\r\n        end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "port = nil",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "if port == '443' and scheme == 'https' then\r\n            port = nil\r\n        end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "local base_url = url.build {\r\n            scheme  = scheme,\r\n            host    = env.SERVER_NAME,\r\n            port    = port,\r\n            path    = env.PATH_INFO,\r\n            -- no query\r\n        }",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "for k, v in pairs(oparams) do\r\n            query_keys[#query_keys+1] = k\r\n            query_vals[k] = v\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 35,
    "text": "tsort(query_keys)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "local params = {}",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "for i = 1, #query_keys do\r\n            local k = query_keys[i]\r\n            local v = query_vals[k]\r\n            params[#params+1] = k .. '=' .. v\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 38,
    "text": "local k = query_keys[i]",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local v = query_vals[k]",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "params[#params+1] = k .. '=' .. v",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "local normalized = tconcat(params, '&')",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "if spore.authentication\r\n    and self.oauth_consumer_key and self.oauth_consumer_secret then\r\n        oparams = {\r\n            oauth_signature_method  = self.oauth_signature_method or 'HMAC-SHA1',\r\n            oauth_consumer_key      = self.oauth_consumer_key,\r\n            oauth_token             = self.oauth_token,\r\n            oauth_verifier          = self.oauth_verifier,\r\n        }\r\n        if not oparams.oauth_token then\r\n            oparams.oauth_callback  = self.oauth_callback or 'oob'      -- out-of-band\r\n        end\r\n        for k, v in pairs(oparams) do\r\n            oparams[k] = escape(v)\r\n        end\r\n\r\n        req:finalize()\r\n\r\n        local signature_key = escape(self.oauth_consumer_secret) .. '&' .. escape(self.oauth_token_secret or '')\r\n        local oauth_signature\r\n        if self.oauth_signature_method == 'PLAINTEXT' then\r\n            oauth_signature = escape(signature_key)\r\n        else\r\n            oparams.oauth_timestamp = m.generate_timestamp()\r\n            oparams.oauth_nonce = m.generate_nonce()\r\n            local oauth_signature_base_string = base_string()\r\n            if oparams.oauth_signature_method == 'HMAC-SHA1' then\r\n                local hmac_binary = digest('sha1', oauth_signature_base_string, signature_key, true)\r\n                local hmac_b64 = mime.b64(hmac_binary)\r\n                oauth_signature = escape(hmac_b64)\r\n            else\r\n                error(oparams.oauth_signature_method .. \" is not supported\")\r\n            end\r\n            spore.oauth_signature_base_string = oauth_signature_base_string\r\n        end\r\n\r\n        local auth = 'OAuth'\r\n        if self.realm then\r\n            auth = auth .. ' realm=\"' .. tostring(self.realm) .. '\",'\r\n        end\r\n        auth = auth ..  ' oauth_consumer_key=\"' .. oparams.oauth_consumer_key .. '\"'\r\n                    .. ', oauth_signature_method=\"' .. oparams.oauth_signature_method .. '\"'\r\n                    .. ', oauth_signature=\"' .. oauth_signature ..'\"'\r\n        if oparams.oauth_signature_method ~= 'PLAINTEXT' then\r\n            auth = auth .. ', oauth_timestamp=\"' .. oparams.oauth_timestamp .. '\"'\r\n                        .. ', oauth_nonce=\"' .. oparams.oauth_nonce .. '\"'\r\n        end\r\n        if not oparams.oauth_token then      -- 1) request token\r\n            auth = auth .. ', oauth_callback=\"' .. oparams.oauth_callback .. '\"'\r\n        else\r\n            if oparams.oauth_verifier then   -- 2) access token\r\n                auth = auth .. ', oauth_token=\"' .. oparams.oauth_token .. '\"'\r\n                            .. ', oauth_verifier=\"' .. oparams.oauth_verifier .. '\"'\r\n            else                            -- 3) client requests\r\n                auth = auth .. ', oauth_token=\"' .. oparams.oauth_token .. '\"'\r\n            end\r\n        end\r\n        req.headers['authorization'] = auth\r\n\r\n        return request(req)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "oparams = {\r\n            oauth_signature_method  = self.oauth_signature_method or 'HMAC-SHA1',\r\n            oauth_consumer_key      = self.oauth_consumer_key,\r\n            oauth_token             = self.oauth_token,\r\n            oauth_verifier          = self.oauth_verifier,\r\n        }",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "if not oparams.oauth_token then\r\n            oparams.oauth_callback  = self.oauth_callback or 'oob'      -- out-of-band\r\n        end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "oparams.oauth_callback  = self.oauth_callback or 'oob'",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "for k, v in pairs(oparams) do\r\n            oparams[k] = escape(v)\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 47,
    "text": "oparams[k] = escape(v)",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "req:finalize()",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "local signature_key = escape(self.oauth_consumer_secret) .. '&' .. escape(self.oauth_token_secret or '')",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local oauth_signature",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "if self.oauth_signature_method == 'PLAINTEXT' then\r\n            oauth_signature = escape(signature_key)\r\n        else\r\n            oparams.oauth_timestamp = m.generate_timestamp()\r\n            oparams.oauth_nonce = m.generate_nonce()\r\n            local oauth_signature_base_string = base_string()\r\n            if oparams.oauth_signature_method == 'HMAC-SHA1' then\r\n                local hmac_binary = digest('sha1', oauth_signature_base_string, signature_key, true)\r\n                local hmac_b64 = mime.b64(hmac_binary)\r\n                oauth_signature = escape(hmac_b64)\r\n            else\r\n                error(oparams.oauth_signature_method .. \" is not supported\")\r\n            end\r\n            spore.oauth_signature_base_string = oauth_signature_base_string\r\n        end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "oauth_signature = escape(signature_key)",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "oparams.oauth_timestamp = m.generate_timestamp()",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "oparams.oauth_nonce = m.generate_nonce()",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "local oauth_signature_base_string = base_string()",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if oparams.oauth_signature_method == 'HMAC-SHA1' then\r\n                local hmac_binary = digest('sha1', oauth_signature_base_string, signature_key, true)\r\n                local hmac_b64 = mime.b64(hmac_binary)\r\n                oauth_signature = escape(hmac_b64)\r\n            else\r\n                error(oparams.oauth_signature_method .. \" is not supported\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "local hmac_binary = digest('sha1', oauth_signature_base_string, signature_key, true)",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local hmac_b64 = mime.b64(hmac_binary)",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "oauth_signature = escape(hmac_b64)",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "error(oparams.oauth_signature_method .. \" is not supported\")",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "spore.oauth_signature_base_string = oauth_signature_base_string",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "local auth = 'OAuth'",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if self.realm then\r\n            auth = auth .. ' realm=\"' .. tostring(self.realm) .. '\",'\r\n        end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "auth = auth .. ' realm=\"' .. tostring(self.realm) .. '\",'",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "auth = auth ..  ' oauth_consumer_key=\"' .. oparams.oauth_consumer_key .. '\"'\r\n                    .. ', oauth_signature_method=\"' .. oparams.oauth_signature_method .. '\"'\r\n                    .. ', oauth_signature=\"' .. oauth_signature ..'\"'",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "if oparams.oauth_signature_method ~= 'PLAINTEXT' then\r\n            auth = auth .. ', oauth_timestamp=\"' .. oparams.oauth_timestamp .. '\"'\r\n                        .. ', oauth_nonce=\"' .. oparams.oauth_nonce .. '\"'\r\n        end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "auth = auth .. ', oauth_timestamp=\"' .. oparams.oauth_timestamp .. '\"'\r\n                        .. ', oauth_nonce=\"' .. oparams.oauth_nonce .. '\"'",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "if not oparams.oauth_token then      -- 1) request token\r\n            auth = auth .. ', oauth_callback=\"' .. oparams.oauth_callback .. '\"'\r\n        else\r\n            if oparams.oauth_verifier then   -- 2) access token\r\n                auth = auth .. ', oauth_token=\"' .. oparams.oauth_token .. '\"'\r\n                            .. ', oauth_verifier=\"' .. oparams.oauth_verifier .. '\"'\r\n            else                            -- 3) client requests\r\n                auth = auth .. ', oauth_token=\"' .. oparams.oauth_token .. '\"'\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "auth = auth .. ', oauth_callback=\"' .. oparams.oauth_callback .. '\"'",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "if oparams.oauth_verifier then   -- 2) access token\r\n                auth = auth .. ', oauth_token=\"' .. oparams.oauth_token .. '\"'\r\n                            .. ', oauth_verifier=\"' .. oparams.oauth_verifier .. '\"'\r\n            else                            -- 3) client requests\r\n                auth = auth .. ', oauth_token=\"' .. oparams.oauth_token .. '\"'\r\n            end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "auth = auth .. ', oauth_token=\"' .. oparams.oauth_token .. '\"'\r\n                            .. ', oauth_verifier=\"' .. oparams.oauth_verifier .. '\"'",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "auth = auth .. ', oauth_token=\"' .. oparams.oauth_token .. '\"'",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "req.headers['authorization'] = auth",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "local function base_string ()\r\n        local query_keys, query_vals = {}, {}\r\n        local query_string = env.QUERY_STRING\r\n        if query_string then\r\n            for k, v in query_string:gmatch '([^=]+)=([^&]*)&?' do\r\n                query_keys[#query_keys+1] = k\r\n                query_vals[k] = v\r\n            end\r\n        end\r\n        local payload = spore.payload\r\n        if payload then\r\n            local ct = req.headers['content-type']\r\n            if not ct or ct == 'application/x-www-form-urlencoded' then\r\n                for k, v in payload:gmatch '([^=&]+)=?([^&]*)&?' do\r\n                    query_keys[#query_keys+1] = k\r\n                    query_vals[k] = v:gsub('+', '%%20')\r\n                end\r\n            end\r\n        end\r\n\r\n        local scheme = spore.url_scheme\r\n        local port = env.SERVER_PORT\r\n        if port == '80' and scheme == 'http' then\r\n            port = nil\r\n        end\r\n        if port == '443' and scheme == 'https' then\r\n            port = nil\r\n        end\r\n        local base_url = url.build {\r\n            scheme  = scheme,\r\n            host    = env.SERVER_NAME,\r\n            port    = port,\r\n            path    = env.PATH_INFO,\r\n            -- no query\r\n        }\r\n        for k, v in pairs(oparams) do\r\n            query_keys[#query_keys+1] = k\r\n            query_vals[k] = v\r\n        end\r\n        tsort(query_keys)\r\n        local params = {}\r\n        for i = 1, #query_keys do\r\n            local k = query_keys[i]\r\n            local v = query_vals[k]\r\n            params[#params+1] = k .. '=' .. v\r\n        end\r\n        local normalized = tconcat(params, '&')\r\n\r\n        return req.method:upper() .. '&' .. escape(base_url) .. '&' .. escape(normalized)\r\n    end",
    "type": "function"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "",
    "type": "function container"
  }, {
    "id": 78,
    "text": "function m.reset ()\r\n    collectgarbage 'collect'\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "function m.new (env)\r\n    local obj = {\r\n        env = env,\r\n        redirect = m.redirect,\r\n        headers = {\r\n            ['user-agent'] = env.HTTP_USER_AGENT,\r\n        },\r\n    }\r\n    return setmetatable(obj, {\r\n        __index = m,\r\n    })\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "os",
    "type": "module"
  }, {
    "id": 81,
    "text": "string",
    "type": "module"
  }, {
    "id": 82,
    "text": "math",
    "type": "module"
  }, {
    "id": 83,
    "text": "build",
    "type": "global function"
  }, {
    "id": 84,
    "text": "table",
    "type": "module"
  }, {
    "id": 85,
    "text": "mime",
    "type": "module"
  }, {
    "id": 86,
    "text": "b64",
    "type": "global function"
  }, {
    "id": 87,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 88,
    "text": "time",
    "type": "global function"
  }, {
    "id": 89,
    "text": "digest",
    "type": "global function"
  }, {
    "id": 90,
    "text": "request",
    "type": "global function"
  }, {
    "id": 91,
    "text": "error",
    "type": "global function"
  }, {
    "id": 92,
    "text": "tconcat",
    "type": "global function"
  }, {
    "id": 93,
    "text": "escape",
    "type": "global function"
  }, {
    "id": 94,
    "text": "random",
    "type": "global function"
  }, {
    "id": 95,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 96,
    "text": "tsort",
    "type": "global function"
  }, {
    "id": 97,
    "text": "require",
    "type": "global function"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "crypto",
    "type": "module"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "url",
    "type": "module"
  }, {
    "id": 106,
    "text": "",
    "type": "local variable"
  }, {
    "id": 107,
    "text": "",
    "type": "variable container"
  }, {
    "id": 108,
    "text": "",
    "type": "require container"
  }, {
    "id": 109,
    "text": "",
    "type": "local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "n/a"
  }, {
    "id": 115,
    "text": "",
    "type": "local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 117,
    "text": "",
    "type": "global variable"
  }, {
    "id": 118,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 119,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 121,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 125,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "interface container"
  }, {
    "id": 129,
    "text": "",
    "type": "interface"
  }, {
    "id": 130,
    "text": "",
    "type": "local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "local variable"
  }, {
    "id": 135,
    "text": "",
    "type": "local variable"
  }, {
    "id": 136,
    "text": "",
    "type": "local variable"
  }, {
    "id": 137,
    "text": "",
    "type": "local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "local variable"
  }, {
    "id": 144,
    "text": "",
    "type": "local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "local variable"
  } ]
}