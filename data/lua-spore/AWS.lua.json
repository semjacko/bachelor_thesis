{
  "_filename": "AWS.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-spore/src/Spore/Middleware/Auth/AWS.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 9,
    "label": "has",
    "to": 20
  }, {
    "from": 9,
    "label": "has",
    "to": 20
  }, {
    "from": 4,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 21,
    "label": "has",
    "to": 20
  }, {
    "from": 4,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 36
  }, {
    "from": 27,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 27,
    "label": "has",
    "to": 39
  }, {
    "from": 27,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 27,
    "label": "has",
    "to": 48
  }, {
    "from": 4,
    "label": "has",
    "to": 20
  }, {
    "from": 4,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 10
  }, {
    "from": 50,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 50,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 50,
    "label": "has",
    "to": 20
  }, {
    "from": 50,
    "label": "has",
    "to": 20
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 52,
    "label": "has",
    "to": 24
  }, {
    "from": 52,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 52,
    "label": "has",
    "to": 20
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "calls",
    "to": 63
  }, {
    "from": 4,
    "label": "calls",
    "to": 70
  }, {
    "from": 4,
    "label": "calls",
    "to": 67
  }, {
    "from": 52,
    "label": "calls",
    "to": 50
  }, {
    "from": 50,
    "label": "calls",
    "to": 71
  }, {
    "from": 4,
    "label": "calls",
    "to": 71
  }, {
    "from": 4,
    "label": "calls",
    "to": 64
  }, {
    "from": 4,
    "label": "calls",
    "to": 68
  }, {
    "from": 52,
    "label": "calls",
    "to": 68
  }, {
    "from": 4,
    "label": "calls",
    "to": 68
  }, {
    "from": 4,
    "label": "calls",
    "to": 68
  }, {
    "from": 4,
    "label": "calls",
    "to": 69
  }, {
    "from": 50,
    "label": "calls",
    "to": 62
  }, {
    "from": 4,
    "label": "calls",
    "to": 66
  }, {
    "from": 54,
    "label": "calls",
    "to": 72
  }, {
    "from": 54,
    "label": "calls",
    "to": 72
  }, {
    "from": 54,
    "label": "calls",
    "to": 72
  }, {
    "from": 54,
    "label": "calls",
    "to": 72
  }, {
    "from": 54,
    "label": "calls",
    "to": 72
  }, {
    "from": 54,
    "label": "calls",
    "to": 72
  }, {
    "from": 4,
    "label": "calls",
    "to": 73
  }, {
    "from": 4,
    "label": "calls",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 54
  }, {
    "from": 54,
    "label": "declares",
    "to": 4
  }, {
    "from": 54,
    "label": "declares",
    "to": 50
  }, {
    "from": 54,
    "label": "declares",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 75
  }, {
    "from": 1,
    "label": "contains",
    "to": 76
  }, {
    "from": 75,
    "label": "initializes",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 75,
    "label": "initializes",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 75,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 75,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 75,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 75,
    "label": "initializes",
    "to": 87
  }, {
    "from": 75,
    "label": "initializes",
    "to": 88
  }, {
    "from": 76,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "requires",
    "to": 61
  }, {
    "from": 76,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "requires",
    "to": 60
  }, {
    "from": 76,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "requires",
    "to": 65
  }, {
    "from": 76,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "requires",
    "to": 93
  }, {
    "from": 76,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "requires",
    "to": 2
  }, {
    "from": 76,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 96
  }, {
    "from": 74,
    "label": "represents",
    "to": 97
  }, {
    "from": 96,
    "label": "provides",
    "to": 97
  }, {
    "from": 98,
    "label": "requires",
    "to": 93
  }, {
    "from": 99,
    "label": "requires",
    "to": 93
  }, {
    "from": 100,
    "label": "requires",
    "to": 93
  }, {
    "from": 85,
    "label": "contains",
    "to": 3
  }, {
    "from": 85,
    "label": "contains",
    "to": 55
  }, {
    "from": 85,
    "label": "contains",
    "to": 56
  }, {
    "from": 85,
    "label": "contains",
    "to": 57
  }, {
    "from": 85,
    "label": "contains",
    "to": 58
  }, {
    "from": 85,
    "label": "contains",
    "to": 59
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "AWS",
    "type": "module"
  }, {
    "id": 2,
    "text": "Protocols",
    "type": "module"
  }, {
    "id": 3,
    "text": "function m.new_from_discovery (api, opts)\r\n    opts = opts or {}\r\n    checktype('new_from_discovery', 2, opts, 'table')\r\n    if type(api) == 'string' then\r\n        local content = slurp(api)\r\n        return new_from_lua(convert(decode(content)), opts)\r\n    end\r\n    if type(api) == 'table' then\r\n        local discovery = new_from_lua {\r\n            base_url = 'https://www.googleapis.com/discovery/v1/',\r\n            methods = {\r\n                get = {\r\n                    path = 'apis/:api/:version/rest',\r\n                    method = 'GET',\r\n                    required_params = { 'api', 'version' },\r\n                    expected_status = { 200 },\r\n                },\r\n            },\r\n        }\r\n        discovery:enable 'Format.JSON'\r\n        local r = discovery:get(api)\r\n        return new_from_lua(convert(r.body), opts)\r\n    end\r\n    error(\"bad argument #1 to new_from_discovery (string or table expected, got \"\r\n          .. type(api) .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function m:call (req)\r\n    local env = req.env\r\n    local query = env.QUERY_STRING or ''\r\n    local spore = env.spore\r\n    local bucket = tostring(spore.params.bucket or '')\r\n\r\n    local function get_canonical_headers ()\r\n        local headers_amz = {}\r\n        for k, v in pairs(req.headers) do\r\n            if k:match'^x%-amz%-' then\r\n                headers_amz[#headers_amz+1] = k\r\n            end\r\n        end\r\n        if #headers_amz == 0 then\r\n            return ''\r\n        else\r\n            table.sort(headers_amz)\r\n            local lines = {}\r\n            for i = 1, #headers_amz do\r\n                local k = headers_amz[i]\r\n                lines[#lines+1] = k .. ':' .. req.headers[k]\r\n            end\r\n            return table.concat(lines, \"\\n\") .. \"\\n\"\r\n        end\r\n    end -- get_canonical_headers\r\n\r\n    local function get_string_to_sign ()\r\n        if bucket ~= '' then\r\n            bucket = '/' .. bucket\r\n        end\r\n        local object = '/' .. tostring(spore.params.object or '')\r\n        if query ~= '' then\r\n            query = '?' .. query\r\n        end\r\n\r\n        return req.method .. \"\\n\"\r\n            .. (req.headers['content-md5'] or '') .. \"\\n\"\r\n            .. (req.headers['content-type'] or '') .. \"\\n\"\r\n            .. (req.headers['date'] or '') .. \"\\n\"\r\n            .. get_canonical_headers()\r\n            .. bucket .. object .. query\r\n    end -- get_string_to_sign\r\n\r\n    if spore.authentication and self.aws_access_key and self.aws_secret_key then\r\n        if spore.params.bucket then\r\n            env.SERVER_NAME = bucket .. '.' .. env.SERVER_NAME\r\n            spore.params.bucket = nil\r\n        end\r\n\r\n        for k, v in pairs(spore.params) do\r\n            k = tostring(k)\r\n            if k:match'^x%-amz%-' then\r\n                req.headers[k:lower()] = tostring(v)\r\n                spore.params[k] = nil\r\n            end\r\n        end\r\n\r\n        req:finalize()\r\n\r\n        if spore.headers and spore.headers['Date'] == 'AWS' then\r\n            req.headers['date'] = os.date(\"!%a, %d %b %Y %H:%M:%S GMT\")\r\n        end\r\n\r\n        local payload = spore.payload\r\n        if payload then\r\n            if payload:sub(1, 1) == '@' then\r\n                local fname = payload:sub(2)\r\n                payload = slurp(fname)\r\n            end\r\n            req.headers['content-length'] = payload:len()\r\n            req.headers['content-type'] = req.headers['content-type'] or 'application/x-www-form-urlencoded'\r\n            if spore.headers and spore.headers['Content-MD5'] == 'AWS' then\r\n                req.headers['content-md5'] = digest('md5', payload)\r\n            end\r\n        end\r\n\r\n        req.headers['authorization'] = 'AWS '\r\n          .. self.aws_access_key .. ':'\r\n          .. mime.b64(hmac.digest('sha1', get_string_to_sign(), self.aws_secret_key, true))\r\n\r\n        return request(req)\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local env = req.env",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local query = env.QUERY_STRING or ''",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local spore = env.spore",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local bucket = tostring(spore.params.bucket or '')",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local function get_canonical_headers ()\r\n        local headers_amz = {}\r\n        for k, v in pairs(req.headers) do\r\n            if k:match'^x%-amz%-' then\r\n                headers_amz[#headers_amz+1] = k\r\n            end\r\n        end\r\n        if #headers_amz == 0 then\r\n            return ''\r\n        else\r\n            table.sort(headers_amz)\r\n            local lines = {}\r\n            for i = 1, #headers_amz do\r\n                local k = headers_amz[i]\r\n                lines[#lines+1] = k .. ':' .. req.headers[k]\r\n            end\r\n            return table.concat(lines, \"\\n\") .. \"\\n\"\r\n        end\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 10,
    "text": "local headers_amz = {}",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "for k, v in pairs(req.headers) do\r\n            if k:match'^x%-amz%-' then\r\n                headers_amz[#headers_amz+1] = k\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 12,
    "text": "if k:match'^x%-amz%-' then\r\n                headers_amz[#headers_amz+1] = k\r\n            end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "headers_amz[#headers_amz+1] = k",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if #headers_amz == 0 then\r\n            return ''\r\n        else\r\n            table.sort(headers_amz)\r\n            local lines = {}\r\n            for i = 1, #headers_amz do\r\n                local k = headers_amz[i]\r\n                lines[#lines+1] = k .. ':' .. req.headers[k]\r\n            end\r\n            return table.concat(lines, \"\\n\") .. \"\\n\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "table.sort(headers_amz)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "local lines = {}",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "for i = 1, #headers_amz do\r\n                local k = headers_amz[i]\r\n                lines[#lines+1] = k .. ':' .. req.headers[k]\r\n            end",
    "type": "statement:numericfor"
  }, {
    "id": 18,
    "text": "local k = headers_amz[i]",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "lines[#lines+1] = k .. ':' .. req.headers[k]",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 21,
    "text": "local function get_string_to_sign ()\r\n        if bucket ~= '' then\r\n            bucket = '/' .. bucket\r\n        end\r\n        local object = '/' .. tostring(spore.params.object or '')\r\n        if query ~= '' then\r\n            query = '?' .. query\r\n        end\r\n\r\n        return req.method .. \"\\n\"\r\n            .. (req.headers['content-md5'] or '') .. \"\\n\"\r\n            .. (req.headers['content-type'] or '') .. \"\\n\"\r\n            .. (req.headers['date'] or '') .. \"\\n\"\r\n            .. get_canonical_headers()\r\n            .. bucket .. object .. query\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 22,
    "text": "if bucket ~= '' then\r\n            bucket = '/' .. bucket\r\n        end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "bucket = '/' .. bucket",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "local object = '/' .. tostring(spore.params.object or '')",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if query ~= '' then\r\n            query = '?' .. query\r\n        end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "query = '?' .. query",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "if spore.authentication and self.aws_access_key and self.aws_secret_key then\r\n        if spore.params.bucket then\r\n            env.SERVER_NAME = bucket .. '.' .. env.SERVER_NAME\r\n            spore.params.bucket = nil\r\n        end\r\n\r\n        for k, v in pairs(spore.params) do\r\n            k = tostring(k)\r\n            if k:match'^x%-amz%-' then\r\n                req.headers[k:lower()] = tostring(v)\r\n                spore.params[k] = nil\r\n            end\r\n        end\r\n\r\n        req:finalize()\r\n\r\n        if spore.headers and spore.headers['Date'] == 'AWS' then\r\n            req.headers['date'] = os.date(\"!%a, %d %b %Y %H:%M:%S GMT\")\r\n        end\r\n\r\n        local payload = spore.payload\r\n        if payload then\r\n            if payload:sub(1, 1) == '@' then\r\n                local fname = payload:sub(2)\r\n                payload = slurp(fname)\r\n            end\r\n            req.headers['content-length'] = payload:len()\r\n            req.headers['content-type'] = req.headers['content-type'] or 'application/x-www-form-urlencoded'\r\n            if spore.headers and spore.headers['Content-MD5'] == 'AWS' then\r\n                req.headers['content-md5'] = digest('md5', payload)\r\n            end\r\n        end\r\n\r\n        req.headers['authorization'] = 'AWS '\r\n          .. self.aws_access_key .. ':'\r\n          .. mime.b64(hmac.digest('sha1', get_string_to_sign(), self.aws_secret_key, true))\r\n\r\n        return request(req)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "if spore.params.bucket then\r\n            env.SERVER_NAME = bucket .. '.' .. env.SERVER_NAME\r\n            spore.params.bucket = nil\r\n        end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "env.SERVER_NAME = bucket .. '.' .. env.SERVER_NAME",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "spore.params.bucket = nil",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "for k, v in pairs(spore.params) do\r\n            k = tostring(k)\r\n            if k:match'^x%-amz%-' then\r\n                req.headers[k:lower()] = tostring(v)\r\n                spore.params[k] = nil\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 32,
    "text": "k = tostring(k)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if k:match'^x%-amz%-' then\r\n                req.headers[k:lower()] = tostring(v)\r\n                spore.params[k] = nil\r\n            end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "req.headers[k:lower()] = tostring(v)",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "spore.params[k] = nil",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "req:finalize()",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "if spore.headers and spore.headers['Date'] == 'AWS' then\r\n            req.headers['date'] = os.date(\"!%a, %d %b %Y %H:%M:%S GMT\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "req.headers['date'] = os.date(\"!%a, %d %b %Y %H:%M:%S GMT\")",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "local payload = spore.payload",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "if payload then\r\n            if payload:sub(1, 1) == '@' then\r\n                local fname = payload:sub(2)\r\n                payload = slurp(fname)\r\n            end\r\n            req.headers['content-length'] = payload:len()\r\n            req.headers['content-type'] = req.headers['content-type'] or 'application/x-www-form-urlencoded'\r\n            if spore.headers and spore.headers['Content-MD5'] == 'AWS' then\r\n                req.headers['content-md5'] = digest('md5', payload)\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "if payload:sub(1, 1) == '@' then\r\n                local fname = payload:sub(2)\r\n                payload = slurp(fname)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "local fname = payload:sub(2)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "payload = slurp(fname)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "req.headers['content-length'] = payload:len()",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "req.headers['content-type'] = req.headers['content-type'] or 'application/x-www-form-urlencoded'",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "if spore.headers and spore.headers['Content-MD5'] == 'AWS' then\r\n                req.headers['content-md5'] = digest('md5', payload)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "req.headers['content-md5'] = digest('md5', payload)",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "req.headers['authorization'] = 'AWS '\r\n          .. self.aws_access_key .. ':'\r\n          .. mime.b64(hmac.digest('sha1', get_string_to_sign(), self.aws_secret_key, true))",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "local function get_canonical_headers ()\r\n        local headers_amz = {}\r\n        for k, v in pairs(req.headers) do\r\n            if k:match'^x%-amz%-' then\r\n                headers_amz[#headers_amz+1] = k\r\n            end\r\n        end\r\n        if #headers_amz == 0 then\r\n            return ''\r\n        else\r\n            table.sort(headers_amz)\r\n            local lines = {}\r\n            for i = 1, #headers_amz do\r\n                local k = headers_amz[i]\r\n                lines[#lines+1] = k .. ':' .. req.headers[k]\r\n            end\r\n            return table.concat(lines, \"\\n\") .. \"\\n\"\r\n        end\r\n    end",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "local function get_string_to_sign ()\r\n        if bucket ~= '' then\r\n            bucket = '/' .. bucket\r\n        end\r\n        local object = '/' .. tostring(spore.params.object or '')\r\n        if query ~= '' then\r\n            query = '?' .. query\r\n        end\r\n\r\n        return req.method .. \"\\n\"\r\n            .. (req.headers['content-md5'] or '') .. \"\\n\"\r\n            .. (req.headers['content-type'] or '') .. \"\\n\"\r\n            .. (req.headers['date'] or '') .. \"\\n\"\r\n            .. get_canonical_headers()\r\n            .. bucket .. object .. query\r\n    end",
    "type": "function"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "",
    "type": "function container"
  }, {
    "id": 55,
    "text": "function m.generate_nonce ()\r\n    return format('%08x', time())\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "function m.generate_timestamp ()\r\n    return tostring(time())\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "function m.generate_nonce ()\r\n    return digest('sha1', tostring(random()) .. 'random' .. tostring(time()), 'keyyyy')\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "function m.reset ()\r\n    collectgarbage 'collect'\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "function m.new (env)\r\n    local obj = {\r\n        env = env,\r\n        redirect = m.redirect,\r\n        headers = {\r\n            ['user-agent'] = env.HTTP_USER_AGENT,\r\n        },\r\n    }\r\n    return setmetatable(obj, {\r\n        __index = m,\r\n    })\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "os",
    "type": "module"
  }, {
    "id": 61,
    "text": "table",
    "type": "module"
  }, {
    "id": 62,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 63,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 64,
    "text": "date",
    "type": "global function"
  }, {
    "id": 65,
    "text": "mime",
    "type": "module"
  }, {
    "id": 66,
    "text": "b64",
    "type": "global function"
  }, {
    "id": 67,
    "text": "slurp",
    "type": "global function"
  }, {
    "id": 68,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 69,
    "text": "digest",
    "type": "global function"
  }, {
    "id": 70,
    "text": "request",
    "type": "global function"
  }, {
    "id": 71,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 72,
    "text": "require",
    "type": "global function"
  }, {
    "id": 73,
    "text": "digest",
    "type": "global function"
  }, {
    "id": 74,
    "text": "",
    "type": "local variable"
  }, {
    "id": 75,
    "text": "",
    "type": "variable container"
  }, {
    "id": 76,
    "text": "",
    "type": "require container"
  }, {
    "id": 77,
    "text": "",
    "type": "local variable"
  }, {
    "id": 78,
    "text": "",
    "type": "n/a"
  }, {
    "id": 79,
    "text": "",
    "type": "local variable"
  }, {
    "id": 80,
    "text": "",
    "type": "n/a"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "n/a"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 87,
    "text": "",
    "type": "global variable"
  }, {
    "id": 88,
    "text": "",
    "type": "global variable"
  }, {
    "id": 89,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 93,
    "text": "crypto",
    "type": "module"
  }, {
    "id": 94,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "interface container"
  }, {
    "id": 97,
    "text": "",
    "type": "interface"
  }, {
    "id": 98,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "require local variable"
  } ]
}