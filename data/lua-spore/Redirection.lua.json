{
  "_filename": "Redirection.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-spore/src/Spore/Middleware/Redirection.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 22
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 15,
    "label": "has",
    "to": 24
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 14,
    "label": "has",
    "to": 26
  }, {
    "from": 14,
    "label": "has",
    "to": 27
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 22
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 15,
    "label": "has",
    "to": 24
  }, {
    "from": 14,
    "label": "has",
    "to": 25
  }, {
    "from": 14,
    "label": "has",
    "to": 26
  }, {
    "from": 14,
    "label": "has",
    "to": 27
  }, {
    "from": 29,
    "label": "has",
    "to": 10
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 8,
    "label": "calls",
    "to": 36
  }, {
    "from": 8,
    "label": "calls",
    "to": 36
  }, {
    "from": 8,
    "label": "calls",
    "to": 36
  }, {
    "from": 8,
    "label": "calls",
    "to": 34
  }, {
    "from": 8,
    "label": "calls",
    "to": 32
  }, {
    "from": 31,
    "label": "calls",
    "to": 37
  }, {
    "from": 31,
    "label": "calls",
    "to": 37
  }, {
    "from": 8,
    "label": "calls",
    "to": 35
  }, {
    "from": 1,
    "label": "contains",
    "to": 31
  }, {
    "from": 31,
    "label": "declares",
    "to": 8
  }, {
    "from": 31,
    "label": "declares",
    "to": 29
  }, {
    "from": 1,
    "label": "contains",
    "to": 40
  }, {
    "from": 1,
    "label": "contains",
    "to": 41
  }, {
    "from": 40,
    "label": "initializes",
    "to": 42
  }, {
    "from": 42,
    "label": "assigns",
    "to": 43
  }, {
    "from": 40,
    "label": "initializes",
    "to": 44
  }, {
    "from": 40,
    "label": "initializes",
    "to": 45
  }, {
    "from": 41,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "requires",
    "to": 39
  }, {
    "from": 41,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 48
  }, {
    "from": 38,
    "label": "represents",
    "to": 49
  }, {
    "from": 48,
    "label": "provides",
    "to": 49
  }, {
    "from": 42,
    "label": "contains",
    "to": 3
  }, {
    "from": 42,
    "label": "contains",
    "to": 4
  }, {
    "from": 42,
    "label": "contains",
    "to": 5
  }, {
    "from": 42,
    "label": "contains",
    "to": 6
  }, {
    "from": 42,
    "label": "contains",
    "to": 7
  }, {
    "from": 42,
    "label": "contains",
    "to": 33
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Redirection",
    "type": "module"
  }, {
    "id": 2,
    "text": "Protocols",
    "type": "module"
  }, {
    "id": 3,
    "text": "function m.new_from_discovery (api, opts)\r\n    opts = opts or {}\r\n    checktype('new_from_discovery', 2, opts, 'table')\r\n    if type(api) == 'string' then\r\n        local content = slurp(api)\r\n        return new_from_lua(convert(decode(content)), opts)\r\n    end\r\n    if type(api) == 'table' then\r\n        local discovery = new_from_lua {\r\n            base_url = 'https://www.googleapis.com/discovery/v1/',\r\n            methods = {\r\n                get = {\r\n                    path = 'apis/:api/:version/rest',\r\n                    method = 'GET',\r\n                    required_params = { 'api', 'version' },\r\n                    expected_status = { 200 },\r\n                },\r\n            },\r\n        }\r\n        discovery:enable 'Format.JSON'\r\n        local r = discovery:get(api)\r\n        return new_from_lua(convert(r.body), opts)\r\n    end\r\n    error(\"bad argument #1 to new_from_discovery (string or table expected, got \"\r\n          .. type(api) .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function m.generate_nonce ()\r\n    return format('%08x', time())\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function m.generate_timestamp ()\r\n    return tostring(time())\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function m.generate_nonce ()\r\n    return digest('sha1', tostring(random()) .. 'random' .. tostring(time()), 'keyyyy')\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function m.reset ()\r\n    collectgarbage 'collect'\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function m:call (req)\r\n    local nredirect = 0\r\n\r\n    return  function (res)\r\n                while nredirect < m.max_redirect do\r\n                    local location = res.headers and res.headers['location']\r\n                    local status = res.status\r\n                    if location and (status == 301 or status == 302\r\n                                  or status == 303 or status == 307) then\r\n                        if req.headers['host'] then\r\n                            local uri = url.parse(location)\r\n                            req.headers['host'] = uri.host\r\n                            local proxy = url.parse(req.url)\r\n                            uri.host = proxy.host\r\n                            uri.port = proxy.port\r\n                            req.url = url.build(uri)\r\n                            req.env.spore.url_scheme = uri.scheme\r\n                        else\r\n                            req.url = url.absolute(req.url, location)\r\n                            req.env.spore.url_scheme = url.parse(location).scheme\r\n                        end\r\n                        req.headers['cookie'] = nil\r\n                        res = Protocols.request(req)\r\n                        nredirect = nredirect + 1\r\n                    else\r\n                        break\r\n                    end\r\n                end\r\n                return res\r\n            end\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local nredirect = 0",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "while nredirect < m.max_redirect do\r\n                    local location = res.headers and res.headers['location']\r\n                    local status = res.status\r\n                    if location and (status == 301 or status == 302\r\n                                  or status == 303 or status == 307) then\r\n                        if req.headers['host'] then\r\n                            local uri = url.parse(location)\r\n                            req.headers['host'] = uri.host\r\n                            local proxy = url.parse(req.url)\r\n                            uri.host = proxy.host\r\n                            uri.port = proxy.port\r\n                            req.url = url.build(uri)\r\n                            req.env.spore.url_scheme = uri.scheme\r\n                        else\r\n                            req.url = url.absolute(req.url, location)\r\n                            req.env.spore.url_scheme = url.parse(location).scheme\r\n                        end\r\n                        req.headers['cookie'] = nil\r\n                        res = Protocols.request(req)\r\n                        nredirect = nredirect + 1\r\n                    else\r\n                        break\r\n                    end\r\n                end",
    "type": "statement:while"
  }, {
    "id": 12,
    "text": "local location = res.headers and res.headers['location']",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local status = res.status",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if location and (status == 301 or status == 302\r\n                                  or status == 303 or status == 307) then\r\n                        if req.headers['host'] then\r\n                            local uri = url.parse(location)\r\n                            req.headers['host'] = uri.host\r\n                            local proxy = url.parse(req.url)\r\n                            uri.host = proxy.host\r\n                            uri.port = proxy.port\r\n                            req.url = url.build(uri)\r\n                            req.env.spore.url_scheme = uri.scheme\r\n                        else\r\n                            req.url = url.absolute(req.url, location)\r\n                            req.env.spore.url_scheme = url.parse(location).scheme\r\n                        end\r\n                        req.headers['cookie'] = nil\r\n                        res = Protocols.request(req)\r\n                        nredirect = nredirect + 1\r\n                    else\r\n                        break\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "if req.headers['host'] then\r\n                            local uri = url.parse(location)\r\n                            req.headers['host'] = uri.host\r\n                            local proxy = url.parse(req.url)\r\n                            uri.host = proxy.host\r\n                            uri.port = proxy.port\r\n                            req.url = url.build(uri)\r\n                            req.env.spore.url_scheme = uri.scheme\r\n                        else\r\n                            req.url = url.absolute(req.url, location)\r\n                            req.env.spore.url_scheme = url.parse(location).scheme\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "local uri = url.parse(location)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "req.headers['host'] = uri.host",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "local proxy = url.parse(req.url)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "uri.host = proxy.host",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "uri.port = proxy.port",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "req.url = url.build(uri)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "req.env.spore.url_scheme = uri.scheme",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "req.url = url.absolute(req.url, location)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "req.env.spore.url_scheme = url.parse(location).scheme",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "req.headers['cookie'] = nil",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "res = Protocols.request(req)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "nredirect = nredirect + 1",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function (res)\r\n                while nredirect < m.max_redirect do\r\n                    local location = res.headers and res.headers['location']\r\n                    local status = res.status\r\n                    if location and (status == 301 or status == 302\r\n                                  or status == 303 or status == 307) then\r\n                        if req.headers['host'] then\r\n                            local uri = url.parse(location)\r\n                            req.headers['host'] = uri.host\r\n                            local proxy = url.parse(req.url)\r\n                            uri.host = proxy.host\r\n                            uri.port = proxy.port\r\n                            req.url = url.build(uri)\r\n                            req.env.spore.url_scheme = uri.scheme\r\n                        else\r\n                            req.url = url.absolute(req.url, location)\r\n                            req.env.spore.url_scheme = url.parse(location).scheme\r\n                        end\r\n                        req.headers['cookie'] = nil\r\n                        res = Protocols.request(req)\r\n                        nredirect = nredirect + 1\r\n                    else\r\n                        break\r\n                    end\r\n                end\r\n                return res\r\n            end",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "",
    "type": "function container"
  }, {
    "id": 32,
    "text": "local function request (req)\r\n    local spore = req.env.spore\r\n    local prot = protocol[spore.url_scheme]\r\n    assert(prot, \"not protocol \" .. spore.url_scheme)\r\n\r\n    local form_data = spore.form_data\r\n    if form_data then\r\n        local content, boundary = _form_data(form_data)\r\n        req.source = ltn12.source.string(content)\r\n        req.headers['content-length'] = content:len()\r\n        req.headers['content-type'] = 'multipart/form-data; boundary=' .. boundary\r\n    end\r\n\r\n    local payload = spore.payload\r\n    if payload then\r\n        if payload:sub(1, 1) == '@' then\r\n            local fname = payload:sub(2)\r\n            payload = slurp(fname)\r\n        end\r\n        req.source = ltn12.source.string(payload)\r\n        req.headers['content-length'] = payload:len()\r\n        req.headers['content-type'] = req.headers['content-type'] or 'application/x-www-form-urlencoded'\r\n    end\r\n\r\n    if req.method == 'POST' and not req.headers['content-length'] then\r\n        req.headers['content-length'] = 0\r\n    end\r\n\r\n    local t = {}\r\n    req.sink = ltn12.sink.table(t)\r\n\r\n    if spore.debug then\r\n        spore.debug:write(req.method, \" \", req.url, \"\\n\")\r\n        for k, v in pairs(req.headers) do\r\n            spore.debug:write(k, \": \", v, \"\\n\")\r\n        end\r\n    end\r\n    local r, status, headers, line = prot.request(req)\r\n    if spore.debug then\r\n        spore.debug:write(line or status, \"\\n\")\r\n    end\r\n    return {\r\n        request = req,\r\n        status = status,\r\n        headers = headers,\r\n        body = tconcat(t),\r\n    }\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "function m.new (env)\r\n    local obj = {\r\n        env = env,\r\n        redirect = m.redirect,\r\n        headers = {\r\n            ['user-agent'] = env.HTTP_USER_AGENT,\r\n        },\r\n    }\r\n    return setmetatable(obj, {\r\n        __index = m,\r\n    })\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "absolute",
    "type": "global function"
  }, {
    "id": 35,
    "text": "build",
    "type": "global function"
  }, {
    "id": 36,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 37,
    "text": "require",
    "type": "global function"
  }, {
    "id": 38,
    "text": "",
    "type": "local variable"
  }, {
    "id": 39,
    "text": "url",
    "type": "module"
  }, {
    "id": 40,
    "text": "",
    "type": "variable container"
  }, {
    "id": 41,
    "text": "",
    "type": "require container"
  }, {
    "id": 42,
    "text": "",
    "type": "local variable"
  }, {
    "id": 43,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 44,
    "text": "",
    "type": "global variable"
  }, {
    "id": 45,
    "text": "",
    "type": "global variable"
  }, {
    "id": 46,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 47,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "interface container"
  }, {
    "id": 49,
    "text": "",
    "type": "interface"
  } ]
}