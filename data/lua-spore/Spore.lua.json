{
  "_filename": "Spore.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-spore/src/Spore.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 4,
    "label": "calls",
    "to": 118
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 20,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 40
  }, {
    "from": 20,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 42,
    "label": "has",
    "to": 51
  }, {
    "from": 42,
    "label": "has",
    "to": 52
  }, {
    "from": 42,
    "label": "has",
    "to": 53
  }, {
    "from": 42,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 42,
    "label": "has",
    "to": 56
  }, {
    "from": 42,
    "label": "has",
    "to": 57
  }, {
    "from": 42,
    "label": "has",
    "to": 58
  }, {
    "from": 42,
    "label": "has",
    "to": 59
  }, {
    "from": 42,
    "label": "has",
    "to": 60
  }, {
    "from": 42,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 42,
    "label": "has",
    "to": 63
  }, {
    "from": 42,
    "label": "has",
    "to": 64
  }, {
    "from": 42,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 33
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 36
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 69,
    "label": "has",
    "to": 75
  }, {
    "from": 42,
    "label": "has",
    "to": 14
  }, {
    "from": 42,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 14
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 87
  }, {
    "from": 83,
    "label": "has",
    "to": 88
  }, {
    "from": 83,
    "label": "has",
    "to": 89
  }, {
    "from": 83,
    "label": "has",
    "to": 90
  }, {
    "from": 83,
    "label": "has",
    "to": 91
  }, {
    "from": 83,
    "label": "has",
    "to": 92
  }, {
    "from": 83,
    "label": "has",
    "to": 93
  }, {
    "from": 83,
    "label": "has",
    "to": 94
  }, {
    "from": 83,
    "label": "has",
    "to": 95
  }, {
    "from": 83,
    "label": "has",
    "to": 96
  }, {
    "from": 83,
    "label": "has",
    "to": 97
  }, {
    "from": 83,
    "label": "has",
    "to": 98
  }, {
    "from": 83,
    "label": "has",
    "to": 99
  }, {
    "from": 83,
    "label": "has",
    "to": 100
  }, {
    "from": 83,
    "label": "has",
    "to": 101
  }, {
    "from": 83,
    "label": "has",
    "to": 102
  }, {
    "from": 83,
    "label": "has",
    "to": 103
  }, {
    "from": 83,
    "label": "has",
    "to": 104
  }, {
    "from": 83,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 83,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 14
  }, {
    "from": 81,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 14
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 111,
    "label": "has",
    "to": 116
  }, {
    "from": 111,
    "label": "has",
    "to": 14
  }, {
    "from": 111,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 118,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 122,
    "label": "has",
    "to": 126
  }, {
    "from": 122,
    "label": "has",
    "to": 127
  }, {
    "from": 118,
    "label": "has",
    "to": 115
  }, {
    "from": 118,
    "label": "has",
    "to": 128
  }, {
    "from": 118,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 116
  }, {
    "from": 118,
    "label": "has",
    "to": 14
  }, {
    "from": 118,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 119
  }, {
    "from": 132,
    "label": "has",
    "to": 120
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 123
  }, {
    "from": 134,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 132,
    "label": "has",
    "to": 137
  }, {
    "from": 132,
    "label": "has",
    "to": 14
  }, {
    "from": 132,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 14
  }, {
    "from": 111,
    "label": "calls",
    "to": 77
  }, {
    "from": 118,
    "label": "calls",
    "to": 77
  }, {
    "from": 20,
    "label": "calls",
    "to": 153
  }, {
    "from": 42,
    "label": "calls",
    "to": 153
  }, {
    "from": 81,
    "label": "calls",
    "to": 153
  }, {
    "from": 42,
    "label": "calls",
    "to": 11
  }, {
    "from": 17,
    "label": "calls",
    "to": 148
  }, {
    "from": 42,
    "label": "calls",
    "to": 148
  }, {
    "from": 42,
    "label": "calls",
    "to": 148
  }, {
    "from": 42,
    "label": "calls",
    "to": 145
  }, {
    "from": 42,
    "label": "calls",
    "to": 145
  }, {
    "from": 81,
    "label": "calls",
    "to": 145
  }, {
    "from": 81,
    "label": "calls",
    "to": 151
  }, {
    "from": 42,
    "label": "calls",
    "to": 20
  }, {
    "from": 132,
    "label": "calls",
    "to": 118
  }, {
    "from": 17,
    "label": "calls",
    "to": 146
  }, {
    "from": 20,
    "label": "calls",
    "to": 146
  }, {
    "from": 20,
    "label": "calls",
    "to": 146
  }, {
    "from": 20,
    "label": "calls",
    "to": 146
  }, {
    "from": 20,
    "label": "calls",
    "to": 146
  }, {
    "from": 81,
    "label": "calls",
    "to": 146
  }, {
    "from": 81,
    "label": "calls",
    "to": 146
  }, {
    "from": 81,
    "label": "calls",
    "to": 146
  }, {
    "from": 81,
    "label": "calls",
    "to": 146
  }, {
    "from": 81,
    "label": "calls",
    "to": 146
  }, {
    "from": 81,
    "label": "calls",
    "to": 146
  }, {
    "from": 81,
    "label": "calls",
    "to": 146
  }, {
    "from": 81,
    "label": "calls",
    "to": 146
  }, {
    "from": 81,
    "label": "calls",
    "to": 146
  }, {
    "from": 81,
    "label": "calls",
    "to": 146
  }, {
    "from": 81,
    "label": "calls",
    "to": 146
  }, {
    "from": 81,
    "label": "calls",
    "to": 146
  }, {
    "from": 81,
    "label": "calls",
    "to": 146
  }, {
    "from": 81,
    "label": "calls",
    "to": 146
  }, {
    "from": 111,
    "label": "calls",
    "to": 81
  }, {
    "from": 118,
    "label": "calls",
    "to": 81
  }, {
    "from": 42,
    "label": "calls",
    "to": 150
  }, {
    "from": 118,
    "label": "calls",
    "to": 143
  }, {
    "from": 42,
    "label": "calls",
    "to": 17
  }, {
    "from": 111,
    "label": "calls",
    "to": 17
  }, {
    "from": 111,
    "label": "calls",
    "to": 17
  }, {
    "from": 118,
    "label": "calls",
    "to": 17
  }, {
    "from": 132,
    "label": "calls",
    "to": 17
  }, {
    "from": 11,
    "label": "calls",
    "to": 154
  }, {
    "from": 77,
    "label": "calls",
    "to": 154
  }, {
    "from": 81,
    "label": "calls",
    "to": 42
  }, {
    "from": 132,
    "label": "calls",
    "to": 147
  }, {
    "from": 17,
    "label": "calls",
    "to": 155
  }, {
    "from": 17,
    "label": "calls",
    "to": 155
  }, {
    "from": 42,
    "label": "calls",
    "to": 155
  }, {
    "from": 81,
    "label": "calls",
    "to": 155
  }, {
    "from": 81,
    "label": "calls",
    "to": 155
  }, {
    "from": 81,
    "label": "calls",
    "to": 155
  }, {
    "from": 81,
    "label": "calls",
    "to": 155
  }, {
    "from": 81,
    "label": "calls",
    "to": 155
  }, {
    "from": 81,
    "label": "calls",
    "to": 155
  }, {
    "from": 118,
    "label": "calls",
    "to": 155
  }, {
    "from": 132,
    "label": "calls",
    "to": 155
  }, {
    "from": 140,
    "label": "calls",
    "to": 156
  }, {
    "from": 140,
    "label": "calls",
    "to": 156
  }, {
    "from": 140,
    "label": "calls",
    "to": 156
  }, {
    "from": 140,
    "label": "calls",
    "to": 156
  }, {
    "from": 140,
    "label": "calls",
    "to": 156
  }, {
    "from": 118,
    "label": "calls",
    "to": 156
  }, {
    "from": 132,
    "label": "calls",
    "to": 152
  }, {
    "from": 11,
    "label": "calls",
    "to": 149
  }, {
    "from": 3,
    "label": "contains",
    "to": 140
  }, {
    "from": 140,
    "label": "declares",
    "to": 11
  }, {
    "from": 140,
    "label": "declares",
    "to": 17
  }, {
    "from": 140,
    "label": "declares",
    "to": 20
  }, {
    "from": 140,
    "label": "declares",
    "to": 42
  }, {
    "from": 140,
    "label": "declares",
    "to": 77
  }, {
    "from": 140,
    "label": "declares",
    "to": 81
  }, {
    "from": 140,
    "label": "declares",
    "to": 109
  }, {
    "from": 140,
    "label": "declares",
    "to": 111
  }, {
    "from": 140,
    "label": "declares",
    "to": 118
  }, {
    "from": 140,
    "label": "declares",
    "to": 132
  }, {
    "from": 140,
    "label": "declares",
    "to": 139
  }, {
    "from": 157,
    "label": "requires",
    "to": 3
  }, {
    "from": 159,
    "label": "requires",
    "to": 3
  }, {
    "from": 160,
    "label": "requires",
    "to": 3
  }, {
    "from": 161,
    "label": "requires",
    "to": 3
  }, {
    "from": 162,
    "label": "requires",
    "to": 3
  }, {
    "from": 164,
    "label": "requires",
    "to": 3
  }, {
    "from": 165,
    "label": "requires",
    "to": 3
  }, {
    "from": 166,
    "label": "requires",
    "to": 3
  }, {
    "from": 167,
    "label": "requires",
    "to": 3
  }, {
    "from": 3,
    "label": "contains",
    "to": 168
  }, {
    "from": 3,
    "label": "contains",
    "to": 169
  }, {
    "from": 168,
    "label": "initializes",
    "to": 170
  }, {
    "from": 170,
    "label": "assigns",
    "to": 171
  }, {
    "from": 168,
    "label": "initializes",
    "to": 172
  }, {
    "from": 172,
    "label": "assigns",
    "to": 173
  }, {
    "from": 168,
    "label": "initializes",
    "to": 174
  }, {
    "from": 174,
    "label": "assigns",
    "to": 175
  }, {
    "from": 168,
    "label": "initializes",
    "to": 176
  }, {
    "from": 176,
    "label": "assigns",
    "to": 177
  }, {
    "from": 168,
    "label": "initializes",
    "to": 178
  }, {
    "from": 178,
    "label": "assigns",
    "to": 179
  }, {
    "from": 168,
    "label": "initializes",
    "to": 180
  }, {
    "from": 180,
    "label": "assigns",
    "to": 181
  }, {
    "from": 168,
    "label": "initializes",
    "to": 182
  }, {
    "from": 182,
    "label": "assigns",
    "to": 183
  }, {
    "from": 168,
    "label": "initializes",
    "to": 184
  }, {
    "from": 184,
    "label": "assigns",
    "to": 185
  }, {
    "from": 168,
    "label": "initializes",
    "to": 186
  }, {
    "from": 186,
    "label": "assigns",
    "to": 187
  }, {
    "from": 168,
    "label": "initializes",
    "to": 188
  }, {
    "from": 188,
    "label": "assigns",
    "to": 189
  }, {
    "from": 168,
    "label": "initializes",
    "to": 190
  }, {
    "from": 168,
    "label": "initializes",
    "to": 191
  }, {
    "from": 168,
    "label": "initializes",
    "to": 192
  }, {
    "from": 192,
    "label": "assigns",
    "to": 193
  }, {
    "from": 168,
    "label": "initializes",
    "to": 194
  }, {
    "from": 194,
    "label": "assigns",
    "to": 195
  }, {
    "from": 168,
    "label": "initializes",
    "to": 196
  }, {
    "from": 196,
    "label": "assigns",
    "to": 197
  }, {
    "from": 168,
    "label": "initializes",
    "to": 198
  }, {
    "from": 198,
    "label": "assigns",
    "to": 199
  }, {
    "from": 168,
    "label": "initializes",
    "to": 200
  }, {
    "from": 200,
    "label": "assigns",
    "to": 201
  }, {
    "from": 168,
    "label": "initializes",
    "to": 202
  }, {
    "from": 202,
    "label": "assigns",
    "to": 203
  }, {
    "from": 168,
    "label": "initializes",
    "to": 204
  }, {
    "from": 168,
    "label": "initializes",
    "to": 205
  }, {
    "from": 205,
    "label": "assigns",
    "to": 206
  }, {
    "from": 168,
    "label": "initializes",
    "to": 207
  }, {
    "from": 168,
    "label": "initializes",
    "to": 208
  }, {
    "from": 169,
    "label": "initializes",
    "to": 209
  }, {
    "from": 209,
    "label": "requires",
    "to": 144
  }, {
    "from": 169,
    "label": "initializes",
    "to": 210
  }, {
    "from": 210,
    "label": "requires",
    "to": 141
  }, {
    "from": 169,
    "label": "initializes",
    "to": 211
  }, {
    "from": 211,
    "label": "requires",
    "to": 163
  }, {
    "from": 169,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "requires",
    "to": 1
  }, {
    "from": 169,
    "label": "initializes",
    "to": 213
  }, {
    "from": 213,
    "label": "requires",
    "to": 2
  }, {
    "from": 169,
    "label": "initializes",
    "to": 214
  }, {
    "from": 214,
    "label": "requires",
    "to": 142
  }, {
    "from": 3,
    "label": "provides",
    "to": 215
  }, {
    "from": 158,
    "label": "represents",
    "to": 216
  }, {
    "from": 215,
    "label": "provides",
    "to": 216
  }, {
    "from": 186,
    "label": "contains",
    "to": 5
  }, {
    "from": 186,
    "label": "contains",
    "to": 6
  }, {
    "from": 186,
    "label": "contains",
    "to": 7
  }, {
    "from": 186,
    "label": "contains",
    "to": 8
  }, {
    "from": 186,
    "label": "contains",
    "to": 9
  }, {
    "from": 186,
    "label": "contains",
    "to": 10
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "Core",
    "type": "module"
  }, {
    "id": 2,
    "text": "Protocols",
    "type": "module"
  }, {
    "id": 3,
    "text": "Spore",
    "type": "module"
  }, {
    "id": 4,
    "text": "",
    "type": "function container"
  }, {
    "id": 5,
    "text": "function m.new_from_discovery (api, opts)\r\n    opts = opts or {}\r\n    checktype('new_from_discovery', 2, opts, 'table')\r\n    if type(api) == 'string' then\r\n        local content = slurp(api)\r\n        return new_from_lua(convert(decode(content)), opts)\r\n    end\r\n    if type(api) == 'table' then\r\n        local discovery = new_from_lua {\r\n            base_url = 'https://www.googleapis.com/discovery/v1/',\r\n            methods = {\r\n                get = {\r\n                    path = 'apis/:api/:version/rest',\r\n                    method = 'GET',\r\n                    required_params = { 'api', 'version' },\r\n                    expected_status = { 200 },\r\n                },\r\n            },\r\n        }\r\n        discovery:enable 'Format.JSON'\r\n        local r = discovery:get(api)\r\n        return new_from_lua(convert(r.body), opts)\r\n    end\r\n    error(\"bad argument #1 to new_from_discovery (string or table expected, got \"\r\n          .. type(api) .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function m.generate_nonce ()\r\n    return format('%08x', time())\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function m.generate_timestamp ()\r\n    return tostring(time())\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function m.generate_nonce ()\r\n    return digest('sha1', tostring(random()) .. 'random' .. tostring(time()), 'keyyyy')\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function m.reset ()\r\n    collectgarbage 'collect'\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function m.new (env)\r\n    local obj = {\r\n        env = env,\r\n        redirect = m.redirect,\r\n        headers = {\r\n            ['user-agent'] = env.HTTP_USER_AGENT,\r\n        },\r\n    }\r\n    return setmetatable(obj, {\r\n        __index = m,\r\n    })\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local function raises (response, reason)\r\n    local ex = { response = response, reason = reason }\r\n    local mt = { __tostring = function (self) return self.reason end }\r\n    error(setmetatable(ex, mt))\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local ex = { response = response, reason = reason }",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local mt = { __tostring = function (self) return self.reason end }",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 15,
    "text": "error(setmetatable(ex, mt))",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function checktype (caller, narg, arg, tname)\r\n    assert(type(arg) == tname, \"bad argument #\" .. tostring(narg) .. \" to \"\r\n          .. caller .. \" (\" .. tname .. \" expected, got \" .. type(arg) .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "assert(type(arg) == tname, \"bad argument #\" .. tostring(narg) .. \" to \"\r\n          .. caller .. \" (\" .. tname .. \" expected, got \" .. type(arg) .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "local function validate (caller, method, params, payload)\r\n    if method.required_payload then\r\n        assert(payload, \"payload is required for method \" .. caller)\r\n    end\r\n    if payload then\r\n        assert(method.required_payload or method.optional_payload, \"payload is not expected for method \" .. caller)\r\n    end\r\n\r\n    local required_params = method.required_params or {}\r\n    for i = 1, #required_params do\r\n        local v = required_params[i]\r\n        assert(params[v], v .. \" is required for method \" .. caller)\r\n    end\r\n\r\n    if not method.unattended_params then\r\n        local optional_params = method.optional_params or {}\r\n        for param in pairs(params) do\r\n            if not param:match'^oauth_' then\r\n                local found = false\r\n                for i = 1, #required_params do\r\n                    if param == required_params[i] then\r\n                        found = true\r\n                        break\r\n                    end\r\n                end\r\n                if not found then\r\n                    for i = 1, #optional_params do\r\n                        if param == optional_params[i] then\r\n                            found = true\r\n                            break\r\n                        end\r\n                    end\r\n                end\r\n                assert(found, param .. \" is not expected for method \" .. caller)\r\n            end\r\n        end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "if method.required_payload then\r\n        assert(payload, \"payload is required for method \" .. caller)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "assert(payload, \"payload is required for method \" .. caller)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "if payload then\r\n        assert(method.required_payload or method.optional_payload, \"payload is not expected for method \" .. caller)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "assert(method.required_payload or method.optional_payload, \"payload is not expected for method \" .. caller)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "local required_params = method.required_params or {}",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "for i = 1, #required_params do\r\n        local v = required_params[i]\r\n        assert(params[v], v .. \" is required for method \" .. caller)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 27,
    "text": "local v = required_params[i]",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "assert(params[v], v .. \" is required for method \" .. caller)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "if not method.unattended_params then\r\n        local optional_params = method.optional_params or {}\r\n        for param in pairs(params) do\r\n            if not param:match'^oauth_' then\r\n                local found = false\r\n                for i = 1, #required_params do\r\n                    if param == required_params[i] then\r\n                        found = true\r\n                        break\r\n                    end\r\n                end\r\n                if not found then\r\n                    for i = 1, #optional_params do\r\n                        if param == optional_params[i] then\r\n                            found = true\r\n                            break\r\n                        end\r\n                    end\r\n                end\r\n                assert(found, param .. \" is not expected for method \" .. caller)\r\n            end\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "local optional_params = method.optional_params or {}",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "for param in pairs(params) do\r\n            if not param:match'^oauth_' then\r\n                local found = false\r\n                for i = 1, #required_params do\r\n                    if param == required_params[i] then\r\n                        found = true\r\n                        break\r\n                    end\r\n                end\r\n                if not found then\r\n                    for i = 1, #optional_params do\r\n                        if param == optional_params[i] then\r\n                            found = true\r\n                            break\r\n                        end\r\n                    end\r\n                end\r\n                assert(found, param .. \" is not expected for method \" .. caller)\r\n            end\r\n        end",
    "type": "statement:genericfor"
  }, {
    "id": 32,
    "text": "if not param:match'^oauth_' then\r\n                local found = false\r\n                for i = 1, #required_params do\r\n                    if param == required_params[i] then\r\n                        found = true\r\n                        break\r\n                    end\r\n                end\r\n                if not found then\r\n                    for i = 1, #optional_params do\r\n                        if param == optional_params[i] then\r\n                            found = true\r\n                            break\r\n                        end\r\n                    end\r\n                end\r\n                assert(found, param .. \" is not expected for method \" .. caller)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "local found = false",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "for i = 1, #required_params do\r\n                    if param == required_params[i] then\r\n                        found = true\r\n                        break\r\n                    end\r\n                end",
    "type": "statement:numericfor"
  }, {
    "id": 35,
    "text": "if param == required_params[i] then\r\n                        found = true\r\n                        break\r\n                    end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "found = true",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "if not found then\r\n                    for i = 1, #optional_params do\r\n                        if param == optional_params[i] then\r\n                            found = true\r\n                            break\r\n                        end\r\n                    end\r\n                end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "for i = 1, #optional_params do\r\n                        if param == optional_params[i] then\r\n                            found = true\r\n                            break\r\n                        end\r\n                    end",
    "type": "statement:numericfor"
  }, {
    "id": 39,
    "text": "if param == optional_params[i] then\r\n                            found = true\r\n                            break\r\n                        end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "assert(found, param .. \" is not expected for method \" .. caller)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "local function wrap (self, name, method, args)\r\n    args = args or {}\r\n    checktype(name, 2, args, 'table')\r\n    local params = {}\r\n    for k, v in pairs(args) do\r\n        if type(k) == 'number' then\r\n            v = tostring(v)\r\n            params[v] = v\r\n        else\r\n            params[tostring(k)] = v\r\n        end\r\n    end\r\n    local payload = params.spore_payload or params.payload\r\n    params.spore_payload = nil\r\n    params.payload = nil\r\n    if m.early_validate then\r\n        validate(name, method, params, payload)\r\n    end\r\n\r\n    local base_url = url.parse(method.base_url)\r\n    local path_url = url.parse(method.path) or {}\r\n    local path_info = (base_url.path or '') .. (path_url.path or '')\r\n    path_info = path_info:gsub('//', '/')\r\n\r\n    local env = {\r\n        REQUEST_METHOD  = method.method,\r\n        SERVER_NAME     = base_url.host,\r\n        SERVER_PORT     = base_url.port,\r\n        PATH_INFO       = path_info,\r\n        REQUEST_URI     = '',\r\n        QUERY_STRING    = path_url.query,\r\n        HTTP_USER_AGENT = 'lua-Spore v' .. version,\r\n        spore = {\r\n            caller          = name,\r\n            method          = method,\r\n            expected        = method.expected_status,\r\n            authentication  = method.authentication,\r\n            params          = params,\r\n            form_data       = method['form-data'],\r\n            headers         = method.headers,\r\n            payload         = payload,\r\n            errors          = m.errors or io.stderr,\r\n            debug           = m.debug,\r\n            url_scheme      = base_url.scheme,\r\n            format          = method.formats,\r\n        },\r\n        sporex = {},\r\n    }\r\n    if method.deprecated and debug then\r\n        debug:write(name, \" is deprecated\\n\")\r\n    end\r\n    local response = self:http_request(env)\r\n\r\n    local expected_status = method.expected_status\r\n    if expected_status then\r\n        local status = response.status\r\n        local found = false\r\n        for i = 1, #expected_status do\r\n            if status == tonumber(expected_status[i]) then\r\n                found = true\r\n                break\r\n            end\r\n        end\r\n        if not found then\r\n            local spore = env.spore\r\n            if spore.errors then\r\n                local req = response.request\r\n                spore.errors:write(req.method, \" \", req.url, \"\\n\")\r\n                spore.errors:write(status, \"\\n\")\r\n            end\r\n            raises(response, status .. ' not expected')\r\n        end\r\n    end\r\n    return response\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "args = args or {}",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "checktype(name, 2, args, 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "local params = {}",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "for k, v in pairs(args) do\r\n        if type(k) == 'number' then\r\n            v = tostring(v)\r\n            params[v] = v\r\n        else\r\n            params[tostring(k)] = v\r\n        end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 47,
    "text": "if type(k) == 'number' then\r\n            v = tostring(v)\r\n            params[v] = v\r\n        else\r\n            params[tostring(k)] = v\r\n        end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "v = tostring(v)",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "params[v] = v",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "params[tostring(k)] = v",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "local payload = params.spore_payload or params.payload",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "params.spore_payload = nil",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "params.payload = nil",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "if m.early_validate then\r\n        validate(name, method, params, payload)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "validate(name, method, params, payload)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "local base_url = url.parse(method.base_url)",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "local path_url = url.parse(method.path) or {}",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local path_info = (base_url.path or '') .. (path_url.path or '')",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "path_info = path_info:gsub('//', '/')",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "local env = {\r\n        REQUEST_METHOD  = method.method,\r\n        SERVER_NAME     = base_url.host,\r\n        SERVER_PORT     = base_url.port,\r\n        PATH_INFO       = path_info,\r\n        REQUEST_URI     = '',\r\n        QUERY_STRING    = path_url.query,\r\n        HTTP_USER_AGENT = 'lua-Spore v' .. version,\r\n        spore = {\r\n            caller          = name,\r\n            method          = method,\r\n            expected        = method.expected_status,\r\n            authentication  = method.authentication,\r\n            params          = params,\r\n            form_data       = method['form-data'],\r\n            headers         = method.headers,\r\n            payload         = payload,\r\n            errors          = m.errors or io.stderr,\r\n            debug           = m.debug,\r\n            url_scheme      = base_url.scheme,\r\n            format          = method.formats,\r\n        },\r\n        sporex = {},\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "if method.deprecated and debug then\r\n        debug:write(name, \" is deprecated\\n\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "debug:write(name, \" is deprecated\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "local response = self:http_request(env)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local expected_status = method.expected_status",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if expected_status then\r\n        local status = response.status\r\n        local found = false\r\n        for i = 1, #expected_status do\r\n            if status == tonumber(expected_status[i]) then\r\n                found = true\r\n                break\r\n            end\r\n        end\r\n        if not found then\r\n            local spore = env.spore\r\n            if spore.errors then\r\n                local req = response.request\r\n                spore.errors:write(req.method, \" \", req.url, \"\\n\")\r\n                spore.errors:write(status, \"\\n\")\r\n            end\r\n            raises(response, status .. ' not expected')\r\n        end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "local status = response.status",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "for i = 1, #expected_status do\r\n            if status == tonumber(expected_status[i]) then\r\n                found = true\r\n                break\r\n            end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 68,
    "text": "if status == tonumber(expected_status[i]) then\r\n                found = true\r\n                break\r\n            end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "if not found then\r\n            local spore = env.spore\r\n            if spore.errors then\r\n                local req = response.request\r\n                spore.errors:write(req.method, \" \", req.url, \"\\n\")\r\n                spore.errors:write(status, \"\\n\")\r\n            end\r\n            raises(response, status .. ' not expected')\r\n        end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "local spore = env.spore",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "if spore.errors then\r\n                local req = response.request\r\n                spore.errors:write(req.method, \" \", req.url, \"\\n\")\r\n                spore.errors:write(status, \"\\n\")\r\n            end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "local req = response.request",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "spore.errors:write(req.method, \" \", req.url, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "spore.errors:write(status, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "raises(response, status .. ' not expected')",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "local function new ()\r\n    local obj = {\r\n        middlewares = {}\r\n    }\r\n    local mt = {\r\n        __index = core,\r\n    }\r\n    return setmetatable(obj, mt)\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "local obj = {\r\n        middlewares = {}\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "local mt = {\r\n        __index = core,\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "local function populate (obj, spec, opts)\r\n    assert(spec.methods, \"no method in spec\")\r\n    for k, v in pairs(spec.methods) do\r\n        local methname_modifier = m.methname_modifier\r\n        if type(methname_modifier) == 'function' then\r\n            k = methname_modifier(k)\r\n        end\r\n        v.authentication = opts.authentication or v.authentication or spec.authentication\r\n        v.base_url = opts.base_url or v.base_url or spec.base_url\r\n        v.expected_status = opts.expected_status or v.expected_status or spec.expected_status\r\n        v.formats = opts.formats or v.formats or spec.formats\r\n        v.unattended_params = opts.unattended_params or v.unattended_params or spec.unattended_params\r\n        assert(obj[k] == nil, k .. \" duplicated\")\r\n        assert(v.method, k .. \" without field method\")\r\n        assert(v.path, k .. \" without field path\")\r\n        assert(type(v.expected_status or {}) == 'table', \"expected_status of \" .. k .. \" is not an array\")\r\n        assert(type(v.required_params or {}) == 'table', \"required_params of \" .. k .. \" is not an array\")\r\n        assert(type(v.optional_params or {}) == 'table', \"optional_params of \" .. k .. \" is not an array\")\r\n        assert(type(v['form-data'] or {}) == 'table', \"form-data of \" .. k .. \" is not an hash\")\r\n        assert(type(v.headers or {}) == 'table', \"headers of \" .. k .. \" is not an hash\")\r\n        assert(v.base_url, k .. \": base_url is missing\")\r\n        local uri = url.parse(v.base_url)\r\n        assert(uri, k .. \": base_url is invalid\")\r\n        assert(uri.host, k .. \": base_url without host\")\r\n        assert(uri.scheme, k .. \": base_url without scheme\")\r\n        if v.required_payload or v.optional_payload then\r\n            assert(not v['form-data'], \"payload and form-data are exclusive\")\r\n        end\r\n        obj[k] =  function (self, args)\r\n                      return wrap(self, k, v, args)\r\n                  end\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 82,
    "text": "assert(spec.methods, \"no method in spec\")",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "for k, v in pairs(spec.methods) do\r\n        local methname_modifier = m.methname_modifier\r\n        if type(methname_modifier) == 'function' then\r\n            k = methname_modifier(k)\r\n        end\r\n        v.authentication = opts.authentication or v.authentication or spec.authentication\r\n        v.base_url = opts.base_url or v.base_url or spec.base_url\r\n        v.expected_status = opts.expected_status or v.expected_status or spec.expected_status\r\n        v.formats = opts.formats or v.formats or spec.formats\r\n        v.unattended_params = opts.unattended_params or v.unattended_params or spec.unattended_params\r\n        assert(obj[k] == nil, k .. \" duplicated\")\r\n        assert(v.method, k .. \" without field method\")\r\n        assert(v.path, k .. \" without field path\")\r\n        assert(type(v.expected_status or {}) == 'table', \"expected_status of \" .. k .. \" is not an array\")\r\n        assert(type(v.required_params or {}) == 'table', \"required_params of \" .. k .. \" is not an array\")\r\n        assert(type(v.optional_params or {}) == 'table', \"optional_params of \" .. k .. \" is not an array\")\r\n        assert(type(v['form-data'] or {}) == 'table', \"form-data of \" .. k .. \" is not an hash\")\r\n        assert(type(v.headers or {}) == 'table', \"headers of \" .. k .. \" is not an hash\")\r\n        assert(v.base_url, k .. \": base_url is missing\")\r\n        local uri = url.parse(v.base_url)\r\n        assert(uri, k .. \": base_url is invalid\")\r\n        assert(uri.host, k .. \": base_url without host\")\r\n        assert(uri.scheme, k .. \": base_url without scheme\")\r\n        if v.required_payload or v.optional_payload then\r\n            assert(not v['form-data'], \"payload and form-data are exclusive\")\r\n        end\r\n        obj[k] =  function (self, args)\r\n                      return wrap(self, k, v, args)\r\n                  end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 84,
    "text": "local methname_modifier = m.methname_modifier",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "if type(methname_modifier) == 'function' then\r\n            k = methname_modifier(k)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "k = methname_modifier(k)",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "v.authentication = opts.authentication or v.authentication or spec.authentication",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "v.base_url = opts.base_url or v.base_url or spec.base_url",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "v.expected_status = opts.expected_status or v.expected_status or spec.expected_status",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "v.formats = opts.formats or v.formats or spec.formats",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "v.unattended_params = opts.unattended_params or v.unattended_params or spec.unattended_params",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "assert(obj[k] == nil, k .. \" duplicated\")",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "assert(v.method, k .. \" without field method\")",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "assert(v.path, k .. \" without field path\")",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "assert(type(v.expected_status or {}) == 'table', \"expected_status of \" .. k .. \" is not an array\")",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "assert(type(v.required_params or {}) == 'table', \"required_params of \" .. k .. \" is not an array\")",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "assert(type(v.optional_params or {}) == 'table', \"optional_params of \" .. k .. \" is not an array\")",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "assert(type(v['form-data'] or {}) == 'table', \"form-data of \" .. k .. \" is not an hash\")",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "assert(type(v.headers or {}) == 'table', \"headers of \" .. k .. \" is not an hash\")",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "assert(v.base_url, k .. \": base_url is missing\")",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "local uri = url.parse(v.base_url)",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "assert(uri, k .. \": base_url is invalid\")",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "assert(uri.host, k .. \": base_url without host\")",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "assert(uri.scheme, k .. \": base_url without scheme\")",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "if v.required_payload or v.optional_payload then\r\n            assert(not v['form-data'], \"payload and form-data are exclusive\")\r\n        end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "assert(not v['form-data'], \"payload and form-data are exclusive\")",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "obj[k] =  function (self, args)\r\n                      return wrap(self, k, v, args)\r\n                  end",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function (self, args)\r\n                      return wrap(self, k, v, args)\r\n                  end",
    "type": "function"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "local function new_from_lua (spec, opts)\r\n    opts = opts or {}\r\n    checktype('new_from_lua', 1, spec, 'table')\r\n    checktype('new_from_lua', 2, opts, 'table')\r\n    local obj = new()\r\n    populate(obj, spec, opts)\r\n    return obj\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "opts = opts or {}",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "checktype('new_from_lua', 1, spec, 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "checktype('new_from_lua', 2, opts, 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "local obj = new()",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "populate(obj, spec, opts)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "local function new_from_string (...)\r\n    local args = {...}\r\n    local opts = {}\r\n    local nb\r\n    for i = 1, #args do\r\n        local arg = args[i]\r\n        if i > 1 and type(arg) == 'table' then\r\n            opts = arg\r\n            break\r\n        end\r\n        checktype('new_from_string', i, arg, 'string')\r\n        nb = i\r\n    end\r\n\r\n    local obj = new()\r\n    local json = require 'json'\r\n    for i = 1, nb do\r\n        local spec = json.decode(args[i])\r\n        populate(obj, spec, opts)\r\n    end\r\n    return obj\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "local args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "local opts = {}",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "local nb",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "for i = 1, #args do\r\n        local arg = args[i]\r\n        if i > 1 and type(arg) == 'table' then\r\n            opts = arg\r\n            break\r\n        end\r\n        checktype('new_from_string', i, arg, 'string')\r\n        nb = i\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 123,
    "text": "local arg = args[i]",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "if i > 1 and type(arg) == 'table' then\r\n            opts = arg\r\n            break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "opts = arg",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "checktype('new_from_string', i, arg, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "nb = i",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "local json = require 'json'",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "for i = 1, nb do\r\n        local spec = json.decode(args[i])\r\n        populate(obj, spec, opts)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 130,
    "text": "local spec = json.decode(args[i])",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "local function new_from_spec (...)\r\n    local args = {...}\r\n    local opts = {}\r\n    local t = {}\r\n    for i = 1, #args do\r\n        local arg = args[i]\r\n        if i > 1 and type(arg) == 'table' then\r\n            opts = arg\r\n            break\r\n        end\r\n        checktype('new_from_spec', i, arg, 'string')\r\n        t[#t+1] = slurp(arg)\r\n    end\r\n    t[#t+1] = opts\r\n    return new_from_string(unpack(t))\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "for i = 1, #args do\r\n        local arg = args[i]\r\n        if i > 1 and type(arg) == 'table' then\r\n            opts = arg\r\n            break\r\n        end\r\n        checktype('new_from_spec', i, arg, 'string')\r\n        t[#t+1] = slurp(arg)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 135,
    "text": "checktype('new_from_spec', i, arg, 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "t[#t+1] = slurp(arg)",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "t[#t+1] = opts",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function (self) return self.reason end",
    "type": "function"
  }, {
    "id": 140,
    "text": "",
    "type": "function container"
  }, {
    "id": 141,
    "text": "io",
    "type": "module"
  }, {
    "id": 142,
    "text": "json",
    "type": "module"
  }, {
    "id": 143,
    "text": "decode",
    "type": "global function"
  }, {
    "id": 144,
    "text": "table",
    "type": "module"
  }, {
    "id": 145,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 146,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 147,
    "text": "slurp",
    "type": "global function"
  }, {
    "id": 148,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 149,
    "text": "error",
    "type": "global function"
  }, {
    "id": 150,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 151,
    "text": "methname_modifier",
    "type": "global function"
  }, {
    "id": 152,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 153,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 154,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 155,
    "text": "type",
    "type": "global function"
  }, {
    "id": 156,
    "text": "require",
    "type": "global function"
  }, {
    "id": 157,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "local variable"
  }, {
    "id": 159,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 160,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 161,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 162,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 163,
    "text": "url",
    "type": "module"
  }, {
    "id": 164,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 165,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 166,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 167,
    "text": "",
    "type": "global variable"
  }, {
    "id": 168,
    "text": "",
    "type": "variable container"
  }, {
    "id": 169,
    "text": "",
    "type": "require container"
  }, {
    "id": 170,
    "text": "",
    "type": "local variable"
  }, {
    "id": 171,
    "text": "",
    "type": "n/a"
  }, {
    "id": 172,
    "text": "",
    "type": "local variable"
  }, {
    "id": 173,
    "text": "",
    "type": "n/a"
  }, {
    "id": 174,
    "text": "",
    "type": "local variable"
  }, {
    "id": 175,
    "text": "",
    "type": "n/a"
  }, {
    "id": 176,
    "text": "",
    "type": "local variable"
  }, {
    "id": 177,
    "text": "",
    "type": "n/a"
  }, {
    "id": 178,
    "text": "",
    "type": "local variable"
  }, {
    "id": 179,
    "text": "",
    "type": "n/a"
  }, {
    "id": 180,
    "text": "",
    "type": "local variable"
  }, {
    "id": 181,
    "text": "",
    "type": "n/a"
  }, {
    "id": 182,
    "text": "",
    "type": "local variable"
  }, {
    "id": 183,
    "text": "",
    "type": "n/a"
  }, {
    "id": 184,
    "text": "",
    "type": "local variable"
  }, {
    "id": 185,
    "text": "",
    "type": "n/a"
  }, {
    "id": 186,
    "text": "",
    "type": "local variable"
  }, {
    "id": 187,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 188,
    "text": "",
    "type": "local variable"
  }, {
    "id": 189,
    "text": "",
    "type": "string"
  }, {
    "id": 190,
    "text": "",
    "type": "global variable"
  }, {
    "id": 191,
    "text": "",
    "type": "global variable"
  }, {
    "id": 192,
    "text": "",
    "type": "global variable"
  }, {
    "id": 193,
    "text": "",
    "type": "n/a"
  }, {
    "id": 194,
    "text": "",
    "type": "global variable"
  }, {
    "id": 195,
    "text": "",
    "type": "n/a"
  }, {
    "id": 196,
    "text": "",
    "type": "global variable"
  }, {
    "id": 197,
    "text": "",
    "type": "n/a"
  }, {
    "id": 198,
    "text": "",
    "type": "global variable"
  }, {
    "id": 199,
    "text": "",
    "type": "n/a"
  }, {
    "id": 200,
    "text": "",
    "type": "global variable"
  }, {
    "id": 201,
    "text": "",
    "type": "n/a"
  }, {
    "id": 202,
    "text": "",
    "type": "global variable"
  }, {
    "id": 203,
    "text": "",
    "type": "n/a"
  }, {
    "id": 204,
    "text": "",
    "type": "global variable"
  }, {
    "id": 205,
    "text": "",
    "type": "global variable"
  }, {
    "id": 206,
    "text": "",
    "type": "n/a"
  }, {
    "id": 207,
    "text": "",
    "type": "global variable"
  }, {
    "id": 208,
    "text": "",
    "type": "global variable"
  }, {
    "id": 209,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 210,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 212,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 214,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 215,
    "text": "",
    "type": "interface container"
  }, {
    "id": 216,
    "text": "",
    "type": "interface"
  } ]
}