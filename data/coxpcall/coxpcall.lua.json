{
  "_filename": "coxpcall.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/coxpcall/src/coxpcall.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 4,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 3
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 3
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 10,
    "label": "calls",
    "to": 32
  }, {
    "from": 29,
    "label": "calls",
    "to": 10
  }, {
    "from": 10,
    "label": "calls",
    "to": 45
  }, {
    "from": 8,
    "label": "calls",
    "to": 34
  }, {
    "from": 10,
    "label": "calls",
    "to": 36
  }, {
    "from": 8,
    "label": "calls",
    "to": 4
  }, {
    "from": 4,
    "label": "calls",
    "to": 37
  }, {
    "from": 4,
    "label": "calls",
    "to": 35
  }, {
    "from": 19,
    "label": "calls",
    "to": 33
  }, {
    "from": 4,
    "label": "calls",
    "to": 41
  }, {
    "from": 10,
    "label": "calls",
    "to": 42
  }, {
    "from": 31,
    "label": "calls",
    "to": 39
  }, {
    "from": 31,
    "label": "calls",
    "to": 40
  }, {
    "from": 4,
    "label": "calls",
    "to": 8
  }, {
    "from": 10,
    "label": "calls",
    "to": 8
  }, {
    "from": 19,
    "label": "calls",
    "to": 38
  }, {
    "from": 19,
    "label": "calls",
    "to": 38
  }, {
    "from": 4,
    "label": "calls",
    "to": 43
  }, {
    "from": 10,
    "label": "calls",
    "to": 44
  }, {
    "from": 19,
    "label": "calls",
    "to": 44
  }, {
    "from": 10,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 31
  }, {
    "from": 31,
    "label": "declares",
    "to": 2
  }, {
    "from": 31,
    "label": "declares",
    "to": 4
  }, {
    "from": 31,
    "label": "declares",
    "to": 8
  }, {
    "from": 31,
    "label": "declares",
    "to": 10
  }, {
    "from": 31,
    "label": "declares",
    "to": 18
  }, {
    "from": 31,
    "label": "declares",
    "to": 19
  }, {
    "from": 31,
    "label": "declares",
    "to": 27
  }, {
    "from": 31,
    "label": "declares",
    "to": 29
  }, {
    "from": 1,
    "label": "contains",
    "to": 46
  }, {
    "from": 1,
    "label": "contains",
    "to": 47
  }, {
    "from": 46,
    "label": "initializes",
    "to": 48
  }, {
    "from": 46,
    "label": "initializes",
    "to": 49
  }, {
    "from": 46,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 46,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 46,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 46,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 46,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 1,
    "label": "provides",
    "to": 60
  }, {
    "from": 29,
    "label": "represents",
    "to": 61
  }, {
    "from": 60,
    "label": "provides",
    "to": 61
  }, {
    "from": 10,
    "label": "represents",
    "to": 62
  }, {
    "from": 60,
    "label": "provides",
    "to": 62
  }, {
    "from": 19,
    "label": "represents",
    "to": 63
  }, {
    "from": 60,
    "label": "provides",
    "to": 63
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "coxpcall",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(...) return {n = select(\"#\", ...), ...} end",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "function handleReturnValue(err, co, status, ...)\r\n    if not status then\r\n        return false, err(debug.traceback(co, (...)), ...)\r\n    end\r\n    if coroutine.status(co) == 'suspended' then\r\n        return performResume(err, co, coroutine.yield(...))\r\n    else\r\n        return true, ...\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "if not status then\r\n        return false, err(debug.traceback(co, (...)), ...)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "if coroutine.status(co) == 'suspended' then\r\n        return performResume(err, co, coroutine.yield(...))\r\n    else\r\n        return true, ...\r\n    end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function performResume(err, co, ...)\r\n    return handleReturnValue(err, co, coroutine.resume(co, ...))\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function coxpcall(f, err, ...)\r\n    local res, co = oldpcall(coroutine.create, f)\r\n    if not res then\r\n        local params = pack(...)\r\n        local newf = function() return f(unpack(params, 1, params.n)) end\r\n        co = coroutine.create(newf)\r\n    end\r\n    coromap[co] = (running() or \"mainthread\")\r\n    return performResume(err, co, ...)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local res, co = oldpcall(coroutine.create, f)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if not res then\r\n        local params = pack(...)\r\n        local newf = function() return f(unpack(params, 1, params.n)) end\r\n        co = coroutine.create(newf)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "local params = pack(...)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local newf = function() return f(unpack(params, 1, params.n)) end",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "co = coroutine.create(newf)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "coromap[co] = (running() or \"mainthread\")",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function() return f(unpack(params, 1, params.n)) end",
    "type": "function"
  }, {
    "id": 19,
    "text": "local function corunning(coro)\r\n  if coro ~= nil then\r\n    assert(type(coro)==\"thread\", \"Bad argument; expected thread, got: \"..type(coro))\r\n  else\r\n    coro = running()\r\n  end\r\n  while coromap[coro] do\r\n    coro = coromap[coro]\r\n  end\r\n  if coro == \"mainthread\" then return nil end\r\n  return coro\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "if coro ~= nil then\r\n    assert(type(coro)==\"thread\", \"Bad argument; expected thread, got: \"..type(coro))\r\n  else\r\n    coro = running()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "assert(type(coro)==\"thread\", \"Bad argument; expected thread, got: \"..type(coro))",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "coro = running()",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "while coromap[coro] do\r\n    coro = coromap[coro]\r\n  end",
    "type": "statement:while"
  }, {
    "id": 24,
    "text": "coro = coromap[coro]",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "if coro == \"mainthread\" then return nil end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function id(trace, ...)\r\n  return ...\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function copcall(f, ...)\r\n    return coxpcall(f, id, ...)\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "",
    "type": "function container"
  }, {
    "id": 32,
    "text": "f",
    "type": "global function"
  }, {
    "id": 33,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 34,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 35,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 36,
    "text": "oldpcall",
    "type": "global function"
  }, {
    "id": 37,
    "text": "err",
    "type": "global function"
  }, {
    "id": 38,
    "text": "type",
    "type": "global function"
  }, {
    "id": 39,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 40,
    "text": "select",
    "type": "global function"
  }, {
    "id": 41,
    "text": "traceback",
    "type": "global function"
  }, {
    "id": 42,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 43,
    "text": "status",
    "type": "global function"
  }, {
    "id": 44,
    "text": "running",
    "type": "global function"
  }, {
    "id": 45,
    "text": "create",
    "type": "global function"
  }, {
    "id": 46,
    "text": "",
    "type": "variable container"
  }, {
    "id": 47,
    "text": "",
    "type": "require container"
  }, {
    "id": 48,
    "text": "",
    "type": "local variable"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "local variable"
  }, {
    "id": 51,
    "text": "",
    "type": "n/a"
  }, {
    "id": 52,
    "text": "",
    "type": "local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "n/a"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "n/a"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "interface container"
  }, {
    "id": 61,
    "text": "",
    "type": "interface"
  }, {
    "id": 62,
    "text": "",
    "type": "interface"
  }, {
    "id": 63,
    "text": "",
    "type": "interface"
  } ]
}