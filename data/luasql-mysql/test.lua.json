{
  "_filename": "test.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luasql-mysql/tests/test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 3
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 19,
    "label": "has",
    "to": 3
  }, {
    "from": 19,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 3
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 3
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 3
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 37,
    "label": "has",
    "to": 44
  }, {
    "from": 37,
    "label": "has",
    "to": 45
  }, {
    "from": 37,
    "label": "has",
    "to": 46
  }, {
    "from": 37,
    "label": "has",
    "to": 47
  }, {
    "from": 37,
    "label": "has",
    "to": 48
  }, {
    "from": 37,
    "label": "has",
    "to": 49
  }, {
    "from": 37,
    "label": "has",
    "to": 50
  }, {
    "from": 37,
    "label": "has",
    "to": 51
  }, {
    "from": 37,
    "label": "has",
    "to": 52
  }, {
    "from": 37,
    "label": "has",
    "to": 53
  }, {
    "from": 37,
    "label": "has",
    "to": 53
  }, {
    "from": 37,
    "label": "has",
    "to": 54
  }, {
    "from": 37,
    "label": "has",
    "to": 55
  }, {
    "from": 37,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 3
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 67,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 67,
    "label": "has",
    "to": 73
  }, {
    "from": 67,
    "label": "has",
    "to": 74
  }, {
    "from": 67,
    "label": "has",
    "to": 75
  }, {
    "from": 67,
    "label": "has",
    "to": 76
  }, {
    "from": 67,
    "label": "has",
    "to": 77
  }, {
    "from": 67,
    "label": "has",
    "to": 78
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 79
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 67,
    "label": "has",
    "to": 73
  }, {
    "from": 67,
    "label": "has",
    "to": 80
  }, {
    "from": 67,
    "label": "has",
    "to": 81
  }, {
    "from": 67,
    "label": "has",
    "to": 82
  }, {
    "from": 67,
    "label": "has",
    "to": 73
  }, {
    "from": 67,
    "label": "has",
    "to": 74
  }, {
    "from": 67,
    "label": "has",
    "to": 75
  }, {
    "from": 67,
    "label": "has",
    "to": 76
  }, {
    "from": 67,
    "label": "has",
    "to": 83
  }, {
    "from": 67,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 85,
    "label": "has",
    "to": 89
  }, {
    "from": 85,
    "label": "has",
    "to": 90
  }, {
    "from": 85,
    "label": "has",
    "to": 91
  }, {
    "from": 85,
    "label": "has",
    "to": 92
  }, {
    "from": 85,
    "label": "has",
    "to": 93
  }, {
    "from": 85,
    "label": "has",
    "to": 94
  }, {
    "from": 85,
    "label": "has",
    "to": 95
  }, {
    "from": 85,
    "label": "has",
    "to": 96
  }, {
    "from": 85,
    "label": "has",
    "to": 97
  }, {
    "from": 85,
    "label": "has",
    "to": 98
  }, {
    "from": 85,
    "label": "has",
    "to": 99
  }, {
    "from": 85,
    "label": "has",
    "to": 100
  }, {
    "from": 85,
    "label": "has",
    "to": 101
  }, {
    "from": 85,
    "label": "has",
    "to": 102
  }, {
    "from": 85,
    "label": "has",
    "to": 103
  }, {
    "from": 85,
    "label": "has",
    "to": 104
  }, {
    "from": 85,
    "label": "has",
    "to": 95
  }, {
    "from": 85,
    "label": "has",
    "to": 96
  }, {
    "from": 85,
    "label": "has",
    "to": 97
  }, {
    "from": 85,
    "label": "has",
    "to": 98
  }, {
    "from": 85,
    "label": "has",
    "to": 105
  }, {
    "from": 85,
    "label": "has",
    "to": 75
  }, {
    "from": 85,
    "label": "has",
    "to": 76
  }, {
    "from": 85,
    "label": "has",
    "to": 106
  }, {
    "from": 85,
    "label": "has",
    "to": 107
  }, {
    "from": 85,
    "label": "has",
    "to": 89
  }, {
    "from": 85,
    "label": "has",
    "to": 100
  }, {
    "from": 85,
    "label": "has",
    "to": 91
  }, {
    "from": 85,
    "label": "has",
    "to": 92
  }, {
    "from": 85,
    "label": "has",
    "to": 93
  }, {
    "from": 85,
    "label": "has",
    "to": 94
  }, {
    "from": 85,
    "label": "has",
    "to": 95
  }, {
    "from": 85,
    "label": "has",
    "to": 96
  }, {
    "from": 85,
    "label": "has",
    "to": 97
  }, {
    "from": 85,
    "label": "has",
    "to": 98
  }, {
    "from": 85,
    "label": "has",
    "to": 108
  }, {
    "from": 85,
    "label": "has",
    "to": 100
  }, {
    "from": 85,
    "label": "has",
    "to": 101
  }, {
    "from": 85,
    "label": "has",
    "to": 102
  }, {
    "from": 85,
    "label": "has",
    "to": 103
  }, {
    "from": 85,
    "label": "has",
    "to": 104
  }, {
    "from": 85,
    "label": "has",
    "to": 95
  }, {
    "from": 85,
    "label": "has",
    "to": 96
  }, {
    "from": 85,
    "label": "has",
    "to": 97
  }, {
    "from": 85,
    "label": "has",
    "to": 98
  }, {
    "from": 85,
    "label": "has",
    "to": 109
  }, {
    "from": 85,
    "label": "has",
    "to": 75
  }, {
    "from": 85,
    "label": "has",
    "to": 76
  }, {
    "from": 85,
    "label": "has",
    "to": 110
  }, {
    "from": 85,
    "label": "has",
    "to": 107
  }, {
    "from": 85,
    "label": "has",
    "to": 111
  }, {
    "from": 85,
    "label": "has",
    "to": 100
  }, {
    "from": 85,
    "label": "has",
    "to": 112
  }, {
    "from": 85,
    "label": "has",
    "to": 113
  }, {
    "from": 85,
    "label": "has",
    "to": 114
  }, {
    "from": 85,
    "label": "has",
    "to": 115
  }, {
    "from": 85,
    "label": "has",
    "to": 116
  }, {
    "from": 85,
    "label": "has",
    "to": 117
  }, {
    "from": 85,
    "label": "has",
    "to": 118
  }, {
    "from": 85,
    "label": "has",
    "to": 119
  }, {
    "from": 85,
    "label": "has",
    "to": 120
  }, {
    "from": 85,
    "label": "has",
    "to": 90
  }, {
    "from": 85,
    "label": "has",
    "to": 112
  }, {
    "from": 85,
    "label": "has",
    "to": 113
  }, {
    "from": 85,
    "label": "has",
    "to": 114
  }, {
    "from": 85,
    "label": "has",
    "to": 115
  }, {
    "from": 85,
    "label": "has",
    "to": 121
  }, {
    "from": 85,
    "label": "has",
    "to": 122
  }, {
    "from": 85,
    "label": "has",
    "to": 123
  }, {
    "from": 85,
    "label": "has",
    "to": 124
  }, {
    "from": 85,
    "label": "has",
    "to": 125
  }, {
    "from": 85,
    "label": "has",
    "to": 75
  }, {
    "from": 85,
    "label": "has",
    "to": 76
  }, {
    "from": 85,
    "label": "has",
    "to": 126
  }, {
    "from": 85,
    "label": "has",
    "to": 107
  }, {
    "from": 85,
    "label": "has",
    "to": 127
  }, {
    "from": 85,
    "label": "has",
    "to": 100
  }, {
    "from": 85,
    "label": "has",
    "to": 91
  }, {
    "from": 85,
    "label": "has",
    "to": 92
  }, {
    "from": 85,
    "label": "has",
    "to": 93
  }, {
    "from": 85,
    "label": "has",
    "to": 94
  }, {
    "from": 85,
    "label": "has",
    "to": 116
  }, {
    "from": 85,
    "label": "has",
    "to": 117
  }, {
    "from": 85,
    "label": "has",
    "to": 118
  }, {
    "from": 85,
    "label": "has",
    "to": 119
  }, {
    "from": 85,
    "label": "has",
    "to": 128
  }, {
    "from": 85,
    "label": "has",
    "to": 100
  }, {
    "from": 85,
    "label": "has",
    "to": 101
  }, {
    "from": 85,
    "label": "has",
    "to": 102
  }, {
    "from": 85,
    "label": "has",
    "to": 103
  }, {
    "from": 85,
    "label": "has",
    "to": 104
  }, {
    "from": 85,
    "label": "has",
    "to": 121
  }, {
    "from": 85,
    "label": "has",
    "to": 122
  }, {
    "from": 85,
    "label": "has",
    "to": 123
  }, {
    "from": 85,
    "label": "has",
    "to": 124
  }, {
    "from": 85,
    "label": "has",
    "to": 129
  }, {
    "from": 85,
    "label": "has",
    "to": 75
  }, {
    "from": 85,
    "label": "has",
    "to": 76
  }, {
    "from": 85,
    "label": "has",
    "to": 130
  }, {
    "from": 85,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 132,
    "label": "has",
    "to": 137
  }, {
    "from": 132,
    "label": "has",
    "to": 138
  }, {
    "from": 132,
    "label": "has",
    "to": 139
  }, {
    "from": 132,
    "label": "has",
    "to": 140
  }, {
    "from": 132,
    "label": "has",
    "to": 141
  }, {
    "from": 132,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 132,
    "label": "has",
    "to": 144
  }, {
    "from": 132,
    "label": "has",
    "to": 75
  }, {
    "from": 132,
    "label": "has",
    "to": 145
  }, {
    "from": 132,
    "label": "has",
    "to": 139
  }, {
    "from": 132,
    "label": "has",
    "to": 146
  }, {
    "from": 132,
    "label": "has",
    "to": 147
  }, {
    "from": 132,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 132,
    "label": "has",
    "to": 144
  }, {
    "from": 132,
    "label": "has",
    "to": 75
  }, {
    "from": 132,
    "label": "has",
    "to": 148
  }, {
    "from": 132,
    "label": "has",
    "to": 139
  }, {
    "from": 132,
    "label": "has",
    "to": 149
  }, {
    "from": 132,
    "label": "has",
    "to": 150
  }, {
    "from": 132,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 132,
    "label": "has",
    "to": 144
  }, {
    "from": 132,
    "label": "has",
    "to": 75
  }, {
    "from": 132,
    "label": "has",
    "to": 110
  }, {
    "from": 132,
    "label": "has",
    "to": 139
  }, {
    "from": 132,
    "label": "has",
    "to": 151
  }, {
    "from": 132,
    "label": "has",
    "to": 152
  }, {
    "from": 132,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 132,
    "label": "has",
    "to": 144
  }, {
    "from": 132,
    "label": "has",
    "to": 75
  }, {
    "from": 132,
    "label": "has",
    "to": 126
  }, {
    "from": 132,
    "label": "has",
    "to": 139
  }, {
    "from": 132,
    "label": "has",
    "to": 155
  }, {
    "from": 132,
    "label": "has",
    "to": 156
  }, {
    "from": 132,
    "label": "has",
    "to": 157
  }, {
    "from": 132,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 143
  }, {
    "from": 158,
    "label": "has",
    "to": 154
  }, {
    "from": 132,
    "label": "has",
    "to": 144
  }, {
    "from": 132,
    "label": "has",
    "to": 75
  }, {
    "from": 132,
    "label": "has",
    "to": 159
  }, {
    "from": 132,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 161,
    "label": "has",
    "to": 165
  }, {
    "from": 161,
    "label": "has",
    "to": 166
  }, {
    "from": 161,
    "label": "has",
    "to": 76
  }, {
    "from": 161,
    "label": "has",
    "to": 167
  }, {
    "from": 161,
    "label": "has",
    "to": 168
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 161,
    "label": "has",
    "to": 169
  }, {
    "from": 161,
    "label": "has",
    "to": 166
  }, {
    "from": 161,
    "label": "has",
    "to": 76
  }, {
    "from": 161,
    "label": "has",
    "to": 170
  }, {
    "from": 161,
    "label": "has",
    "to": 171
  }, {
    "from": 161,
    "label": "has",
    "to": 172
  }, {
    "from": 161,
    "label": "has",
    "to": 166
  }, {
    "from": 161,
    "label": "has",
    "to": 76
  }, {
    "from": 161,
    "label": "has",
    "to": 173
  }, {
    "from": 161,
    "label": "has",
    "to": 171
  }, {
    "from": 161,
    "label": "has",
    "to": 174
  }, {
    "from": 161,
    "label": "has",
    "to": 166
  }, {
    "from": 161,
    "label": "has",
    "to": 76
  }, {
    "from": 161,
    "label": "has",
    "to": 170
  }, {
    "from": 161,
    "label": "has",
    "to": 171
  }, {
    "from": 161,
    "label": "has",
    "to": 172
  }, {
    "from": 161,
    "label": "has",
    "to": 166
  }, {
    "from": 161,
    "label": "has",
    "to": 76
  }, {
    "from": 161,
    "label": "has",
    "to": 175
  }, {
    "from": 161,
    "label": "has",
    "to": 176
  }, {
    "from": 161,
    "label": "has",
    "to": 177
  }, {
    "from": 161,
    "label": "has",
    "to": 171
  }, {
    "from": 161,
    "label": "has",
    "to": 178
  }, {
    "from": 161,
    "label": "has",
    "to": 166
  }, {
    "from": 161,
    "label": "has",
    "to": 76
  }, {
    "from": 161,
    "label": "has",
    "to": 179
  }, {
    "from": 180,
    "label": "has",
    "to": 86
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 180,
    "label": "has",
    "to": 182
  }, {
    "from": 180,
    "label": "has",
    "to": 183
  }, {
    "from": 180,
    "label": "has",
    "to": 184
  }, {
    "from": 180,
    "label": "has",
    "to": 185
  }, {
    "from": 180,
    "label": "has",
    "to": 186
  }, {
    "from": 180,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 187,
    "label": "has",
    "to": 190
  }, {
    "from": 180,
    "label": "has",
    "to": 191
  }, {
    "from": 180,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 192,
    "label": "has",
    "to": 195
  }, {
    "from": 192,
    "label": "has",
    "to": 196
  }, {
    "from": 180,
    "label": "has",
    "to": 166
  }, {
    "from": 180,
    "label": "has",
    "to": 76
  }, {
    "from": 180,
    "label": "has",
    "to": 173
  }, {
    "from": 180,
    "label": "has",
    "to": 197
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 198,
    "label": "has",
    "to": 200
  }, {
    "from": 198,
    "label": "has",
    "to": 201
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 202,
    "label": "has",
    "to": 166
  }, {
    "from": 202,
    "label": "has",
    "to": 49
  }, {
    "from": 202,
    "label": "has",
    "to": 50
  }, {
    "from": 202,
    "label": "has",
    "to": 205
  }, {
    "from": 202,
    "label": "has",
    "to": 206
  }, {
    "from": 202,
    "label": "has",
    "to": 53
  }, {
    "from": 202,
    "label": "has",
    "to": 53
  }, {
    "from": 202,
    "label": "has",
    "to": 207
  }, {
    "from": 202,
    "label": "has",
    "to": 208
  }, {
    "from": 202,
    "label": "has",
    "to": 209
  }, {
    "from": 202,
    "label": "has",
    "to": 210
  }, {
    "from": 202,
    "label": "has",
    "to": 211
  }, {
    "from": 202,
    "label": "has",
    "to": 53
  }, {
    "from": 202,
    "label": "has",
    "to": 212
  }, {
    "from": 202,
    "label": "has",
    "to": 53
  }, {
    "from": 202,
    "label": "has",
    "to": 55
  }, {
    "from": 202,
    "label": "has",
    "to": 213
  }, {
    "from": 202,
    "label": "has",
    "to": 214
  }, {
    "from": 202,
    "label": "has",
    "to": 215
  }, {
    "from": 202,
    "label": "has",
    "to": 216
  }, {
    "from": 202,
    "label": "has",
    "to": 217
  }, {
    "from": 202,
    "label": "has",
    "to": 218
  }, {
    "from": 202,
    "label": "has",
    "to": 219
  }, {
    "from": 202,
    "label": "has",
    "to": 220
  }, {
    "from": 202,
    "label": "has",
    "to": 221
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 222,
    "label": "has",
    "to": 224
  }, {
    "from": 222,
    "label": "has",
    "to": 225
  }, {
    "from": 226,
    "label": "has",
    "to": 227
  }, {
    "from": 226,
    "label": "has",
    "to": 228
  }, {
    "from": 226,
    "label": "has",
    "to": 229
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 230,
    "label": "has",
    "to": 233
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 234,
    "label": "has",
    "to": 237
  }, {
    "from": 234,
    "label": "has",
    "to": 238
  }, {
    "from": 234,
    "label": "has",
    "to": 239
  }, {
    "from": 234,
    "label": "has",
    "to": 240
  }, {
    "from": 234,
    "label": "has",
    "to": 237
  }, {
    "from": 234,
    "label": "has",
    "to": 241
  }, {
    "from": 234,
    "label": "has",
    "to": 242
  }, {
    "from": 234,
    "label": "has",
    "to": 243
  }, {
    "from": 234,
    "label": "has",
    "to": 239
  }, {
    "from": 234,
    "label": "has",
    "to": 244
  }, {
    "from": 234,
    "label": "has",
    "to": 237
  }, {
    "from": 234,
    "label": "has",
    "to": 245
  }, {
    "from": 234,
    "label": "has",
    "to": 239
  }, {
    "from": 234,
    "label": "has",
    "to": 246
  }, {
    "from": 234,
    "label": "has",
    "to": 237
  }, {
    "from": 234,
    "label": "has",
    "to": 247
  }, {
    "from": 234,
    "label": "has",
    "to": 239
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 234,
    "label": "has",
    "to": 237
  }, {
    "from": 234,
    "label": "has",
    "to": 248
  }, {
    "from": 234,
    "label": "has",
    "to": 249
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 250,
    "label": "has",
    "to": 3
  }, {
    "from": 250,
    "label": "has",
    "to": 3
  }, {
    "from": 250,
    "label": "has",
    "to": 252
  }, {
    "from": 62,
    "label": "calls",
    "to": 57
  }, {
    "from": 5,
    "label": "calls",
    "to": 254
  }, {
    "from": 132,
    "label": "calls",
    "to": 254
  }, {
    "from": 132,
    "label": "calls",
    "to": 254
  }, {
    "from": 132,
    "label": "calls",
    "to": 254
  }, {
    "from": 253,
    "label": "calls",
    "to": 254
  }, {
    "from": 253,
    "label": "calls",
    "to": 255
  }, {
    "from": 253,
    "label": "calls",
    "to": 272
  }, {
    "from": 7,
    "label": "calls",
    "to": 272
  }, {
    "from": 37,
    "label": "calls",
    "to": 272
  }, {
    "from": 85,
    "label": "calls",
    "to": 272
  }, {
    "from": 85,
    "label": "calls",
    "to": 272
  }, {
    "from": 85,
    "label": "calls",
    "to": 272
  }, {
    "from": 85,
    "label": "calls",
    "to": 272
  }, {
    "from": 85,
    "label": "calls",
    "to": 272
  }, {
    "from": 85,
    "label": "calls",
    "to": 272
  }, {
    "from": 180,
    "label": "calls",
    "to": 272
  }, {
    "from": 198,
    "label": "calls",
    "to": 272
  }, {
    "from": 202,
    "label": "calls",
    "to": 272
  }, {
    "from": 226,
    "label": "calls",
    "to": 272
  }, {
    "from": 226,
    "label": "calls",
    "to": 272
  }, {
    "from": 253,
    "label": "calls",
    "to": 272
  }, {
    "from": 253,
    "label": "calls",
    "to": 272
  }, {
    "from": 37,
    "label": "calls",
    "to": 28
  }, {
    "from": 37,
    "label": "calls",
    "to": 28
  }, {
    "from": 37,
    "label": "calls",
    "to": 28
  }, {
    "from": 7,
    "label": "calls",
    "to": 256
  }, {
    "from": 7,
    "label": "calls",
    "to": 256
  }, {
    "from": 161,
    "label": "calls",
    "to": 257
  }, {
    "from": 161,
    "label": "calls",
    "to": 257
  }, {
    "from": 161,
    "label": "calls",
    "to": 257
  }, {
    "from": 161,
    "label": "calls",
    "to": 257
  }, {
    "from": 161,
    "label": "calls",
    "to": 257
  }, {
    "from": 161,
    "label": "calls",
    "to": 257
  }, {
    "from": 253,
    "label": "calls",
    "to": 19
  }, {
    "from": 253,
    "label": "calls",
    "to": 19
  }, {
    "from": 253,
    "label": "calls",
    "to": 19
  }, {
    "from": 253,
    "label": "calls",
    "to": 259
  }, {
    "from": 253,
    "label": "calls",
    "to": 259
  }, {
    "from": 253,
    "label": "calls",
    "to": 260
  }, {
    "from": 161,
    "label": "calls",
    "to": 5
  }, {
    "from": 234,
    "label": "calls",
    "to": 5
  }, {
    "from": 253,
    "label": "calls",
    "to": 261
  }, {
    "from": 180,
    "label": "calls",
    "to": 261
  }, {
    "from": 230,
    "label": "calls",
    "to": 273
  }, {
    "from": 253,
    "label": "calls",
    "to": 262
  }, {
    "from": 253,
    "label": "calls",
    "to": 262
  }, {
    "from": 253,
    "label": "calls",
    "to": 262
  }, {
    "from": 19,
    "label": "calls",
    "to": 263
  }, {
    "from": 19,
    "label": "calls",
    "to": 263
  }, {
    "from": 37,
    "label": "calls",
    "to": 263
  }, {
    "from": 37,
    "label": "calls",
    "to": 263
  }, {
    "from": 202,
    "label": "calls",
    "to": 263
  }, {
    "from": 253,
    "label": "calls",
    "to": 263
  }, {
    "from": 253,
    "label": "calls",
    "to": 263
  }, {
    "from": 85,
    "label": "calls",
    "to": 2
  }, {
    "from": 85,
    "label": "calls",
    "to": 2
  }, {
    "from": 85,
    "label": "calls",
    "to": 2
  }, {
    "from": 85,
    "label": "calls",
    "to": 2
  }, {
    "from": 85,
    "label": "calls",
    "to": 2
  }, {
    "from": 85,
    "label": "calls",
    "to": 2
  }, {
    "from": 132,
    "label": "calls",
    "to": 2
  }, {
    "from": 132,
    "label": "calls",
    "to": 2
  }, {
    "from": 132,
    "label": "calls",
    "to": 2
  }, {
    "from": 132,
    "label": "calls",
    "to": 2
  }, {
    "from": 19,
    "label": "calls",
    "to": 7
  }, {
    "from": 19,
    "label": "calls",
    "to": 7
  }, {
    "from": 19,
    "label": "calls",
    "to": 7
  }, {
    "from": 19,
    "label": "calls",
    "to": 7
  }, {
    "from": 19,
    "label": "calls",
    "to": 7
  }, {
    "from": 34,
    "label": "calls",
    "to": 7
  }, {
    "from": 37,
    "label": "calls",
    "to": 7
  }, {
    "from": 37,
    "label": "calls",
    "to": 7
  }, {
    "from": 37,
    "label": "calls",
    "to": 7
  }, {
    "from": 37,
    "label": "calls",
    "to": 7
  }, {
    "from": 37,
    "label": "calls",
    "to": 7
  }, {
    "from": 37,
    "label": "calls",
    "to": 7
  }, {
    "from": 37,
    "label": "calls",
    "to": 7
  }, {
    "from": 37,
    "label": "calls",
    "to": 7
  }, {
    "from": 62,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 67,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 85,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 132,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 161,
    "label": "calls",
    "to": 7
  }, {
    "from": 180,
    "label": "calls",
    "to": 7
  }, {
    "from": 180,
    "label": "calls",
    "to": 7
  }, {
    "from": 180,
    "label": "calls",
    "to": 7
  }, {
    "from": 180,
    "label": "calls",
    "to": 7
  }, {
    "from": 180,
    "label": "calls",
    "to": 7
  }, {
    "from": 180,
    "label": "calls",
    "to": 7
  }, {
    "from": 180,
    "label": "calls",
    "to": 7
  }, {
    "from": 180,
    "label": "calls",
    "to": 7
  }, {
    "from": 180,
    "label": "calls",
    "to": 7
  }, {
    "from": 180,
    "label": "calls",
    "to": 7
  }, {
    "from": 180,
    "label": "calls",
    "to": 7
  }, {
    "from": 180,
    "label": "calls",
    "to": 7
  }, {
    "from": 180,
    "label": "calls",
    "to": 7
  }, {
    "from": 202,
    "label": "calls",
    "to": 7
  }, {
    "from": 202,
    "label": "calls",
    "to": 7
  }, {
    "from": 202,
    "label": "calls",
    "to": 7
  }, {
    "from": 202,
    "label": "calls",
    "to": 7
  }, {
    "from": 222,
    "label": "calls",
    "to": 7
  }, {
    "from": 222,
    "label": "calls",
    "to": 7
  }, {
    "from": 234,
    "label": "calls",
    "to": 7
  }, {
    "from": 234,
    "label": "calls",
    "to": 7
  }, {
    "from": 234,
    "label": "calls",
    "to": 7
  }, {
    "from": 234,
    "label": "calls",
    "to": 7
  }, {
    "from": 234,
    "label": "calls",
    "to": 7
  }, {
    "from": 234,
    "label": "calls",
    "to": 7
  }, {
    "from": 234,
    "label": "calls",
    "to": 7
  }, {
    "from": 234,
    "label": "calls",
    "to": 7
  }, {
    "from": 234,
    "label": "calls",
    "to": 7
  }, {
    "from": 234,
    "label": "calls",
    "to": 7
  }, {
    "from": 234,
    "label": "calls",
    "to": 7
  }, {
    "from": 253,
    "label": "calls",
    "to": 264
  }, {
    "from": 230,
    "label": "calls",
    "to": 265
  }, {
    "from": 253,
    "label": "calls",
    "to": 265
  }, {
    "from": 12,
    "label": "calls",
    "to": 266
  }, {
    "from": 12,
    "label": "calls",
    "to": 266
  }, {
    "from": 37,
    "label": "calls",
    "to": 267
  }, {
    "from": 37,
    "label": "calls",
    "to": 267
  }, {
    "from": 37,
    "label": "calls",
    "to": 267
  }, {
    "from": 253,
    "label": "calls",
    "to": 268
  }, {
    "from": 253,
    "label": "calls",
    "to": 269
  }, {
    "from": 85,
    "label": "calls",
    "to": 281
  }, {
    "from": 85,
    "label": "calls",
    "to": 281
  }, {
    "from": 85,
    "label": "calls",
    "to": 281
  }, {
    "from": 132,
    "label": "calls",
    "to": 281
  }, {
    "from": 132,
    "label": "calls",
    "to": 281
  }, {
    "from": 132,
    "label": "calls",
    "to": 281
  }, {
    "from": 132,
    "label": "calls",
    "to": 281
  }, {
    "from": 234,
    "label": "calls",
    "to": 281
  }, {
    "from": 253,
    "label": "calls",
    "to": 281
  }, {
    "from": 253,
    "label": "calls",
    "to": 281
  }, {
    "from": 253,
    "label": "calls",
    "to": 281
  }, {
    "from": 253,
    "label": "calls",
    "to": 281
  }, {
    "from": 253,
    "label": "calls",
    "to": 281
  }, {
    "from": 253,
    "label": "calls",
    "to": 281
  }, {
    "from": 253,
    "label": "calls",
    "to": 281
  }, {
    "from": 253,
    "label": "calls",
    "to": 281
  }, {
    "from": 253,
    "label": "calls",
    "to": 281
  }, {
    "from": 253,
    "label": "calls",
    "to": 281
  }, {
    "from": 253,
    "label": "calls",
    "to": 281
  }, {
    "from": 67,
    "label": "calls",
    "to": 32
  }, {
    "from": 67,
    "label": "calls",
    "to": 32
  }, {
    "from": 85,
    "label": "calls",
    "to": 32
  }, {
    "from": 85,
    "label": "calls",
    "to": 32
  }, {
    "from": 85,
    "label": "calls",
    "to": 32
  }, {
    "from": 85,
    "label": "calls",
    "to": 32
  }, {
    "from": 132,
    "label": "calls",
    "to": 32
  }, {
    "from": 132,
    "label": "calls",
    "to": 32
  }, {
    "from": 132,
    "label": "calls",
    "to": 32
  }, {
    "from": 132,
    "label": "calls",
    "to": 32
  }, {
    "from": 132,
    "label": "calls",
    "to": 32
  }, {
    "from": 161,
    "label": "calls",
    "to": 32
  }, {
    "from": 161,
    "label": "calls",
    "to": 32
  }, {
    "from": 161,
    "label": "calls",
    "to": 32
  }, {
    "from": 161,
    "label": "calls",
    "to": 32
  }, {
    "from": 161,
    "label": "calls",
    "to": 32
  }, {
    "from": 161,
    "label": "calls",
    "to": 32
  }, {
    "from": 180,
    "label": "calls",
    "to": 32
  }, {
    "from": 202,
    "label": "calls",
    "to": 32
  }, {
    "from": 202,
    "label": "calls",
    "to": 32
  }, {
    "from": 202,
    "label": "calls",
    "to": 32
  }, {
    "from": 202,
    "label": "calls",
    "to": 32
  }, {
    "from": 234,
    "label": "calls",
    "to": 32
  }, {
    "from": 234,
    "label": "calls",
    "to": 32
  }, {
    "from": 234,
    "label": "calls",
    "to": 32
  }, {
    "from": 234,
    "label": "calls",
    "to": 32
  }, {
    "from": 234,
    "label": "calls",
    "to": 32
  }, {
    "from": 37,
    "label": "calls",
    "to": 274
  }, {
    "from": 37,
    "label": "calls",
    "to": 274
  }, {
    "from": 202,
    "label": "calls",
    "to": 274
  }, {
    "from": 202,
    "label": "calls",
    "to": 274
  }, {
    "from": 202,
    "label": "calls",
    "to": 274
  }, {
    "from": 202,
    "label": "calls",
    "to": 274
  }, {
    "from": 57,
    "label": "calls",
    "to": 275
  }, {
    "from": 57,
    "label": "calls",
    "to": 271
  }, {
    "from": 19,
    "label": "calls",
    "to": 280
  }, {
    "from": 37,
    "label": "calls",
    "to": 30
  }, {
    "from": 62,
    "label": "calls",
    "to": 30
  }, {
    "from": 202,
    "label": "calls",
    "to": 30
  }, {
    "from": 202,
    "label": "calls",
    "to": 30
  }, {
    "from": 180,
    "label": "calls",
    "to": 12
  }, {
    "from": 180,
    "label": "calls",
    "to": 12
  }, {
    "from": 2,
    "label": "calls",
    "to": 278
  }, {
    "from": 37,
    "label": "calls",
    "to": 278
  }, {
    "from": 202,
    "label": "calls",
    "to": 278
  }, {
    "from": 19,
    "label": "calls",
    "to": 279
  }, {
    "from": 180,
    "label": "calls",
    "to": 279
  }, {
    "from": 180,
    "label": "calls",
    "to": 279
  }, {
    "from": 180,
    "label": "calls",
    "to": 279
  }, {
    "from": 253,
    "label": "calls",
    "to": 279
  }, {
    "from": 37,
    "label": "calls",
    "to": 34
  }, {
    "from": 253,
    "label": "calls",
    "to": 277
  }, {
    "from": 19,
    "label": "calls",
    "to": 277
  }, {
    "from": 19,
    "label": "calls",
    "to": 277
  }, {
    "from": 19,
    "label": "calls",
    "to": 277
  }, {
    "from": 85,
    "label": "calls",
    "to": 277
  }, {
    "from": 85,
    "label": "calls",
    "to": 277
  }, {
    "from": 85,
    "label": "calls",
    "to": 277
  }, {
    "from": 85,
    "label": "calls",
    "to": 277
  }, {
    "from": 85,
    "label": "calls",
    "to": 277
  }, {
    "from": 85,
    "label": "calls",
    "to": 277
  }, {
    "from": 85,
    "label": "calls",
    "to": 277
  }, {
    "from": 85,
    "label": "calls",
    "to": 277
  }, {
    "from": 132,
    "label": "calls",
    "to": 277
  }, {
    "from": 132,
    "label": "calls",
    "to": 277
  }, {
    "from": 132,
    "label": "calls",
    "to": 277
  }, {
    "from": 132,
    "label": "calls",
    "to": 277
  }, {
    "from": 132,
    "label": "calls",
    "to": 277
  }, {
    "from": 132,
    "label": "calls",
    "to": 277
  }, {
    "from": 180,
    "label": "calls",
    "to": 277
  }, {
    "from": 180,
    "label": "calls",
    "to": 277
  }, {
    "from": 253,
    "label": "calls",
    "to": 277
  }, {
    "from": 253,
    "label": "calls",
    "to": 276
  }, {
    "from": 253,
    "label": "calls",
    "to": 258
  }, {
    "from": 253,
    "label": "calls",
    "to": 258
  }, {
    "from": 253,
    "label": "calls",
    "to": 258
  }, {
    "from": 253,
    "label": "calls",
    "to": 270
  }, {
    "from": 1,
    "label": "contains",
    "to": 253
  }, {
    "from": 253,
    "label": "declares",
    "to": 2
  }, {
    "from": 253,
    "label": "declares",
    "to": 5
  }, {
    "from": 253,
    "label": "declares",
    "to": 7
  }, {
    "from": 253,
    "label": "declares",
    "to": 12
  }, {
    "from": 253,
    "label": "declares",
    "to": 19
  }, {
    "from": 253,
    "label": "declares",
    "to": 28
  }, {
    "from": 253,
    "label": "declares",
    "to": 30
  }, {
    "from": 253,
    "label": "declares",
    "to": 32
  }, {
    "from": 253,
    "label": "declares",
    "to": 34
  }, {
    "from": 253,
    "label": "declares",
    "to": 37
  }, {
    "from": 253,
    "label": "declares",
    "to": 57
  }, {
    "from": 253,
    "label": "declares",
    "to": 62
  }, {
    "from": 253,
    "label": "declares",
    "to": 67
  }, {
    "from": 253,
    "label": "declares",
    "to": 85
  }, {
    "from": 253,
    "label": "declares",
    "to": 132
  }, {
    "from": 253,
    "label": "declares",
    "to": 161
  }, {
    "from": 253,
    "label": "declares",
    "to": 180
  }, {
    "from": 253,
    "label": "declares",
    "to": 198
  }, {
    "from": 253,
    "label": "declares",
    "to": 202
  }, {
    "from": 253,
    "label": "declares",
    "to": 222
  }, {
    "from": 253,
    "label": "declares",
    "to": 226
  }, {
    "from": 253,
    "label": "declares",
    "to": 230
  }, {
    "from": 253,
    "label": "declares",
    "to": 234
  }, {
    "from": 253,
    "label": "declares",
    "to": 250
  }, {
    "from": 1,
    "label": "contains",
    "to": 282
  }, {
    "from": 1,
    "label": "contains",
    "to": 283
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test",
    "type": "module"
  }, {
    "id": 2,
    "text": "function fetch_table ()\r\n\treturn setmetatable({}, mt)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function sql_erase_table (table_name)\r\n\treturn string.format (\"delete from %s\", table_name)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function assert2 (expected, value, msg)\r\n\tif not msg then\r\n\t\tmsg = ''\r\n\telse\r\n\t\tmsg = msg..'\\n'\r\n\tend\r\n\treturn assert (value == expected,\r\n\t\tmsg..\"wrong value (\"..tostring(value)..\" instead of \"..\r\n\t\ttostring(expected)..\")\")\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "if not msg then\r\n\t\tmsg = ''\r\n\telse\r\n\t\tmsg = msg..'\\n'\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "msg = ''",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "msg = msg..'\\n'",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function table_compare(t1, t2)\r\n\tif t1 == t2 then return true; end\r\n\r\n\tfor i, v in pairs(t1) do\r\n\t\tif t2[i] ~= v then return false; end\r\n\tend\r\n\r\n\tfor i, v in pairs(t2) do\r\n\t\tif t1[i] ~= v then return false; end\r\n\tend\r\n\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "if t1 == t2 then return true; end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "for i, v in pairs(t1) do\r\n\t\tif t2[i] ~= v then return false; end\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 15,
    "text": "if t2[i] ~= v then return false; end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "for i, v in pairs(t2) do\r\n\t\tif t1[i] ~= v then return false; end\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "if t1[i] ~= v then return false; end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function test_object (obj, objmethods)\r\n\t-- checking object type.\r\n\tassert2 (true, type(obj) == \"userdata\" or type(obj) == \"table\", \"incorrect object type\")\r\n\r\n\t-- trying to get metatable.\r\n\tassert2 (\"LuaSQL: you're not allowed to get this metatable\",\r\n\t\tgetmetatable(obj), \"error permitting access to object's metatable\")\r\n\t-- trying to set metatable.\r\n\tassert2 (false, pcall (setmetatable, ENV, {}))\r\n\t-- checking existence of object's methods.\r\n\tfor i = 1, table.getn (objmethods) do\r\n\t\tlocal method = obj[objmethods[i]]\r\n\t\tassert2 (\"function\", type(method))\r\n\t\tassert2 (false, pcall (method), \"no 'self' parameter accepted\")\r\n\tend\r\n\treturn obj\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "assert2 (true, type(obj) == \"userdata\" or type(obj) == \"table\", \"incorrect object type\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert2 (\"LuaSQL: you're not allowed to get this metatable\",\r\n\t\tgetmetatable(obj), \"error permitting access to object's metatable\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert2 (false, pcall (setmetatable, ENV, {}))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "for i = 1, table.getn (objmethods) do\r\n\t\tlocal method = obj[objmethods[i]]\r\n\t\tassert2 (\"function\", type(method))\r\n\t\tassert2 (false, pcall (method), \"no 'self' parameter accepted\")\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 24,
    "text": "local method = obj[objmethods[i]]",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "assert2 (\"function\", type(method))",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "assert2 (false, pcall (method), \"no 'self' parameter accepted\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function (obj)\r\n\treturn test_object (obj, ENV_METHODS)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function (obj)\r\n\treturn test_object (obj, CONN_METHODS)\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function (obj)\r\n\treturn test_object (obj, CUR_METHODS)\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function checkUnknownDatabase(ENV)\r\n\tassert2 (nil, ENV:connect (\"/unknown-data-base\"), \"this should be an error\")\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "assert2 (nil, ENV:connect (\"/unknown-data-base\"), \"this should be an error\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function basic_test ()\r\n\t-- Check environment object.\r\n\tENV = ENV_OK (luasql[driver] ())\r\n\tassert2 (true, ENV:close(), \"couldn't close environment\")\r\n\t-- trying to connect with a closed environment.\r\n\tassert2 (false, pcall (ENV.connect, ENV, datasource, username, password),\r\n\t\t\"error connecting with a closed environment\")\r\n\t-- it is ok to close a closed object, but false is returned instead of true.\r\n\tassert2 (false, ENV:close())\r\n\t-- Reopen the environment.\r\n\tENV = ENV_OK (luasql[driver] ())\r\n\t-- Check connection object.\r\n\tlocal conn, err = ENV:connect (datasource, username, password)\r\n\tassert (conn, (err or '')..\" (\"..datasource..\")\")\r\n\tCONN_OK (conn)\r\n\tassert2 (true, conn:close(), \"couldn't close connection\")\r\n\t-- trying to execute a statement with a closed connection.\r\n\tassert2 (false, pcall (conn.execute, conn, \"create table x (c char)\"),\r\n\t\t\"error while executing through a closed connection\")\r\n\t-- it is ok to close a closed object, but false is returned instead of true.\r\n\tassert2 (false, conn:close())\r\n\t-- Check error situation.\r\n\tcheckUnknownDatabase(ENV)\t\r\n\r\n\t-- force garbage collection\r\n\tlocal a = {}\r\n\tsetmetatable(a, {__mode=\"v\"})\r\n\ta.ENV = ENV_OK (luasql[driver] ())\r\n\ta.CONN = a.ENV:connect (datasource, username, password)\r\n\tcollectgarbage ()\r\n\tcollectgarbage ()\r\n\tassert2(nil, a.ENV, \"environment not collected\")\r\n\tassert2(nil, a.CONN, \"connection not collected\")\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "ENV = ENV_OK (luasql[driver] ())",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "assert2 (true, ENV:close(), \"couldn't close environment\")",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert2 (false, pcall (ENV.connect, ENV, datasource, username, password),\r\n\t\t\"error connecting with a closed environment\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert2 (false, ENV:close())",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local conn, err = ENV:connect (datasource, username, password)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "assert (conn, (err or '')..\" (\"..datasource..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "CONN_OK (conn)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert2 (true, conn:close(), \"couldn't close connection\")",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "assert2 (false, pcall (conn.execute, conn, \"create table x (c char)\"),\r\n\t\t\"error while executing through a closed connection\")",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "assert2 (false, conn:close())",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "checkUnknownDatabase(ENV)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "local a = {}",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "setmetatable(a, {__mode=\"v\"})",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "a.ENV = ENV_OK (luasql[driver] ())",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "a.CONN = a.ENV:connect (datasource, username, password)",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "collectgarbage ()",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "assert2(nil, a.ENV, \"environment not collected\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert2(nil, a.CONN, \"connection not collected\")",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function define_table (n)\r\n\tlocal t = {}\r\n\tfor i = 1, n do\r\n\t\ttable.insert (t, \"f\"..i..\" \"..DEFINITION_STRING_TYPE_NAME)\r\n\tend\r\n\treturn \"create table t (\"..table.concat (t, ',')..\")\"\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "for i = 1, n do\r\n\t\ttable.insert (t, \"f\"..i..\" \"..DEFINITION_STRING_TYPE_NAME)\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 60,
    "text": "table.insert (t, \"f\"..i..\" \"..DEFINITION_STRING_TYPE_NAME)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function create_table ()\r\n\t-- Check SQL statements.\r\n\tCONN = CONN_OK (ENV:connect (datasource, username, password))\r\n\t-- Create t.\r\n\tlocal cmd = define_table(TOTAL_FIELDS)\r\n\tassert2 (CREATE_TABLE_RETURN_VALUE, CONN:execute (cmd))\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "CONN = CONN_OK (ENV:connect (datasource, username, password))",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "local cmd = define_table(TOTAL_FIELDS)",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "assert2 (CREATE_TABLE_RETURN_VALUE, CONN:execute (cmd))",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function fetch2 ()\r\n\t-- insert a record.\r\n\tassert2 (1, CONN:execute (\"insert into t (f1, f2) values ('b', 'c')\"))\r\n\t-- retrieve data.\r\n\tlocal cur = CUR_OK (CONN:execute (\"select f1, f2, f3 from t\"))\r\n\t-- check data.\r\n\tlocal f1, f2, f3 = cur:fetch()\r\n\tassert2 ('b', f1)\r\n\tassert2 ('c', f2)\r\n\tassert2 (nil, f3)\r\n\tassert2 (nil, cur:fetch())\r\n\tassert2 (false, cur:close(), MSG_CURSOR_NOT_CLOSED)\r\n\tassert2 (false, cur:close())\r\n\t-- insert a second record.\r\n\tassert2 (1, CONN:execute (\"insert into t (f1, f2) values ('d', 'e')\"))\r\n\tcur = CUR_OK (CONN:execute (\"select f1, f2, f3 from t order by f1\"))\r\n\tlocal f1, f2, f3 = cur:fetch()\r\n\tassert2 ('b', f1, f2)\t-- f2 can be an error message\r\n\tassert2 ('c', f2)\r\n\tassert2 (nil, f3)\r\n\tf1, f2, f3 = cur:fetch()\r\n\tassert2 ('d', f1, f2)\t-- f2 can be an error message\r\n\tassert2 ('e', f2)\r\n\tassert2 (nil, f3)\r\n\tassert2 (nil, cur:fetch())\r\n\tassert2 (false, cur:close(), MSG_CURSOR_NOT_CLOSED)\r\n\tassert2 (false, cur:close())\r\n\t-- remove records.\r\n\tassert2 (2, CONN:execute (\"delete from t where f1 in ('b', 'd')\"))\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "assert2 (1, CONN:execute (\"insert into t (f1, f2) values ('b', 'c')\"))",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "local cur = CUR_OK (CONN:execute (\"select f1, f2, f3 from t\"))",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local f1, f2, f3 = cur:fetch()",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "assert2 ('b', f1)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert2 ('c', f2)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "assert2 (nil, f3)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "assert2 (nil, cur:fetch())",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "assert2 (false, cur:close(), MSG_CURSOR_NOT_CLOSED)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "assert2 (false, cur:close())",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "assert2 (1, CONN:execute (\"insert into t (f1, f2) values ('d', 'e')\"))",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "cur = CUR_OK (CONN:execute (\"select f1, f2, f3 from t order by f1\"))",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "assert2 ('b', f1, f2)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "f1, f2, f3 = cur:fetch()",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "assert2 ('d', f1, f2)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "assert2 ('e', f2)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "assert2 (2, CONN:execute (\"delete from t where f1 in ('b', 'd')\"))",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function fetch_new_table ()\r\n\t-- insert elements.\r\n\tassert2 (1, CONN:execute (\"insert into t (f1, f2, f3, f4) values ('a', 'b', 'c', 'd')\"))\r\n\tassert2 (1, CONN:execute (\"insert into t (f1, f2, f3, f4) values ('f', 'g', 'h', 'i')\"))\r\n\t-- retrieve data using a new table.\r\n\tlocal cur = CUR_OK (CONN:execute (\"select f1, f2, f3, f4 from t order by f1\"))\r\n\tlocal row, err = cur:fetch(fetch_table())\r\n\tassert2 (type(row), \"table\", err)\r\n\tassert2 ('a', row[1])\r\n\tassert2 ('b', row[2])\r\n\tassert2 ('c', row[3])\r\n\tassert2 ('d', row[4])\r\n\tassert2 (nil, row.f1)\r\n\tassert2 (nil, row.f2)\r\n\tassert2 (nil, row.f3)\r\n\tassert2 (nil, row.f4)\r\n\trow, err = cur:fetch(fetch_table())\r\n\tassert (type(row), \"table\", err)\r\n\tassert2 ('f', row[1])\r\n\tassert2 ('g', row[2])\r\n\tassert2 ('h', row[3])\r\n\tassert2 ('i', row[4])\r\n\tassert2 (nil, row.f1)\r\n\tassert2 (nil, row.f2)\r\n\tassert2 (nil, row.f3)\r\n\tassert2 (nil, row.f4)\r\n\tassert2 (nil, cur:fetch{})\r\n\tassert2 (false, cur:close(), MSG_CURSOR_NOT_CLOSED)\r\n\tassert2 (false, cur:close())\r\n\r\n\t-- retrieve data reusing the same table.\r\n\tio.write (\"reusing a table...\")\r\n\tcur = CUR_OK (CONN:execute (\"select f1, f2, f3, f4 from t order by f1\"))\r\n\tlocal row, err = cur:fetch(fetch_table())\r\n\tassert (type(row), \"table\", err)\r\n\tassert2 ('a', row[1])\r\n\tassert2 ('b', row[2])\r\n\tassert2 ('c', row[3])\r\n\tassert2 ('d', row[4])\r\n\tassert2 (nil, row.f1)\r\n\tassert2 (nil, row.f2)\r\n\tassert2 (nil, row.f3)\r\n\tassert2 (nil, row.f4)\r\n\trow, err = cur:fetch (row)\r\n\tassert (type(row), \"table\", err)\r\n\tassert2 ('f', row[1])\r\n\tassert2 ('g', row[2])\r\n\tassert2 ('h', row[3])\r\n\tassert2 ('i', row[4])\r\n\tassert2 (nil, row.f1)\r\n\tassert2 (nil, row.f2)\r\n\tassert2 (nil, row.f3)\r\n\tassert2 (nil, row.f4)\r\n\tassert2 (nil, cur:fetch(fetch_table()))\r\n\tassert2 (false, cur:close(), MSG_CURSOR_NOT_CLOSED)\r\n\tassert2 (false, cur:close())\r\n\r\n\t-- retrieve data reusing the same table with alphabetic indexes.\r\n\tio.write (\"with alpha keys...\")\r\n\tcur = CUR_OK (CONN:execute (\"select f1, f2, f3, f4 from t order by f1\"))\r\n\tlocal row, err = cur:fetch (fetch_table(), \"a\")\r\n\tassert (type(row), \"table\", err)\r\n\tassert2 (nil, row[1])\r\n\tassert2 (nil, row[2])\r\n\tassert2 (nil, row[3])\r\n\tassert2 (nil, row[4])\r\n\tassert2 ('a', row.f1)\r\n\tassert2 ('b', row.f2)\r\n\tassert2 ('c', row.f3)\r\n\tassert2 ('d', row.f4)\r\n\trow, err = cur:fetch (row, \"a\")\r\n\tassert2 (type(row), \"table\", err)\r\n\tassert2 (nil, row[1])\r\n\tassert2 (nil, row[2])\r\n\tassert2 (nil, row[3])\r\n\tassert2 (nil, row[4])\r\n\tassert2 ('f', row.f1)\r\n\tassert2 ('g', row.f2)\r\n\tassert2 ('h', row.f3)\r\n\tassert2 ('i', row.f4)\r\n\tassert2 (nil, cur:fetch(row, \"a\"))\r\n\tassert2 (false, cur:close(), MSG_CURSOR_NOT_CLOSED)\r\n\tassert2 (false, cur:close())\r\n\r\n\t-- retrieve data reusing the same table with both indexes.\r\n\tio.write (\"with both keys...\")\r\n\tcur = CUR_OK (CONN:execute (\"select f1, f2, f3, f4 from t order by f1\"))\r\n\tlocal row, err = cur:fetch (fetch_table(), \"an\")\r\n\tassert (type(row), \"table\", err)\r\n\tassert2 ('a', row[1])\r\n\tassert2 ('b', row[2])\r\n\tassert2 ('c', row[3])\r\n\tassert2 ('d', row[4])\r\n\tassert2 ('a', row.f1)\r\n\tassert2 ('b', row.f2)\r\n\tassert2 ('c', row.f3)\r\n\tassert2 ('d', row.f4)\r\n\trow, err = cur:fetch (row, \"an\")\r\n\tassert (type(row), \"table\", err)\r\n\tassert2 ('f', row[1])\r\n\tassert2 ('g', row[2])\r\n\tassert2 ('h', row[3])\r\n\tassert2 ('i', row[4])\r\n\tassert2 ('f', row.f1)\r\n\tassert2 ('g', row.f2)\r\n\tassert2 ('h', row.f3)\r\n\tassert2 ('i', row.f4)\r\n\tassert2 (nil, cur:fetch(row, \"an\"))\r\n\tassert2 (false, cur:close(), MSG_CURSOR_NOT_CLOSED)\r\n\tassert2 (false, cur:close())\r\n\t-- clean the table.\r\n\tassert2 (2, CONN:execute (\"delete from t where f1 in ('a', 'f')\"))\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "assert2 (1, CONN:execute (\"insert into t (f1, f2, f3, f4) values ('a', 'b', 'c', 'd')\"))",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "assert2 (1, CONN:execute (\"insert into t (f1, f2, f3, f4) values ('f', 'g', 'h', 'i')\"))",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "local cur = CUR_OK (CONN:execute (\"select f1, f2, f3, f4 from t order by f1\"))",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local row, err = cur:fetch(fetch_table())",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "assert2 (type(row), \"table\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "assert2 ('a', row[1])",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "assert2 ('b', row[2])",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "assert2 ('c', row[3])",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "assert2 ('d', row[4])",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "assert2 (nil, row.f1)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "assert2 (nil, row.f2)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "assert2 (nil, row.f3)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "assert2 (nil, row.f4)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "row, err = cur:fetch(fetch_table())",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "assert (type(row), \"table\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "assert2 ('f', row[1])",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "assert2 ('g', row[2])",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "assert2 ('h', row[3])",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "assert2 ('i', row[4])",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "assert2 (nil, cur:fetch{})",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "io.write (\"reusing a table...\")",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "cur = CUR_OK (CONN:execute (\"select f1, f2, f3, f4 from t order by f1\"))",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "row, err = cur:fetch (row)",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "assert2 (nil, cur:fetch(fetch_table()))",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "io.write (\"with alpha keys...\")",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "local row, err = cur:fetch (fetch_table(), \"a\")",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "assert2 (nil, row[1])",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "assert2 (nil, row[2])",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "assert2 (nil, row[3])",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "assert2 (nil, row[4])",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "assert2 ('a', row.f1)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "assert2 ('b', row.f2)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "assert2 ('c', row.f3)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "assert2 ('d', row.f4)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "row, err = cur:fetch (row, \"a\")",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "assert2 ('f', row.f1)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "assert2 ('g', row.f2)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "assert2 ('h', row.f3)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "assert2 ('i', row.f4)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "assert2 (nil, cur:fetch(row, \"a\"))",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "io.write (\"with both keys...\")",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "local row, err = cur:fetch (fetch_table(), \"an\")",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "row, err = cur:fetch (row, \"an\")",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "assert2 (nil, cur:fetch(row, \"an\"))",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "assert2 (2, CONN:execute (\"delete from t where f1 in ('a', 'f')\"))",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function fetch_many ()\r\n\t-- insert values.\r\n\tlocal fields, values = \"f1\", \"'v1'\"\r\n\tfor i = 2, TOTAL_FIELDS do\r\n\t\tfields = string.format (\"%s,f%d\", fields, i)\r\n\t\tvalues = string.format (\"%s,'v%d'\", values, i)\r\n\tend\r\n\tlocal cmd = string.format (\"insert into t (%s) values (%s)\",\r\n\t\tfields, values)\r\n\tassert2 (1, CONN:execute (cmd))\r\n\t-- fetch values (without a table).\r\n\tlocal cur = CUR_OK (CONN:execute (\"select * from t where f1 = 'v1'\"))\r\n\tlocal row = { cur:fetch () }\r\n\tassert2 (\"string\", type(row[1]), \"error while trying to fetch many values (without a table)\")\r\n\tfor i = 1, TOTAL_FIELDS do\r\n\t\tassert2 ('v'..i, row[i])\r\n\tend\r\n\tassert2 (nil, cur:fetch (row))\r\n\tassert2 (false, cur:close(), MSG_CURSOR_NOT_CLOSED)\r\n\t-- fetch values (with a table and default indexing).\r\n\tio.write (\"with a table...\")\r\n\tlocal cur = CUR_OK (CONN:execute (\"select * from t where f1 = 'v1'\"))\r\n\tlocal row = cur:fetch(fetch_table())\r\n\tassert2 (\"string\", type(row[1]), \"error while trying to fetch many values (default indexing)\")\r\n\tfor i = 1, TOTAL_FIELDS do\r\n\t\tassert2 ('v'..i, row[i])\r\n\tend\r\n\tassert2 (nil, cur:fetch (row))\r\n\tassert2 (false, cur:close(), MSG_CURSOR_NOT_CLOSED)\r\n\t-- fetch values (with numbered indexes on a table).\r\n\tio.write (\"with numbered keys...\")\r\n\tlocal cur = CUR_OK (CONN:execute (\"select * from t where f1 = 'v1'\"))\r\n\tlocal row = cur:fetch (fetch_table(), \"n\")\r\n\tassert2 (\"string\", type(row[1]), \"error while trying to fetch many values (numbered indexes)\")\r\n\tfor i = 1, TOTAL_FIELDS do\r\n\t\tassert2 ('v'..i, row[i])\r\n\tend\r\n\tassert2 (nil, cur:fetch (row))\r\n\tassert2 (false, cur:close(), MSG_CURSOR_NOT_CLOSED)\r\n\t-- fetch values (with alphanumeric indexes on a table).\r\n\tio.write (\"with alpha keys...\")\r\n\tlocal cur = CUR_OK (CONN:execute (\"select * from t where f1 = 'v1'\"))\r\n\tlocal row = cur:fetch (fetch_table(), \"a\")\r\n\tassert2 (\"string\", type(row.f1), \"error while trying to fetch many values (alphanumeric indexes)\")\r\n\tfor i = 1, TOTAL_FIELDS do\r\n\t\tassert2 ('v'..i, row['f'..i])\r\n\tend\r\n\tassert2 (nil, cur:fetch (row))\r\n\tassert2 (false, cur:close(), MSG_CURSOR_NOT_CLOSED)\r\n\t-- fetch values (with both indexes on a table).\r\n\tio.write (\"with both keys...\")\r\n\tlocal cur = CUR_OK (CONN:execute (\"select * from t where f1 = 'v1'\"))\r\n\tlocal row = cur:fetch (fetch_table(), \"na\")\r\n\tassert2 (\"string\", type(row[1]), \"error while trying to fetch many values (both indexes)\")\r\n\tassert2 (\"string\", type(row.f1), \"error while trying to fetch many values (both indexes)\")\r\n\tfor i = 1, TOTAL_FIELDS do\r\n\t\tassert2 ('v'..i, row[i])\r\n\t\tassert2 ('v'..i, row['f'..i])\r\n\tend\r\n\tassert2 (nil, cur:fetch (row))\r\n\tassert2 (false, cur:close(), MSG_CURSOR_NOT_CLOSED)\r\n\t-- clean the table.\r\n\tassert2 (1, CONN:execute (\"delete from t where f1 = 'v1'\"))\r\nend",
    "type": "function"
  }, {
    "id": 133,
    "text": "local fields, values = \"f1\", \"'v1'\"",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "for i = 2, TOTAL_FIELDS do\r\n\t\tfields = string.format (\"%s,f%d\", fields, i)\r\n\t\tvalues = string.format (\"%s,'v%d'\", values, i)\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 135,
    "text": "fields = string.format (\"%s,f%d\", fields, i)",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "values = string.format (\"%s,'v%d'\", values, i)",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "local cmd = string.format (\"insert into t (%s) values (%s)\",\r\n\t\tfields, values)",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "assert2 (1, CONN:execute (cmd))",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "local cur = CUR_OK (CONN:execute (\"select * from t where f1 = 'v1'\"))",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "local row = { cur:fetch () }",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "assert2 (\"string\", type(row[1]), \"error while trying to fetch many values (without a table)\")",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "for i = 1, TOTAL_FIELDS do\r\n\t\tassert2 ('v'..i, row[i])\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 143,
    "text": "assert2 ('v'..i, row[i])",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "assert2 (nil, cur:fetch (row))",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "io.write (\"with a table...\")",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "local row = cur:fetch(fetch_table())",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "assert2 (\"string\", type(row[1]), \"error while trying to fetch many values (default indexing)\")",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "io.write (\"with numbered keys...\")",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "local row = cur:fetch (fetch_table(), \"n\")",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "assert2 (\"string\", type(row[1]), \"error while trying to fetch many values (numbered indexes)\")",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "local row = cur:fetch (fetch_table(), \"a\")",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "assert2 (\"string\", type(row.f1), \"error while trying to fetch many values (alphanumeric indexes)\")",
    "type": "statement:functioncall"
  }, {
    "id": 153,
    "text": "for i = 1, TOTAL_FIELDS do\r\n\t\tassert2 ('v'..i, row['f'..i])\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 154,
    "text": "assert2 ('v'..i, row['f'..i])",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "local row = cur:fetch (fetch_table(), \"na\")",
    "type": "statement:localassign"
  }, {
    "id": 156,
    "text": "assert2 (\"string\", type(row[1]), \"error while trying to fetch many values (both indexes)\")",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "assert2 (\"string\", type(row.f1), \"error while trying to fetch many values (both indexes)\")",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "for i = 1, TOTAL_FIELDS do\r\n\t\tassert2 ('v'..i, row[i])\r\n\t\tassert2 ('v'..i, row['f'..i])\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 159,
    "text": "assert2 (1, CONN:execute (\"delete from t where f1 = 'v1'\"))",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function rollback ()\r\n\t-- begin transaction\r\n\tassert2 (true, CONN:setautocommit (false), \"couldn't disable autocommit\")\r\n\t-- insert a record and commit the operation.\r\n\tassert2 (1, CONN:execute (\"insert into t (f1) values ('a')\"))\r\n\tlocal cur = CUR_OK (CONN:execute (\"select count(*) from t\"))\r\n\tassert2 (1, tonumber (cur:fetch ()), \"Insert failed\")\r\n\tassert2 (true, cur:close(), \"couldn't close cursor\")\r\n\tassert2 (false, cur:close())\r\n\tassert2 (true, CONN:commit(), \"couldn't commit transaction\")\r\n\t-- insert a record and roll back the operation.\r\n\tassert2 (1, CONN:execute (\"insert into t (f1) values ('b')\"))\r\n\tlocal cur = CUR_OK (CONN:execute (\"select count(*) from t\"))\r\n\tassert2 (2, tonumber (cur:fetch ()), \"Insert failed\")\r\n\tassert2 (true, cur:close(), \"couldn't close cursor\")\r\n\tassert2 (false, cur:close())\r\n\tassert2 (true, CONN:rollback (), \"couldn't roolback transaction\")\r\n\t-- check resulting table with one record.\r\n\tcur = CUR_OK (CONN:execute (\"select count(*) from t\"))\r\n\tassert2 (1, tonumber(cur:fetch()), \"Rollback failed\")\r\n\tassert2 (true, cur:close(), \"couldn't close cursor\")\r\n\tassert2 (false, cur:close())\r\n\t-- delete a record and roll back the operation.\r\n\tassert2 (1, CONN:execute (\"delete from t where f1 = 'a'\"))\r\n\tcur = CUR_OK (CONN:execute (\"select count(*) from t\"))\r\n\tassert2 (0, tonumber(cur:fetch()))\r\n\tassert2 (true, cur:close(), \"couldn't close cursor\")\r\n\tassert2 (false, cur:close())\r\n\tassert2 (true, CONN:rollback (), \"couldn't roolback transaction\")\r\n\t-- check resulting table with one record.\r\n\tcur = CUR_OK (CONN:execute (\"select count(*) from t\"))\r\n\tassert2 (1, tonumber(cur:fetch()), \"Rollback failed\")\r\n\tassert2 (true, cur:close(), \"couldn't close cursor\")\r\n\tassert2 (false, cur:close())\r\n--[[\r\n\t-- insert a second record and turn on the auto-commit mode.\r\n\t-- this will produce a rollback on PostgreSQL and a commit on ODBC.\r\n\t-- what to do?\r\n\tassert2 (1, CONN:execute (\"insert into t (f1) values ('b')\"))\r\n\tcur = CUR_OK (CONN:execute (\"select count(*) from t\"))\r\n\tassert2 (2, tonumber (cur:fetch ()), \"Insert failed\")\r\n\tassert2 (true, cur:close(), \"couldn't close cursor\")\r\n\tassert2 (false, cur:close())\r\n\tassert2 (true, CONN:setautocommit (true), \"couldn't enable autocommit\")\r\n\t-- check resulting table with one record.\r\n\tcur = CUR_OK (CONN:execute (\"select count(*) from t\"))\r\n\tassert2 (1, tonumber(cur:fetch()), \"Rollback failed\")\r\n\tassert2 (true, cur:close(), \"couldn't close cursor\")\r\n\tassert2 (false, cur:close())\r\n--]]\r\n\t-- clean the table.\r\n\tassert2 (1, CONN:execute (sql_erase_table\"t\"))\r\n\tassert2 (true, CONN:commit (), \"couldn't commit transaction\")\r\n\tassert2 (true, CONN:setautocommit (true), \"couldn't enable autocommit\")\r\n\t-- check resulting table with no records.\r\n\tcur = CUR_OK (CONN:execute (\"select count(*) from t\"))\r\n\tassert2 (0, tonumber(cur:fetch()), \"Rollback failed\")\r\n\tassert2 (true, cur:close(), \"couldn't close cursor\")\r\n\tassert2 (false, cur:close())\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "assert2 (true, CONN:setautocommit (false), \"couldn't disable autocommit\")",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "assert2 (1, CONN:execute (\"insert into t (f1) values ('a')\"))",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "local cur = CUR_OK (CONN:execute (\"select count(*) from t\"))",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "assert2 (1, tonumber (cur:fetch ()), \"Insert failed\")",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "assert2 (true, cur:close(), \"couldn't close cursor\")",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "assert2 (true, CONN:commit(), \"couldn't commit transaction\")",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "assert2 (1, CONN:execute (\"insert into t (f1) values ('b')\"))",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "assert2 (2, tonumber (cur:fetch ()), \"Insert failed\")",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "assert2 (true, CONN:rollback (), \"couldn't roolback transaction\")",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "cur = CUR_OK (CONN:execute (\"select count(*) from t\"))",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "assert2 (1, tonumber(cur:fetch()), \"Rollback failed\")",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "assert2 (1, CONN:execute (\"delete from t where f1 = 'a'\"))",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "assert2 (0, tonumber(cur:fetch()))",
    "type": "statement:functioncall"
  }, {
    "id": 175,
    "text": "assert2 (1, CONN:execute (sql_erase_table\"t\"))",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "assert2 (true, CONN:commit (), \"couldn't commit transaction\")",
    "type": "statement:functioncall"
  }, {
    "id": 177,
    "text": "assert2 (true, CONN:setautocommit (true), \"couldn't enable autocommit\")",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "assert2 (0, tonumber(cur:fetch()), \"Rollback failed\")",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 180,
    "text": "function column_info ()\r\n\t-- insert elements.\r\n\tassert2 (1, CONN:execute (\"insert into t (f1, f2, f3, f4) values ('a', 'b', 'c', 'd')\"))\r\n\tlocal cur = CUR_OK (CONN:execute (\"select f1,f2,f3,f4 from t\"))\r\n\t-- get column information.\r\n\tlocal names, types = cur:getcolnames(), cur:getcoltypes()\r\n\tassert2 (\"table\", type(names), \"getcolnames failed\")\r\n\tassert2 (\"table\", type(types), \"getcoltypes failed\")\r\n\tassert2 (4, table.getn(names), \"incorrect column names table\")\r\n\tassert2 (4, table.getn(types), \"incorrect column types table\")\r\n\tfor i = 1, table.getn(names) do\r\n\t\tassert2 (\"f\"..i, string.lower(names[i]), \"incorrect column names table\")\r\n\t\tlocal type_i = types[i]\r\n\t\tassert (type_i == QUERYING_STRING_TYPE_NAME, \"incorrect column types table\")\r\n\tend\r\n\t-- check if the tables are being reused.\r\n\tlocal n2, t2 = cur:getcolnames(), cur:getcoltypes()\r\n\tif CHECK_GETCOL_INFO_TABLES then \r\n\t\tassert2 (names, n2, \"getcolnames is rebuilding the table\")\r\n\t\tassert2 (types, t2, \"getcoltypes is rebuilding the table\")\r\n\telse\r\n\t\tassert2 (true, table_compare(names, n2), \"getcolnames is inconsistent\")\r\n\t\tassert2 (true, table_compare(types, t2), \"getcoltypes is inconsistent\")\r\n\tend\r\n\tassert2 (true, cur:close(), \"couldn't close cursor\")\r\n\tassert2 (false, cur:close())\r\n\t-- clean the table.\r\n\tassert2 (1, CONN:execute (\"delete from t where f1 = 'a'\"))\r\nend",
    "type": "function"
  }, {
    "id": 181,
    "text": "local cur = CUR_OK (CONN:execute (\"select f1,f2,f3,f4 from t\"))",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "local names, types = cur:getcolnames(), cur:getcoltypes()",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "assert2 (\"table\", type(names), \"getcolnames failed\")",
    "type": "statement:functioncall"
  }, {
    "id": 184,
    "text": "assert2 (\"table\", type(types), \"getcoltypes failed\")",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "assert2 (4, table.getn(names), \"incorrect column names table\")",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "assert2 (4, table.getn(types), \"incorrect column types table\")",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "for i = 1, table.getn(names) do\r\n\t\tassert2 (\"f\"..i, string.lower(names[i]), \"incorrect column names table\")\r\n\t\tlocal type_i = types[i]\r\n\t\tassert (type_i == QUERYING_STRING_TYPE_NAME, \"incorrect column types table\")\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 188,
    "text": "assert2 (\"f\"..i, string.lower(names[i]), \"incorrect column names table\")",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "local type_i = types[i]",
    "type": "statement:localassign"
  }, {
    "id": 190,
    "text": "assert (type_i == QUERYING_STRING_TYPE_NAME, \"incorrect column types table\")",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "local n2, t2 = cur:getcolnames(), cur:getcoltypes()",
    "type": "statement:localassign"
  }, {
    "id": 192,
    "text": "if CHECK_GETCOL_INFO_TABLES then \r\n\t\tassert2 (names, n2, \"getcolnames is rebuilding the table\")\r\n\t\tassert2 (types, t2, \"getcoltypes is rebuilding the table\")\r\n\telse\r\n\t\tassert2 (true, table_compare(names, n2), \"getcolnames is inconsistent\")\r\n\t\tassert2 (true, table_compare(types, t2), \"getcoltypes is inconsistent\")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 193,
    "text": "assert2 (names, n2, \"getcolnames is rebuilding the table\")",
    "type": "statement:functioncall"
  }, {
    "id": 194,
    "text": "assert2 (types, t2, \"getcoltypes is rebuilding the table\")",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "assert2 (true, table_compare(names, n2), \"getcolnames is inconsistent\")",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "assert2 (true, table_compare(types, t2), \"getcoltypes is inconsistent\")",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 198,
    "text": "function escape ()\r\n        local escaped = CONN:escape\"a'b'c'd\"\r\n\tassert (\"a\\\\'b\\\\'c\\\\'d\" == escaped or \"a''b''c''d\" == escaped)\r\nend",
    "type": "function"
  }, {
    "id": 199,
    "text": "local escaped = CONN:escape\"a'b'c'd\"",
    "type": "statement:localassign"
  }, {
    "id": 200,
    "text": "assert (\"a\\\\'b\\\\'c\\\\'d\" == escaped or \"a''b''c''d\" == escaped)",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 202,
    "text": "function check_close()\r\n\t-- an object with references to it can't be closed\r\n\tlocal cmd = \"select * from t\"\r\n\tlocal cur = CUR_OK(CONN:execute (cmd))\r\n\tassert2 (true, cur:close(), \"couldn't close cursor\")\r\n\r\n\t-- force garbage collection\r\n\tlocal a = {}\r\n\tsetmetatable(a, {__mode=\"v\"})\r\n\ta.CONN = ENV:connect (datasource, username, password)\r\n\tcur = CUR_OK(a.CONN:execute (cmd))\r\n\r\n\tcollectgarbage ()\r\n\tcollectgarbage ()\r\n\tCONN_OK (a.CONN)\r\n\ta.cur = cur\r\n\ta.cur:close()\r\n\ta.CONN:close()\r\n\tcur = nil\r\n\tcollectgarbage ()\r\n\tassert2(nil, a.cur, \"cursor not collected\")\r\n\tcollectgarbage ()\r\n\tassert2(nil, a.CONN, \"connection not collected\")\r\n\r\n\t-- check cursor integrity after trying to close a connection\r\n\tlocal conn = CONN_OK (ENV:connect (datasource, username, password))\r\n\tassert2 (1, conn:execute\"insert into t (f1) values (1)\", \"could not insert a new record\")\r\n\tlocal cur = CUR_OK (conn:execute (cmd))\r\n\tlocal ok, err = pcall (conn.close, conn)\r\n\tCUR_OK (cur)\r\n\tassert (cur:fetch(), \"corrupted cursor\")\r\n\tcur:close ()\r\n\tconn:close ()\r\nend",
    "type": "function"
  }, {
    "id": 203,
    "text": "local cmd = \"select * from t\"",
    "type": "statement:localassign"
  }, {
    "id": 204,
    "text": "local cur = CUR_OK(CONN:execute (cmd))",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "a.CONN = ENV:connect (datasource, username, password)",
    "type": "statement:assign"
  }, {
    "id": 206,
    "text": "cur = CUR_OK(a.CONN:execute (cmd))",
    "type": "statement:assign"
  }, {
    "id": 207,
    "text": "CONN_OK (a.CONN)",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "a.cur = cur",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "a.cur:close()",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "a.CONN:close()",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "cur = nil",
    "type": "statement:assign"
  }, {
    "id": 212,
    "text": "assert2(nil, a.cur, \"cursor not collected\")",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "local conn = CONN_OK (ENV:connect (datasource, username, password))",
    "type": "statement:localassign"
  }, {
    "id": 214,
    "text": "assert2 (1, conn:execute\"insert into t (f1) values (1)\", \"could not insert a new record\")",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "local cur = CUR_OK (conn:execute (cmd))",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "local ok, err = pcall (conn.close, conn)",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "CUR_OK (cur)",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "assert (cur:fetch(), \"corrupted cursor\")",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "cur:close ()",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "conn:close ()",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 222,
    "text": "function drop_table ()\r\n\tassert2 (true, CONN:setautocommit(true), \"couldn't enable autocommit\")\r\n\t-- Postgres retorns 0, ODBC retorns -1, sqlite returns 1\r\n\tassert2 (DROP_TABLE_RETURN_VALUE, CONN:execute (\"drop table t\"))\r\nend",
    "type": "function"
  }, {
    "id": 223,
    "text": "assert2 (true, CONN:setautocommit(true), \"couldn't enable autocommit\")",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "assert2 (DROP_TABLE_RETURN_VALUE, CONN:execute (\"drop table t\"))",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 226,
    "text": "function close_conn ()\r\n\tassert (true, CONN:close())\r\n\tassert (true, ENV:close())\r\nend",
    "type": "function"
  }, {
    "id": 227,
    "text": "assert (true, CONN:close())",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "assert (true, ENV:close())",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 230,
    "text": "function extensions_test ()\r\n\tfor i, f in ipairs (EXTENSIONS) do\r\n\t\tf ()\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 231,
    "text": "for i, f in ipairs (EXTENSIONS) do\r\n\t\tf ()\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 232,
    "text": "f ()",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 234,
    "text": "function numrows()\r\n    local cur = CUR_OK(CONN:execute\"select * from t\")\r\n    assert2(0,cur:numrows())\r\n    cur:close()\r\n\r\n    -- Inserts one row.\r\n    assert2 (1, CONN:execute\"insert into t (f1) values ('a')\", \"could not insert a new record\")\r\n    cur = CUR_OK(CONN:execute\"select * from t\")\r\n    assert2(1,cur:numrows())\r\n    cur:close()\r\n\r\n    -- Inserts three more rows (total = 4).\r\n    assert2 (1, CONN:execute\"insert into t (f1) values ('b')\", \"could not insert a new record\")\r\n    assert2 (1, CONN:execute\"insert into t (f1) values ('c')\", \"could not insert a new record\")\r\n    assert2 (1, CONN:execute\"insert into t (f1) values ('d')\", \"could not insert a new record\")\r\n    cur = CUR_OK(CONN:execute\"select * from t\")\r\n    assert2(4,cur:numrows())\r\n\tcur:close()\r\n\r\n    -- Deletes one row\r\n    assert2(1, CONN:execute\"delete from t where f1 = 'a'\", \"could not delete the specified row\")\r\n    cur = CUR_OK(CONN:execute\"select * from t\")\r\n    assert2(3,cur:numrows())\r\n    cur:close()\r\n\r\n    -- Deletes all rows\r\n    assert2 (3, CONN:execute (sql_erase_table\"t\"))\r\n    cur = CUR_OK(CONN:execute\"select * from t\")\r\n    assert2(0,cur:numrows())\r\n    cur:close()\r\n\r\n\tio.write (\" numrows\")\r\nend",
    "type": "function"
  }, {
    "id": 235,
    "text": "local cur = CUR_OK(CONN:execute\"select * from t\")",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "assert2(0,cur:numrows())",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "cur:close()",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "assert2 (1, CONN:execute\"insert into t (f1) values ('a')\", \"could not insert a new record\")",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "cur = CUR_OK(CONN:execute\"select * from t\")",
    "type": "statement:assign"
  }, {
    "id": 240,
    "text": "assert2(1,cur:numrows())",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "assert2 (1, CONN:execute\"insert into t (f1) values ('b')\", \"could not insert a new record\")",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "assert2 (1, CONN:execute\"insert into t (f1) values ('c')\", \"could not insert a new record\")",
    "type": "statement:functioncall"
  }, {
    "id": 243,
    "text": "assert2 (1, CONN:execute\"insert into t (f1) values ('d')\", \"could not insert a new record\")",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "assert2(4,cur:numrows())",
    "type": "statement:functioncall"
  }, {
    "id": 245,
    "text": "assert2(1, CONN:execute\"delete from t where f1 = 'a'\", \"could not delete the specified row\")",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "assert2(3,cur:numrows())",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "assert2 (3, CONN:execute (sql_erase_table\"t\"))",
    "type": "statement:functioncall"
  }, {
    "id": 248,
    "text": "io.write (\" numrows\")",
    "type": "statement:functioncall"
  }, {
    "id": 249,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 250,
    "text": "function(t, i)\r\n\t\tif type(i) == \"string\" then\r\n\t\t\treturn rawget(t, string.upper(i)) or rawget(t, string.lower(i))\r\n\t\tend\r\n\r\n\t\treturn rawget(t, i)\r\n\tend",
    "type": "function"
  }, {
    "id": 251,
    "text": "if type(i) == \"string\" then\r\n\t\t\treturn rawget(t, string.upper(i)) or rawget(t, string.lower(i))\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 252,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 253,
    "text": "",
    "type": "function container"
  }, {
    "id": 254,
    "text": "format",
    "type": "global function"
  }, {
    "id": 255,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 256,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 257,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 258,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 259,
    "text": "find",
    "type": "global function"
  }, {
    "id": 260,
    "text": "xpcall",
    "type": "global function"
  }, {
    "id": 261,
    "text": "lower",
    "type": "global function"
  }, {
    "id": 262,
    "text": "print",
    "type": "global function"
  }, {
    "id": 263,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 264,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 265,
    "text": "f",
    "type": "global function"
  }, {
    "id": 266,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 267,
    "text": "luasql[driver]",
    "type": "global function"
  }, {
    "id": 268,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 269,
    "text": "loadlib",
    "type": "global function"
  }, {
    "id": 270,
    "text": "upper",
    "type": "global function"
  }, {
    "id": 271,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 272,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 273,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 274,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 275,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 276,
    "text": "require",
    "type": "global function"
  }, {
    "id": 277,
    "text": "type",
    "type": "global function"
  }, {
    "id": 278,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 279,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 280,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 281,
    "text": "write",
    "type": "global function"
  }, {
    "id": 282,
    "text": "",
    "type": "variable container"
  }, {
    "id": 283,
    "text": "",
    "type": "require container"
  } ]
}