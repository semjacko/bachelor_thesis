{
  "_filename": "getopt.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/getopt/getopt.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 34
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 36
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 27,
    "label": "has",
    "to": 37
  }, {
    "from": 27,
    "label": "has",
    "to": 38
  }, {
    "from": 27,
    "label": "has",
    "to": 37
  }, {
    "from": 27,
    "label": "has",
    "to": 39
  }, {
    "from": 22,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 25
  }, {
    "from": 41,
    "label": "has",
    "to": 26
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 28
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 30
  }, {
    "from": 43,
    "label": "has",
    "to": 31
  }, {
    "from": 42,
    "label": "has",
    "to": 32
  }, {
    "from": 42,
    "label": "has",
    "to": 36
  }, {
    "from": 42,
    "label": "has",
    "to": 35
  }, {
    "from": 42,
    "label": "has",
    "to": 37
  }, {
    "from": 42,
    "label": "has",
    "to": 38
  }, {
    "from": 42,
    "label": "has",
    "to": 37
  }, {
    "from": 42,
    "label": "has",
    "to": 39
  }, {
    "from": 22,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 25
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 45,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 28
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 32
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 35
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 38
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 39
  }, {
    "from": 22,
    "label": "has",
    "to": 56
  }, {
    "from": 22,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 57,
    "label": "has",
    "to": 23
  }, {
    "from": 57,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 25
  }, {
    "from": 63,
    "label": "has",
    "to": 26
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 28
  }, {
    "from": 64,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 30
  }, {
    "from": 43,
    "label": "has",
    "to": 31
  }, {
    "from": 64,
    "label": "has",
    "to": 32
  }, {
    "from": 64,
    "label": "has",
    "to": 28
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 32
  }, {
    "from": 64,
    "label": "has",
    "to": 34
  }, {
    "from": 64,
    "label": "has",
    "to": 35
  }, {
    "from": 64,
    "label": "has",
    "to": 36
  }, {
    "from": 64,
    "label": "has",
    "to": 35
  }, {
    "from": 64,
    "label": "has",
    "to": 37
  }, {
    "from": 64,
    "label": "has",
    "to": 38
  }, {
    "from": 64,
    "label": "has",
    "to": 37
  }, {
    "from": 64,
    "label": "has",
    "to": 39
  }, {
    "from": 57,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 25
  }, {
    "from": 67,
    "label": "has",
    "to": 26
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 28
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 30
  }, {
    "from": 69,
    "label": "has",
    "to": 31
  }, {
    "from": 68,
    "label": "has",
    "to": 32
  }, {
    "from": 68,
    "label": "has",
    "to": 36
  }, {
    "from": 68,
    "label": "has",
    "to": 35
  }, {
    "from": 68,
    "label": "has",
    "to": 37
  }, {
    "from": 68,
    "label": "has",
    "to": 38
  }, {
    "from": 68,
    "label": "has",
    "to": 37
  }, {
    "from": 68,
    "label": "has",
    "to": 39
  }, {
    "from": 57,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 25
  }, {
    "from": 71,
    "label": "has",
    "to": 46
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 49
  }, {
    "from": 73,
    "label": "has",
    "to": 50
  }, {
    "from": 73,
    "label": "has",
    "to": 51
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 28
  }, {
    "from": 74,
    "label": "has",
    "to": 53
  }, {
    "from": 74,
    "label": "has",
    "to": 32
  }, {
    "from": 74,
    "label": "has",
    "to": 54
  }, {
    "from": 74,
    "label": "has",
    "to": 35
  }, {
    "from": 74,
    "label": "has",
    "to": 55
  }, {
    "from": 74,
    "label": "has",
    "to": 38
  }, {
    "from": 74,
    "label": "has",
    "to": 55
  }, {
    "from": 74,
    "label": "has",
    "to": 39
  }, {
    "from": 22,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 50
  }, {
    "from": 79,
    "label": "has",
    "to": 51
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 35
  }, {
    "from": 22,
    "label": "has",
    "to": 56
  }, {
    "from": 22,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 58
  }, {
    "from": 81,
    "label": "has",
    "to": 28
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 62
  }, {
    "from": 81,
    "label": "has",
    "to": 23
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 25
  }, {
    "from": 83,
    "label": "has",
    "to": 26
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 28
  }, {
    "from": 84,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 30
  }, {
    "from": 43,
    "label": "has",
    "to": 31
  }, {
    "from": 84,
    "label": "has",
    "to": 32
  }, {
    "from": 84,
    "label": "has",
    "to": 28
  }, {
    "from": 84,
    "label": "has",
    "to": 33
  }, {
    "from": 84,
    "label": "has",
    "to": 32
  }, {
    "from": 84,
    "label": "has",
    "to": 34
  }, {
    "from": 84,
    "label": "has",
    "to": 35
  }, {
    "from": 84,
    "label": "has",
    "to": 36
  }, {
    "from": 84,
    "label": "has",
    "to": 35
  }, {
    "from": 84,
    "label": "has",
    "to": 37
  }, {
    "from": 84,
    "label": "has",
    "to": 38
  }, {
    "from": 84,
    "label": "has",
    "to": 37
  }, {
    "from": 84,
    "label": "has",
    "to": 39
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 25
  }, {
    "from": 86,
    "label": "has",
    "to": 26
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 28
  }, {
    "from": 87,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 30
  }, {
    "from": 69,
    "label": "has",
    "to": 31
  }, {
    "from": 87,
    "label": "has",
    "to": 32
  }, {
    "from": 87,
    "label": "has",
    "to": 36
  }, {
    "from": 87,
    "label": "has",
    "to": 35
  }, {
    "from": 87,
    "label": "has",
    "to": 37
  }, {
    "from": 87,
    "label": "has",
    "to": 38
  }, {
    "from": 87,
    "label": "has",
    "to": 37
  }, {
    "from": 87,
    "label": "has",
    "to": 39
  }, {
    "from": 81,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 25
  }, {
    "from": 89,
    "label": "has",
    "to": 46
  }, {
    "from": 89,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 49
  }, {
    "from": 73,
    "label": "has",
    "to": 50
  }, {
    "from": 73,
    "label": "has",
    "to": 51
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 28
  }, {
    "from": 90,
    "label": "has",
    "to": 53
  }, {
    "from": 90,
    "label": "has",
    "to": 32
  }, {
    "from": 90,
    "label": "has",
    "to": 54
  }, {
    "from": 90,
    "label": "has",
    "to": 35
  }, {
    "from": 90,
    "label": "has",
    "to": 55
  }, {
    "from": 90,
    "label": "has",
    "to": 38
  }, {
    "from": 90,
    "label": "has",
    "to": 55
  }, {
    "from": 90,
    "label": "has",
    "to": 39
  }, {
    "from": 22,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 50
  }, {
    "from": 79,
    "label": "has",
    "to": 51
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 35
  }, {
    "from": 21,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 62
  }, {
    "from": 91,
    "label": "has",
    "to": 32
  }, {
    "from": 14,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 61
  }, {
    "from": 96,
    "label": "has",
    "to": 28
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "calls",
    "to": 105
  }, {
    "from": 99,
    "label": "calls",
    "to": 104
  }, {
    "from": 99,
    "label": "calls",
    "to": 104
  }, {
    "from": 2,
    "label": "calls",
    "to": 106
  }, {
    "from": 14,
    "label": "calls",
    "to": 106
  }, {
    "from": 14,
    "label": "calls",
    "to": 106
  }, {
    "from": 14,
    "label": "calls",
    "to": 106
  }, {
    "from": 14,
    "label": "calls",
    "to": 106
  }, {
    "from": 14,
    "label": "calls",
    "to": 106
  }, {
    "from": 2,
    "label": "calls",
    "to": 100
  }, {
    "from": 14,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 102
  }, {
    "from": 14,
    "label": "calls",
    "to": 103
  }, {
    "from": 14,
    "label": "calls",
    "to": 103
  }, {
    "from": 14,
    "label": "calls",
    "to": 103
  }, {
    "from": 14,
    "label": "calls",
    "to": 2
  }, {
    "from": 14,
    "label": "calls",
    "to": 2
  }, {
    "from": 14,
    "label": "calls",
    "to": 2
  }, {
    "from": 14,
    "label": "calls",
    "to": 2
  }, {
    "from": 14,
    "label": "calls",
    "to": 2
  }, {
    "from": 14,
    "label": "calls",
    "to": 2
  }, {
    "from": 14,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 101
  }, {
    "from": 14,
    "label": "calls",
    "to": 101
  }, {
    "from": 1,
    "label": "contains",
    "to": 99
  }, {
    "from": 99,
    "label": "declares",
    "to": 2
  }, {
    "from": 99,
    "label": "declares",
    "to": 14
  }, {
    "from": 1,
    "label": "contains",
    "to": 107
  }, {
    "from": 1,
    "label": "contains",
    "to": 108
  }, {
    "from": 107,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 107,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 112,
    "label": "assigns",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 112,
    "label": "assigns",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 112,
    "label": "assigns",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 107,
    "label": "initializes",
    "to": 121
  }, {
    "from": 107,
    "label": "initializes",
    "to": 122
  }, {
    "from": 107,
    "label": "initializes",
    "to": 123
  }, {
    "from": 107,
    "label": "initializes",
    "to": 124
  }, {
    "from": 107,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "assigns",
    "to": 126
  }, {
    "from": 107,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 107,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 107,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 108,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "requires",
    "to": 134
  }, {
    "from": 108,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "requires",
    "to": 136
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "getopt",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function findOption(opt, opt_table)\r\n\r\n\tlocal entry\r\n\tlocal double_found = false\r\n\tfor j, t in base.ipairs(opt_table) do\r\n\t\tif string.match(t[1],opt) then\r\n\t\t\tif nil == entry then\r\n\t\t\t\tentry = j\r\n\t\t\t\tif t[1] == opt then break end\r\n\t\t\telse\r\n\t\t\t\tdouble_found = true\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\t\r\n\tif nil ~= entry and not double_found then\r\n\t\treturn true, opt_table[entry]\r\n\telseif nil ~=entry and double_found then\r\n\t\treturn false, 'doubled'\r\n\telse\r\n\t\treturn false, 'notfound'\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local entry",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local double_found = false",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "for j, t in base.ipairs(opt_table) do\r\n\t\tif string.match(t[1],opt) then\r\n\t\t\tif nil == entry then\r\n\t\t\t\tentry = j\r\n\t\t\t\tif t[1] == opt then break end\r\n\t\t\telse\r\n\t\t\t\tdouble_found = true\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 6,
    "text": "if string.match(t[1],opt) then\r\n\t\t\tif nil == entry then\r\n\t\t\t\tentry = j\r\n\t\t\t\tif t[1] == opt then break end\r\n\t\t\telse\r\n\t\t\t\tdouble_found = true\r\n\t\t\t\tbreak\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "if nil == entry then\r\n\t\t\t\tentry = j\r\n\t\t\t\tif t[1] == opt then break end\r\n\t\t\telse\r\n\t\t\t\tdouble_found = true\r\n\t\t\t\tbreak\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "entry = j",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if t[1] == opt then break end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "double_found = true",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if nil ~= entry and not double_found then\r\n\t\treturn true, opt_table[entry]\r\n\telseif nil ~=entry and double_found then\r\n\t\treturn false, 'doubled'\r\n\telse\r\n\t\treturn false, 'notfound'\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function getLongOptions(arg_v, opt_table)\r\n\r\n\tif nil == opt_table or nil == arg_v then return nil end\r\n\t\r\n\tlocal opt_res = { }\r\n\topt_res[0] = { 0, nil }\r\n\tlocal err_ind = 0\r\n\tlocal cur_opt = nil\r\n\tlocal state = OPTSTATES['begin']\r\n\t\r\n\tfor i,a in base.ipairs(arg_v) do\r\n\t\r\n\t\t-- -- BEGIN\r\n\t\tif state == OPTSTATES['begin'] then\r\n\t\t\r\n\t\t\tlocal match = false\r\n\t\t\tfor m,o in string.gmatch(a, '%-%-([%w_%-]+)=([%w()%-%+%.,/%s:%*_]*)') do\r\n\t\t\t\tmatch = true\r\n\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\tif not ok then\r\n\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\tend\r\n\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but without argument declared.\"}\r\n\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or opt[2] == OPTARGUMENTS['has']) then\r\n\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif not match then\r\n\t\t\t\tfor m in string.gmatch(a, '%-%-([%w_%-]+)') do\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif not match then\r\n\t\t\t\tfor m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\tfor j, t in base.pairs(opt_table) do\r\n\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t-- -- OPTION+OPTARG\r\n\t\telseif state == OPTSTATES['option+optarg'] then\r\n\t\t\t\r\n\t\t\tlocal pmatch = false\r\n\t\t\tfor ma in string.gmatch(a, '%-(.*)') do\r\n\t\t\t\tpmatch = true\r\n\t\t\t\tfor j, t in base.pairs(opt_table) do\r\n\t\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\t\ttable.insert(opt_res, {t[3], nil})\r\n\t\t\t\t\t\tcur_opt = nil\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tlocal match = false\r\n\t\t\t\tfor m,o in string.gmatch(a, '%-%-([%w_%-]+)=([%w()%-%+%.,/%s:%*_]*)') do\r\n\t\t\t\t\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but witout argument declared.\"}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or ar == OPTARGUMENTS['has']) then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\r\n\t\t\t\tif not match then\r\n\t\t\t\t\tfor m in string.gmatch(a, '%-%-([%w_-]+)') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tif not match then\r\n\t\t\t\t\tfor m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif not pmatch then\r\n\t\t\t\tfor m in string.gmatch(a, '([%w()%-%+%.,/%s:%*_]+)') do\r\n\t\t\t\t\tlocal ar,val\r\n\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\ttable.insert(opt_res, {val, m})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t-- -- OPTION+ARG\r\n\t\telseif state == OPTSTATES['option+arg'] then\r\n\t\t\r\n\t\t\tlocal pmatch = false\r\n\t\t\tfor ma in string.gmatch(a, '%-(.*)') do\r\n\t\t\t\tpmatch = true\r\n\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..cur_opt..\" requires an argument, but no argument found.\" }\r\n\t\t\t\tcur_opt = nil\r\n\t\t\t\t\r\n\t\t\t\tlocal match = false\r\n\t\t\t\tfor m,o in string.gmatch(a, '%-%-([%w_%-]+)=([%w()%-%+%.,/%s:%*_]*)') do\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but without argument declared.\"}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or ar == OPTARGUMENTS['has']) then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tif not match then\r\n\t\t\t\tfor m in string.gmatch(a, '%-%-([%w_%-]+)') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tif not match then\r\n\t\t\t\t\tfor m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif not pmatch then\r\n\t\t\t\tfor m in string.gmatch(a, '([%w()%-%+%.,/%s:%*_]+)') do\r\n\t\t\t\t\tlocal ar,val\r\n\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\ttable.insert(opt_res, {val, m})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\tif state == OPTSTATES['end'] then\r\n\t\t\tcur_opt = nil\r\n\t\t\tstate = OPTSTATES['begin']\r\n\t\tend\r\n\tend\r\n\t\r\n\tif state ~= OPTSTATES['end'] then\r\n\t\tif nil ~= cur_opt then\r\n\t\t\tfor j, t in base.pairs(opt_table) do\r\n\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\tif t[2] == OPTARGUMENTS['optional'] then table.insert(opt_res, {t[3], nil})\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..cur_opt..\" requiers an argument, but no argument found.\"}\r\n\t\t\t\t\tend\r\n\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\t\r\n\treturn opt_res\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "if nil == opt_table or nil == arg_v then return nil end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "local opt_res = { }",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "opt_res[0] = { 0, nil }",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "local err_ind = 0",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local cur_opt = nil",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local state = OPTSTATES['begin']",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "for i,a in base.ipairs(arg_v) do\r\n\t\r\n\t\t-- -- BEGIN\r\n\t\tif state == OPTSTATES['begin'] then\r\n\t\t\r\n\t\t\tlocal match = false\r\n\t\t\tfor m,o in string.gmatch(a, '%-%-([%w_%-]+)=([%w()%-%+%.,/%s:%*_]*)') do\r\n\t\t\t\tmatch = true\r\n\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\tif not ok then\r\n\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\tend\r\n\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but without argument declared.\"}\r\n\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or opt[2] == OPTARGUMENTS['has']) then\r\n\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif not match then\r\n\t\t\t\tfor m in string.gmatch(a, '%-%-([%w_%-]+)') do\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif not match then\r\n\t\t\t\tfor m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\tfor j, t in base.pairs(opt_table) do\r\n\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t-- -- OPTION+OPTARG\r\n\t\telseif state == OPTSTATES['option+optarg'] then\r\n\t\t\t\r\n\t\t\tlocal pmatch = false\r\n\t\t\tfor ma in string.gmatch(a, '%-(.*)') do\r\n\t\t\t\tpmatch = true\r\n\t\t\t\tfor j, t in base.pairs(opt_table) do\r\n\t\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\t\ttable.insert(opt_res, {t[3], nil})\r\n\t\t\t\t\t\tcur_opt = nil\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tlocal match = false\r\n\t\t\t\tfor m,o in string.gmatch(a, '%-%-([%w_%-]+)=([%w()%-%+%.,/%s:%*_]*)') do\r\n\t\t\t\t\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but witout argument declared.\"}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or ar == OPTARGUMENTS['has']) then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\r\n\t\t\t\tif not match then\r\n\t\t\t\t\tfor m in string.gmatch(a, '%-%-([%w_-]+)') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tif not match then\r\n\t\t\t\t\tfor m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif not pmatch then\r\n\t\t\t\tfor m in string.gmatch(a, '([%w()%-%+%.,/%s:%*_]+)') do\r\n\t\t\t\t\tlocal ar,val\r\n\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\ttable.insert(opt_res, {val, m})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t-- -- OPTION+ARG\r\n\t\telseif state == OPTSTATES['option+arg'] then\r\n\t\t\r\n\t\t\tlocal pmatch = false\r\n\t\t\tfor ma in string.gmatch(a, '%-(.*)') do\r\n\t\t\t\tpmatch = true\r\n\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..cur_opt..\" requires an argument, but no argument found.\" }\r\n\t\t\t\tcur_opt = nil\r\n\t\t\t\t\r\n\t\t\t\tlocal match = false\r\n\t\t\t\tfor m,o in string.gmatch(a, '%-%-([%w_%-]+)=([%w()%-%+%.,/%s:%*_]*)') do\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but without argument declared.\"}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or ar == OPTARGUMENTS['has']) then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tif not match then\r\n\t\t\t\tfor m in string.gmatch(a, '%-%-([%w_%-]+)') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tif not match then\r\n\t\t\t\t\tfor m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif not pmatch then\r\n\t\t\t\tfor m in string.gmatch(a, '([%w()%-%+%.,/%s:%*_]+)') do\r\n\t\t\t\t\tlocal ar,val\r\n\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\ttable.insert(opt_res, {val, m})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t\t\r\n\t\tif state == OPTSTATES['end'] then\r\n\t\t\tcur_opt = nil\r\n\t\t\tstate = OPTSTATES['begin']\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 22,
    "text": "if state == OPTSTATES['begin'] then\r\n\t\t\r\n\t\t\tlocal match = false\r\n\t\t\tfor m,o in string.gmatch(a, '%-%-([%w_%-]+)=([%w()%-%+%.,/%s:%*_]*)') do\r\n\t\t\t\tmatch = true\r\n\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\tif not ok then\r\n\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\tend\r\n\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but without argument declared.\"}\r\n\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or opt[2] == OPTARGUMENTS['has']) then\r\n\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif not match then\r\n\t\t\t\tfor m in string.gmatch(a, '%-%-([%w_%-]+)') do\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif not match then\r\n\t\t\t\tfor m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\tfor j, t in base.pairs(opt_table) do\r\n\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t-- -- OPTION+OPTARG\r\n\t\telseif state == OPTSTATES['option+optarg'] then\r\n\t\t\t\r\n\t\t\tlocal pmatch = false\r\n\t\t\tfor ma in string.gmatch(a, '%-(.*)') do\r\n\t\t\t\tpmatch = true\r\n\t\t\t\tfor j, t in base.pairs(opt_table) do\r\n\t\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\t\ttable.insert(opt_res, {t[3], nil})\r\n\t\t\t\t\t\tcur_opt = nil\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tlocal match = false\r\n\t\t\t\tfor m,o in string.gmatch(a, '%-%-([%w_%-]+)=([%w()%-%+%.,/%s:%*_]*)') do\r\n\t\t\t\t\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but witout argument declared.\"}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or ar == OPTARGUMENTS['has']) then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\r\n\t\t\t\tif not match then\r\n\t\t\t\t\tfor m in string.gmatch(a, '%-%-([%w_-]+)') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tif not match then\r\n\t\t\t\t\tfor m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif not pmatch then\r\n\t\t\t\tfor m in string.gmatch(a, '([%w()%-%+%.,/%s:%*_]+)') do\r\n\t\t\t\t\tlocal ar,val\r\n\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\ttable.insert(opt_res, {val, m})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t-- -- OPTION+ARG\r\n\t\telseif state == OPTSTATES['option+arg'] then\r\n\t\t\r\n\t\t\tlocal pmatch = false\r\n\t\t\tfor ma in string.gmatch(a, '%-(.*)') do\r\n\t\t\t\tpmatch = true\r\n\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..cur_opt..\" requires an argument, but no argument found.\" }\r\n\t\t\t\tcur_opt = nil\r\n\t\t\t\t\r\n\t\t\t\tlocal match = false\r\n\t\t\t\tfor m,o in string.gmatch(a, '%-%-([%w_%-]+)=([%w()%-%+%.,/%s:%*_]*)') do\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but without argument declared.\"}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or ar == OPTARGUMENTS['has']) then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tif not match then\r\n\t\t\t\tfor m in string.gmatch(a, '%-%-([%w_%-]+)') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tif not match then\r\n\t\t\t\t\tfor m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tif not pmatch then\r\n\t\t\t\tfor m in string.gmatch(a, '([%w()%-%+%.,/%s:%*_]+)') do\r\n\t\t\t\t\tlocal ar,val\r\n\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\ttable.insert(opt_res, {val, m})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "local match = false",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "for m,o in string.gmatch(a, '%-%-([%w_%-]+)=([%w()%-%+%.,/%s:%*_]*)') do\r\n\t\t\t\tmatch = true\r\n\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\tif not ok then\r\n\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\tend\r\n\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but without argument declared.\"}\r\n\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or opt[2] == OPTARGUMENTS['has']) then\r\n\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 25,
    "text": "match = true",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "local ok,opt = findOption(m, opt_table)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if not ok then\r\n\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\tend\r\n\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but without argument declared.\"}\r\n\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or opt[2] == OPTARGUMENTS['has']) then\r\n\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "opt_res[err_ind][1] = opt_res[err_ind][1] + 1",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "if opt == 'notfound' then\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "opt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "opt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "state = OPTSTATES['begin']",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "opt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but without argument declared.\"}",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "table.insert(opt_res, {opt[3], o})",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "state = OPTSTATES['end']",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "table.insert(opt_res, {opt[3], nil})",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "cur_opt = m",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "state = OPTSTATES['option+optarg']",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "state = OPTSTATES['option+arg']",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "if not match then\r\n\t\t\t\tfor m in string.gmatch(a, '%-%-([%w_%-]+)') do\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "for m in string.gmatch(a, '%-%-([%w_%-]+)') do\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 42,
    "text": "if not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "if opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "if not match then\r\n\t\t\t\tfor m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\tfor j, t in base.pairs(opt_table) do\r\n\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "for m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\tfor j, t in base.pairs(opt_table) do\r\n\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 46,
    "text": "local op, ar,val",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "for j, t in base.pairs(opt_table) do\r\n\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 48,
    "text": "if '-'..t[3] == m then\r\n\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "op = t[1]",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "ar = t[2]",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "val = t[3]",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "if ar == nil then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "opt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "table.insert(opt_res, {val, nil})",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "cur_opt = op",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "local pmatch = false",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "for ma in string.gmatch(a, '%-(.*)') do\r\n\t\t\t\tpmatch = true\r\n\t\t\t\tfor j, t in base.pairs(opt_table) do\r\n\t\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\t\ttable.insert(opt_res, {t[3], nil})\r\n\t\t\t\t\t\tcur_opt = nil\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tlocal match = false\r\n\t\t\t\tfor m,o in string.gmatch(a, '%-%-([%w_%-]+)=([%w()%-%+%.,/%s:%*_]*)') do\r\n\t\t\t\t\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but witout argument declared.\"}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or ar == OPTARGUMENTS['has']) then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\r\n\t\t\t\tif not match then\r\n\t\t\t\t\tfor m in string.gmatch(a, '%-%-([%w_-]+)') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tif not match then\r\n\t\t\t\t\tfor m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 58,
    "text": "pmatch = true",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "for j, t in base.pairs(opt_table) do\r\n\t\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\t\ttable.insert(opt_res, {t[3], nil})\r\n\t\t\t\t\t\tcur_opt = nil\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 60,
    "text": "if t[1] == cur_opt then\r\n\t\t\t\t\t\ttable.insert(opt_res, {t[3], nil})\r\n\t\t\t\t\t\tcur_opt = nil\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "table.insert(opt_res, {t[3], nil})",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "cur_opt = nil",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "for m,o in string.gmatch(a, '%-%-([%w_%-]+)=([%w()%-%+%.,/%s:%*_]*)') do\r\n\t\t\t\t\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but witout argument declared.\"}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or ar == OPTARGUMENTS['has']) then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 64,
    "text": "if not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but witout argument declared.\"}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or ar == OPTARGUMENTS['has']) then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "opt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but witout argument declared.\"}",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "if not match then\r\n\t\t\t\t\tfor m in string.gmatch(a, '%-%-([%w_-]+)') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "for m in string.gmatch(a, '%-%-([%w_-]+)') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 68,
    "text": "if not ok then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "if opt == 'notfound' then\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "if not match then\r\n\t\t\t\t\tfor m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "for m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 72,
    "text": "for j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 73,
    "text": "if '-'..t[3] == m then\r\n\t\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "if ar == nil then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "if not pmatch then\r\n\t\t\t\tfor m in string.gmatch(a, '([%w()%-%+%.,/%s:%*_]+)') do\r\n\t\t\t\t\tlocal ar,val\r\n\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\ttable.insert(opt_res, {val, m})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "for m in string.gmatch(a, '([%w()%-%+%.,/%s:%*_]+)') do\r\n\t\t\t\t\tlocal ar,val\r\n\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\t\t\r\n\t\t\t\t\ttable.insert(opt_res, {val, m})\r\n\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 77,
    "text": "local ar,val",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "for j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 79,
    "text": "if t[1] == cur_opt then\r\n\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "table.insert(opt_res, {val, m})",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "for ma in string.gmatch(a, '%-(.*)') do\r\n\t\t\t\tpmatch = true\r\n\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..cur_opt..\" requires an argument, but no argument found.\" }\r\n\t\t\t\tcur_opt = nil\r\n\t\t\t\t\r\n\t\t\t\tlocal match = false\r\n\t\t\t\tfor m,o in string.gmatch(a, '%-%-([%w_%-]+)=([%w()%-%+%.,/%s:%*_]*)') do\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but without argument declared.\"}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or ar == OPTARGUMENTS['has']) then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tif not match then\r\n\t\t\t\tfor m in string.gmatch(a, '%-%-([%w_%-]+)') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\t\t\r\n\t\t\t\tif not match then\r\n\t\t\t\t\tfor m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 82,
    "text": "opt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..cur_opt..\" requires an argument, but no argument found.\" }",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "for m,o in string.gmatch(a, '%-%-([%w_%-]+)=([%w()%-%+%.,/%s:%*_]*)') do\r\n\t\t\t\t\tmatch = true\r\n\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but without argument declared.\"}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or ar == OPTARGUMENTS['has']) then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 84,
    "text": "if not ok then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..m..\" has an argument, but without argument declared.\"}\r\n\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\telseif nil ~= o and (opt[2] == OPTARGUMENTS['optional'] or ar == OPTARGUMENTS['has']) then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], o})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil == o and opt[2] == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "if not match then\r\n\t\t\t\tfor m in string.gmatch(a, '%-%-([%w_%-]+)') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "for m in string.gmatch(a, '%-%-([%w_%-]+)') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal ok,opt = findOption(m, opt_table)\r\n\t\t\t\t\t\tif not ok then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 87,
    "text": "if not ok then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\tif opt == 'notfound' then\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown option \"..m}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Too short option '\"..m..\"', double matched\"}\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {opt[3], nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif nil ~= m and opt[2] == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = m\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "if not match then\r\n\t\t\t\t\tfor m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "for m in string.gmatch(a, '%-%a') do\r\n\t\t\t\t\t\tmatch = true\r\n\t\t\t\t\t\tlocal op, ar,val\r\n\t\t\t\t\t\tfor j, t in base.ipairs(opt_table) do\r\n\t\t\t\t\t\t\tif '-'..t[3] == m then\r\n\t\t\t\t\t\t\t\top = t[1]\r\n\t\t\t\t\t\t\t\tar = t[2]\r\n\t\t\t\t\t\t\t\tval = t[3]\r\n\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\t\tif ar == nil then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend\r\n\t\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "if ar == nil then\r\n\t\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Unknown short option \"..m}\r\n\t\t\t\t\t\t\tstate = OPTSTATES['begin']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['none'] then\r\n\t\t\t\t\t\t\ttable.insert(opt_res, {val, nil})\r\n\t\t\t\t\t\t\tstate = OPTSTATES['end']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['optional'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+optarg']\r\n\t\t\t\t\t\telseif ar == OPTARGUMENTS['has'] then\r\n\t\t\t\t\t\t\tcur_opt = op\r\n\t\t\t\t\t\t\tstate = OPTSTATES['option+arg']\r\n\t\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "if state == OPTSTATES['end'] then\r\n\t\t\tcur_opt = nil\r\n\t\t\tstate = OPTSTATES['begin']\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "if state ~= OPTSTATES['end'] then\r\n\t\tif nil ~= cur_opt then\r\n\t\t\tfor j, t in base.pairs(opt_table) do\r\n\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\tif t[2] == OPTARGUMENTS['optional'] then table.insert(opt_res, {t[3], nil})\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..cur_opt..\" requiers an argument, but no argument found.\"}\r\n\t\t\t\t\tend\r\n\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "if nil ~= cur_opt then\r\n\t\t\tfor j, t in base.pairs(opt_table) do\r\n\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\tif t[2] == OPTARGUMENTS['optional'] then table.insert(opt_res, {t[3], nil})\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..cur_opt..\" requiers an argument, but no argument found.\"}\r\n\t\t\t\t\tend\r\n\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "for j, t in base.pairs(opt_table) do\r\n\t\t\t\tif t[1] == cur_opt then\r\n\t\t\t\t\tif t[2] == OPTARGUMENTS['optional'] then table.insert(opt_res, {t[3], nil})\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..cur_opt..\" requiers an argument, but no argument found.\"}\r\n\t\t\t\t\tend\r\n\t\t\t\tbreak\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 95,
    "text": "if t[1] == cur_opt then\r\n\t\t\t\t\tif t[2] == OPTARGUMENTS['optional'] then table.insert(opt_res, {t[3], nil})\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..cur_opt..\" requiers an argument, but no argument found.\"}\r\n\t\t\t\t\tend\r\n\t\t\t\tbreak\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "if t[2] == OPTARGUMENTS['optional'] then table.insert(opt_res, {t[3], nil})\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\topt_res[err_ind][1] = opt_res[err_ind][1] + 1\r\n\t\t\t\t\t\topt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..cur_opt..\" requiers an argument, but no argument found.\"}\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "opt_res[-opt_res[err_ind][1]] = { 0, \"Option \"..cur_opt..\" requiers an argument, but no argument found.\"}",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "",
    "type": "function container"
  }, {
    "id": 100,
    "text": "match",
    "type": "global function"
  }, {
    "id": 101,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 102,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 103,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 104,
    "text": "require",
    "type": "global function"
  }, {
    "id": 105,
    "text": "module",
    "type": "global function"
  }, {
    "id": 106,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 107,
    "text": "",
    "type": "variable container"
  }, {
    "id": 108,
    "text": "",
    "type": "require container"
  }, {
    "id": 109,
    "text": "",
    "type": "local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 113,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 114,
    "text": "",
    "type": "number"
  }, {
    "id": 115,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 116,
    "text": "",
    "type": "number"
  }, {
    "id": 117,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 118,
    "text": "",
    "type": "number"
  }, {
    "id": 119,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 120,
    "text": "",
    "type": "number"
  }, {
    "id": 121,
    "text": "",
    "type": "global variable"
  }, {
    "id": 122,
    "text": "",
    "type": "global variable"
  }, {
    "id": 123,
    "text": "",
    "type": "global variable"
  }, {
    "id": 124,
    "text": "",
    "type": "global variable"
  }, {
    "id": 125,
    "text": "",
    "type": "global variable"
  }, {
    "id": 126,
    "text": "",
    "type": "n/a"
  }, {
    "id": 127,
    "text": "",
    "type": "global variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "global variable"
  }, {
    "id": 130,
    "text": "",
    "type": "n/a"
  }, {
    "id": 131,
    "text": "",
    "type": "global variable"
  }, {
    "id": 132,
    "text": "",
    "type": "n/a"
  }, {
    "id": 133,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 134,
    "text": "(string)",
    "type": "module"
  }, {
    "id": 135,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 136,
    "text": "(table)",
    "type": "module"
  } ]
}