{
  "_filename": "rpc.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lazykit/examples/rpc.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 52,
    "label": "has",
    "to": 58
  }, {
    "from": 52,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "calls",
    "to": 83
  }, {
    "from": 74,
    "label": "calls",
    "to": 83
  }, {
    "from": 74,
    "label": "calls",
    "to": 6
  }, {
    "from": 74,
    "label": "calls",
    "to": 6
  }, {
    "from": 10,
    "label": "calls",
    "to": 6
  }, {
    "from": 74,
    "label": "calls",
    "to": 80
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 77
  }, {
    "from": 6,
    "label": "calls",
    "to": 77
  }, {
    "from": 74,
    "label": "calls",
    "to": 84
  }, {
    "from": 74,
    "label": "calls",
    "to": 81
  }, {
    "from": 74,
    "label": "calls",
    "to": 81
  }, {
    "from": 74,
    "label": "calls",
    "to": 81
  }, {
    "from": 74,
    "label": "calls",
    "to": 81
  }, {
    "from": 74,
    "label": "calls",
    "to": 81
  }, {
    "from": 74,
    "label": "calls",
    "to": 81
  }, {
    "from": 74,
    "label": "calls",
    "to": 81
  }, {
    "from": 74,
    "label": "calls",
    "to": 85
  }, {
    "from": 74,
    "label": "calls",
    "to": 86
  }, {
    "from": 74,
    "label": "calls",
    "to": 86
  }, {
    "from": 74,
    "label": "calls",
    "to": 86
  }, {
    "from": 74,
    "label": "calls",
    "to": 78
  }, {
    "from": 74,
    "label": "calls",
    "to": 78
  }, {
    "from": 74,
    "label": "calls",
    "to": 78
  }, {
    "from": 74,
    "label": "calls",
    "to": 78
  }, {
    "from": 6,
    "label": "calls",
    "to": 76
  }, {
    "from": 10,
    "label": "calls",
    "to": 75
  }, {
    "from": 2,
    "label": "calls",
    "to": 82
  }, {
    "from": 74,
    "label": "calls",
    "to": 87
  }, {
    "from": 74,
    "label": "calls",
    "to": 10
  }, {
    "from": 74,
    "label": "calls",
    "to": 10
  }, {
    "from": 74,
    "label": "calls",
    "to": 10
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 79
  }, {
    "from": 74,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 74
  }, {
    "from": 74,
    "label": "declares",
    "to": 2
  }, {
    "from": 74,
    "label": "declares",
    "to": 6
  }, {
    "from": 74,
    "label": "declares",
    "to": 10
  }, {
    "from": 74,
    "label": "declares",
    "to": 13
  }, {
    "from": 74,
    "label": "declares",
    "to": 17
  }, {
    "from": 74,
    "label": "declares",
    "to": 23
  }, {
    "from": 74,
    "label": "declares",
    "to": 30
  }, {
    "from": 74,
    "label": "declares",
    "to": 33
  }, {
    "from": 74,
    "label": "declares",
    "to": 36
  }, {
    "from": 74,
    "label": "declares",
    "to": 39
  }, {
    "from": 74,
    "label": "declares",
    "to": 42
  }, {
    "from": 74,
    "label": "declares",
    "to": 44
  }, {
    "from": 74,
    "label": "declares",
    "to": 48
  }, {
    "from": 74,
    "label": "declares",
    "to": 52
  }, {
    "from": 74,
    "label": "declares",
    "to": 60
  }, {
    "from": 74,
    "label": "declares",
    "to": 63
  }, {
    "from": 74,
    "label": "declares",
    "to": 65
  }, {
    "from": 74,
    "label": "declares",
    "to": 69
  }, {
    "from": 74,
    "label": "declares",
    "to": 71
  }, {
    "from": 1,
    "label": "contains",
    "to": 89
  }, {
    "from": 1,
    "label": "contains",
    "to": 90
  }, {
    "from": 89,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 89,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 89,
    "label": "initializes",
    "to": 95
  }, {
    "from": 89,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 89,
    "label": "initializes",
    "to": 98
  }, {
    "from": 89,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 89,
    "label": "initializes",
    "to": 101
  }, {
    "from": 89,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 90,
    "label": "initializes",
    "to": 88
  }, {
    "from": 90,
    "label": "initializes",
    "to": 88
  }, {
    "from": 90,
    "label": "initializes",
    "to": 88
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "rpc",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function hasElementContent(t)\r\n  for i,v in xnpairs(t) do\r\n    return true\r\n  end\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "for i,v in xnpairs(t) do\r\n    return true\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function parse_value(tree)\r\n  assert(tree.name==\"value\")\r\n  xmliter.switch_c(tree, valuetable, {no_tags=true})\r\n  return tree.value\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "assert(tree.name==\"value\")",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "xmliter.switch_c(tree, valuetable, {no_tags=true})",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function pv(s)\r\n  local l0 = lazytree.parsestring(s)\r\n  return parse_value(l0)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local l0 = lazytree.parsestring(s)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function (value)\r\n    if not hasElementContent(value) then\r\n      value.value = xstring(value)\r\n      -- We could abort by:\r\n      --   return true\r\n      -- but we know we're only going to be skipping strings...\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 14,
    "text": "if not hasElementContent(value) then\r\n      value.value = xstring(value)\r\n      -- We could abort by:\r\n      --   return true\r\n      -- but we know we're only going to be skipping strings...\r\n    end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "value.value = xstring(value)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function (i4, value)\r\n    local v = tonumber(xstring(i4))\r\n    if v ~= math.floor(v) then\r\n      error(\"i4 value must be an integer, not \"..v)\r\n    end\r\n    value.value=tonumber(v)\r\n  end",
    "type": "function"
  }, {
    "id": 18,
    "text": "local v = tonumber(xstring(i4))",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if v ~= math.floor(v) then\r\n      error(\"i4 value must be an integer, not \"..v)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "error(\"i4 value must be an integer, not \"..v)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "value.value=tonumber(v)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function (boolean, value)\r\n    local v = tonumber(xstring(boolean))\r\n    if v == 1 then\r\n      value.value = true\r\n    elseif v == 0 then\r\n      value.value = false\r\n    else\r\n      error(\"boolean value must be 1 or 0, not \"..v)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 24,
    "text": "local v = tonumber(xstring(boolean))",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if v == 1 then\r\n      value.value = true\r\n    elseif v == 0 then\r\n      value.value = false\r\n    else\r\n      error(\"boolean value must be 1 or 0, not \"..v)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "value.value = true",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "value.value = false",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "error(\"boolean value must be 1 or 0, not \"..v)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function(string, value)\r\n    value.value = xstring(string)\r\n  end",
    "type": "function"
  }, {
    "id": 31,
    "text": "value.value = xstring(string)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function(double, value)\r\n    value.value = tonumber(xstring(double))\r\n  end",
    "type": "function"
  }, {
    "id": 34,
    "text": "value.value = tonumber(xstring(double))",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function (dt, value)\r\n    -- insert type wrapper here\r\n    value.value = xstring(dt)\r\n  end",
    "type": "function"
  }, {
    "id": 37,
    "text": "value.value = xstring(dt)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function (base64, value)\r\n    -- insert type wrapper here\r\n    value.value = xstring(base64)\r\n  end",
    "type": "function"
  }, {
    "id": 40,
    "text": "value.value = xstring(base64)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function (struct, value) struct.structvalue={} end",
    "type": "function"
  }, {
    "id": 43,
    "text": "struct.structvalue={}",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "function(name, member)\r\n        assert(not member.membername)\r\n        member.membername=xstring(name)\r\n      end",
    "type": "function"
  }, {
    "id": 45,
    "text": "assert(not member.membername)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "member.membername=xstring(name)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function(value, member)\r\n        assert(not member.membervalue)\r\n        member.membervalue = parse_value(value)\r\n      end",
    "type": "function"
  }, {
    "id": 49,
    "text": "assert(not member.membervalue)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "member.membervalue = parse_value(value)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function(member, struct)\r\n        local name = member.membername\r\n        local value = member.membervalue\r\n        assert(name) assert(value)\r\n        assert(not struct.structvalue[name])\r\n        struct.structvalue[name] = value\r\n      end",
    "type": "function"
  }, {
    "id": 53,
    "text": "local name = member.membername",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "local value = member.membervalue",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "assert(name)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "assert(value)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "assert(not struct.structvalue[name])",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "struct.structvalue[name] = value",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function (struct, value)\r\n      value.value = struct.structvalue\r\n    end",
    "type": "function"
  }, {
    "id": 61,
    "text": "value.value = struct.structvalue",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function (data, array) data.datavalue={n=0} end",
    "type": "function"
  }, {
    "id": 64,
    "text": "data.datavalue={n=0}",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "function (value, data)\r\n        local v = parse_value(value)      \r\n        table.insert(data.datavalue, v)\r\n      end",
    "type": "function"
  }, {
    "id": 66,
    "text": "local v = parse_value(value)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "table.insert(data.datavalue, v)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function (data, array) array.arrayvalue=data.datavalue end",
    "type": "function"
  }, {
    "id": 70,
    "text": "array.arrayvalue=data.datavalue",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "function (array, value) \r\n      -- value.value = assert(array.arrayvalue, \"no <data> in array\")\r\n      -- sadly, some implementations don't send an empty <data>\r\n      value.value = array.arrayvalue or {n=0}\r\n    end",
    "type": "function"
  }, {
    "id": 72,
    "text": "value.value = array.arrayvalue or {n=0}",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "",
    "type": "function container"
  }, {
    "id": 75,
    "text": "local \r\nfunction parsestring(s)\r\n  local evts = lxpevent.parsestring(s)\r\n  return parseevents(evts)\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "local\r\nfunction switch_c(lz, ftable, opts)\r\n  local consume = (lazytree and lazytree.consume) or nil\r\n  opts = opts or emptyopts\r\n  local parent = opts.parent\r\n  return switch_internal(lz, ftable, parent, xpairs_c, opts, consume)\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 78,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 79,
    "text": "xstring",
    "type": "global function"
  }, {
    "id": 80,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 81,
    "text": "print",
    "type": "global function"
  }, {
    "id": 82,
    "text": "xnpairs",
    "type": "global function"
  }, {
    "id": 83,
    "text": "error",
    "type": "global function"
  }, {
    "id": 84,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 85,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 86,
    "text": "require",
    "type": "global function"
  }, {
    "id": 87,
    "text": "type",
    "type": "global function"
  }, {
    "id": 88,
    "text": "",
    "type": "global variable"
  }, {
    "id": 89,
    "text": "",
    "type": "variable container"
  }, {
    "id": 90,
    "text": "",
    "type": "require container"
  }, {
    "id": 91,
    "text": "",
    "type": "global variable"
  }, {
    "id": 92,
    "text": "",
    "type": "n/a"
  }, {
    "id": 93,
    "text": "",
    "type": "global variable"
  }, {
    "id": 94,
    "text": "",
    "type": "n/a"
  }, {
    "id": 95,
    "text": "",
    "type": "global variable"
  }, {
    "id": 96,
    "text": "",
    "type": "global variable"
  }, {
    "id": 97,
    "text": "",
    "type": "n/a"
  }, {
    "id": 98,
    "text": "",
    "type": "global variable"
  }, {
    "id": 99,
    "text": "",
    "type": "global variable"
  }, {
    "id": 100,
    "text": "",
    "type": "n/a"
  }, {
    "id": 101,
    "text": "",
    "type": "global variable"
  }, {
    "id": 102,
    "text": "",
    "type": "global variable"
  }, {
    "id": 103,
    "text": "",
    "type": "n/a"
  } ]
}