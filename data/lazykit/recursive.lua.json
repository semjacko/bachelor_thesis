{
  "_filename": "recursive.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lazykit/examples/recursive.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "calls",
    "to": 9
  }, {
    "from": 7,
    "label": "calls",
    "to": 9
  }, {
    "from": 7,
    "label": "calls",
    "to": 11
  }, {
    "from": 7,
    "label": "calls",
    "to": 11
  }, {
    "from": 7,
    "label": "calls",
    "to": 11
  }, {
    "from": 7,
    "label": "calls",
    "to": 10
  }, {
    "from": 7,
    "label": "calls",
    "to": 8
  }, {
    "from": 1,
    "label": "contains",
    "to": 7
  }, {
    "from": 7,
    "label": "declares",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 13
  }, {
    "from": 1,
    "label": "contains",
    "to": 14
  }, {
    "from": 13,
    "label": "initializes",
    "to": 15
  }, {
    "from": 13,
    "label": "initializes",
    "to": 16
  }, {
    "from": 16,
    "label": "assigns",
    "to": 17
  }, {
    "from": 13,
    "label": "initializes",
    "to": 18
  }, {
    "from": 18,
    "label": "assigns",
    "to": 19
  }, {
    "from": 13,
    "label": "initializes",
    "to": 20
  }, {
    "from": 20,
    "label": "assigns",
    "to": 21
  }, {
    "from": 14,
    "label": "initializes",
    "to": 12
  }, {
    "from": 14,
    "label": "initializes",
    "to": 12
  }, {
    "from": 14,
    "label": "initializes",
    "to": 12
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "recursive",
    "type": "module"
  }, {
    "id": 2,
    "text": "function (a)\r\n      if a.attr.href then\r\n        print(\"href\", a.attr.href)\r\n      end\r\n      xmliter.switch_c(a, ftable)\r\n    end",
    "type": "function"
  }, {
    "id": 3,
    "text": "if a.attr.href then\r\n        print(\"href\", a.attr.href)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "print(\"href\", a.attr.href)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "xmliter.switch_c(a, ftable)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "",
    "type": "function container"
  }, {
    "id": 8,
    "text": "local\r\nfunction parsefile(f)\r\n  local s\r\n  if type(f) == \"string\" then\r\n    f = assert(io.open(f))\r\n    s = f:read(\"*a\")\r\n    assert(f:close())\r\n  else\r\n    s = f:read(\"*a\")\r\n  end\r\n  return parsestring(s)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local\r\nfunction switch_c(lz, ftable, opts)\r\n  local consume = (lazytree and lazytree.consume) or nil\r\n  opts = opts or emptyopts\r\n  local parent = opts.parent\r\n  return switch_internal(lz, ftable, parent, xpairs_c, opts, consume)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "print",
    "type": "global function"
  }, {
    "id": 11,
    "text": "require",
    "type": "global function"
  }, {
    "id": 12,
    "text": "",
    "type": "global variable"
  }, {
    "id": 13,
    "text": "",
    "type": "variable container"
  }, {
    "id": 14,
    "text": "",
    "type": "require container"
  }, {
    "id": 15,
    "text": "",
    "type": "local variable"
  }, {
    "id": 16,
    "text": "",
    "type": "global variable"
  }, {
    "id": 17,
    "text": "",
    "type": "n/a"
  }, {
    "id": 18,
    "text": "",
    "type": "global variable"
  }, {
    "id": 19,
    "text": "",
    "type": "n/a"
  }, {
    "id": 20,
    "text": "",
    "type": "global variable"
  }, {
    "id": 21,
    "text": "",
    "type": "n/a"
  } ]
}