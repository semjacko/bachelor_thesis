{
  "_filename": "benchmark.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lazykit/ciostring/benchmark.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 18
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 18
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 27,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 27,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 18
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 18
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 37
  }, {
    "from": 40,
    "label": "has",
    "to": 38
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 18
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 18
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 18
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 52,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 64
  }, {
    "from": 59,
    "label": "has",
    "to": 65
  }, {
    "from": 59,
    "label": "has",
    "to": 66
  }, {
    "from": 59,
    "label": "has",
    "to": 67
  }, {
    "from": 59,
    "label": "has",
    "to": 68
  }, {
    "from": 59,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 28
  }, {
    "from": 70,
    "label": "has",
    "to": 29
  }, {
    "from": 70,
    "label": "has",
    "to": 30
  }, {
    "from": 70,
    "label": "has",
    "to": 31
  }, {
    "from": 70,
    "label": "has",
    "to": 32
  }, {
    "from": 70,
    "label": "has",
    "to": 30
  }, {
    "from": 70,
    "label": "has",
    "to": 33
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 36
  }, {
    "from": 72,
    "label": "has",
    "to": 37
  }, {
    "from": 72,
    "label": "has",
    "to": 38
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 41
  }, {
    "from": 74,
    "label": "has",
    "to": 37
  }, {
    "from": 74,
    "label": "has",
    "to": 38
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 77,
    "label": "has",
    "to": 45
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 48
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 20,
    "label": "calls",
    "to": 89
  }, {
    "from": 27,
    "label": "calls",
    "to": 85
  }, {
    "from": 27,
    "label": "calls",
    "to": 85
  }, {
    "from": 27,
    "label": "calls",
    "to": 85
  }, {
    "from": 27,
    "label": "calls",
    "to": 91
  }, {
    "from": 27,
    "label": "calls",
    "to": 91
  }, {
    "from": 81,
    "label": "calls",
    "to": 59
  }, {
    "from": 27,
    "label": "calls",
    "to": 83
  }, {
    "from": 35,
    "label": "calls",
    "to": 83
  }, {
    "from": 40,
    "label": "calls",
    "to": 83
  }, {
    "from": 43,
    "label": "calls",
    "to": 83
  }, {
    "from": 52,
    "label": "calls",
    "to": 47
  }, {
    "from": 52,
    "label": "calls",
    "to": 27
  }, {
    "from": 50,
    "label": "calls",
    "to": 94
  }, {
    "from": 13,
    "label": "calls",
    "to": 86
  }, {
    "from": 13,
    "label": "calls",
    "to": 86
  }, {
    "from": 52,
    "label": "calls",
    "to": 35
  }, {
    "from": 59,
    "label": "calls",
    "to": 52
  }, {
    "from": 59,
    "label": "calls",
    "to": 52
  }, {
    "from": 59,
    "label": "calls",
    "to": 52
  }, {
    "from": 81,
    "label": "calls",
    "to": 95
  }, {
    "from": 81,
    "label": "calls",
    "to": 95
  }, {
    "from": 81,
    "label": "calls",
    "to": 95
  }, {
    "from": 81,
    "label": "calls",
    "to": 95
  }, {
    "from": 20,
    "label": "calls",
    "to": 92
  }, {
    "from": 13,
    "label": "calls",
    "to": 93
  }, {
    "from": 52,
    "label": "calls",
    "to": 87
  }, {
    "from": 52,
    "label": "calls",
    "to": 87
  }, {
    "from": 52,
    "label": "calls",
    "to": 87
  }, {
    "from": 59,
    "label": "calls",
    "to": 87
  }, {
    "from": 59,
    "label": "calls",
    "to": 87
  }, {
    "from": 59,
    "label": "calls",
    "to": 87
  }, {
    "from": 27,
    "label": "calls",
    "to": 88
  }, {
    "from": 52,
    "label": "calls",
    "to": 50
  }, {
    "from": 52,
    "label": "calls",
    "to": 50
  }, {
    "from": 52,
    "label": "calls",
    "to": 50
  }, {
    "from": 52,
    "label": "calls",
    "to": 50
  }, {
    "from": 52,
    "label": "calls",
    "to": 50
  }, {
    "from": 52,
    "label": "calls",
    "to": 13
  }, {
    "from": 52,
    "label": "calls",
    "to": 40
  }, {
    "from": 47,
    "label": "calls",
    "to": 82
  }, {
    "from": 40,
    "label": "calls",
    "to": 84
  }, {
    "from": 27,
    "label": "calls",
    "to": 20
  }, {
    "from": 35,
    "label": "calls",
    "to": 20
  }, {
    "from": 40,
    "label": "calls",
    "to": 20
  }, {
    "from": 43,
    "label": "calls",
    "to": 20
  }, {
    "from": 47,
    "label": "calls",
    "to": 20
  }, {
    "from": 52,
    "label": "calls",
    "to": 43
  }, {
    "from": 20,
    "label": "calls",
    "to": 90
  }, {
    "from": 20,
    "label": "calls",
    "to": 90
  }, {
    "from": 35,
    "label": "calls",
    "to": 84
  }, {
    "from": 1,
    "label": "contains",
    "to": 81
  }, {
    "from": 81,
    "label": "declares",
    "to": 13
  }, {
    "from": 81,
    "label": "declares",
    "to": 20
  }, {
    "from": 81,
    "label": "declares",
    "to": 27
  }, {
    "from": 81,
    "label": "declares",
    "to": 35
  }, {
    "from": 81,
    "label": "declares",
    "to": 40
  }, {
    "from": 81,
    "label": "declares",
    "to": 43
  }, {
    "from": 81,
    "label": "declares",
    "to": 47
  }, {
    "from": 81,
    "label": "declares",
    "to": 50
  }, {
    "from": 81,
    "label": "declares",
    "to": 52
  }, {
    "from": 81,
    "label": "declares",
    "to": 59
  }, {
    "from": 81,
    "label": "declares",
    "to": 70
  }, {
    "from": 81,
    "label": "declares",
    "to": 72
  }, {
    "from": 81,
    "label": "declares",
    "to": 74
  }, {
    "from": 81,
    "label": "declares",
    "to": 76
  }, {
    "from": 81,
    "label": "declares",
    "to": 77
  }, {
    "from": 81,
    "label": "declares",
    "to": 79
  }, {
    "from": 1,
    "label": "contains",
    "to": 96
  }, {
    "from": 1,
    "label": "contains",
    "to": 97
  }, {
    "from": 97,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 4
  }, {
    "from": 97,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 2
  }, {
    "from": 97,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 5
  }, {
    "from": 97,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 3
  }, {
    "from": 99,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 11
  }, {
    "from": 100,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 6
  }, {
    "from": 100,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 9
  }, {
    "from": 100,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 11
  }, {
    "from": 101,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 6
  }, {
    "from": 101,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 9
  }, {
    "from": 101,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 11
  }, {
    "from": 102,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 6
  }, {
    "from": 102,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 10
  }, {
    "from": 103,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 6
  }, {
    "from": 103,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 11
  }, {
    "from": 103,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 12
  }, {
    "from": 104,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 6
  }, {
    "from": 104,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 9
  }, {
    "from": 104,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 11
  }, {
    "from": 104,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 2
  }, {
    "from": 105,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 6
  }, {
    "from": 105,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 11
  }, {
    "from": 105,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 12
  }, {
    "from": 106,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 11
  }, {
    "from": 107,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 8
  }, {
    "from": 108,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 7
  }, {
    "from": 109,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 7
  }, {
    "from": 110,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 2
  }, {
    "from": 110,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 4
  }, {
    "from": 110,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 111
  }, {
    "from": 112,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 11
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "benchmark",
    "type": "module"
  }, {
    "id": 2,
    "text": "ciostring",
    "type": "module"
  }, {
    "id": 3,
    "text": "concatxmlgen",
    "type": "module"
  }, {
    "id": 4,
    "text": "iostring",
    "type": "module"
  }, {
    "id": 5,
    "text": "ioxmlgen",
    "type": "module"
  }, {
    "id": 6,
    "text": "lazytree",
    "type": "module"
  }, {
    "id": 7,
    "text": "lxp",
    "type": "module"
  }, {
    "id": 8,
    "text": "lxpevent",
    "type": "module"
  }, {
    "id": 9,
    "text": "lxptree",
    "type": "module"
  }, {
    "id": 10,
    "text": "xmlgen",
    "type": "module"
  }, {
    "id": 11,
    "text": "xmliter",
    "type": "module"
  }, {
    "id": 12,
    "text": "xmlview",
    "type": "module"
  }, {
    "id": 13,
    "text": "function squares_table(n)\r\n  local sq = {name=\"squares\"}\r\n  for i=1,n do\r\n    local entry = {name=\"entry\", \r\n      {name=\"x\", tostring(i)}, {name=\"y\", tostring(i*i)}}\r\n    table.insert(sq, entry)\r\n  end\r\n  return sq\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local sq = {name=\"squares\"}",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "for i=1,n do\r\n    local entry = {name=\"entry\", \r\n      {name=\"x\", tostring(i)}, {name=\"y\", tostring(i*i)}}\r\n    table.insert(sq, entry)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 16,
    "text": "local entry = {name=\"entry\", \r\n      {name=\"x\", tostring(i)}, {name=\"y\", tostring(i*i)}}",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "table.insert(sq, entry)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function cpu(f)\r\n  local count = cpucount or 1\r\n  collectgarbage()\r\n  local start = os.clock()\r\n  for i=1,count do\r\n    f()\r\n  end\r\n  return os.clock()-start\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local count = cpucount or 1",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "collectgarbage()",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "local start = os.clock()",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "for i=1,count do\r\n    f()\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 25,
    "text": "f()",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function time_file(sq)\r\n  return cpu(function ()\r\n               local file = assert(io.open(\"test.xml\", \"w\"))\r\n               ioxmlgen.write_xml(file, sq)\r\n               file:close()\r\n               file = assert(io.open(\"test.xml\"))\r\n               local s = file:read(\"*a\")\r\n               file:close()\r\n               assert(os.remove(\"test.xml\"))\r\n             end)\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local file = assert(io.open(\"test.xml\", \"w\"))",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "ioxmlgen.write_xml(file, sq)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "file = assert(io.open(\"test.xml\"))",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "local s = file:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "assert(os.remove(\"test.xml\"))",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function time_iostring(sq)\r\n  return cpu(function ()\r\n      local st = iostring.newoutput()\r\n      ioxmlgen.write_xml(st, sq)\r\n      st:getstring()\r\n    end)\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "local st = iostring.newoutput()",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "ioxmlgen.write_xml(st, sq)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "st:getstring()",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function time_ciostring(sq)\r\n  return cpu(function ()\r\n      local st = ciostring.newoutput()\r\n      ioxmlgen.write_xml(st, sq)\r\n      st:getstring()\r\n    end)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local st = ciostring.newoutput()",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function time_nullio(sq)\r\n  local nullio = {write=function(...) end}\r\n  return cpu(function ()\r\n      ioxmlgen.write_xml(nullio, sq)\r\n    end)\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "local nullio = {write=function(...) end}",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "ioxmlgen.write_xml(nullio, sq)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function time_concat(sq)\r\n  return cpu(function ()\r\n      concatxmlgen.return_xml(sq)\r\n    end)\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "concatxmlgen.return_xml(sq)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function rs(n)\r\n  return string.format(\"%0.3g\", n)\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function run_one_bench(sqsizes)\r\n  print(\"squares\", \"iostr\", \"concat\", \"file\", \"nullio\", \"ciostr\")\r\n  for _,i in sqsizes do\r\n    local sq = squares_table(i)\r\n    print(i, rs(time_iostring(sq)), rs(time_concat(sq)), rs(time_file(sq)),\r\n        rs(time_nullio(sq)), rs(time_ciostring(sq)))\r\n  end\r\n  print()\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "print(\"squares\", \"iostr\", \"concat\", \"file\", \"nullio\", \"ciostr\")",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "for _,i in sqsizes do\r\n    local sq = squares_table(i)\r\n    print(i, rs(time_iostring(sq)), rs(time_concat(sq)), rs(time_file(sq)),\r\n        rs(time_nullio(sq)), rs(time_ciostring(sq)))\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 55,
    "text": "local sq = squares_table(i)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "print(i, rs(time_iostring(sq)), rs(time_concat(sq)), rs(time_file(sq)),\r\n        rs(time_nullio(sq)), rs(time_ciostring(sq)))",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function runbenches()\r\n  cpucount = 1\r\n  print(\"1 run\")\r\n  run_one_bench({1,10,100,1000,10000})\r\n\r\n  cpucount = 100\r\n  print(\"100 runs\")\r\n  run_one_bench({1,10,100,1000})\r\n\r\n  cpucount = 10000\r\n  print(\"10000 runs\")\r\n  run_one_bench({1,10})\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "cpucount = 1",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "print(\"1 run\")",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "run_one_bench({1,10,100,1000,10000})",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "cpucount = 100",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "print(\"100 runs\")",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "run_one_bench({1,10,100,1000})",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "cpucount = 10000",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "print(\"10000 runs\")",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "run_one_bench({1,10})",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function ()\r\n               local file = assert(io.open(\"test.xml\", \"w\"))\r\n               ioxmlgen.write_xml(file, sq)\r\n               file:close()\r\n               file = assert(io.open(\"test.xml\"))\r\n               local s = file:read(\"*a\")\r\n               file:close()\r\n               assert(os.remove(\"test.xml\"))\r\n             end",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function ()\r\n      local st = iostring.newoutput()\r\n      ioxmlgen.write_xml(st, sq)\r\n      st:getstring()\r\n    end",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function ()\r\n      local st = ciostring.newoutput()\r\n      ioxmlgen.write_xml(st, sq)\r\n      st:getstring()\r\n    end",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function(...) end",
    "type": "function"
  }, {
    "id": 77,
    "text": "function ()\r\n      ioxmlgen.write_xml(nullio, sq)\r\n    end",
    "type": "function"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function ()\r\n      concatxmlgen.return_xml(sq)\r\n    end",
    "type": "function"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "",
    "type": "function container"
  }, {
    "id": 82,
    "text": "function return_xml(t, opts)\r\n  opts = opts or {}\r\n  if type(t) == \"string\" then\r\n    return xml_quote(t)\r\n  elseif type(t) == \"table\" then\r\n    local s = \"<\"..t.name\r\n    if t.attr then s=s..return_xml_attributes(t) end\r\n    if not t[1] and not opts.no_empty then\r\n      s = s..\"/>\"\r\n    else\r\n      s = s..\">\"\r\n      for i,v in xpairs(t) do\r\n        s = s..return_xml(v)\r\n      end\r\n      s = s..\"</\"..t.name..\">\"\r\n    end\r\n    return s\r\n  else\r\n    error(\"unknown xml content\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "function write_xml(file, t, opts)\r\n  opts = opts or {}\r\n  if type(t) == \"string\" then\r\n    file:write(xml_quote_pcdata(t))\r\n  elseif type(t) == \"table\" then\r\n    file:write(\"<\"..t.name)\r\n    if t.attr then\r\n      write_xml_attributes(file, t)\r\n    end\r\n    if not t[1] and not opts.no_empty then\r\n      file:write(\"/>\")\r\n    else\r\n      file:write(\">\")\r\n      for i,v in xpairs(t) do\r\n        write_xml(file, v, opts)\r\n      end\r\n      file:write(\"</\"..t.name..\">\")\r\n    end\r\n  else\r\n    error(\"unknown xml content\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "newoutput",
    "type": "global function"
  }, {
    "id": 85,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 86,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 87,
    "text": "print",
    "type": "global function"
  }, {
    "id": 88,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 89,
    "text": "f",
    "type": "global function"
  }, {
    "id": 90,
    "text": "clock",
    "type": "global function"
  }, {
    "id": 91,
    "text": "open",
    "type": "global function"
  }, {
    "id": 92,
    "text": "collectgarbage",
    "type": "global function"
  }, {
    "id": 93,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 94,
    "text": "format",
    "type": "global function"
  }, {
    "id": 95,
    "text": "require",
    "type": "global function"
  }, {
    "id": 96,
    "text": "",
    "type": "variable container"
  }, {
    "id": 97,
    "text": "",
    "type": "require container"
  }, {
    "id": 98,
    "text": "",
    "type": "global variable"
  }, {
    "id": 99,
    "text": "",
    "type": "require container"
  }, {
    "id": 100,
    "text": "",
    "type": "require container"
  }, {
    "id": 101,
    "text": "",
    "type": "require container"
  }, {
    "id": 102,
    "text": "",
    "type": "require container"
  }, {
    "id": 103,
    "text": "",
    "type": "require container"
  }, {
    "id": 104,
    "text": "",
    "type": "require container"
  }, {
    "id": 105,
    "text": "",
    "type": "require container"
  }, {
    "id": 106,
    "text": "",
    "type": "require container"
  }, {
    "id": 107,
    "text": "",
    "type": "require container"
  }, {
    "id": 108,
    "text": "",
    "type": "require container"
  }, {
    "id": 109,
    "text": "",
    "type": "require container"
  }, {
    "id": 110,
    "text": "",
    "type": "require container"
  }, {
    "id": 111,
    "text": "lua",
    "type": "module"
  }, {
    "id": 112,
    "text": "",
    "type": "require container"
  } ]
}