{
  "_filename": "xhtml2wiki.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lazykit/examples/xhtml2wiki.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 20
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "calls",
    "to": 40
  }, {
    "from": 33,
    "label": "calls",
    "to": 40
  }, {
    "from": 33,
    "label": "calls",
    "to": 40
  }, {
    "from": 33,
    "label": "calls",
    "to": 35
  }, {
    "from": 33,
    "label": "calls",
    "to": 36
  }, {
    "from": 33,
    "label": "calls",
    "to": 34
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 37
  }, {
    "from": 33,
    "label": "calls",
    "to": 2
  }, {
    "from": 33,
    "label": "calls",
    "to": 2
  }, {
    "from": 33,
    "label": "calls",
    "to": 2
  }, {
    "from": 33,
    "label": "calls",
    "to": 39
  }, {
    "from": 33,
    "label": "calls",
    "to": 39
  }, {
    "from": 33,
    "label": "calls",
    "to": 39
  }, {
    "from": 33,
    "label": "calls",
    "to": 39
  }, {
    "from": 33,
    "label": "calls",
    "to": 38
  }, {
    "from": 33,
    "label": "calls",
    "to": 38
  }, {
    "from": 33,
    "label": "calls",
    "to": 38
  }, {
    "from": 33,
    "label": "calls",
    "to": 38
  }, {
    "from": 33,
    "label": "calls",
    "to": 38
  }, {
    "from": 33,
    "label": "calls",
    "to": 38
  }, {
    "from": 33,
    "label": "calls",
    "to": 38
  }, {
    "from": 1,
    "label": "contains",
    "to": 33
  }, {
    "from": 33,
    "label": "declares",
    "to": 2
  }, {
    "from": 33,
    "label": "declares",
    "to": 5
  }, {
    "from": 33,
    "label": "declares",
    "to": 6
  }, {
    "from": 33,
    "label": "declares",
    "to": 9
  }, {
    "from": 33,
    "label": "declares",
    "to": 12
  }, {
    "from": 33,
    "label": "declares",
    "to": 15
  }, {
    "from": 33,
    "label": "declares",
    "to": 18
  }, {
    "from": 33,
    "label": "declares",
    "to": 23
  }, {
    "from": 33,
    "label": "declares",
    "to": 28
  }, {
    "from": 33,
    "label": "declares",
    "to": 31
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 42,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "assigns",
    "to": 45
  }, {
    "from": 42,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "assigns",
    "to": 47
  }, {
    "from": 42,
    "label": "initializes",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 49,
    "label": "assigns",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 43,
    "label": "initializes",
    "to": 41
  }, {
    "from": 43,
    "label": "initializes",
    "to": 41
  }, {
    "from": 43,
    "label": "initializes",
    "to": 41
  }, {
    "from": 3,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 7,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 10,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 13,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 16,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 26,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 51
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "xhtml2wiki",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function printi(s)\r\n   -- no newline\r\n   io.stdout:write(s)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "io.stdout:write(s)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function () end",
    "type": "function"
  }, {
    "id": 6,
    "text": "function (h1)\r\n            print(\"=== \"..xstring(h1)..\" ===\")\r\n         end",
    "type": "function"
  }, {
    "id": 7,
    "text": "print(\"=== \"..xstring(h1)..\" ===\")",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function (h2)\r\n            print(\"=== \"..xstring(h2)..\" ===\")\r\n         end",
    "type": "function"
  }, {
    "id": 10,
    "text": "print(\"=== \"..xstring(h2)..\" ===\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function (h3)\r\n            print(\"== \"..xstring(h3)..\" ==\")\r\n         end",
    "type": "function"
  }, {
    "id": 13,
    "text": "print(\"== \"..xstring(h3)..\" ==\")",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function (pre)\r\n             print(\"        {{{\"..xstring(pre)..\" }}}\")\r\n          end",
    "type": "function"
  }, {
    "id": 16,
    "text": "print(\"        {{{\"..xstring(pre)..\" }}}\")",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function (s)\r\n                 s = string.gsub(s, \"\\n[ ]+\", \"\\n\")\r\n                 s = string.gsub(s, \"[ ]+\", \" \")\r\n                 printi(s)\r\n              end",
    "type": "function"
  }, {
    "id": 19,
    "text": "s = string.gsub(s, \"\\n[ ]+\", \"\\n\")",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "s = string.gsub(s, \"[ ]+\", \" \")",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "printi(s)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function (code)\r\n                 local s = xstring(code)\r\n                 s = string.gsub(s, \"\\n\", \" \")\r\n                 s = string.gsub(s, \"[ ]+\", \" \")                 \r\n                 printi(\"{{\"..s..\"}}\")\r\n              end",
    "type": "function"
  }, {
    "id": 24,
    "text": "local s = xstring(code)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "s = string.gsub(s, \"\\n\", \" \")",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "printi(\"{{\"..s..\"}}\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function (dfn)\r\n                 printi(\"''\"..xstring(dfn)..\"''\")\r\n              end",
    "type": "function"
  }, {
    "id": 29,
    "text": "printi(\"''\"..xstring(dfn)..\"''\")",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function () print() print() end",
    "type": "function"
  }, {
    "id": 32,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "function container"
  }, {
    "id": 34,
    "text": "local\r\nfunction parsefile(f)\r\n  local s\r\n  if type(f) == \"string\" then\r\n    f = assert(io.open(f))\r\n    s = f:read(\"*a\")\r\n    assert(f:close())\r\n  else\r\n    s = f:read(\"*a\")\r\n  end\r\n  return parsestring(s)\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "local\r\nfunction switch_c(lz, ftable, opts)\r\n  local consume = (lazytree and lazytree.consume) or nil\r\n  opts = opts or emptyopts\r\n  local parent = opts.parent\r\n  return switch_internal(lz, ftable, parent, xpairs_c, opts, consume)\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 37,
    "text": "xstring",
    "type": "global function"
  }, {
    "id": 38,
    "text": "print",
    "type": "global function"
  }, {
    "id": 39,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 40,
    "text": "require",
    "type": "global function"
  }, {
    "id": 41,
    "text": "",
    "type": "global variable"
  }, {
    "id": 42,
    "text": "",
    "type": "variable container"
  }, {
    "id": 43,
    "text": "",
    "type": "require container"
  }, {
    "id": 44,
    "text": "",
    "type": "local variable"
  }, {
    "id": 45,
    "text": "",
    "type": "n/a"
  }, {
    "id": 46,
    "text": "",
    "type": "local variable"
  }, {
    "id": 47,
    "text": "",
    "type": "n/a"
  }, {
    "id": 48,
    "text": "",
    "type": "local variable"
  }, {
    "id": 49,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 50,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 51,
    "text": "",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 53,
    "text": "",
    "type": "tableconstructor"
  } ]
}