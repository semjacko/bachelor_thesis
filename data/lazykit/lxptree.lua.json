{
  "_filename": "lxptree.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lazykit/lxptree.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "calls",
    "to": 61
  }, {
    "from": 2,
    "label": "calls",
    "to": 61
  }, {
    "from": 3,
    "label": "calls",
    "to": 61
  }, {
    "from": 5,
    "label": "calls",
    "to": 61
  }, {
    "from": 6,
    "label": "calls",
    "to": 61
  }, {
    "from": 7,
    "label": "calls",
    "to": 61
  }, {
    "from": 8,
    "label": "calls",
    "to": 61
  }, {
    "from": 9,
    "label": "calls",
    "to": 61
  }, {
    "from": 11,
    "label": "calls",
    "to": 61
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 21,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 21,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 21,
    "label": "has",
    "to": 36
  }, {
    "from": 21,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 37,
    "label": "has",
    "to": 43
  }, {
    "from": 37,
    "label": "has",
    "to": 15
  }, {
    "from": 21,
    "label": "has",
    "to": 15
  }, {
    "from": 21,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 26
  }, {
    "from": 45,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 45,
    "label": "has",
    "to": 30
  }, {
    "from": 45,
    "label": "has",
    "to": 31
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 33
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 35
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 38
  }, {
    "from": 51,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 51,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 51,
    "label": "has",
    "to": 43
  }, {
    "from": 51,
    "label": "has",
    "to": 15
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 15
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 15
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 59
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 15
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 21,
    "label": "calls",
    "to": 72
  }, {
    "from": 21,
    "label": "calls",
    "to": 14
  }, {
    "from": 21,
    "label": "calls",
    "to": 14
  }, {
    "from": 53,
    "label": "calls",
    "to": 21
  }, {
    "from": 56,
    "label": "calls",
    "to": 70
  }, {
    "from": 61,
    "label": "calls",
    "to": 70
  }, {
    "from": 21,
    "label": "calls",
    "to": 75
  }, {
    "from": 21,
    "label": "calls",
    "to": 75
  }, {
    "from": 21,
    "label": "calls",
    "to": 75
  }, {
    "from": 21,
    "label": "calls",
    "to": 71
  }, {
    "from": 21,
    "label": "calls",
    "to": 17
  }, {
    "from": 14,
    "label": "calls",
    "to": 73
  }, {
    "from": 17,
    "label": "calls",
    "to": 73
  }, {
    "from": 21,
    "label": "calls",
    "to": 68
  }, {
    "from": 61,
    "label": "calls",
    "to": 76
  }, {
    "from": 67,
    "label": "calls",
    "to": 74
  }, {
    "from": 61,
    "label": "calls",
    "to": 53
  }, {
    "from": 56,
    "label": "calls",
    "to": 69
  }, {
    "from": 56,
    "label": "calls",
    "to": 69
  }, {
    "from": 61,
    "label": "calls",
    "to": 69
  }, {
    "from": 61,
    "label": "calls",
    "to": 69
  }, {
    "from": 1,
    "label": "contains",
    "to": 67
  }, {
    "from": 67,
    "label": "declares",
    "to": 14
  }, {
    "from": 67,
    "label": "declares",
    "to": 17
  }, {
    "from": 67,
    "label": "declares",
    "to": 21
  }, {
    "from": 67,
    "label": "declares",
    "to": 45
  }, {
    "from": 67,
    "label": "declares",
    "to": 47
  }, {
    "from": 67,
    "label": "declares",
    "to": 49
  }, {
    "from": 67,
    "label": "declares",
    "to": 51
  }, {
    "from": 67,
    "label": "declares",
    "to": 53
  }, {
    "from": 67,
    "label": "declares",
    "to": 56
  }, {
    "from": 67,
    "label": "declares",
    "to": 61
  }, {
    "from": 77,
    "label": "requires",
    "to": 1
  }, {
    "from": 77,
    "label": "requires",
    "to": 1
  }, {
    "from": 77,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 79
  }, {
    "from": 1,
    "label": "contains",
    "to": 80
  }, {
    "from": 79,
    "label": "initializes",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 79,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 79,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "assigns",
    "to": 86
  }, {
    "from": 79,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 79,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "assigns",
    "to": 90
  }, {
    "from": 79,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 80,
    "label": "initializes",
    "to": 77
  }, {
    "from": 1,
    "label": "provides",
    "to": 93
  }, {
    "from": 78,
    "label": "represents",
    "to": 94
  }, {
    "from": 93,
    "label": "provides",
    "to": 94
  }, {
    "from": 81,
    "label": "contains",
    "to": 10
  }, {
    "from": 81,
    "label": "contains",
    "to": 12
  }, {
    "from": 81,
    "label": "contains",
    "to": 13
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lxptree",
    "type": "module"
  }, {
    "id": 2,
    "text": "function doit_lazy()\r\n  l0 = lazytree.parsefile(testfile)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function doit_lazy2()\r\n  l0 = lazytree.parsefile(testfile)\r\n  lazytree.load(l0)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function doit_lxp()\r\n  l0 = lxptree.parsefile(testfile)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "",
    "type": "function container"
  }, {
    "id": 6,
    "text": "function doit_lazy()\r\n  l0 = lazytree.parsefile(\"traces.xml\")\r\n  -- print(l0.n)\r\n  -- l0 = lxptree.parsefile(\"traces.xml\")\r\n  -- collectgarbage(0)\r\n  process_net(l0)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function doit_lazy2()\r\n  l0 = lazytree.parsefile(\"traces.xml\")\r\n  lazytree.load(l0)\r\n  process_net(l0)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function doit_lxp()\r\n  l0 = lxptree.parsefile(\"traces.xml\")\r\n  process_net(l0)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "",
    "type": "function container"
  }, {
    "id": 10,
    "text": "function Public.newoutput()\r\n  local t = {n=0, closed=false}\r\n  setmetatable(t, metatable)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local \r\nfunction parsefile(f)\r\n  local evts = lxpevent.parsefile(f)\r\n  return parseevents(evts)\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "function Public.parsefile(f)\r\n  local base = parsebase()\r\n  if type(f) == \"string\" then\r\n    f = assert(io.open(f))\r\n    function base:on_eof() f:close() end\r\n  end\r\n  base.file = f\r\n  base.getmore = file_getmore\r\n  return base\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "function Public.parsestring(s)\r\n  local base = parsebase()\r\n  base.string = s\r\n  base.getmore = string_getmore\r\n  base.string_offset = 1\r\n  return base\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "local function top(l)\r\n   return l[table.getn(l)]\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local \r\nfunction nukenumeric(t)\r\n   for i=1,table.getn(t) do\r\n      t[i] = nil\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "for i=1,table.getn(t) do\r\n      t[i] = nil\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 19,
    "text": "t[i] = nil",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local\r\nfunction makeParser()\r\n   local stack = {{}, n=1}\r\n   local self = {}\r\n   local callbacks = {}\r\n\r\n   function callbacks.StartElement(parser, elementName, attributes)\r\n      local t = {name=elementName}\r\n      if attributes and attributes[1] then \r\n         nukenumeric(attributes)\r\n         t.attr=attributes \r\n      end\r\n      tinsert(top(stack), t)\r\n      tinsert(stack, t)\r\n   end\r\n   \r\n   function callbacks.EndElement(parser, elementName)\r\n      tremove(stack, t)\r\n   end\r\n\r\n   function callbacks.CharacterData(parser, string)\r\n      tinsert(top(stack), string)\r\n   end\r\n\r\n   local parser = lxp.new(callbacks)\r\n   function self:parse(s)\r\n      local result, msg, line, col, pos = parser:parse(s)\r\n      if result then\r\n         result, msg, line, col, pos = parser:parse()\r\n      end\r\n      if not result then\r\n         error(\"expat parse error \"..msg..\" at line \"..line..\" column \"..col)\r\n      end\r\n      parser:close()\r\n      return stack[1][1]\r\n   end\r\n   \r\n   return self\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local stack = {{}, n=1}",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local self = {}",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local callbacks = {}",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "function callbacks.StartElement(parser, elementName, attributes)\r\n      local t = {name=elementName}\r\n      if attributes and attributes[1] then \r\n         nukenumeric(attributes)\r\n         t.attr=attributes \r\n      end\r\n      tinsert(top(stack), t)\r\n      tinsert(stack, t)\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 26,
    "text": "local t = {name=elementName}",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if attributes and attributes[1] then \r\n         nukenumeric(attributes)\r\n         t.attr=attributes \r\n      end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "nukenumeric(attributes)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "t.attr=attributes",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "tinsert(top(stack), t)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "tinsert(stack, t)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "function callbacks.EndElement(parser, elementName)\r\n      tremove(stack, t)\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 33,
    "text": "tremove(stack, t)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "function callbacks.CharacterData(parser, string)\r\n      tinsert(top(stack), string)\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 35,
    "text": "tinsert(top(stack), string)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "local parser = lxp.new(callbacks)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "function self:parse(s)\r\n      local result, msg, line, col, pos = parser:parse(s)\r\n      if result then\r\n         result, msg, line, col, pos = parser:parse()\r\n      end\r\n      if not result then\r\n         error(\"expat parse error \"..msg..\" at line \"..line..\" column \"..col)\r\n      end\r\n      parser:close()\r\n      return stack[1][1]\r\n   end",
    "type": "statement:globalfunction"
  }, {
    "id": 38,
    "text": "local result, msg, line, col, pos = parser:parse(s)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if result then\r\n         result, msg, line, col, pos = parser:parse()\r\n      end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "result, msg, line, col, pos = parser:parse()",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "if not result then\r\n         error(\"expat parse error \"..msg..\" at line \"..line..\" column \"..col)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "error(\"expat parse error \"..msg..\" at line \"..line..\" column \"..col)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "parser:close()",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function callbacks.StartElement(parser, elementName, attributes)\r\n      local t = {name=elementName}\r\n      if attributes and attributes[1] then \r\n         nukenumeric(attributes)\r\n         t.attr=attributes \r\n      end\r\n      tinsert(top(stack), t)\r\n      tinsert(stack, t)\r\n   end",
    "type": "function"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function callbacks.EndElement(parser, elementName)\r\n      tremove(stack, t)\r\n   end",
    "type": "function"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function callbacks.CharacterData(parser, string)\r\n      tinsert(top(stack), string)\r\n   end",
    "type": "function"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function self:parse(s)\r\n      local result, msg, line, col, pos = parser:parse(s)\r\n      if result then\r\n         result, msg, line, col, pos = parser:parse()\r\n      end\r\n      if not result then\r\n         error(\"expat parse error \"..msg..\" at line \"..line..\" column \"..col)\r\n      end\r\n      parser:close()\r\n      return stack[1][1]\r\n   end",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "local\r\nfunction parsestring(s)\r\n   local p = makeParser()\r\n   return p:parse(s)\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local p = makeParser()",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "local \r\nfunction wholeFile(filename)\r\n   local f = assert(io.open(filename))\r\n   local s = f:read(\"*a\")\r\n   assert(f:close())\r\n   return s\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "local f = assert(io.open(filename))",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local s = f:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "assert(f:close())",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "local\r\nfunction parsefile(f)\r\n  local s\r\n  if type(f) == \"string\" then\r\n    f = assert(io.open(f))\r\n    s = f:read(\"*a\")\r\n    assert(f:close())\r\n  else\r\n    s = f:read(\"*a\")\r\n  end\r\n  return parsestring(s)\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local s",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if type(f) == \"string\" then\r\n    f = assert(io.open(f))\r\n    s = f:read(\"*a\")\r\n    assert(f:close())\r\n  else\r\n    s = f:read(\"*a\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "f = assert(io.open(f))",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "s = f:read(\"*a\")",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "",
    "type": "function container"
  }, {
    "id": 68,
    "text": "new",
    "type": "global function"
  }, {
    "id": 69,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 70,
    "text": "open",
    "type": "global function"
  }, {
    "id": 71,
    "text": "error",
    "type": "global function"
  }, {
    "id": 72,
    "text": "tremove",
    "type": "global function"
  }, {
    "id": 73,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 74,
    "text": "require",
    "type": "global function"
  }, {
    "id": 75,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 76,
    "text": "type",
    "type": "global function"
  }, {
    "id": 77,
    "text": "",
    "type": "global variable"
  }, {
    "id": 78,
    "text": "",
    "type": "local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "variable container"
  }, {
    "id": 80,
    "text": "",
    "type": "require container"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "n/a"
  }, {
    "id": 87,
    "text": "",
    "type": "global variable"
  }, {
    "id": 88,
    "text": "",
    "type": "n/a"
  }, {
    "id": 89,
    "text": "",
    "type": "global variable"
  }, {
    "id": 90,
    "text": "",
    "type": "n/a"
  }, {
    "id": 91,
    "text": "",
    "type": "global variable"
  }, {
    "id": 92,
    "text": "",
    "type": "n/a"
  }, {
    "id": 93,
    "text": "",
    "type": "interface container"
  }, {
    "id": 94,
    "text": "",
    "type": "interface"
  } ]
}