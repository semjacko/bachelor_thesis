{
  "_filename": "pyrxp.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lazykit/examples/pyrxp.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 4,
    "label": "has",
    "to": 8
  }, {
    "from": 4,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 11,
    "label": "has",
    "to": 20
  }, {
    "from": 11,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 23
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "calls",
    "to": 39
  }, {
    "from": 11,
    "label": "calls",
    "to": 36
  }, {
    "from": 31,
    "label": "calls",
    "to": 2
  }, {
    "from": 31,
    "label": "calls",
    "to": 2
  }, {
    "from": 31,
    "label": "calls",
    "to": 40
  }, {
    "from": 31,
    "label": "calls",
    "to": 40
  }, {
    "from": 31,
    "label": "calls",
    "to": 40
  }, {
    "from": 31,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 31,
    "label": "calls",
    "to": 37
  }, {
    "from": 31,
    "label": "calls",
    "to": 37
  }, {
    "from": 31,
    "label": "calls",
    "to": 37
  }, {
    "from": 31,
    "label": "calls",
    "to": 37
  }, {
    "from": 31,
    "label": "calls",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 11,
    "label": "calls",
    "to": 42
  }, {
    "from": 25,
    "label": "calls",
    "to": 32
  }, {
    "from": 28,
    "label": "calls",
    "to": 33
  }, {
    "from": 2,
    "label": "calls",
    "to": 38
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 11,
    "label": "calls",
    "to": 11
  }, {
    "from": 31,
    "label": "calls",
    "to": 11
  }, {
    "from": 31,
    "label": "calls",
    "to": 43
  }, {
    "from": 31,
    "label": "calls",
    "to": 43
  }, {
    "from": 31,
    "label": "calls",
    "to": 43
  }, {
    "from": 22,
    "label": "calls",
    "to": 33
  }, {
    "from": 25,
    "label": "calls",
    "to": 33
  }, {
    "from": 31,
    "label": "calls",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 31
  }, {
    "from": 31,
    "label": "declares",
    "to": 2
  }, {
    "from": 31,
    "label": "declares",
    "to": 11
  }, {
    "from": 31,
    "label": "declares",
    "to": 22
  }, {
    "from": 31,
    "label": "declares",
    "to": 25
  }, {
    "from": 31,
    "label": "declares",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 45
  }, {
    "from": 1,
    "label": "contains",
    "to": 46
  }, {
    "from": 45,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 45,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 45,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 45,
    "label": "initializes",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 45,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 45,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 45,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 46,
    "label": "initializes",
    "to": 44
  }, {
    "from": 46,
    "label": "initializes",
    "to": 44
  }, {
    "from": 46,
    "label": "initializes",
    "to": 44
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "pyrxp",
    "type": "module"
  }, {
    "id": 2,
    "text": "function printmeminfo()\r\n  local statf = io.open(\"/proc/self/status\")\r\n  if statf then\r\n    for line in statf:lines() do\r\n      if string.find(line, \"VmSize\") or string.find(line, \"VmData\") then\r\n        print(line)\r\n      end\r\n    end\r\n    statf:close()\r\n  else\r\n    os.execute(\"ps ux | grep lua | grep traces | grep -v grep\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local statf = io.open(\"/proc/self/status\")",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if statf then\r\n    for line in statf:lines() do\r\n      if string.find(line, \"VmSize\") or string.find(line, \"VmData\") then\r\n        print(line)\r\n      end\r\n    end\r\n    statf:close()\r\n  else\r\n    os.execute(\"ps ux | grep lua | grep traces | grep -v grep\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "for line in statf:lines() do\r\n      if string.find(line, \"VmSize\") or string.find(line, \"VmData\") then\r\n        print(line)\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 6,
    "text": "if string.find(line, \"VmSize\") or string.find(line, \"VmData\") then\r\n        print(line)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "print(line)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "statf:close()",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "os.execute(\"ps ux | grep lua | grep traces | grep -v grep\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function tupleTreeStats(t)\r\n  local attrcount = 0\r\n  for k,v in xattrpairs(t) do\r\n    attrcount = attrcount + 1\r\n  end\r\n\r\n  local nodecount = 1\r\n  -- for i,x in xnpairs(t) do\r\n  for i,x in xnpairs_c(t) do\r\n    local a,n = tupleTreeStats(x)\r\n    attrcount = attrcount + a\r\n    nodecount = nodecount + n\r\n  end\r\n  return attrcount, nodecount\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local attrcount = 0",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "for k,v in xattrpairs(t) do\r\n    attrcount = attrcount + 1\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 14,
    "text": "attrcount = attrcount + 1",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "local nodecount = 1",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "for i,x in xnpairs_c(t) do\r\n    local a,n = tupleTreeStats(x)\r\n    attrcount = attrcount + a\r\n    nodecount = nodecount + n\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "local a,n = tupleTreeStats(x)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "attrcount = attrcount + a",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "nodecount = nodecount + n",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function doit_lazy()\r\n  l0 = lazytree.parsefile(testfile)\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "l0 = lazytree.parsefile(testfile)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function doit_lazy2()\r\n  l0 = lazytree.parsefile(testfile)\r\n  lazytree.load(l0)\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "lazytree.load(l0)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function doit_lxp()\r\n  l0 = lxptree.parsefile(testfile)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "l0 = lxptree.parsefile(testfile)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "",
    "type": "function container"
  }, {
    "id": 32,
    "text": "local\r\nfunction load(lz)\r\n  local n = lz.n\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local\r\nfunction parsefile(f)\r\n  local s\r\n  if type(f) == \"string\" then\r\n    f = assert(io.open(f))\r\n    s = f:read(\"*a\")\r\n    assert(f:close())\r\n  else\r\n    s = f:read(\"*a\")\r\n  end\r\n  return parsestring(s)\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 35,
    "text": "find",
    "type": "global function"
  }, {
    "id": 36,
    "text": "xattrpairs",
    "type": "global function"
  }, {
    "id": 37,
    "text": "print",
    "type": "global function"
  }, {
    "id": 38,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 39,
    "text": "ft[strategyname]",
    "type": "global function"
  }, {
    "id": 40,
    "text": "clock",
    "type": "global function"
  }, {
    "id": 41,
    "text": "open",
    "type": "global function"
  }, {
    "id": 42,
    "text": "xnpairs_c",
    "type": "global function"
  }, {
    "id": 43,
    "text": "require",
    "type": "global function"
  }, {
    "id": 44,
    "text": "",
    "type": "global variable"
  }, {
    "id": 45,
    "text": "",
    "type": "variable container"
  }, {
    "id": 46,
    "text": "",
    "type": "require container"
  }, {
    "id": 47,
    "text": "",
    "type": "local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "string"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "n/a"
  }, {
    "id": 51,
    "text": "",
    "type": "global variable"
  }, {
    "id": 52,
    "text": "",
    "type": "n/a"
  }, {
    "id": 53,
    "text": "",
    "type": "global variable"
  }, {
    "id": 54,
    "text": "",
    "type": "n/a"
  }, {
    "id": 55,
    "text": "",
    "type": "global variable"
  }, {
    "id": 56,
    "text": "",
    "type": "n/a"
  }, {
    "id": 57,
    "text": "",
    "type": "global variable"
  }, {
    "id": 58,
    "text": "",
    "type": "n/a"
  }, {
    "id": 59,
    "text": "",
    "type": "global variable"
  }, {
    "id": 60,
    "text": "",
    "type": "n/a"
  } ]
}