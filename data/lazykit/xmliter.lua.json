{
  "_filename": "xmliter.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lazykit/xmliter.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 79
  }, {
    "from": 2,
    "label": "calls",
    "to": 79
  }, {
    "from": 3,
    "label": "calls",
    "to": 79
  }, {
    "from": 4,
    "label": "calls",
    "to": 79
  }, {
    "from": 5,
    "label": "calls",
    "to": 79
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 10
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 13
  }, {
    "from": 21,
    "label": "has",
    "to": 14
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 15
  }, {
    "from": 21,
    "label": "has",
    "to": 10
  }, {
    "from": 21,
    "label": "has",
    "to": 10
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 10
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 13
  }, {
    "from": 29,
    "label": "has",
    "to": 14
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 13
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 15
  }, {
    "from": 29,
    "label": "has",
    "to": 10
  }, {
    "from": 29,
    "label": "has",
    "to": 10
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 10
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 13
  }, {
    "from": 37,
    "label": "has",
    "to": 14
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 22
  }, {
    "from": 38,
    "label": "has",
    "to": 13
  }, {
    "from": 38,
    "label": "has",
    "to": 31
  }, {
    "from": 37,
    "label": "has",
    "to": 15
  }, {
    "from": 37,
    "label": "has",
    "to": 10
  }, {
    "from": 37,
    "label": "has",
    "to": 22
  }, {
    "from": 37,
    "label": "has",
    "to": 10
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 27
  }, {
    "from": 40,
    "label": "has",
    "to": 10
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 10
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 10
  }, {
    "from": 44,
    "label": "has",
    "to": 10
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 10
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 10
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 59,
    "label": "has",
    "to": 65
  }, {
    "from": 59,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 66,
    "label": "has",
    "to": 63
  }, {
    "from": 66,
    "label": "has",
    "to": 71
  }, {
    "from": 66,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 66,
    "label": "has",
    "to": 74
  }, {
    "from": 66,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 54,
    "label": "has",
    "to": 10
  }, {
    "from": 54,
    "label": "has",
    "to": 10
  }, {
    "from": 54,
    "label": "has",
    "to": 77
  }, {
    "from": 54,
    "label": "has",
    "to": 10
  }, {
    "from": 54,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 10
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 81
  }, {
    "from": 84,
    "label": "has",
    "to": 82
  }, {
    "from": 84,
    "label": "has",
    "to": 10
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 54,
    "label": "calls",
    "to": 90
  }, {
    "from": 54,
    "label": "calls",
    "to": 93
  }, {
    "from": 54,
    "label": "calls",
    "to": 89
  }, {
    "from": 44,
    "label": "calls",
    "to": 92
  }, {
    "from": 54,
    "label": "calls",
    "to": 87
  }, {
    "from": 17,
    "label": "calls",
    "to": 91
  }, {
    "from": 24,
    "label": "calls",
    "to": 91
  }, {
    "from": 33,
    "label": "calls",
    "to": 91
  }, {
    "from": 40,
    "label": "calls",
    "to": 91
  }, {
    "from": 49,
    "label": "calls",
    "to": 91
  }, {
    "from": 54,
    "label": "calls",
    "to": 91
  }, {
    "from": 54,
    "label": "calls",
    "to": 91
  }, {
    "from": 9,
    "label": "calls",
    "to": 94
  }, {
    "from": 54,
    "label": "calls",
    "to": 95
  }, {
    "from": 17,
    "label": "calls",
    "to": 96
  }, {
    "from": 24,
    "label": "calls",
    "to": 96
  }, {
    "from": 29,
    "label": "calls",
    "to": 96
  }, {
    "from": 33,
    "label": "calls",
    "to": 96
  }, {
    "from": 37,
    "label": "calls",
    "to": 96
  }, {
    "from": 40,
    "label": "calls",
    "to": 96
  }, {
    "from": 44,
    "label": "calls",
    "to": 96
  }, {
    "from": 49,
    "label": "calls",
    "to": 96
  }, {
    "from": 54,
    "label": "calls",
    "to": 96
  }, {
    "from": 54,
    "label": "calls",
    "to": 96
  }, {
    "from": 44,
    "label": "calls",
    "to": 44
  }, {
    "from": 54,
    "label": "calls",
    "to": 88
  }, {
    "from": 54,
    "label": "calls",
    "to": 54
  }, {
    "from": 79,
    "label": "calls",
    "to": 54
  }, {
    "from": 84,
    "label": "calls",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 86
  }, {
    "from": 86,
    "label": "declares",
    "to": 9
  }, {
    "from": 86,
    "label": "declares",
    "to": 12
  }, {
    "from": 86,
    "label": "declares",
    "to": 17
  }, {
    "from": 86,
    "label": "declares",
    "to": 21
  }, {
    "from": 86,
    "label": "declares",
    "to": 24
  }, {
    "from": 86,
    "label": "declares",
    "to": 29
  }, {
    "from": 86,
    "label": "declares",
    "to": 33
  }, {
    "from": 86,
    "label": "declares",
    "to": 37
  }, {
    "from": 86,
    "label": "declares",
    "to": 40
  }, {
    "from": 86,
    "label": "declares",
    "to": 44
  }, {
    "from": 86,
    "label": "declares",
    "to": 49
  }, {
    "from": 86,
    "label": "declares",
    "to": 54
  }, {
    "from": 86,
    "label": "declares",
    "to": 79
  }, {
    "from": 86,
    "label": "declares",
    "to": 84
  }, {
    "from": 97,
    "label": "requires",
    "to": 1
  }, {
    "from": 97,
    "label": "requires",
    "to": 1
  }, {
    "from": 97,
    "label": "requires",
    "to": 1
  }, {
    "from": 97,
    "label": "requires",
    "to": 1
  }, {
    "from": 97,
    "label": "requires",
    "to": 1
  }, {
    "from": 97,
    "label": "requires",
    "to": 1
  }, {
    "from": 97,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 99
  }, {
    "from": 1,
    "label": "contains",
    "to": 100
  }, {
    "from": 99,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 99,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 99,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 99,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 99,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 99,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 1,
    "label": "provides",
    "to": 113
  }, {
    "from": 98,
    "label": "represents",
    "to": 114
  }, {
    "from": 113,
    "label": "provides",
    "to": 114
  }, {
    "from": 97,
    "label": "requires",
    "to": 1
  }, {
    "from": 101,
    "label": "contains",
    "to": 6
  }, {
    "from": 101,
    "label": "contains",
    "to": 7
  }, {
    "from": 101,
    "label": "contains",
    "to": 8
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "xmliter",
    "type": "module"
  }, {
    "id": 2,
    "text": "",
    "type": "function container"
  }, {
    "id": 3,
    "text": "function parse_value(tree)\r\n  assert(tree.name==\"value\")\r\n  xmliter.switch_c(tree, valuetable, {no_tags=true})\r\n  return tree.value\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function process_net(lz)\r\n  local ftable = \r\n    {\r\n    HEADER=function (lz) out:write(lz[1]) end;\r\n    UNITS=function (lz) print_sep(\"UNITS\", lz.attr.val) end;\r\n    STFIRST=function (lz) print_sep(\"ST\", lz.attr.maxx,\r\n      lz.attr.maxy, lz.attr.maxroute, lz.attr.numconn) end;\r\n    XRF=function (lz) print_sep(\"XRF \", lz.attr.num, lz.attr.name) end;\r\n    NET={\r\n      [0]=function (lz) print_sep(\"# NET\",  \"'\"..lz.attr.name..\"'\") end;\r\n      WIR={\r\n        [0]=function (lz) print_sep(\"WIR\", lz.attr.numseg, lz.attr.startx,\r\n          lz.attr.starty, lz.attr.termx, lz.attr.termy, lz.attr.optgroup) end;\r\n        SEG=function (lz) print_sep(\"SEG\", lz.attr.x, lz.attr.y,\r\n          lz.attr.lay, lz.attr.width) end\r\n      };\r\n      GUI=function (lz) print_sep(\"GUI\", lz.attr.startx, lz.attr.starty,\r\n        lz.attr.startlay, lz.attr.termx, lz.attr.termy, lz.attr.termlay,\r\n        lz.attr.optgroup) end\r\n    };\r\n    STLAST=function (lz)\r\n      print_sep(\"ST\", lz.attr.checkstat, lz.attr.numcomplete,\r\n        lz.attr.numinc, lz.attr.numunroute, lz.attr.numnotrace, \r\n        lz.attr.numfill) end\r\n  }\r\n  xmliter.switch_c(lz, ftable)\r\n  local dump = assert(io.open(\"lazy.out\", \"w\"))\r\n  dump:write(out:getstring())\r\n  dump:close()\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "",
    "type": "function container"
  }, {
    "id": 6,
    "text": "function Public.newoutput()\r\n  local t = {n=0, closed=false}\r\n  setmetatable(t, metatable)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function Public.parsefile(f)\r\n  local base = parsebase()\r\n  if type(f) == \"string\" then\r\n    f = assert(io.open(f))\r\n    function base:on_eof() f:close() end\r\n  end\r\n  base.file = f\r\n  base.getmore = file_getmore\r\n  return base\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function Public.parsestring(s)\r\n  local base = parsebase()\r\n  base.string = s\r\n  base.getmore = string_getmore\r\n  base.string_offset = 1\r\n  return base\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local function getn(tree)\r\n   return tree.n or table.getn(tree.n)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local\r\nfunction xnext(lz, i)\r\n  i = i + 1\r\n  local elt = lz[i]\r\n  if not elt then return nil end\r\n  return i, elt\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "local elt = lz[i]",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if not elt then return nil end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function xpairs(lz)\r\n  if type(lz) ~= \"table\" then\r\n    error(\"argument to xpairs must be a table\")\r\n  end\r\n  return xnext, lz, 0\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if type(lz) ~= \"table\" then\r\n    error(\"argument to xpairs must be a table\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "error(\"argument to xpairs must be a table\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local\r\nfunction xnext_c(lz, i)\r\n  i = i + 1\r\n  local elt = lz[i]\r\n  lz[i] = nil\r\n  if not elt then return nil end\r\n  return i, elt\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "lz[i] = nil",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function xpairs_c(lz)\r\n  if type(lz) ~= \"table\" then\r\n    error(\"argument to xpairs_c must be a table\")\r\n  end\r\n  lz._consumed = true\r\n  return xnext_c, lz, 0\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "if type(lz) ~= \"table\" then\r\n    error(\"argument to xpairs_c must be a table\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "error(\"argument to xpairs_c must be a table\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "lz._consumed = true",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local\r\nfunction xnnext(lz, i)\r\n  i = i + 1\r\n  local elt = lz[i]\r\n  while elt and type(elt) ~= \"table\" do\r\n    i = i + 1\r\n    elt = lz[i]\r\n  end\r\n  if not elt then return nil end\r\n  return i, elt, elt.name\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "while elt and type(elt) ~= \"table\" do\r\n    i = i + 1\r\n    elt = lz[i]\r\n  end",
    "type": "statement:while"
  }, {
    "id": 31,
    "text": "elt = lz[i]",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function xnpairs(lz)\r\n  if type(lz) ~= \"table\" then\r\n    error(\"argument to xnpairs must be a table\")\r\n  end\r\n  return xnnext, lz, 0\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "if type(lz) ~= \"table\" then\r\n    error(\"argument to xnpairs must be a table\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "error(\"argument to xnpairs must be a table\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local\r\nfunction xnnext_c(lz, i)\r\n  i = i + 1\r\n  local elt = lz[i]\r\n  while elt and type(elt) ~= \"table\" do\r\n    lz[i] = nil\r\n    i = i + 1\r\n    elt = lz[i]\r\n  end\r\n  if not elt then return nil end\r\n  lz[i] = nil\r\n  return i, elt, elt.name\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "while elt and type(elt) ~= \"table\" do\r\n    lz[i] = nil\r\n    i = i + 1\r\n    elt = lz[i]\r\n  end",
    "type": "statement:while"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function xnpairs_c(lz)\r\n  if type(lz) ~= \"table\" then\r\n    error(\"argument to xnpairs_c must be a table\")\r\n  end\r\n  lz._consumed = true\r\n  return xnnext_c, lz, 0\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "if type(lz) ~= \"table\" then\r\n    error(\"argument to xnpairs_c must be a table\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "error(\"argument to xnpairs_c must be a table\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "local\r\nfunction xattrnext(attr, k)\r\n  local nextk, nextv = next(attr, k)\r\n  if not nextk then return nil end\r\n  if type(nextk) ~= \"string\" then\r\n    return xattrnext(attr, nextk)\r\n  end\r\n  return nextk, nextv\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local nextk, nextv = next(attr, k)",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if not nextk then return nil end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "if type(nextk) ~= \"string\" then\r\n    return xattrnext(attr, nextk)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function xattrpairs(lz)\r\n  if type(lz) ~= \"table\" then\r\n    error(\"argument to xattrpairs must be a table\")\r\n  end\r\n  local attr = lz.attr or {}\r\n  return xattrnext, attr, nil\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "if type(lz) ~= \"table\" then\r\n    error(\"argument to xattrpairs must be a table\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "error(\"argument to xattrpairs must be a table\")",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "local attr = lz.attr or {}",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "local\r\nfunction switch_internal(lz, ftable, parent, iterator, opts, consume)\r\n  if ftable[0] then\r\n    local escape, val = ftable[0](lz, parent)\r\n    if escape then\r\n      return escape, val\r\n    end\r\n  end\r\n  for i, elt in iterator(lz) do\r\n    if type(elt) == \"string\" then\r\n      local strhandler = ftable[\"\"]\r\n      if strhandler then\r\n        local escape, val = strhandler(elt, lz)\r\n        if escape then\r\n          return escape, val\r\n        end\r\n      elseif opts.no_chardata then\r\n        error(\"found unexpected character data in \"..elt.name)\r\n      end\r\n    else\r\n      local f = ftable[elt.name] or ftable[true]\r\n      if f then \r\n        local escape, val\r\n        if type(f) == \"table\" then\r\n          escape, val = switch_internal(elt, f, lz, iterator, opts)\r\n        else\r\n          escape, val = f(elt, lz) \r\n        end\r\n        if escape then\r\n          return escape, val\r\n        end\r\n      elseif opts.no_tags then\r\n        local parentstr = \"\"\r\n        if parent then\r\n          parentstr = \" in parent \"..parent.name\r\n        end\r\n        error(\"unexpected element \"..elt.name..parentstr)\r\n      else\r\n        if consume then consume(elt) end\r\n      end\r\n    end\r\n  end\r\n  if ftable[-1] then\r\n    return ftable[-1](lz, parent)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "if ftable[0] then\r\n    local escape, val = ftable[0](lz, parent)\r\n    if escape then\r\n      return escape, val\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "local escape, val = ftable[0](lz, parent)",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if escape then\r\n      return escape, val\r\n    end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "for i, elt in iterator(lz) do\r\n    if type(elt) == \"string\" then\r\n      local strhandler = ftable[\"\"]\r\n      if strhandler then\r\n        local escape, val = strhandler(elt, lz)\r\n        if escape then\r\n          return escape, val\r\n        end\r\n      elseif opts.no_chardata then\r\n        error(\"found unexpected character data in \"..elt.name)\r\n      end\r\n    else\r\n      local f = ftable[elt.name] or ftable[true]\r\n      if f then \r\n        local escape, val\r\n        if type(f) == \"table\" then\r\n          escape, val = switch_internal(elt, f, lz, iterator, opts)\r\n        else\r\n          escape, val = f(elt, lz) \r\n        end\r\n        if escape then\r\n          return escape, val\r\n        end\r\n      elseif opts.no_tags then\r\n        local parentstr = \"\"\r\n        if parent then\r\n          parentstr = \" in parent \"..parent.name\r\n        end\r\n        error(\"unexpected element \"..elt.name..parentstr)\r\n      else\r\n        if consume then consume(elt) end\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 59,
    "text": "if type(elt) == \"string\" then\r\n      local strhandler = ftable[\"\"]\r\n      if strhandler then\r\n        local escape, val = strhandler(elt, lz)\r\n        if escape then\r\n          return escape, val\r\n        end\r\n      elseif opts.no_chardata then\r\n        error(\"found unexpected character data in \"..elt.name)\r\n      end\r\n    else\r\n      local f = ftable[elt.name] or ftable[true]\r\n      if f then \r\n        local escape, val\r\n        if type(f) == \"table\" then\r\n          escape, val = switch_internal(elt, f, lz, iterator, opts)\r\n        else\r\n          escape, val = f(elt, lz) \r\n        end\r\n        if escape then\r\n          return escape, val\r\n        end\r\n      elseif opts.no_tags then\r\n        local parentstr = \"\"\r\n        if parent then\r\n          parentstr = \" in parent \"..parent.name\r\n        end\r\n        error(\"unexpected element \"..elt.name..parentstr)\r\n      else\r\n        if consume then consume(elt) end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "local strhandler = ftable[\"\"]",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "if strhandler then\r\n        local escape, val = strhandler(elt, lz)\r\n        if escape then\r\n          return escape, val\r\n        end\r\n      elseif opts.no_chardata then\r\n        error(\"found unexpected character data in \"..elt.name)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "local escape, val = strhandler(elt, lz)",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "if escape then\r\n          return escape, val\r\n        end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "error(\"found unexpected character data in \"..elt.name)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "local f = ftable[elt.name] or ftable[true]",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if f then \r\n        local escape, val\r\n        if type(f) == \"table\" then\r\n          escape, val = switch_internal(elt, f, lz, iterator, opts)\r\n        else\r\n          escape, val = f(elt, lz) \r\n        end\r\n        if escape then\r\n          return escape, val\r\n        end\r\n      elseif opts.no_tags then\r\n        local parentstr = \"\"\r\n        if parent then\r\n          parentstr = \" in parent \"..parent.name\r\n        end\r\n        error(\"unexpected element \"..elt.name..parentstr)\r\n      else\r\n        if consume then consume(elt) end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "local escape, val",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if type(f) == \"table\" then\r\n          escape, val = switch_internal(elt, f, lz, iterator, opts)\r\n        else\r\n          escape, val = f(elt, lz) \r\n        end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "escape, val = switch_internal(elt, f, lz, iterator, opts)",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "escape, val = f(elt, lz)",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "local parentstr = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if parent then\r\n          parentstr = \" in parent \"..parent.name\r\n        end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "parentstr = \" in parent \"..parent.name",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "error(\"unexpected element \"..elt.name..parentstr)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "if consume then consume(elt) end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "consume(elt)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "if ftable[-1] then\r\n    return ftable[-1](lz, parent)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "local\r\nfunction switch_c(lz, ftable, opts)\r\n  local consume = (lazytree and lazytree.consume) or nil\r\n  opts = opts or emptyopts\r\n  local parent = opts.parent\r\n  return switch_internal(lz, ftable, parent, xpairs_c, opts, consume)\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "local consume = (lazytree and lazytree.consume) or nil",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "opts = opts or emptyopts",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "local parent = opts.parent",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "local\r\nfunction switch(lz, ftable, opts)\r\n  opts = opts or emptyopts\r\n  local parent = opts.parent\r\n  return switch_internal(lz, ftable, parent, xpairs, opts, nil)\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "",
    "type": "function container"
  }, {
    "id": 87,
    "text": "ftable[-1]",
    "type": "global function"
  }, {
    "id": 88,
    "text": "ftable[0]",
    "type": "global function"
  }, {
    "id": 89,
    "text": "consume",
    "type": "global function"
  }, {
    "id": 90,
    "text": "f",
    "type": "global function"
  }, {
    "id": 91,
    "text": "error",
    "type": "global function"
  }, {
    "id": 92,
    "text": "next",
    "type": "global function"
  }, {
    "id": 93,
    "text": "strhandler",
    "type": "global function"
  }, {
    "id": 94,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 95,
    "text": "iterator",
    "type": "global function"
  }, {
    "id": 96,
    "text": "type",
    "type": "global function"
  }, {
    "id": 97,
    "text": "",
    "type": "global variable"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "variable container"
  }, {
    "id": 100,
    "text": "",
    "type": "require container"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 105,
    "text": "",
    "type": "global variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "global variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "global variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "global variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "interface container"
  }, {
    "id": 114,
    "text": "",
    "type": "interface"
  } ]
}