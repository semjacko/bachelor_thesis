{
  "_filename": "xmlgen.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lazykit/xmlgen.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 6
  }, {
    "from": 2,
    "label": "calls",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 6,
    "label": "calls",
    "to": 23
  }, {
    "from": 6,
    "label": "calls",
    "to": 23
  }, {
    "from": 6,
    "label": "calls",
    "to": 22
  }, {
    "from": 6,
    "label": "calls",
    "to": 20
  }, {
    "from": 6,
    "label": "calls",
    "to": 20
  }, {
    "from": 6,
    "label": "calls",
    "to": 25
  }, {
    "from": 19,
    "label": "calls",
    "to": 24
  }, {
    "from": 19,
    "label": "calls",
    "to": 24
  }, {
    "from": 19,
    "label": "calls",
    "to": 24
  }, {
    "from": 12,
    "label": "calls",
    "to": 6
  }, {
    "from": 12,
    "label": "calls",
    "to": 21
  }, {
    "from": 1,
    "label": "contains",
    "to": 19
  }, {
    "from": 19,
    "label": "declares",
    "to": 6
  }, {
    "from": 19,
    "label": "declares",
    "to": 12
  }, {
    "from": 26,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 29
  }, {
    "from": 28,
    "label": "initializes",
    "to": 30
  }, {
    "from": 30,
    "label": "assigns",
    "to": 31
  }, {
    "from": 28,
    "label": "initializes",
    "to": 32
  }, {
    "from": 32,
    "label": "assigns",
    "to": 33
  }, {
    "from": 28,
    "label": "initializes",
    "to": 34
  }, {
    "from": 28,
    "label": "initializes",
    "to": 35
  }, {
    "from": 35,
    "label": "assigns",
    "to": 36
  }, {
    "from": 28,
    "label": "initializes",
    "to": 37
  }, {
    "from": 37,
    "label": "assigns",
    "to": 38
  }, {
    "from": 28,
    "label": "initializes",
    "to": 39
  }, {
    "from": 39,
    "label": "assigns",
    "to": 40
  }, {
    "from": 29,
    "label": "initializes",
    "to": 26
  }, {
    "from": 29,
    "label": "initializes",
    "to": 26
  }, {
    "from": 29,
    "label": "initializes",
    "to": 26
  }, {
    "from": 26,
    "label": "requires",
    "to": 41
  }, {
    "from": 1,
    "label": "provides",
    "to": 42
  }, {
    "from": 27,
    "label": "represents",
    "to": 43
  }, {
    "from": 42,
    "label": "provides",
    "to": 43
  }, {
    "from": 30,
    "label": "contains",
    "to": 3
  }, {
    "from": 30,
    "label": "contains",
    "to": 4
  }, {
    "from": 30,
    "label": "contains",
    "to": 5
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "xmlgen",
    "type": "module"
  }, {
    "id": 2,
    "text": "",
    "type": "function container"
  }, {
    "id": 3,
    "text": "function Public.newoutput()\r\n  local t = {n=0, closed=false}\r\n  setmetatable(t, metatable)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function Public.parsefile(f)\r\n  local base = parsebase()\r\n  if type(f) == \"string\" then\r\n    f = assert(io.open(f))\r\n    function base:on_eof() f:close() end\r\n  end\r\n  base.file = f\r\n  base.getmore = file_getmore\r\n  return base\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function Public.parsestring(s)\r\n  local base = parsebase()\r\n  base.string = s\r\n  base.getmore = string_getmore\r\n  base.string_offset = 1\r\n  return base\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function writefile(file, t, opts)\r\n  if type(file) == \"string\" then\r\n    file = assert(io.open(file, \"w\"))\r\n    ioxmlgen.write_xml(file, t, opts)\r\n    assert(file:close())\r\n  else\r\n    ioxmlgen.write_xml(file, t, opts)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "if type(file) == \"string\" then\r\n    file = assert(io.open(file, \"w\"))\r\n    ioxmlgen.write_xml(file, t, opts)\r\n    assert(file:close())\r\n  else\r\n    ioxmlgen.write_xml(file, t, opts)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "file = assert(io.open(file, \"w\"))",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "ioxmlgen.write_xml(file, t, opts)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "assert(file:close())",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function tostring(t, opts)\r\n  opts = opts or {}\r\n  f = newoutput()\r\n  writefile(f, t, opts)\r\n  f:close()\r\n  return f:getstring()\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "opts = opts or {}",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "f = newoutput()",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "writefile(f, t, opts)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "",
    "type": "function container"
  }, {
    "id": 20,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 21,
    "text": "newoutput",
    "type": "global function"
  }, {
    "id": 22,
    "text": "open",
    "type": "global function"
  }, {
    "id": 23,
    "text": "write_xml",
    "type": "global function"
  }, {
    "id": 24,
    "text": "require",
    "type": "global function"
  }, {
    "id": 25,
    "text": "type",
    "type": "global function"
  }, {
    "id": 26,
    "text": "",
    "type": "global variable"
  }, {
    "id": 27,
    "text": "",
    "type": "local variable"
  }, {
    "id": 28,
    "text": "",
    "type": "variable container"
  }, {
    "id": 29,
    "text": "",
    "type": "require container"
  }, {
    "id": 30,
    "text": "",
    "type": "local variable"
  }, {
    "id": 31,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 32,
    "text": "",
    "type": "local variable"
  }, {
    "id": 33,
    "text": "",
    "type": "boolean"
  }, {
    "id": 34,
    "text": "",
    "type": "local variable"
  }, {
    "id": 35,
    "text": "",
    "type": "global variable"
  }, {
    "id": 36,
    "text": "",
    "type": "n/a"
  }, {
    "id": 37,
    "text": "",
    "type": "global variable"
  }, {
    "id": 38,
    "text": "",
    "type": "n/a"
  }, {
    "id": 39,
    "text": "",
    "type": "global variable"
  }, {
    "id": 40,
    "text": "",
    "type": "n/a"
  }, {
    "id": 41,
    "text": "lua",
    "type": "module"
  }, {
    "id": 42,
    "text": "",
    "type": "interface container"
  }, {
    "id": 43,
    "text": "",
    "type": "interface"
  } ]
}