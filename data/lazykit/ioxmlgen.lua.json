{
  "_filename": "ioxmlgen.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lazykit/ioxmlgen.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 23
  }, {
    "from": 3,
    "label": "calls",
    "to": 23
  }, {
    "from": 4,
    "label": "calls",
    "to": 23
  }, {
    "from": 5,
    "label": "calls",
    "to": 23
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 25,
    "label": "has",
    "to": 36
  }, {
    "from": 23,
    "label": "has",
    "to": 37
  }, {
    "from": 17,
    "label": "calls",
    "to": 41
  }, {
    "from": 17,
    "label": "calls",
    "to": 47
  }, {
    "from": 17,
    "label": "calls",
    "to": 47
  }, {
    "from": 23,
    "label": "calls",
    "to": 47
  }, {
    "from": 23,
    "label": "calls",
    "to": 47
  }, {
    "from": 17,
    "label": "calls",
    "to": 43
  }, {
    "from": 23,
    "label": "calls",
    "to": 43
  }, {
    "from": 23,
    "label": "calls",
    "to": 23
  }, {
    "from": 17,
    "label": "calls",
    "to": 13
  }, {
    "from": 38,
    "label": "calls",
    "to": 46
  }, {
    "from": 23,
    "label": "calls",
    "to": 44
  }, {
    "from": 7,
    "label": "calls",
    "to": 42
  }, {
    "from": 7,
    "label": "calls",
    "to": 42
  }, {
    "from": 7,
    "label": "calls",
    "to": 42
  }, {
    "from": 13,
    "label": "calls",
    "to": 42
  }, {
    "from": 23,
    "label": "calls",
    "to": 17
  }, {
    "from": 13,
    "label": "calls",
    "to": 7
  }, {
    "from": 23,
    "label": "calls",
    "to": 7
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 38,
    "label": "declares",
    "to": 7
  }, {
    "from": 38,
    "label": "declares",
    "to": 13
  }, {
    "from": 38,
    "label": "declares",
    "to": 17
  }, {
    "from": 38,
    "label": "declares",
    "to": 23
  }, {
    "from": 1,
    "label": "declares",
    "to": 45
  }, {
    "from": 48,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 50
  }, {
    "from": 1,
    "label": "contains",
    "to": 51
  }, {
    "from": 50,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 50,
    "label": "initializes",
    "to": 54
  }, {
    "from": 50,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 50,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 51,
    "label": "initializes",
    "to": 48
  }, {
    "from": 1,
    "label": "provides",
    "to": 59
  }, {
    "from": 49,
    "label": "represents",
    "to": 60
  }, {
    "from": 59,
    "label": "provides",
    "to": 60
  }, {
    "from": 52,
    "label": "contains",
    "to": 6
  }, {
    "from": 52,
    "label": "contains",
    "to": 39
  }, {
    "from": 52,
    "label": "contains",
    "to": 40
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ioxmlgen",
    "type": "module"
  }, {
    "id": 2,
    "text": "function time_file(sq)\r\n  return cpu(function ()\r\n               local file = assert(io.open(\"test.xml\", \"w\"))\r\n               ioxmlgen.write_xml(file, sq)\r\n               file:close()\r\n               file = assert(io.open(\"test.xml\"))\r\n               local s = file:read(\"*a\")\r\n               file:close()\r\n               assert(os.remove(\"test.xml\"))\r\n             end)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function time_iostring(sq)\r\n  return cpu(function ()\r\n      local st = iostring.newoutput()\r\n      ioxmlgen.write_xml(st, sq)\r\n      st:getstring()\r\n    end)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function time_ciostring(sq)\r\n  return cpu(function ()\r\n      local st = ciostring.newoutput()\r\n      ioxmlgen.write_xml(st, sq)\r\n      st:getstring()\r\n    end)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function time_nullio(sq)\r\n  local nullio = {write=function(...) end}\r\n  return cpu(function ()\r\n      ioxmlgen.write_xml(nullio, sq)\r\n    end)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function Public.newoutput()\r\n  local t = {n=0, closed=false}\r\n  setmetatable(t, metatable)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local function xml_quote_pcdata(s)\r\n  s = string.gsub(s, \"&\", \"&amp;\")\r\n  s = string.gsub(s, \"<\", \"&lt;\")\r\n  s = string.gsub(s, \">\", \"&gt;\")\r\n  return s\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "s = string.gsub(s, \"&\", \"&amp;\")",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "s = string.gsub(s, \"<\", \"&lt;\")",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "s = string.gsub(s, \">\", \"&gt;\")",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function xml_quote_attr(s)\r\n  s = xml_quote_pcdata(s)\r\n  s = string.gsub(s, \"'\", \"&apos;\")\r\n  return s\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "s = xml_quote_pcdata(s)",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "s = string.gsub(s, \"'\", \"&apos;\")",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function write_xml_attributes(file, t)\r\n  for i,v in xattrpairs(t) do\r\n    if type(i) == \"string\" then\r\n      file:write(\" \"..i..\"='\"..xml_quote_attr(v)..\"'\")\r\n    elseif type(i) == \"number\" then\r\n      -- skip\r\n    else\r\n      error(\"non-string, non-number attribute key found\")\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "for i,v in xattrpairs(t) do\r\n    if type(i) == \"string\" then\r\n      file:write(\" \"..i..\"='\"..xml_quote_attr(v)..\"'\")\r\n    elseif type(i) == \"number\" then\r\n      -- skip\r\n    else\r\n      error(\"non-string, non-number attribute key found\")\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "if type(i) == \"string\" then\r\n      file:write(\" \"..i..\"='\"..xml_quote_attr(v)..\"'\")\r\n    elseif type(i) == \"number\" then\r\n      -- skip\r\n    else\r\n      error(\"non-string, non-number attribute key found\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "file:write(\" \"..i..\"='\"..xml_quote_attr(v)..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "error(\"non-string, non-number attribute key found\")",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function write_xml(file, t, opts)\r\n  opts = opts or {}\r\n  if type(t) == \"string\" then\r\n    file:write(xml_quote_pcdata(t))\r\n  elseif type(t) == \"table\" then\r\n    file:write(\"<\"..t.name)\r\n    if t.attr then\r\n      write_xml_attributes(file, t)\r\n    end\r\n    if not t[1] and not opts.no_empty then\r\n      file:write(\"/>\")\r\n    else\r\n      file:write(\">\")\r\n      for i,v in xpairs(t) do\r\n        write_xml(file, v, opts)\r\n      end\r\n      file:write(\"</\"..t.name..\">\")\r\n    end\r\n  else\r\n    error(\"unknown xml content\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "opts = opts or {}",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "if type(t) == \"string\" then\r\n    file:write(xml_quote_pcdata(t))\r\n  elseif type(t) == \"table\" then\r\n    file:write(\"<\"..t.name)\r\n    if t.attr then\r\n      write_xml_attributes(file, t)\r\n    end\r\n    if not t[1] and not opts.no_empty then\r\n      file:write(\"/>\")\r\n    else\r\n      file:write(\">\")\r\n      for i,v in xpairs(t) do\r\n        write_xml(file, v, opts)\r\n      end\r\n      file:write(\"</\"..t.name..\">\")\r\n    end\r\n  else\r\n    error(\"unknown xml content\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "file:write(xml_quote_pcdata(t))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "file:write(\"<\"..t.name)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "if t.attr then\r\n      write_xml_attributes(file, t)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "write_xml_attributes(file, t)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "if not t[1] and not opts.no_empty then\r\n      file:write(\"/>\")\r\n    else\r\n      file:write(\">\")\r\n      for i,v in xpairs(t) do\r\n        write_xml(file, v, opts)\r\n      end\r\n      file:write(\"</\"..t.name..\">\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "file:write(\"/>\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "file:write(\">\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "for i,v in xpairs(t) do\r\n        write_xml(file, v, opts)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 34,
    "text": "write_xml(file, v, opts)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "file:write(\"</\"..t.name..\">\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "error(\"unknown xml content\")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "",
    "type": "function container"
  }, {
    "id": 39,
    "text": "function Public.parsefile(f)\r\n  local base = parsebase()\r\n  if type(f) == \"string\" then\r\n    f = assert(io.open(f))\r\n    function base:on_eof() f:close() end\r\n  end\r\n  base.file = f\r\n  base.getmore = file_getmore\r\n  return base\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "function Public.parsestring(s)\r\n  local base = parsebase()\r\n  base.string = s\r\n  base.getmore = string_getmore\r\n  base.string_offset = 1\r\n  return base\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "xattrpairs",
    "type": "global function"
  }, {
    "id": 42,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 43,
    "text": "error",
    "type": "global function"
  }, {
    "id": 44,
    "text": "xpairs",
    "type": "global function"
  }, {
    "id": 45,
    "text": "write_xml",
    "type": "global function"
  }, {
    "id": 46,
    "text": "require",
    "type": "global function"
  }, {
    "id": 47,
    "text": "type",
    "type": "global function"
  }, {
    "id": 48,
    "text": "",
    "type": "global variable"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "variable container"
  }, {
    "id": 51,
    "text": "",
    "type": "require container"
  }, {
    "id": 52,
    "text": "",
    "type": "local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "global variable"
  }, {
    "id": 56,
    "text": "",
    "type": "n/a"
  }, {
    "id": 57,
    "text": "",
    "type": "global variable"
  }, {
    "id": 58,
    "text": "",
    "type": "n/a"
  }, {
    "id": 59,
    "text": "",
    "type": "interface container"
  }, {
    "id": 60,
    "text": "",
    "type": "interface"
  } ]
}