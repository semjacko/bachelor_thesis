{
  "_filename": "iostring.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lazykit/iostring.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 3
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 3
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 3
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 26
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 3
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 3
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 3
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 33,
    "label": "calls",
    "to": 46
  }, {
    "from": 17,
    "label": "calls",
    "to": 14
  }, {
    "from": 22,
    "label": "calls",
    "to": 14
  }, {
    "from": 33,
    "label": "calls",
    "to": 14
  }, {
    "from": 5,
    "label": "calls",
    "to": 48
  }, {
    "from": 5,
    "label": "calls",
    "to": 49
  }, {
    "from": 11,
    "label": "calls",
    "to": 49
  }, {
    "from": 14,
    "label": "calls",
    "to": 47
  }, {
    "from": 25,
    "label": "calls",
    "to": 47
  }, {
    "from": 28,
    "label": "calls",
    "to": 47
  }, {
    "from": 30,
    "label": "calls",
    "to": 47
  }, {
    "from": 39,
    "label": "calls",
    "to": 50
  }, {
    "from": 33,
    "label": "calls",
    "to": 5
  }, {
    "from": 5,
    "label": "calls",
    "to": 51
  }, {
    "from": 5,
    "label": "calls",
    "to": 51
  }, {
    "from": 22,
    "label": "calls",
    "to": 11
  }, {
    "from": 37,
    "label": "calls",
    "to": 11
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 43,
    "label": "declares",
    "to": 2
  }, {
    "from": 43,
    "label": "declares",
    "to": 5
  }, {
    "from": 43,
    "label": "declares",
    "to": 11
  }, {
    "from": 43,
    "label": "declares",
    "to": 14
  }, {
    "from": 43,
    "label": "declares",
    "to": 17
  }, {
    "from": 43,
    "label": "declares",
    "to": 22
  }, {
    "from": 43,
    "label": "declares",
    "to": 25
  }, {
    "from": 43,
    "label": "declares",
    "to": 28
  }, {
    "from": 43,
    "label": "declares",
    "to": 30
  }, {
    "from": 43,
    "label": "declares",
    "to": 33
  }, {
    "from": 43,
    "label": "declares",
    "to": 37
  }, {
    "from": 43,
    "label": "declares",
    "to": 39
  }, {
    "from": 52,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 55
  }, {
    "from": 54,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 54,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 54,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 54,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 1,
    "label": "provides",
    "to": 66
  }, {
    "from": 53,
    "label": "represents",
    "to": 67
  }, {
    "from": 66,
    "label": "provides",
    "to": 67
  }, {
    "from": 52,
    "label": "requires",
    "to": 1
  }, {
    "from": 53,
    "label": "contains",
    "to": 39
  }, {
    "from": 56,
    "label": "contains",
    "to": 39
  }, {
    "from": 68,
    "label": "contains",
    "to": 39
  }, {
    "from": 69,
    "label": "contains",
    "to": 39
  }, {
    "from": 70,
    "label": "contains",
    "to": 39
  }, {
    "from": 71,
    "label": "contains",
    "to": 39
  }, {
    "from": 72,
    "label": "contains",
    "to": 39
  }, {
    "from": 73,
    "label": "contains",
    "to": 39
  }, {
    "from": 74,
    "label": "contains",
    "to": 39
  }, {
    "from": 56,
    "label": "contains",
    "to": 44
  }, {
    "from": 56,
    "label": "contains",
    "to": 45
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "iostring",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function newBuffer ()\r\n  return {n=0}     -- 'n' counts number of elements in the stack\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function addString (stack, s)\r\n  table.insert(stack, s)       -- push 's' into the top of the stack\r\n  for i=stack.n-1, 1, -1 do\r\n    if string.len(stack[i]) > string.len(stack[i+1]) then break end\r\n    stack[i] = stack[i]..table.remove(stack)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "table.insert(stack, s)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "for i=stack.n-1, 1, -1 do\r\n    if string.len(stack[i]) > string.len(stack[i+1]) then break end\r\n    stack[i] = stack[i]..table.remove(stack)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 8,
    "text": "if string.len(stack[i]) > string.len(stack[i+1]) then break end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "stack[i] = stack[i]..table.remove(stack)",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function toString (stack)\r\n  for i=stack.n-1, 1, -1 do\r\n    stack[i] = stack[i]..table.remove(stack)\r\n  end\r\n  return stack[1]\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "for i=stack.n-1, 1, -1 do\r\n    stack[i] = stack[i]..table.remove(stack)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function errclosed()\r\n  error(\"attempt to use a closed iostring\")\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "error(\"attempt to use a closed iostring\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function methods:close()\r\n  if self.closed then errclosed() end\r\n  self.closed=true\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "if self.closed then errclosed() end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "errclosed()",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "self.closed=true",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function methods:flush()\r\n  if self.closed then errclosed() end\r\n  toString(self) -- side effect of compressing\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "toString(self)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function methods:lines()\r\n  error(\"iostring is write-only\")\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "error(\"iostring is write-only\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function methods:read(...)\r\n  error(\"iostring is write-only\")\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function methods:seek(...)\r\n  error(\"iostring does not support seeking\")\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "error(\"iostring does not support seeking\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function methods:write(...)\r\n  if self.closed then errclosed() end\r\n  for i,s in ipairs(arg) do\r\n    addString(self, s)\r\n  end\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "for i,s in ipairs(arg) do\r\n    addString(self, s)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 35,
    "text": "addString(self, s)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function methods:getstring()\r\n  return toString(self) or \"\"\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function Public.newoutput()\r\n  local t = {n=0, closed=false}\r\n  setmetatable(t, metatable)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local t = {n=0, closed=false}",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "setmetatable(t, metatable)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "",
    "type": "function container"
  }, {
    "id": 44,
    "text": "function Public.parsefile(f)\r\n  local base = parsebase()\r\n  if type(f) == \"string\" then\r\n    f = assert(io.open(f))\r\n    function base:on_eof() f:close() end\r\n  end\r\n  base.file = f\r\n  base.getmore = file_getmore\r\n  return base\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "function Public.parsestring(s)\r\n  local base = parsebase()\r\n  base.string = s\r\n  base.getmore = string_getmore\r\n  base.string_offset = 1\r\n  return base\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 47,
    "text": "error",
    "type": "global function"
  }, {
    "id": 48,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 49,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 50,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 51,
    "text": "len",
    "type": "global function"
  }, {
    "id": 52,
    "text": "",
    "type": "global variable"
  }, {
    "id": 53,
    "text": "",
    "type": "local variable"
  }, {
    "id": 54,
    "text": "",
    "type": "variable container"
  }, {
    "id": 55,
    "text": "",
    "type": "require container"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 62,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 63,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 64,
    "text": "",
    "type": "global variable"
  }, {
    "id": 65,
    "text": "",
    "type": "n/a"
  }, {
    "id": 66,
    "text": "",
    "type": "interface container"
  }, {
    "id": 67,
    "text": "",
    "type": "interface"
  }, {
    "id": 68,
    "text": "",
    "type": "local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "local variable"
  }, {
    "id": 71,
    "text": "",
    "type": "local variable"
  }, {
    "id": 72,
    "text": "",
    "type": "local variable"
  }, {
    "id": 73,
    "text": "",
    "type": "local variable"
  }, {
    "id": 74,
    "text": "",
    "type": "local variable"
  } ]
}