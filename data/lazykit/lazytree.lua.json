{
  "_filename": "lazytree.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lazykit/lazytree.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 112
  }, {
    "from": 3,
    "label": "calls",
    "to": 83
  }, {
    "from": 4,
    "label": "calls",
    "to": 83
  }, {
    "from": 5,
    "label": "calls",
    "to": 112
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 23
  }, {
    "from": 16,
    "label": "has",
    "to": 24
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 25
  }, {
    "from": 16,
    "label": "has",
    "to": 26
  }, {
    "from": 16,
    "label": "has",
    "to": 27
  }, {
    "from": 16,
    "label": "has",
    "to": 28
  }, {
    "from": 16,
    "label": "has",
    "to": 29
  }, {
    "from": 16,
    "label": "has",
    "to": 30
  }, {
    "from": 13,
    "label": "has",
    "to": 31
  }, {
    "from": 13,
    "label": "has",
    "to": 31
  }, {
    "from": 13,
    "label": "has",
    "to": 31
  }, {
    "from": 7,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 32,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 7,
    "label": "has",
    "to": 44
  }, {
    "from": 7,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 31
  }, {
    "from": 45,
    "label": "has",
    "to": 31
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 31
  }, {
    "from": 7,
    "label": "has",
    "to": 48
  }, {
    "from": 7,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 31
  }, {
    "from": 49,
    "label": "has",
    "to": 31
  }, {
    "from": 49,
    "label": "has",
    "to": 31
  }, {
    "from": 49,
    "label": "has",
    "to": 31
  }, {
    "from": 7,
    "label": "has",
    "to": 54
  }, {
    "from": 7,
    "label": "has",
    "to": 55
  }, {
    "from": 7,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 56,
    "label": "has",
    "to": 61
  }, {
    "from": 56,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 56,
    "label": "has",
    "to": 64
  }, {
    "from": 56,
    "label": "has",
    "to": 65
  }, {
    "from": 56,
    "label": "has",
    "to": 66
  }, {
    "from": 56,
    "label": "has",
    "to": 67
  }, {
    "from": 56,
    "label": "has",
    "to": 68
  }, {
    "from": 56,
    "label": "has",
    "to": 31
  }, {
    "from": 7,
    "label": "has",
    "to": 31
  }, {
    "from": 7,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 14
  }, {
    "from": 70,
    "label": "has",
    "to": 15
  }, {
    "from": 70,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 23
  }, {
    "from": 16,
    "label": "has",
    "to": 24
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 25
  }, {
    "from": 16,
    "label": "has",
    "to": 26
  }, {
    "from": 16,
    "label": "has",
    "to": 27
  }, {
    "from": 16,
    "label": "has",
    "to": 28
  }, {
    "from": 16,
    "label": "has",
    "to": 29
  }, {
    "from": 16,
    "label": "has",
    "to": 30
  }, {
    "from": 70,
    "label": "has",
    "to": 31
  }, {
    "from": 70,
    "label": "has",
    "to": 31
  }, {
    "from": 70,
    "label": "has",
    "to": 31
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 33
  }, {
    "from": 72,
    "label": "has",
    "to": 34
  }, {
    "from": 72,
    "label": "has",
    "to": 31
  }, {
    "from": 72,
    "label": "has",
    "to": 35
  }, {
    "from": 72,
    "label": "has",
    "to": 31
  }, {
    "from": 72,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 72,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 46
  }, {
    "from": 74,
    "label": "has",
    "to": 31
  }, {
    "from": 74,
    "label": "has",
    "to": 31
  }, {
    "from": 74,
    "label": "has",
    "to": 47
  }, {
    "from": 74,
    "label": "has",
    "to": 31
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 76,
    "label": "has",
    "to": 31
  }, {
    "from": 76,
    "label": "has",
    "to": 31
  }, {
    "from": 76,
    "label": "has",
    "to": 31
  }, {
    "from": 76,
    "label": "has",
    "to": 31
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 57
  }, {
    "from": 78,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 78,
    "label": "has",
    "to": 60
  }, {
    "from": 78,
    "label": "has",
    "to": 61
  }, {
    "from": 78,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 78,
    "label": "has",
    "to": 64
  }, {
    "from": 78,
    "label": "has",
    "to": 65
  }, {
    "from": 78,
    "label": "has",
    "to": 66
  }, {
    "from": 78,
    "label": "has",
    "to": 67
  }, {
    "from": 78,
    "label": "has",
    "to": 68
  }, {
    "from": 78,
    "label": "has",
    "to": 31
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 31
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 31
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 86,
    "label": "has",
    "to": 92
  }, {
    "from": 86,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 86,
    "label": "has",
    "to": 95
  }, {
    "from": 86,
    "label": "has",
    "to": 96
  }, {
    "from": 86,
    "label": "has",
    "to": 97
  }, {
    "from": 86,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 86,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 101,
    "label": "has",
    "to": 103
  }, {
    "from": 101,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 104,
    "label": "has",
    "to": 107
  }, {
    "from": 104,
    "label": "has",
    "to": 108
  }, {
    "from": 104,
    "label": "has",
    "to": 109
  }, {
    "from": 104,
    "label": "has",
    "to": 110
  }, {
    "from": 86,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 115,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 31
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 122,
    "label": "has",
    "to": 125
  }, {
    "from": 122,
    "label": "has",
    "to": 126
  }, {
    "from": 122,
    "label": "has",
    "to": 31
  }, {
    "from": 122,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 117
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 118
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 122,
    "label": "has",
    "to": 131
  }, {
    "from": 83,
    "label": "calls",
    "to": 83
  }, {
    "from": 7,
    "label": "calls",
    "to": 139
  }, {
    "from": 7,
    "label": "calls",
    "to": 72
  }, {
    "from": 7,
    "label": "calls",
    "to": 72
  }, {
    "from": 7,
    "label": "calls",
    "to": 72
  }, {
    "from": 7,
    "label": "calls",
    "to": 72
  }, {
    "from": 7,
    "label": "calls",
    "to": 136
  }, {
    "from": 7,
    "label": "calls",
    "to": 136
  }, {
    "from": 7,
    "label": "calls",
    "to": 136
  }, {
    "from": 7,
    "label": "calls",
    "to": 136
  }, {
    "from": 7,
    "label": "calls",
    "to": 136
  }, {
    "from": 7,
    "label": "calls",
    "to": 136
  }, {
    "from": 86,
    "label": "calls",
    "to": 136
  }, {
    "from": 86,
    "label": "calls",
    "to": 136
  }, {
    "from": 86,
    "label": "calls",
    "to": 136
  }, {
    "from": 86,
    "label": "calls",
    "to": 136
  }, {
    "from": 122,
    "label": "calls",
    "to": 136
  }, {
    "from": 80,
    "label": "calls",
    "to": 135
  }, {
    "from": 7,
    "label": "calls",
    "to": 78
  }, {
    "from": 7,
    "label": "calls",
    "to": 78
  }, {
    "from": 115,
    "label": "calls",
    "to": 122
  }, {
    "from": 122,
    "label": "calls",
    "to": 122
  }, {
    "from": 86,
    "label": "calls",
    "to": 137
  }, {
    "from": 86,
    "label": "calls",
    "to": 137
  }, {
    "from": 86,
    "label": "calls",
    "to": 137
  }, {
    "from": 7,
    "label": "calls",
    "to": 144
  }, {
    "from": 86,
    "label": "calls",
    "to": 144
  }, {
    "from": 115,
    "label": "calls",
    "to": 144
  }, {
    "from": 122,
    "label": "calls",
    "to": 144
  }, {
    "from": 122,
    "label": "calls",
    "to": 144
  }, {
    "from": 7,
    "label": "calls",
    "to": 70
  }, {
    "from": 86,
    "label": "calls",
    "to": 141
  }, {
    "from": 7,
    "label": "calls",
    "to": 142
  }, {
    "from": 132,
    "label": "calls",
    "to": 143
  }, {
    "from": 7,
    "label": "calls",
    "to": 74
  }, {
    "from": 80,
    "label": "calls",
    "to": 7
  }, {
    "from": 83,
    "label": "calls",
    "to": 7
  }, {
    "from": 86,
    "label": "calls",
    "to": 138
  }, {
    "from": 86,
    "label": "calls",
    "to": 138
  }, {
    "from": 86,
    "label": "calls",
    "to": 86
  }, {
    "from": 7,
    "label": "calls",
    "to": 140
  }, {
    "from": 7,
    "label": "calls",
    "to": 140
  }, {
    "from": 1,
    "label": "contains",
    "to": 132
  }, {
    "from": 132,
    "label": "declares",
    "to": 7
  }, {
    "from": 132,
    "label": "declares",
    "to": 70
  }, {
    "from": 132,
    "label": "declares",
    "to": 72
  }, {
    "from": 132,
    "label": "declares",
    "to": 74
  }, {
    "from": 132,
    "label": "declares",
    "to": 76
  }, {
    "from": 132,
    "label": "declares",
    "to": 78
  }, {
    "from": 132,
    "label": "declares",
    "to": 80
  }, {
    "from": 132,
    "label": "declares",
    "to": 83
  }, {
    "from": 132,
    "label": "declares",
    "to": 86
  }, {
    "from": 132,
    "label": "declares",
    "to": 112
  }, {
    "from": 132,
    "label": "declares",
    "to": 115
  }, {
    "from": 132,
    "label": "declares",
    "to": 122
  }, {
    "from": 145,
    "label": "requires",
    "to": 1
  }, {
    "from": 145,
    "label": "requires",
    "to": 1
  }, {
    "from": 145,
    "label": "requires",
    "to": 1
  }, {
    "from": 145,
    "label": "requires",
    "to": 1
  }, {
    "from": 145,
    "label": "requires",
    "to": 1
  }, {
    "from": 145,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 147
  }, {
    "from": 1,
    "label": "contains",
    "to": 148
  }, {
    "from": 147,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 147,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 147,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 147,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "assigns",
    "to": 156
  }, {
    "from": 147,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "assigns",
    "to": 158
  }, {
    "from": 147,
    "label": "initializes",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 147,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "assigns",
    "to": 162
  }, {
    "from": 147,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "assigns",
    "to": 164
  }, {
    "from": 147,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "assigns",
    "to": 166
  }, {
    "from": 147,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "assigns",
    "to": 168
  }, {
    "from": 148,
    "label": "initializes",
    "to": 145
  }, {
    "from": 1,
    "label": "provides",
    "to": 169
  }, {
    "from": 146,
    "label": "represents",
    "to": 170
  }, {
    "from": 169,
    "label": "provides",
    "to": 170
  }, {
    "from": 153,
    "label": "contains",
    "to": 6
  }, {
    "from": 153,
    "label": "contains",
    "to": 133
  }, {
    "from": 153,
    "label": "contains",
    "to": 134
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lazytree",
    "type": "module"
  }, {
    "id": 2,
    "text": "function doit_lazy2()\r\n  l0 = lazytree.parsefile(testfile)\r\n  lazytree.load(l0)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "",
    "type": "function container"
  }, {
    "id": 4,
    "text": "function pv(s)\r\n  local l0 = lazytree.parsestring(s)\r\n  return parse_value(l0)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function doit_lazy2()\r\n  l0 = lazytree.parsefile(\"traces.xml\")\r\n  lazytree.load(l0)\r\n  process_net(l0)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function Public.newoutput()\r\n  local t = {n=0, closed=false}\r\n  setmetatable(t, metatable)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local\r\nfunction parseevents(evts)\r\n  local treestack = {n=0}\r\n  local depth = 0\r\n  \r\n  local makelazy\r\n  local getnextlazy\r\n  local finishlazy\r\n  \r\n  -- If at the end of a tree, return false\r\n  -- If not, returns true and any child node found\r\n  function getnextlazy(lz)\r\n    local evt, data, attr = evts:peeknext()\r\n    local offset = lz._read_so_far + 1\r\n      --[[']]\r\n    if evt == \"chardata\" then\r\n      lz[offset] = data\r\n      lz._read_so_far = offset\r\n      evts:consumenext()\r\n      evt, data = evts:peeknext()\r\n      while evt == \"chardata\" do\r\n        evts:consumenext()\r\n        lz[offset] = lz[offset]..data\r\n        evt, data = evts:peeknext()\r\n      end\r\n      return true, nil\r\n    elseif evt == \"start\" then\r\n      local childtree = makelazy(evts)\r\n      lz[offset] = childtree\r\n      lz._read_so_far = offset\r\n      return true, childtree\r\n    elseif evt == \"end\" then\r\n      lz.n = lz._read_so_far\r\n      lz._read_so_far = nil\r\n      treestack[depth] = nil\r\n      depth = depth - 1\r\n      evts:getnext()\r\n      return false\r\n    else\r\n      error(\"unknown event \"..evt)\r\n    end\r\n  end\r\n  \r\n  function finishlazy(lz, limit)\r\n    -- if rawget(lz, \"n\") then print(\"busted\") return end\r\n    \r\n    -- you don't have an XML file this big, do you?\r\n    -- actually you'd run out of lua_number precision before you got there\r\n    limit = limit or 1e99\r\n    \r\n    -- If \"n\" is present, we're already read everything there is\r\n    if rawget(lz, \"n\") then return end\r\n    \r\n    if lz._read_so_far >= limit then\r\n      return\r\n    end\r\n    \r\n    if depth > lz._depth then\r\n      -- we're off in the children of a previous tree\r\n      -- pop up back to this level\r\n      -- print(\"recursing \", lz._depth)\r\n      finishlazy(treestack[lz._depth+1])\r\n    end\r\n    while lz._read_so_far < limit and not rawget(lz, \"n\") do\r\n      local still_going, child = getnextlazy(lz, evts)\r\n      if not still_going then break end\r\n      if child then\r\n        if lz._read_so_far == limit then\r\n          -- do nothing.  we already have a lazy tree, which is good enough\r\n        else \r\n          finishlazy(child)\r\n        end\r\n      end\r\n    end\r\n  end\r\n  \r\n  local get_child\r\n  function get_child(lz, i)\r\n    if rawget(lz, \"n\") then\r\n      return rawget(lz, i)\r\n    elseif i <= lz._read_so_far then\r\n      -- print(\"here\")\r\n      return l[i]\r\n    end\r\n    -- print(\"gln\", lz, i)\r\n    finishlazy(lz, i)\r\n    return rawget(lz, i)\r\n  end\r\n  \r\n  local lazy_indexmethod\r\n  function lazy_indexmethod(t, k)\r\n    if k == \"n\" then\r\n      -- sigh, we have to finish to get this\r\n      finishlazy(t)\r\n      return rawget(t, \"n\")\r\n    elseif k == \"attr\" then\r\n      -- we're lazily creating empty attr tables...\r\n      -- this is an attempt to keep most trees from having a unique \r\n      -- empty attribute table.\r\n      local attr = {}\r\n      rawset(t, \"attr\", attr)\r\n      return attr\r\n    elseif type(k) == \"number\" then\r\n      return get_child(t, k)\r\n    end\r\n    return nil\r\n  end\r\n  \r\n  local metatable = {}\r\n  metatable.__index = lazy_indexmethod\r\n  \r\n  -- forward declared local makelazy\r\n  function makelazy()\r\n    local evt, data, attr = evts:getnext()\r\n    if evt ~= \"start\" then\r\n      error(\"expecting start tree\")\r\n    end\r\n    local lazytree = {}\r\n    lazytree.name = data\r\n    if attr and attr[1] then\r\n      lazytree.attr = attr\r\n    end\r\n    lazytree._read_so_far = 0\r\n    depth = depth + 1\r\n    lazytree._depth = depth\r\n    treestack[depth] = lazytree\r\n    setmetatable(lazytree, metatable)\r\n    return lazytree\r\n  end\r\n\r\n  return makelazy(evts)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local treestack = {n=0}",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local depth = 0",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local makelazy",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local getnextlazy",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local finishlazy",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "function getnextlazy(lz)\r\n    local evt, data, attr = evts:peeknext()\r\n    local offset = lz._read_so_far + 1\r\n      --[[']]\r\n    if evt == \"chardata\" then\r\n      lz[offset] = data\r\n      lz._read_so_far = offset\r\n      evts:consumenext()\r\n      evt, data = evts:peeknext()\r\n      while evt == \"chardata\" do\r\n        evts:consumenext()\r\n        lz[offset] = lz[offset]..data\r\n        evt, data = evts:peeknext()\r\n      end\r\n      return true, nil\r\n    elseif evt == \"start\" then\r\n      local childtree = makelazy(evts)\r\n      lz[offset] = childtree\r\n      lz._read_so_far = offset\r\n      return true, childtree\r\n    elseif evt == \"end\" then\r\n      lz.n = lz._read_so_far\r\n      lz._read_so_far = nil\r\n      treestack[depth] = nil\r\n      depth = depth - 1\r\n      evts:getnext()\r\n      return false\r\n    else\r\n      error(\"unknown event \"..evt)\r\n    end\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 14,
    "text": "local evt, data, attr = evts:peeknext()",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local offset = lz._read_so_far + 1",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if evt == \"chardata\" then\r\n      lz[offset] = data\r\n      lz._read_so_far = offset\r\n      evts:consumenext()\r\n      evt, data = evts:peeknext()\r\n      while evt == \"chardata\" do\r\n        evts:consumenext()\r\n        lz[offset] = lz[offset]..data\r\n        evt, data = evts:peeknext()\r\n      end\r\n      return true, nil\r\n    elseif evt == \"start\" then\r\n      local childtree = makelazy(evts)\r\n      lz[offset] = childtree\r\n      lz._read_so_far = offset\r\n      return true, childtree\r\n    elseif evt == \"end\" then\r\n      lz.n = lz._read_so_far\r\n      lz._read_so_far = nil\r\n      treestack[depth] = nil\r\n      depth = depth - 1\r\n      evts:getnext()\r\n      return false\r\n    else\r\n      error(\"unknown event \"..evt)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "lz[offset] = data",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "lz._read_so_far = offset",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "evts:consumenext()",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "evt, data = evts:peeknext()",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "while evt == \"chardata\" do\r\n        evts:consumenext()\r\n        lz[offset] = lz[offset]..data\r\n        evt, data = evts:peeknext()\r\n      end",
    "type": "statement:while"
  }, {
    "id": 22,
    "text": "lz[offset] = lz[offset]..data",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "local childtree = makelazy(evts)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "lz[offset] = childtree",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "lz.n = lz._read_so_far",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "lz._read_so_far = nil",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "treestack[depth] = nil",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "depth = depth - 1",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "evts:getnext()",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "error(\"unknown event \"..evt)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 32,
    "text": "function finishlazy(lz, limit)\r\n    -- if rawget(lz, \"n\") then print(\"busted\") return end\r\n    \r\n    -- you don't have an XML file this big, do you?\r\n    -- actually you'd run out of lua_number precision before you got there\r\n    limit = limit or 1e99\r\n    \r\n    -- If \"n\" is present, we're already read everything there is\r\n    if rawget(lz, \"n\") then return end\r\n    \r\n    if lz._read_so_far >= limit then\r\n      return\r\n    end\r\n    \r\n    if depth > lz._depth then\r\n      -- we're off in the children of a previous tree\r\n      -- pop up back to this level\r\n      -- print(\"recursing \", lz._depth)\r\n      finishlazy(treestack[lz._depth+1])\r\n    end\r\n    while lz._read_so_far < limit and not rawget(lz, \"n\") do\r\n      local still_going, child = getnextlazy(lz, evts)\r\n      if not still_going then break end\r\n      if child then\r\n        if lz._read_so_far == limit then\r\n          -- do nothing.  we already have a lazy tree, which is good enough\r\n        else \r\n          finishlazy(child)\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 33,
    "text": "limit = limit or 1e99",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "if rawget(lz, \"n\") then return end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "if lz._read_so_far >= limit then\r\n      return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "if depth > lz._depth then\r\n      -- we're off in the children of a previous tree\r\n      -- pop up back to this level\r\n      -- print(\"recursing \", lz._depth)\r\n      finishlazy(treestack[lz._depth+1])\r\n    end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "finishlazy(treestack[lz._depth+1])",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "while lz._read_so_far < limit and not rawget(lz, \"n\") do\r\n      local still_going, child = getnextlazy(lz, evts)\r\n      if not still_going then break end\r\n      if child then\r\n        if lz._read_so_far == limit then\r\n          -- do nothing.  we already have a lazy tree, which is good enough\r\n        else \r\n          finishlazy(child)\r\n        end\r\n      end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 39,
    "text": "local still_going, child = getnextlazy(lz, evts)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "if not still_going then break end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "if child then\r\n        if lz._read_so_far == limit then\r\n          -- do nothing.  we already have a lazy tree, which is good enough\r\n        else \r\n          finishlazy(child)\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "if lz._read_so_far == limit then\r\n          -- do nothing.  we already have a lazy tree, which is good enough\r\n        else \r\n          finishlazy(child)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "finishlazy(child)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "local get_child",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "function get_child(lz, i)\r\n    if rawget(lz, \"n\") then\r\n      return rawget(lz, i)\r\n    elseif i <= lz._read_so_far then\r\n      -- print(\"here\")\r\n      return l[i]\r\n    end\r\n    -- print(\"gln\", lz, i)\r\n    finishlazy(lz, i)\r\n    return rawget(lz, i)\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 46,
    "text": "if rawget(lz, \"n\") then\r\n      return rawget(lz, i)\r\n    elseif i <= lz._read_so_far then\r\n      -- print(\"here\")\r\n      return l[i]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "finishlazy(lz, i)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "local lazy_indexmethod",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "function lazy_indexmethod(t, k)\r\n    if k == \"n\" then\r\n      -- sigh, we have to finish to get this\r\n      finishlazy(t)\r\n      return rawget(t, \"n\")\r\n    elseif k == \"attr\" then\r\n      -- we're lazily creating empty attr tables...\r\n      -- this is an attempt to keep most trees from having a unique \r\n      -- empty attribute table.\r\n      local attr = {}\r\n      rawset(t, \"attr\", attr)\r\n      return attr\r\n    elseif type(k) == \"number\" then\r\n      return get_child(t, k)\r\n    end\r\n    return nil\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 50,
    "text": "if k == \"n\" then\r\n      -- sigh, we have to finish to get this\r\n      finishlazy(t)\r\n      return rawget(t, \"n\")\r\n    elseif k == \"attr\" then\r\n      -- we're lazily creating empty attr tables...\r\n      -- this is an attempt to keep most trees from having a unique \r\n      -- empty attribute table.\r\n      local attr = {}\r\n      rawset(t, \"attr\", attr)\r\n      return attr\r\n    elseif type(k) == \"number\" then\r\n      return get_child(t, k)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "finishlazy(t)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "local attr = {}",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "rawset(t, \"attr\", attr)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "local metatable = {}",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "metatable.__index = lazy_indexmethod",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "function makelazy()\r\n    local evt, data, attr = evts:getnext()\r\n    if evt ~= \"start\" then\r\n      error(\"expecting start tree\")\r\n    end\r\n    local lazytree = {}\r\n    lazytree.name = data\r\n    if attr and attr[1] then\r\n      lazytree.attr = attr\r\n    end\r\n    lazytree._read_so_far = 0\r\n    depth = depth + 1\r\n    lazytree._depth = depth\r\n    treestack[depth] = lazytree\r\n    setmetatable(lazytree, metatable)\r\n    return lazytree\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 57,
    "text": "local evt, data, attr = evts:getnext()",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "if evt ~= \"start\" then\r\n      error(\"expecting start tree\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "error(\"expecting start tree\")",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "local lazytree = {}",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "lazytree.name = data",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "if attr and attr[1] then\r\n      lazytree.attr = attr\r\n    end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "lazytree.attr = attr",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "lazytree._read_so_far = 0",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "depth = depth + 1",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "lazytree._depth = depth",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "treestack[depth] = lazytree",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "setmetatable(lazytree, metatable)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function getnextlazy(lz)\r\n    local evt, data, attr = evts:peeknext()\r\n    local offset = lz._read_so_far + 1\r\n      --[[']]\r\n    if evt == \"chardata\" then\r\n      lz[offset] = data\r\n      lz._read_so_far = offset\r\n      evts:consumenext()\r\n      evt, data = evts:peeknext()\r\n      while evt == \"chardata\" do\r\n        evts:consumenext()\r\n        lz[offset] = lz[offset]..data\r\n        evt, data = evts:peeknext()\r\n      end\r\n      return true, nil\r\n    elseif evt == \"start\" then\r\n      local childtree = makelazy(evts)\r\n      lz[offset] = childtree\r\n      lz._read_so_far = offset\r\n      return true, childtree\r\n    elseif evt == \"end\" then\r\n      lz.n = lz._read_so_far\r\n      lz._read_so_far = nil\r\n      treestack[depth] = nil\r\n      depth = depth - 1\r\n      evts:getnext()\r\n      return false\r\n    else\r\n      error(\"unknown event \"..evt)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function finishlazy(lz, limit)\r\n    -- if rawget(lz, \"n\") then print(\"busted\") return end\r\n    \r\n    -- you don't have an XML file this big, do you?\r\n    -- actually you'd run out of lua_number precision before you got there\r\n    limit = limit or 1e99\r\n    \r\n    -- If \"n\" is present, we're already read everything there is\r\n    if rawget(lz, \"n\") then return end\r\n    \r\n    if lz._read_so_far >= limit then\r\n      return\r\n    end\r\n    \r\n    if depth > lz._depth then\r\n      -- we're off in the children of a previous tree\r\n      -- pop up back to this level\r\n      -- print(\"recursing \", lz._depth)\r\n      finishlazy(treestack[lz._depth+1])\r\n    end\r\n    while lz._read_so_far < limit and not rawget(lz, \"n\") do\r\n      local still_going, child = getnextlazy(lz, evts)\r\n      if not still_going then break end\r\n      if child then\r\n        if lz._read_so_far == limit then\r\n          -- do nothing.  we already have a lazy tree, which is good enough\r\n        else \r\n          finishlazy(child)\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function get_child(lz, i)\r\n    if rawget(lz, \"n\") then\r\n      return rawget(lz, i)\r\n    elseif i <= lz._read_so_far then\r\n      -- print(\"here\")\r\n      return l[i]\r\n    end\r\n    -- print(\"gln\", lz, i)\r\n    finishlazy(lz, i)\r\n    return rawget(lz, i)\r\n  end",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function lazy_indexmethod(t, k)\r\n    if k == \"n\" then\r\n      -- sigh, we have to finish to get this\r\n      finishlazy(t)\r\n      return rawget(t, \"n\")\r\n    elseif k == \"attr\" then\r\n      -- we're lazily creating empty attr tables...\r\n      -- this is an attempt to keep most trees from having a unique \r\n      -- empty attribute table.\r\n      local attr = {}\r\n      rawset(t, \"attr\", attr)\r\n      return attr\r\n    elseif type(k) == \"number\" then\r\n      return get_child(t, k)\r\n    end\r\n    return nil\r\n  end",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function makelazy()\r\n    local evt, data, attr = evts:getnext()\r\n    if evt ~= \"start\" then\r\n      error(\"expecting start tree\")\r\n    end\r\n    local lazytree = {}\r\n    lazytree.name = data\r\n    if attr and attr[1] then\r\n      lazytree.attr = attr\r\n    end\r\n    lazytree._read_so_far = 0\r\n    depth = depth + 1\r\n    lazytree._depth = depth\r\n    treestack[depth] = lazytree\r\n    setmetatable(lazytree, metatable)\r\n    return lazytree\r\n  end",
    "type": "function"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "local \r\nfunction parsefile(f)\r\n  local evts = lxpevent.parsefile(f)\r\n  return parseevents(evts)\r\nend",
    "type": "function"
  }, {
    "id": 81,
    "text": "local evts = lxpevent.parsefile(f)",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "local \r\nfunction parsestring(s)\r\n  local evts = lxpevent.parsestring(s)\r\n  return parseevents(evts)\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "local evts = lxpevent.parsestring(s)",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "local\r\nfunction lazyprint(lz, depth, header)\r\n  depth = depth or 0\r\n  local prefix = header or string.rep(\" \", depth)\r\n  local finished = \"\"\r\n  if rawget(lz, \"n\") then finished = \" DONE\" end\r\n  local read = \"\"\r\n  if lz._read_so_far then read = \" read:\"..lz._read_so_far end\r\n  print(prefix..\"<\"..lz.name..finished..read)\r\n  local consumed = lz._consumed\r\n  local limit=1e99\r\n  if rawget(lz, \"n\") then\r\n    limit = rawget(lz, \"n\")\r\n  elseif lz._read_so_far then\r\n    limit = lz._read_so_far\r\n  end\r\n  for i = 1,limit do\r\n    local elt = rawget(lz, i)\r\n    local numpre = \"  \"..i..\":\"\r\n    if not elt then\r\n      if not consumed then break end\r\n      print(prefix..numpre..\"consumed\")\r\n    elseif type(elt) == \"string\" then\r\n      local s = string.gsub(elt, \"\\\\\", \"\\\\\\\\\")\r\n      s = string.gsub(elt, \"\\n\", \"\\\\n\")\r\n      print(prefix..numpre..\"  str: |\"..s..\"|\")\r\n    else\r\n      lazyprint(elt, depth + 2, prefix..numpre)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "depth = depth or 0",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "local prefix = header or string.rep(\" \", depth)",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local finished = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "if rawget(lz, \"n\") then finished = \" DONE\" end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "finished = \" DONE\"",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "local read = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "if lz._read_so_far then read = \" read:\"..lz._read_so_far end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "read = \" read:\"..lz._read_so_far",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "print(prefix..\"<\"..lz.name..finished..read)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "local consumed = lz._consumed",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "local limit=1e99",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "if rawget(lz, \"n\") then\r\n    limit = rawget(lz, \"n\")\r\n  elseif lz._read_so_far then\r\n    limit = lz._read_so_far\r\n  end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "limit = rawget(lz, \"n\")",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "limit = lz._read_so_far",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "for i = 1,limit do\r\n    local elt = rawget(lz, i)\r\n    local numpre = \"  \"..i..\":\"\r\n    if not elt then\r\n      if not consumed then break end\r\n      print(prefix..numpre..\"consumed\")\r\n    elseif type(elt) == \"string\" then\r\n      local s = string.gsub(elt, \"\\\\\", \"\\\\\\\\\")\r\n      s = string.gsub(elt, \"\\n\", \"\\\\n\")\r\n      print(prefix..numpre..\"  str: |\"..s..\"|\")\r\n    else\r\n      lazyprint(elt, depth + 2, prefix..numpre)\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 102,
    "text": "local elt = rawget(lz, i)",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "local numpre = \"  \"..i..\":\"",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "if not elt then\r\n      if not consumed then break end\r\n      print(prefix..numpre..\"consumed\")\r\n    elseif type(elt) == \"string\" then\r\n      local s = string.gsub(elt, \"\\\\\", \"\\\\\\\\\")\r\n      s = string.gsub(elt, \"\\n\", \"\\\\n\")\r\n      print(prefix..numpre..\"  str: |\"..s..\"|\")\r\n    else\r\n      lazyprint(elt, depth + 2, prefix..numpre)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "if not consumed then break end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "print(prefix..numpre..\"consumed\")",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "local s = string.gsub(elt, \"\\\\\", \"\\\\\\\\\")",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "s = string.gsub(elt, \"\\n\", \"\\\\n\")",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "print(prefix..numpre..\"  str: |\"..s..\"|\")",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "lazyprint(elt, depth + 2, prefix..numpre)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "local\r\nfunction load(lz)\r\n  local n = lz.n\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "local n = lz.n",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "local\r\nfunction consume_completed(lz, n)\r\n  for i=1,n do\r\n    local elt = lz[i]\r\n    lz[i] = nil\r\n    if type(elt) == \"table\" then\r\n      consume(lz)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "for i=1,n do\r\n    local elt = lz[i]\r\n    lz[i] = nil\r\n    if type(elt) == \"table\" then\r\n      consume(lz)\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 117,
    "text": "local elt = lz[i]",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "lz[i] = nil",
    "type": "statement:assign"
  }, {
    "id": 119,
    "text": "if type(elt) == \"table\" then\r\n      consume(lz)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "consume(lz)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "local\r\nfunction consume(lz)\r\n  if type(lz) ~= table then return end\r\n  lz._consumed = true\r\n  local start = rawget(lz, \"_read_so_far\")\r\n  if not start then return end\r\n  -- This isn't necessary; the garbage collector will do this for us\r\n  -- if rawget(lz, \"n\") then return consume_completed(lz, n) end\r\n\r\n  -- We start one element after current position.  Potentially, somebody \r\n  -- could have saved a reference to something in our current tree.\r\n\r\n  for i=start+1,1e99 do\r\n    local elt = lz[i]\r\n    if not elt then break end\r\n    lz[i] = nil\r\n    if type(elt) == \"table\" then\r\n      consume(elt)\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "if type(lz) ~= table then return end",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "lz._consumed = true",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "local start = rawget(lz, \"_read_so_far\")",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "if not start then return end",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "for i=start+1,1e99 do\r\n    local elt = lz[i]\r\n    if not elt then break end\r\n    lz[i] = nil\r\n    if type(elt) == \"table\" then\r\n      consume(elt)\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 128,
    "text": "if not elt then break end",
    "type": "statement:if"
  }, {
    "id": 129,
    "text": "if type(elt) == \"table\" then\r\n      consume(elt)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "consume(elt)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "",
    "type": "function container"
  }, {
    "id": 133,
    "text": "function Public.parsefile(f)\r\n  local base = parsebase()\r\n  if type(f) == \"string\" then\r\n    f = assert(io.open(f))\r\n    function base:on_eof() f:close() end\r\n  end\r\n  base.file = f\r\n  base.getmore = file_getmore\r\n  return base\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "function Public.parsestring(s)\r\n  local base = parsebase()\r\n  base.string = s\r\n  base.getmore = string_getmore\r\n  base.string_offset = 1\r\n  return base\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "local\r\nfunction parsefile(f)\r\n  local s\r\n  if type(f) == \"string\" then\r\n    f = assert(io.open(f))\r\n    s = f:read(\"*a\")\r\n    assert(f:close())\r\n  else\r\n    s = f:read(\"*a\")\r\n  end\r\n  return parsestring(s)\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 137,
    "text": "print",
    "type": "global function"
  }, {
    "id": 138,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 139,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 140,
    "text": "error",
    "type": "global function"
  }, {
    "id": 141,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 142,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 143,
    "text": "require",
    "type": "global function"
  }, {
    "id": 144,
    "text": "type",
    "type": "global function"
  }, {
    "id": 145,
    "text": "",
    "type": "global variable"
  }, {
    "id": 146,
    "text": "",
    "type": "local variable"
  }, {
    "id": 147,
    "text": "",
    "type": "variable container"
  }, {
    "id": 148,
    "text": "",
    "type": "require container"
  }, {
    "id": 149,
    "text": "",
    "type": "local variable"
  }, {
    "id": 150,
    "text": "",
    "type": "n/a"
  }, {
    "id": 151,
    "text": "",
    "type": "local variable"
  }, {
    "id": 152,
    "text": "",
    "type": "n/a"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 155,
    "text": "",
    "type": "global variable"
  }, {
    "id": 156,
    "text": "",
    "type": "n/a"
  }, {
    "id": 157,
    "text": "",
    "type": "global variable"
  }, {
    "id": 158,
    "text": "",
    "type": "n/a"
  }, {
    "id": 159,
    "text": "",
    "type": "global variable"
  }, {
    "id": 160,
    "text": "",
    "type": "n/a"
  }, {
    "id": 161,
    "text": "",
    "type": "global variable"
  }, {
    "id": 162,
    "text": "",
    "type": "n/a"
  }, {
    "id": 163,
    "text": "",
    "type": "global variable"
  }, {
    "id": 164,
    "text": "",
    "type": "n/a"
  }, {
    "id": 165,
    "text": "",
    "type": "global variable"
  }, {
    "id": 166,
    "text": "",
    "type": "n/a"
  }, {
    "id": 167,
    "text": "",
    "type": "global variable"
  }, {
    "id": 168,
    "text": "",
    "type": "n/a"
  }, {
    "id": 169,
    "text": "",
    "type": "interface container"
  }, {
    "id": 170,
    "text": "",
    "type": "interface"
  } ]
}