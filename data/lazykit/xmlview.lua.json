{
  "_filename": "xmlview.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lazykit/xmlview.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 6
  }, {
    "from": 15,
    "label": "has",
    "to": 7
  }, {
    "from": 15,
    "label": "has",
    "to": 8
  }, {
    "from": 15,
    "label": "has",
    "to": 9
  }, {
    "from": 15,
    "label": "has",
    "to": 7
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 15,
    "label": "has",
    "to": 7
  }, {
    "from": 15,
    "label": "has",
    "to": 11
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 7
  }, {
    "from": 15,
    "label": "has",
    "to": 7
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 20,
    "label": "has",
    "to": 7
  }, {
    "from": 20,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 33,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 33,
    "label": "has",
    "to": 46
  }, {
    "from": 33,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 7
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 34
  }, {
    "from": 53,
    "label": "has",
    "to": 35
  }, {
    "from": 53,
    "label": "has",
    "to": 36
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 39
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 53,
    "label": "has",
    "to": 46
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 49
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 51
  }, {
    "from": 58,
    "label": "has",
    "to": 7
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 34
  }, {
    "from": 61,
    "label": "has",
    "to": 35
  }, {
    "from": 61,
    "label": "has",
    "to": 36
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 39
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 61,
    "label": "has",
    "to": 46
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 49
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 51
  }, {
    "from": 66,
    "label": "has",
    "to": 7
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 36
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 69,
    "label": "has",
    "to": 46
  }, {
    "from": 69,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 49
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 51
  }, {
    "from": 76,
    "label": "has",
    "to": 7
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 33,
    "label": "calls",
    "to": 84
  }, {
    "from": 53,
    "label": "calls",
    "to": 84
  }, {
    "from": 61,
    "label": "calls",
    "to": 84
  }, {
    "from": 69,
    "label": "calls",
    "to": 86
  }, {
    "from": 20,
    "label": "calls",
    "to": 82
  }, {
    "from": 5,
    "label": "calls",
    "to": 85
  }, {
    "from": 15,
    "label": "calls",
    "to": 85
  }, {
    "from": 48,
    "label": "calls",
    "to": 29
  }, {
    "from": 58,
    "label": "calls",
    "to": 29
  }, {
    "from": 66,
    "label": "calls",
    "to": 29
  }, {
    "from": 76,
    "label": "calls",
    "to": 29
  }, {
    "from": 20,
    "label": "calls",
    "to": 83
  }, {
    "from": 29,
    "label": "calls",
    "to": 83
  }, {
    "from": 48,
    "label": "calls",
    "to": 87
  }, {
    "from": 58,
    "label": "calls",
    "to": 87
  }, {
    "from": 66,
    "label": "calls",
    "to": 87
  }, {
    "from": 76,
    "label": "calls",
    "to": 87
  }, {
    "from": 20,
    "label": "calls",
    "to": 80
  }, {
    "from": 20,
    "label": "calls",
    "to": 80
  }, {
    "from": 20,
    "label": "calls",
    "to": 80
  }, {
    "from": 33,
    "label": "calls",
    "to": 80
  }, {
    "from": 53,
    "label": "calls",
    "to": 80
  }, {
    "from": 61,
    "label": "calls",
    "to": 80
  }, {
    "from": 69,
    "label": "calls",
    "to": 80
  }, {
    "from": 33,
    "label": "calls",
    "to": 81
  }, {
    "from": 53,
    "label": "calls",
    "to": 81
  }, {
    "from": 61,
    "label": "calls",
    "to": 81
  }, {
    "from": 69,
    "label": "calls",
    "to": 81
  }, {
    "from": 5,
    "label": "calls",
    "to": 89
  }, {
    "from": 5,
    "label": "calls",
    "to": 89
  }, {
    "from": 15,
    "label": "calls",
    "to": 89
  }, {
    "from": 15,
    "label": "calls",
    "to": 89
  }, {
    "from": 15,
    "label": "calls",
    "to": 89
  }, {
    "from": 29,
    "label": "calls",
    "to": 89
  }, {
    "from": 79,
    "label": "calls",
    "to": 88
  }, {
    "from": 33,
    "label": "calls",
    "to": 15
  }, {
    "from": 33,
    "label": "calls",
    "to": 15
  }, {
    "from": 5,
    "label": "calls",
    "to": 5
  }, {
    "from": 53,
    "label": "calls",
    "to": 5
  }, {
    "from": 1,
    "label": "contains",
    "to": 79
  }, {
    "from": 79,
    "label": "declares",
    "to": 5
  }, {
    "from": 79,
    "label": "declares",
    "to": 15
  }, {
    "from": 79,
    "label": "declares",
    "to": 20
  }, {
    "from": 79,
    "label": "declares",
    "to": 29
  }, {
    "from": 79,
    "label": "declares",
    "to": 33
  }, {
    "from": 79,
    "label": "declares",
    "to": 48
  }, {
    "from": 79,
    "label": "declares",
    "to": 53
  }, {
    "from": 79,
    "label": "declares",
    "to": 58
  }, {
    "from": 79,
    "label": "declares",
    "to": 61
  }, {
    "from": 79,
    "label": "declares",
    "to": 66
  }, {
    "from": 79,
    "label": "declares",
    "to": 69
  }, {
    "from": 79,
    "label": "declares",
    "to": 76
  }, {
    "from": 90,
    "label": "requires",
    "to": 1
  }, {
    "from": 90,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 91
  }, {
    "from": 1,
    "label": "contains",
    "to": 92
  }, {
    "from": 91,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 91,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 91,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 99,
    "label": "assigns",
    "to": 100
  }, {
    "from": 91,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 91,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 91,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 91,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 91,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 91,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 91,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 91,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 92,
    "label": "initializes",
    "to": 90
  }, {
    "from": 93,
    "label": "contains",
    "to": 2
  }, {
    "from": 93,
    "label": "contains",
    "to": 3
  }, {
    "from": 93,
    "label": "contains",
    "to": 4
  }, {
    "from": 107,
    "label": "contains",
    "to": 20
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "xmlview",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Public.newoutput()\r\n  local t = {n=0, closed=false}\r\n  setmetatable(t, metatable)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function Public.parsefile(f)\r\n  local base = parsebase()\r\n  if type(f) == \"string\" then\r\n    f = assert(io.open(f))\r\n    function base:on_eof() f:close() end\r\n  end\r\n  base.file = f\r\n  base.getmore = file_getmore\r\n  return base\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function Public.parsestring(s)\r\n  local base = parsebase()\r\n  base.string = s\r\n  base.getmore = string_getmore\r\n  base.string_offset = 1\r\n  return base\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function xtext(tree)\r\n  if type(tree) == \"string\" then return tree end\r\n  -- fast-path some common cases\r\n  local first = tree[1]\r\n  if not first then return \"\" end\r\n  if type(first) == \"string\" and not tree[2] then\r\n    return first\r\n  end\r\n  local s = \"\"\r\n  for i, lz in xpairs(tree) do\r\n    s = s..xtext(lz)\r\n  end\r\n  return s\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "if type(tree) == \"string\" then return tree end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 8,
    "text": "local first = tree[1]",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if not first then return \"\" end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "if type(first) == \"string\" and not tree[2] then\r\n    return first\r\n  end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "local s = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "for i, lz in xpairs(tree) do\r\n    s = s..xtext(lz)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 13,
    "text": "s = s..xtext(lz)",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function xstring(tree)\r\n  if type(tree) == \"string\" then return tree end\r\n  -- fast-path some common cases\r\n  local first = tree[1]\r\n  if not first then return \"\" end\r\n  if type(first) == \"string\" and not tree[2] then\r\n    return first\r\n  end\r\n  local s = \"\"\r\n  for i, lz in xpairs(tree) do\r\n    if type(lz) == \"string\" then\r\n      s = s..lz\r\n    else\r\n      return nil, \"contains mixed content\"\r\n    end\r\n  end\r\n  return s\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "for i, lz in xpairs(tree) do\r\n    if type(lz) == \"string\" then\r\n      s = s..lz\r\n    else\r\n      return nil, \"contains mixed content\"\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 17,
    "text": "if type(lz) == \"string\" then\r\n      s = s..lz\r\n    else\r\n      return nil, \"contains mixed content\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "s = s..lz",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function viewmetatable.__index(t, k)\r\n  if not rawget(t, cachecomplete_key) then\r\n    local populate = t[populate_key]\r\n    populate(t)\r\n  end\r\n  local error_table = rawget(t, error_key)\r\n  if error_table and error_table[k] then\r\n    local tablename = t[tree_key].name\r\n    error(\"in element \"..tablename..\" xmlview index \"..k..\": \"..error_table[k])\r\n  end\r\n  return rawget(t, k)\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "if not rawget(t, cachecomplete_key) then\r\n    local populate = t[populate_key]\r\n    populate(t)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "local populate = t[populate_key]",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "populate(t)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "local error_table = rawget(t, error_key)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if error_table and error_table[k] then\r\n    local tablename = t[tree_key].name\r\n    error(\"in element \"..tablename..\" xmlview index \"..k..\": \"..error_table[k])\r\n  end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "local tablename = t[tree_key].name",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "error(\"in element \"..tablename..\" xmlview index \"..k..\": \"..error_table[k])",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local\r\nfunction ensure_table(t)\r\n  if type(t) ~= \"table\" then\r\n    error(\"view must be on a table\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "if type(t) ~= \"table\" then\r\n    error(\"view must be on a table\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "error(\"view must be on a table\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local\r\nfunction populatestringcache(t)\r\n  local error_table = {}\r\n  t[error_key] = error_table\r\n  local root = t[tree_key]\r\n  for i, element, name in xnpairs(root) do\r\n    if rawget(t, name) then\r\n      error_table[name] = \"contains duplicate content\"\r\n    else\r\n      local s, msg = xstring(element)\r\n      if s then\r\n        t[name] = xstring(element)\r\n      else\r\n        error_table[name] = msg\r\n      end\r\n    end\r\n  end\r\n  for k,v in pairs(error_table) do\r\n    t[k] = nil\r\n  end\r\n  t[cachecomplete_key] = true\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "local error_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "t[error_key] = error_table",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "local root = t[tree_key]",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "for i, element, name in xnpairs(root) do\r\n    if rawget(t, name) then\r\n      error_table[name] = \"contains duplicate content\"\r\n    else\r\n      local s, msg = xstring(element)\r\n      if s then\r\n        t[name] = xstring(element)\r\n      else\r\n        error_table[name] = msg\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 38,
    "text": "if rawget(t, name) then\r\n      error_table[name] = \"contains duplicate content\"\r\n    else\r\n      local s, msg = xstring(element)\r\n      if s then\r\n        t[name] = xstring(element)\r\n      else\r\n        error_table[name] = msg\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "error_table[name] = \"contains duplicate content\"",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "local s, msg = xstring(element)",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if s then\r\n        t[name] = xstring(element)\r\n      else\r\n        error_table[name] = msg\r\n      end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "t[name] = xstring(element)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "error_table[name] = msg",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "for k,v in pairs(error_table) do\r\n    t[k] = nil\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 45,
    "text": "t[k] = nil",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "t[cachecomplete_key] = true",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "local \r\nfunction string(x)\r\n  ensure_table(x)\r\n  local t = {[tree_key]=x, [populate_key]=populatestringcache}\r\n  setmetatable(t, viewmetatable)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "ensure_table(x)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "local t = {[tree_key]=x, [populate_key]=populatestringcache}",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "setmetatable(t, viewmetatable)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "local\r\nfunction populatetextcache(t)\r\n  local error_table = {}\r\n  t[error_key] = error_table\r\n  local root = t[tree_key]\r\n  for i, element, name in xnpairs(root) do\r\n    if rawget(t, name) then\r\n      error_table[name] = \"contains duplicate content\"\r\n    else\r\n      t[name] = xtext(element)\r\n    end\r\n  end\r\n  for k,v in pairs(error_table) do\r\n    t[k] = nil\r\n  end\r\n  t[cachecomplete_key] = true\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "for i, element, name in xnpairs(root) do\r\n    if rawget(t, name) then\r\n      error_table[name] = \"contains duplicate content\"\r\n    else\r\n      t[name] = xtext(element)\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 55,
    "text": "if rawget(t, name) then\r\n      error_table[name] = \"contains duplicate content\"\r\n    else\r\n      t[name] = xtext(element)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "t[name] = xtext(element)",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "local \r\nfunction text(x)\r\n  ensure_table(x)\r\n  local t = {[tree_key]=x, [populate_key]=populatetextcache}\r\n  setmetatable(t, viewmetatable)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "local t = {[tree_key]=x, [populate_key]=populatetextcache}",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "local\r\nfunction populatenodecache(t)\r\n  local error_table = {}\r\n  t[error_key] = error_table\r\n  local root = t[tree_key]\r\n  for i, element, name in xnpairs(root) do\r\n    if rawget(t, name) then\r\n      error_table[name] = \"contains duplicate content\"\r\n    else\r\n      t[name] = element\r\n    end\r\n  end\r\n  for k,v in pairs(error_table) do\r\n    t[k] = nil\r\n  end\r\n  t[cachecomplete_key] = true\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "for i, element, name in xnpairs(root) do\r\n    if rawget(t, name) then\r\n      error_table[name] = \"contains duplicate content\"\r\n    else\r\n      t[name] = element\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 63,
    "text": "if rawget(t, name) then\r\n      error_table[name] = \"contains duplicate content\"\r\n    else\r\n      t[name] = element\r\n    end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "t[name] = element",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "local\r\nfunction element(x)\r\n  ensure_table(x)\r\n  local t = {[tree_key]=x, [populate_key]=populatenodecache}\r\n  setmetatable(t, viewmetatable)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "local t = {[tree_key]=x, [populate_key]=populatenodecache}",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "local\r\nfunction populatenodescache(t)\r\n  local root = t[tree_key]\r\n  for i, element, name in xnpairs(root) do\r\n    local existing = rawget(t, name)\r\n    if not existing then\r\n      t[name] = {n=0}\r\n    end\r\n    table.insert(t[name], element)\r\n  end\r\n  t[cachecomplete_key] = true\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "for i, element, name in xnpairs(root) do\r\n    local existing = rawget(t, name)\r\n    if not existing then\r\n      t[name] = {n=0}\r\n    end\r\n    table.insert(t[name], element)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 71,
    "text": "local existing = rawget(t, name)",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if not existing then\r\n      t[name] = {n=0}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "t[name] = {n=0}",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "table.insert(t[name], element)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "local\r\nfunction elements(x)\r\n  ensure_table(x)\r\n  local t = {[node_key]=x, [populate_key]=populatenodescache}\r\n  setmetatable(t, viewmetatable)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "local t = {[node_key]=x, [populate_key]=populatenodescache}",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "",
    "type": "function container"
  }, {
    "id": 80,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 81,
    "text": "xnpairs",
    "type": "global function"
  }, {
    "id": 82,
    "text": "populate",
    "type": "global function"
  }, {
    "id": 83,
    "text": "error",
    "type": "global function"
  }, {
    "id": 84,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 85,
    "text": "xpairs",
    "type": "global function"
  }, {
    "id": 86,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 87,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 88,
    "text": "require",
    "type": "global function"
  }, {
    "id": 89,
    "text": "type",
    "type": "global function"
  }, {
    "id": 90,
    "text": "",
    "type": "global variable"
  }, {
    "id": 91,
    "text": "",
    "type": "variable container"
  }, {
    "id": 92,
    "text": "",
    "type": "require container"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 97,
    "text": "",
    "type": "string"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 100,
    "text": "",
    "type": "string"
  }, {
    "id": 101,
    "text": "",
    "type": "local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 103,
    "text": "",
    "type": "string"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 106,
    "text": "",
    "type": "string"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 109,
    "text": "",
    "type": "global variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "global variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "global variable"
  }, {
    "id": 114,
    "text": "",
    "type": "n/a"
  }, {
    "id": 115,
    "text": "",
    "type": "global variable"
  }, {
    "id": 116,
    "text": "",
    "type": "n/a"
  }, {
    "id": 117,
    "text": "",
    "type": "global variable"
  }, {
    "id": 118,
    "text": "",
    "type": "n/a"
  } ]
}