{
  "_filename": "lxpevent.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lazykit/lxpevent.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 3,
    "label": "has",
    "to": 14
  }, {
    "from": 3,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 3,
    "label": "has",
    "to": 25
  }, {
    "from": 3,
    "label": "has",
    "to": 26
  }, {
    "from": 3,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 7
  }, {
    "from": 28,
    "label": "has",
    "to": 8
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 10
  }, {
    "from": 30,
    "label": "has",
    "to": 8
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 12
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 16
  }, {
    "from": 34,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 34,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 38
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 47,
    "label": "has",
    "to": 53
  }, {
    "from": 47,
    "label": "has",
    "to": 54
  }, {
    "from": 47,
    "label": "has",
    "to": 26
  }, {
    "from": 47,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 52
  }, {
    "from": 57,
    "label": "has",
    "to": 48
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 26
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 26
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 62,
    "label": "has",
    "to": 67
  }, {
    "from": 62,
    "label": "has",
    "to": 68
  }, {
    "from": 62,
    "label": "has",
    "to": 26
  }, {
    "from": 62,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 63
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 65
  }, {
    "from": 70,
    "label": "has",
    "to": 26
  }, {
    "from": 70,
    "label": "has",
    "to": 67
  }, {
    "from": 70,
    "label": "has",
    "to": 68
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 63
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 65
  }, {
    "from": 73,
    "label": "has",
    "to": 26
  }, {
    "from": 73,
    "label": "has",
    "to": 66
  }, {
    "from": 73,
    "label": "has",
    "to": 26
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 47,
    "label": "calls",
    "to": 78
  }, {
    "from": 47,
    "label": "calls",
    "to": 79
  }, {
    "from": 47,
    "label": "calls",
    "to": 3
  }, {
    "from": 57,
    "label": "calls",
    "to": 3
  }, {
    "from": 3,
    "label": "calls",
    "to": 80
  }, {
    "from": 3,
    "label": "calls",
    "to": 83
  }, {
    "from": 3,
    "label": "calls",
    "to": 85
  }, {
    "from": 3,
    "label": "calls",
    "to": 85
  }, {
    "from": 3,
    "label": "calls",
    "to": 85
  }, {
    "from": 3,
    "label": "calls",
    "to": 85
  }, {
    "from": 3,
    "label": "calls",
    "to": 77
  }, {
    "from": 47,
    "label": "calls",
    "to": 86
  }, {
    "from": 76,
    "label": "calls",
    "to": 84
  }, {
    "from": 40,
    "label": "calls",
    "to": 82
  }, {
    "from": 62,
    "label": "calls",
    "to": 81
  }, {
    "from": 73,
    "label": "calls",
    "to": 81
  }, {
    "from": 1,
    "label": "contains",
    "to": 76
  }, {
    "from": 76,
    "label": "declares",
    "to": 3
  }, {
    "from": 76,
    "label": "declares",
    "to": 28
  }, {
    "from": 76,
    "label": "declares",
    "to": 30
  }, {
    "from": 76,
    "label": "declares",
    "to": 32
  }, {
    "from": 76,
    "label": "declares",
    "to": 34
  }, {
    "from": 76,
    "label": "declares",
    "to": 36
  }, {
    "from": 76,
    "label": "declares",
    "to": 40
  }, {
    "from": 76,
    "label": "declares",
    "to": 47
  }, {
    "from": 76,
    "label": "declares",
    "to": 56
  }, {
    "from": 76,
    "label": "declares",
    "to": 57
  }, {
    "from": 76,
    "label": "declares",
    "to": 62
  }, {
    "from": 76,
    "label": "declares",
    "to": 70
  }, {
    "from": 76,
    "label": "declares",
    "to": 73
  }, {
    "from": 87,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 92
  }, {
    "from": 1,
    "label": "contains",
    "to": 93
  }, {
    "from": 92,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 92,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 92,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 92,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 92,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 92,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 92,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 92,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 92,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 92,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 92,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  }, {
    "from": 92,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "assigns",
    "to": 119
  }, {
    "from": 92,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 92,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "assigns",
    "to": 123
  }, {
    "from": 92,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 93,
    "label": "initializes",
    "to": 87
  }, {
    "from": 94,
    "label": "contains",
    "to": 2
  }, {
    "from": 88,
    "label": "contains",
    "to": 47
  }, {
    "from": 89,
    "label": "contains",
    "to": 47
  }, {
    "from": 90,
    "label": "contains",
    "to": 47
  }, {
    "from": 91,
    "label": "contains",
    "to": 47
  }, {
    "from": 94,
    "label": "contains",
    "to": 47
  }, {
    "from": 126,
    "label": "contains",
    "to": 47
  }, {
    "from": 127,
    "label": "contains",
    "to": 47
  }, {
    "from": 128,
    "label": "contains",
    "to": 47
  }, {
    "from": 129,
    "label": "contains",
    "to": 47
  }, {
    "from": 88,
    "label": "contains",
    "to": 57
  }, {
    "from": 89,
    "label": "contains",
    "to": 57
  }, {
    "from": 90,
    "label": "contains",
    "to": 57
  }, {
    "from": 91,
    "label": "contains",
    "to": 57
  }, {
    "from": 94,
    "label": "contains",
    "to": 57
  }, {
    "from": 126,
    "label": "contains",
    "to": 57
  }, {
    "from": 127,
    "label": "contains",
    "to": 57
  }, {
    "from": 128,
    "label": "contains",
    "to": 57
  }, {
    "from": 129,
    "label": "contains",
    "to": 57
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lxpevent",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Public.newoutput()\r\n  local t = {n=0, closed=false}\r\n  setmetatable(t, metatable)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local\r\nfunction parsebase()\r\n  local p = {n=0, next=1}\r\n  \r\n  local callbacks = {}\r\n  function callbacks.StartElement(parser, elementName, attributes)\r\n    local evt = {START, elementName, attributes}\r\n    tinsert(p, evt)\r\n  end\r\n  function callbacks.EndElement(parser, elementName)\r\n    local evt = {END, elementName}\r\n    tinsert(p, evt)\r\n  end\r\n  function callbacks.CharacterData(parser, string)\r\n    local evt = {CHARDATA, string}\r\n    tinsert(p, evt)\r\n  end\r\n\r\n  p.callbacks = callbacks\r\n  local parser = lxp.new(callbacks)\r\n\r\n  function p:parsemore(s)\r\n    -- print(\"parsemore\", s)\r\n    local result, msg, line, col, pos = parser:parse(s)\r\n    if not result then\r\n      error(\"expat parse error \"..msg..\" at line \"..line..\" column \"..col)\r\n    end\r\n    if not s then\r\n      parser:close()\r\n      tinsert(p, {EOF})\r\n      p.nomore = true\r\n      if p.on_eof then p:on_eof() end\r\n    end\r\n  end\r\n  \r\n  setmetatable(p, metatable)\r\n  return p\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local p = {n=0, next=1}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local callbacks = {}",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "function callbacks.StartElement(parser, elementName, attributes)\r\n    local evt = {START, elementName, attributes}\r\n    tinsert(p, evt)\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 7,
    "text": "local evt = {START, elementName, attributes}",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "tinsert(p, evt)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "function callbacks.EndElement(parser, elementName)\r\n    local evt = {END, elementName}\r\n    tinsert(p, evt)\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 10,
    "text": "local evt = {END, elementName}",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "function callbacks.CharacterData(parser, string)\r\n    local evt = {CHARDATA, string}\r\n    tinsert(p, evt)\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 12,
    "text": "local evt = {CHARDATA, string}",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "p.callbacks = callbacks",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "local parser = lxp.new(callbacks)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "function p:parsemore(s)\r\n    -- print(\"parsemore\", s)\r\n    local result, msg, line, col, pos = parser:parse(s)\r\n    if not result then\r\n      error(\"expat parse error \"..msg..\" at line \"..line..\" column \"..col)\r\n    end\r\n    if not s then\r\n      parser:close()\r\n      tinsert(p, {EOF})\r\n      p.nomore = true\r\n      if p.on_eof then p:on_eof() end\r\n    end\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 16,
    "text": "local result, msg, line, col, pos = parser:parse(s)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if not result then\r\n      error(\"expat parse error \"..msg..\" at line \"..line..\" column \"..col)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "error(\"expat parse error \"..msg..\" at line \"..line..\" column \"..col)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "if not s then\r\n      parser:close()\r\n      tinsert(p, {EOF})\r\n      p.nomore = true\r\n      if p.on_eof then p:on_eof() end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "parser:close()",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "tinsert(p, {EOF})",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "p.nomore = true",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if p.on_eof then p:on_eof() end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "p:on_eof()",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "setmetatable(p, metatable)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function callbacks.StartElement(parser, elementName, attributes)\r\n    local evt = {START, elementName, attributes}\r\n    tinsert(p, evt)\r\n  end",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function callbacks.EndElement(parser, elementName)\r\n    local evt = {END, elementName}\r\n    tinsert(p, evt)\r\n  end",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function callbacks.CharacterData(parser, string)\r\n    local evt = {CHARDATA, string}\r\n    tinsert(p, evt)\r\n  end",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function p:parsemore(s)\r\n    -- print(\"parsemore\", s)\r\n    local result, msg, line, col, pos = parser:parse(s)\r\n    if not result then\r\n      error(\"expat parse error \"..msg..\" at line \"..line..\" column \"..col)\r\n    end\r\n    if not s then\r\n      parser:close()\r\n      tinsert(p, {EOF})\r\n      p.nomore = true\r\n      if p.on_eof then p:on_eof() end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function file_getmore(self)\r\n  local s = self.file:read(BUFSIZE)\r\n  self:parsemore(s)\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local s = self.file:read(BUFSIZE)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "self:parsemore(s)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function string_getmore(self)\r\n  local offset = self.string_offset\r\n  local s = string.sub(self.string, offset, offset+BUFSIZE)\r\n  self.string_offset = offset+BUFSIZE+1\r\n  if s == \"\" then s = nil end\r\n  self:parsemore(s)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "local offset = self.string_offset",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local s = string.sub(self.string, offset, offset+BUFSIZE)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "self.string_offset = offset+BUFSIZE+1",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "if s == \"\" then s = nil end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "s = nil",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function Public.parsefile(f)\r\n  local base = parsebase()\r\n  if type(f) == \"string\" then\r\n    f = assert(io.open(f))\r\n    function base:on_eof() f:close() end\r\n  end\r\n  base.file = f\r\n  base.getmore = file_getmore\r\n  return base\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local base = parsebase()",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if type(f) == \"string\" then\r\n    f = assert(io.open(f))\r\n    function base:on_eof() f:close() end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "f = assert(io.open(f))",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "function base:on_eof() f:close() end",
    "type": "statement:globalfunction"
  }, {
    "id": 52,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "base.file = f",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "base.getmore = file_getmore",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function base:on_eof() f:close() end",
    "type": "function"
  }, {
    "id": 57,
    "text": "function Public.parsestring(s)\r\n  local base = parsebase()\r\n  base.string = s\r\n  base.getmore = string_getmore\r\n  base.string_offset = 1\r\n  return base\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "base.string = s",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "base.getmore = string_getmore",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "base.string_offset = 1",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function methods:getnext()\r\n  local pos = self.next\r\n  if pos > self.n then\r\n    self:getmore()\r\n    return self:getnext()\r\n  end\r\n  local evt = self[pos]\r\n  self[pos] = nil\r\n  self.next = pos + 1\r\n  return unpack(evt)\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "local pos = self.next",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "if pos > self.n then\r\n    self:getmore()\r\n    return self:getnext()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "self:getmore()",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "local evt = self[pos]",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "self[pos] = nil",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "self.next = pos + 1",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function methods:consumenext()\r\n  local pos = self.next\r\n  if pos > self.n then\r\n    self:getmore()\r\n    return self:consumenext()\r\n  end\r\n  self[pos] = nil\r\n  self.next = pos + 1\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "if pos > self.n then\r\n    self:getmore()\r\n    return self:consumenext()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function methods:peeknext()\r\n  local pos = self.next\r\n  if pos > self.n then\r\n    self:getmore()\r\n    return self:peeknext()\r\n  end\r\n  local evt = self[pos]\r\n  return unpack(evt)\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "if pos > self.n then\r\n    self:getmore()\r\n    return self:peeknext()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "",
    "type": "function container"
  }, {
    "id": 77,
    "text": "new",
    "type": "global function"
  }, {
    "id": 78,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 79,
    "text": "open",
    "type": "global function"
  }, {
    "id": 80,
    "text": "error",
    "type": "global function"
  }, {
    "id": 81,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 82,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 83,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 84,
    "text": "require",
    "type": "global function"
  }, {
    "id": 85,
    "text": "tinsert",
    "type": "global function"
  }, {
    "id": 86,
    "text": "type",
    "type": "global function"
  }, {
    "id": 87,
    "text": "",
    "type": "global variable"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "local variable"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "variable container"
  }, {
    "id": 93,
    "text": "",
    "type": "require container"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "n/a"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "n/a"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 104,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 105,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 106,
    "text": "",
    "type": "local variable"
  }, {
    "id": 107,
    "text": "",
    "type": "string"
  }, {
    "id": 108,
    "text": "",
    "type": "local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "string"
  }, {
    "id": 110,
    "text": "",
    "type": "local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "string"
  }, {
    "id": 112,
    "text": "",
    "type": "local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "string"
  }, {
    "id": 114,
    "text": "",
    "type": "local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "number"
  }, {
    "id": 116,
    "text": "",
    "type": "global variable"
  }, {
    "id": 117,
    "text": "",
    "type": "n/a"
  }, {
    "id": 118,
    "text": "",
    "type": "global variable"
  }, {
    "id": 119,
    "text": "",
    "type": "n/a"
  }, {
    "id": 120,
    "text": "",
    "type": "global variable"
  }, {
    "id": 121,
    "text": "",
    "type": "n/a"
  }, {
    "id": 122,
    "text": "",
    "type": "global variable"
  }, {
    "id": 123,
    "text": "",
    "type": "n/a"
  }, {
    "id": 124,
    "text": "",
    "type": "global variable"
  }, {
    "id": 125,
    "text": "",
    "type": "n/a"
  }, {
    "id": 126,
    "text": "",
    "type": "local variable"
  }, {
    "id": 127,
    "text": "",
    "type": "local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "local variable"
  } ]
}