{
  "_filename": "traces.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lazykit/examples/traces.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 7,
    "label": "has",
    "to": 13
  }, {
    "from": 7,
    "label": "has",
    "to": 14
  }, {
    "from": 7,
    "label": "has",
    "to": 15
  }, {
    "from": 7,
    "label": "has",
    "to": 16
  }, {
    "from": 6,
    "label": "has",
    "to": 17
  }, {
    "from": 6,
    "label": "has",
    "to": 18
  }, {
    "from": 6,
    "label": "has",
    "to": 19
  }, {
    "from": 6,
    "label": "has",
    "to": 20
  }, {
    "from": 6,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 23
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 24
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 24
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 33,
    "label": "has",
    "to": 9
  }, {
    "from": 34,
    "label": "has",
    "to": 10
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 11
  }, {
    "from": 37,
    "label": "has",
    "to": 12
  }, {
    "from": 38,
    "label": "has",
    "to": 13
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 14
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 15
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 16
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "calls",
    "to": 56
  }, {
    "from": 2,
    "label": "calls",
    "to": 51
  }, {
    "from": 46,
    "label": "calls",
    "to": 52
  }, {
    "from": 22,
    "label": "calls",
    "to": 48
  }, {
    "from": 26,
    "label": "calls",
    "to": 48
  }, {
    "from": 46,
    "label": "calls",
    "to": 57
  }, {
    "from": 46,
    "label": "calls",
    "to": 54
  }, {
    "from": 46,
    "label": "calls",
    "to": 54
  }, {
    "from": 46,
    "label": "calls",
    "to": 54
  }, {
    "from": 6,
    "label": "calls",
    "to": 58
  }, {
    "from": 46,
    "label": "calls",
    "to": 58
  }, {
    "from": 6,
    "label": "calls",
    "to": 53
  }, {
    "from": 26,
    "label": "calls",
    "to": 47
  }, {
    "from": 6,
    "label": "calls",
    "to": 49
  }, {
    "from": 46,
    "label": "calls",
    "to": 55
  }, {
    "from": 46,
    "label": "calls",
    "to": 50
  }, {
    "from": 29,
    "label": "calls",
    "to": 48
  }, {
    "from": 46,
    "label": "calls",
    "to": 59
  }, {
    "from": 46,
    "label": "calls",
    "to": 59
  }, {
    "from": 46,
    "label": "calls",
    "to": 59
  }, {
    "from": 46,
    "label": "calls",
    "to": 59
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 22,
    "label": "calls",
    "to": 6
  }, {
    "from": 26,
    "label": "calls",
    "to": 6
  }, {
    "from": 29,
    "label": "calls",
    "to": 6
  }, {
    "from": 1,
    "label": "contains",
    "to": 46
  }, {
    "from": 46,
    "label": "declares",
    "to": 2
  }, {
    "from": 46,
    "label": "declares",
    "to": 6
  }, {
    "from": 46,
    "label": "declares",
    "to": 22
  }, {
    "from": 46,
    "label": "declares",
    "to": 26
  }, {
    "from": 46,
    "label": "declares",
    "to": 29
  }, {
    "from": 46,
    "label": "declares",
    "to": 32
  }, {
    "from": 46,
    "label": "declares",
    "to": 33
  }, {
    "from": 46,
    "label": "declares",
    "to": 34
  }, {
    "from": 46,
    "label": "declares",
    "to": 36
  }, {
    "from": 46,
    "label": "declares",
    "to": 37
  }, {
    "from": 46,
    "label": "declares",
    "to": 38
  }, {
    "from": 46,
    "label": "declares",
    "to": 40
  }, {
    "from": 46,
    "label": "declares",
    "to": 42
  }, {
    "from": 46,
    "label": "declares",
    "to": 44
  }, {
    "from": 1,
    "label": "contains",
    "to": 61
  }, {
    "from": 1,
    "label": "contains",
    "to": 62
  }, {
    "from": 61,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "assigns",
    "to": 64
  }, {
    "from": 61,
    "label": "initializes",
    "to": 65
  }, {
    "from": 65,
    "label": "assigns",
    "to": 66
  }, {
    "from": 61,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  }, {
    "from": 62,
    "label": "initializes",
    "to": 60
  }, {
    "from": 62,
    "label": "initializes",
    "to": 60
  }, {
    "from": 62,
    "label": "initializes",
    "to": 60
  }, {
    "from": 62,
    "label": "initializes",
    "to": 60
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "traces",
    "type": "module"
  }, {
    "id": 2,
    "text": "function print_sep(...)\r\n  out:write(table.concat(arg, \" \"))\r\n  out:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "out:write(table.concat(arg, \" \"))",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "out:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function process_net(lz)\r\n  local ftable = \r\n    {\r\n    HEADER=function (lz) out:write(lz[1]) end;\r\n    UNITS=function (lz) print_sep(\"UNITS\", lz.attr.val) end;\r\n    STFIRST=function (lz) print_sep(\"ST\", lz.attr.maxx,\r\n      lz.attr.maxy, lz.attr.maxroute, lz.attr.numconn) end;\r\n    XRF=function (lz) print_sep(\"XRF \", lz.attr.num, lz.attr.name) end;\r\n    NET={\r\n      [0]=function (lz) print_sep(\"# NET\",  \"'\"..lz.attr.name..\"'\") end;\r\n      WIR={\r\n        [0]=function (lz) print_sep(\"WIR\", lz.attr.numseg, lz.attr.startx,\r\n          lz.attr.starty, lz.attr.termx, lz.attr.termy, lz.attr.optgroup) end;\r\n        SEG=function (lz) print_sep(\"SEG\", lz.attr.x, lz.attr.y,\r\n          lz.attr.lay, lz.attr.width) end\r\n      };\r\n      GUI=function (lz) print_sep(\"GUI\", lz.attr.startx, lz.attr.starty,\r\n        lz.attr.startlay, lz.attr.termx, lz.attr.termy, lz.attr.termlay,\r\n        lz.attr.optgroup) end\r\n    };\r\n    STLAST=function (lz)\r\n      print_sep(\"ST\", lz.attr.checkstat, lz.attr.numcomplete,\r\n        lz.attr.numinc, lz.attr.numunroute, lz.attr.numnotrace, \r\n        lz.attr.numfill) end\r\n  }\r\n  xmliter.switch_c(lz, ftable)\r\n  local dump = assert(io.open(\"lazy.out\", \"w\"))\r\n  dump:write(out:getstring())\r\n  dump:close()\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local ftable = \r\n    {\r\n    HEADER=function (lz) out:write(lz[1]) end;\r\n    UNITS=function (lz) print_sep(\"UNITS\", lz.attr.val) end;\r\n    STFIRST=function (lz) print_sep(\"ST\", lz.attr.maxx,\r\n      lz.attr.maxy, lz.attr.maxroute, lz.attr.numconn) end;\r\n    XRF=function (lz) print_sep(\"XRF \", lz.attr.num, lz.attr.name) end;\r\n    NET={\r\n      [0]=function (lz) print_sep(\"# NET\",  \"'\"..lz.attr.name..\"'\") end;\r\n      WIR={\r\n        [0]=function (lz) print_sep(\"WIR\", lz.attr.numseg, lz.attr.startx,\r\n          lz.attr.starty, lz.attr.termx, lz.attr.termy, lz.attr.optgroup) end;\r\n        SEG=function (lz) print_sep(\"SEG\", lz.attr.x, lz.attr.y,\r\n          lz.attr.lay, lz.attr.width) end\r\n      };\r\n      GUI=function (lz) print_sep(\"GUI\", lz.attr.startx, lz.attr.starty,\r\n        lz.attr.startlay, lz.attr.termx, lz.attr.termy, lz.attr.termlay,\r\n        lz.attr.optgroup) end\r\n    };\r\n    STLAST=function (lz)\r\n      print_sep(\"ST\", lz.attr.checkstat, lz.attr.numcomplete,\r\n        lz.attr.numinc, lz.attr.numunroute, lz.attr.numnotrace, \r\n        lz.attr.numfill) end\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "out:write(lz[1])",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "print_sep(\"UNITS\", lz.attr.val)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "print_sep(\"ST\", lz.attr.maxx,\r\n      lz.attr.maxy, lz.attr.maxroute, lz.attr.numconn)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "print_sep(\"XRF \", lz.attr.num, lz.attr.name)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "print_sep(\"# NET\",  \"'\"..lz.attr.name..\"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "print_sep(\"WIR\", lz.attr.numseg, lz.attr.startx,\r\n          lz.attr.starty, lz.attr.termx, lz.attr.termy, lz.attr.optgroup)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "print_sep(\"SEG\", lz.attr.x, lz.attr.y,\r\n          lz.attr.lay, lz.attr.width)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "print_sep(\"GUI\", lz.attr.startx, lz.attr.starty,\r\n        lz.attr.startlay, lz.attr.termx, lz.attr.termy, lz.attr.termlay,\r\n        lz.attr.optgroup)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "print_sep(\"ST\", lz.attr.checkstat, lz.attr.numcomplete,\r\n        lz.attr.numinc, lz.attr.numunroute, lz.attr.numnotrace, \r\n        lz.attr.numfill)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "xmliter.switch_c(lz, ftable)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "local dump = assert(io.open(\"lazy.out\", \"w\"))",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "dump:write(out:getstring())",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "dump:close()",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function doit_lazy()\r\n  l0 = lazytree.parsefile(\"traces.xml\")\r\n  -- print(l0.n)\r\n  -- l0 = lxptree.parsefile(\"traces.xml\")\r\n  -- collectgarbage(0)\r\n  process_net(l0)\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "l0 = lazytree.parsefile(\"traces.xml\")",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "process_net(l0)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function doit_lazy2()\r\n  l0 = lazytree.parsefile(\"traces.xml\")\r\n  lazytree.load(l0)\r\n  process_net(l0)\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "lazytree.load(l0)",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function doit_lxp()\r\n  l0 = lxptree.parsefile(\"traces.xml\")\r\n  process_net(l0)\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "l0 = lxptree.parsefile(\"traces.xml\")",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function (lz) out:write(lz[1]) end",
    "type": "function"
  }, {
    "id": 33,
    "text": "function (lz) print_sep(\"UNITS\", lz.attr.val) end",
    "type": "function"
  }, {
    "id": 34,
    "text": "function (lz) print_sep(\"ST\", lz.attr.maxx,\r\n      lz.attr.maxy, lz.attr.maxroute, lz.attr.numconn) end",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function (lz) print_sep(\"XRF \", lz.attr.num, lz.attr.name) end",
    "type": "function"
  }, {
    "id": 37,
    "text": "function (lz) print_sep(\"# NET\",  \"'\"..lz.attr.name..\"'\") end",
    "type": "function"
  }, {
    "id": 38,
    "text": "function (lz) print_sep(\"WIR\", lz.attr.numseg, lz.attr.startx,\r\n          lz.attr.starty, lz.attr.termx, lz.attr.termy, lz.attr.optgroup) end",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function (lz) print_sep(\"SEG\", lz.attr.x, lz.attr.y,\r\n          lz.attr.lay, lz.attr.width) end",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function (lz) print_sep(\"GUI\", lz.attr.startx, lz.attr.starty,\r\n        lz.attr.startlay, lz.attr.termx, lz.attr.termy, lz.attr.termlay,\r\n        lz.attr.optgroup) end",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function (lz)\r\n      print_sep(\"ST\", lz.attr.checkstat, lz.attr.numcomplete,\r\n        lz.attr.numinc, lz.attr.numunroute, lz.attr.numnotrace, \r\n        lz.attr.numfill) end",
    "type": "function"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "",
    "type": "function container"
  }, {
    "id": 47,
    "text": "local\r\nfunction load(lz)\r\n  local n = lz.n\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local\r\nfunction parsefile(f)\r\n  local s\r\n  if type(f) == \"string\" then\r\n    f = assert(io.open(f))\r\n    s = f:read(\"*a\")\r\n    assert(f:close())\r\n  else\r\n    s = f:read(\"*a\")\r\n  end\r\n  return parsestring(s)\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local\r\nfunction switch_c(lz, ftable, opts)\r\n  local consume = (lazytree and lazytree.consume) or nil\r\n  opts = opts or emptyopts\r\n  local parent = opts.parent\r\n  return switch_internal(lz, ftable, parent, xpairs_c, opts, consume)\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "newoutput",
    "type": "global function"
  }, {
    "id": 51,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 52,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 53,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 54,
    "text": "print",
    "type": "global function"
  }, {
    "id": 55,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 56,
    "text": "ft[strategyname]",
    "type": "global function"
  }, {
    "id": 57,
    "text": "clock",
    "type": "global function"
  }, {
    "id": 58,
    "text": "open",
    "type": "global function"
  }, {
    "id": 59,
    "text": "require",
    "type": "global function"
  }, {
    "id": 60,
    "text": "",
    "type": "global variable"
  }, {
    "id": 61,
    "text": "",
    "type": "variable container"
  }, {
    "id": 62,
    "text": "",
    "type": "require container"
  }, {
    "id": 63,
    "text": "",
    "type": "local variable"
  }, {
    "id": 64,
    "text": "",
    "type": "n/a"
  }, {
    "id": 65,
    "text": "",
    "type": "global variable"
  }, {
    "id": 66,
    "text": "",
    "type": "n/a"
  }, {
    "id": 67,
    "text": "",
    "type": "global variable"
  }, {
    "id": 68,
    "text": "",
    "type": "n/a"
  } ]
}