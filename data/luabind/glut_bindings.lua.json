{
  "_filename": "glut_bindings.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luabind/examples/glut/glut_bindings.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 11,
    "label": "has",
    "to": 17
  }, {
    "from": 11,
    "label": "has",
    "to": 18
  }, {
    "from": 11,
    "label": "has",
    "to": 19
  }, {
    "from": 11,
    "label": "has",
    "to": 20
  }, {
    "from": 11,
    "label": "has",
    "to": 21
  }, {
    "from": 11,
    "label": "has",
    "to": 22
  }, {
    "from": 11,
    "label": "has",
    "to": 23
  }, {
    "from": 11,
    "label": "has",
    "to": 24
  }, {
    "from": 11,
    "label": "has",
    "to": 25
  }, {
    "from": 11,
    "label": "has",
    "to": 26
  }, {
    "from": 11,
    "label": "has",
    "to": 27
  }, {
    "from": 11,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 11,
    "label": "has",
    "to": 31
  }, {
    "from": 11,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 64
  }, {
    "from": 2,
    "label": "calls",
    "to": 52
  }, {
    "from": 2,
    "label": "calls",
    "to": 52
  }, {
    "from": 11,
    "label": "calls",
    "to": 42
  }, {
    "from": 39,
    "label": "calls",
    "to": 57
  }, {
    "from": 39,
    "label": "calls",
    "to": 43
  }, {
    "from": 11,
    "label": "calls",
    "to": 44
  }, {
    "from": 11,
    "label": "calls",
    "to": 41
  }, {
    "from": 11,
    "label": "calls",
    "to": 48
  }, {
    "from": 11,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 62
  }, {
    "from": 11,
    "label": "calls",
    "to": 61
  }, {
    "from": 11,
    "label": "calls",
    "to": 61
  }, {
    "from": 11,
    "label": "calls",
    "to": 61
  }, {
    "from": 39,
    "label": "calls",
    "to": 61
  }, {
    "from": 11,
    "label": "calls",
    "to": 50
  }, {
    "from": 11,
    "label": "calls",
    "to": 46
  }, {
    "from": 11,
    "label": "calls",
    "to": 63
  }, {
    "from": 39,
    "label": "calls",
    "to": 47
  }, {
    "from": 2,
    "label": "calls",
    "to": 60
  }, {
    "from": 11,
    "label": "calls",
    "to": 60
  }, {
    "from": 33,
    "label": "calls",
    "to": 60
  }, {
    "from": 39,
    "label": "calls",
    "to": 45
  }, {
    "from": 11,
    "label": "calls",
    "to": 59
  }, {
    "from": 33,
    "label": "calls",
    "to": 58
  }, {
    "from": 39,
    "label": "calls",
    "to": 2
  }, {
    "from": 39,
    "label": "calls",
    "to": 49
  }, {
    "from": 11,
    "label": "calls",
    "to": 56
  }, {
    "from": 39,
    "label": "calls",
    "to": 55
  }, {
    "from": 39,
    "label": "calls",
    "to": 54
  }, {
    "from": 39,
    "label": "calls",
    "to": 53
  }, {
    "from": 2,
    "label": "calls",
    "to": 51
  }, {
    "from": 1,
    "label": "contains",
    "to": 39
  }, {
    "from": 39,
    "label": "declares",
    "to": 2
  }, {
    "from": 39,
    "label": "declares",
    "to": 11
  }, {
    "from": 39,
    "label": "declares",
    "to": 33
  }, {
    "from": 1,
    "label": "contains",
    "to": 65
  }, {
    "from": 1,
    "label": "contains",
    "to": 66
  }, {
    "from": 65,
    "label": "initializes",
    "to": 67
  }, {
    "from": 65,
    "label": "initializes",
    "to": 68
  }, {
    "from": 65,
    "label": "initializes",
    "to": 69
  }, {
    "from": 65,
    "label": "initializes",
    "to": 70
  }, {
    "from": 65,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 65,
    "label": "initializes",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 65,
    "label": "initializes",
    "to": 75
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "glut_bindings",
    "type": "module"
  }, {
    "id": 2,
    "text": "function resize_func(w, h)\r\n\tlocal ratio = w / h\r\n\r\n\tprint('====== resize')\r\n\r\n\tglMatrixMode(gl.PROJECTION)\r\n\tglLoadIdentity()\r\n\r\n\tglViewport(0,0,w,h)\r\n\r\n\tgluPerspective(45,ratio,1,1000)\r\n\r\n\tglMatrixMode(gl.MODELVIEW)\r\n\tglLoadIdentity()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local ratio = w / h",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "print('====== resize')",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "glMatrixMode(gl.PROJECTION)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "glLoadIdentity()",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "glViewport(0,0,w,h)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "gluPerspective(45,ratio,1,1000)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "glMatrixMode(gl.MODELVIEW)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function display_func()\r\n\r\n\tif quit then return end\r\n\r\n\tlocal cur_time = glutGet(glut.ELAPSED_TIME)\r\n\tlocal delta = (cur_time - previous_time) / 1000\r\n\tprevious_time = cur_time\r\n\r\n\tglClear(gl.COLOR_BUFFER_BIT + gl.DEPTH_BUFFER_BIT)\r\n\r\n\tglPushMatrix()\r\n\r\n\tglTranslate(0,0,-5)\r\n\tglRotate(angle, 0, 1, 0)\r\n\tglRotate(angle2, 0, 0, 1)\r\n\tglColor3(1,0,0)\r\n--\tglutWireSphere(0.75, 10, 10)\r\n\tglutSolidTeapot(0.75)\r\n--\tglColor3(1,1,1)\r\n--\tglutWireTeapot(0.75)\r\n\r\n\tglPopMatrix()\r\n\r\n\tangle = angle + 200 * delta\r\n\tangle2 = angle2 + 170 * delta\r\n\r\n\tframes = frames + 1\r\n\r\n\tif math.mod(frames, 100) == 0 then\r\n\t\tlocal fps = frames * 1000 / (glutGet(glut.ELAPSED_TIME) - start_time);\r\n\t\tprint('fps: ' .. fps .. ' time: ' .. glutGet(glut.ELAPSED_TIME) .. ' frames: ' .. frames)\r\n\tend\r\n\r\n\tglutSwapBuffers()\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "if quit then return end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 14,
    "text": "local cur_time = glutGet(glut.ELAPSED_TIME)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local delta = (cur_time - previous_time) / 1000",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "previous_time = cur_time",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "glClear(gl.COLOR_BUFFER_BIT + gl.DEPTH_BUFFER_BIT)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "glPushMatrix()",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "glTranslate(0,0,-5)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "glRotate(angle, 0, 1, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "glRotate(angle2, 0, 0, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "glColor3(1,0,0)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "glutSolidTeapot(0.75)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "glPopMatrix()",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "angle = angle + 200 * delta",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "angle2 = angle2 + 170 * delta",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "frames = frames + 1",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "if math.mod(frames, 100) == 0 then\r\n\t\tlocal fps = frames * 1000 / (glutGet(glut.ELAPSED_TIME) - start_time);\r\n\t\tprint('fps: ' .. fps .. ' time: ' .. glutGet(glut.ELAPSED_TIME) .. ' frames: ' .. frames)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "local fps = frames * 1000 / (glutGet(glut.ELAPSED_TIME) - start_time)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "print('fps: ' .. fps .. ' time: ' .. glutGet(glut.ELAPSED_TIME) .. ' frames: ' .. frames)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "glutSwapBuffers()",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function keyboard_func(key,x,y)\r\n\tprint('keyboard' .. key)\r\n\tif key == 27 then glutDestroyWindow(window) quit = true end\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "print('keyboard' .. key)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "if key == 27 then glutDestroyWindow(window) quit = true end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "glutDestroyWindow(window)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "quit = true",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "",
    "type": "function container"
  }, {
    "id": 40,
    "text": "glutInitWindowPosition",
    "type": "global function"
  }, {
    "id": 41,
    "text": "mod",
    "type": "global function"
  }, {
    "id": 42,
    "text": "glPushMatrix",
    "type": "global function"
  }, {
    "id": 43,
    "text": "glutMainLoop",
    "type": "global function"
  }, {
    "id": 44,
    "text": "glutSwapBuffers",
    "type": "global function"
  }, {
    "id": 45,
    "text": "glutKeyboardFunc",
    "type": "global function"
  }, {
    "id": 46,
    "text": "glColor3",
    "type": "global function"
  }, {
    "id": 47,
    "text": "glutIdleFunc",
    "type": "global function"
  }, {
    "id": 48,
    "text": "glRotate",
    "type": "global function"
  }, {
    "id": 49,
    "text": "glutReshapeFunc",
    "type": "global function"
  }, {
    "id": 50,
    "text": "glTranslate",
    "type": "global function"
  }, {
    "id": 51,
    "text": "gluPerspective",
    "type": "global function"
  }, {
    "id": 52,
    "text": "glMatrixMode",
    "type": "global function"
  }, {
    "id": 53,
    "text": "glutInitDisplayMode",
    "type": "global function"
  }, {
    "id": 54,
    "text": "glutCreateWindow",
    "type": "global function"
  }, {
    "id": 55,
    "text": "glutDisplayFunc",
    "type": "global function"
  }, {
    "id": 56,
    "text": "glClear",
    "type": "global function"
  }, {
    "id": 57,
    "text": "glutInitWindowSize",
    "type": "global function"
  }, {
    "id": 58,
    "text": "glutDestroyWindow",
    "type": "global function"
  }, {
    "id": 59,
    "text": "glutSolidTeapot",
    "type": "global function"
  }, {
    "id": 60,
    "text": "print",
    "type": "global function"
  }, {
    "id": 61,
    "text": "glutGet",
    "type": "global function"
  }, {
    "id": 62,
    "text": "glViewport",
    "type": "global function"
  }, {
    "id": 63,
    "text": "glPopMatrix",
    "type": "global function"
  }, {
    "id": 64,
    "text": "glLoadIdentity",
    "type": "global function"
  }, {
    "id": 65,
    "text": "",
    "type": "variable container"
  }, {
    "id": 66,
    "text": "",
    "type": "require container"
  }, {
    "id": 67,
    "text": "",
    "type": "global variable"
  }, {
    "id": 68,
    "text": "",
    "type": "global variable"
  }, {
    "id": 69,
    "text": "",
    "type": "global variable"
  }, {
    "id": 70,
    "text": "",
    "type": "global variable"
  }, {
    "id": 71,
    "text": "",
    "type": "global variable"
  }, {
    "id": 72,
    "text": "",
    "type": "n/a"
  }, {
    "id": 73,
    "text": "",
    "type": "global variable"
  }, {
    "id": 74,
    "text": "",
    "type": "n/a"
  }, {
    "id": 75,
    "text": "",
    "type": "global variable"
  } ]
}