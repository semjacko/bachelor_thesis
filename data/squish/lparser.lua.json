{
  "_filename": "lparser.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/squish/minify/lparser.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 12
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 27
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 27
  }, {
    "from": 46,
    "label": "has",
    "to": 12
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 57,
    "label": "has",
    "to": 63
  }, {
    "from": 57,
    "label": "has",
    "to": 64
  }, {
    "from": 57,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 57,
    "label": "has",
    "to": 67
  }, {
    "from": 57,
    "label": "has",
    "to": 68
  }, {
    "from": 57,
    "label": "has",
    "to": 69
  }, {
    "from": 57,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 73,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 73,
    "label": "has",
    "to": 79
  }, {
    "from": 73,
    "label": "has",
    "to": 80
  }, {
    "from": 73,
    "label": "has",
    "to": 81
  }, {
    "from": 73,
    "label": "has",
    "to": 82
  }, {
    "from": 73,
    "label": "has",
    "to": 83
  }, {
    "from": 73,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 73,
    "label": "has",
    "to": 87
  }, {
    "from": 71,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 58
  }, {
    "from": 89,
    "label": "has",
    "to": 59
  }, {
    "from": 89,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 77
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 12
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 58
  }, {
    "from": 97,
    "label": "has",
    "to": 59
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 61
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 97,
    "label": "has",
    "to": 12
  }, {
    "from": 97,
    "label": "has",
    "to": 62
  }, {
    "from": 97,
    "label": "has",
    "to": 12
  }, {
    "from": 97,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 108,
    "label": "has",
    "to": 111
  }, {
    "from": 108,
    "label": "has",
    "to": 112
  }, {
    "from": 104,
    "label": "has",
    "to": 12
  }, {
    "from": 104,
    "label": "has",
    "to": 12
  }, {
    "from": 104,
    "label": "has",
    "to": 12
  }, {
    "from": 104,
    "label": "has",
    "to": 12
  }, {
    "from": 104,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 114,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 119,
    "label": "has",
    "to": 123
  }, {
    "from": 119,
    "label": "has",
    "to": 124
  }, {
    "from": 117,
    "label": "has",
    "to": 125
  }, {
    "from": 117,
    "label": "has",
    "to": 126
  }, {
    "from": 117,
    "label": "has",
    "to": 124
  }, {
    "from": 114,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 128,
    "label": "has",
    "to": 131
  }, {
    "from": 128,
    "label": "has",
    "to": 132
  }, {
    "from": 128,
    "label": "has",
    "to": 133
  }, {
    "from": 128,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 58
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 135,
    "label": "has",
    "to": 137
  }, {
    "from": 135,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 139,
    "label": "has",
    "to": 144
  }, {
    "from": 139,
    "label": "has",
    "to": 145
  }, {
    "from": 139,
    "label": "has",
    "to": 146
  }, {
    "from": 139,
    "label": "has",
    "to": 147
  }, {
    "from": 139,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 136
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 27
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 152,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 27
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 154
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 161,
    "label": "has",
    "to": 165
  }, {
    "from": 161,
    "label": "has",
    "to": 166
  }, {
    "from": 161,
    "label": "has",
    "to": 167
  }, {
    "from": 168,
    "label": "has",
    "to": 169
  }, {
    "from": 168,
    "label": "has",
    "to": 12
  }, {
    "from": 168,
    "label": "has",
    "to": 170
  }, {
    "from": 168,
    "label": "has",
    "to": 171
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 175,
    "label": "has",
    "to": 176
  }, {
    "from": 175,
    "label": "has",
    "to": 177
  }, {
    "from": 175,
    "label": "has",
    "to": 178
  }, {
    "from": 175,
    "label": "has",
    "to": 179
  }, {
    "from": 175,
    "label": "has",
    "to": 180
  }, {
    "from": 175,
    "label": "has",
    "to": 170
  }, {
    "from": 175,
    "label": "has",
    "to": 181
  }, {
    "from": 175,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 182,
    "label": "has",
    "to": 184
  }, {
    "from": 182,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 186,
    "label": "has",
    "to": 187
  }, {
    "from": 186,
    "label": "has",
    "to": 188
  }, {
    "from": 185,
    "label": "has",
    "to": 188
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 175,
    "label": "has",
    "to": 189
  }, {
    "from": 175,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 184
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 195,
    "label": "has",
    "to": 197
  }, {
    "from": 195,
    "label": "has",
    "to": 27
  }, {
    "from": 195,
    "label": "has",
    "to": 198
  }, {
    "from": 195,
    "label": "has",
    "to": 199
  }, {
    "from": 191,
    "label": "has",
    "to": 200
  }, {
    "from": 191,
    "label": "has",
    "to": 201
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 176
  }, {
    "from": 202,
    "label": "has",
    "to": 184
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 204,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 204,
    "label": "has",
    "to": 27
  }, {
    "from": 204,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 207,
    "label": "has",
    "to": 209
  }, {
    "from": 204,
    "label": "has",
    "to": 210
  }, {
    "from": 204,
    "label": "has",
    "to": 211
  }, {
    "from": 204,
    "label": "has",
    "to": 212
  }, {
    "from": 204,
    "label": "has",
    "to": 27
  }, {
    "from": 204,
    "label": "has",
    "to": 213
  }, {
    "from": 202,
    "label": "has",
    "to": 12
  }, {
    "from": 202,
    "label": "has",
    "to": 214
  }, {
    "from": 202,
    "label": "has",
    "to": 215
  }, {
    "from": 216,
    "label": "has",
    "to": 184
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 217,
    "label": "has",
    "to": 176
  }, {
    "from": 217,
    "label": "has",
    "to": 27
  }, {
    "from": 217,
    "label": "has",
    "to": 158
  }, {
    "from": 217,
    "label": "has",
    "to": 210
  }, {
    "from": 217,
    "label": "has",
    "to": 218
  }, {
    "from": 217,
    "label": "has",
    "to": 219
  }, {
    "from": 216,
    "label": "has",
    "to": 220
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 221,
    "label": "has",
    "to": 223
  }, {
    "from": 223,
    "label": "has",
    "to": 184
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 224,
    "label": "has",
    "to": 153
  }, {
    "from": 224,
    "label": "has",
    "to": 164
  }, {
    "from": 224,
    "label": "has",
    "to": 153
  }, {
    "from": 224,
    "label": "has",
    "to": 27
  }, {
    "from": 224,
    "label": "has",
    "to": 154
  }, {
    "from": 224,
    "label": "has",
    "to": 226
  }, {
    "from": 224,
    "label": "has",
    "to": 226
  }, {
    "from": 221,
    "label": "has",
    "to": 12
  }, {
    "from": 221,
    "label": "has",
    "to": 227
  }, {
    "from": 228,
    "label": "has",
    "to": 184
  }, {
    "from": 228,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 229,
    "label": "has",
    "to": 231
  }, {
    "from": 229,
    "label": "has",
    "to": 232
  }, {
    "from": 229,
    "label": "has",
    "to": 233
  }, {
    "from": 229,
    "label": "has",
    "to": 234
  }, {
    "from": 229,
    "label": "has",
    "to": 235
  }, {
    "from": 229,
    "label": "has",
    "to": 236
  }, {
    "from": 229,
    "label": "has",
    "to": 237
  }, {
    "from": 229,
    "label": "has",
    "to": 27
  }, {
    "from": 229,
    "label": "has",
    "to": 238
  }, {
    "from": 229,
    "label": "has",
    "to": 239
  }, {
    "from": 228,
    "label": "has",
    "to": 12
  }, {
    "from": 228,
    "label": "has",
    "to": 12
  }, {
    "from": 228,
    "label": "has",
    "to": 12
  }, {
    "from": 228,
    "label": "has",
    "to": 27
  }, {
    "from": 228,
    "label": "has",
    "to": 240
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 241,
    "label": "has",
    "to": 244
  }, {
    "from": 244,
    "label": "has",
    "to": 27
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 244,
    "label": "has",
    "to": 246
  }, {
    "from": 241,
    "label": "has",
    "to": 247
  }, {
    "from": 241,
    "label": "has",
    "to": 248
  }, {
    "from": 241,
    "label": "has",
    "to": 249
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 249,
    "label": "has",
    "to": 27
  }, {
    "from": 249,
    "label": "has",
    "to": 251
  }, {
    "from": 249,
    "label": "has",
    "to": 252
  }, {
    "from": 249,
    "label": "has",
    "to": 253
  }, {
    "from": 241,
    "label": "has",
    "to": 12
  }, {
    "from": 241,
    "label": "has",
    "to": 254
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 255,
    "label": "has",
    "to": 257
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 258,
    "label": "has",
    "to": 260
  }, {
    "from": 258,
    "label": "has",
    "to": 261
  }, {
    "from": 258,
    "label": "has",
    "to": 262
  }, {
    "from": 262,
    "label": "has",
    "to": 263
  }, {
    "from": 262,
    "label": "has",
    "to": 264
  }, {
    "from": 262,
    "label": "has",
    "to": 265
  }, {
    "from": 262,
    "label": "has",
    "to": 266
  }, {
    "from": 262,
    "label": "has",
    "to": 165
  }, {
    "from": 262,
    "label": "has",
    "to": 267
  }, {
    "from": 258,
    "label": "has",
    "to": 12
  }, {
    "from": 258,
    "label": "has",
    "to": 268
  }, {
    "from": 258,
    "label": "has",
    "to": 269
  }, {
    "from": 270,
    "label": "has",
    "to": 271
  }, {
    "from": 270,
    "label": "has",
    "to": 272
  }, {
    "from": 270,
    "label": "has",
    "to": 273
  }, {
    "from": 270,
    "label": "has",
    "to": 274
  }, {
    "from": 270,
    "label": "has",
    "to": 275
  }, {
    "from": 270,
    "label": "has",
    "to": 276
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 277,
    "label": "has",
    "to": 279
  }, {
    "from": 277,
    "label": "has",
    "to": 280
  }, {
    "from": 277,
    "label": "has",
    "to": 281
  }, {
    "from": 277,
    "label": "has",
    "to": 282
  }, {
    "from": 277,
    "label": "has",
    "to": 165
  }, {
    "from": 277,
    "label": "has",
    "to": 283
  }, {
    "from": 277,
    "label": "has",
    "to": 284
  }, {
    "from": 277,
    "label": "has",
    "to": 283
  }, {
    "from": 277,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 283
  }, {
    "from": 277,
    "label": "has",
    "to": 286
  }, {
    "from": 277,
    "label": "has",
    "to": 287
  }, {
    "from": 288,
    "label": "has",
    "to": 259
  }, {
    "from": 288,
    "label": "has",
    "to": 289
  }, {
    "from": 288,
    "label": "has",
    "to": 290
  }, {
    "from": 288,
    "label": "has",
    "to": 291
  }, {
    "from": 288,
    "label": "has",
    "to": 292
  }, {
    "from": 288,
    "label": "has",
    "to": 293
  }, {
    "from": 288,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 196
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 288,
    "label": "has",
    "to": 296
  }, {
    "from": 288,
    "label": "has",
    "to": 278
  }, {
    "from": 288,
    "label": "has",
    "to": 267
  }, {
    "from": 288,
    "label": "has",
    "to": 297
  }, {
    "from": 288,
    "label": "has",
    "to": 298
  }, {
    "from": 299,
    "label": "has",
    "to": 300
  }, {
    "from": 299,
    "label": "has",
    "to": 218
  }, {
    "from": 299,
    "label": "has",
    "to": 301
  }, {
    "from": 301,
    "label": "has",
    "to": 225
  }, {
    "from": 299,
    "label": "has",
    "to": 302
  }, {
    "from": 302,
    "label": "has",
    "to": 303
  }, {
    "from": 302,
    "label": "has",
    "to": 225
  }, {
    "from": 299,
    "label": "has",
    "to": 12
  }, {
    "from": 299,
    "label": "has",
    "to": 304
  }, {
    "from": 305,
    "label": "has",
    "to": 259
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 305,
    "label": "has",
    "to": 307
  }, {
    "from": 308,
    "label": "has",
    "to": 309
  }, {
    "from": 308,
    "label": "has",
    "to": 158
  }, {
    "from": 308,
    "label": "has",
    "to": 310
  }, {
    "from": 311,
    "label": "has",
    "to": 27
  }, {
    "from": 311,
    "label": "has",
    "to": 312
  }, {
    "from": 311,
    "label": "has",
    "to": 313
  }, {
    "from": 311,
    "label": "has",
    "to": 274
  }, {
    "from": 311,
    "label": "has",
    "to": 314
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 315,
    "label": "has",
    "to": 196
  }, {
    "from": 315,
    "label": "has",
    "to": 317
  }, {
    "from": 315,
    "label": "has",
    "to": 318
  }, {
    "from": 315,
    "label": "has",
    "to": 319
  }, {
    "from": 315,
    "label": "has",
    "to": 320
  }, {
    "from": 321,
    "label": "has",
    "to": 322
  }, {
    "from": 321,
    "label": "has",
    "to": 259
  }, {
    "from": 321,
    "label": "has",
    "to": 323
  }, {
    "from": 323,
    "label": "has",
    "to": 196
  }, {
    "from": 323,
    "label": "has",
    "to": 295
  }, {
    "from": 321,
    "label": "has",
    "to": 324
  }, {
    "from": 324,
    "label": "has",
    "to": 267
  }, {
    "from": 324,
    "label": "has",
    "to": 325
  }, {
    "from": 321,
    "label": "has",
    "to": 273
  }, {
    "from": 321,
    "label": "has",
    "to": 326
  }, {
    "from": 327,
    "label": "has",
    "to": 306
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 328,
    "label": "has",
    "to": 306
  }, {
    "from": 327,
    "label": "has",
    "to": 329
  }, {
    "from": 330,
    "label": "has",
    "to": 331
  }, {
    "from": 330,
    "label": "has",
    "to": 332
  }, {
    "from": 330,
    "label": "has",
    "to": 333
  }, {
    "from": 333,
    "label": "has",
    "to": 334
  }, {
    "from": 333,
    "label": "has",
    "to": 318
  }, {
    "from": 330,
    "label": "has",
    "to": 335
  }, {
    "from": 330,
    "label": "has",
    "to": 336
  }, {
    "from": 330,
    "label": "has",
    "to": 337
  }, {
    "from": 330,
    "label": "has",
    "to": 338
  }, {
    "from": 330,
    "label": "has",
    "to": 339
  }, {
    "from": 330,
    "label": "has",
    "to": 340
  }, {
    "from": 341,
    "label": "has",
    "to": 272
  }, {
    "from": 341,
    "label": "has",
    "to": 337
  }, {
    "from": 341,
    "label": "has",
    "to": 275
  }, {
    "from": 341,
    "label": "has",
    "to": 342
  }, {
    "from": 343,
    "label": "has",
    "to": 278
  }, {
    "from": 343,
    "label": "has",
    "to": 344
  }, {
    "from": 343,
    "label": "has",
    "to": 27
  }, {
    "from": 343,
    "label": "has",
    "to": 345
  }, {
    "from": 343,
    "label": "has",
    "to": 184
  }, {
    "from": 343,
    "label": "has",
    "to": 346
  }, {
    "from": 346,
    "label": "has",
    "to": 347
  }, {
    "from": 346,
    "label": "has",
    "to": 348
  }, {
    "from": 346,
    "label": "has",
    "to": 349
  }, {
    "from": 343,
    "label": "has",
    "to": 350
  }, {
    "from": 343,
    "label": "has",
    "to": 275
  }, {
    "from": 343,
    "label": "has",
    "to": 351
  }, {
    "from": 352,
    "label": "has",
    "to": 278
  }, {
    "from": 352,
    "label": "has",
    "to": 27
  }, {
    "from": 352,
    "label": "has",
    "to": 312
  }, {
    "from": 352,
    "label": "has",
    "to": 344
  }, {
    "from": 352,
    "label": "has",
    "to": 271
  }, {
    "from": 352,
    "label": "has",
    "to": 274
  }, {
    "from": 352,
    "label": "has",
    "to": 353
  }, {
    "from": 352,
    "label": "has",
    "to": 275
  }, {
    "from": 352,
    "label": "has",
    "to": 354
  }, {
    "from": 355,
    "label": "has",
    "to": 278
  }, {
    "from": 355,
    "label": "has",
    "to": 344
  }, {
    "from": 355,
    "label": "has",
    "to": 272
  }, {
    "from": 355,
    "label": "has",
    "to": 27
  }, {
    "from": 355,
    "label": "has",
    "to": 337
  }, {
    "from": 355,
    "label": "has",
    "to": 356
  }, {
    "from": 355,
    "label": "has",
    "to": 312
  }, {
    "from": 355,
    "label": "has",
    "to": 275
  }, {
    "from": 355,
    "label": "has",
    "to": 275
  }, {
    "from": 355,
    "label": "has",
    "to": 357
  }, {
    "from": 358,
    "label": "has",
    "to": 278
  }, {
    "from": 358,
    "label": "has",
    "to": 309
  }, {
    "from": 358,
    "label": "has",
    "to": 359
  }, {
    "from": 358,
    "label": "has",
    "to": 360
  }, {
    "from": 360,
    "label": "has",
    "to": 359
  }, {
    "from": 358,
    "label": "has",
    "to": 361
  }, {
    "from": 361,
    "label": "has",
    "to": 27
  }, {
    "from": 361,
    "label": "has",
    "to": 274
  }, {
    "from": 358,
    "label": "has",
    "to": 362
  }, {
    "from": 358,
    "label": "has",
    "to": 363
  }, {
    "from": 364,
    "label": "has",
    "to": 259
  }, {
    "from": 364,
    "label": "has",
    "to": 27
  }, {
    "from": 364,
    "label": "has",
    "to": 184
  }, {
    "from": 364,
    "label": "has",
    "to": 365
  }, {
    "from": 365,
    "label": "has",
    "to": 267
  }, {
    "from": 364,
    "label": "has",
    "to": 366
  }, {
    "from": 367,
    "label": "has",
    "to": 58
  }, {
    "from": 367,
    "label": "has",
    "to": 27
  }, {
    "from": 367,
    "label": "has",
    "to": 368
  }, {
    "from": 368,
    "label": "has",
    "to": 101
  }, {
    "from": 367,
    "label": "has",
    "to": 369
  }, {
    "from": 369,
    "label": "has",
    "to": 370
  }, {
    "from": 367,
    "label": "has",
    "to": 371
  }, {
    "from": 372,
    "label": "has",
    "to": 309
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 372,
    "label": "has",
    "to": 374
  }, {
    "from": 372,
    "label": "has",
    "to": 375
  }, {
    "from": 375,
    "label": "has",
    "to": 376
  }, {
    "from": 375,
    "label": "has",
    "to": 377
  }, {
    "from": 372,
    "label": "has",
    "to": 378
  }, {
    "from": 379,
    "label": "has",
    "to": 278
  }, {
    "from": 379,
    "label": "has",
    "to": 380
  }, {
    "from": 379,
    "label": "has",
    "to": 27
  }, {
    "from": 379,
    "label": "has",
    "to": 381
  }, {
    "from": 379,
    "label": "has",
    "to": 382
  }, {
    "from": 379,
    "label": "has",
    "to": 383
  }, {
    "from": 384,
    "label": "has",
    "to": 278
  }, {
    "from": 384,
    "label": "has",
    "to": 27
  }, {
    "from": 384,
    "label": "has",
    "to": 274
  }, {
    "from": 384,
    "label": "has",
    "to": 385
  }, {
    "from": 384,
    "label": "has",
    "to": 386
  }, {
    "from": 387,
    "label": "has",
    "to": 27
  }, {
    "from": 387,
    "label": "has",
    "to": 388
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 388,
    "label": "has",
    "to": 390
  }, {
    "from": 387,
    "label": "has",
    "to": 391
  }, {
    "from": 392,
    "label": "has",
    "to": 393
  }, {
    "from": 392,
    "label": "has",
    "to": 184
  }, {
    "from": 392,
    "label": "has",
    "to": 394
  }, {
    "from": 392,
    "label": "has",
    "to": 395
  }, {
    "from": 395,
    "label": "has",
    "to": 396
  }, {
    "from": 395,
    "label": "has",
    "to": 397
  }, {
    "from": 395,
    "label": "has",
    "to": 398
  }, {
    "from": 392,
    "label": "has",
    "to": 12
  }, {
    "from": 392,
    "label": "has",
    "to": 12
  }, {
    "from": 392,
    "label": "has",
    "to": 399
  }, {
    "from": 400,
    "label": "has",
    "to": 401
  }, {
    "from": 400,
    "label": "has",
    "to": 402
  }, {
    "from": 402,
    "label": "has",
    "to": 403
  }, {
    "from": 402,
    "label": "has",
    "to": 404
  }, {
    "from": 400,
    "label": "has",
    "to": 405
  }, {
    "from": 406,
    "label": "has",
    "to": 331
  }, {
    "from": 406,
    "label": "has",
    "to": 198
  }, {
    "from": 406,
    "label": "has",
    "to": 27
  }, {
    "from": 406,
    "label": "has",
    "to": 337
  }, {
    "from": 406,
    "label": "has",
    "to": 407
  }, {
    "from": 406,
    "label": "has",
    "to": 339
  }, {
    "from": 406,
    "label": "has",
    "to": 12
  }, {
    "from": 406,
    "label": "has",
    "to": 408
  }, {
    "from": 409,
    "label": "has",
    "to": 410
  }, {
    "from": 409,
    "label": "has",
    "to": 411
  }, {
    "from": 409,
    "label": "has",
    "to": 412
  }, {
    "from": 409,
    "label": "has",
    "to": 413
  }, {
    "from": 409,
    "label": "has",
    "to": 414
  }, {
    "from": 414,
    "label": "has",
    "to": 415
  }, {
    "from": 414,
    "label": "has",
    "to": 416
  }, {
    "from": 414,
    "label": "has",
    "to": 417
  }, {
    "from": 417,
    "label": "has",
    "to": 418
  }, {
    "from": 417,
    "label": "has",
    "to": 419
  }, {
    "from": 417,
    "label": "has",
    "to": 420
  }, {
    "from": 417,
    "label": "has",
    "to": 421
  }, {
    "from": 417,
    "label": "has",
    "to": 422
  }, {
    "from": 417,
    "label": "has",
    "to": 423
  }, {
    "from": 417,
    "label": "has",
    "to": 424
  }, {
    "from": 417,
    "label": "has",
    "to": 425
  }, {
    "from": 417,
    "label": "has",
    "to": 426
  }, {
    "from": 414,
    "label": "has",
    "to": 427
  }, {
    "from": 427,
    "label": "has",
    "to": 428
  }, {
    "from": 427,
    "label": "has",
    "to": 429
  }, {
    "from": 427,
    "label": "has",
    "to": 430
  }, {
    "from": 427,
    "label": "has",
    "to": 431
  }, {
    "from": 409,
    "label": "has",
    "to": 432
  }, {
    "from": 409,
    "label": "has",
    "to": 433
  }, {
    "from": 409,
    "label": "has",
    "to": 434
  }, {
    "from": 2,
    "label": "calls",
    "to": 438
  }, {
    "from": 343,
    "label": "calls",
    "to": 277
  }, {
    "from": 270,
    "label": "calls",
    "to": 135
  }, {
    "from": 341,
    "label": "calls",
    "to": 135
  }, {
    "from": 343,
    "label": "calls",
    "to": 135
  }, {
    "from": 352,
    "label": "calls",
    "to": 135
  }, {
    "from": 355,
    "label": "calls",
    "to": 135
  }, {
    "from": 355,
    "label": "calls",
    "to": 135
  }, {
    "from": 216,
    "label": "calls",
    "to": 114
  }, {
    "from": 299,
    "label": "calls",
    "to": 114
  }, {
    "from": 157,
    "label": "calls",
    "to": 255
  }, {
    "from": 161,
    "label": "calls",
    "to": 255
  }, {
    "from": 172,
    "label": "calls",
    "to": 255
  }, {
    "from": 216,
    "label": "calls",
    "to": 255
  }, {
    "from": 305,
    "label": "calls",
    "to": 255
  }, {
    "from": 308,
    "label": "calls",
    "to": 255
  }, {
    "from": 327,
    "label": "calls",
    "to": 255
  }, {
    "from": 327,
    "label": "calls",
    "to": 255
  }, {
    "from": 202,
    "label": "calls",
    "to": 327
  }, {
    "from": 258,
    "label": "calls",
    "to": 327
  }, {
    "from": 288,
    "label": "calls",
    "to": 327
  }, {
    "from": 321,
    "label": "calls",
    "to": 327
  }, {
    "from": 364,
    "label": "calls",
    "to": 327
  }, {
    "from": 270,
    "label": "calls",
    "to": 128
  }, {
    "from": 341,
    "label": "calls",
    "to": 128
  }, {
    "from": 343,
    "label": "calls",
    "to": 128
  }, {
    "from": 352,
    "label": "calls",
    "to": 128
  }, {
    "from": 355,
    "label": "calls",
    "to": 128
  }, {
    "from": 355,
    "label": "calls",
    "to": 128
  }, {
    "from": 277,
    "label": "calls",
    "to": 93
  }, {
    "from": 277,
    "label": "calls",
    "to": 93
  }, {
    "from": 277,
    "label": "calls",
    "to": 93
  }, {
    "from": 288,
    "label": "calls",
    "to": 93
  }, {
    "from": 288,
    "label": "calls",
    "to": 93
  }, {
    "from": 288,
    "label": "calls",
    "to": 93
  }, {
    "from": 330,
    "label": "calls",
    "to": 93
  }, {
    "from": 161,
    "label": "calls",
    "to": 157
  }, {
    "from": 221,
    "label": "calls",
    "to": 157
  }, {
    "from": 277,
    "label": "calls",
    "to": 270
  }, {
    "from": 288,
    "label": "calls",
    "to": 270
  }, {
    "from": 104,
    "label": "calls",
    "to": 104
  }, {
    "from": 114,
    "label": "calls",
    "to": 104
  }, {
    "from": 330,
    "label": "calls",
    "to": 139
  }, {
    "from": 406,
    "label": "calls",
    "to": 139
  }, {
    "from": 175,
    "label": "calls",
    "to": 11
  }, {
    "from": 40,
    "label": "calls",
    "to": 25
  }, {
    "from": 175,
    "label": "calls",
    "to": 25
  }, {
    "from": 175,
    "label": "calls",
    "to": 25
  }, {
    "from": 191,
    "label": "calls",
    "to": 25
  }, {
    "from": 258,
    "label": "calls",
    "to": 25
  }, {
    "from": 277,
    "label": "calls",
    "to": 25
  }, {
    "from": 288,
    "label": "calls",
    "to": 25
  }, {
    "from": 321,
    "label": "calls",
    "to": 25
  }, {
    "from": 321,
    "label": "calls",
    "to": 25
  }, {
    "from": 327,
    "label": "calls",
    "to": 25
  }, {
    "from": 387,
    "label": "calls",
    "to": 25
  }, {
    "from": 400,
    "label": "calls",
    "to": 25
  }, {
    "from": 175,
    "label": "calls",
    "to": 161
  }, {
    "from": 175,
    "label": "calls",
    "to": 161
  }, {
    "from": 29,
    "label": "calls",
    "to": 22
  }, {
    "from": 40,
    "label": "calls",
    "to": 22
  }, {
    "from": 330,
    "label": "calls",
    "to": 191
  }, {
    "from": 175,
    "label": "calls",
    "to": 172
  }, {
    "from": 175,
    "label": "calls",
    "to": 172
  }, {
    "from": 54,
    "label": "calls",
    "to": 46
  }, {
    "from": 114,
    "label": "calls",
    "to": 46
  }, {
    "from": 191,
    "label": "calls",
    "to": 46
  }, {
    "from": 288,
    "label": "calls",
    "to": 46
  }, {
    "from": 315,
    "label": "calls",
    "to": 46
  }, {
    "from": 321,
    "label": "calls",
    "to": 46
  }, {
    "from": 343,
    "label": "calls",
    "to": 46
  }, {
    "from": 343,
    "label": "calls",
    "to": 288
  }, {
    "from": 191,
    "label": "calls",
    "to": 71
  }, {
    "from": 270,
    "label": "calls",
    "to": 71
  }, {
    "from": 315,
    "label": "calls",
    "to": 71
  }, {
    "from": 321,
    "label": "calls",
    "to": 71
  }, {
    "from": 330,
    "label": "calls",
    "to": 71
  }, {
    "from": 435,
    "label": "calls",
    "to": 443
  }, {
    "from": 435,
    "label": "calls",
    "to": 443
  }, {
    "from": 435,
    "label": "calls",
    "to": 443
  }, {
    "from": 330,
    "label": "calls",
    "to": 400
  }, {
    "from": 341,
    "label": "calls",
    "to": 400
  }, {
    "from": 355,
    "label": "calls",
    "to": 400
  }, {
    "from": 406,
    "label": "calls",
    "to": 400
  }, {
    "from": 135,
    "label": "calls",
    "to": 89
  }, {
    "from": 149,
    "label": "calls",
    "to": 89
  }, {
    "from": 311,
    "label": "calls",
    "to": 308
  }, {
    "from": 352,
    "label": "calls",
    "to": 308
  }, {
    "from": 355,
    "label": "calls",
    "to": 308
  }, {
    "from": 22,
    "label": "calls",
    "to": 14
  }, {
    "from": 36,
    "label": "calls",
    "to": 14
  }, {
    "from": 40,
    "label": "calls",
    "to": 14
  }, {
    "from": 191,
    "label": "calls",
    "to": 14
  }, {
    "from": 202,
    "label": "calls",
    "to": 14
  }, {
    "from": 202,
    "label": "calls",
    "to": 14
  }, {
    "from": 216,
    "label": "calls",
    "to": 14
  }, {
    "from": 343,
    "label": "calls",
    "to": 14
  }, {
    "from": 367,
    "label": "calls",
    "to": 14
  }, {
    "from": 152,
    "label": "calls",
    "to": 54
  }, {
    "from": 161,
    "label": "calls",
    "to": 54
  }, {
    "from": 221,
    "label": "calls",
    "to": 54
  }, {
    "from": 392,
    "label": "calls",
    "to": 372
  }, {
    "from": 277,
    "label": "calls",
    "to": 305
  }, {
    "from": 277,
    "label": "calls",
    "to": 305
  }, {
    "from": 277,
    "label": "calls",
    "to": 305
  }, {
    "from": 104,
    "label": "calls",
    "to": 97
  }, {
    "from": 241,
    "label": "calls",
    "to": 241
  }, {
    "from": 241,
    "label": "calls",
    "to": 241
  }, {
    "from": 255,
    "label": "calls",
    "to": 241
  }, {
    "from": 258,
    "label": "calls",
    "to": 258
  }, {
    "from": 372,
    "label": "calls",
    "to": 258
  }, {
    "from": 2,
    "label": "calls",
    "to": 442
  }, {
    "from": 25,
    "label": "calls",
    "to": 6
  }, {
    "from": 33,
    "label": "calls",
    "to": 6
  }, {
    "from": 46,
    "label": "calls",
    "to": 6
  }, {
    "from": 152,
    "label": "calls",
    "to": 6
  }, {
    "from": 157,
    "label": "calls",
    "to": 6
  }, {
    "from": 191,
    "label": "calls",
    "to": 6
  }, {
    "from": 202,
    "label": "calls",
    "to": 6
  }, {
    "from": 202,
    "label": "calls",
    "to": 6
  }, {
    "from": 216,
    "label": "calls",
    "to": 6
  }, {
    "from": 221,
    "label": "calls",
    "to": 6
  }, {
    "from": 228,
    "label": "calls",
    "to": 6
  }, {
    "from": 228,
    "label": "calls",
    "to": 6
  }, {
    "from": 241,
    "label": "calls",
    "to": 6
  }, {
    "from": 241,
    "label": "calls",
    "to": 6
  }, {
    "from": 311,
    "label": "calls",
    "to": 6
  }, {
    "from": 343,
    "label": "calls",
    "to": 6
  }, {
    "from": 352,
    "label": "calls",
    "to": 6
  }, {
    "from": 355,
    "label": "calls",
    "to": 6
  }, {
    "from": 358,
    "label": "calls",
    "to": 6
  }, {
    "from": 364,
    "label": "calls",
    "to": 6
  }, {
    "from": 367,
    "label": "calls",
    "to": 6
  }, {
    "from": 379,
    "label": "calls",
    "to": 6
  }, {
    "from": 384,
    "label": "calls",
    "to": 6
  }, {
    "from": 387,
    "label": "calls",
    "to": 6
  }, {
    "from": 406,
    "label": "calls",
    "to": 6
  }, {
    "from": 14,
    "label": "calls",
    "to": 2
  }, {
    "from": 175,
    "label": "calls",
    "to": 40
  }, {
    "from": 202,
    "label": "calls",
    "to": 40
  }, {
    "from": 216,
    "label": "calls",
    "to": 40
  }, {
    "from": 330,
    "label": "calls",
    "to": 40
  }, {
    "from": 343,
    "label": "calls",
    "to": 40
  }, {
    "from": 352,
    "label": "calls",
    "to": 40
  }, {
    "from": 355,
    "label": "calls",
    "to": 40
  }, {
    "from": 358,
    "label": "calls",
    "to": 40
  }, {
    "from": 384,
    "label": "calls",
    "to": 40
  }, {
    "from": 379,
    "label": "calls",
    "to": 299
  }, {
    "from": 221,
    "label": "calls",
    "to": 202
  }, {
    "from": 221,
    "label": "calls",
    "to": 202
  }, {
    "from": 93,
    "label": "calls",
    "to": 57
  }, {
    "from": 191,
    "label": "calls",
    "to": 57
  }, {
    "from": 277,
    "label": "calls",
    "to": 57
  }, {
    "from": 288,
    "label": "calls",
    "to": 57
  }, {
    "from": 288,
    "label": "calls",
    "to": 57
  }, {
    "from": 315,
    "label": "calls",
    "to": 57
  }, {
    "from": 321,
    "label": "calls",
    "to": 57
  }, {
    "from": 270,
    "label": "calls",
    "to": 341
  }, {
    "from": 311,
    "label": "calls",
    "to": 341
  }, {
    "from": 352,
    "label": "calls",
    "to": 341
  }, {
    "from": 358,
    "label": "calls",
    "to": 341
  }, {
    "from": 384,
    "label": "calls",
    "to": 341
  }, {
    "from": 33,
    "label": "calls",
    "to": 29
  }, {
    "from": 46,
    "label": "calls",
    "to": 29
  }, {
    "from": 406,
    "label": "calls",
    "to": 29
  }, {
    "from": 54,
    "label": "calls",
    "to": 51
  }, {
    "from": 202,
    "label": "calls",
    "to": 51
  }, {
    "from": 228,
    "label": "calls",
    "to": 51
  }, {
    "from": 93,
    "label": "calls",
    "to": 439
  }, {
    "from": 228,
    "label": "calls",
    "to": 330
  }, {
    "from": 315,
    "label": "calls",
    "to": 330
  }, {
    "from": 379,
    "label": "calls",
    "to": 330
  }, {
    "from": 330,
    "label": "calls",
    "to": 149
  }, {
    "from": 406,
    "label": "calls",
    "to": 149
  }, {
    "from": 202,
    "label": "calls",
    "to": 175
  }, {
    "from": 228,
    "label": "calls",
    "to": 175
  }, {
    "from": 387,
    "label": "calls",
    "to": 321
  }, {
    "from": 241,
    "label": "calls",
    "to": 228
  }, {
    "from": 228,
    "label": "calls",
    "to": 221
  }, {
    "from": 258,
    "label": "calls",
    "to": 221
  }, {
    "from": 372,
    "label": "calls",
    "to": 221
  }, {
    "from": 89,
    "label": "calls",
    "to": 441
  }, {
    "from": 221,
    "label": "calls",
    "to": 216
  }, {
    "from": 228,
    "label": "calls",
    "to": 36
  }, {
    "from": 258,
    "label": "calls",
    "to": 36
  }, {
    "from": 358,
    "label": "calls",
    "to": 311
  }, {
    "from": 358,
    "label": "calls",
    "to": 311
  }, {
    "from": 435,
    "label": "calls",
    "to": 440
  }, {
    "from": 400,
    "label": "calls",
    "to": 392
  }, {
    "from": 387,
    "label": "calls",
    "to": 315
  }, {
    "from": 221,
    "label": "calls",
    "to": 152
  }, {
    "from": 299,
    "label": "calls",
    "to": 152
  }, {
    "from": 299,
    "label": "calls",
    "to": 152
  }, {
    "from": 435,
    "label": "calls",
    "to": 444
  }, {
    "from": 157,
    "label": "calls",
    "to": 33
  }, {
    "from": 161,
    "label": "calls",
    "to": 33
  }, {
    "from": 175,
    "label": "calls",
    "to": 33
  }, {
    "from": 258,
    "label": "calls",
    "to": 33
  }, {
    "from": 270,
    "label": "calls",
    "to": 33
  }, {
    "from": 277,
    "label": "calls",
    "to": 33
  }, {
    "from": 277,
    "label": "calls",
    "to": 33
  }, {
    "from": 288,
    "label": "calls",
    "to": 33
  }, {
    "from": 311,
    "label": "calls",
    "to": 33
  }, {
    "from": 330,
    "label": "calls",
    "to": 33
  }, {
    "from": 330,
    "label": "calls",
    "to": 33
  }, {
    "from": 352,
    "label": "calls",
    "to": 33
  }, {
    "from": 392,
    "label": "calls",
    "to": 445
  }, {
    "from": 1,
    "label": "contains",
    "to": 435
  }, {
    "from": 435,
    "label": "declares",
    "to": 2
  }, {
    "from": 435,
    "label": "declares",
    "to": 6
  }, {
    "from": 435,
    "label": "declares",
    "to": 11
  }, {
    "from": 435,
    "label": "declares",
    "to": 14
  }, {
    "from": 435,
    "label": "declares",
    "to": 22
  }, {
    "from": 435,
    "label": "declares",
    "to": 25
  }, {
    "from": 435,
    "label": "declares",
    "to": 29
  }, {
    "from": 435,
    "label": "declares",
    "to": 33
  }, {
    "from": 435,
    "label": "declares",
    "to": 36
  }, {
    "from": 435,
    "label": "declares",
    "to": 40
  }, {
    "from": 435,
    "label": "declares",
    "to": 46
  }, {
    "from": 435,
    "label": "declares",
    "to": 51
  }, {
    "from": 435,
    "label": "declares",
    "to": 54
  }, {
    "from": 435,
    "label": "declares",
    "to": 57
  }, {
    "from": 435,
    "label": "declares",
    "to": 71
  }, {
    "from": 435,
    "label": "declares",
    "to": 89
  }, {
    "from": 435,
    "label": "declares",
    "to": 93
  }, {
    "from": 435,
    "label": "declares",
    "to": 97
  }, {
    "from": 435,
    "label": "declares",
    "to": 104
  }, {
    "from": 435,
    "label": "declares",
    "to": 114
  }, {
    "from": 435,
    "label": "declares",
    "to": 128
  }, {
    "from": 435,
    "label": "declares",
    "to": 135
  }, {
    "from": 435,
    "label": "declares",
    "to": 139
  }, {
    "from": 435,
    "label": "declares",
    "to": 149
  }, {
    "from": 435,
    "label": "declares",
    "to": 152
  }, {
    "from": 435,
    "label": "declares",
    "to": 157
  }, {
    "from": 435,
    "label": "declares",
    "to": 161
  }, {
    "from": 435,
    "label": "declares",
    "to": 168
  }, {
    "from": 435,
    "label": "declares",
    "to": 172
  }, {
    "from": 435,
    "label": "declares",
    "to": 175
  }, {
    "from": 435,
    "label": "declares",
    "to": 191
  }, {
    "from": 435,
    "label": "declares",
    "to": 202
  }, {
    "from": 435,
    "label": "declares",
    "to": 216
  }, {
    "from": 435,
    "label": "declares",
    "to": 221
  }, {
    "from": 435,
    "label": "declares",
    "to": 228
  }, {
    "from": 435,
    "label": "declares",
    "to": 241
  }, {
    "from": 435,
    "label": "declares",
    "to": 255
  }, {
    "from": 435,
    "label": "declares",
    "to": 258
  }, {
    "from": 435,
    "label": "declares",
    "to": 270
  }, {
    "from": 435,
    "label": "declares",
    "to": 277
  }, {
    "from": 435,
    "label": "declares",
    "to": 288
  }, {
    "from": 435,
    "label": "declares",
    "to": 299
  }, {
    "from": 435,
    "label": "declares",
    "to": 305
  }, {
    "from": 435,
    "label": "declares",
    "to": 308
  }, {
    "from": 435,
    "label": "declares",
    "to": 311
  }, {
    "from": 435,
    "label": "declares",
    "to": 315
  }, {
    "from": 435,
    "label": "declares",
    "to": 321
  }, {
    "from": 435,
    "label": "declares",
    "to": 327
  }, {
    "from": 435,
    "label": "declares",
    "to": 330
  }, {
    "from": 435,
    "label": "declares",
    "to": 341
  }, {
    "from": 435,
    "label": "declares",
    "to": 343
  }, {
    "from": 435,
    "label": "declares",
    "to": 352
  }, {
    "from": 435,
    "label": "declares",
    "to": 355
  }, {
    "from": 435,
    "label": "declares",
    "to": 358
  }, {
    "from": 435,
    "label": "declares",
    "to": 364
  }, {
    "from": 435,
    "label": "declares",
    "to": 367
  }, {
    "from": 435,
    "label": "declares",
    "to": 372
  }, {
    "from": 435,
    "label": "declares",
    "to": 379
  }, {
    "from": 435,
    "label": "declares",
    "to": 384
  }, {
    "from": 435,
    "label": "declares",
    "to": 387
  }, {
    "from": 435,
    "label": "declares",
    "to": 392
  }, {
    "from": 435,
    "label": "declares",
    "to": 400
  }, {
    "from": 435,
    "label": "declares",
    "to": 406
  }, {
    "from": 435,
    "label": "declares",
    "to": 409
  }, {
    "from": 436,
    "label": "calls",
    "to": 406
  }, {
    "from": 1,
    "label": "contains",
    "to": 446
  }, {
    "from": 1,
    "label": "contains",
    "to": 447
  }, {
    "from": 446,
    "label": "initializes",
    "to": 448
  }, {
    "from": 448,
    "label": "assigns",
    "to": 449
  }, {
    "from": 446,
    "label": "initializes",
    "to": 450
  }, {
    "from": 446,
    "label": "initializes",
    "to": 451
  }, {
    "from": 446,
    "label": "initializes",
    "to": 452
  }, {
    "from": 446,
    "label": "initializes",
    "to": 453
  }, {
    "from": 446,
    "label": "initializes",
    "to": 454
  }, {
    "from": 446,
    "label": "initializes",
    "to": 455
  }, {
    "from": 446,
    "label": "initializes",
    "to": 456
  }, {
    "from": 446,
    "label": "initializes",
    "to": 457
  }, {
    "from": 446,
    "label": "initializes",
    "to": 458
  }, {
    "from": 446,
    "label": "initializes",
    "to": 459
  }, {
    "from": 446,
    "label": "initializes",
    "to": 460
  }, {
    "from": 446,
    "label": "initializes",
    "to": 461
  }, {
    "from": 446,
    "label": "initializes",
    "to": 462
  }, {
    "from": 446,
    "label": "initializes",
    "to": 463
  }, {
    "from": 446,
    "label": "initializes",
    "to": 464
  }, {
    "from": 446,
    "label": "initializes",
    "to": 465
  }, {
    "from": 446,
    "label": "initializes",
    "to": 466
  }, {
    "from": 446,
    "label": "initializes",
    "to": 467
  }, {
    "from": 446,
    "label": "initializes",
    "to": 468
  }, {
    "from": 446,
    "label": "initializes",
    "to": 469
  }, {
    "from": 446,
    "label": "initializes",
    "to": 470
  }, {
    "from": 446,
    "label": "initializes",
    "to": 471
  }, {
    "from": 446,
    "label": "initializes",
    "to": 472
  }, {
    "from": 446,
    "label": "initializes",
    "to": 473
  }, {
    "from": 446,
    "label": "initializes",
    "to": 474
  }, {
    "from": 446,
    "label": "initializes",
    "to": 475
  }, {
    "from": 475,
    "label": "assigns",
    "to": 476
  }, {
    "from": 446,
    "label": "initializes",
    "to": 477
  }, {
    "from": 477,
    "label": "assigns",
    "to": 478
  }, {
    "from": 446,
    "label": "initializes",
    "to": 479
  }, {
    "from": 479,
    "label": "assigns",
    "to": 480
  }, {
    "from": 446,
    "label": "initializes",
    "to": 481
  }, {
    "from": 481,
    "label": "assigns",
    "to": 482
  }, {
    "from": 446,
    "label": "initializes",
    "to": 483
  }, {
    "from": 483,
    "label": "assigns",
    "to": 484
  }, {
    "from": 446,
    "label": "initializes",
    "to": 485
  }, {
    "from": 485,
    "label": "assigns",
    "to": 486
  }, {
    "from": 486,
    "label": "assigns",
    "to": 487
  }, {
    "from": 487,
    "label": "assigns",
    "to": 488
  }, {
    "from": 486,
    "label": "assigns",
    "to": 489
  }, {
    "from": 489,
    "label": "assigns",
    "to": 490
  }, {
    "from": 486,
    "label": "assigns",
    "to": 491
  }, {
    "from": 491,
    "label": "assigns",
    "to": 492
  }, {
    "from": 446,
    "label": "initializes",
    "to": 493
  }, {
    "from": 493,
    "label": "assigns",
    "to": 494
  }, {
    "from": 447,
    "label": "initializes",
    "to": 495
  }, {
    "from": 495,
    "label": "requires",
    "to": 437
  }, {
    "from": 1,
    "label": "provides",
    "to": 496
  }, {
    "from": 496,
    "label": "provides",
    "to": 497
  }, {
    "from": 498,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lparser",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function errorline(s, line)\r\n  local e = error or base.error\r\n  e(string.format(\"(source):%d: %s\", line or ln, s))\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local e = error or base.error",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "e(string.format(\"(source):%d: %s\", line or ln, s))",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function nextt()\r\n  lastln = toklnlist[tpos]\r\n  tok, seminfo, ln, xref\r\n    = toklist[tpos], seminfolist[tpos], toklnlist[tpos], xreflist[tpos]\r\n  tpos = tpos + 1\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "lastln = toklnlist[tpos]",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "tok, seminfo, ln, xref\r\n    = toklist[tpos], seminfolist[tpos], toklnlist[tpos], xreflist[tpos]",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "tpos = tpos + 1",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function lookahead()\r\n  return toklist[tpos]\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "local function syntaxerror(msg)\r\n  local tok = tok\r\n  if tok ~= \"<number>\" and tok ~= \"<string>\" then\r\n    if tok == \"<name>\" then tok = seminfo end\r\n    tok = \"'\"..tok..\"'\"\r\n  end\r\n  errorline(msg..\" near \"..tok)\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local tok = tok",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if tok ~= \"<number>\" and tok ~= \"<string>\" then\r\n    if tok == \"<name>\" then tok = seminfo end\r\n    tok = \"'\"..tok..\"'\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "if tok == \"<name>\" then tok = seminfo end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "tok = seminfo",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "tok = \"'\"..tok..\"'\"",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "errorline(msg..\" near \"..tok)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function error_expected(token)\r\n  syntaxerror(\"'\"..token..\"' expected\")\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "syntaxerror(\"'\"..token..\"' expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function testnext(c)\r\n  if tok == c then nextt(); return true end\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "if tok == c then nextt(); return true end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "nextt()",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function check(c)\r\n  if tok ~= c then error_expected(c) end\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "if tok ~= c then error_expected(c) end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "error_expected(c)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "local function checknext(c)\r\n  check(c); nextt()\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "check(c)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "local function check_condition(c, msg)\r\n  if not c then syntaxerror(msg) end\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "if not c then syntaxerror(msg) end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "syntaxerror(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "local function check_match(what, who, where)\r\n  if not testnext(what) then\r\n    if where == ln then\r\n      error_expected(what)\r\n    else\r\n      syntaxerror(\"'\"..what..\"' expected (to close '\"..who..\"' at line \"..where..\")\")\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "if not testnext(what) then\r\n    if where == ln then\r\n      error_expected(what)\r\n    else\r\n      syntaxerror(\"'\"..what..\"' expected (to close '\"..who..\"' at line \"..where..\")\")\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "if where == ln then\r\n      error_expected(what)\r\n    else\r\n      syntaxerror(\"'\"..what..\"' expected (to close '\"..who..\"' at line \"..where..\")\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "error_expected(what)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "syntaxerror(\"'\"..what..\"' expected (to close '\"..who..\"' at line \"..where..\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "local function str_checkname()\r\n  check(\"<name>\")\r\n  local ts = seminfo\r\n  nameref = xref\r\n  nextt()\r\n  return ts\r\nend",
    "type": "function"
  }, {
    "id": 47,
    "text": "check(\"<name>\")",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "local ts = seminfo",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "nameref = xref",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "local function codestring(e, s)\r\n  e.k = \"VK\"\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "e.k = \"VK\"",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "local function checkname(e)\r\n  codestring(e, str_checkname())\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "codestring(e, str_checkname())",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "local function new_localvar(name, special)\r\n  local bl = fs.bl\r\n  local locallist\r\n  -- locate locallist in current block object or function root object\r\n  if bl then\r\n    locallist = bl.locallist\r\n  else\r\n    locallist = fs.locallist\r\n  end\r\n  -- build local variable information object and set localinfo\r\n  local id = #localinfo + 1\r\n  localinfo[id] = {             -- new local variable object\r\n    name = name,                -- local variable name\r\n    xref = { nameref },         -- xref, first value is declaration\r\n    decl = nameref,             -- location of declaration, = xref[1]\r\n  }\r\n  if special then               -- \"self\" must be not be changed\r\n    localinfo[id].isself = true\r\n  end\r\n  -- this can override a local with the same name in the same scope\r\n  -- but first, keep it inactive until it gets activated\r\n  local i = #ilocalinfo + 1\r\n  ilocalinfo[i] = id\r\n  ilocalrefs[i] = locallist\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local bl = fs.bl",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "local locallist",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "if bl then\r\n    locallist = bl.locallist\r\n  else\r\n    locallist = fs.locallist\r\n  end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "locallist = bl.locallist",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "locallist = fs.locallist",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "local id = #localinfo + 1",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "localinfo[id] = {             -- new local variable object\r\n    name = name,                -- local variable name\r\n    xref = { nameref },         -- xref, first value is declaration\r\n    decl = nameref,             -- location of declaration, = xref[1]\r\n  }",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "if special then               -- \"self\" must be not be changed\r\n    localinfo[id].isself = true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "localinfo[id].isself = true",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "local i = #ilocalinfo + 1",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "ilocalinfo[i] = id",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "ilocalrefs[i] = locallist",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "local function adjustlocalvars(nvars)\r\n  local sz = #ilocalinfo\r\n  -- i goes from left to right, in order of local allocation, because\r\n  -- of something like: local a,a,a = 1,2,3 which gives a = 3\r\n  while nvars > 0 do\r\n    nvars = nvars - 1\r\n    local i = sz - nvars\r\n    local id = ilocalinfo[i]            -- local's id\r\n    local obj = localinfo[id]\r\n    local name = obj.name               -- name of local\r\n    obj.act = xref                      -- set activation location\r\n    ilocalinfo[i] = nil\r\n    local locallist = ilocalrefs[i]     -- ref to lookup table to update\r\n    ilocalrefs[i] = nil\r\n    local existing = locallist[name]    -- if existing, remove old first!\r\n    if existing then                    -- do not overlap, set special\r\n      obj = localinfo[existing]         -- form of rem, as -id\r\n      obj.rem = -id\r\n    end\r\n    locallist[name] = id                -- activate, now visible to Lua\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "local sz = #ilocalinfo",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "while nvars > 0 do\r\n    nvars = nvars - 1\r\n    local i = sz - nvars\r\n    local id = ilocalinfo[i]            -- local's id\r\n    local obj = localinfo[id]\r\n    local name = obj.name               -- name of local\r\n    obj.act = xref                      -- set activation location\r\n    ilocalinfo[i] = nil\r\n    local locallist = ilocalrefs[i]     -- ref to lookup table to update\r\n    ilocalrefs[i] = nil\r\n    local existing = locallist[name]    -- if existing, remove old first!\r\n    if existing then                    -- do not overlap, set special\r\n      obj = localinfo[existing]         -- form of rem, as -id\r\n      obj.rem = -id\r\n    end\r\n    locallist[name] = id                -- activate, now visible to Lua\r\n  end",
    "type": "statement:while"
  }, {
    "id": 74,
    "text": "nvars = nvars - 1",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "local i = sz - nvars",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "local id = ilocalinfo[i]",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "local obj = localinfo[id]",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local name = obj.name",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "obj.act = xref",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "ilocalinfo[i] = nil",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "local locallist = ilocalrefs[i]",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "ilocalrefs[i] = nil",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "local existing = locallist[name]",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "if existing then                    -- do not overlap, set special\r\n      obj = localinfo[existing]         -- form of rem, as -id\r\n      obj.rem = -id\r\n    end",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "obj = localinfo[existing]",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "obj.rem = -id",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "locallist[name] = id",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "local function removevars()\r\n  local bl = fs.bl\r\n  local locallist\r\n  -- locate locallist in current block object or function root object\r\n  if bl then\r\n    locallist = bl.locallist\r\n  else\r\n    locallist = fs.locallist\r\n  end\r\n  -- enumerate the local list at current scope and deactivate 'em\r\n  for name, id in base.pairs(locallist) do\r\n    local obj = localinfo[id]\r\n    obj.rem = xref                      -- set deactivation location\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 90,
    "text": "for name, id in base.pairs(locallist) do\r\n    local obj = localinfo[id]\r\n    obj.rem = xref                      -- set deactivation location\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 91,
    "text": "obj.rem = xref",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "local function new_localvarliteral(name, special)\r\n  if string.sub(name, 1, 1) == \"(\" then  -- can skip internal locals\r\n    return\r\n  end\r\n  new_localvar(name, special)\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "if string.sub(name, 1, 1) == \"(\" then  -- can skip internal locals\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "new_localvar(name, special)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "local function searchvar(fs, n)\r\n  local bl = fs.bl\r\n  local locallist\r\n  if bl then\r\n    locallist = bl.locallist\r\n    while locallist do\r\n      if locallist[n] then return locallist[n] end  -- found\r\n      bl = bl.prev\r\n      locallist = bl and bl.locallist\r\n    end\r\n  end\r\n  locallist = fs.locallist\r\n  return locallist[n] or -1  -- found or not found (-1)\r\nend",
    "type": "function"
  }, {
    "id": 98,
    "text": "if bl then\r\n    locallist = bl.locallist\r\n    while locallist do\r\n      if locallist[n] then return locallist[n] end  -- found\r\n      bl = bl.prev\r\n      locallist = bl and bl.locallist\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "while locallist do\r\n      if locallist[n] then return locallist[n] end  -- found\r\n      bl = bl.prev\r\n      locallist = bl and bl.locallist\r\n    end",
    "type": "statement:while"
  }, {
    "id": 100,
    "text": "if locallist[n] then return locallist[n] end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "bl = bl.prev",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "locallist = bl and bl.locallist",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "local function singlevaraux(fs, n, var)\r\n  if fs == nil then  -- no more levels?\r\n    var.k = \"VGLOBAL\"  -- default is global variable\r\n    return \"VGLOBAL\"\r\n  else\r\n    local v = searchvar(fs, n)  -- look up at current level\r\n    if v >= 0 then\r\n      var.k = \"VLOCAL\"\r\n      var.id = v\r\n      --  codegen may need to deal with upvalue here\r\n      return \"VLOCAL\"\r\n    else  -- not found at current level; try upper one\r\n      if singlevaraux(fs.prev, n, var) == \"VGLOBAL\" then\r\n        return \"VGLOBAL\"\r\n      end\r\n      -- else was LOCAL or UPVAL, handle here\r\n      var.k = \"VUPVAL\"  -- upvalue in this level\r\n      return \"VUPVAL\"\r\n    end--if v\r\n  end--if fs\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "if fs == nil then  -- no more levels?\r\n    var.k = \"VGLOBAL\"  -- default is global variable\r\n    return \"VGLOBAL\"\r\n  else\r\n    local v = searchvar(fs, n)  -- look up at current level\r\n    if v >= 0 then\r\n      var.k = \"VLOCAL\"\r\n      var.id = v\r\n      --  codegen may need to deal with upvalue here\r\n      return \"VLOCAL\"\r\n    else  -- not found at current level; try upper one\r\n      if singlevaraux(fs.prev, n, var) == \"VGLOBAL\" then\r\n        return \"VGLOBAL\"\r\n      end\r\n      -- else was LOCAL or UPVAL, handle here\r\n      var.k = \"VUPVAL\"  -- upvalue in this level\r\n      return \"VUPVAL\"\r\n    end--if v\r\n  end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "var.k = \"VGLOBAL\"",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "local v = searchvar(fs, n)",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "if v >= 0 then\r\n      var.k = \"VLOCAL\"\r\n      var.id = v\r\n      --  codegen may need to deal with upvalue here\r\n      return \"VLOCAL\"\r\n    else  -- not found at current level; try upper one\r\n      if singlevaraux(fs.prev, n, var) == \"VGLOBAL\" then\r\n        return \"VGLOBAL\"\r\n      end\r\n      -- else was LOCAL or UPVAL, handle here\r\n      var.k = \"VUPVAL\"  -- upvalue in this level\r\n      return \"VUPVAL\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "var.k = \"VLOCAL\"",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "var.id = v",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "if singlevaraux(fs.prev, n, var) == \"VGLOBAL\" then\r\n        return \"VGLOBAL\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "var.k = \"VUPVAL\"",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "local function singlevar(v)\r\n  local name = str_checkname()\r\n  singlevaraux(fs, name, v)\r\n  ------------------------------------------------------------------\r\n  -- variable tracking\r\n  ------------------------------------------------------------------\r\n  if v.k == \"VGLOBAL\" then\r\n    -- if global being accessed, keep track of it by creating an object\r\n    local id = globallookup[name]\r\n    if not id then\r\n      id = #globalinfo + 1\r\n      globalinfo[id] = {                -- new global variable object\r\n        name = name,                    -- global variable name\r\n        xref = { nameref },             -- xref, first value is declaration\r\n      }\r\n      globallookup[name] = id           -- remember it\r\n    else\r\n      local obj = globalinfo[id].xref\r\n      obj[#obj + 1] = nameref           -- add xref\r\n    end\r\n  else\r\n    -- local/upvalue is being accessed, keep track of it\r\n    local id = v.id\r\n    local obj = localinfo[id].xref\r\n    obj[#obj + 1] = nameref             -- add xref\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "local name = str_checkname()",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "singlevaraux(fs, name, v)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "if v.k == \"VGLOBAL\" then\r\n    -- if global being accessed, keep track of it by creating an object\r\n    local id = globallookup[name]\r\n    if not id then\r\n      id = #globalinfo + 1\r\n      globalinfo[id] = {                -- new global variable object\r\n        name = name,                    -- global variable name\r\n        xref = { nameref },             -- xref, first value is declaration\r\n      }\r\n      globallookup[name] = id           -- remember it\r\n    else\r\n      local obj = globalinfo[id].xref\r\n      obj[#obj + 1] = nameref           -- add xref\r\n    end\r\n  else\r\n    -- local/upvalue is being accessed, keep track of it\r\n    local id = v.id\r\n    local obj = localinfo[id].xref\r\n    obj[#obj + 1] = nameref             -- add xref\r\n  end",
    "type": "statement:if"
  }, {
    "id": 118,
    "text": "local id = globallookup[name]",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "if not id then\r\n      id = #globalinfo + 1\r\n      globalinfo[id] = {                -- new global variable object\r\n        name = name,                    -- global variable name\r\n        xref = { nameref },             -- xref, first value is declaration\r\n      }\r\n      globallookup[name] = id           -- remember it\r\n    else\r\n      local obj = globalinfo[id].xref\r\n      obj[#obj + 1] = nameref           -- add xref\r\n    end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "id = #globalinfo + 1",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "globalinfo[id] = {                -- new global variable object\r\n        name = name,                    -- global variable name\r\n        xref = { nameref },             -- xref, first value is declaration\r\n      }",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "globallookup[name] = id",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "local obj = globalinfo[id].xref",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "obj[#obj + 1] = nameref",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "local id = v.id",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "local obj = localinfo[id].xref",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "local function enterblock(isbreakable)\r\n  local bl = {}  -- per-block state\r\n  bl.isbreakable = isbreakable\r\n  bl.prev = fs.bl\r\n  bl.locallist = {}\r\n  fs.bl = bl\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "local bl = {}",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "bl.isbreakable = isbreakable",
    "type": "statement:assign"
  }, {
    "id": 131,
    "text": "bl.prev = fs.bl",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "bl.locallist = {}",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "fs.bl = bl",
    "type": "statement:assign"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "local function leaveblock()\r\n  local bl = fs.bl\r\n  removevars()\r\n  fs.bl = bl.prev\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "removevars()",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "fs.bl = bl.prev",
    "type": "statement:assign"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "local function open_func()\r\n  local new_fs  -- per-function state\r\n  if not fs then  -- top_fs is created early\r\n    new_fs = top_fs\r\n  else\r\n    new_fs = {}\r\n  end\r\n  new_fs.prev = fs  -- linked list of function states\r\n  new_fs.bl = nil\r\n  new_fs.locallist = {}\r\n  fs = new_fs\r\nend",
    "type": "function"
  }, {
    "id": 140,
    "text": "local new_fs",
    "type": "statement:localassign"
  }, {
    "id": 141,
    "text": "if not fs then  -- top_fs is created early\r\n    new_fs = top_fs\r\n  else\r\n    new_fs = {}\r\n  end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "new_fs = top_fs",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "new_fs = {}",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "new_fs.prev = fs",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "new_fs.bl = nil",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "new_fs.locallist = {}",
    "type": "statement:assign"
  }, {
    "id": 147,
    "text": "fs = new_fs",
    "type": "statement:assign"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "local function close_func()\r\n  removevars()\r\n  fs = fs.prev\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "fs = fs.prev",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "local function field(v)\r\n  -- field -> ['.' | ':'] NAME\r\n  local key = {}\r\n  nextt()  -- skip the dot or colon\r\n  checkname(key)\r\n  v.k = \"VINDEXED\"\r\nend",
    "type": "function"
  }, {
    "id": 153,
    "text": "local key = {}",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "checkname(key)",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "v.k = \"VINDEXED\"",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "local function yindex(v)\r\n  -- index -> '[' expr ']'\r\n  nextt()  -- skip the '['\r\n  expr(v)\r\n  checknext(\"]\")\r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "expr(v)",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "checknext(\"]\")",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "local function recfield(cc)\r\n  -- recfield -> (NAME | '['exp1']') = exp1\r\n  local key, val = {}, {}\r\n  if tok == \"<name>\" then\r\n    checkname(key)\r\n  else-- tok == '['\r\n    yindex(key)\r\n  end\r\n  checknext(\"=\")\r\n  expr(val)\r\nend",
    "type": "function"
  }, {
    "id": 162,
    "text": "local key, val = {}, {}",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "if tok == \"<name>\" then\r\n    checkname(key)\r\n  else-- tok == '['\r\n    yindex(key)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "yindex(key)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "checknext(\"=\")",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "expr(val)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 168,
    "text": "local function closelistfield(cc)\r\n  if cc.v.k == \"VVOID\" then return end  -- there is no list item\r\n  cc.v.k = \"VVOID\"\r\nend",
    "type": "function"
  }, {
    "id": 169,
    "text": "if cc.v.k == \"VVOID\" then return end",
    "type": "statement:if"
  }, {
    "id": 170,
    "text": "cc.v.k = \"VVOID\"",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 172,
    "text": "local function listfield(cc)\r\n  expr(cc.v)\r\nend",
    "type": "function"
  }, {
    "id": 173,
    "text": "expr(cc.v)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 175,
    "text": "local function constructor(t)\r\n  -- constructor -> '{' [ field { fieldsep field } [ fieldsep ] ] '}'\r\n  -- field -> recfield | listfield\r\n  -- fieldsep -> ',' | ';'\r\n  local line = ln\r\n  local cc = {}\r\n  cc.v = {}\r\n  cc.t = t\r\n  t.k = \"VRELOCABLE\"\r\n  cc.v.k = \"VVOID\"\r\n  checknext(\"{\")\r\n  repeat\r\n    if tok == \"}\" then break end\r\n    -- closelistfield(cc) here\r\n    local c = tok\r\n    if c == \"<name>\" then  -- may be listfields or recfields\r\n      if lookahead() ~= \"=\" then  -- look ahead: expression?\r\n        listfield(cc)\r\n      else\r\n        recfield(cc)\r\n      end\r\n    elseif c == \"[\" then  -- constructor_item -> recfield\r\n      recfield(cc)\r\n    else  -- constructor_part -> listfield\r\n      listfield(cc)\r\n    end\r\n  until not testnext(\",\") and not testnext(\";\")\r\n  check_match(\"}\", \"{\", line)\r\n  -- lastlistfield(cc) here\r\nend",
    "type": "function"
  }, {
    "id": 176,
    "text": "local line = ln",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "local cc = {}",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "cc.v = {}",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "cc.t = t",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "t.k = \"VRELOCABLE\"",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "checknext(\"{\")",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "repeat\r\n    if tok == \"}\" then break end\r\n    -- closelistfield(cc) here\r\n    local c = tok\r\n    if c == \"<name>\" then  -- may be listfields or recfields\r\n      if lookahead() ~= \"=\" then  -- look ahead: expression?\r\n        listfield(cc)\r\n      else\r\n        recfield(cc)\r\n      end\r\n    elseif c == \"[\" then  -- constructor_item -> recfield\r\n      recfield(cc)\r\n    else  -- constructor_part -> listfield\r\n      listfield(cc)\r\n    end\r\n  until not testnext(\",\") and not testnext(\";\")",
    "type": "statement:repeat"
  }, {
    "id": 183,
    "text": "if tok == \"}\" then break end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "local c = tok",
    "type": "statement:localassign"
  }, {
    "id": 185,
    "text": "if c == \"<name>\" then  -- may be listfields or recfields\r\n      if lookahead() ~= \"=\" then  -- look ahead: expression?\r\n        listfield(cc)\r\n      else\r\n        recfield(cc)\r\n      end\r\n    elseif c == \"[\" then  -- constructor_item -> recfield\r\n      recfield(cc)\r\n    else  -- constructor_part -> listfield\r\n      listfield(cc)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 186,
    "text": "if lookahead() ~= \"=\" then  -- look ahead: expression?\r\n        listfield(cc)\r\n      else\r\n        recfield(cc)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 187,
    "text": "listfield(cc)",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "recfield(cc)",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "check_match(\"}\", \"{\", line)",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "local function parlist()\r\n  -- parlist -> [ param { ',' param } ]\r\n  local nparams = 0\r\n  if tok ~= \")\" then  -- is 'parlist' not empty?\r\n    repeat\r\n      local c = tok\r\n      if c == \"<name>\" then  -- param -> NAME\r\n        new_localvar(str_checkname())\r\n        nparams = nparams + 1\r\n      elseif c == \"...\" then\r\n        nextt()\r\n        fs.is_vararg = true\r\n      else\r\n        syntaxerror(\"<name> or '...' expected\")\r\n      end\r\n    until fs.is_vararg or not testnext(\",\")\r\n  end--if\r\n  adjustlocalvars(nparams)\r\nend",
    "type": "function"
  }, {
    "id": 192,
    "text": "local nparams = 0",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "if tok ~= \")\" then  -- is 'parlist' not empty?\r\n    repeat\r\n      local c = tok\r\n      if c == \"<name>\" then  -- param -> NAME\r\n        new_localvar(str_checkname())\r\n        nparams = nparams + 1\r\n      elseif c == \"...\" then\r\n        nextt()\r\n        fs.is_vararg = true\r\n      else\r\n        syntaxerror(\"<name> or '...' expected\")\r\n      end\r\n    until fs.is_vararg or not testnext(\",\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 194,
    "text": "repeat\r\n      local c = tok\r\n      if c == \"<name>\" then  -- param -> NAME\r\n        new_localvar(str_checkname())\r\n        nparams = nparams + 1\r\n      elseif c == \"...\" then\r\n        nextt()\r\n        fs.is_vararg = true\r\n      else\r\n        syntaxerror(\"<name> or '...' expected\")\r\n      end\r\n    until fs.is_vararg or not testnext(\",\")",
    "type": "statement:repeat"
  }, {
    "id": 195,
    "text": "if c == \"<name>\" then  -- param -> NAME\r\n        new_localvar(str_checkname())\r\n        nparams = nparams + 1\r\n      elseif c == \"...\" then\r\n        nextt()\r\n        fs.is_vararg = true\r\n      else\r\n        syntaxerror(\"<name> or '...' expected\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "new_localvar(str_checkname())",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "nparams = nparams + 1",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "fs.is_vararg = true",
    "type": "statement:assign"
  }, {
    "id": 199,
    "text": "syntaxerror(\"<name> or '...' expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "adjustlocalvars(nparams)",
    "type": "statement:functioncall"
  }, {
    "id": 201,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 202,
    "text": "local function funcargs(f)\r\n  local args = {}\r\n  local line = ln\r\n  local c = tok\r\n  if c == \"(\" then  -- funcargs -> '(' [ explist1 ] ')'\r\n    if line ~= lastln then\r\n      syntaxerror(\"ambiguous syntax (function call x new statement)\")\r\n    end\r\n    nextt()\r\n    if tok == \")\" then  -- arg list is empty?\r\n      args.k = \"VVOID\"\r\n    else\r\n      explist1(args)\r\n    end\r\n    check_match(\")\", \"(\", line)\r\n  elseif c == \"{\" then  -- funcargs -> constructor\r\n    constructor(args)\r\n  elseif c == \"<string>\" then  -- funcargs -> STRING\r\n    codestring(args, seminfo)\r\n    nextt()  -- must use 'seminfo' before 'next'\r\n  else\r\n    syntaxerror(\"function arguments expected\")\r\n    return\r\n  end--if c\r\n  f.k = \"VCALL\"\r\nend",
    "type": "function"
  }, {
    "id": 203,
    "text": "local args = {}",
    "type": "statement:localassign"
  }, {
    "id": 204,
    "text": "if c == \"(\" then  -- funcargs -> '(' [ explist1 ] ')'\r\n    if line ~= lastln then\r\n      syntaxerror(\"ambiguous syntax (function call x new statement)\")\r\n    end\r\n    nextt()\r\n    if tok == \")\" then  -- arg list is empty?\r\n      args.k = \"VVOID\"\r\n    else\r\n      explist1(args)\r\n    end\r\n    check_match(\")\", \"(\", line)\r\n  elseif c == \"{\" then  -- funcargs -> constructor\r\n    constructor(args)\r\n  elseif c == \"<string>\" then  -- funcargs -> STRING\r\n    codestring(args, seminfo)\r\n    nextt()  -- must use 'seminfo' before 'next'\r\n  else\r\n    syntaxerror(\"function arguments expected\")\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 205,
    "text": "if line ~= lastln then\r\n      syntaxerror(\"ambiguous syntax (function call x new statement)\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "syntaxerror(\"ambiguous syntax (function call x new statement)\")",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "if tok == \")\" then  -- arg list is empty?\r\n      args.k = \"VVOID\"\r\n    else\r\n      explist1(args)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 208,
    "text": "args.k = \"VVOID\"",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "explist1(args)",
    "type": "statement:functioncall"
  }, {
    "id": 210,
    "text": "check_match(\")\", \"(\", line)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "constructor(args)",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "codestring(args, seminfo)",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "syntaxerror(\"function arguments expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "f.k = \"VCALL\"",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 216,
    "text": "local function prefixexp(v)\r\n  -- prefixexp -> NAME | '(' expr ')'\r\n  local c = tok\r\n  if c == \"(\" then\r\n    local line = ln\r\n    nextt()\r\n    expr(v)\r\n    check_match(\")\", \"(\", line)\r\n  elseif c == \"<name>\" then\r\n    singlevar(v)\r\n  else\r\n    syntaxerror(\"unexpected symbol\")\r\n  end--if c\r\nend",
    "type": "function"
  }, {
    "id": 217,
    "text": "if c == \"(\" then\r\n    local line = ln\r\n    nextt()\r\n    expr(v)\r\n    check_match(\")\", \"(\", line)\r\n  elseif c == \"<name>\" then\r\n    singlevar(v)\r\n  else\r\n    syntaxerror(\"unexpected symbol\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 218,
    "text": "singlevar(v)",
    "type": "statement:functioncall"
  }, {
    "id": 219,
    "text": "syntaxerror(\"unexpected symbol\")",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 221,
    "text": "local function primaryexp(v)\r\n  -- primaryexp ->\r\n  --    prefixexp { '.' NAME | '[' exp ']' | ':' NAME funcargs | funcargs }\r\n  prefixexp(v)\r\n  while true do\r\n    local c = tok\r\n    if c == \".\" then  -- field\r\n      field(v)\r\n    elseif c == \"[\" then  -- '[' exp1 ']'\r\n      local key = {}\r\n      yindex(key)\r\n    elseif c == \":\" then  -- ':' NAME funcargs\r\n      local key = {}\r\n      nextt()\r\n      checkname(key)\r\n      funcargs(v)\r\n    elseif c == \"(\" or c == \"<string>\" or c == \"{\" then  -- funcargs\r\n      funcargs(v)\r\n    else\r\n      return\r\n    end--if c\r\n  end--while\r\nend",
    "type": "function"
  }, {
    "id": 222,
    "text": "prefixexp(v)",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "while true do\r\n    local c = tok\r\n    if c == \".\" then  -- field\r\n      field(v)\r\n    elseif c == \"[\" then  -- '[' exp1 ']'\r\n      local key = {}\r\n      yindex(key)\r\n    elseif c == \":\" then  -- ':' NAME funcargs\r\n      local key = {}\r\n      nextt()\r\n      checkname(key)\r\n      funcargs(v)\r\n    elseif c == \"(\" or c == \"<string>\" or c == \"{\" then  -- funcargs\r\n      funcargs(v)\r\n    else\r\n      return\r\n    end--if c\r\n  end",
    "type": "statement:while"
  }, {
    "id": 224,
    "text": "if c == \".\" then  -- field\r\n      field(v)\r\n    elseif c == \"[\" then  -- '[' exp1 ']'\r\n      local key = {}\r\n      yindex(key)\r\n    elseif c == \":\" then  -- ':' NAME funcargs\r\n      local key = {}\r\n      nextt()\r\n      checkname(key)\r\n      funcargs(v)\r\n    elseif c == \"(\" or c == \"<string>\" or c == \"{\" then  -- funcargs\r\n      funcargs(v)\r\n    else\r\n      return\r\n    end",
    "type": "statement:if"
  }, {
    "id": 225,
    "text": "field(v)",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "funcargs(v)",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 228,
    "text": "local function simpleexp(v)\r\n  -- simpleexp -> NUMBER | STRING | NIL | TRUE | FALSE | ... |\r\n  --              constructor | FUNCTION body | primaryexp\r\n  local c = tok\r\n  if c == \"<number>\" then\r\n    v.k = \"VKNUM\"\r\n  elseif c == \"<string>\" then\r\n    codestring(v, seminfo)\r\n  elseif c == \"nil\" then\r\n    v.k = \"VNIL\"\r\n  elseif c == \"true\" then\r\n    v.k = \"VTRUE\"\r\n  elseif c == \"false\" then\r\n    v.k = \"VFALSE\"\r\n  elseif c == \"...\" then  -- vararg\r\n    check_condition(fs.is_vararg == true,\r\n                    \"cannot use '...' outside a vararg function\");\r\n    v.k = \"VVARARG\"\r\n  elseif c == \"{\" then  -- constructor\r\n    constructor(v)\r\n    return\r\n  elseif c == \"function\" then\r\n    nextt()\r\n    body(v, false, ln)\r\n    return\r\n  else\r\n    primaryexp(v)\r\n    return\r\n  end--if c\r\n  nextt()\r\nend",
    "type": "function"
  }, {
    "id": 229,
    "text": "if c == \"<number>\" then\r\n    v.k = \"VKNUM\"\r\n  elseif c == \"<string>\" then\r\n    codestring(v, seminfo)\r\n  elseif c == \"nil\" then\r\n    v.k = \"VNIL\"\r\n  elseif c == \"true\" then\r\n    v.k = \"VTRUE\"\r\n  elseif c == \"false\" then\r\n    v.k = \"VFALSE\"\r\n  elseif c == \"...\" then  -- vararg\r\n    check_condition(fs.is_vararg == true,\r\n                    \"cannot use '...' outside a vararg function\");\r\n    v.k = \"VVARARG\"\r\n  elseif c == \"{\" then  -- constructor\r\n    constructor(v)\r\n    return\r\n  elseif c == \"function\" then\r\n    nextt()\r\n    body(v, false, ln)\r\n    return\r\n  else\r\n    primaryexp(v)\r\n    return\r\n  end",
    "type": "statement:if"
  }, {
    "id": 230,
    "text": "v.k = \"VKNUM\"",
    "type": "statement:assign"
  }, {
    "id": 231,
    "text": "codestring(v, seminfo)",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "v.k = \"VNIL\"",
    "type": "statement:assign"
  }, {
    "id": 233,
    "text": "v.k = \"VTRUE\"",
    "type": "statement:assign"
  }, {
    "id": 234,
    "text": "v.k = \"VFALSE\"",
    "type": "statement:assign"
  }, {
    "id": 235,
    "text": "check_condition(fs.is_vararg == true,\r\n                    \"cannot use '...' outside a vararg function\")",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "v.k = \"VVARARG\"",
    "type": "statement:assign"
  }, {
    "id": 237,
    "text": "constructor(v)",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "body(v, false, ln)",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "primaryexp(v)",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 241,
    "text": "local function subexpr(v, limit)\r\n  -- subexpr -> (simpleexp | unop subexpr) { binop subexpr }\r\n  --   * where 'binop' is any binary operator with a priority\r\n  --     higher than 'limit'\r\n  local op = tok\r\n  local uop = unopr[op]\r\n  if uop then\r\n    nextt()\r\n    subexpr(v, UNARY_PRIORITY)\r\n  else\r\n    simpleexp(v)\r\n  end\r\n  -- expand while operators have priorities higher than 'limit'\r\n  op = tok\r\n  local binop = binopr_left[op]\r\n  while binop and binop > limit do\r\n    local v2 = {}\r\n    nextt()\r\n    -- read sub-expression with higher priority\r\n    local nextop = subexpr(v2, binopr_right[op])\r\n    op = nextop\r\n    binop = binopr_left[op]\r\n  end\r\n  return op  -- return first untreated operator\r\nend",
    "type": "function"
  }, {
    "id": 242,
    "text": "local op = tok",
    "type": "statement:localassign"
  }, {
    "id": 243,
    "text": "local uop = unopr[op]",
    "type": "statement:localassign"
  }, {
    "id": 244,
    "text": "if uop then\r\n    nextt()\r\n    subexpr(v, UNARY_PRIORITY)\r\n  else\r\n    simpleexp(v)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 245,
    "text": "subexpr(v, UNARY_PRIORITY)",
    "type": "statement:functioncall"
  }, {
    "id": 246,
    "text": "simpleexp(v)",
    "type": "statement:functioncall"
  }, {
    "id": 247,
    "text": "op = tok",
    "type": "statement:assign"
  }, {
    "id": 248,
    "text": "local binop = binopr_left[op]",
    "type": "statement:localassign"
  }, {
    "id": 249,
    "text": "while binop and binop > limit do\r\n    local v2 = {}\r\n    nextt()\r\n    -- read sub-expression with higher priority\r\n    local nextop = subexpr(v2, binopr_right[op])\r\n    op = nextop\r\n    binop = binopr_left[op]\r\n  end",
    "type": "statement:while"
  }, {
    "id": 250,
    "text": "local v2 = {}",
    "type": "statement:localassign"
  }, {
    "id": 251,
    "text": "local nextop = subexpr(v2, binopr_right[op])",
    "type": "statement:localassign"
  }, {
    "id": 252,
    "text": "op = nextop",
    "type": "statement:assign"
  }, {
    "id": 253,
    "text": "binop = binopr_left[op]",
    "type": "statement:assign"
  }, {
    "id": 254,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 255,
    "text": "function expr(v)\r\n  -- expr -> subexpr\r\n  subexpr(v, 0)\r\nend",
    "type": "function"
  }, {
    "id": 256,
    "text": "subexpr(v, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 257,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 258,
    "text": "local function assignment(v)\r\n  local e = {}\r\n  local c = v.v.k\r\n  check_condition(c == \"VLOCAL\" or c == \"VUPVAL\" or c == \"VGLOBAL\"\r\n                  or c == \"VINDEXED\", \"syntax error\")\r\n  if testnext(\",\") then  -- assignment -> ',' primaryexp assignment\r\n    local nv = {}  -- expdesc\r\n    nv.v = {}\r\n    primaryexp(nv.v)\r\n    -- lparser.c deals with some register usage conflict here\r\n    assignment(nv)\r\n  else  -- assignment -> '=' explist1\r\n    checknext(\"=\")\r\n    explist1(e)\r\n    return  -- avoid default\r\n  end\r\n  e.k = \"VNONRELOC\"\r\nend",
    "type": "function"
  }, {
    "id": 259,
    "text": "local e = {}",
    "type": "statement:localassign"
  }, {
    "id": 260,
    "text": "local c = v.v.k",
    "type": "statement:localassign"
  }, {
    "id": 261,
    "text": "check_condition(c == \"VLOCAL\" or c == \"VUPVAL\" or c == \"VGLOBAL\"\r\n                  or c == \"VINDEXED\", \"syntax error\")",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "if testnext(\",\") then  -- assignment -> ',' primaryexp assignment\r\n    local nv = {}  -- expdesc\r\n    nv.v = {}\r\n    primaryexp(nv.v)\r\n    -- lparser.c deals with some register usage conflict here\r\n    assignment(nv)\r\n  else  -- assignment -> '=' explist1\r\n    checknext(\"=\")\r\n    explist1(e)\r\n    return  -- avoid default\r\n  end",
    "type": "statement:if"
  }, {
    "id": 263,
    "text": "local nv = {}",
    "type": "statement:localassign"
  }, {
    "id": 264,
    "text": "nv.v = {}",
    "type": "statement:assign"
  }, {
    "id": 265,
    "text": "primaryexp(nv.v)",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "assignment(nv)",
    "type": "statement:functioncall"
  }, {
    "id": 267,
    "text": "explist1(e)",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "e.k = \"VNONRELOC\"",
    "type": "statement:assign"
  }, {
    "id": 269,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 270,
    "text": "local function forbody(nvars, isnum)\r\n  -- forbody -> DO block\r\n  checknext(\"do\")\r\n  enterblock(false)  -- scope for declared variables\r\n  adjustlocalvars(nvars)\r\n  block()\r\n  leaveblock()  -- end of scope for declared variables\r\nend",
    "type": "function"
  }, {
    "id": 271,
    "text": "checknext(\"do\")",
    "type": "statement:functioncall"
  }, {
    "id": 272,
    "text": "enterblock(false)",
    "type": "statement:functioncall"
  }, {
    "id": 273,
    "text": "adjustlocalvars(nvars)",
    "type": "statement:functioncall"
  }, {
    "id": 274,
    "text": "block()",
    "type": "statement:functioncall"
  }, {
    "id": 275,
    "text": "leaveblock()",
    "type": "statement:functioncall"
  }, {
    "id": 276,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 277,
    "text": "local function fornum(varname)\r\n  -- fornum -> NAME = exp1, exp1 [, exp1] DO body\r\n  local line = line\r\n  new_localvarliteral(\"(for index)\")\r\n  new_localvarliteral(\"(for limit)\")\r\n  new_localvarliteral(\"(for step)\")\r\n  new_localvar(varname)\r\n  checknext(\"=\")\r\n  exp1()  -- initial value\r\n  checknext(\",\")\r\n  exp1()  -- limit\r\n  if testnext(\",\") then\r\n    exp1()  -- optional step\r\n  else\r\n    -- default step = 1\r\n  end\r\n  forbody(1, true)\r\nend",
    "type": "function"
  }, {
    "id": 278,
    "text": "local line = line",
    "type": "statement:localassign"
  }, {
    "id": 279,
    "text": "new_localvarliteral(\"(for index)\")",
    "type": "statement:functioncall"
  }, {
    "id": 280,
    "text": "new_localvarliteral(\"(for limit)\")",
    "type": "statement:functioncall"
  }, {
    "id": 281,
    "text": "new_localvarliteral(\"(for step)\")",
    "type": "statement:functioncall"
  }, {
    "id": 282,
    "text": "new_localvar(varname)",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "exp1()",
    "type": "statement:functioncall"
  }, {
    "id": 284,
    "text": "checknext(\",\")",
    "type": "statement:functioncall"
  }, {
    "id": 285,
    "text": "if testnext(\",\") then\r\n    exp1()  -- optional step\r\n  else\r\n    -- default step = 1\r\n  end",
    "type": "statement:if"
  }, {
    "id": 286,
    "text": "forbody(1, true)",
    "type": "statement:functioncall"
  }, {
    "id": 287,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 288,
    "text": "local function forlist(indexname)\r\n  -- forlist -> NAME {, NAME} IN explist1 DO body\r\n  local e = {}\r\n  -- create control variables\r\n  new_localvarliteral(\"(for generator)\")\r\n  new_localvarliteral(\"(for state)\")\r\n  new_localvarliteral(\"(for control)\")\r\n  -- create declared variables\r\n  new_localvar(indexname)\r\n  local nvars = 1\r\n  while testnext(\",\") do\r\n    new_localvar(str_checkname())\r\n    nvars = nvars + 1\r\n  end\r\n  checknext(\"in\")\r\n  local line = line\r\n  explist1(e)\r\n  forbody(nvars, false)\r\nend",
    "type": "function"
  }, {
    "id": 289,
    "text": "new_localvarliteral(\"(for generator)\")",
    "type": "statement:functioncall"
  }, {
    "id": 290,
    "text": "new_localvarliteral(\"(for state)\")",
    "type": "statement:functioncall"
  }, {
    "id": 291,
    "text": "new_localvarliteral(\"(for control)\")",
    "type": "statement:functioncall"
  }, {
    "id": 292,
    "text": "new_localvar(indexname)",
    "type": "statement:functioncall"
  }, {
    "id": 293,
    "text": "local nvars = 1",
    "type": "statement:localassign"
  }, {
    "id": 294,
    "text": "while testnext(\",\") do\r\n    new_localvar(str_checkname())\r\n    nvars = nvars + 1\r\n  end",
    "type": "statement:while"
  }, {
    "id": 295,
    "text": "nvars = nvars + 1",
    "type": "statement:assign"
  }, {
    "id": 296,
    "text": "checknext(\"in\")",
    "type": "statement:functioncall"
  }, {
    "id": 297,
    "text": "forbody(nvars, false)",
    "type": "statement:functioncall"
  }, {
    "id": 298,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 299,
    "text": "local function funcname(v)\r\n  -- funcname -> NAME {field} [':' NAME]\r\n  local needself = false\r\n  singlevar(v)\r\n  while tok == \".\" do\r\n    field(v)\r\n  end\r\n  if tok == \":\" then\r\n    needself = true\r\n    field(v)\r\n  end\r\n  return needself\r\nend",
    "type": "function"
  }, {
    "id": 300,
    "text": "local needself = false",
    "type": "statement:localassign"
  }, {
    "id": 301,
    "text": "while tok == \".\" do\r\n    field(v)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 302,
    "text": "if tok == \":\" then\r\n    needself = true\r\n    field(v)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 303,
    "text": "needself = true",
    "type": "statement:assign"
  }, {
    "id": 304,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 305,
    "text": "function exp1()\r\n  -- exp1 -> expr\r\n  local e = {}\r\n  expr(e)\r\nend",
    "type": "function"
  }, {
    "id": 306,
    "text": "expr(e)",
    "type": "statement:functioncall"
  }, {
    "id": 307,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 308,
    "text": "local function cond()\r\n  -- cond -> expr\r\n  local v = {}\r\n  expr(v)  -- read condition\r\nend",
    "type": "function"
  }, {
    "id": 309,
    "text": "local v = {}",
    "type": "statement:localassign"
  }, {
    "id": 310,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 311,
    "text": "local function test_then_block()\r\n  -- test_then_block -> [IF | ELSEIF] cond THEN block\r\n  nextt()  -- skip IF or ELSEIF\r\n  cond()\r\n  checknext(\"then\")\r\n  block()  -- 'then' part\r\nend",
    "type": "function"
  }, {
    "id": 312,
    "text": "cond()",
    "type": "statement:functioncall"
  }, {
    "id": 313,
    "text": "checknext(\"then\")",
    "type": "statement:functioncall"
  }, {
    "id": 314,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 315,
    "text": "local function localfunc()\r\n  -- localfunc -> NAME body\r\n  local v, b = {}\r\n  new_localvar(str_checkname())\r\n  v.k = \"VLOCAL\"\r\n  adjustlocalvars(1)\r\n  body(b, false, ln)\r\nend",
    "type": "function"
  }, {
    "id": 316,
    "text": "local v, b = {}",
    "type": "statement:localassign"
  }, {
    "id": 317,
    "text": "v.k = \"VLOCAL\"",
    "type": "statement:assign"
  }, {
    "id": 318,
    "text": "adjustlocalvars(1)",
    "type": "statement:functioncall"
  }, {
    "id": 319,
    "text": "body(b, false, ln)",
    "type": "statement:functioncall"
  }, {
    "id": 320,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 321,
    "text": "local function localstat()\r\n  -- localstat -> NAME {',' NAME} ['=' explist1]\r\n  local nvars = 0\r\n  local e = {}\r\n  repeat\r\n    new_localvar(str_checkname())\r\n    nvars = nvars + 1\r\n  until not testnext(\",\")\r\n  if testnext(\"=\") then\r\n    explist1(e)\r\n  else\r\n    e.k = \"VVOID\"\r\n  end\r\n  adjustlocalvars(nvars)\r\nend",
    "type": "function"
  }, {
    "id": 322,
    "text": "local nvars = 0",
    "type": "statement:localassign"
  }, {
    "id": 323,
    "text": "repeat\r\n    new_localvar(str_checkname())\r\n    nvars = nvars + 1\r\n  until not testnext(\",\")",
    "type": "statement:repeat"
  }, {
    "id": 324,
    "text": "if testnext(\"=\") then\r\n    explist1(e)\r\n  else\r\n    e.k = \"VVOID\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 325,
    "text": "e.k = \"VVOID\"",
    "type": "statement:assign"
  }, {
    "id": 326,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 327,
    "text": "function explist1(e)\r\n  -- explist1 -> expr { ',' expr }\r\n  expr(e)\r\n  while testnext(\",\") do\r\n    expr(e)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 328,
    "text": "while testnext(\",\") do\r\n    expr(e)\r\n  end",
    "type": "statement:while"
  }, {
    "id": 329,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 330,
    "text": "function body(e, needself, line)\r\n  -- body ->  '(' parlist ')' chunk END\r\n  open_func()\r\n  checknext(\"(\")\r\n  if needself then\r\n    new_localvarliteral(\"self\", true)\r\n    adjustlocalvars(1)\r\n  end\r\n  parlist()\r\n  checknext(\")\")\r\n  chunk()\r\n  check_match(\"end\", \"function\", line)\r\n  close_func()\r\nend",
    "type": "function"
  }, {
    "id": 331,
    "text": "open_func()",
    "type": "statement:functioncall"
  }, {
    "id": 332,
    "text": "checknext(\"(\")",
    "type": "statement:functioncall"
  }, {
    "id": 333,
    "text": "if needself then\r\n    new_localvarliteral(\"self\", true)\r\n    adjustlocalvars(1)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 334,
    "text": "new_localvarliteral(\"self\", true)",
    "type": "statement:functioncall"
  }, {
    "id": 335,
    "text": "parlist()",
    "type": "statement:functioncall"
  }, {
    "id": 336,
    "text": "checknext(\")\")",
    "type": "statement:functioncall"
  }, {
    "id": 337,
    "text": "chunk()",
    "type": "statement:functioncall"
  }, {
    "id": 338,
    "text": "check_match(\"end\", \"function\", line)",
    "type": "statement:functioncall"
  }, {
    "id": 339,
    "text": "close_func()",
    "type": "statement:functioncall"
  }, {
    "id": 340,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 341,
    "text": "function block()\r\n  -- block -> chunk\r\n  enterblock(false)\r\n  chunk()\r\n  leaveblock()\r\nend",
    "type": "function"
  }, {
    "id": 342,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 343,
    "text": "function for_stat()\r\n  -- stat -> for_stat -> FOR (fornum | forlist) END\r\n  local line = line\r\n  enterblock(true)  -- scope for loop and control variables\r\n  nextt()  -- skip 'for'\r\n  local varname = str_checkname()  -- first variable name\r\n  local c = tok\r\n  if c == \"=\" then\r\n    fornum(varname)\r\n  elseif c == \",\" or c == \"in\" then\r\n    forlist(varname)\r\n  else\r\n    syntaxerror(\"'=' or 'in' expected\")\r\n  end\r\n  check_match(\"end\", \"for\", line)\r\n  leaveblock()  -- loop scope (`break' jumps to this point)\r\nend",
    "type": "function"
  }, {
    "id": 344,
    "text": "enterblock(true)",
    "type": "statement:functioncall"
  }, {
    "id": 345,
    "text": "local varname = str_checkname()",
    "type": "statement:localassign"
  }, {
    "id": 346,
    "text": "if c == \"=\" then\r\n    fornum(varname)\r\n  elseif c == \",\" or c == \"in\" then\r\n    forlist(varname)\r\n  else\r\n    syntaxerror(\"'=' or 'in' expected\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 347,
    "text": "fornum(varname)",
    "type": "statement:functioncall"
  }, {
    "id": 348,
    "text": "forlist(varname)",
    "type": "statement:functioncall"
  }, {
    "id": 349,
    "text": "syntaxerror(\"'=' or 'in' expected\")",
    "type": "statement:functioncall"
  }, {
    "id": 350,
    "text": "check_match(\"end\", \"for\", line)",
    "type": "statement:functioncall"
  }, {
    "id": 351,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 352,
    "text": "function while_stat()\r\n  -- stat -> while_stat -> WHILE cond DO block END\r\n  local line = line\r\n  nextt()  -- skip WHILE\r\n  cond()  -- parse condition\r\n  enterblock(true)\r\n  checknext(\"do\")\r\n  block()\r\n  check_match(\"end\", \"while\", line)\r\n  leaveblock()\r\nend",
    "type": "function"
  }, {
    "id": 353,
    "text": "check_match(\"end\", \"while\", line)",
    "type": "statement:functioncall"
  }, {
    "id": 354,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 355,
    "text": "function repeat_stat()\r\n  -- stat -> repeat_stat -> REPEAT block UNTIL cond\r\n  local line = line\r\n  enterblock(true)  -- loop block\r\n  enterblock(false)  -- scope block\r\n  nextt()  -- skip REPEAT\r\n  chunk()\r\n  check_match(\"until\", \"repeat\", line)\r\n  cond()\r\n  -- close upvalues at scope level below\r\n  leaveblock()  -- finish scope\r\n  leaveblock()  -- finish loop\r\nend",
    "type": "function"
  }, {
    "id": 356,
    "text": "check_match(\"until\", \"repeat\", line)",
    "type": "statement:functioncall"
  }, {
    "id": 357,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 358,
    "text": "function if_stat()\r\n  -- stat -> if_stat -> IF cond THEN block\r\n  --                    {ELSEIF cond THEN block} [ELSE block] END\r\n  local line = line\r\n  local v = {}\r\n  test_then_block()  -- IF cond THEN block\r\n  while tok == \"elseif\" do\r\n    test_then_block()  -- ELSEIF cond THEN block\r\n  end\r\n  if tok == \"else\" then\r\n    nextt()  -- skip ELSE\r\n    block()  -- 'else' part\r\n  end\r\n  check_match(\"end\", \"if\", line)\r\nend",
    "type": "function"
  }, {
    "id": 359,
    "text": "test_then_block()",
    "type": "statement:functioncall"
  }, {
    "id": 360,
    "text": "while tok == \"elseif\" do\r\n    test_then_block()  -- ELSEIF cond THEN block\r\n  end",
    "type": "statement:while"
  }, {
    "id": 361,
    "text": "if tok == \"else\" then\r\n    nextt()  -- skip ELSE\r\n    block()  -- 'else' part\r\n  end",
    "type": "statement:if"
  }, {
    "id": 362,
    "text": "check_match(\"end\", \"if\", line)",
    "type": "statement:functioncall"
  }, {
    "id": 363,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 364,
    "text": "function return_stat()\r\n  -- stat -> return_stat -> RETURN explist\r\n  local e = {}\r\n  nextt()  -- skip RETURN\r\n  local c = tok\r\n  if block_follow[c] or c == \";\" then\r\n    -- return no values\r\n  else\r\n    explist1(e)  -- optional return values\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 365,
    "text": "if block_follow[c] or c == \";\" then\r\n    -- return no values\r\n  else\r\n    explist1(e)  -- optional return values\r\n  end",
    "type": "statement:if"
  }, {
    "id": 366,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 367,
    "text": "function break_stat()\r\n  -- stat -> break_stat -> BREAK\r\n  local bl = fs.bl\r\n  nextt()  -- skip BREAK\r\n  while bl and not bl.isbreakable do -- find a breakable block\r\n    bl = bl.prev\r\n  end\r\n  if not bl then\r\n    syntaxerror(\"no loop to break\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 368,
    "text": "while bl and not bl.isbreakable do -- find a breakable block\r\n    bl = bl.prev\r\n  end",
    "type": "statement:while"
  }, {
    "id": 369,
    "text": "if not bl then\r\n    syntaxerror(\"no loop to break\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 370,
    "text": "syntaxerror(\"no loop to break\")",
    "type": "statement:functioncall"
  }, {
    "id": 371,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 372,
    "text": "function expr_stat()\r\n  -- stat -> expr_stat -> func | assignment\r\n  local v = {}\r\n  v.v = {}\r\n  primaryexp(v.v)\r\n  if v.v.k == \"VCALL\" then  -- stat -> func\r\n    -- call statement uses no results\r\n  else  -- stat -> assignment\r\n    v.prev = nil\r\n    assignment(v)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 373,
    "text": "v.v = {}",
    "type": "statement:assign"
  }, {
    "id": 374,
    "text": "primaryexp(v.v)",
    "type": "statement:functioncall"
  }, {
    "id": 375,
    "text": "if v.v.k == \"VCALL\" then  -- stat -> func\r\n    -- call statement uses no results\r\n  else  -- stat -> assignment\r\n    v.prev = nil\r\n    assignment(v)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 376,
    "text": "v.prev = nil",
    "type": "statement:assign"
  }, {
    "id": 377,
    "text": "assignment(v)",
    "type": "statement:functioncall"
  }, {
    "id": 378,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 379,
    "text": "function function_stat()\r\n  -- stat -> function_stat -> FUNCTION funcname body\r\n  local line = line\r\n  local v, b = {}, {}\r\n  nextt()  -- skip FUNCTION\r\n  local needself = funcname(v)\r\n  body(b, needself, line)\r\nend",
    "type": "function"
  }, {
    "id": 380,
    "text": "local v, b = {}, {}",
    "type": "statement:localassign"
  }, {
    "id": 381,
    "text": "local needself = funcname(v)",
    "type": "statement:localassign"
  }, {
    "id": 382,
    "text": "body(b, needself, line)",
    "type": "statement:functioncall"
  }, {
    "id": 383,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 384,
    "text": "function do_stat()\r\n  -- stat -> do_stat -> DO block END\r\n  local line = line\r\n  nextt()  -- skip DO\r\n  block()\r\n  check_match(\"end\", \"do\", line)\r\nend",
    "type": "function"
  }, {
    "id": 385,
    "text": "check_match(\"end\", \"do\", line)",
    "type": "statement:functioncall"
  }, {
    "id": 386,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 387,
    "text": "function local_stat()\r\n  -- stat -> local_stat -> LOCAL FUNCTION localfunc\r\n  --                    -> LOCAL localstat\r\n  nextt()  -- skip LOCAL\r\n  if testnext(\"function\") then  -- local function?\r\n    localfunc()\r\n  else\r\n    localstat()\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 388,
    "text": "if testnext(\"function\") then  -- local function?\r\n    localfunc()\r\n  else\r\n    localstat()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 389,
    "text": "localfunc()",
    "type": "statement:functioncall"
  }, {
    "id": 390,
    "text": "localstat()",
    "type": "statement:functioncall"
  }, {
    "id": 391,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 392,
    "text": "local function stat()\r\n  -- stat -> if_stat while_stat do_stat for_stat repeat_stat\r\n  --         function_stat local_stat return_stat break_stat\r\n  --         expr_stat\r\n  line = ln  -- may be needed for error messages\r\n  local c = tok\r\n  local fn = stat_call[c]\r\n  -- handles: if while do for repeat function local return break\r\n  if fn then\r\n    _M[fn]()\r\n    -- return or break must be last statement\r\n    if c == \"return\" or c == \"break\" then return true end\r\n  else\r\n    expr_stat()\r\n  end\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 393,
    "text": "line = ln",
    "type": "statement:assign"
  }, {
    "id": 394,
    "text": "local fn = stat_call[c]",
    "type": "statement:localassign"
  }, {
    "id": 395,
    "text": "if fn then\r\n    _M[fn]()\r\n    -- return or break must be last statement\r\n    if c == \"return\" or c == \"break\" then return true end\r\n  else\r\n    expr_stat()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 396,
    "text": "_M[fn]()",
    "type": "statement:functioncall"
  }, {
    "id": 397,
    "text": "if c == \"return\" or c == \"break\" then return true end",
    "type": "statement:if"
  }, {
    "id": 398,
    "text": "expr_stat()",
    "type": "statement:functioncall"
  }, {
    "id": 399,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 400,
    "text": "function chunk()\r\n  -- chunk -> { stat [';'] }\r\n  local islast = false\r\n  while not islast and not block_follow[tok] do\r\n    islast = stat()\r\n    testnext(\";\")\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 401,
    "text": "local islast = false",
    "type": "statement:localassign"
  }, {
    "id": 402,
    "text": "while not islast and not block_follow[tok] do\r\n    islast = stat()\r\n    testnext(\";\")\r\n  end",
    "type": "statement:while"
  }, {
    "id": 403,
    "text": "islast = stat()",
    "type": "statement:assign"
  }, {
    "id": 404,
    "text": "testnext(\";\")",
    "type": "statement:functioncall"
  }, {
    "id": 405,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 406,
    "text": "function parser()\r\n  open_func()\r\n  fs.is_vararg = true  -- main func. is always vararg\r\n  nextt()  -- read first token\r\n  chunk()\r\n  check(\"<eof>\")\r\n  close_func()\r\n  return globalinfo, localinfo\r\nend",
    "type": "function"
  }, {
    "id": 407,
    "text": "check(\"<eof>\")",
    "type": "statement:functioncall"
  }, {
    "id": 408,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 409,
    "text": "function init(tokorig, seminfoorig, toklnorig)\r\n  tpos = 1                      -- token position\r\n  top_fs = {}                   -- reset top level function state\r\n  ------------------------------------------------------------------\r\n  -- set up grammar-only token tables; impedance-matching...\r\n  -- note that constants returned by the lexer is source-level, so\r\n  -- for now, fake(!) constant tokens (TK_NUMBER|TK_STRING|TK_LSTRING)\r\n  ------------------------------------------------------------------\r\n  local j = 1\r\n  toklist, seminfolist, toklnlist, xreflist = {}, {}, {}, {}\r\n  for i = 1, #tokorig do\r\n    local tok = tokorig[i]\r\n    local yep = true\r\n    if tok == \"TK_KEYWORD\" or tok == \"TK_OP\" then\r\n      tok = seminfoorig[i]\r\n    elseif tok == \"TK_NAME\" then\r\n      tok = \"<name>\"\r\n      seminfolist[j] = seminfoorig[i]\r\n    elseif tok == \"TK_NUMBER\" then\r\n      tok = \"<number>\"\r\n      seminfolist[j] = 0  -- fake!\r\n    elseif tok == \"TK_STRING\" or tok == \"TK_LSTRING\" then\r\n      tok = \"<string>\"\r\n      seminfolist[j] = \"\"  -- fake!\r\n    elseif tok == \"TK_EOS\" then\r\n      tok = \"<eof>\"\r\n    else\r\n      -- non-grammar tokens; ignore them\r\n      yep = false\r\n    end\r\n    if yep then  -- set rest of the information\r\n      toklist[j] = tok\r\n      toklnlist[j] = toklnorig[i]\r\n      xreflist[j] = i\r\n      j = j + 1\r\n    end\r\n  end--for\r\n  ------------------------------------------------------------------\r\n  -- initialize data structures for variable tracking\r\n  ------------------------------------------------------------------\r\n  globalinfo, globallookup, localinfo = {}, {}, {}\r\n  ilocalinfo, ilocalrefs = {}, {}\r\nend",
    "type": "function"
  }, {
    "id": 410,
    "text": "tpos = 1",
    "type": "statement:assign"
  }, {
    "id": 411,
    "text": "top_fs = {}",
    "type": "statement:assign"
  }, {
    "id": 412,
    "text": "local j = 1",
    "type": "statement:localassign"
  }, {
    "id": 413,
    "text": "toklist, seminfolist, toklnlist, xreflist = {}, {}, {}, {}",
    "type": "statement:assign"
  }, {
    "id": 414,
    "text": "for i = 1, #tokorig do\r\n    local tok = tokorig[i]\r\n    local yep = true\r\n    if tok == \"TK_KEYWORD\" or tok == \"TK_OP\" then\r\n      tok = seminfoorig[i]\r\n    elseif tok == \"TK_NAME\" then\r\n      tok = \"<name>\"\r\n      seminfolist[j] = seminfoorig[i]\r\n    elseif tok == \"TK_NUMBER\" then\r\n      tok = \"<number>\"\r\n      seminfolist[j] = 0  -- fake!\r\n    elseif tok == \"TK_STRING\" or tok == \"TK_LSTRING\" then\r\n      tok = \"<string>\"\r\n      seminfolist[j] = \"\"  -- fake!\r\n    elseif tok == \"TK_EOS\" then\r\n      tok = \"<eof>\"\r\n    else\r\n      -- non-grammar tokens; ignore them\r\n      yep = false\r\n    end\r\n    if yep then  -- set rest of the information\r\n      toklist[j] = tok\r\n      toklnlist[j] = toklnorig[i]\r\n      xreflist[j] = i\r\n      j = j + 1\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 415,
    "text": "local tok = tokorig[i]",
    "type": "statement:localassign"
  }, {
    "id": 416,
    "text": "local yep = true",
    "type": "statement:localassign"
  }, {
    "id": 417,
    "text": "if tok == \"TK_KEYWORD\" or tok == \"TK_OP\" then\r\n      tok = seminfoorig[i]\r\n    elseif tok == \"TK_NAME\" then\r\n      tok = \"<name>\"\r\n      seminfolist[j] = seminfoorig[i]\r\n    elseif tok == \"TK_NUMBER\" then\r\n      tok = \"<number>\"\r\n      seminfolist[j] = 0  -- fake!\r\n    elseif tok == \"TK_STRING\" or tok == \"TK_LSTRING\" then\r\n      tok = \"<string>\"\r\n      seminfolist[j] = \"\"  -- fake!\r\n    elseif tok == \"TK_EOS\" then\r\n      tok = \"<eof>\"\r\n    else\r\n      -- non-grammar tokens; ignore them\r\n      yep = false\r\n    end",
    "type": "statement:if"
  }, {
    "id": 418,
    "text": "tok = seminfoorig[i]",
    "type": "statement:assign"
  }, {
    "id": 419,
    "text": "tok = \"<name>\"",
    "type": "statement:assign"
  }, {
    "id": 420,
    "text": "seminfolist[j] = seminfoorig[i]",
    "type": "statement:assign"
  }, {
    "id": 421,
    "text": "tok = \"<number>\"",
    "type": "statement:assign"
  }, {
    "id": 422,
    "text": "seminfolist[j] = 0",
    "type": "statement:assign"
  }, {
    "id": 423,
    "text": "tok = \"<string>\"",
    "type": "statement:assign"
  }, {
    "id": 424,
    "text": "seminfolist[j] = \"\"",
    "type": "statement:assign"
  }, {
    "id": 425,
    "text": "tok = \"<eof>\"",
    "type": "statement:assign"
  }, {
    "id": 426,
    "text": "yep = false",
    "type": "statement:assign"
  }, {
    "id": 427,
    "text": "if yep then  -- set rest of the information\r\n      toklist[j] = tok\r\n      toklnlist[j] = toklnorig[i]\r\n      xreflist[j] = i\r\n      j = j + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 428,
    "text": "toklist[j] = tok",
    "type": "statement:assign"
  }, {
    "id": 429,
    "text": "toklnlist[j] = toklnorig[i]",
    "type": "statement:assign"
  }, {
    "id": 430,
    "text": "xreflist[j] = i",
    "type": "statement:assign"
  }, {
    "id": 431,
    "text": "j = j + 1",
    "type": "statement:assign"
  }, {
    "id": 432,
    "text": "globalinfo, globallookup, localinfo = {}, {}, {}",
    "type": "statement:assign"
  }, {
    "id": 433,
    "text": "ilocalinfo, ilocalrefs = {}, {}",
    "type": "statement:assign"
  }, {
    "id": 434,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 435,
    "text": "",
    "type": "function container"
  }, {
    "id": 436,
    "text": "function minify_string(dat)\r\n\tllex.init(dat)\r\n\tllex.llex()\r\n\tlocal toklist, seminfolist, toklnlist\r\n\t= llex.tok, llex.seminfo, llex.tokln\r\n\tif option[\"opt-locals\"] then\r\n\t\toptparser.print = print  -- hack\r\n\t\tlparser.init(toklist, seminfolist, toklnlist)\r\n\t\tlocal globalinfo, localinfo = lparser.parser()\r\n\t\toptparser.optimize(option, toklist, seminfolist, globalinfo, localinfo)\r\n\tend\r\n\toptlex.print = print  -- hack\r\n\ttoklist, seminfolist, toklnlist\r\n\t\t= optlex.optimize(option, toklist, seminfolist, toklnlist)\r\n\tlocal dat = table.concat(seminfolist)\r\n\t-- depending on options selected, embedded EOLs in long strings and\r\n\t-- long comments may not have been translated to \\n, tack a warning\r\n\tif string.find(dat, \"\\r\\n\", 1, 1) or\r\n\t\tstring.find(dat, \"\\n\\r\", 1, 1) then\r\n\t\toptlex.warn.mixedeol = true\r\n\tend\r\n\treturn dat;\r\nend",
    "type": "function"
  }, {
    "id": 437,
    "text": "string",
    "type": "module"
  }, {
    "id": 438,
    "text": "format",
    "type": "global function"
  }, {
    "id": 439,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 440,
    "text": "module",
    "type": "global function"
  }, {
    "id": 441,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 442,
    "text": "e",
    "type": "global function"
  }, {
    "id": 443,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 444,
    "text": "require",
    "type": "global function"
  }, {
    "id": 445,
    "text": "_M[fn]",
    "type": "global function"
  }, {
    "id": 446,
    "text": "",
    "type": "variable container"
  }, {
    "id": 447,
    "text": "",
    "type": "require container"
  }, {
    "id": 448,
    "text": "",
    "type": "local variable"
  }, {
    "id": 449,
    "text": "",
    "type": "n/a"
  }, {
    "id": 450,
    "text": "",
    "type": "local variable"
  }, {
    "id": 451,
    "text": "",
    "type": "local variable"
  }, {
    "id": 452,
    "text": "",
    "type": "local variable"
  }, {
    "id": 453,
    "text": "",
    "type": "local variable"
  }, {
    "id": 454,
    "text": "",
    "type": "local variable"
  }, {
    "id": 455,
    "text": "",
    "type": "local variable"
  }, {
    "id": 456,
    "text": "",
    "type": "local variable"
  }, {
    "id": 457,
    "text": "",
    "type": "local variable"
  }, {
    "id": 458,
    "text": "",
    "type": "local variable"
  }, {
    "id": 459,
    "text": "",
    "type": "local variable"
  }, {
    "id": 460,
    "text": "",
    "type": "local variable"
  }, {
    "id": 461,
    "text": "",
    "type": "local variable"
  }, {
    "id": 462,
    "text": "",
    "type": "local variable"
  }, {
    "id": 463,
    "text": "",
    "type": "local variable"
  }, {
    "id": 464,
    "text": "",
    "type": "local variable"
  }, {
    "id": 465,
    "text": "",
    "type": "local variable"
  }, {
    "id": 466,
    "text": "",
    "type": "local variable"
  }, {
    "id": 467,
    "text": "",
    "type": "local variable"
  }, {
    "id": 468,
    "text": "",
    "type": "local variable"
  }, {
    "id": 469,
    "text": "",
    "type": "local variable"
  }, {
    "id": 470,
    "text": "",
    "type": "local variable"
  }, {
    "id": 471,
    "text": "",
    "type": "local variable"
  }, {
    "id": 472,
    "text": "",
    "type": "local variable"
  }, {
    "id": 473,
    "text": "",
    "type": "local variable"
  }, {
    "id": 474,
    "text": "",
    "type": "local variable"
  }, {
    "id": 475,
    "text": "",
    "type": "local variable"
  }, {
    "id": 476,
    "text": "",
    "type": "n/a"
  }, {
    "id": 477,
    "text": "",
    "type": "local variable"
  }, {
    "id": 478,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 479,
    "text": "",
    "type": "local variable"
  }, {
    "id": 480,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 481,
    "text": "",
    "type": "local variable"
  }, {
    "id": 482,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 483,
    "text": "",
    "type": "local variable"
  }, {
    "id": 484,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 485,
    "text": "",
    "type": "local variable"
  }, {
    "id": 486,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 487,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 488,
    "text": "",
    "type": "boolean"
  }, {
    "id": 489,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 490,
    "text": "",
    "type": "boolean"
  }, {
    "id": 491,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 492,
    "text": "",
    "type": "boolean"
  }, {
    "id": 493,
    "text": "",
    "type": "local variable"
  }, {
    "id": 494,
    "text": "",
    "type": "number"
  }, {
    "id": 495,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 496,
    "text": "",
    "type": "interface container"
  }, {
    "id": 497,
    "text": "",
    "type": "interface"
  }, {
    "id": 498,
    "text": "",
    "type": "require local variable"
  } ]
}