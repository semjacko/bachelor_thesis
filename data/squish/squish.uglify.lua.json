{
  "_filename": "squish.uglify.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/squish/uglify/squish.uglify.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 5
  }, {
    "from": 6,
    "label": "calls",
    "to": 126
  }, {
    "from": 6,
    "label": "calls",
    "to": 124
  }, {
    "from": 6,
    "label": "calls",
    "to": 124
  }, {
    "from": 2,
    "label": "contains",
    "to": 6
  }, {
    "from": 6,
    "label": "declares",
    "to": 3
  }, {
    "from": 6,
    "label": "declares",
    "to": 4
  }, {
    "from": 6,
    "label": "declares",
    "to": 5
  }, {
    "from": 6,
    "label": "calls",
    "to": 126
  }, {
    "from": 6,
    "label": "declares",
    "to": 7
  }, {
    "from": 6,
    "label": "declares",
    "to": 8
  }, {
    "from": 6,
    "label": "calls",
    "to": 9
  }, {
    "from": 6,
    "label": "calls",
    "to": 124
  }, {
    "from": 6,
    "label": "calls",
    "to": 124
  }, {
    "from": 6,
    "label": "declares",
    "to": 9
  }, {
    "from": 6,
    "label": "declares",
    "to": 10
  }, {
    "from": 6,
    "label": "calls",
    "to": 124
  }, {
    "from": 6,
    "label": "calls",
    "to": 124
  }, {
    "from": 6,
    "label": "calls",
    "to": 113
  }, {
    "from": 6,
    "label": "calls",
    "to": 119
  }, {
    "from": 6,
    "label": "calls",
    "to": 119
  }, {
    "from": 6,
    "label": "calls",
    "to": 15
  }, {
    "from": 6,
    "label": "calls",
    "to": 126
  }, {
    "from": 6,
    "label": "calls",
    "to": 126
  }, {
    "from": 6,
    "label": "calls",
    "to": 126
  }, {
    "from": 6,
    "label": "calls",
    "to": 126
  }, {
    "from": 6,
    "label": "declares",
    "to": 11
  }, {
    "from": 6,
    "label": "declares",
    "to": 12
  }, {
    "from": 6,
    "label": "declares",
    "to": 13
  }, {
    "from": 6,
    "label": "declares",
    "to": 14
  }, {
    "from": 6,
    "label": "declares",
    "to": 15
  }, {
    "from": 6,
    "label": "calls",
    "to": 117
  }, {
    "from": 6,
    "label": "calls",
    "to": 117
  }, {
    "from": 6,
    "label": "calls",
    "to": 117
  }, {
    "from": 6,
    "label": "calls",
    "to": 117
  }, {
    "from": 6,
    "label": "calls",
    "to": 117
  }, {
    "from": 6,
    "label": "calls",
    "to": 117
  }, {
    "from": 6,
    "label": "calls",
    "to": 117
  }, {
    "from": 6,
    "label": "calls",
    "to": 120
  }, {
    "from": 6,
    "label": "calls",
    "to": 121
  }, {
    "from": 6,
    "label": "calls",
    "to": 121
  }, {
    "from": 6,
    "label": "calls",
    "to": 121
  }, {
    "from": 6,
    "label": "calls",
    "to": 121
  }, {
    "from": 6,
    "label": "calls",
    "to": 118
  }, {
    "from": 6,
    "label": "calls",
    "to": 124
  }, {
    "from": 6,
    "label": "calls",
    "to": 124
  }, {
    "from": 6,
    "label": "calls",
    "to": 112
  }, {
    "from": 6,
    "label": "calls",
    "to": 112
  }, {
    "from": 6,
    "label": "calls",
    "to": 112
  }, {
    "from": 6,
    "label": "calls",
    "to": 113
  }, {
    "from": 6,
    "label": "calls",
    "to": 113
  }, {
    "from": 6,
    "label": "calls",
    "to": 113
  }, {
    "from": 6,
    "label": "calls",
    "to": 113
  }, {
    "from": 6,
    "label": "calls",
    "to": 27
  }, {
    "from": 6,
    "label": "calls",
    "to": 30
  }, {
    "from": 6,
    "label": "calls",
    "to": 119
  }, {
    "from": 6,
    "label": "calls",
    "to": 119
  }, {
    "from": 6,
    "label": "calls",
    "to": 119
  }, {
    "from": 6,
    "label": "calls",
    "to": 119
  }, {
    "from": 6,
    "label": "calls",
    "to": 119
  }, {
    "from": 6,
    "label": "calls",
    "to": 119
  }, {
    "from": 6,
    "label": "calls",
    "to": 119
  }, {
    "from": 6,
    "label": "calls",
    "to": 119
  }, {
    "from": 6,
    "label": "calls",
    "to": 119
  }, {
    "from": 6,
    "label": "calls",
    "to": 114
  }, {
    "from": 6,
    "label": "calls",
    "to": 114
  }, {
    "from": 6,
    "label": "calls",
    "to": 111
  }, {
    "from": 6,
    "label": "calls",
    "to": 111
  }, {
    "from": 6,
    "label": "calls",
    "to": 125
  }, {
    "from": 6,
    "label": "calls",
    "to": 122
  }, {
    "from": 6,
    "label": "calls",
    "to": 122
  }, {
    "from": 6,
    "label": "calls",
    "to": 122
  }, {
    "from": 6,
    "label": "calls",
    "to": 28
  }, {
    "from": 6,
    "label": "declares",
    "to": 16
  }, {
    "from": 6,
    "label": "declares",
    "to": 17
  }, {
    "from": 6,
    "label": "declares",
    "to": 18
  }, {
    "from": 6,
    "label": "declares",
    "to": 19
  }, {
    "from": 6,
    "label": "declares",
    "to": 20
  }, {
    "from": 6,
    "label": "declares",
    "to": 21
  }, {
    "from": 6,
    "label": "declares",
    "to": 22
  }, {
    "from": 6,
    "label": "declares",
    "to": 23
  }, {
    "from": 6,
    "label": "declares",
    "to": 24
  }, {
    "from": 6,
    "label": "declares",
    "to": 25
  }, {
    "from": 6,
    "label": "declares",
    "to": 26
  }, {
    "from": 6,
    "label": "declares",
    "to": 27
  }, {
    "from": 6,
    "label": "declares",
    "to": 28
  }, {
    "from": 6,
    "label": "declares",
    "to": 29
  }, {
    "from": 6,
    "label": "declares",
    "to": 30
  }, {
    "from": 6,
    "label": "declares",
    "to": 31
  }, {
    "from": 6,
    "label": "declares",
    "to": 32
  }, {
    "from": 6,
    "label": "declares",
    "to": 33
  }, {
    "from": 6,
    "label": "declares",
    "to": 34
  }, {
    "from": 6,
    "label": "declares",
    "to": 35
  }, {
    "from": 6,
    "label": "declares",
    "to": 36
  }, {
    "from": 6,
    "label": "declares",
    "to": 37
  }, {
    "from": 6,
    "label": "declares",
    "to": 38
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 49
  }, {
    "from": 41,
    "label": "has",
    "to": 50
  }, {
    "from": 41,
    "label": "has",
    "to": 51
  }, {
    "from": 41,
    "label": "has",
    "to": 52
  }, {
    "from": 41,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 41,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 41,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 61
  }, {
    "from": 41,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 41,
    "label": "has",
    "to": 64
  }, {
    "from": 41,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 41,
    "label": "has",
    "to": 67
  }, {
    "from": 41,
    "label": "has",
    "to": 68
  }, {
    "from": 41,
    "label": "has",
    "to": 69
  }, {
    "from": 41,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 73,
    "label": "has",
    "to": 78
  }, {
    "from": 70,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 70,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 45
  }, {
    "from": 70,
    "label": "has",
    "to": 83
  }, {
    "from": 70,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 70,
    "label": "has",
    "to": 86
  }, {
    "from": 70,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 41,
    "label": "has",
    "to": 91
  }, {
    "from": 41,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 41,
    "label": "has",
    "to": 94
  }, {
    "from": 41,
    "label": "has",
    "to": 95
  }, {
    "from": 41,
    "label": "has",
    "to": 96
  }, {
    "from": 41,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 98,
    "label": "has",
    "to": 102
  }, {
    "from": 41,
    "label": "has",
    "to": 103
  }, {
    "from": 41,
    "label": "has",
    "to": 104
  }, {
    "from": 41,
    "label": "has",
    "to": 59
  }, {
    "from": 41,
    "label": "has",
    "to": 60
  }, {
    "from": 41,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 66
  }, {
    "from": 107,
    "label": "has",
    "to": 45
  }, {
    "from": 6,
    "label": "calls",
    "to": 41
  }, {
    "from": 41,
    "label": "calls",
    "to": 109
  }, {
    "from": 41,
    "label": "calls",
    "to": 109
  }, {
    "from": 41,
    "label": "calls",
    "to": 109
  }, {
    "from": 41,
    "label": "calls",
    "to": 113
  }, {
    "from": 41,
    "label": "calls",
    "to": 113
  }, {
    "from": 41,
    "label": "calls",
    "to": 113
  }, {
    "from": 41,
    "label": "calls",
    "to": 113
  }, {
    "from": 41,
    "label": "calls",
    "to": 113
  }, {
    "from": 41,
    "label": "calls",
    "to": 40
  }, {
    "from": 41,
    "label": "calls",
    "to": 39
  }, {
    "from": 41,
    "label": "calls",
    "to": 123
  }, {
    "from": 41,
    "label": "calls",
    "to": 123
  }, {
    "from": 41,
    "label": "calls",
    "to": 121
  }, {
    "from": 41,
    "label": "calls",
    "to": 121
  }, {
    "from": 41,
    "label": "calls",
    "to": 118
  }, {
    "from": 41,
    "label": "calls",
    "to": 111
  }, {
    "from": 41,
    "label": "calls",
    "to": 111
  }, {
    "from": 41,
    "label": "calls",
    "to": 111
  }, {
    "from": 41,
    "label": "calls",
    "to": 115
  }, {
    "from": 41,
    "label": "calls",
    "to": 115
  }, {
    "from": 41,
    "label": "calls",
    "to": 110
  }, {
    "from": 41,
    "label": "calls",
    "to": 110
  }, {
    "from": 41,
    "label": "calls",
    "to": 110
  }, {
    "from": 41,
    "label": "calls",
    "to": 110
  }, {
    "from": 41,
    "label": "calls",
    "to": 108
  }, {
    "from": 6,
    "label": "calls",
    "to": 124
  }, {
    "from": 6,
    "label": "calls",
    "to": 124
  }, {
    "from": 6,
    "label": "calls",
    "to": 126
  }, {
    "from": 41,
    "label": "calls",
    "to": 116
  }, {
    "from": 41,
    "label": "calls",
    "to": 119
  }, {
    "from": 41,
    "label": "calls",
    "to": 119
  }, {
    "from": 6,
    "label": "declares",
    "to": 41
  }, {
    "from": 6,
    "label": "declares",
    "to": 106
  }, {
    "from": 6,
    "label": "declares",
    "to": 107
  }, {
    "from": 2,
    "label": "contains",
    "to": 127
  }, {
    "from": 2,
    "label": "contains",
    "to": 128
  }, {
    "from": 128,
    "label": "initializes",
    "to": 129
  }, {
    "from": 2,
    "label": "contains",
    "to": 130
  }, {
    "from": 2,
    "label": "contains",
    "to": 131
  }, {
    "from": 131,
    "label": "initializes",
    "to": 132
  }, {
    "from": 2,
    "label": "contains",
    "to": 133
  }, {
    "from": 2,
    "label": "contains",
    "to": 134
  }, {
    "from": 2,
    "label": "contains",
    "to": 135
  }, {
    "from": 2,
    "label": "contains",
    "to": 136
  }, {
    "from": 135,
    "label": "initializes",
    "to": 137
  }, {
    "from": 135,
    "label": "initializes",
    "to": 138
  }, {
    "from": 136,
    "label": "initializes",
    "to": 139
  }, {
    "from": 136,
    "label": "initializes",
    "to": 140
  }, {
    "from": 136,
    "label": "initializes",
    "to": 141
  }, {
    "from": 136,
    "label": "initializes",
    "to": 142
  }, {
    "from": 2,
    "label": "contains",
    "to": 143
  }, {
    "from": 2,
    "label": "contains",
    "to": 144
  }, {
    "from": 144,
    "label": "initializes",
    "to": 145
  }, {
    "from": 2,
    "label": "contains",
    "to": 146
  }, {
    "from": 2,
    "label": "contains",
    "to": 147
  }, {
    "from": 146,
    "label": "initializes",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 146,
    "label": "initializes",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 151,
    "label": "assigns",
    "to": 153
  }, {
    "from": 151,
    "label": "assigns",
    "to": 154
  }, {
    "from": 151,
    "label": "assigns",
    "to": 155
  }, {
    "from": 151,
    "label": "assigns",
    "to": 156
  }, {
    "from": 151,
    "label": "assigns",
    "to": 157
  }, {
    "from": 151,
    "label": "assigns",
    "to": 158
  }, {
    "from": 151,
    "label": "assigns",
    "to": 159
  }, {
    "from": 151,
    "label": "assigns",
    "to": 160
  }, {
    "from": 151,
    "label": "assigns",
    "to": 161
  }, {
    "from": 151,
    "label": "assigns",
    "to": 162
  }, {
    "from": 151,
    "label": "assigns",
    "to": 163
  }, {
    "from": 151,
    "label": "assigns",
    "to": 164
  }, {
    "from": 151,
    "label": "assigns",
    "to": 165
  }, {
    "from": 151,
    "label": "assigns",
    "to": 166
  }, {
    "from": 151,
    "label": "assigns",
    "to": 167
  }, {
    "from": 151,
    "label": "assigns",
    "to": 168
  }, {
    "from": 151,
    "label": "assigns",
    "to": 169
  }, {
    "from": 151,
    "label": "assigns",
    "to": 170
  }, {
    "from": 151,
    "label": "assigns",
    "to": 171
  }, {
    "from": 151,
    "label": "assigns",
    "to": 172
  }, {
    "from": 147,
    "label": "initializes",
    "to": 173
  }, {
    "from": 173,
    "label": "requires",
    "to": 1
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 10
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 106
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 107
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "llex",
    "type": "module"
  }, {
    "id": 2,
    "text": "squish",
    "type": "module"
  }, {
    "id": 3,
    "text": "function compile_string(str, name)\r\n\t-- Strips debug info, if you're wondering :)\r\n\tlocal chunk = string.dump(loadstring(str, name));\r\n\tif ((not opts.debug) or opts.compile_strip) and opts.compile_strip ~= false then\r\n\t\tlocal c = cs.disassemble(chunk);\r\n\t\tlocal function strip_debug(c)\r\n\t\t\tc.source_lines, c.locals, c.upvalues = {}, {}, {};\r\n\t\t\t\r\n\t\t\tfor i, f in ipairs(c.prototypes) do\r\n\t\t\t\tstrip_debug(f);\r\n\t\t\tend\r\n\t\tend\r\n\t\tprint_verbose(\"Stripping debug info...\");\r\n\t\tstrip_debug(c.body);\r\n\t\treturn cs.assemble(c);\r\n\tend\r\n\treturn chunk;\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function strip_debug(c)\r\n\t\t\tc.source_lines, c.locals, c.upvalues = {}, {}, {};\r\n\t\t\t\r\n\t\t\tfor i, f in ipairs(c.prototypes) do\r\n\t\t\t\tstrip_debug(f);\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function compile_file(infile_fn, outfile_fn)\r\n\tlocal infile, err = io.open(infile_fn);\r\n\tif not infile then\r\n\t\tprint_err(\"Can't open input file for reading: \"..tostring(err));\r\n\t\treturn;\r\n\tend\r\n\t\r\n\tlocal outfile, err = io.open(outfile_fn..\".compiled\", \"w+\");\r\n\tif not outfile then\r\n\t\tprint_err(\"Can't open output file for writing: \"..tostring(err));\r\n\t\treturn;\r\n\tend\r\n\t\r\n\tlocal data = infile:read(\"*a\");\r\n\tinfile:close();\r\n\t\r\n\tlocal shebang, newdata = data:match(\"^(#.-\\n)(.+)$\");\r\n\tlocal code = newdata or data;\r\n\tif shebang then\r\n\t\toutfile:write(shebang)\r\n\tend\r\n\r\n\toutfile:write(compile_string(code, outfile_fn));\r\n\t\r\n\tos.rename(outfile_fn..\".compiled\", outfile_fn);\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "",
    "type": "function container"
  }, {
    "id": 7,
    "text": "local function ___adjust_chunk(chunk, newname, lineshift)\r\n\tlocal c = cs.disassemble(string.dump(chunk));\r\n\tc.body.name = newname;\r\n\r\n\tlineshift = -c.body.line;\r\n\tlocal function shiftlines(c)\r\n\t\tc.line = c.line + lineshift;\r\n\t\tc.last_line = c.last_line + lineshift;\r\n\t\tfor i, line in ipairs(c.source_lines) do\r\n\t\t\tc.source_lines[i] = line+lineshift;\r\n\t\tend\r\n\t\tfor i, f in ipairs(c.prototypes) do\r\n\t\t\tshiftlines(f);\r\n\t\tend\r\n\tend\r\n\tshiftlines(c.body);\r\n\r\n\treturn assert(loadstring(cs.assemble(c), newname))();\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local function shiftlines(c)\r\n\t\tc.line = c.line + lineshift;\r\n\t\tc.last_line = c.last_line + lineshift;\r\n\t\tfor i, line in ipairs(c.source_lines) do\r\n\t\t\tc.source_lines[i] = line+lineshift;\r\n\t\tend\r\n\t\tfor i, f in ipairs(c.prototypes) do\r\n\t\t\tshiftlines(f);\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function gzip_file(infile_fn, outfile_fn)\r\n\tlocal infile, err = io.open(infile_fn);\r\n\tif not infile then\r\n\t\tprint_err(\"Can't open input file for reading: \"..tostring(err));\r\n\t\treturn;\r\n\tend\r\n\t\r\n\tlocal outfile, err = io.open(outfile_fn..\".gzipped\", \"wb+\");\r\n\tif not outfile then\r\n\t\tprint_err(\"Can't open output file for writing: \"..tostring(err));\r\n\t\treturn;\r\n\tend\r\n\t\r\n\tlocal data = infile:read(\"*a\");\r\n\tinfile:close();\r\n\t\r\n\tlocal shebang, newdata = data:match(\"^(#.-\\n)(.+)$\");\r\n\tlocal code = newdata or data;\r\n\tif shebang then\r\n\t\toutfile:write(shebang)\r\n\tend\r\n\t\r\n\tlocal file_with_no_shebang, err = io.open(outfile_fn..\".pregzip\", \"wb+\");\r\n\tif not file_with_no_shebang then\r\n\t\tprint_err(\"Can't open temp file for writing: \"..tostring(err));\r\n\t\treturn;\r\n\tend\r\n\t\r\n\tfile_with_no_shebang:write(code);\r\n\tfile_with_no_shebang:close();\r\n\r\n\tlocal compressed = io.popen(\"gzip -c '\"..outfile_fn..\".pregzip'\");\r\n\tcode = compressed:read(\"*a\");\r\n\tcompressed:close();\r\n\tos.remove(outfile_fn..\".pregzip\");\r\n\r\n\tlocal maxequals = 0;\r\n\tcode:gsub(\"(=+)\", function (equals_string) maxequals = math.max(maxequals, #equals_string); end);\r\n\t\r\n\toutfile:write(\"local ungz = (function ()\", require_resource \"gunzip.lua\", \" end)()\\n\");\r\n\t\t\r\n\toutfile:write[[return assert(loadstring((function (i)local o={} ungz{input=i,output=function(b)table.insert(o,string.char(b))end}return table.concat(o)end) ]];\r\n\r\n\t--outfile:write [[return assert(loadstring(_gunzip]]\r\n\toutfile:write((string.format(\"%q\", code):gsub(\"\\026\", \"\\\\026\")));\r\n\t--outfile:write(\"[\", string.rep(\"=\", maxequals+1), \"[\", code, \"]\", string.rep(\"=\", maxequals+1), \"]\");\r\n\toutfile:write(\", '@\", outfile_fn,\"'))()\");\r\n\toutfile:close();\r\n\tos.rename(outfile_fn..\".gzipped\", outfile_fn);\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function (equals_string) maxequals = math.max(maxequals, #equals_string); end",
    "type": "function"
  }, {
    "id": 11,
    "text": "local function die(msg)\r\n  print_err(\"minify: \"..msg); os.exit(1);\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local function load_file(fname)\r\n  local INF = io.open(fname, \"rb\")\r\n  if not INF then die(\"cannot open \\\"\"..fname..\"\\\" for reading\") end\r\n  local dat = INF:read(\"*a\")\r\n  if not dat then die(\"cannot read from \\\"\"..fname..\"\\\"\") end\r\n  INF:close()\r\n  return dat\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local function save_file(fname, dat)\r\n  local OUTF = io.open(fname, \"wb\")\r\n  if not OUTF then die(\"cannot open \\\"\"..fname..\"\\\" for writing\") end\r\n  local status = OUTF:write(dat)\r\n  if not status then die(\"cannot write to \\\"\"..fname..\"\\\"\") end\r\n  OUTF:close()\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "function minify_string(dat)\r\n\tllex.init(dat)\r\n\tllex.llex()\r\n\tlocal toklist, seminfolist, toklnlist\r\n\t= llex.tok, llex.seminfo, llex.tokln\r\n\tif option[\"opt-locals\"] then\r\n\t\toptparser.print = print  -- hack\r\n\t\tlparser.init(toklist, seminfolist, toklnlist)\r\n\t\tlocal globalinfo, localinfo = lparser.parser()\r\n\t\toptparser.optimize(option, toklist, seminfolist, globalinfo, localinfo)\r\n\tend\r\n\toptlex.print = print  -- hack\r\n\ttoklist, seminfolist, toklnlist\r\n\t\t= optlex.optimize(option, toklist, seminfolist, toklnlist)\r\n\tlocal dat = table.concat(seminfolist)\r\n\t-- depending on options selected, embedded EOLs in long strings and\r\n\t-- long comments may not have been translated to \\n, tack a warning\r\n\tif string.find(dat, \"\\r\\n\", 1, 1) or\r\n\t\tstring.find(dat, \"\\n\\r\", 1, 1) then\r\n\t\toptlex.warn.mixedeol = true\r\n\tend\r\n\treturn dat;\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "function minify_file(srcfl, destfl)\r\n\tlocal z = load_file(srcfl);\r\n\tz = minify_string(z);\r\n\tsave_file(destfl, z);\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "function () end",
    "type": "function"
  }, {
    "id": 17,
    "text": "function Module(name)\r\n\tif modules[name] then\r\n\t\tprint_verbose(\"Ignoring duplicate module definition for \"..name);\r\n\t\treturn function () end\r\n\tend\r\n\tlocal i = #modules+1;\r\n\tmodules[i] = { name = name, url = ___fetch_url };\r\n\tmodules[name] = modules[i];\r\n\treturn function (path)\r\n\t\tmodules[i].path = path;\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function Resource(name, path)\r\n\tlocal i = #resources+1;\r\n\tresources[i] = { name = name, path = path or name };\r\n\treturn function (path)\r\n\t\tresources[i].path = path;\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function AutoFetchURL(url)\r\n\t___fetch_url = url;\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "function Main(fn)\r\n\ttable.insert(main_files, fn);\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "function Output(fn)\r\n\tif opts.output == nil then\r\n\t\tout_fn = fn;\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function Option(name)\r\n\tname = name:gsub(\"%-\", \"_\");\r\n\tif opts[name] == nil then\r\n\t\topts[name] = true;\r\n\t\treturn function (value)\r\n\t\t\topts[name] = value;\r\n\t\tend\r\n\telse\r\n\t\treturn function () end;\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "function GetOption(name)\r\n\treturn opts[name:gsub('%-', '_')];\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "function Message(message)\r\n\tif not opts.quiet then\r\n\t\tprint_info(message);\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "function Error(message)\r\n\tif not opts.very_quiet then\r\n\t\tprint_err(message);\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "function Exit()\r\n\tos.exit(1);\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "function fetch.filesystem(path)\r\n\tlocal f, err = io.open(path);\r\n\tif not f then return false, err; end\r\n\t\r\n\tlocal data = f:read(\"*a\");\r\n\tf:close();\r\n\t\r\n\treturn data;\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "function fetch.http(url)\r\n\t\tlocal http = require \"socket.http\";\r\n\t\t\r\n\t\tlocal body, status = http.request(url);\r\n\t\tif status == 200 then\r\n\t\t\treturn body;\r\n\t\tend\r\n\t\treturn false, \"HTTP status code: \"..tostring(status);\r\n\tend",
    "type": "function"
  }, {
    "id": 29,
    "text": "function fetch.http(url)\r\n\t\treturn false, \"Module not found. Re-squish with --use-http option to fetch it from \"..url;\r\n\tend",
    "type": "function"
  }, {
    "id": 30,
    "text": "function resolve_module(name, path)\r\n\t        name = name:gsub(\"%.\", LUA_DIRSEP);\r\n\t        for c in path:gmatch(\"[^;]+\") do\r\n\t                c = c:gsub(\"%\"..LUA_PATH_MARK, name);\r\n\t                print_debug(\"Looking for \"..c)\r\n\t                local f = io.open(c);\r\n\t                if f then\r\n\t                \tprint_debug(\"Found!\");\r\n\t                        f:close();\r\n                        return c;\r\n                \tend\r\n        \tend\r\n        \treturn nil; -- not found\r\n\tend",
    "type": "function"
  }, {
    "id": 31,
    "text": "function () end",
    "type": "function"
  }, {
    "id": 32,
    "text": "function (path)\r\n\t\tmodules[i].path = path;\r\n\tend",
    "type": "function"
  }, {
    "id": 33,
    "text": "function (path)\r\n\t\tresources[i].path = path;\r\n\tend",
    "type": "function"
  }, {
    "id": 34,
    "text": "function (value)\r\n\t\t\topts[name] = value;\r\n\t\tend",
    "type": "function"
  }, {
    "id": 35,
    "text": "function () end",
    "type": "function"
  }, {
    "id": 36,
    "text": "function (path)\r\n\t\t\tif not path:match(\"^%\"..LUA_DIRSEP) then\r\n\t\t\t\treturn base_path..path;\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 37,
    "text": "function (path)\r\n\t\t\tif not path:match(\"^%\"..LUA_DIRSEP) then\r\n\t\t\t\treturn base_path..path;\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 38,
    "text": "function (equals_string) maxequals = math.max(maxequals, #equals_string); end",
    "type": "function"
  }, {
    "id": 39,
    "text": "function init(_z, _sourceid)\r\n  z = _z                        -- source\r\n  sourceid = _sourceid          -- name of source\r\n  I = 1                         -- lexer's position in source\r\n  ln = 1                        -- line number\r\n  tok = {}                      -- lexed token list*\r\n  seminfo = {}                  -- lexed semantic information list*\r\n  tokln = {}                    -- line numbers for messages*\r\n                                -- (*) externally visible thru' module\r\n  --------------------------------------------------------------------\r\n  -- initial processing (shbang handling)\r\n  --------------------------------------------------------------------\r\n  local p, _, q, r = find(z, \"^(#[^\\r\\n]*)(\\r?\\n?)\")\r\n  if p then                             -- skip first line\r\n    I = I + #q\r\n    addtoken(\"TK_COMMENT\", q)\r\n    if #r > 0 then inclinenumber(I, true) end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "function llex()\r\n  local find = find\r\n  local match = match\r\n  while true do--outer\r\n    local i = I\r\n    -- inner loop allows break to be used to nicely section tests\r\n    while true do--inner\r\n      ----------------------------------------------------------------\r\n      local p, _, r = find(z, \"^([_%a][_%w]*)\", i)\r\n      if p then\r\n        I = i + #r\r\n        if kw[r] then\r\n          addtoken(\"TK_KEYWORD\", r)             -- reserved word (keyword)\r\n        else\r\n          addtoken(\"TK_NAME\", r)                -- identifier\r\n        end\r\n        break -- (continue)\r\n      end\r\n      ----------------------------------------------------------------\r\n      local p, _, r = find(z, \"^(%.?)%d\", i)\r\n      if p then                                 -- numeral\r\n        if r == \".\" then i = i + 1 end\r\n        local _, q, r = find(z, \"^%d*[%.%d]*([eE]?)\", i)\r\n        i = q + 1\r\n        if #r == 1 then                         -- optional exponent\r\n          if match(z, \"^[%+%-]\", i) then        -- optional sign\r\n            i = i + 1\r\n          end\r\n        end\r\n        local _, q = find(z, \"^[_%w]*\", i)\r\n        I = q + 1\r\n        local v = sub(z, p, q)                  -- string equivalent\r\n        if not base.tonumber(v) then            -- handles hex test also\r\n          errorline(\"malformed number\")\r\n        end\r\n        addtoken(\"TK_NUMBER\", v)\r\n        break -- (continue)\r\n      end\r\n      ----------------------------------------------------------------\r\n      local p, q, r, t = find(z, \"^((%s)[ \\t\\v\\f]*)\", i)\r\n      if p then\r\n        if t == \"\\n\" or t == \"\\r\" then          -- newline\r\n          inclinenumber(i, true)\r\n        else\r\n          I = q + 1                             -- whitespace\r\n          addtoken(\"TK_SPACE\", r)\r\n        end\r\n        break -- (continue)\r\n      end\r\n      ----------------------------------------------------------------\r\n      local r = match(z, \"^%p\", i)\r\n      if r then\r\n        buff = i\r\n        local p = find(\"-[\\\"\\'.=<>~\", r, 1, true)\r\n        if p then\r\n          -- two-level if block for punctuation/symbols\r\n          --------------------------------------------------------\r\n          if p <= 2 then\r\n            if p == 1 then                      -- minus\r\n              local c = match(z, \"^%-%-(%[?)\", i)\r\n              if c then\r\n                i = i + 2\r\n                local sep = -1\r\n                if c == \"[\" then\r\n                  sep = skip_sep(i)\r\n                end\r\n                if sep >= 0 then                -- long comment\r\n                  addtoken(\"TK_LCOMMENT\", read_long_string(false, sep))\r\n                else                            -- short comment\r\n                  I = find(z, \"[\\n\\r]\", i) or (#z + 1)\r\n                  addtoken(\"TK_COMMENT\", sub(z, buff, I - 1))\r\n                end\r\n                break -- (continue)\r\n              end\r\n              -- (fall through for \"-\")\r\n            else                                -- [ or long string\r\n              local sep = skip_sep(i)\r\n              if sep >= 0 then\r\n                addtoken(\"TK_LSTRING\", read_long_string(true, sep))\r\n              elseif sep == -1 then\r\n                addtoken(\"TK_OP\", \"[\")\r\n              else\r\n                errorline(\"invalid long string delimiter\")\r\n              end\r\n              break -- (continue)\r\n            end\r\n          --------------------------------------------------------\r\n          elseif p <= 5 then\r\n            if p < 5 then                       -- strings\r\n              I = i + 1\r\n              addtoken(\"TK_STRING\", read_string(r))\r\n              break -- (continue)\r\n            end\r\n            r = match(z, \"^%.%.?%.?\", i)        -- .|..|... dots\r\n            -- (fall through)\r\n          --------------------------------------------------------\r\n          else                                  -- relational\r\n            r = match(z, \"^%p=?\", i)\r\n            -- (fall through)\r\n          end\r\n        end\r\n        I = i + #r\r\n        addtoken(\"TK_OP\", r)  -- for other symbols, fall through\r\n        break -- (continue)\r\n      end\r\n      ----------------------------------------------------------------\r\n      local r = sub(z, i, i)\r\n      if r ~= \"\" then\r\n        I = i + 1\r\n        addtoken(\"TK_OP\", r)                    -- other single-char tokens\r\n        break\r\n      end\r\n      addtoken(\"TK_EOS\", \"\")                    -- end of stream,\r\n      return                                    -- exit here\r\n      ----------------------------------------------------------------\r\n    end--while inner\r\n  end--while outer\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "function uglify_file(infile_fn, outfile_fn)\r\n\tlocal infile, err = io.open(infile_fn);\r\n\tif not infile then\r\n\t\tprint_err(\"Can't open input file for reading: \"..tostring(err));\r\n\t\treturn;\r\n\tend\r\n\t\r\n\tlocal outfile, err = io.open(outfile_fn..\".uglified\", \"wb+\");\r\n\tif not outfile then\r\n\t\tprint_err(\"Can't open output file for writing: \"..tostring(err));\r\n\t\treturn;\r\n\tend\r\n\t\r\n\tlocal data = infile:read(\"*a\");\r\n\tinfile:close();\r\n\t\r\n\tlocal shebang, newdata = data:match(\"^(#.-\\n)(.+)$\");\r\n\tlocal code = newdata or data;\r\n\tif shebang then\r\n\t\toutfile:write(shebang)\r\n\tend\r\n\r\n\t\r\n\twhile base_char + #keywords <= 255 and code:find(\"[\"..string.char(base_char)..\"-\"..string.char(base_char+#keywords-1)..\"]\") do\r\n\t\tbase_char = base_char + 1;\r\n\tend\r\n\tif base_char + #keywords > 255 then\r\n\t\t-- Sorry, can't uglify this file :(\r\n\t\t-- We /could/ use a multi-byte marker, but that would complicate\r\n\t\t-- things and lower the compression ratio (there are quite a few \r\n\t\t-- 2-letter keywords)\r\n\t\toutfile:write(code);\r\n\t\toutfile:close();\r\n\t\tos.rename(outfile_fn..\".uglified\", outfile_fn);\r\n\t\treturn;\r\n\tend\r\n\r\n\tlocal keyword_map_to_char = {}\r\n\tfor i, keyword in ipairs(keywords) do\r\n\t\tkeyword_map_to_char[keyword] = string.char(base_char + i);\r\n\tend\r\n\r\n\t-- Write loadstring and open string\r\n\tlocal maxequals = 0;\r\n\tdata:gsub(\"(=+)\", function (equals_string) maxequals = math.max(maxequals, #equals_string); end);\r\n\t\r\n\t-- Go lexer!\r\n\tllex.init(code, \"@\"..infile_fn);\r\n\tllex.llex()\r\n\tlocal seminfo = llex.seminfo;\r\n\t\r\n\tif opts.uglify_level == \"full\" and base_char+#keywords < 255 then\r\n\t\t-- Find longest TK_NAME and TK_STRING tokens\r\n\t\tlocal scores = {};\r\n\t\tfor k,v in ipairs(llex.tok) do\r\n\t\t\tif v == \"TK_NAME\" or v == \"TK_STRING\" then\r\n\t\t\t\tlocal key = string.format(\"%q,%q\", v, seminfo[k]);\r\n\t\t\t\tif not scores[key] then\r\n\t\t\t\t\tscores[key] = { type = v, value = seminfo[k], count = 0 };\r\n\t\t\t\t\tscores[#scores+1] = scores[key];\r\n\t\t\t\tend\r\n\t\t\t\tscores[key].count = scores[key].count + 1;\r\n\t\t\tend\r\n\t\tend\r\n\t\tfor i=1,#scores do\r\n\t\t\tlocal v = scores[i];\r\n\t\t\tv.score = (v.count)*(#v.value-1)- #string.format(\"%q\", v.value) - 1;\r\n\t\tend\r\n\t\ttable.sort(scores, function (a, b) return a.score > b.score; end);\r\n\t\tlocal free_space = 255-(base_char+#keywords);\r\n\t\tfor i=free_space+1,#scores do\r\n\t\t\tscores[i] = nil; -- Drop any over the limit\r\n\t\tend\r\n\t\r\n\t\tlocal base_keywords_len = #keywords;\r\n\t\tfor k,v in ipairs(scores) do\r\n\t\t\tif v.score > 0 then\r\n\t\t\t\ttable.insert(keywords, v.value);\r\n\t\t\t\tkeyword_map_to_char[v.value] = string.char(base_char+base_keywords_len+k);\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\t\r\n\toutfile:write(\"local base_char,keywords=\", tostring(base_char), \",{\");\r\n\tfor _, keyword in ipairs(keywords) do\r\n\t\toutfile:write(string.format(\"%q\", keyword), ',');\r\n\tend\r\n\toutfile:write[[}; function prettify(code) return code:gsub(\"[\"..string.char(base_char)..\"-\"..string.char(base_char+#keywords)..\"]\", \r\n\tfunction (c) return keywords[c:byte()-base_char]; end) end ]]\r\n\t\r\n\toutfile:write [[return assert(loadstring(prettify]]\r\n\toutfile:write(\"[\", string.rep(\"=\", maxequals+1), \"[\");\r\n\t\r\n\t-- Write code, substituting tokens as we go\r\n\tfor k,v in ipairs(llex.tok) do\r\n\t\tif v == \"TK_KEYWORD\" or v == \"TK_NAME\" or v == \"TK_STRING\" then\r\n\t\t\tlocal keyword_char = keyword_map_to_char[seminfo[k]];\r\n\t\t\tif keyword_char then\r\n\t\t\t\toutfile:write(keyword_char);\r\n\t\t\telse -- Those who think Lua shouldn't have 'continue, fix this please :)\r\n\t\t\t\toutfile:write(seminfo[k]);\r\n\t\t\tend\r\n\t\telse\r\n\t\t\toutfile:write(seminfo[k]);\r\n\t\tend\r\n\tend\r\n\r\n\t-- Close string/functions\t\r\n\toutfile:write(\"]\", string.rep(\"=\", maxequals+1), \"]\");\r\n\toutfile:write(\", '@\", outfile_fn,\"'))()\");\r\n\toutfile:close();\r\n\tos.rename(outfile_fn..\".uglified\", outfile_fn);\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local infile, err = io.open(infile_fn)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if not infile then\r\n\t\tprint_err(\"Can't open input file for reading: \"..tostring(err));\r\n\t\treturn;\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "print_err(\"Can't open input file for reading: \"..tostring(err))",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 46,
    "text": "local outfile, err = io.open(outfile_fn..\".uglified\", \"wb+\")",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "if not outfile then\r\n\t\tprint_err(\"Can't open output file for writing: \"..tostring(err));\r\n\t\treturn;\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "print_err(\"Can't open output file for writing: \"..tostring(err))",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "local data = infile:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "infile:close()",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "local shebang, newdata = data:match(\"^(#.-\\n)(.+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local code = newdata or data",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "if shebang then\r\n\t\toutfile:write(shebang)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "outfile:write(shebang)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "while base_char + #keywords <= 255 and code:find(\"[\"..string.char(base_char)..\"-\"..string.char(base_char+#keywords-1)..\"]\") do\r\n\t\tbase_char = base_char + 1;\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 56,
    "text": "base_char = base_char + 1",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "if base_char + #keywords > 255 then\r\n\t\t-- Sorry, can't uglify this file :(\r\n\t\t-- We /could/ use a multi-byte marker, but that would complicate\r\n\t\t-- things and lower the compression ratio (there are quite a few \r\n\t\t-- 2-letter keywords)\r\n\t\toutfile:write(code);\r\n\t\toutfile:close();\r\n\t\tos.rename(outfile_fn..\".uglified\", outfile_fn);\r\n\t\treturn;\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "outfile:write(code)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "outfile:close()",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "os.rename(outfile_fn..\".uglified\", outfile_fn)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "local keyword_map_to_char = {}",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "for i, keyword in ipairs(keywords) do\r\n\t\tkeyword_map_to_char[keyword] = string.char(base_char + i);\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 63,
    "text": "keyword_map_to_char[keyword] = string.char(base_char + i)",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "local maxequals = 0",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "data:gsub(\"(=+)\", function (equals_string) maxequals = math.max(maxequals, #equals_string); end)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "maxequals = math.max(maxequals, #equals_string)",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "llex.init(code, \"@\"..infile_fn)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "llex.llex()",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "local seminfo = llex.seminfo",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "if opts.uglify_level == \"full\" and base_char+#keywords < 255 then\r\n\t\t-- Find longest TK_NAME and TK_STRING tokens\r\n\t\tlocal scores = {};\r\n\t\tfor k,v in ipairs(llex.tok) do\r\n\t\t\tif v == \"TK_NAME\" or v == \"TK_STRING\" then\r\n\t\t\t\tlocal key = string.format(\"%q,%q\", v, seminfo[k]);\r\n\t\t\t\tif not scores[key] then\r\n\t\t\t\t\tscores[key] = { type = v, value = seminfo[k], count = 0 };\r\n\t\t\t\t\tscores[#scores+1] = scores[key];\r\n\t\t\t\tend\r\n\t\t\t\tscores[key].count = scores[key].count + 1;\r\n\t\t\tend\r\n\t\tend\r\n\t\tfor i=1,#scores do\r\n\t\t\tlocal v = scores[i];\r\n\t\t\tv.score = (v.count)*(#v.value-1)- #string.format(\"%q\", v.value) - 1;\r\n\t\tend\r\n\t\ttable.sort(scores, function (a, b) return a.score > b.score; end);\r\n\t\tlocal free_space = 255-(base_char+#keywords);\r\n\t\tfor i=free_space+1,#scores do\r\n\t\t\tscores[i] = nil; -- Drop any over the limit\r\n\t\tend\r\n\t\r\n\t\tlocal base_keywords_len = #keywords;\r\n\t\tfor k,v in ipairs(scores) do\r\n\t\t\tif v.score > 0 then\r\n\t\t\t\ttable.insert(keywords, v.value);\r\n\t\t\t\tkeyword_map_to_char[v.value] = string.char(base_char+base_keywords_len+k);\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "local scores = {}",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "for k,v in ipairs(llex.tok) do\r\n\t\t\tif v == \"TK_NAME\" or v == \"TK_STRING\" then\r\n\t\t\t\tlocal key = string.format(\"%q,%q\", v, seminfo[k]);\r\n\t\t\t\tif not scores[key] then\r\n\t\t\t\t\tscores[key] = { type = v, value = seminfo[k], count = 0 };\r\n\t\t\t\t\tscores[#scores+1] = scores[key];\r\n\t\t\t\tend\r\n\t\t\t\tscores[key].count = scores[key].count + 1;\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 73,
    "text": "if v == \"TK_NAME\" or v == \"TK_STRING\" then\r\n\t\t\t\tlocal key = string.format(\"%q,%q\", v, seminfo[k]);\r\n\t\t\t\tif not scores[key] then\r\n\t\t\t\t\tscores[key] = { type = v, value = seminfo[k], count = 0 };\r\n\t\t\t\t\tscores[#scores+1] = scores[key];\r\n\t\t\t\tend\r\n\t\t\t\tscores[key].count = scores[key].count + 1;\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "local key = string.format(\"%q,%q\", v, seminfo[k])",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "if not scores[key] then\r\n\t\t\t\t\tscores[key] = { type = v, value = seminfo[k], count = 0 };\r\n\t\t\t\t\tscores[#scores+1] = scores[key];\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "scores[key] = { type = v, value = seminfo[k], count = 0 }",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "scores[#scores+1] = scores[key]",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "scores[key].count = scores[key].count + 1",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "for i=1,#scores do\r\n\t\t\tlocal v = scores[i];\r\n\t\t\tv.score = (v.count)*(#v.value-1)- #string.format(\"%q\", v.value) - 1;\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 80,
    "text": "local v = scores[i]",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "v.score = (v.count)*(#v.value-1)- #string.format(\"%q\", v.value) - 1",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "table.sort(scores, function (a, b) return a.score > b.score; end)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "local free_space = 255-(base_char+#keywords)",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "for i=free_space+1,#scores do\r\n\t\t\tscores[i] = nil; -- Drop any over the limit\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 85,
    "text": "scores[i] = nil",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "local base_keywords_len = #keywords",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "for k,v in ipairs(scores) do\r\n\t\t\tif v.score > 0 then\r\n\t\t\t\ttable.insert(keywords, v.value);\r\n\t\t\t\tkeyword_map_to_char[v.value] = string.char(base_char+base_keywords_len+k);\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 88,
    "text": "if v.score > 0 then\r\n\t\t\t\ttable.insert(keywords, v.value);\r\n\t\t\t\tkeyword_map_to_char[v.value] = string.char(base_char+base_keywords_len+k);\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "table.insert(keywords, v.value)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "keyword_map_to_char[v.value] = string.char(base_char+base_keywords_len+k)",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "outfile:write(\"local base_char,keywords=\", tostring(base_char), \",{\")",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "for _, keyword in ipairs(keywords) do\r\n\t\toutfile:write(string.format(\"%q\", keyword), ',');\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 93,
    "text": "outfile:write(string.format(\"%q\", keyword), ',')",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "outfile:write[[}; function prettify(code) return code:gsub(\"[\"..string.char(base_char)..\"-\"..string.char(base_char+#keywords)..\"]\", \r\n\tfunction (c) return keywords[c:byte()-base_char]; end) end ]]",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "outfile:write [[return assert(loadstring(prettify]]",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "outfile:write(\"[\", string.rep(\"=\", maxequals+1), \"[\")",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "for k,v in ipairs(llex.tok) do\r\n\t\tif v == \"TK_KEYWORD\" or v == \"TK_NAME\" or v == \"TK_STRING\" then\r\n\t\t\tlocal keyword_char = keyword_map_to_char[seminfo[k]];\r\n\t\t\tif keyword_char then\r\n\t\t\t\toutfile:write(keyword_char);\r\n\t\t\telse -- Those who think Lua shouldn't have 'continue, fix this please :)\r\n\t\t\t\toutfile:write(seminfo[k]);\r\n\t\t\tend\r\n\t\telse\r\n\t\t\toutfile:write(seminfo[k]);\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 98,
    "text": "if v == \"TK_KEYWORD\" or v == \"TK_NAME\" or v == \"TK_STRING\" then\r\n\t\t\tlocal keyword_char = keyword_map_to_char[seminfo[k]];\r\n\t\t\tif keyword_char then\r\n\t\t\t\toutfile:write(keyword_char);\r\n\t\t\telse -- Those who think Lua shouldn't have 'continue, fix this please :)\r\n\t\t\t\toutfile:write(seminfo[k]);\r\n\t\t\tend\r\n\t\telse\r\n\t\t\toutfile:write(seminfo[k]);\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "local keyword_char = keyword_map_to_char[seminfo[k]]",
    "type": "statement:localassign"
  }, {
    "id": 100,
    "text": "if keyword_char then\r\n\t\t\t\toutfile:write(keyword_char);\r\n\t\t\telse -- Those who think Lua shouldn't have 'continue, fix this please :)\r\n\t\t\t\toutfile:write(seminfo[k]);\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "outfile:write(keyword_char)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "outfile:write(seminfo[k])",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "outfile:write(\"]\", string.rep(\"=\", maxequals+1), \"]\")",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "outfile:write(\", '@\", outfile_fn,\"'))()\")",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function (equals_string) maxequals = math.max(maxequals, #equals_string); end",
    "type": "function"
  }, {
    "id": 107,
    "text": "function (a, b) return a.score > b.score; end",
    "type": "function"
  }, {
    "id": 108,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 109,
    "text": "format",
    "type": "global function"
  }, {
    "id": 110,
    "text": "char",
    "type": "global function"
  }, {
    "id": 111,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 112,
    "text": "print_debug",
    "type": "global function"
  }, {
    "id": 113,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 114,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 115,
    "text": "rename",
    "type": "global function"
  }, {
    "id": 116,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 117,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 118,
    "text": "max",
    "type": "global function"
  }, {
    "id": 119,
    "text": "print_err",
    "type": "global function"
  }, {
    "id": 120,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 121,
    "text": "open",
    "type": "global function"
  }, {
    "id": 122,
    "text": "print_verbose",
    "type": "global function"
  }, {
    "id": 123,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 124,
    "text": "print_info",
    "type": "global function"
  }, {
    "id": 125,
    "text": "require_resource",
    "type": "global function"
  }, {
    "id": 126,
    "text": "require",
    "type": "global function"
  }, {
    "id": 127,
    "text": "",
    "type": "variable container"
  }, {
    "id": 128,
    "text": "",
    "type": "require container"
  }, {
    "id": 129,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "variable container"
  }, {
    "id": 131,
    "text": "",
    "type": "require container"
  }, {
    "id": 132,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 133,
    "text": "",
    "type": "variable container"
  }, {
    "id": 134,
    "text": "",
    "type": "require container"
  }, {
    "id": 135,
    "text": "",
    "type": "variable container"
  }, {
    "id": 136,
    "text": "",
    "type": "require container"
  }, {
    "id": 137,
    "text": "",
    "type": "local variable"
  }, {
    "id": 138,
    "text": "",
    "type": "local variable"
  }, {
    "id": 139,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 140,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 141,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 142,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 143,
    "text": "",
    "type": "variable container"
  }, {
    "id": 144,
    "text": "",
    "type": "require container"
  }, {
    "id": 145,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 146,
    "text": "",
    "type": "variable container"
  }, {
    "id": 147,
    "text": "",
    "type": "require container"
  }, {
    "id": 148,
    "text": "",
    "type": "local variable"
  }, {
    "id": 149,
    "text": "",
    "type": "number"
  }, {
    "id": 150,
    "text": "",
    "type": "local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 152,
    "text": "",
    "type": "string"
  }, {
    "id": 153,
    "text": "",
    "type": "string"
  }, {
    "id": 154,
    "text": "",
    "type": "string"
  }, {
    "id": 155,
    "text": "",
    "type": "string"
  }, {
    "id": 156,
    "text": "",
    "type": "string"
  }, {
    "id": 157,
    "text": "",
    "type": "string"
  }, {
    "id": 158,
    "text": "",
    "type": "string"
  }, {
    "id": 159,
    "text": "",
    "type": "string"
  }, {
    "id": 160,
    "text": "",
    "type": "string"
  }, {
    "id": 161,
    "text": "",
    "type": "string"
  }, {
    "id": 162,
    "text": "",
    "type": "string"
  }, {
    "id": 163,
    "text": "",
    "type": "string"
  }, {
    "id": 164,
    "text": "",
    "type": "string"
  }, {
    "id": 165,
    "text": "",
    "type": "string"
  }, {
    "id": 166,
    "text": "",
    "type": "string"
  }, {
    "id": 167,
    "text": "",
    "type": "string"
  }, {
    "id": 168,
    "text": "",
    "type": "string"
  }, {
    "id": 169,
    "text": "",
    "type": "string"
  }, {
    "id": 170,
    "text": "",
    "type": "string"
  }, {
    "id": 171,
    "text": "",
    "type": "string"
  }, {
    "id": 172,
    "text": "",
    "type": "string"
  }, {
    "id": 173,
    "text": "",
    "type": "require local variable"
  } ]
}