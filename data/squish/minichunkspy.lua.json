{
  "_filename": "minichunkspy.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/squish/debug/minichunkspy.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 43,
    "label": "calls",
    "to": 3
  }, {
    "from": 43,
    "label": "calls",
    "to": 3
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 4
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 43,
    "label": "calls",
    "to": 2
  }, {
    "from": 43,
    "label": "calls",
    "to": 157
  }, {
    "from": 43,
    "label": "calls",
    "to": 157
  }, {
    "from": 43,
    "label": "calls",
    "to": 170
  }, {
    "from": 43,
    "label": "calls",
    "to": 170
  }, {
    "from": 43,
    "label": "calls",
    "to": 170
  }, {
    "from": 43,
    "label": "calls",
    "to": 170
  }, {
    "from": 43,
    "label": "calls",
    "to": 171
  }, {
    "from": 43,
    "label": "calls",
    "to": 171
  }, {
    "from": 43,
    "label": "calls",
    "to": 171
  }, {
    "from": 43,
    "label": "calls",
    "to": 171
  }, {
    "from": 43,
    "label": "calls",
    "to": 171
  }, {
    "from": 43,
    "label": "calls",
    "to": 171
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 5
  }, {
    "from": 43,
    "label": "calls",
    "to": 5
  }, {
    "from": 43,
    "label": "calls",
    "to": 7
  }, {
    "from": 43,
    "label": "calls",
    "to": 7
  }, {
    "from": 43,
    "label": "calls",
    "to": 7
  }, {
    "from": 43,
    "label": "calls",
    "to": 7
  }, {
    "from": 43,
    "label": "calls",
    "to": 6
  }, {
    "from": 43,
    "label": "calls",
    "to": 158
  }, {
    "from": 43,
    "label": "calls",
    "to": 173
  }, {
    "from": 43,
    "label": "calls",
    "to": 159
  }, {
    "from": 43,
    "label": "calls",
    "to": 159
  }, {
    "from": 43,
    "label": "calls",
    "to": 165
  }, {
    "from": 43,
    "label": "calls",
    "to": 165
  }, {
    "from": 43,
    "label": "calls",
    "to": 165
  }, {
    "from": 43,
    "label": "calls",
    "to": 8
  }, {
    "from": 43,
    "label": "calls",
    "to": 168
  }, {
    "from": 43,
    "label": "calls",
    "to": 168
  }, {
    "from": 43,
    "label": "calls",
    "to": 160
  }, {
    "from": 43,
    "label": "calls",
    "to": 160
  }, {
    "from": 43,
    "label": "calls",
    "to": 160
  }, {
    "from": 43,
    "label": "calls",
    "to": 160
  }, {
    "from": 43,
    "label": "calls",
    "to": 160
  }, {
    "from": 43,
    "label": "calls",
    "to": 175
  }, {
    "from": 43,
    "label": "calls",
    "to": 167
  }, {
    "from": 43,
    "label": "calls",
    "to": 167
  }, {
    "from": 43,
    "label": "calls",
    "to": 167
  }, {
    "from": 43,
    "label": "calls",
    "to": 167
  }, {
    "from": 43,
    "label": "calls",
    "to": 167
  }, {
    "from": 43,
    "label": "calls",
    "to": 167
  }, {
    "from": 43,
    "label": "calls",
    "to": 174
  }, {
    "from": 43,
    "label": "calls",
    "to": 174
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 43,
    "label": "declares",
    "to": 2
  }, {
    "from": 43,
    "label": "declares",
    "to": 3
  }, {
    "from": 43,
    "label": "declares",
    "to": 4
  }, {
    "from": 43,
    "label": "declares",
    "to": 5
  }, {
    "from": 43,
    "label": "declares",
    "to": 6
  }, {
    "from": 43,
    "label": "declares",
    "to": 7
  }, {
    "from": 43,
    "label": "declares",
    "to": 8
  }, {
    "from": 43,
    "label": "declares",
    "to": 9
  }, {
    "from": 43,
    "label": "declares",
    "to": 10
  }, {
    "from": 43,
    "label": "declares",
    "to": 11
  }, {
    "from": 43,
    "label": "declares",
    "to": 12
  }, {
    "from": 43,
    "label": "declares",
    "to": 13
  }, {
    "from": 43,
    "label": "declares",
    "to": 14
  }, {
    "from": 43,
    "label": "declares",
    "to": 15
  }, {
    "from": 43,
    "label": "declares",
    "to": 16
  }, {
    "from": 43,
    "label": "declares",
    "to": 17
  }, {
    "from": 43,
    "label": "declares",
    "to": 18
  }, {
    "from": 43,
    "label": "declares",
    "to": 19
  }, {
    "from": 43,
    "label": "declares",
    "to": 20
  }, {
    "from": 43,
    "label": "declares",
    "to": 21
  }, {
    "from": 43,
    "label": "declares",
    "to": 22
  }, {
    "from": 43,
    "label": "declares",
    "to": 23
  }, {
    "from": 43,
    "label": "declares",
    "to": 24
  }, {
    "from": 43,
    "label": "declares",
    "to": 25
  }, {
    "from": 43,
    "label": "declares",
    "to": 26
  }, {
    "from": 43,
    "label": "declares",
    "to": 27
  }, {
    "from": 43,
    "label": "declares",
    "to": 28
  }, {
    "from": 43,
    "label": "declares",
    "to": 29
  }, {
    "from": 43,
    "label": "declares",
    "to": 30
  }, {
    "from": 43,
    "label": "declares",
    "to": 31
  }, {
    "from": 43,
    "label": "declares",
    "to": 32
  }, {
    "from": 43,
    "label": "declares",
    "to": 33
  }, {
    "from": 43,
    "label": "declares",
    "to": 34
  }, {
    "from": 43,
    "label": "declares",
    "to": 35
  }, {
    "from": 43,
    "label": "declares",
    "to": 36
  }, {
    "from": 43,
    "label": "declares",
    "to": 37
  }, {
    "from": 43,
    "label": "declares",
    "to": 38
  }, {
    "from": 43,
    "label": "declares",
    "to": 39
  }, {
    "from": 43,
    "label": "declares",
    "to": 40
  }, {
    "from": 43,
    "label": "declares",
    "to": 41
  }, {
    "from": 43,
    "label": "declares",
    "to": 42
  }, {
    "from": 44,
    "label": "calls",
    "to": 151
  }, {
    "from": 44,
    "label": "calls",
    "to": 152
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 46
  }, {
    "from": 49,
    "label": "has",
    "to": 46
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 46
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 46
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 46
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 52,
    "label": "has",
    "to": 58
  }, {
    "from": 52,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 52,
    "label": "has",
    "to": 46
  }, {
    "from": 52,
    "label": "has",
    "to": 46
  }, {
    "from": 52,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 64,
    "label": "has",
    "to": 67
  }, {
    "from": 64,
    "label": "has",
    "to": 46
  }, {
    "from": 64,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 46
  }, {
    "from": 70,
    "label": "has",
    "to": 46
  }, {
    "from": 71,
    "label": "has",
    "to": 46
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 46
  }, {
    "from": 74,
    "label": "has",
    "to": 46
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 46
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 46
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 82,
    "label": "has",
    "to": 86
  }, {
    "from": 82,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 88
  }, {
    "from": 82,
    "label": "has",
    "to": 89
  }, {
    "from": 82,
    "label": "has",
    "to": 90
  }, {
    "from": 82,
    "label": "has",
    "to": 91
  }, {
    "from": 82,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 82,
    "label": "has",
    "to": 46
  }, {
    "from": 82,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 46
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 99,
    "label": "has",
    "to": 104
  }, {
    "from": 99,
    "label": "has",
    "to": 105
  }, {
    "from": 96,
    "label": "has",
    "to": 46
  }, {
    "from": 96,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 98
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 100
  }, {
    "from": 109,
    "label": "has",
    "to": 101
  }, {
    "from": 109,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 105
  }, {
    "from": 107,
    "label": "has",
    "to": 46
  }, {
    "from": 107,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 112,
    "label": "has",
    "to": 115
  }, {
    "from": 112,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 112,
    "label": "has",
    "to": 46
  }, {
    "from": 112,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 115
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 119,
    "label": "has",
    "to": 46
  }, {
    "from": 119,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 125,
    "label": "has",
    "to": 46
  }, {
    "from": 125,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 46
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 113
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 132,
    "label": "has",
    "to": 46
  }, {
    "from": 132,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 46
  }, {
    "from": 138,
    "label": "has",
    "to": 46
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 142,
    "label": "has",
    "to": 144
  }, {
    "from": 142,
    "label": "has",
    "to": 145
  }, {
    "from": 142,
    "label": "has",
    "to": 146
  }, {
    "from": 142,
    "label": "has",
    "to": 46
  }, {
    "from": 142,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 148,
    "label": "has",
    "to": 46
  }, {
    "from": 148,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 46
  }, {
    "from": 152,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "calls",
    "to": 162
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 154
  }, {
    "from": 43,
    "label": "calls",
    "to": 157
  }, {
    "from": 43,
    "label": "calls",
    "to": 157
  }, {
    "from": 43,
    "label": "calls",
    "to": 170
  }, {
    "from": 43,
    "label": "calls",
    "to": 170
  }, {
    "from": 43,
    "label": "calls",
    "to": 170
  }, {
    "from": 43,
    "label": "calls",
    "to": 170
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 48,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 164
  }, {
    "from": 45,
    "label": "calls",
    "to": 155
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 172
  }, {
    "from": 43,
    "label": "calls",
    "to": 159
  }, {
    "from": 43,
    "label": "calls",
    "to": 159
  }, {
    "from": 43,
    "label": "calls",
    "to": 165
  }, {
    "from": 43,
    "label": "calls",
    "to": 165
  }, {
    "from": 43,
    "label": "calls",
    "to": 165
  }, {
    "from": 43,
    "label": "calls",
    "to": 165
  }, {
    "from": 48,
    "label": "calls",
    "to": 166
  }, {
    "from": 48,
    "label": "calls",
    "to": 166
  }, {
    "from": 43,
    "label": "calls",
    "to": 168
  }, {
    "from": 43,
    "label": "calls",
    "to": 168
  }, {
    "from": 52,
    "label": "calls",
    "to": 52
  }, {
    "from": 43,
    "label": "calls",
    "to": 45
  }, {
    "from": 43,
    "label": "calls",
    "to": 48
  }, {
    "from": 43,
    "label": "calls",
    "to": 48
  }, {
    "from": 43,
    "label": "calls",
    "to": 48
  }, {
    "from": 43,
    "label": "calls",
    "to": 173
  }, {
    "from": 43,
    "label": "calls",
    "to": 167
  }, {
    "from": 43,
    "label": "calls",
    "to": 167
  }, {
    "from": 43,
    "label": "calls",
    "to": 167
  }, {
    "from": 43,
    "label": "calls",
    "to": 167
  }, {
    "from": 43,
    "label": "calls",
    "to": 167
  }, {
    "from": 43,
    "label": "calls",
    "to": 167
  }, {
    "from": 43,
    "label": "calls",
    "to": 174
  }, {
    "from": 43,
    "label": "calls",
    "to": 174
  }, {
    "from": 52,
    "label": "calls",
    "to": 161
  }, {
    "from": 52,
    "label": "calls",
    "to": 156
  }, {
    "from": 43,
    "label": "calls",
    "to": 169
  }, {
    "from": 43,
    "label": "calls",
    "to": 171
  }, {
    "from": 43,
    "label": "calls",
    "to": 171
  }, {
    "from": 43,
    "label": "calls",
    "to": 171
  }, {
    "from": 43,
    "label": "calls",
    "to": 171
  }, {
    "from": 52,
    "label": "calls",
    "to": 171
  }, {
    "from": 43,
    "label": "declares",
    "to": 45
  }, {
    "from": 43,
    "label": "declares",
    "to": 48
  }, {
    "from": 43,
    "label": "declares",
    "to": 52
  }, {
    "from": 43,
    "label": "declares",
    "to": 64
  }, {
    "from": 43,
    "label": "declares",
    "to": 69
  }, {
    "from": 43,
    "label": "declares",
    "to": 70
  }, {
    "from": 43,
    "label": "declares",
    "to": 71
  }, {
    "from": 43,
    "label": "declares",
    "to": 73
  }, {
    "from": 43,
    "label": "declares",
    "to": 74
  }, {
    "from": 43,
    "label": "declares",
    "to": 76
  }, {
    "from": 43,
    "label": "declares",
    "to": 77
  }, {
    "from": 43,
    "label": "declares",
    "to": 82
  }, {
    "from": 43,
    "label": "declares",
    "to": 93
  }, {
    "from": 43,
    "label": "declares",
    "to": 96
  }, {
    "from": 43,
    "label": "declares",
    "to": 107
  }, {
    "from": 43,
    "label": "declares",
    "to": 112
  }, {
    "from": 43,
    "label": "declares",
    "to": 119
  }, {
    "from": 43,
    "label": "declares",
    "to": 125
  }, {
    "from": 43,
    "label": "declares",
    "to": 129
  }, {
    "from": 43,
    "label": "declares",
    "to": 132
  }, {
    "from": 43,
    "label": "declares",
    "to": 138
  }, {
    "from": 43,
    "label": "declares",
    "to": 142
  }, {
    "from": 43,
    "label": "declares",
    "to": 148
  }, {
    "from": 43,
    "label": "declares",
    "to": 151
  }, {
    "from": 43,
    "label": "declares",
    "to": 152
  }, {
    "from": 153,
    "label": "calls",
    "to": 151
  }, {
    "from": 153,
    "label": "calls",
    "to": 152
  }, {
    "from": 1,
    "label": "contains",
    "to": 176
  }, {
    "from": 1,
    "label": "contains",
    "to": 177
  }, {
    "from": 176,
    "label": "initializes",
    "to": 178
  }, {
    "from": 176,
    "label": "initializes",
    "to": 179
  }, {
    "from": 176,
    "label": "initializes",
    "to": 180
  }, {
    "from": 176,
    "label": "initializes",
    "to": 181
  }, {
    "from": 176,
    "label": "initializes",
    "to": 182
  }, {
    "from": 176,
    "label": "initializes",
    "to": 183
  }, {
    "from": 176,
    "label": "initializes",
    "to": 184
  }, {
    "from": 176,
    "label": "initializes",
    "to": 185
  }, {
    "from": 176,
    "label": "initializes",
    "to": 186
  }, {
    "from": 176,
    "label": "initializes",
    "to": 187
  }, {
    "from": 176,
    "label": "initializes",
    "to": 188
  }, {
    "from": 176,
    "label": "initializes",
    "to": 189
  }, {
    "from": 176,
    "label": "initializes",
    "to": 190
  }, {
    "from": 176,
    "label": "initializes",
    "to": 191
  }, {
    "from": 176,
    "label": "initializes",
    "to": 192
  }, {
    "from": 176,
    "label": "initializes",
    "to": 193
  }, {
    "from": 176,
    "label": "initializes",
    "to": 194
  }, {
    "from": 176,
    "label": "initializes",
    "to": 195
  }, {
    "from": 176,
    "label": "initializes",
    "to": 196
  }, {
    "from": 176,
    "label": "initializes",
    "to": 197
  }, {
    "from": 176,
    "label": "initializes",
    "to": 198
  }, {
    "from": 176,
    "label": "initializes",
    "to": 199
  }, {
    "from": 176,
    "label": "initializes",
    "to": 200
  }, {
    "from": 176,
    "label": "initializes",
    "to": 201
  }, {
    "from": 176,
    "label": "initializes",
    "to": 202
  }, {
    "from": 176,
    "label": "initializes",
    "to": 203
  }, {
    "from": 176,
    "label": "initializes",
    "to": 204
  }, {
    "from": 176,
    "label": "initializes",
    "to": 205
  }, {
    "from": 176,
    "label": "initializes",
    "to": 206
  }, {
    "from": 176,
    "label": "initializes",
    "to": 207
  }, {
    "from": 176,
    "label": "initializes",
    "to": 208
  }, {
    "from": 176,
    "label": "initializes",
    "to": 209
  }, {
    "from": 176,
    "label": "initializes",
    "to": 210
  }, {
    "from": 176,
    "label": "initializes",
    "to": 211
  }, {
    "from": 176,
    "label": "initializes",
    "to": 212
  }, {
    "from": 176,
    "label": "initializes",
    "to": 213
  }, {
    "from": 176,
    "label": "initializes",
    "to": 214
  }, {
    "from": 176,
    "label": "initializes",
    "to": 215
  }, {
    "from": 176,
    "label": "initializes",
    "to": 216
  }, {
    "from": 176,
    "label": "initializes",
    "to": 217
  }, {
    "from": 176,
    "label": "initializes",
    "to": 218
  }, {
    "from": 176,
    "label": "initializes",
    "to": 219
  }, {
    "from": 176,
    "label": "initializes",
    "to": 220
  }, {
    "from": 176,
    "label": "initializes",
    "to": 221
  }, {
    "from": 176,
    "label": "initializes",
    "to": 222
  }, {
    "from": 176,
    "label": "initializes",
    "to": 223
  }, {
    "from": 176,
    "label": "initializes",
    "to": 224
  }, {
    "from": 176,
    "label": "initializes",
    "to": 225
  }, {
    "from": 176,
    "label": "initializes",
    "to": 226
  }, {
    "from": 176,
    "label": "initializes",
    "to": 227
  }, {
    "from": 176,
    "label": "initializes",
    "to": 228
  }, {
    "from": 176,
    "label": "initializes",
    "to": 229
  }, {
    "from": 1,
    "label": "provides",
    "to": 230
  }, {
    "from": 230,
    "label": "provides",
    "to": 231
  }, {
    "from": 230,
    "label": "provides",
    "to": 232
  }, {
    "from": 230,
    "label": "provides",
    "to": 233
  }, {
    "from": 234,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 235
  }, {
    "from": 1,
    "label": "contains",
    "to": 236
  }, {
    "from": 235,
    "label": "initializes",
    "to": 237
  }, {
    "from": 237,
    "label": "assigns",
    "to": 238
  }, {
    "from": 235,
    "label": "initializes",
    "to": 239
  }, {
    "from": 239,
    "label": "assigns",
    "to": 240
  }, {
    "from": 235,
    "label": "initializes",
    "to": 241
  }, {
    "from": 241,
    "label": "assigns",
    "to": 242
  }, {
    "from": 235,
    "label": "initializes",
    "to": 243
  }, {
    "from": 243,
    "label": "assigns",
    "to": 244
  }, {
    "from": 235,
    "label": "initializes",
    "to": 245
  }, {
    "from": 245,
    "label": "assigns",
    "to": 246
  }, {
    "from": 235,
    "label": "initializes",
    "to": 247
  }, {
    "from": 247,
    "label": "assigns",
    "to": 248
  }, {
    "from": 235,
    "label": "initializes",
    "to": 249
  }, {
    "from": 249,
    "label": "assigns",
    "to": 250
  }, {
    "from": 235,
    "label": "initializes",
    "to": 251
  }, {
    "from": 251,
    "label": "assigns",
    "to": 252
  }, {
    "from": 235,
    "label": "initializes",
    "to": 253
  }, {
    "from": 253,
    "label": "assigns",
    "to": 254
  }, {
    "from": 235,
    "label": "initializes",
    "to": 255
  }, {
    "from": 255,
    "label": "assigns",
    "to": 256
  }, {
    "from": 235,
    "label": "initializes",
    "to": 257
  }, {
    "from": 257,
    "label": "assigns",
    "to": 258
  }, {
    "from": 235,
    "label": "initializes",
    "to": 259
  }, {
    "from": 259,
    "label": "assigns",
    "to": 260
  }, {
    "from": 235,
    "label": "initializes",
    "to": 261
  }, {
    "from": 261,
    "label": "assigns",
    "to": 262
  }, {
    "from": 235,
    "label": "initializes",
    "to": 263
  }, {
    "from": 263,
    "label": "assigns",
    "to": 264
  }, {
    "from": 235,
    "label": "initializes",
    "to": 265
  }, {
    "from": 265,
    "label": "assigns",
    "to": 266
  }, {
    "from": 235,
    "label": "initializes",
    "to": 267
  }, {
    "from": 267,
    "label": "assigns",
    "to": 268
  }, {
    "from": 235,
    "label": "initializes",
    "to": 269
  }, {
    "from": 269,
    "label": "assigns",
    "to": 270
  }, {
    "from": 235,
    "label": "initializes",
    "to": 271
  }, {
    "from": 271,
    "label": "assigns",
    "to": 272
  }, {
    "from": 235,
    "label": "initializes",
    "to": 273
  }, {
    "from": 273,
    "label": "assigns",
    "to": 274
  }, {
    "from": 235,
    "label": "initializes",
    "to": 275
  }, {
    "from": 275,
    "label": "assigns",
    "to": 276
  }, {
    "from": 235,
    "label": "initializes",
    "to": 277
  }, {
    "from": 277,
    "label": "assigns",
    "to": 278
  }, {
    "from": 235,
    "label": "initializes",
    "to": 279
  }, {
    "from": 279,
    "label": "assigns",
    "to": 280
  }, {
    "from": 235,
    "label": "initializes",
    "to": 281
  }, {
    "from": 281,
    "label": "assigns",
    "to": 282
  }, {
    "from": 235,
    "label": "initializes",
    "to": 283
  }, {
    "from": 283,
    "label": "assigns",
    "to": 284
  }, {
    "from": 235,
    "label": "initializes",
    "to": 285
  }, {
    "from": 285,
    "label": "assigns",
    "to": 286
  }, {
    "from": 235,
    "label": "initializes",
    "to": 287
  }, {
    "from": 287,
    "label": "assigns",
    "to": 288
  }, {
    "from": 235,
    "label": "initializes",
    "to": 289
  }, {
    "from": 289,
    "label": "assigns",
    "to": 290
  }, {
    "from": 235,
    "label": "initializes",
    "to": 291
  }, {
    "from": 291,
    "label": "assigns",
    "to": 292
  }, {
    "from": 235,
    "label": "initializes",
    "to": 293
  }, {
    "from": 293,
    "label": "assigns",
    "to": 294
  }, {
    "from": 235,
    "label": "initializes",
    "to": 295
  }, {
    "from": 295,
    "label": "assigns",
    "to": 296
  }, {
    "from": 235,
    "label": "initializes",
    "to": 297
  }, {
    "from": 297,
    "label": "assigns",
    "to": 298
  }, {
    "from": 235,
    "label": "initializes",
    "to": 299
  }, {
    "from": 299,
    "label": "assigns",
    "to": 300
  }, {
    "from": 235,
    "label": "initializes",
    "to": 301
  }, {
    "from": 301,
    "label": "assigns",
    "to": 302
  }, {
    "from": 235,
    "label": "initializes",
    "to": 303
  }, {
    "from": 303,
    "label": "assigns",
    "to": 304
  }, {
    "from": 235,
    "label": "initializes",
    "to": 305
  }, {
    "from": 305,
    "label": "assigns",
    "to": 306
  }, {
    "from": 235,
    "label": "initializes",
    "to": 307
  }, {
    "from": 307,
    "label": "assigns",
    "to": 308
  }, {
    "from": 308,
    "label": "assigns",
    "to": 309
  }, {
    "from": 309,
    "label": "assigns",
    "to": 310
  }, {
    "from": 308,
    "label": "assigns",
    "to": 311
  }, {
    "from": 311,
    "label": "assigns",
    "to": 312
  }, {
    "from": 308,
    "label": "assigns",
    "to": 313
  }, {
    "from": 313,
    "label": "assigns",
    "to": 314
  }, {
    "from": 308,
    "label": "assigns",
    "to": 315
  }, {
    "from": 315,
    "label": "assigns",
    "to": 316
  }, {
    "from": 235,
    "label": "initializes",
    "to": 317
  }, {
    "from": 317,
    "label": "assigns",
    "to": 318
  }, {
    "from": 235,
    "label": "initializes",
    "to": 319
  }, {
    "from": 319,
    "label": "assigns",
    "to": 320
  }, {
    "from": 235,
    "label": "initializes",
    "to": 321
  }, {
    "from": 321,
    "label": "assigns",
    "to": 322
  }, {
    "from": 235,
    "label": "initializes",
    "to": 323
  }, {
    "from": 323,
    "label": "assigns",
    "to": 324
  }, {
    "from": 235,
    "label": "initializes",
    "to": 325
  }, {
    "from": 325,
    "label": "assigns",
    "to": 326
  }, {
    "from": 1,
    "label": "provides",
    "to": 327
  }, {
    "from": 327,
    "label": "provides",
    "to": 328
  }, {
    "from": 327,
    "label": "provides",
    "to": 329
  }, {
    "from": 9,
    "label": "represents",
    "to": 330
  }, {
    "from": 327,
    "label": "provides",
    "to": 330
  }, {
    "from": 331,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "minichunkspy",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function save()\r\n    save_stack[#save_stack+1]\r\n\t= {BIG_ENDIAN, SIZEOF_SIZE_T, SIZEOF_INT, SIZEOF_NUMBER}\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function restore ()\r\n    BIG_ENDIAN, SIZEOF_SIZE_T, SIZEOF_INT, SIZEOF_NUMBER\r\n\t= unpack(save_stack[#save_stack])\r\n    save_stack[#save_stack] = nil\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function construct (class, self)\r\n    return class.new(class, self)\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function char(n)\r\n    local field = char_memo[n] or Field{\r\n\tunpack = function (self, bytes, ix)\r\n\t\t     return string_sub(bytes, ix, ix+n-1), ix+n\r\n\t\t end,\r\n\tpack = function (self, val) return string_sub(val, 1, n) end\r\n    }\r\n    char_memo[n] = field\r\n    return field\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function explode_double(bytes, ix)\r\n    local a = uint32:unpack(bytes, ix)\r\n    local b = uint32:unpack(bytes, ix+4)\r\n    if BIG_ENDIAN then a,b = b,a end --XXX: ARM mixed-endian\r\n\r\n    local sig_hi = b % 2^20\r\n    local sig_lo = a\r\n    local significand = sig_lo + sig_hi*2^32\r\n\r\n    b = (b - sig_hi) / 2^20\r\n\r\n    local biased_exp = b % 2^11\r\n    local sign = b <= biased_exp and 1 or -1\r\n\r\n    --print(sign, significand, biased_exp, \"explode\")\r\n    return sign, biased_exp, significand\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local function implode_double(sign, biased_exp, significand)\r\n    --print(sign, significand, biased_exp, \"implode\")\r\n    local sig_lo = significand % 2^32\r\n    local sig_hi = (significand - sig_lo) / 2^32\r\n\r\n    local a = sig_lo\r\n    local b = ((sign < 0 and 2^11 or 0) + biased_exp)*2^20 + sig_hi\r\n\r\n    if BIG_ENDIAN then a,b = b,a end --XXX: ARM mixed-endian\r\n    return uint32.pack(nil, a) .. uint32.pack(nil, b)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local function math_sign(x)\r\n    if x ~= x then return x end\t--sign of NaN is NaN\r\n    if x == 0 then x = 1/x end\t--extract sign of zero\r\n    return x > 0 and 1 or -1\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local function validate(chunk)\r\n    if type(chunk) == \"function\" then\r\n\treturn validate(string.dump(chunk))\r\n    end\r\n    local f = Chunk:unpack(chunk, 1)\r\n    local chunk2 = Chunk:pack(f)\r\n\r\n    if chunk == chunk2 then return true end\r\n\r\n    local i\r\n    local len = math.min(#chunk, #chunk2)\r\n    for i=1,len do\r\n\tlocal a = chunk:sub(i,i)\r\n\tlocal b = chunk:sub(i,i)\r\n\tif a ~= b then\r\n\t    return false, (\"chunk roundtripping failed: \"..\r\n\t\t\t   \"first byte difference at index %d\"):format(i)\r\n\tend\r\n    end\r\n    return false, (\"chunk round tripping failed: \"..\r\n\t\t   \"original length %d vs. %d\"):format(#chunk, #chunk2)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function (class, self)\r\n\t    local self = self or {}\r\n\t    local mt = mt_memo[class] or {\r\n\t\t__index = class,\r\n\t\t__call = construct\r\n\t    }\r\n\t    mt_memo[class] = mt\r\n\t    return setmetatable(self, mt)\r\n\tend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function (self, bytes, ix) return nil, ix end",
    "type": "function"
  }, {
    "id": 12,
    "text": "function (self, val) return \"\" end",
    "type": "function"
  }, {
    "id": 13,
    "text": "function (self, bytes, ix)\r\n\t\t     return string_sub(bytes, ix, ix+n-1), ix+n\r\n\t\t end",
    "type": "function"
  }, {
    "id": 14,
    "text": "function (self, val) return string_sub(val, 1, n) end",
    "type": "function"
  }, {
    "id": 15,
    "text": "function (self, bytes, ix)\r\n\t\t return string_byte(bytes, ix, ix), ix+1\r\n\t     end",
    "type": "function"
  }, {
    "id": 16,
    "text": "function (self, val) return string_char(val) end",
    "type": "function"
  }, {
    "id": 17,
    "text": "function (self, bytes, ix)\r\n\t    local a,b,c,d = string_byte(bytes, ix, ix+3)\r\n\t    if BIG_ENDIAN then a,b,c,d = d,c,b,a end\r\n\t    return a + b*256 + c*256^2 + d*256^3, ix+4\r\n\tend",
    "type": "function"
  }, {
    "id": 18,
    "text": "function (self, val)\r\n\t    assert(type(val) == \"number\",\r\n\t\t   \"unexpected value type to pack as an uint32\")\r\n\t    local a,b,c,d\r\n\t    d = val % 2^32\r\n\t    a = d % 256; d = (d - a) / 256\r\n\t    b = d % 256; d = (d - b) / 256\r\n\t    c = d % 256; d = (d - c) / 256\r\n\t    if BIG_ENDIAN then a,b,c,d = d,c,b,a end\r\n\t    return string_char(a,b,c,d)\r\n\tend",
    "type": "function"
  }, {
    "id": 19,
    "text": "function (self, bytes, ix)\r\n\t    local a = uint32:unpack(bytes, ix)\r\n\t    local b = uint32:unpack(bytes, ix+4)\r\n\t    if BIG_ENDIAN then a,b = b,a end\r\n\t    return a + b*2^32, ix+8\r\n\tend",
    "type": "function"
  }, {
    "id": 20,
    "text": "function (self, val)\r\n\t    assert(type(val) == \"number\",\r\n\t\t   \"unexpected value type to pack as an uint64\")\r\n\t    local a = val % 2^32\r\n\t    local b = (val - a) / 2^32\r\n\t    if BIG_ENDIAN then a,b = b,a end\r\n\t    return uint32:pack(a) .. uint32:pack(b)\r\n\tend",
    "type": "function"
  }, {
    "id": 21,
    "text": "function (self, bytes, ix)\r\n\t    local sign, biased_exp, significand = explode_double(bytes, ix)\r\n\r\n\t    local val\r\n\t    if biased_exp == 0 then --subnormal\r\n\t\tval = math_ldexp(significand, -1022 - 52)\r\n\t    elseif biased_exp == 2047 then\r\n\t\tval = significand == 0 and Inf or NaN --XXX: loses NaN mantissa\r\n\t    else\t\t\t\t      --normal\r\n\t\tval = math_ldexp(2^52 + significand, biased_exp - 1023 - 52)\r\n\t    end\r\n\t    val = sign*val\r\n\t    return val, ix+8\r\n\tend",
    "type": "function"
  }, {
    "id": 22,
    "text": "function (self, val)\r\n\t    if val ~= val then\r\n\t\treturn implode_double(1,2047,2^52-1) --XXX: loses NaN mantissa\r\n\t    end\r\n\r\n\t    local sign = math_sign(val)\r\n\t    val = math_abs(val)\r\n\r\n\t    if val == Inf then return implode_double(sign, 2047, 0) end\r\n\t    if val == 0   then return implode_double(sign, 0, 0) end\r\n\r\n\t    local biased_exp, significand\r\n\r\n\t    if val <= LARGEST_SUBNORMAL then\r\n\t\tbiased_exp = 0\r\n\t\tsignificand = val / SMALLEST_SUBNORMAL\r\n\t    else\r\n\t\tlocal frac, exp = math_frexp(val)\r\n\t\tsignificand = (2*frac - 1)*2^52\r\n\t\tbiased_exp = exp + 1022\r\n\t    end\r\n\t    return implode_double(sign, biased_exp, significand)\r\n\tend",
    "type": "function"
  }, {
    "id": 23,
    "text": "function (self, bytes, ix)\r\n\t\t return IntegralTypes[SIZEOF_SIZE_T]:unpack(bytes, ix)\r\n\t     end",
    "type": "function"
  }, {
    "id": 24,
    "text": "function (self, val)\r\n\t       return IntegralTypes[SIZEOF_SIZE_T]:pack(val)\r\n\t   end",
    "type": "function"
  }, {
    "id": 25,
    "text": "function (self, bytes, ix)\r\n\t\t return IntegralTypes[SIZEOF_INT]:unpack(bytes, ix)\r\n\t     end",
    "type": "function"
  }, {
    "id": 26,
    "text": "function (self, val)\r\n\t       return IntegralTypes[SIZEOF_INT]:pack(val)\r\n\t   end",
    "type": "function"
  }, {
    "id": 27,
    "text": "function (self, bytes, ix)\r\n\t\t return FloatTypes[SIZEOF_NUMBER]:unpack(bytes, ix)\r\n\t     end",
    "type": "function"
  }, {
    "id": 28,
    "text": "function (self, val)\r\n\t       return FloatTypes[SIZEOF_NUMBER]:pack(val)\r\n\t   end",
    "type": "function"
  }, {
    "id": 29,
    "text": "function (self, bytes, ix)\r\n\t    local val = {}\r\n\t    local i,j = 1,1\r\n\t    while self[i] do\r\n\t\tlocal field = self[i]\r\n\t\tlocal key = field.name\r\n\t\tif not key then key, j = j, j+1 end\r\n\t\t--print(\"unpacking struct field\", key, \" at index \", ix)\r\n\t\tval[key], ix = field:unpack(bytes, ix)\r\n\t\ti = i+1\r\n\t    end\r\n\t    return val, ix\r\n\tend",
    "type": "function"
  }, {
    "id": 30,
    "text": "function (self, val)\r\n\t    local data = {}\r\n\t    local i,j = 1,1\r\n\t    while self[i] do\r\n\t\tlocal field = self[i]\r\n\t\tlocal key = field.name\r\n\t\tif not key then key, j = j, j+1 end\r\n\t\tdata[i] = field:pack(val[key])\r\n\t\ti = i+1\r\n\t    end\r\n\t    return table_concat(data)\r\n\tend",
    "type": "function"
  }, {
    "id": 31,
    "text": "function (self, bytes, ix)\r\n\t    local len, ix = Integer:unpack(bytes, ix)\r\n\t    local vals = {}\r\n\t    local field = self.type\r\n\t    for i=1,len do\r\n\t\t--print(\"unpacking list field\", i, \" at index \", ix)\r\n\t\tvals[i], ix = field:unpack(bytes, ix)\r\n\t    end\r\n\t    return vals, ix\r\n\tend",
    "type": "function"
  }, {
    "id": 32,
    "text": "function (self, vals)\r\n\t    local len = #vals\r\n\t    local data = { Integer:pack(len) }\r\n\t    local field = self.type\r\n\t    for i=1,len do\r\n\t\tdata[#data+1] = field:pack(vals[i])\r\n\t    end\r\n\t    return table_concat(data)\r\n\tend",
    "type": "function"
  }, {
    "id": 33,
    "text": "function (self, bytes, ix)\r\n\t    local val, ix = Integer:unpack(bytes, ix)\r\n\t    assert(val == 0 or val == 1,\r\n\t\t   \"unpacked an unexpected value \"..val..\" for a Boolean\")\r\n\t    return val == 1, ix\r\n\tend",
    "type": "function"
  }, {
    "id": 34,
    "text": "function (self, val)\r\n\t    assert(type(val) == \"boolean\",\r\n\t\t   \"unexpected value type to pack as a Boolean\")\r\n\t    return Integer:pack(val and 1 or 0)\r\n\tend",
    "type": "function"
  }, {
    "id": 35,
    "text": "function (self, bytes, ix)\r\n\t    local len, ix = Size_t:unpack(bytes, ix)\r\n\t    local val = nil\r\n\t    if len > 0 then\r\n\t\t-- len includes trailing nul byte; ignore it\r\n\t\tlocal string_len = len - 1\r\n\t\tval = bytes:sub(ix, ix+string_len-1)\r\n\t    end\r\n\t    return val, ix + len\r\n\tend",
    "type": "function"
  }, {
    "id": 36,
    "text": "function (self, val)\r\n\t    assert(type(val) == \"nil\" or type(val) == \"string\",\r\n\t\t   \"unexpected value type to pack as a String\")\r\n\t    if val == nil then\r\n\t\treturn Size_t:pack(0)\r\n\t    end\r\n\t    return Size_t:pack(#val+1) .. val .. \"\\000\"\r\n\tend",
    "type": "function"
  }, {
    "id": 37,
    "text": "function (self, bytes, ix)\r\n\t    local t, ix = Byte:unpack(bytes, ix)\r\n\t    local field = ConstantTypes[t]\r\n\t    assert(field, \"unknown constant type \"..t..\" to unpack\")\r\n\t    local v, ix = field:unpack(bytes, ix)\r\n\t    if t == 3 then\r\n\t\tassert(type(v) == \"number\")\r\n\t    end\r\n\t    return {\r\n\t\ttype = t,\r\n\t\tvalue = v\r\n\t    }, ix\r\n\tend",
    "type": "function"
  }, {
    "id": 38,
    "text": "function (self, val)\r\n\t    local t, v = val.type, val.value\r\n\t    return Byte:pack(t) .. ConstantTypes[t]:pack(v)\r\n\tend",
    "type": "function"
  }, {
    "id": 39,
    "text": "function (self, bytes, ix)\r\n\t    local chunk = {}\r\n\t    local header, ix = ChunkHeader:unpack(bytes, ix)\r\n\t    assert(header.signature == \"\\027Lua\", \"signature check failed\")\r\n\t    assert(header.version == 81, \"version mismatch\")\r\n\t    assert(header.format == 0, \"format mismatch\")\r\n\t    assert(header.endianness == 0 or\r\n\t\t   header.endianness == 1, \"endianness mismatch\")\r\n\t    assert(IntegralTypes[header.sizeof_int], \"int size unsupported\")\r\n\t    assert(IntegralTypes[header.sizeof_size_t], \"size_t size unsupported\")\r\n\t    assert(header.sizeof_insn == 4, \"insn size unsupported\")\r\n\t    assert(FloatTypes[header.sizeof_Number], \"number size unsupported\")\r\n\t    assert(header.integral_flag == 0, \"integral flag mismatch; only floats supported\")\r\n\r\n\t    save()\r\n\t\tBIG_ENDIAN = header.endianness == 0\r\n\t\tSIZEOF_SIZE_T = header.sizeof_size_t\r\n\t\tSIZEOF_INT = header.sizeof_int\r\n\t\tSIZEOF_NUMBER = header.sizeof_Number\r\n\t\tchunk.header = header\r\n\t\tchunk.body, ix = Function:unpack(bytes, ix)\r\n\t    restore()\r\n\t    return chunk, ix\r\n\tend",
    "type": "function"
  }, {
    "id": 40,
    "text": "function (self, val)\r\n\t    local data\r\n\t    save()\r\n\t\tlocal header = val.header\r\n\t\tBIG_ENDIAN = header.endianness == 0\r\n\t\tSIZEOF_SIZE_T = header.sizeof_size_t\r\n\t\tSIZEOF_INT = header.sizeof_int\r\n\t\tSIZEOF_NUMBER = header.sizeof_Number\r\n\t\tdata = ChunkHeader:pack(val.header) .. Function:pack(val.body)\r\n\t    restore()\r\n\t    return data\r\n\tend",
    "type": "function"
  }, {
    "id": 41,
    "text": "function (chunk) return Chunk:unpack(chunk, 1) end",
    "type": "function"
  }, {
    "id": 42,
    "text": "function (disassembled) return Chunk:pack(disassembled) end",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "function container"
  }, {
    "id": 44,
    "text": "function compile_string(str, name)\r\n\t-- Strips debug info, if you're wondering :)\r\n\tlocal chunk = string.dump(loadstring(str, name));\r\n\tif ((not opts.debug) or opts.compile_strip) and opts.compile_strip ~= false then\r\n\t\tlocal c = cs.disassemble(chunk);\r\n\t\tlocal function strip_debug(c)\r\n\t\t\tc.source_lines, c.locals, c.upvalues = {}, {}, {};\r\n\t\t\t\r\n\t\t\tfor i, f in ipairs(c.prototypes) do\r\n\t\t\t\tstrip_debug(f);\r\n\t\t\tend\r\n\t\tend\r\n\t\tprint_verbose(\"Stripping debug info...\");\r\n\t\tstrip_debug(c.body);\r\n\t\treturn cs.assemble(c);\r\n\tend\r\n\treturn chunk;\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local function construct (class, ...)\r\n    return class.new(class, ...)\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "local function char(n)\r\n    local field = char_memo[n] or Field{\r\n\tunpack = function (self, bytes, ix)\r\n\t\t     return string_sub(bytes, ix, ix+n-1), ix+n\r\n\t\t end,\r\n\tpack = function (self, val) return string_sub(val, 1, n) end\r\n    }\r\n    char_memo[n] = field\r\n    return field\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "local field = char_memo[n] or Field{\r\n\tunpack = function (self, bytes, ix)\r\n\t\t     return string_sub(bytes, ix, ix+n-1), ix+n\r\n\t\t end,\r\n\tpack = function (self, val) return string_sub(val, 1, n) end\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "char_memo[n] = field",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "local function validate(chunk)\r\n    if type(chunk) == \"function\" then\r\n\treturn validate(string.dump(chunk))\r\n    end\r\n    local f = Chunk:unpack(chunk, 1)\r\n    local chunk2 = Chunk:pack(f)\r\n\r\n    if chunk == chunk2 then return true end\r\n\r\n    local i\r\n    local len = math.min(#chunk, #chunk2)\r\n    for i=1,len do\r\n\tlocal a = chunk:sub(i,i)\r\n\tlocal b = chunk:sub(i,i)\r\n\tif a ~= b then\r\n\t    return false, (\"chunk roundtripping failed: \"..\r\n\t\t\t   \"first byte difference at index %d\"):format(i)\r\n\tend\r\n    end\r\n    return false, (\"chunk round tripping failed: \"..\r\n\t\t   \"original length %d vs. %d\"):format(#chunk, #chunk2)\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "if type(chunk) == \"function\" then\r\n\treturn validate(string.dump(chunk))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "local f = Chunk:unpack(chunk, 1)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "local chunk2 = Chunk:pack(f)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if chunk == chunk2 then return true end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "local i",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local len = math.min(#chunk, #chunk2)",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "for i=1,len do\r\n\tlocal a = chunk:sub(i,i)\r\n\tlocal b = chunk:sub(i,i)\r\n\tif a ~= b then\r\n\t    return false, (\"chunk roundtripping failed: \"..\r\n\t\t\t   \"first byte difference at index %d\"):format(i)\r\n\tend\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 60,
    "text": "local a = chunk:sub(i,i)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "local b = chunk:sub(i,i)",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if a ~= b then\r\n\t    return false, (\"chunk roundtripping failed: \"..\r\n\t\t\t   \"first byte difference at index %d\"):format(i)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function (class, self)\r\n\t    local self = self or {}\r\n\t    local mt = mt_memo[class] or {\r\n\t\t__index = class,\r\n\t\t__call = construct\r\n\t    }\r\n\t    mt_memo[class] = mt\r\n\t    return setmetatable(self, mt)\r\n\tend",
    "type": "function"
  }, {
    "id": 65,
    "text": "local self = self or {}",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local mt = mt_memo[class] or {\r\n\t\t__index = class,\r\n\t\t__call = construct\r\n\t    }",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "mt_memo[class] = mt",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function (self, bytes, ix) return nil, ix end",
    "type": "function"
  }, {
    "id": 70,
    "text": "function (self, val) return \"\" end",
    "type": "function"
  }, {
    "id": 71,
    "text": "function (self, bytes, ix)\r\n\t\t     return string_sub(bytes, ix, ix+n-1), ix+n\r\n\t\t end",
    "type": "function"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function (self, val) return string_sub(val, 1, n) end",
    "type": "function"
  }, {
    "id": 74,
    "text": "function (self, bytes, ix)\r\n\t\t return string_byte(bytes, ix, ix), ix+1\r\n\t     end",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function (self, val) return string_char(val) end",
    "type": "function"
  }, {
    "id": 77,
    "text": "function (self, bytes, ix)\r\n\t    local a,b,c,d = string_byte(bytes, ix, ix+3)\r\n\t    if BIG_ENDIAN then a,b,c,d = d,c,b,a end\r\n\t    return a + b*256 + c*256^2 + d*256^3, ix+4\r\n\tend",
    "type": "function"
  }, {
    "id": 78,
    "text": "local a,b,c,d = string_byte(bytes, ix, ix+3)",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "if BIG_ENDIAN then a,b,c,d = d,c,b,a end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "a,b,c,d = d,c,b,a",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function (self, val)\r\n\t    assert(type(val) == \"number\",\r\n\t\t   \"unexpected value type to pack as an uint32\")\r\n\t    local a,b,c,d\r\n\t    d = val % 2^32\r\n\t    a = d % 256; d = (d - a) / 256\r\n\t    b = d % 256; d = (d - b) / 256\r\n\t    c = d % 256; d = (d - c) / 256\r\n\t    if BIG_ENDIAN then a,b,c,d = d,c,b,a end\r\n\t    return string_char(a,b,c,d)\r\n\tend",
    "type": "function"
  }, {
    "id": 83,
    "text": "assert(type(val) == \"number\",\r\n\t\t   \"unexpected value type to pack as an uint32\")",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "local a,b,c,d",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "d = val % 2^32",
    "type": "statement:assign"
  }, {
    "id": 86,
    "text": "a = d % 256",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "d = (d - a) / 256",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "b = d % 256",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "d = (d - b) / 256",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "c = d % 256",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "d = (d - c) / 256",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function (self, bytes, ix)\r\n\t\t local val, ix = uint32:unpack(bytes, ix)\r\n\t\t return val < 2^32 and val or (val - 2^31), ix\r\n\t     end",
    "type": "function"
  }, {
    "id": 94,
    "text": "local val, ix = uint32:unpack(bytes, ix)",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function (self, bytes, ix)\r\n\t    local val = {}\r\n\t    local i,j = 1,1\r\n\t    while self[i] do\r\n\t\tlocal field = self[i]\r\n\t\tlocal key = field.name\r\n\t\tif not key then key, j = j, j+1 end\r\n\t\t--print(\"unpacking struct field\", key, \" at index \", ix)\r\n\t\tval[key], ix = field:unpack(bytes, ix)\r\n\t\ti = i+1\r\n\t    end\r\n\t    return val, ix\r\n\tend",
    "type": "function"
  }, {
    "id": 97,
    "text": "local val = {}",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "local i,j = 1,1",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "while self[i] do\r\n\t\tlocal field = self[i]\r\n\t\tlocal key = field.name\r\n\t\tif not key then key, j = j, j+1 end\r\n\t\t--print(\"unpacking struct field\", key, \" at index \", ix)\r\n\t\tval[key], ix = field:unpack(bytes, ix)\r\n\t\ti = i+1\r\n\t    end",
    "type": "statement:while"
  }, {
    "id": 100,
    "text": "local field = self[i]",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "local key = field.name",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "if not key then key, j = j, j+1 end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "key, j = j, j+1",
    "type": "statement:assign"
  }, {
    "id": 104,
    "text": "val[key], ix = field:unpack(bytes, ix)",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "i = i+1",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function (self, val)\r\n\t    local data = {}\r\n\t    local i,j = 1,1\r\n\t    while self[i] do\r\n\t\tlocal field = self[i]\r\n\t\tlocal key = field.name\r\n\t\tif not key then key, j = j, j+1 end\r\n\t\tdata[i] = field:pack(val[key])\r\n\t\ti = i+1\r\n\t    end\r\n\t    return table_concat(data)\r\n\tend",
    "type": "function"
  }, {
    "id": 108,
    "text": "local data = {}",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "while self[i] do\r\n\t\tlocal field = self[i]\r\n\t\tlocal key = field.name\r\n\t\tif not key then key, j = j, j+1 end\r\n\t\tdata[i] = field:pack(val[key])\r\n\t\ti = i+1\r\n\t    end",
    "type": "statement:while"
  }, {
    "id": 110,
    "text": "data[i] = field:pack(val[key])",
    "type": "statement:assign"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function (self, bytes, ix)\r\n\t    local len, ix = Integer:unpack(bytes, ix)\r\n\t    local vals = {}\r\n\t    local field = self.type\r\n\t    for i=1,len do\r\n\t\t--print(\"unpacking list field\", i, \" at index \", ix)\r\n\t\tvals[i], ix = field:unpack(bytes, ix)\r\n\t    end\r\n\t    return vals, ix\r\n\tend",
    "type": "function"
  }, {
    "id": 113,
    "text": "local len, ix = Integer:unpack(bytes, ix)",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "local vals = {}",
    "type": "statement:localassign"
  }, {
    "id": 115,
    "text": "local field = self.type",
    "type": "statement:localassign"
  }, {
    "id": 116,
    "text": "for i=1,len do\r\n\t\t--print(\"unpacking list field\", i, \" at index \", ix)\r\n\t\tvals[i], ix = field:unpack(bytes, ix)\r\n\t    end",
    "type": "statement:numericfor"
  }, {
    "id": 117,
    "text": "vals[i], ix = field:unpack(bytes, ix)",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function (self, vals)\r\n\t    local len = #vals\r\n\t    local data = { Integer:pack(len) }\r\n\t    local field = self.type\r\n\t    for i=1,len do\r\n\t\tdata[#data+1] = field:pack(vals[i])\r\n\t    end\r\n\t    return table_concat(data)\r\n\tend",
    "type": "function"
  }, {
    "id": 120,
    "text": "local len = #vals",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "local data = { Integer:pack(len) }",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "for i=1,len do\r\n\t\tdata[#data+1] = field:pack(vals[i])\r\n\t    end",
    "type": "statement:numericfor"
  }, {
    "id": 123,
    "text": "data[#data+1] = field:pack(vals[i])",
    "type": "statement:assign"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function (self, bytes, ix)\r\n\t    local val, ix = Integer:unpack(bytes, ix)\r\n\t    assert(val == 0 or val == 1,\r\n\t\t   \"unpacked an unexpected value \"..val..\" for a Boolean\")\r\n\t    return val == 1, ix\r\n\tend",
    "type": "function"
  }, {
    "id": 126,
    "text": "local val, ix = Integer:unpack(bytes, ix)",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "assert(val == 0 or val == 1,\r\n\t\t   \"unpacked an unexpected value \"..val..\" for a Boolean\")",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function (self, val)\r\n\t    assert(type(val) == \"boolean\",\r\n\t\t   \"unexpected value type to pack as a Boolean\")\r\n\t    return Integer:pack(val and 1 or 0)\r\n\tend",
    "type": "function"
  }, {
    "id": 130,
    "text": "assert(type(val) == \"boolean\",\r\n\t\t   \"unexpected value type to pack as a Boolean\")",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function (self, bytes, ix)\r\n\t    local len, ix = Integer:unpack(bytes, ix)\r\n\t    local val = nil\r\n\t    if len > 0 then\r\n\t\t-- len includes trailing nul byte; ignore it\r\n\t\tlocal string_len = len - 1\r\n\t\tval = bytes:sub(ix, ix+string_len-1)\r\n\t    end\r\n\t    return val, ix + len\r\n\tend",
    "type": "function"
  }, {
    "id": 133,
    "text": "local val = nil",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "if len > 0 then\r\n\t\t-- len includes trailing nul byte; ignore it\r\n\t\tlocal string_len = len - 1\r\n\t\tval = bytes:sub(ix, ix+string_len-1)\r\n\t    end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "local string_len = len - 1",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "val = bytes:sub(ix, ix+string_len-1)",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function (self, val)\r\n\t    assert(type(val) == \"nil\" or type(val) == \"string\",\r\n\t\t   \"unexpected value type to pack as a String\")\r\n\t    if val == nil then\r\n\t\treturn Integer:pack(0)\r\n\t    end\r\n\t    return Integer:pack(#val+1) .. val .. \"\\000\"\r\n\tend",
    "type": "function"
  }, {
    "id": 139,
    "text": "assert(type(val) == \"nil\" or type(val) == \"string\",\r\n\t\t   \"unexpected value type to pack as a String\")",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "if val == nil then\r\n\t\treturn Integer:pack(0)\r\n\t    end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "function (self, bytes, ix)\r\n\t    local t, ix = Byte:unpack(bytes, ix)\r\n\t    local field = ConstantTypes[t]\r\n\t    assert(field, \"unknown constant type \"..t..\" to unpack\")\r\n\t    local v, ix = field:unpack(bytes, ix)\r\n\t    return {\r\n\t\ttype = t,\r\n\t\tvalue = v\r\n\t    }, ix\r\n\tend",
    "type": "function"
  }, {
    "id": 143,
    "text": "local t, ix = Byte:unpack(bytes, ix)",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "local field = ConstantTypes[t]",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "assert(field, \"unknown constant type \"..t..\" to unpack\")",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "local v, ix = field:unpack(bytes, ix)",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "function (self, val)\r\n\t    local t, v = val.type, val.value\r\n\t    return Byte:pack(t) .. ConstantTypes[t]:pack(v)\r\n\tend",
    "type": "function"
  }, {
    "id": 149,
    "text": "local t, v = val.type, val.value",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function (chunk) return Chunk:unpack(chunk, 1) end",
    "type": "function"
  }, {
    "id": 152,
    "text": "function (disassembled) return Chunk:pack(disassembled) end",
    "type": "function"
  }, {
    "id": 153,
    "text": "local function ___adjust_chunk(chunk, newname, lineshift)\r\n\tlocal c = cs.disassemble(string.dump(chunk));\r\n\tc.body.name = newname;\r\n\r\n\tlineshift = -c.body.line;\r\n\tlocal function shiftlines(c)\r\n\t\tc.line = c.line + lineshift;\r\n\t\tc.last_line = c.last_line + lineshift;\r\n\t\tfor i, line in ipairs(c.source_lines) do\r\n\t\t\tc.source_lines[i] = line+lineshift;\r\n\t\tend\r\n\t\tfor i, f in ipairs(c.prototypes) do\r\n\t\t\tshiftlines(f);\r\n\t\tend\r\n\tend\r\n\tshiftlines(c.body);\r\n\r\n\treturn assert(loadstring(cs.assemble(c), newname))();\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 155,
    "text": "new",
    "type": "global function"
  }, {
    "id": 156,
    "text": "min",
    "type": "global function"
  }, {
    "id": 157,
    "text": "table_concat",
    "type": "global function"
  }, {
    "id": 158,
    "text": "math_frexp",
    "type": "global function"
  }, {
    "id": 159,
    "text": "string_char",
    "type": "global function"
  }, {
    "id": 160,
    "text": "math_ldexp",
    "type": "global function"
  }, {
    "id": 161,
    "text": "dump",
    "type": "global function"
  }, {
    "id": 162,
    "text": "uint32",
    "type": "global function"
  }, {
    "id": 163,
    "text": "Field",
    "type": "global function"
  }, {
    "id": 164,
    "text": "ChunkHeader",
    "type": "global function"
  }, {
    "id": 165,
    "text": "Struct",
    "type": "global function"
  }, {
    "id": 166,
    "text": "string_sub",
    "type": "global function"
  }, {
    "id": 167,
    "text": "List",
    "type": "global function"
  }, {
    "id": 168,
    "text": "string_byte",
    "type": "global function"
  }, {
    "id": 169,
    "text": "Function",
    "type": "global function"
  }, {
    "id": 170,
    "text": "Integer",
    "type": "global function"
  }, {
    "id": 171,
    "text": "type",
    "type": "global function"
  }, {
    "id": 172,
    "text": "Byte",
    "type": "global function"
  }, {
    "id": 173,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 174,
    "text": "String",
    "type": "global function"
  }, {
    "id": 175,
    "text": "math_abs",
    "type": "global function"
  }, {
    "id": 176,
    "text": "",
    "type": "variable container"
  }, {
    "id": 177,
    "text": "",
    "type": "require container"
  }, {
    "id": 178,
    "text": "",
    "type": "local variable"
  }, {
    "id": 179,
    "text": "",
    "type": "local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "local variable"
  }, {
    "id": 181,
    "text": "",
    "type": "local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "local variable"
  }, {
    "id": 183,
    "text": "",
    "type": "local variable"
  }, {
    "id": 184,
    "text": "",
    "type": "local variable"
  }, {
    "id": 185,
    "text": "",
    "type": "local variable"
  }, {
    "id": 186,
    "text": "",
    "type": "local variable"
  }, {
    "id": 187,
    "text": "",
    "type": "local variable"
  }, {
    "id": 188,
    "text": "",
    "type": "local variable"
  }, {
    "id": 189,
    "text": "",
    "type": "local variable"
  }, {
    "id": 190,
    "text": "",
    "type": "local variable"
  }, {
    "id": 191,
    "text": "",
    "type": "local variable"
  }, {
    "id": 192,
    "text": "",
    "type": "local variable"
  }, {
    "id": 193,
    "text": "",
    "type": "local variable"
  }, {
    "id": 194,
    "text": "",
    "type": "local variable"
  }, {
    "id": 195,
    "text": "",
    "type": "local variable"
  }, {
    "id": 196,
    "text": "",
    "type": "local variable"
  }, {
    "id": 197,
    "text": "",
    "type": "local variable"
  }, {
    "id": 198,
    "text": "",
    "type": "local variable"
  }, {
    "id": 199,
    "text": "",
    "type": "local variable"
  }, {
    "id": 200,
    "text": "",
    "type": "local variable"
  }, {
    "id": 201,
    "text": "",
    "type": "local variable"
  }, {
    "id": 202,
    "text": "",
    "type": "local variable"
  }, {
    "id": 203,
    "text": "",
    "type": "local variable"
  }, {
    "id": 204,
    "text": "",
    "type": "local variable"
  }, {
    "id": 205,
    "text": "",
    "type": "local variable"
  }, {
    "id": 206,
    "text": "",
    "type": "local variable"
  }, {
    "id": 207,
    "text": "",
    "type": "local variable"
  }, {
    "id": 208,
    "text": "",
    "type": "local variable"
  }, {
    "id": 209,
    "text": "",
    "type": "local variable"
  }, {
    "id": 210,
    "text": "",
    "type": "local variable"
  }, {
    "id": 211,
    "text": "",
    "type": "local variable"
  }, {
    "id": 212,
    "text": "",
    "type": "local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "local variable"
  }, {
    "id": 214,
    "text": "",
    "type": "local variable"
  }, {
    "id": 215,
    "text": "",
    "type": "local variable"
  }, {
    "id": 216,
    "text": "",
    "type": "local variable"
  }, {
    "id": 217,
    "text": "",
    "type": "local variable"
  }, {
    "id": 218,
    "text": "",
    "type": "local variable"
  }, {
    "id": 219,
    "text": "",
    "type": "local variable"
  }, {
    "id": 220,
    "text": "",
    "type": "local variable"
  }, {
    "id": 221,
    "text": "",
    "type": "local variable"
  }, {
    "id": 222,
    "text": "",
    "type": "local variable"
  }, {
    "id": 223,
    "text": "",
    "type": "local variable"
  }, {
    "id": 224,
    "text": "",
    "type": "local variable"
  }, {
    "id": 225,
    "text": "",
    "type": "local variable"
  }, {
    "id": 226,
    "text": "",
    "type": "local variable"
  }, {
    "id": 227,
    "text": "",
    "type": "local variable"
  }, {
    "id": 228,
    "text": "",
    "type": "local variable"
  }, {
    "id": 229,
    "text": "",
    "type": "global variable"
  }, {
    "id": 230,
    "text": "",
    "type": "interface container"
  }, {
    "id": 231,
    "text": "",
    "type": "interface"
  }, {
    "id": 232,
    "text": "",
    "type": "interface"
  }, {
    "id": 233,
    "text": "",
    "type": "interface"
  }, {
    "id": 234,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 235,
    "text": "",
    "type": "variable container"
  }, {
    "id": 236,
    "text": "",
    "type": "require container"
  }, {
    "id": 237,
    "text": "",
    "type": "local variable"
  }, {
    "id": 238,
    "text": "",
    "type": "n/a"
  }, {
    "id": 239,
    "text": "",
    "type": "local variable"
  }, {
    "id": 240,
    "text": "",
    "type": "n/a"
  }, {
    "id": 241,
    "text": "",
    "type": "local variable"
  }, {
    "id": 242,
    "text": "",
    "type": "n/a"
  }, {
    "id": 243,
    "text": "",
    "type": "local variable"
  }, {
    "id": 244,
    "text": "",
    "type": "n/a"
  }, {
    "id": 245,
    "text": "",
    "type": "local variable"
  }, {
    "id": 246,
    "text": "",
    "type": "n/a"
  }, {
    "id": 247,
    "text": "",
    "type": "local variable"
  }, {
    "id": 248,
    "text": "",
    "type": "n/a"
  }, {
    "id": 249,
    "text": "",
    "type": "local variable"
  }, {
    "id": 250,
    "text": "",
    "type": "n/a"
  }, {
    "id": 251,
    "text": "",
    "type": "local variable"
  }, {
    "id": 252,
    "text": "",
    "type": "n/a"
  }, {
    "id": 253,
    "text": "",
    "type": "local variable"
  }, {
    "id": 254,
    "text": "",
    "type": "n/a"
  }, {
    "id": 255,
    "text": "",
    "type": "local variable"
  }, {
    "id": 256,
    "text": "",
    "type": "n/a"
  }, {
    "id": 257,
    "text": "",
    "type": "local variable"
  }, {
    "id": 258,
    "text": "",
    "type": "n/a"
  }, {
    "id": 259,
    "text": "",
    "type": "local variable"
  }, {
    "id": 260,
    "text": "",
    "type": "n/a"
  }, {
    "id": 261,
    "text": "",
    "type": "local variable"
  }, {
    "id": 262,
    "text": "",
    "type": "n/a"
  }, {
    "id": 263,
    "text": "",
    "type": "local variable"
  }, {
    "id": 264,
    "text": "",
    "type": "n/a"
  }, {
    "id": 265,
    "text": "",
    "type": "local variable"
  }, {
    "id": 266,
    "text": "",
    "type": "n/a"
  }, {
    "id": 267,
    "text": "",
    "type": "local variable"
  }, {
    "id": 268,
    "text": "",
    "type": "n/a"
  }, {
    "id": 269,
    "text": "",
    "type": "local variable"
  }, {
    "id": 270,
    "text": "",
    "type": "n/a"
  }, {
    "id": 271,
    "text": "",
    "type": "local variable"
  }, {
    "id": 272,
    "text": "",
    "type": "boolean"
  }, {
    "id": 273,
    "text": "",
    "type": "local variable"
  }, {
    "id": 274,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 275,
    "text": "",
    "type": "local variable"
  }, {
    "id": 276,
    "text": "",
    "type": "n/a"
  }, {
    "id": 277,
    "text": "",
    "type": "local variable"
  }, {
    "id": 278,
    "text": "",
    "type": "n/a"
  }, {
    "id": 279,
    "text": "",
    "type": "local variable"
  }, {
    "id": 280,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 281,
    "text": "",
    "type": "local variable"
  }, {
    "id": 282,
    "text": "",
    "type": "n/a"
  }, {
    "id": 283,
    "text": "",
    "type": "local variable"
  }, {
    "id": 284,
    "text": "",
    "type": "n/a"
  }, {
    "id": 285,
    "text": "",
    "type": "local variable"
  }, {
    "id": 286,
    "text": "",
    "type": "n/a"
  }, {
    "id": 287,
    "text": "",
    "type": "local variable"
  }, {
    "id": 288,
    "text": "",
    "type": "n/a"
  }, {
    "id": 289,
    "text": "",
    "type": "local variable"
  }, {
    "id": 290,
    "text": "",
    "type": "n/a"
  }, {
    "id": 291,
    "text": "",
    "type": "local variable"
  }, {
    "id": 292,
    "text": "",
    "type": "n/a"
  }, {
    "id": 293,
    "text": "",
    "type": "local variable"
  }, {
    "id": 294,
    "text": "",
    "type": "n/a"
  }, {
    "id": 295,
    "text": "",
    "type": "local variable"
  }, {
    "id": 296,
    "text": "",
    "type": "n/a"
  }, {
    "id": 297,
    "text": "",
    "type": "local variable"
  }, {
    "id": 298,
    "text": "",
    "type": "n/a"
  }, {
    "id": 299,
    "text": "",
    "type": "local variable"
  }, {
    "id": 300,
    "text": "",
    "type": "n/a"
  }, {
    "id": 301,
    "text": "",
    "type": "local variable"
  }, {
    "id": 302,
    "text": "",
    "type": "n/a"
  }, {
    "id": 303,
    "text": "",
    "type": "local variable"
  }, {
    "id": 304,
    "text": "",
    "type": "n/a"
  }, {
    "id": 305,
    "text": "",
    "type": "local variable"
  }, {
    "id": 306,
    "text": "",
    "type": "n/a"
  }, {
    "id": 307,
    "text": "",
    "type": "local variable"
  }, {
    "id": 308,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 309,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 310,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 311,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 312,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 313,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 314,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 315,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 316,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 317,
    "text": "",
    "type": "local variable"
  }, {
    "id": 318,
    "text": "",
    "type": "n/a"
  }, {
    "id": 319,
    "text": "",
    "type": "local variable"
  }, {
    "id": 320,
    "text": "",
    "type": "n/a"
  }, {
    "id": 321,
    "text": "",
    "type": "local variable"
  }, {
    "id": 322,
    "text": "",
    "type": "n/a"
  }, {
    "id": 323,
    "text": "",
    "type": "local variable"
  }, {
    "id": 324,
    "text": "",
    "type": "n/a"
  }, {
    "id": 325,
    "text": "",
    "type": "global variable"
  }, {
    "id": 326,
    "text": "",
    "type": "n/a"
  }, {
    "id": 327,
    "text": "",
    "type": "interface container"
  }, {
    "id": 328,
    "text": "",
    "type": "interface"
  }, {
    "id": 329,
    "text": "",
    "type": "interface"
  }, {
    "id": 330,
    "text": "",
    "type": "interface"
  }, {
    "id": 331,
    "text": "",
    "type": "require local variable"
  } ]
}