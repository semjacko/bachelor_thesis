{
  "_filename": "squish.compile.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/squish/compile/squish.compile.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 4,
    "label": "has",
    "to": 14
  }, {
    "from": 4,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 9
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 14
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 18,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 18,
    "label": "has",
    "to": 14
  }, {
    "from": 18,
    "label": "has",
    "to": 25
  }, {
    "from": 18,
    "label": "has",
    "to": 26
  }, {
    "from": 18,
    "label": "has",
    "to": 27
  }, {
    "from": 18,
    "label": "has",
    "to": 28
  }, {
    "from": 18,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 18,
    "label": "has",
    "to": 31
  }, {
    "from": 18,
    "label": "has",
    "to": 32
  }, {
    "from": 18,
    "label": "has",
    "to": 33
  }, {
    "from": 4,
    "label": "calls",
    "to": 35
  }, {
    "from": 34,
    "label": "calls",
    "to": 18
  }, {
    "from": 16,
    "label": "calls",
    "to": 16
  }, {
    "from": 4,
    "label": "calls",
    "to": 16
  }, {
    "from": 16,
    "label": "calls",
    "to": 38
  }, {
    "from": 4,
    "label": "calls",
    "to": 44
  }, {
    "from": 18,
    "label": "calls",
    "to": 37
  }, {
    "from": 18,
    "label": "calls",
    "to": 37
  }, {
    "from": 18,
    "label": "calls",
    "to": 41
  }, {
    "from": 18,
    "label": "calls",
    "to": 41
  }, {
    "from": 4,
    "label": "calls",
    "to": 40
  }, {
    "from": 18,
    "label": "calls",
    "to": 4
  }, {
    "from": 4,
    "label": "calls",
    "to": 42
  }, {
    "from": 18,
    "label": "calls",
    "to": 39
  }, {
    "from": 18,
    "label": "calls",
    "to": 43
  }, {
    "from": 18,
    "label": "calls",
    "to": 43
  }, {
    "from": 4,
    "label": "calls",
    "to": 36
  }, {
    "from": 34,
    "label": "declares",
    "to": 4
  }, {
    "from": 34,
    "label": "declares",
    "to": 16
  }, {
    "from": 34,
    "label": "declares",
    "to": 18
  }, {
    "from": 3,
    "label": "contains",
    "to": 45
  }, {
    "from": 3,
    "label": "contains",
    "to": 46
  }, {
    "from": 46,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "requires",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "squish",
    "type": "module"
  }, {
    "id": 2,
    "text": "minichunkspy",
    "type": "module"
  }, {
    "id": 3,
    "text": "squish",
    "type": "module"
  }, {
    "id": 4,
    "text": "function compile_string(str, name)\r\n\t-- Strips debug info, if you're wondering :)\r\n\tlocal chunk = string.dump(loadstring(str, name));\r\n\tif ((not opts.debug) or opts.compile_strip) and opts.compile_strip ~= false then\r\n\t\tlocal c = cs.disassemble(chunk);\r\n\t\tlocal function strip_debug(c)\r\n\t\t\tc.source_lines, c.locals, c.upvalues = {}, {}, {};\r\n\t\t\t\r\n\t\t\tfor i, f in ipairs(c.prototypes) do\r\n\t\t\t\tstrip_debug(f);\r\n\t\t\tend\r\n\t\tend\r\n\t\tprint_verbose(\"Stripping debug info...\");\r\n\t\tstrip_debug(c.body);\r\n\t\treturn cs.assemble(c);\r\n\tend\r\n\treturn chunk;\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local chunk = string.dump(loadstring(str, name))",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if ((not opts.debug) or opts.compile_strip) and opts.compile_strip ~= false then\r\n\t\tlocal c = cs.disassemble(chunk);\r\n\t\tlocal function strip_debug(c)\r\n\t\t\tc.source_lines, c.locals, c.upvalues = {}, {}, {};\r\n\t\t\t\r\n\t\t\tfor i, f in ipairs(c.prototypes) do\r\n\t\t\t\tstrip_debug(f);\r\n\t\t\tend\r\n\t\tend\r\n\t\tprint_verbose(\"Stripping debug info...\");\r\n\t\tstrip_debug(c.body);\r\n\t\treturn cs.assemble(c);\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "local c = cs.disassemble(chunk)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local function strip_debug(c)\r\n\t\t\tc.source_lines, c.locals, c.upvalues = {}, {}, {};\r\n\t\t\t\r\n\t\t\tfor i, f in ipairs(c.prototypes) do\r\n\t\t\t\tstrip_debug(f);\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:localfunction"
  }, {
    "id": 9,
    "text": "c.source_lines, c.locals, c.upvalues = {}, {}, {}",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "for i, f in ipairs(c.prototypes) do\r\n\t\t\t\tstrip_debug(f);\r\n\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 11,
    "text": "strip_debug(f)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "print_verbose(\"Stripping debug info...\")",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "strip_debug(c.body)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function strip_debug(c)\r\n\t\t\tc.source_lines, c.locals, c.upvalues = {}, {}, {};\r\n\t\t\t\r\n\t\t\tfor i, f in ipairs(c.prototypes) do\r\n\t\t\t\tstrip_debug(f);\r\n\t\t\tend\r\n\t\tend",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function compile_file(infile_fn, outfile_fn)\r\n\tlocal infile, err = io.open(infile_fn);\r\n\tif not infile then\r\n\t\tprint_err(\"Can't open input file for reading: \"..tostring(err));\r\n\t\treturn;\r\n\tend\r\n\t\r\n\tlocal outfile, err = io.open(outfile_fn..\".compiled\", \"w+\");\r\n\tif not outfile then\r\n\t\tprint_err(\"Can't open output file for writing: \"..tostring(err));\r\n\t\treturn;\r\n\tend\r\n\t\r\n\tlocal data = infile:read(\"*a\");\r\n\tinfile:close();\r\n\t\r\n\tlocal shebang, newdata = data:match(\"^(#.-\\n)(.+)$\");\r\n\tlocal code = newdata or data;\r\n\tif shebang then\r\n\t\toutfile:write(shebang)\r\n\tend\r\n\r\n\toutfile:write(compile_string(code, outfile_fn));\r\n\t\r\n\tos.rename(outfile_fn..\".compiled\", outfile_fn);\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local infile, err = io.open(infile_fn)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if not infile then\r\n\t\tprint_err(\"Can't open input file for reading: \"..tostring(err));\r\n\t\treturn;\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "print_err(\"Can't open input file for reading: \"..tostring(err))",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "local outfile, err = io.open(outfile_fn..\".compiled\", \"w+\")",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if not outfile then\r\n\t\tprint_err(\"Can't open output file for writing: \"..tostring(err));\r\n\t\treturn;\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "print_err(\"Can't open output file for writing: \"..tostring(err))",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "local data = infile:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "infile:close()",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "local shebang, newdata = data:match(\"^(#.-\\n)(.+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local code = newdata or data",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if shebang then\r\n\t\toutfile:write(shebang)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "outfile:write(shebang)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "outfile:write(compile_string(code, outfile_fn))",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "os.rename(outfile_fn..\".compiled\", outfile_fn)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "",
    "type": "function container"
  }, {
    "id": 35,
    "text": "function (chunk) return Chunk:unpack(chunk, 1) end",
    "type": "function"
  }, {
    "id": 36,
    "text": "function (disassembled) return Chunk:pack(disassembled) end",
    "type": "function"
  }, {
    "id": 37,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 38,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 39,
    "text": "rename",
    "type": "global function"
  }, {
    "id": 40,
    "text": "dump",
    "type": "global function"
  }, {
    "id": 41,
    "text": "print_err",
    "type": "global function"
  }, {
    "id": 42,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 43,
    "text": "open",
    "type": "global function"
  }, {
    "id": 44,
    "text": "print_verbose",
    "type": "global function"
  }, {
    "id": 45,
    "text": "",
    "type": "variable container"
  }, {
    "id": 46,
    "text": "",
    "type": "require container"
  }, {
    "id": 47,
    "text": "",
    "type": "require local variable"
  } ]
}