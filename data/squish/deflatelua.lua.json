{
  "_filename": "deflatelua.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/squish/gzip/deflatelua.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 7
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 8
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 8
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 8
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 36
  }, {
    "from": 41,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 41,
    "label": "has",
    "to": 8
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 8
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 46,
    "label": "has",
    "to": 8
  }, {
    "from": 46,
    "label": "has",
    "to": 53
  }, {
    "from": 46,
    "label": "has",
    "to": 54
  }, {
    "from": 46,
    "label": "has",
    "to": 55
  }, {
    "from": 46,
    "label": "has",
    "to": 56
  }, {
    "from": 46,
    "label": "has",
    "to": 8
  }, {
    "from": 43,
    "label": "has",
    "to": 57
  }, {
    "from": 43,
    "label": "has",
    "to": 8
  }, {
    "from": 43,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 8
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 47
  }, {
    "from": 61,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 61,
    "label": "has",
    "to": 8
  }, {
    "from": 61,
    "label": "has",
    "to": 53
  }, {
    "from": 61,
    "label": "has",
    "to": 54
  }, {
    "from": 61,
    "label": "has",
    "to": 55
  }, {
    "from": 61,
    "label": "has",
    "to": 56
  }, {
    "from": 61,
    "label": "has",
    "to": 8
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 8
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 67,
    "label": "has",
    "to": 70
  }, {
    "from": 65,
    "label": "has",
    "to": 8
  }, {
    "from": 65,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 69
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 78
  }, {
    "from": 73,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 8
  }, {
    "from": 73,
    "label": "has",
    "to": 84
  }, {
    "from": 73,
    "label": "has",
    "to": 85
  }, {
    "from": 73,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 86,
    "label": "has",
    "to": 91
  }, {
    "from": 73,
    "label": "has",
    "to": 92
  }, {
    "from": 73,
    "label": "has",
    "to": 93
  }, {
    "from": 73,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 73,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 97,
    "label": "has",
    "to": 8
  }, {
    "from": 73,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 8
  }, {
    "from": 73,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 107,
    "label": "has",
    "to": 111
  }, {
    "from": 107,
    "label": "has",
    "to": 112
  }, {
    "from": 106,
    "label": "has",
    "to": 113
  }, {
    "from": 106,
    "label": "has",
    "to": 114
  }, {
    "from": 104,
    "label": "has",
    "to": 8
  }, {
    "from": 73,
    "label": "has",
    "to": 8
  }, {
    "from": 73,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 98
  }, {
    "from": 116,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 116,
    "label": "has",
    "to": 8
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 105
  }, {
    "from": 118,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 107,
    "label": "has",
    "to": 111
  }, {
    "from": 107,
    "label": "has",
    "to": 112
  }, {
    "from": 106,
    "label": "has",
    "to": 113
  }, {
    "from": 106,
    "label": "has",
    "to": 114
  }, {
    "from": 118,
    "label": "has",
    "to": 8
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 120,
    "label": "has",
    "to": 124
  }, {
    "from": 120,
    "label": "has",
    "to": 125
  }, {
    "from": 120,
    "label": "has",
    "to": 126
  }, {
    "from": 120,
    "label": "has",
    "to": 127
  }, {
    "from": 120,
    "label": "has",
    "to": 128
  }, {
    "from": 120,
    "label": "has",
    "to": 129
  }, {
    "from": 120,
    "label": "has",
    "to": 130
  }, {
    "from": 120,
    "label": "has",
    "to": 131
  }, {
    "from": 120,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 132,
    "label": "has",
    "to": 134
  }, {
    "from": 132,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 120,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 120,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 138
  }, {
    "from": 120,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 120,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 143,
    "label": "has",
    "to": 146
  }, {
    "from": 143,
    "label": "has",
    "to": 147
  }, {
    "from": 143,
    "label": "has",
    "to": 148
  }, {
    "from": 143,
    "label": "has",
    "to": 149
  }, {
    "from": 143,
    "label": "has",
    "to": 150
  }, {
    "from": 150,
    "label": "has",
    "to": 151
  }, {
    "from": 150,
    "label": "has",
    "to": 152
  }, {
    "from": 150,
    "label": "has",
    "to": 153
  }, {
    "from": 143,
    "label": "has",
    "to": 154
  }, {
    "from": 143,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 155,
    "label": "has",
    "to": 157
  }, {
    "from": 155,
    "label": "has",
    "to": 158
  }, {
    "from": 155,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 159,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 162,
    "label": "has",
    "to": 164
  }, {
    "from": 162,
    "label": "has",
    "to": 165
  }, {
    "from": 162,
    "label": "has",
    "to": 166
  }, {
    "from": 162,
    "label": "has",
    "to": 167
  }, {
    "from": 162,
    "label": "has",
    "to": 168
  }, {
    "from": 162,
    "label": "has",
    "to": 167
  }, {
    "from": 162,
    "label": "has",
    "to": 169
  }, {
    "from": 159,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 155,
    "label": "has",
    "to": 173
  }, {
    "from": 155,
    "label": "has",
    "to": 8
  }, {
    "from": 143,
    "label": "has",
    "to": 174
  }, {
    "from": 143,
    "label": "has",
    "to": 175
  }, {
    "from": 143,
    "label": "has",
    "to": 176
  }, {
    "from": 143,
    "label": "has",
    "to": 177
  }, {
    "from": 143,
    "label": "has",
    "to": 8
  }, {
    "from": 143,
    "label": "has",
    "to": 178
  }, {
    "from": 179,
    "label": "has",
    "to": 156
  }, {
    "from": 179,
    "label": "has",
    "to": 157
  }, {
    "from": 179,
    "label": "has",
    "to": 158
  }, {
    "from": 179,
    "label": "has",
    "to": 159
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 159,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 163
  }, {
    "from": 162,
    "label": "has",
    "to": 164
  }, {
    "from": 162,
    "label": "has",
    "to": 165
  }, {
    "from": 162,
    "label": "has",
    "to": 166
  }, {
    "from": 162,
    "label": "has",
    "to": 167
  }, {
    "from": 162,
    "label": "has",
    "to": 168
  }, {
    "from": 162,
    "label": "has",
    "to": 167
  }, {
    "from": 162,
    "label": "has",
    "to": 169
  }, {
    "from": 159,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 179,
    "label": "has",
    "to": 173
  }, {
    "from": 179,
    "label": "has",
    "to": 8
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 185,
    "label": "has",
    "to": 186
  }, {
    "from": 185,
    "label": "has",
    "to": 187
  }, {
    "from": 185,
    "label": "has",
    "to": 188
  }, {
    "from": 188,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 188,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 185,
    "label": "has",
    "to": 193
  }, {
    "from": 185,
    "label": "has",
    "to": 194
  }, {
    "from": 183,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 74
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 196,
    "label": "has",
    "to": 198
  }, {
    "from": 195,
    "label": "has",
    "to": 199
  }, {
    "from": 195,
    "label": "has",
    "to": 200
  }, {
    "from": 183,
    "label": "has",
    "to": 201
  }, {
    "from": 183,
    "label": "has",
    "to": 202
  }, {
    "from": 183,
    "label": "has",
    "to": 203
  }, {
    "from": 183,
    "label": "has",
    "to": 204
  }, {
    "from": 183,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 205,
    "label": "has",
    "to": 187
  }, {
    "from": 205,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 208,
    "label": "has",
    "to": 190
  }, {
    "from": 207,
    "label": "has",
    "to": 209
  }, {
    "from": 209,
    "label": "has",
    "to": 192
  }, {
    "from": 205,
    "label": "has",
    "to": 210
  }, {
    "from": 183,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 74
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 214
  }, {
    "from": 211,
    "label": "has",
    "to": 215
  }, {
    "from": 183,
    "label": "has",
    "to": 216
  }, {
    "from": 183,
    "label": "has",
    "to": 217
  }, {
    "from": 183,
    "label": "has",
    "to": 218
  }, {
    "from": 183,
    "label": "has",
    "to": 219
  }, {
    "from": 183,
    "label": "has",
    "to": 220
  }, {
    "from": 183,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 221,
    "label": "has",
    "to": 223
  }, {
    "from": 181,
    "label": "has",
    "to": 8
  }, {
    "from": 181,
    "label": "has",
    "to": 8
  }, {
    "from": 181,
    "label": "has",
    "to": 224
  }, {
    "from": 225,
    "label": "has",
    "to": 226
  }, {
    "from": 225,
    "label": "has",
    "to": 227
  }, {
    "from": 225,
    "label": "has",
    "to": 228
  }, {
    "from": 225,
    "label": "has",
    "to": 229
  }, {
    "from": 225,
    "label": "has",
    "to": 230
  }, {
    "from": 225,
    "label": "has",
    "to": 231
  }, {
    "from": 225,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 232,
    "label": "has",
    "to": 234
  }, {
    "from": 232,
    "label": "has",
    "to": 235
  }, {
    "from": 232,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 236,
    "label": "has",
    "to": 238
  }, {
    "from": 232,
    "label": "has",
    "to": 239
  }, {
    "from": 232,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 240,
    "label": "has",
    "to": 242
  }, {
    "from": 240,
    "label": "has",
    "to": 243
  }, {
    "from": 232,
    "label": "has",
    "to": 244
  }, {
    "from": 225,
    "label": "has",
    "to": 8
  }, {
    "from": 225,
    "label": "has",
    "to": 245
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 246,
    "label": "has",
    "to": 248
  }, {
    "from": 246,
    "label": "has",
    "to": 249
  }, {
    "from": 250,
    "label": "has",
    "to": 8
  }, {
    "from": 251,
    "label": "has",
    "to": 8
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 253,
    "label": "has",
    "to": 8
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 254,
    "label": "has",
    "to": 256
  }, {
    "from": 254,
    "label": "has",
    "to": 257
  }, {
    "from": 254,
    "label": "has",
    "to": 258
  }, {
    "from": 254,
    "label": "has",
    "to": 233
  }, {
    "from": 254,
    "label": "has",
    "to": 259
  }, {
    "from": 254,
    "label": "has",
    "to": 260
  }, {
    "from": 2,
    "label": "calls",
    "to": 268
  }, {
    "from": 246,
    "label": "calls",
    "to": 63
  }, {
    "from": 261,
    "label": "calls",
    "to": 63
  }, {
    "from": 28,
    "label": "calls",
    "to": 262
  }, {
    "from": 181,
    "label": "calls",
    "to": 262
  }, {
    "from": 73,
    "label": "calls",
    "to": 269
  }, {
    "from": 73,
    "label": "calls",
    "to": 267
  }, {
    "from": 181,
    "label": "calls",
    "to": 22
  }, {
    "from": 181,
    "label": "calls",
    "to": 22
  }, {
    "from": 225,
    "label": "calls",
    "to": 22
  }, {
    "from": 12,
    "label": "calls",
    "to": 270
  }, {
    "from": 143,
    "label": "calls",
    "to": 270
  }, {
    "from": 65,
    "label": "calls",
    "to": 266
  }, {
    "from": 120,
    "label": "calls",
    "to": 30
  }, {
    "from": 120,
    "label": "calls",
    "to": 30
  }, {
    "from": 120,
    "label": "calls",
    "to": 30
  }, {
    "from": 120,
    "label": "calls",
    "to": 30
  }, {
    "from": 246,
    "label": "calls",
    "to": 16
  }, {
    "from": 246,
    "label": "calls",
    "to": 225
  }, {
    "from": 22,
    "label": "calls",
    "to": 273
  }, {
    "from": 225,
    "label": "calls",
    "to": 143
  }, {
    "from": 63,
    "label": "calls",
    "to": 32
  }, {
    "from": 261,
    "label": "calls",
    "to": 2
  }, {
    "from": 73,
    "label": "calls",
    "to": 2
  }, {
    "from": 65,
    "label": "calls",
    "to": 263
  }, {
    "from": 73,
    "label": "calls",
    "to": 264
  }, {
    "from": 73,
    "label": "calls",
    "to": 264
  }, {
    "from": 143,
    "label": "calls",
    "to": 179
  }, {
    "from": 143,
    "label": "calls",
    "to": 179
  }, {
    "from": 73,
    "label": "calls",
    "to": 265
  }, {
    "from": 246,
    "label": "calls",
    "to": 65
  }, {
    "from": 261,
    "label": "calls",
    "to": 65
  }, {
    "from": 225,
    "label": "calls",
    "to": 181
  }, {
    "from": 261,
    "label": "calls",
    "to": 246
  }, {
    "from": 143,
    "label": "calls",
    "to": 73
  }, {
    "from": 143,
    "label": "calls",
    "to": 73
  }, {
    "from": 225,
    "label": "calls",
    "to": 73
  }, {
    "from": 225,
    "label": "calls",
    "to": 73
  }, {
    "from": 2,
    "label": "calls",
    "to": 274
  }, {
    "from": 261,
    "label": "calls",
    "to": 274
  }, {
    "from": 73,
    "label": "calls",
    "to": 116
  }, {
    "from": 181,
    "label": "calls",
    "to": 272
  }, {
    "from": 181,
    "label": "calls",
    "to": 272
  }, {
    "from": 65,
    "label": "calls",
    "to": 271
  }, {
    "from": 73,
    "label": "calls",
    "to": 28
  }, {
    "from": 73,
    "label": "calls",
    "to": 28
  }, {
    "from": 143,
    "label": "calls",
    "to": 28
  }, {
    "from": 143,
    "label": "calls",
    "to": 28
  }, {
    "from": 143,
    "label": "calls",
    "to": 28
  }, {
    "from": 143,
    "label": "calls",
    "to": 28
  }, {
    "from": 225,
    "label": "calls",
    "to": 28
  }, {
    "from": 225,
    "label": "calls",
    "to": 28
  }, {
    "from": 63,
    "label": "calls",
    "to": 43
  }, {
    "from": 261,
    "label": "calls",
    "to": 120
  }, {
    "from": 1,
    "label": "contains",
    "to": 261
  }, {
    "from": 261,
    "label": "declares",
    "to": 2
  }, {
    "from": 261,
    "label": "declares",
    "to": 10
  }, {
    "from": 261,
    "label": "declares",
    "to": 12
  }, {
    "from": 261,
    "label": "declares",
    "to": 16
  }, {
    "from": 261,
    "label": "declares",
    "to": 22
  }, {
    "from": 261,
    "label": "declares",
    "to": 28
  }, {
    "from": 261,
    "label": "declares",
    "to": 30
  }, {
    "from": 261,
    "label": "declares",
    "to": 32
  }, {
    "from": 261,
    "label": "declares",
    "to": 41
  }, {
    "from": 261,
    "label": "declares",
    "to": 43
  }, {
    "from": 261,
    "label": "declares",
    "to": 59
  }, {
    "from": 261,
    "label": "declares",
    "to": 61
  }, {
    "from": 261,
    "label": "declares",
    "to": 63
  }, {
    "from": 261,
    "label": "declares",
    "to": 65
  }, {
    "from": 261,
    "label": "declares",
    "to": 72
  }, {
    "from": 261,
    "label": "declares",
    "to": 73
  }, {
    "from": 261,
    "label": "declares",
    "to": 116
  }, {
    "from": 261,
    "label": "declares",
    "to": 118
  }, {
    "from": 261,
    "label": "declares",
    "to": 120
  }, {
    "from": 261,
    "label": "declares",
    "to": 143
  }, {
    "from": 261,
    "label": "declares",
    "to": 179
  }, {
    "from": 261,
    "label": "declares",
    "to": 181
  }, {
    "from": 261,
    "label": "declares",
    "to": 225
  }, {
    "from": 261,
    "label": "declares",
    "to": 246
  }, {
    "from": 261,
    "label": "declares",
    "to": 250
  }, {
    "from": 261,
    "label": "declares",
    "to": 251
  }, {
    "from": 261,
    "label": "declares",
    "to": 253
  }, {
    "from": 261,
    "label": "declares",
    "to": 254
  }, {
    "from": 1,
    "label": "contains",
    "to": 275
  }, {
    "from": 1,
    "label": "contains",
    "to": 276
  }, {
    "from": 275,
    "label": "initializes",
    "to": 277
  }, {
    "from": 277,
    "label": "assigns",
    "to": 278
  }, {
    "from": 275,
    "label": "initializes",
    "to": 279
  }, {
    "from": 279,
    "label": "assigns",
    "to": 280
  }, {
    "from": 275,
    "label": "initializes",
    "to": 281
  }, {
    "from": 281,
    "label": "assigns",
    "to": 282
  }, {
    "from": 275,
    "label": "initializes",
    "to": 283
  }, {
    "from": 283,
    "label": "assigns",
    "to": 284
  }, {
    "from": 275,
    "label": "initializes",
    "to": 285
  }, {
    "from": 285,
    "label": "assigns",
    "to": 286
  }, {
    "from": 275,
    "label": "initializes",
    "to": 287
  }, {
    "from": 287,
    "label": "assigns",
    "to": 288
  }, {
    "from": 275,
    "label": "initializes",
    "to": 289
  }, {
    "from": 289,
    "label": "assigns",
    "to": 290
  }, {
    "from": 275,
    "label": "initializes",
    "to": 291
  }, {
    "from": 291,
    "label": "assigns",
    "to": 292
  }, {
    "from": 275,
    "label": "initializes",
    "to": 293
  }, {
    "from": 293,
    "label": "assigns",
    "to": 294
  }, {
    "from": 275,
    "label": "initializes",
    "to": 295
  }, {
    "from": 295,
    "label": "assigns",
    "to": 296
  }, {
    "from": 275,
    "label": "initializes",
    "to": 297
  }, {
    "from": 297,
    "label": "assigns",
    "to": 298
  }, {
    "from": 275,
    "label": "initializes",
    "to": 299
  }, {
    "from": 299,
    "label": "assigns",
    "to": 300
  }, {
    "from": 275,
    "label": "initializes",
    "to": 301
  }, {
    "from": 301,
    "label": "assigns",
    "to": 302
  }, {
    "from": 275,
    "label": "initializes",
    "to": 303
  }, {
    "from": 303,
    "label": "assigns",
    "to": 304
  }, {
    "from": 275,
    "label": "initializes",
    "to": 305
  }, {
    "from": 305,
    "label": "assigns",
    "to": 306
  }, {
    "from": 275,
    "label": "initializes",
    "to": 307
  }, {
    "from": 307,
    "label": "assigns",
    "to": 308
  }, {
    "from": 275,
    "label": "initializes",
    "to": 309
  }, {
    "from": 275,
    "label": "initializes",
    "to": 310
  }, {
    "from": 275,
    "label": "initializes",
    "to": 311
  }, {
    "from": 275,
    "label": "initializes",
    "to": 312
  }, {
    "from": 275,
    "label": "initializes",
    "to": 313
  }, {
    "from": 1,
    "label": "provides",
    "to": 314
  }, {
    "from": 314,
    "label": "provides",
    "to": 315
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 251
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "deflatelua",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function memoize(f)\r\n  local mt = {};\r\n  local t = setmetatable({}, mt)\r\n  function mt:__index(k)\r\n    local v = f(k); t[k] = v\r\n    return v\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local mt = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local t = setmetatable({}, mt)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "function mt:__index(k)\r\n    local v = f(k); t[k] = v\r\n    return v\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 6,
    "text": "local v = f(k)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "t[k] = v",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function mt:__index(k)\r\n    local v = f(k); t[k] = v\r\n    return v\r\n  end",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function runtime_error(s, level)\r\n  level = level or 1\r\n  error({s}, level+1)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "level = level or 1",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "error({s}, level+1)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function make_os(outbs)\r\n  local os = {}\r\n  os.outbs = outbs\r\n  os.wnd = {}\r\n  os.wnd_pos = 1\r\n  return os\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local os = {}",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "os.outbs = outbs",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "os.wnd = {}",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "os.wnd_pos = 1",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "local function output(os, byte)\r\n  -- debug('OUTPUT:', s)\r\n  local wnd_pos = os.wnd_pos\r\n  os.outbs(byte)\r\n  os.wnd[wnd_pos] = byte\r\n  os.wnd_pos = wnd_pos % 32768 + 1  -- 32K\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local wnd_pos = os.wnd_pos",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "os.outbs(byte)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "os.wnd[wnd_pos] = byte",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "os.wnd_pos = wnd_pos % 32768 + 1",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "local function noeof(val)\r\n  return assert(val, 'unexpected end of file')\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function hasbit(bits, bit)\r\n  return bits % (bit + bit) >= bit\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "local function bytestream_from_string(s)\r\n  local i = 1\r\n  local o = {}\r\n  function o:read()\r\n    local by\r\n    if i <= #s then\r\n      by = s:byte(i)\r\n      i = i + 1\r\n    end\r\n    return by\r\n  end\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "local o = {}",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "function o:read()\r\n    local by\r\n    if i <= #s then\r\n      by = s:byte(i)\r\n      i = i + 1\r\n    end\r\n    return by\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 36,
    "text": "local by",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "if i <= #s then\r\n      by = s:byte(i)\r\n      i = i + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "by = s:byte(i)",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function o:read()\r\n    local by\r\n    if i <= #s then\r\n      by = s:byte(i)\r\n      i = i + 1\r\n    end\r\n    return by\r\n  end",
    "type": "function"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "local function bitstream_from_bytestream(bys)\r\n  local buf_byte, buf_nbit, o = 0, 0, {};\r\n \r\n  function o:nbits_left_in_byte()\r\n    return buf_nbit\r\n  end\r\n\r\n  function o:read(nbits)\r\n    nbits = nbits or 1\r\n    while buf_nbit < nbits do\r\n      local byte = bys:read()\r\n      if not byte then return end  -- note: more calls also return nil\r\n      buf_byte = buf_byte + pow2[buf_nbit] * byte\r\n      buf_nbit = buf_nbit + 8\r\n    end\r\n    local m = pow2[nbits]\r\n    local bits = buf_byte % m\r\n    buf_byte = (buf_byte - bits) / m\r\n    buf_nbit = buf_nbit - nbits\r\n    return bits\r\n  end\r\n\r\n  is_bitstream[o] = true\r\n\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "local buf_byte, buf_nbit, o = 0, 0, {}",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "function o:nbits_left_in_byte()\r\n    return buf_nbit\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 46,
    "text": "function o:read(nbits)\r\n    nbits = nbits or 1\r\n    while buf_nbit < nbits do\r\n      local byte = bys:read()\r\n      if not byte then return end  -- note: more calls also return nil\r\n      buf_byte = buf_byte + pow2[buf_nbit] * byte\r\n      buf_nbit = buf_nbit + 8\r\n    end\r\n    local m = pow2[nbits]\r\n    local bits = buf_byte % m\r\n    buf_byte = (buf_byte - bits) / m\r\n    buf_nbit = buf_nbit - nbits\r\n    return bits\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 47,
    "text": "nbits = nbits or 1",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "while buf_nbit < nbits do\r\n      local byte = bys:read()\r\n      if not byte then return end  -- note: more calls also return nil\r\n      buf_byte = buf_byte + pow2[buf_nbit] * byte\r\n      buf_nbit = buf_nbit + 8\r\n    end",
    "type": "statement:while"
  }, {
    "id": 49,
    "text": "local byte = bys:read()",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "if not byte then return end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "buf_byte = buf_byte + pow2[buf_nbit] * byte",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "buf_nbit = buf_nbit + 8",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "local m = pow2[nbits]",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "local bits = buf_byte % m",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "buf_byte = (buf_byte - bits) / m",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "buf_nbit = buf_nbit - nbits",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "is_bitstream[o] = true",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function o:nbits_left_in_byte()\r\n    return buf_nbit\r\n  end",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function o:read(nbits)\r\n    nbits = nbits or 1\r\n    while buf_nbit < nbits do\r\n      local byte = bys:read()\r\n      if not byte then return end  -- note: more calls also return nil\r\n      buf_byte = buf_byte + pow2[buf_nbit] * byte\r\n      buf_nbit = buf_nbit + 8\r\n    end\r\n    local m = pow2[nbits]\r\n    local bits = buf_byte % m\r\n    buf_byte = (buf_byte - bits) / m\r\n    buf_nbit = buf_nbit - nbits\r\n    return bits\r\n  end",
    "type": "function"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "local function get_bitstream(o)\r\n    return is_bitstream[o] and o or bitstream_from_bytestream(bytestream_from_string(o))\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "local function get_obytestream(o)\r\n  local bs\r\n  if io.type(o) == 'file' then\r\n    bs = function(sbyte) o:write(string_char(sbyte)) end\r\n  elseif type(o) == 'function' then\r\n    bs = o\r\n  end\r\n  return bs\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "local bs",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "if io.type(o) == 'file' then\r\n    bs = function(sbyte) o:write(string_char(sbyte)) end\r\n  elseif type(o) == 'function' then\r\n    bs = o\r\n  end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "bs = function(sbyte) o:write(string_char(sbyte)) end",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "o:write(string_char(sbyte))",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "bs = o",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function(sbyte) o:write(string_char(sbyte)) end",
    "type": "function"
  }, {
    "id": 73,
    "text": "local function HuffmanTable(init, is_full)\r\n  local t = {}\r\n  if is_full then\r\n    for val,nbits in pairs(init) do\r\n      if nbits ~= 0 then\r\n        t[#t+1] = {val=val, nbits=nbits}\r\n        --debug('*',val,nbits)\r\n      end\r\n    end\r\n  else\r\n    for i=1,#init-2,2 do\r\n      local firstval, nbits, nextval = init[i], init[i+1], init[i+2]\r\n      --debug(val, nextval, nbits)\r\n      if nbits ~= 0 then\r\n        for val=firstval,nextval-1 do\r\n          t[#t+1] = {val=val, nbits=nbits}\r\n        end\r\n      end\r\n    end\r\n  end\r\n  table_sort(t, function(a,b)\r\n    return a.nbits == b.nbits and a.val < b.val or a.nbits < b.nbits\r\n  end)\r\n\r\n  -- assign codes\r\n  local code = 1  -- leading 1 marker\r\n  local nbits = 0\r\n  for i,s in ipairs(t) do\r\n    if s.nbits ~= nbits then\r\n      code = code * pow2[s.nbits - nbits]\r\n      nbits = s.nbits\r\n    end\r\n    s.code = code\r\n    --debug('huffman code:', i, s.nbits, s.val, code, bits_tostring(code))\r\n    code = code + 1\r\n  end\r\n\r\n  local minbits = math.huge\r\n  local look = {}\r\n  for i,s in ipairs(t) do\r\n    minbits = math.min(minbits, s.nbits)\r\n    look[s.code] = s.val\r\n  end\r\n\r\n  --for _,o in ipairs(t) do\r\n  --  debug(':', o.nbits, o.val)\r\n  --end\r\n\r\n  -- function t:lookup(bits) return look[bits] end\r\n\r\n  local function msb(bits, nbits)\r\n    local res = 0\r\n    for i=1,nbits do\r\n      local b = bits % 2\r\n      bits = (bits - b) / 2\r\n      res = res * 2 + b\r\n    end\r\n    return res\r\n  end\r\n  local tfirstcode = memoize(\r\n    function(bits) return pow2[minbits] + msb(bits, minbits) end)\r\n\r\n  function t:read(bs)\r\n    local code, nbits = 1, 0 -- leading 1 marker\r\n    while 1 do\r\n      if nbits == 0 then  -- small optimization (optional)\r\n        code = tfirstcode[noeof(bs:read(minbits))]\r\n        nbits = nbits + minbits\r\n      else\r\n        local b = noeof(bs:read())\r\n        nbits = nbits + 1\r\n        --debug('b',b)\r\n        code = code * 2 + b   -- MSB first\r\n      end\r\n      --debug('code?', code, bits_tostring(code))\r\n      local val = look[code]\r\n      if val then\r\n        --debug('FOUND', val)\r\n        return val\r\n      end\r\n    end\r\n  end\r\n\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "if is_full then\r\n    for val,nbits in pairs(init) do\r\n      if nbits ~= 0 then\r\n        t[#t+1] = {val=val, nbits=nbits}\r\n        --debug('*',val,nbits)\r\n      end\r\n    end\r\n  else\r\n    for i=1,#init-2,2 do\r\n      local firstval, nbits, nextval = init[i], init[i+1], init[i+2]\r\n      --debug(val, nextval, nbits)\r\n      if nbits ~= 0 then\r\n        for val=firstval,nextval-1 do\r\n          t[#t+1] = {val=val, nbits=nbits}\r\n        end\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "for val,nbits in pairs(init) do\r\n      if nbits ~= 0 then\r\n        t[#t+1] = {val=val, nbits=nbits}\r\n        --debug('*',val,nbits)\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 77,
    "text": "if nbits ~= 0 then\r\n        t[#t+1] = {val=val, nbits=nbits}\r\n        --debug('*',val,nbits)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "t[#t+1] = {val=val, nbits=nbits}",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "for i=1,#init-2,2 do\r\n      local firstval, nbits, nextval = init[i], init[i+1], init[i+2]\r\n      --debug(val, nextval, nbits)\r\n      if nbits ~= 0 then\r\n        for val=firstval,nextval-1 do\r\n          t[#t+1] = {val=val, nbits=nbits}\r\n        end\r\n      end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 80,
    "text": "local firstval, nbits, nextval = init[i], init[i+1], init[i+2]",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "if nbits ~= 0 then\r\n        for val=firstval,nextval-1 do\r\n          t[#t+1] = {val=val, nbits=nbits}\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "for val=firstval,nextval-1 do\r\n          t[#t+1] = {val=val, nbits=nbits}\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 83,
    "text": "table_sort(t, function(a,b)\r\n    return a.nbits == b.nbits and a.val < b.val or a.nbits < b.nbits\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "local code = 1",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "local nbits = 0",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "for i,s in ipairs(t) do\r\n    if s.nbits ~= nbits then\r\n      code = code * pow2[s.nbits - nbits]\r\n      nbits = s.nbits\r\n    end\r\n    s.code = code\r\n    --debug('huffman code:', i, s.nbits, s.val, code, bits_tostring(code))\r\n    code = code + 1\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 87,
    "text": "if s.nbits ~= nbits then\r\n      code = code * pow2[s.nbits - nbits]\r\n      nbits = s.nbits\r\n    end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "code = code * pow2[s.nbits - nbits]",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "nbits = s.nbits",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "s.code = code",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "code = code + 1",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "local minbits = math.huge",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "local look = {}",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "for i,s in ipairs(t) do\r\n    minbits = math.min(minbits, s.nbits)\r\n    look[s.code] = s.val\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 95,
    "text": "minbits = math.min(minbits, s.nbits)",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "look[s.code] = s.val",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "local function msb(bits, nbits)\r\n    local res = 0\r\n    for i=1,nbits do\r\n      local b = bits % 2\r\n      bits = (bits - b) / 2\r\n      res = res * 2 + b\r\n    end\r\n    return res\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 98,
    "text": "local res = 0",
    "type": "statement:localassign"
  }, {
    "id": 99,
    "text": "for i=1,nbits do\r\n      local b = bits % 2\r\n      bits = (bits - b) / 2\r\n      res = res * 2 + b\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 100,
    "text": "local b = bits % 2",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "bits = (bits - b) / 2",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "res = res * 2 + b",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "local tfirstcode = memoize(\r\n    function(bits) return pow2[minbits] + msb(bits, minbits) end)",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "function t:read(bs)\r\n    local code, nbits = 1, 0 -- leading 1 marker\r\n    while 1 do\r\n      if nbits == 0 then  -- small optimization (optional)\r\n        code = tfirstcode[noeof(bs:read(minbits))]\r\n        nbits = nbits + minbits\r\n      else\r\n        local b = noeof(bs:read())\r\n        nbits = nbits + 1\r\n        --debug('b',b)\r\n        code = code * 2 + b   -- MSB first\r\n      end\r\n      --debug('code?', code, bits_tostring(code))\r\n      local val = look[code]\r\n      if val then\r\n        --debug('FOUND', val)\r\n        return val\r\n      end\r\n    end\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 105,
    "text": "local code, nbits = 1, 0",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "while 1 do\r\n      if nbits == 0 then  -- small optimization (optional)\r\n        code = tfirstcode[noeof(bs:read(minbits))]\r\n        nbits = nbits + minbits\r\n      else\r\n        local b = noeof(bs:read())\r\n        nbits = nbits + 1\r\n        --debug('b',b)\r\n        code = code * 2 + b   -- MSB first\r\n      end\r\n      --debug('code?', code, bits_tostring(code))\r\n      local val = look[code]\r\n      if val then\r\n        --debug('FOUND', val)\r\n        return val\r\n      end\r\n    end",
    "type": "statement:while"
  }, {
    "id": 107,
    "text": "if nbits == 0 then  -- small optimization (optional)\r\n        code = tfirstcode[noeof(bs:read(minbits))]\r\n        nbits = nbits + minbits\r\n      else\r\n        local b = noeof(bs:read())\r\n        nbits = nbits + 1\r\n        --debug('b',b)\r\n        code = code * 2 + b   -- MSB first\r\n      end",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "code = tfirstcode[noeof(bs:read(minbits))]",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "nbits = nbits + minbits",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "local b = noeof(bs:read())",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "nbits = nbits + 1",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "code = code * 2 + b",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "local val = look[code]",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "if val then\r\n        --debug('FOUND', val)\r\n        return val\r\n      end",
    "type": "statement:if"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "local function msb(bits, nbits)\r\n    local res = 0\r\n    for i=1,nbits do\r\n      local b = bits % 2\r\n      bits = (bits - b) / 2\r\n      res = res * 2 + b\r\n    end\r\n    return res\r\n  end",
    "type": "function"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function t:read(bs)\r\n    local code, nbits = 1, 0 -- leading 1 marker\r\n    while 1 do\r\n      if nbits == 0 then  -- small optimization (optional)\r\n        code = tfirstcode[noeof(bs:read(minbits))]\r\n        nbits = nbits + minbits\r\n      else\r\n        local b = noeof(bs:read())\r\n        nbits = nbits + 1\r\n        --debug('b',b)\r\n        code = code * 2 + b   -- MSB first\r\n      end\r\n      --debug('code?', code, bits_tostring(code))\r\n      local val = look[code]\r\n      if val then\r\n        --debug('FOUND', val)\r\n        return val\r\n      end\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "local function parse_gzip_header(bs)\r\n  -- local FLG_FTEXT = 2^0\r\n  local FLG_FHCRC = 2^1\r\n  local FLG_FEXTRA = 2^2\r\n  local FLG_FNAME = 2^3\r\n  local FLG_FCOMMENT = 2^4\r\n\r\n  local id1 = bs:read(8)\r\n  local id2 = bs:read(8)\r\n  local cm = bs:read(8)  -- compression method\r\n  local flg = bs:read(8) -- FLaGs\r\n  local mtime = bs:read(32) -- Modification TIME\r\n  local xfl = bs:read(8) -- eXtra FLags\r\n  local os = bs:read(8) -- Operating System\r\n\r\n  if hasbit(flg, FLG_FEXTRA) then\r\n    local xlen = bs:read(16)\r\n    local extra = 0\r\n    for i=1,xlen do\r\n      extra = bs:read(8)\r\n    end\r\n  end\r\n\r\n  if hasbit(flg, FLG_FNAME) then\r\n      while bs:read(8) ~= 0 do end\r\n  end\r\n\r\n  if hasbit(flg, FLG_FCOMMENT) then\r\n      while bs:read(8) ~= 0 do end\r\n  end\r\n  if hasbit(flg, FLG_FHCRC) then\r\n    bs:read(16)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 121,
    "text": "local FLG_FHCRC = 2^1",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "local FLG_FEXTRA = 2^2",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "local FLG_FNAME = 2^3",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "local FLG_FCOMMENT = 2^4",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "local id1 = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "local id2 = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "local cm = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "local flg = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "local mtime = bs:read(32)",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "local xfl = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "local os = bs:read(8)",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "if hasbit(flg, FLG_FEXTRA) then\r\n    local xlen = bs:read(16)\r\n    local extra = 0\r\n    for i=1,xlen do\r\n      extra = bs:read(8)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "local xlen = bs:read(16)",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "local extra = 0",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "for i=1,xlen do\r\n      extra = bs:read(8)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 136,
    "text": "extra = bs:read(8)",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "if hasbit(flg, FLG_FNAME) then\r\n      while bs:read(8) ~= 0 do end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "while bs:read(8) ~= 0 do end",
    "type": "statement:while"
  }, {
    "id": 139,
    "text": "if hasbit(flg, FLG_FCOMMENT) then\r\n      while bs:read(8) ~= 0 do end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "if hasbit(flg, FLG_FHCRC) then\r\n    bs:read(16)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 141,
    "text": "bs:read(16)",
    "type": "statement:functioncall"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "local function parse_huffmantables(bs)\r\n    local hlit = bs:read(5)  -- # of literal/length codes - 257\r\n    local hdist = bs:read(5) -- # of distance codes - 1\r\n    local hclen = noeof(bs:read(4)) -- # of code length codes - 4\r\n\r\n    local ncodelen_codes = hclen + 4\r\n    local codelen_init = {}\r\n    local codelen_vals = {\r\n      16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15}\r\n    for i=1,ncodelen_codes do\r\n      local nbits = bs:read(3)\r\n      local val = codelen_vals[i]\r\n      codelen_init[val] = nbits\r\n    end\r\n    local codelentable = HuffmanTable(codelen_init, true)\r\n\r\n    local function decode(ncodes)\r\n      local init = {}\r\n      local nbits\r\n      local val = 0\r\n      while val < ncodes do\r\n        local codelen = codelentable:read(bs)\r\n        --FIX:check nil?\r\n        local nrepeat\r\n        if codelen <= 15 then\r\n          nrepeat = 1\r\n          nbits = codelen\r\n          --debug('w', nbits)\r\n        elseif codelen == 16 then\r\n          nrepeat = 3 + noeof(bs:read(2))\r\n          -- nbits unchanged\r\n        elseif codelen == 17 then\r\n          nrepeat = 3 + noeof(bs:read(3))\r\n          nbits = 0\r\n        elseif codelen == 18 then\r\n          nrepeat = 11 + noeof(bs:read(7))\r\n          nbits = 0\r\n        else\r\n          error 'ASSERT'\r\n        end\r\n        for i=1,nrepeat do\r\n          init[val] = nbits\r\n          val = val + 1\r\n        end\r\n      end\r\n      local huffmantable = HuffmanTable(init, true)\r\n      return huffmantable\r\n    end\r\n\r\n    local nlit_codes = hlit + 257\r\n    local ndist_codes = hdist + 1\r\n\r\n    local littable = decode(nlit_codes)\r\n    local disttable = decode(ndist_codes)\r\n\r\n    return littable, disttable\r\nend",
    "type": "function"
  }, {
    "id": 144,
    "text": "local hlit = bs:read(5)",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "local hdist = bs:read(5)",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "local hclen = noeof(bs:read(4))",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "local ncodelen_codes = hclen + 4",
    "type": "statement:localassign"
  }, {
    "id": 148,
    "text": "local codelen_init = {}",
    "type": "statement:localassign"
  }, {
    "id": 149,
    "text": "local codelen_vals = {\r\n      16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15}",
    "type": "statement:localassign"
  }, {
    "id": 150,
    "text": "for i=1,ncodelen_codes do\r\n      local nbits = bs:read(3)\r\n      local val = codelen_vals[i]\r\n      codelen_init[val] = nbits\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 151,
    "text": "local nbits = bs:read(3)",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "local val = codelen_vals[i]",
    "type": "statement:localassign"
  }, {
    "id": 153,
    "text": "codelen_init[val] = nbits",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "local codelentable = HuffmanTable(codelen_init, true)",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "local function decode(ncodes)\r\n      local init = {}\r\n      local nbits\r\n      local val = 0\r\n      while val < ncodes do\r\n        local codelen = codelentable:read(bs)\r\n        --FIX:check nil?\r\n        local nrepeat\r\n        if codelen <= 15 then\r\n          nrepeat = 1\r\n          nbits = codelen\r\n          --debug('w', nbits)\r\n        elseif codelen == 16 then\r\n          nrepeat = 3 + noeof(bs:read(2))\r\n          -- nbits unchanged\r\n        elseif codelen == 17 then\r\n          nrepeat = 3 + noeof(bs:read(3))\r\n          nbits = 0\r\n        elseif codelen == 18 then\r\n          nrepeat = 11 + noeof(bs:read(7))\r\n          nbits = 0\r\n        else\r\n          error 'ASSERT'\r\n        end\r\n        for i=1,nrepeat do\r\n          init[val] = nbits\r\n          val = val + 1\r\n        end\r\n      end\r\n      local huffmantable = HuffmanTable(init, true)\r\n      return huffmantable\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 156,
    "text": "local init = {}",
    "type": "statement:localassign"
  }, {
    "id": 157,
    "text": "local nbits",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "local val = 0",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "while val < ncodes do\r\n        local codelen = codelentable:read(bs)\r\n        --FIX:check nil?\r\n        local nrepeat\r\n        if codelen <= 15 then\r\n          nrepeat = 1\r\n          nbits = codelen\r\n          --debug('w', nbits)\r\n        elseif codelen == 16 then\r\n          nrepeat = 3 + noeof(bs:read(2))\r\n          -- nbits unchanged\r\n        elseif codelen == 17 then\r\n          nrepeat = 3 + noeof(bs:read(3))\r\n          nbits = 0\r\n        elseif codelen == 18 then\r\n          nrepeat = 11 + noeof(bs:read(7))\r\n          nbits = 0\r\n        else\r\n          error 'ASSERT'\r\n        end\r\n        for i=1,nrepeat do\r\n          init[val] = nbits\r\n          val = val + 1\r\n        end\r\n      end",
    "type": "statement:while"
  }, {
    "id": 160,
    "text": "local codelen = codelentable:read(bs)",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "local nrepeat",
    "type": "statement:localassign"
  }, {
    "id": 162,
    "text": "if codelen <= 15 then\r\n          nrepeat = 1\r\n          nbits = codelen\r\n          --debug('w', nbits)\r\n        elseif codelen == 16 then\r\n          nrepeat = 3 + noeof(bs:read(2))\r\n          -- nbits unchanged\r\n        elseif codelen == 17 then\r\n          nrepeat = 3 + noeof(bs:read(3))\r\n          nbits = 0\r\n        elseif codelen == 18 then\r\n          nrepeat = 11 + noeof(bs:read(7))\r\n          nbits = 0\r\n        else\r\n          error 'ASSERT'\r\n        end",
    "type": "statement:if"
  }, {
    "id": 163,
    "text": "nrepeat = 1",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "nbits = codelen",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "nrepeat = 3 + noeof(bs:read(2))",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "nrepeat = 3 + noeof(bs:read(3))",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "nbits = 0",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "nrepeat = 11 + noeof(bs:read(7))",
    "type": "statement:assign"
  }, {
    "id": 169,
    "text": "error 'ASSERT'",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "for i=1,nrepeat do\r\n          init[val] = nbits\r\n          val = val + 1\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 171,
    "text": "init[val] = nbits",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "val = val + 1",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "local huffmantable = HuffmanTable(init, true)",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "local nlit_codes = hlit + 257",
    "type": "statement:localassign"
  }, {
    "id": 175,
    "text": "local ndist_codes = hdist + 1",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "local littable = decode(nlit_codes)",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "local disttable = decode(ndist_codes)",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 179,
    "text": "local function decode(ncodes)\r\n      local init = {}\r\n      local nbits\r\n      local val = 0\r\n      while val < ncodes do\r\n        local codelen = codelentable:read(bs)\r\n        --FIX:check nil?\r\n        local nrepeat\r\n        if codelen <= 15 then\r\n          nrepeat = 1\r\n          nbits = codelen\r\n          --debug('w', nbits)\r\n        elseif codelen == 16 then\r\n          nrepeat = 3 + noeof(bs:read(2))\r\n          -- nbits unchanged\r\n        elseif codelen == 17 then\r\n          nrepeat = 3 + noeof(bs:read(3))\r\n          nbits = 0\r\n        elseif codelen == 18 then\r\n          nrepeat = 11 + noeof(bs:read(7))\r\n          nbits = 0\r\n        else\r\n          error 'ASSERT'\r\n        end\r\n        for i=1,nrepeat do\r\n          init[val] = nbits\r\n          val = val + 1\r\n        end\r\n      end\r\n      local huffmantable = HuffmanTable(init, true)\r\n      return huffmantable\r\n    end",
    "type": "function"
  }, {
    "id": 180,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 181,
    "text": "local function parse_compressed_item(bs, os, littable, disttable)\r\n  local val = littable:read(bs)\r\n  --debug(val, val < 256 and string_char(val))\r\n  if val < 256 then -- literal\r\n    output(os, val)\r\n  elseif val == 256 then -- end of block\r\n    return true\r\n  else\r\n    if not tdecode_len_base then\r\n      local t = {[257]=3}\r\n      local skip = 1\r\n      for i=258,285,4 do\r\n        for j=i,i+3 do t[j] = t[j-1] + skip end\r\n        if i ~= 258 then skip = skip * 2 end\r\n      end\r\n      t[285] = 258\r\n      tdecode_len_base = t\r\n      --for i=257,285 do debug('T1',i,t[i]) end\r\n    end\r\n    if not tdecode_len_nextrabits then\r\n      local t = {}\r\n      for i=257,285 do\r\n        local j = math_max(i - 261, 0)\r\n        t[i] = (j - (j % 4)) / 4\r\n      end\r\n      t[285] = 0\r\n      tdecode_len_nextrabits = t\r\n      --for i=257,285 do debug('T2',i,t[i]) end\r\n    end\r\n    local len_base = tdecode_len_base[val]\r\n    local nextrabits = tdecode_len_nextrabits[val]\r\n    local extrabits = bs:read(nextrabits)\r\n    local len = len_base + extrabits\r\n\r\n    if not tdecode_dist_base then\r\n      local t = {[0]=1}\r\n      local skip = 1\r\n      for i=1,29,2 do\r\n        for j=i,i+1 do t[j] = t[j-1] + skip end\r\n        if i ~= 1 then skip = skip * 2 end\r\n      end\r\n      tdecode_dist_base = t\r\n      --for i=0,29 do debug('T3',i,t[i]) end\r\n    end\r\n    if not tdecode_dist_nextrabits then\r\n      local t = {}\r\n      for i=0,29 do\r\n        local j = math_max(i - 2, 0)\r\n        t[i] = (j - (j % 2)) / 2\r\n      end\r\n      tdecode_dist_nextrabits = t\r\n      --for i=0,29 do debug('T4',i,t[i]) end\r\n    end\r\n    local dist_val = disttable:read(bs)\r\n    local dist_base = tdecode_dist_base[dist_val]\r\n    local dist_nextrabits = tdecode_dist_nextrabits[dist_val]\r\n    local dist_extrabits = bs:read(dist_nextrabits)\r\n    local dist = dist_base + dist_extrabits\r\n\r\n    --debug('BACK', len, dist)\r\n    for i=1,len do\r\n      local pos = (os.wnd_pos - 1 - dist) % 32768 + 1  -- 32K\r\n      output(os, assert(os.wnd[pos], 'invalid distance'))\r\n    end\r\n  end\r\n  return false\r\nend",
    "type": "function"
  }, {
    "id": 182,
    "text": "local val = littable:read(bs)",
    "type": "statement:localassign"
  }, {
    "id": 183,
    "text": "if val < 256 then -- literal\r\n    output(os, val)\r\n  elseif val == 256 then -- end of block\r\n    return true\r\n  else\r\n    if not tdecode_len_base then\r\n      local t = {[257]=3}\r\n      local skip = 1\r\n      for i=258,285,4 do\r\n        for j=i,i+3 do t[j] = t[j-1] + skip end\r\n        if i ~= 258 then skip = skip * 2 end\r\n      end\r\n      t[285] = 258\r\n      tdecode_len_base = t\r\n      --for i=257,285 do debug('T1',i,t[i]) end\r\n    end\r\n    if not tdecode_len_nextrabits then\r\n      local t = {}\r\n      for i=257,285 do\r\n        local j = math_max(i - 261, 0)\r\n        t[i] = (j - (j % 4)) / 4\r\n      end\r\n      t[285] = 0\r\n      tdecode_len_nextrabits = t\r\n      --for i=257,285 do debug('T2',i,t[i]) end\r\n    end\r\n    local len_base = tdecode_len_base[val]\r\n    local nextrabits = tdecode_len_nextrabits[val]\r\n    local extrabits = bs:read(nextrabits)\r\n    local len = len_base + extrabits\r\n\r\n    if not tdecode_dist_base then\r\n      local t = {[0]=1}\r\n      local skip = 1\r\n      for i=1,29,2 do\r\n        for j=i,i+1 do t[j] = t[j-1] + skip end\r\n        if i ~= 1 then skip = skip * 2 end\r\n      end\r\n      tdecode_dist_base = t\r\n      --for i=0,29 do debug('T3',i,t[i]) end\r\n    end\r\n    if not tdecode_dist_nextrabits then\r\n      local t = {}\r\n      for i=0,29 do\r\n        local j = math_max(i - 2, 0)\r\n        t[i] = (j - (j % 2)) / 2\r\n      end\r\n      tdecode_dist_nextrabits = t\r\n      --for i=0,29 do debug('T4',i,t[i]) end\r\n    end\r\n    local dist_val = disttable:read(bs)\r\n    local dist_base = tdecode_dist_base[dist_val]\r\n    local dist_nextrabits = tdecode_dist_nextrabits[dist_val]\r\n    local dist_extrabits = bs:read(dist_nextrabits)\r\n    local dist = dist_base + dist_extrabits\r\n\r\n    --debug('BACK', len, dist)\r\n    for i=1,len do\r\n      local pos = (os.wnd_pos - 1 - dist) % 32768 + 1  -- 32K\r\n      output(os, assert(os.wnd[pos], 'invalid distance'))\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "output(os, val)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "if not tdecode_len_base then\r\n      local t = {[257]=3}\r\n      local skip = 1\r\n      for i=258,285,4 do\r\n        for j=i,i+3 do t[j] = t[j-1] + skip end\r\n        if i ~= 258 then skip = skip * 2 end\r\n      end\r\n      t[285] = 258\r\n      tdecode_len_base = t\r\n      --for i=257,285 do debug('T1',i,t[i]) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 186,
    "text": "local t = {[257]=3}",
    "type": "statement:localassign"
  }, {
    "id": 187,
    "text": "local skip = 1",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "for i=258,285,4 do\r\n        for j=i,i+3 do t[j] = t[j-1] + skip end\r\n        if i ~= 258 then skip = skip * 2 end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 189,
    "text": "for j=i,i+3 do t[j] = t[j-1] + skip end",
    "type": "statement:numericfor"
  }, {
    "id": 190,
    "text": "t[j] = t[j-1] + skip",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "if i ~= 258 then skip = skip * 2 end",
    "type": "statement:if"
  }, {
    "id": 192,
    "text": "skip = skip * 2",
    "type": "statement:assign"
  }, {
    "id": 193,
    "text": "t[285] = 258",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "tdecode_len_base = t",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "if not tdecode_len_nextrabits then\r\n      local t = {}\r\n      for i=257,285 do\r\n        local j = math_max(i - 261, 0)\r\n        t[i] = (j - (j % 4)) / 4\r\n      end\r\n      t[285] = 0\r\n      tdecode_len_nextrabits = t\r\n      --for i=257,285 do debug('T2',i,t[i]) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 196,
    "text": "for i=257,285 do\r\n        local j = math_max(i - 261, 0)\r\n        t[i] = (j - (j % 4)) / 4\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 197,
    "text": "local j = math_max(i - 261, 0)",
    "type": "statement:localassign"
  }, {
    "id": 198,
    "text": "t[i] = (j - (j % 4)) / 4",
    "type": "statement:assign"
  }, {
    "id": 199,
    "text": "t[285] = 0",
    "type": "statement:assign"
  }, {
    "id": 200,
    "text": "tdecode_len_nextrabits = t",
    "type": "statement:assign"
  }, {
    "id": 201,
    "text": "local len_base = tdecode_len_base[val]",
    "type": "statement:localassign"
  }, {
    "id": 202,
    "text": "local nextrabits = tdecode_len_nextrabits[val]",
    "type": "statement:localassign"
  }, {
    "id": 203,
    "text": "local extrabits = bs:read(nextrabits)",
    "type": "statement:localassign"
  }, {
    "id": 204,
    "text": "local len = len_base + extrabits",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "if not tdecode_dist_base then\r\n      local t = {[0]=1}\r\n      local skip = 1\r\n      for i=1,29,2 do\r\n        for j=i,i+1 do t[j] = t[j-1] + skip end\r\n        if i ~= 1 then skip = skip * 2 end\r\n      end\r\n      tdecode_dist_base = t\r\n      --for i=0,29 do debug('T3',i,t[i]) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 206,
    "text": "local t = {[0]=1}",
    "type": "statement:localassign"
  }, {
    "id": 207,
    "text": "for i=1,29,2 do\r\n        for j=i,i+1 do t[j] = t[j-1] + skip end\r\n        if i ~= 1 then skip = skip * 2 end\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 208,
    "text": "for j=i,i+1 do t[j] = t[j-1] + skip end",
    "type": "statement:numericfor"
  }, {
    "id": 209,
    "text": "if i ~= 1 then skip = skip * 2 end",
    "type": "statement:if"
  }, {
    "id": 210,
    "text": "tdecode_dist_base = t",
    "type": "statement:assign"
  }, {
    "id": 211,
    "text": "if not tdecode_dist_nextrabits then\r\n      local t = {}\r\n      for i=0,29 do\r\n        local j = math_max(i - 2, 0)\r\n        t[i] = (j - (j % 2)) / 2\r\n      end\r\n      tdecode_dist_nextrabits = t\r\n      --for i=0,29 do debug('T4',i,t[i]) end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 212,
    "text": "for i=0,29 do\r\n        local j = math_max(i - 2, 0)\r\n        t[i] = (j - (j % 2)) / 2\r\n      end",
    "type": "statement:numericfor"
  }, {
    "id": 213,
    "text": "local j = math_max(i - 2, 0)",
    "type": "statement:localassign"
  }, {
    "id": 214,
    "text": "t[i] = (j - (j % 2)) / 2",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "tdecode_dist_nextrabits = t",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "local dist_val = disttable:read(bs)",
    "type": "statement:localassign"
  }, {
    "id": 217,
    "text": "local dist_base = tdecode_dist_base[dist_val]",
    "type": "statement:localassign"
  }, {
    "id": 218,
    "text": "local dist_nextrabits = tdecode_dist_nextrabits[dist_val]",
    "type": "statement:localassign"
  }, {
    "id": 219,
    "text": "local dist_extrabits = bs:read(dist_nextrabits)",
    "type": "statement:localassign"
  }, {
    "id": 220,
    "text": "local dist = dist_base + dist_extrabits",
    "type": "statement:localassign"
  }, {
    "id": 221,
    "text": "for i=1,len do\r\n      local pos = (os.wnd_pos - 1 - dist) % 32768 + 1  -- 32K\r\n      output(os, assert(os.wnd[pos], 'invalid distance'))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 222,
    "text": "local pos = (os.wnd_pos - 1 - dist) % 32768 + 1",
    "type": "statement:localassign"
  }, {
    "id": 223,
    "text": "output(os, assert(os.wnd[pos], 'invalid distance'))",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 225,
    "text": "local function parse_block(bs, os)\r\n  local bfinal = bs:read(1)\r\n  local btype = bs:read(2)\r\n\r\n  local BTYPE_NO_COMPRESSION = 0\r\n  local BTYPE_FIXED_HUFFMAN = 1\r\n  local BTYPE_DYNAMIC_HUFFMAN = 2\r\n  local BTYPE_RESERVED = 3\r\n\r\n  if btype == BTYPE_NO_COMPRESSION then\r\n    bs:read(bs:nbits_left_in_byte())\r\n    local len = bs:read(16)\r\n    local nlen = noeof(bs:read(16))\r\n\r\n    for i=1,len do\r\n      local by = noeof(bs:read(8))\r\n      output(os, by)\r\n    end\r\n  elseif btype == BTYPE_FIXED_HUFFMAN or btype == BTYPE_DYNAMIC_HUFFMAN then\r\n    local littable, disttable\r\n    if btype == BTYPE_DYNAMIC_HUFFMAN then\r\n      littable, disttable = parse_huffmantables(bs)\r\n    else\r\n      littable  = HuffmanTable {0,8, 144,9, 256,7, 280,8, 288,nil}\r\n      disttable = HuffmanTable {0,5, 32,nil}\r\n    end\r\n\r\n    repeat until parse_compressed_item(\r\n        bs, os, littable, disttable\r\n    );\r\n  end\r\n\r\n  return bfinal ~= 0\r\nend",
    "type": "function"
  }, {
    "id": 226,
    "text": "local bfinal = bs:read(1)",
    "type": "statement:localassign"
  }, {
    "id": 227,
    "text": "local btype = bs:read(2)",
    "type": "statement:localassign"
  }, {
    "id": 228,
    "text": "local BTYPE_NO_COMPRESSION = 0",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "local BTYPE_FIXED_HUFFMAN = 1",
    "type": "statement:localassign"
  }, {
    "id": 230,
    "text": "local BTYPE_DYNAMIC_HUFFMAN = 2",
    "type": "statement:localassign"
  }, {
    "id": 231,
    "text": "local BTYPE_RESERVED = 3",
    "type": "statement:localassign"
  }, {
    "id": 232,
    "text": "if btype == BTYPE_NO_COMPRESSION then\r\n    bs:read(bs:nbits_left_in_byte())\r\n    local len = bs:read(16)\r\n    local nlen = noeof(bs:read(16))\r\n\r\n    for i=1,len do\r\n      local by = noeof(bs:read(8))\r\n      output(os, by)\r\n    end\r\n  elseif btype == BTYPE_FIXED_HUFFMAN or btype == BTYPE_DYNAMIC_HUFFMAN then\r\n    local littable, disttable\r\n    if btype == BTYPE_DYNAMIC_HUFFMAN then\r\n      littable, disttable = parse_huffmantables(bs)\r\n    else\r\n      littable  = HuffmanTable {0,8, 144,9, 256,7, 280,8, 288,nil}\r\n      disttable = HuffmanTable {0,5, 32,nil}\r\n    end\r\n\r\n    repeat until parse_compressed_item(\r\n        bs, os, littable, disttable\r\n    );\r\n  end",
    "type": "statement:if"
  }, {
    "id": 233,
    "text": "bs:read(bs:nbits_left_in_byte())",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "local len = bs:read(16)",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "local nlen = noeof(bs:read(16))",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "for i=1,len do\r\n      local by = noeof(bs:read(8))\r\n      output(os, by)\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 237,
    "text": "local by = noeof(bs:read(8))",
    "type": "statement:localassign"
  }, {
    "id": 238,
    "text": "output(os, by)",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "local littable, disttable",
    "type": "statement:localassign"
  }, {
    "id": 240,
    "text": "if btype == BTYPE_DYNAMIC_HUFFMAN then\r\n      littable, disttable = parse_huffmantables(bs)\r\n    else\r\n      littable  = HuffmanTable {0,8, 144,9, 256,7, 280,8, 288,nil}\r\n      disttable = HuffmanTable {0,5, 32,nil}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 241,
    "text": "littable, disttable = parse_huffmantables(bs)",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "littable  = HuffmanTable {0,8, 144,9, 256,7, 280,8, 288,nil}",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "disttable = HuffmanTable {0,5, 32,nil}",
    "type": "statement:assign"
  }, {
    "id": 244,
    "text": "repeat until parse_compressed_item(\r\n        bs, os, littable, disttable\r\n    )",
    "type": "statement:repeat"
  }, {
    "id": 245,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 246,
    "text": "local function deflate(t)\r\n  local bs, os = get_bitstream(t.input)\r\n  \t, make_os(get_obytestream(t.output))\r\n  repeat until parse_block(bs, os)\r\nend",
    "type": "function"
  }, {
    "id": 247,
    "text": "local bs, os = get_bitstream(t.input)\r\n  \t, make_os(get_obytestream(t.output))",
    "type": "statement:localassign"
  }, {
    "id": 248,
    "text": "repeat until parse_block(bs, os)",
    "type": "statement:repeat"
  }, {
    "id": 249,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 250,
    "text": "function(n) return 2^n end",
    "type": "function"
  }, {
    "id": 251,
    "text": "function(a,b)\r\n    return a.nbits == b.nbits and a.val < b.val or a.nbits < b.nbits\r\n  end",
    "type": "function"
  }, {
    "id": 252,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 253,
    "text": "function(bits) return pow2[minbits] + msb(bits, minbits) end",
    "type": "function"
  }, {
    "id": 254,
    "text": "function (t)\r\n  local bs = get_bitstream(t.input)\r\n  local outbs = get_obytestream(t.output)\r\n\r\n  parse_gzip_header(bs)\r\n\r\n  deflate{input=bs, output=outbs}\r\n\r\n  bs:read(bs:nbits_left_in_byte())\r\n  bs:read()\r\nend",
    "type": "function"
  }, {
    "id": 255,
    "text": "local bs = get_bitstream(t.input)",
    "type": "statement:localassign"
  }, {
    "id": 256,
    "text": "local outbs = get_obytestream(t.output)",
    "type": "statement:localassign"
  }, {
    "id": 257,
    "text": "parse_gzip_header(bs)",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "deflate{input=bs, output=outbs}",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "bs:read()",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 261,
    "text": "",
    "type": "function container"
  }, {
    "id": 262,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 263,
    "text": "type",
    "type": "global function"
  }, {
    "id": 264,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 265,
    "text": "min",
    "type": "global function"
  }, {
    "id": 266,
    "text": "string_char",
    "type": "global function"
  }, {
    "id": 267,
    "text": "table_sort",
    "type": "global function"
  }, {
    "id": 268,
    "text": "f",
    "type": "global function"
  }, {
    "id": 269,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 270,
    "text": "error",
    "type": "global function"
  }, {
    "id": 271,
    "text": "type",
    "type": "global function"
  }, {
    "id": 272,
    "text": "math_max",
    "type": "global function"
  }, {
    "id": 273,
    "text": "outbs",
    "type": "global function"
  }, {
    "id": 274,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 275,
    "text": "",
    "type": "variable container"
  }, {
    "id": 276,
    "text": "",
    "type": "require container"
  }, {
    "id": 277,
    "text": "",
    "type": "local variable"
  }, {
    "id": 278,
    "text": "",
    "type": "n/a"
  }, {
    "id": 279,
    "text": "",
    "type": "local variable"
  }, {
    "id": 280,
    "text": "",
    "type": "n/a"
  }, {
    "id": 281,
    "text": "",
    "type": "local variable"
  }, {
    "id": 282,
    "text": "",
    "type": "n/a"
  }, {
    "id": 283,
    "text": "",
    "type": "local variable"
  }, {
    "id": 284,
    "text": "",
    "type": "n/a"
  }, {
    "id": 285,
    "text": "",
    "type": "local variable"
  }, {
    "id": 286,
    "text": "",
    "type": "n/a"
  }, {
    "id": 287,
    "text": "",
    "type": "local variable"
  }, {
    "id": 288,
    "text": "",
    "type": "n/a"
  }, {
    "id": 289,
    "text": "",
    "type": "local variable"
  }, {
    "id": 290,
    "text": "",
    "type": "n/a"
  }, {
    "id": 291,
    "text": "",
    "type": "local variable"
  }, {
    "id": 292,
    "text": "",
    "type": "n/a"
  }, {
    "id": 293,
    "text": "",
    "type": "local variable"
  }, {
    "id": 294,
    "text": "",
    "type": "n/a"
  }, {
    "id": 295,
    "text": "",
    "type": "local variable"
  }, {
    "id": 296,
    "text": "",
    "type": "n/a"
  }, {
    "id": 297,
    "text": "",
    "type": "local variable"
  }, {
    "id": 298,
    "text": "",
    "type": "n/a"
  }, {
    "id": 299,
    "text": "",
    "type": "local variable"
  }, {
    "id": 300,
    "text": "",
    "type": "n/a"
  }, {
    "id": 301,
    "text": "",
    "type": "local variable"
  }, {
    "id": 302,
    "text": "",
    "type": "n/a"
  }, {
    "id": 303,
    "text": "",
    "type": "local variable"
  }, {
    "id": 304,
    "text": "",
    "type": "n/a"
  }, {
    "id": 305,
    "text": "",
    "type": "local variable"
  }, {
    "id": 306,
    "text": "",
    "type": "n/a"
  }, {
    "id": 307,
    "text": "",
    "type": "local variable"
  }, {
    "id": 308,
    "text": "",
    "type": "n/a"
  }, {
    "id": 309,
    "text": "",
    "type": "local variable"
  }, {
    "id": 310,
    "text": "",
    "type": "local variable"
  }, {
    "id": 311,
    "text": "",
    "type": "local variable"
  }, {
    "id": 312,
    "text": "",
    "type": "local variable"
  }, {
    "id": 313,
    "text": "",
    "type": "local variable"
  }, {
    "id": 314,
    "text": "",
    "type": "interface container"
  }, {
    "id": 315,
    "text": "",
    "type": "interface"
  } ]
}