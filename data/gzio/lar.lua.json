{
  "_filename": "lar.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/gzio/test/lar.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 6,
    "label": "has",
    "to": 15
  }, {
    "from": 3,
    "label": "has",
    "to": 16
  }, {
    "from": 3,
    "label": "has",
    "to": 17
  }, {
    "from": 3,
    "label": "has",
    "to": 18
  }, {
    "from": 3,
    "label": "has",
    "to": 19
  }, {
    "from": 3,
    "label": "has",
    "to": 20
  }, {
    "from": 3,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 28,
    "label": "has",
    "to": 40
  }, {
    "from": 28,
    "label": "has",
    "to": 41
  }, {
    "from": 22,
    "label": "has",
    "to": 42
  }, {
    "from": 22,
    "label": "has",
    "to": 42
  }, {
    "from": 22,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 23
  }, {
    "from": 44,
    "label": "has",
    "to": 24
  }, {
    "from": 44,
    "label": "has",
    "to": 25
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 27
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 29
  }, {
    "from": 46,
    "label": "has",
    "to": 30
  }, {
    "from": 46,
    "label": "has",
    "to": 31
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 38
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 39
  }, {
    "from": 46,
    "label": "has",
    "to": 40
  }, {
    "from": 46,
    "label": "has",
    "to": 41
  }, {
    "from": 44,
    "label": "has",
    "to": 42
  }, {
    "from": 44,
    "label": "has",
    "to": 42
  }, {
    "from": 44,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 53,
    "label": "has",
    "to": 42
  }, {
    "from": 53,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 68,
    "label": "has",
    "to": 42
  }, {
    "from": 68,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 79,
    "label": "has",
    "to": 42
  }, {
    "from": 79,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 42
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 85,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 85,
    "label": "has",
    "to": 42
  }, {
    "from": 85,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "calls",
    "to": 114
  }, {
    "from": 95,
    "label": "calls",
    "to": 98
  }, {
    "from": 95,
    "label": "calls",
    "to": 98
  }, {
    "from": 95,
    "label": "calls",
    "to": 100
  }, {
    "from": 95,
    "label": "calls",
    "to": 101
  }, {
    "from": 95,
    "label": "calls",
    "to": 102
  }, {
    "from": 95,
    "label": "calls",
    "to": 103
  }, {
    "from": 95,
    "label": "calls",
    "to": 103
  }, {
    "from": 95,
    "label": "calls",
    "to": 104
  }, {
    "from": 95,
    "label": "calls",
    "to": 104
  }, {
    "from": 95,
    "label": "calls",
    "to": 109
  }, {
    "from": 95,
    "label": "calls",
    "to": 109
  }, {
    "from": 95,
    "label": "calls",
    "to": 109
  }, {
    "from": 95,
    "label": "calls",
    "to": 109
  }, {
    "from": 95,
    "label": "calls",
    "to": 110
  }, {
    "from": 95,
    "label": "calls",
    "to": 111
  }, {
    "from": 95,
    "label": "calls",
    "to": 111
  }, {
    "from": 95,
    "label": "calls",
    "to": 112
  }, {
    "from": 95,
    "label": "calls",
    "to": 99
  }, {
    "from": 95,
    "label": "calls",
    "to": 113
  }, {
    "from": 95,
    "label": "calls",
    "to": 108
  }, {
    "from": 95,
    "label": "calls",
    "to": 108
  }, {
    "from": 95,
    "label": "calls",
    "to": 97
  }, {
    "from": 95,
    "label": "calls",
    "to": 107
  }, {
    "from": 95,
    "label": "calls",
    "to": 107
  }, {
    "from": 95,
    "label": "calls",
    "to": 106
  }, {
    "from": 95,
    "label": "calls",
    "to": 3
  }, {
    "from": 95,
    "label": "calls",
    "to": 105
  }, {
    "from": 2,
    "label": "contains",
    "to": 95
  }, {
    "from": 95,
    "label": "declares",
    "to": 3
  }, {
    "from": 95,
    "label": "declares",
    "to": 22
  }, {
    "from": 95,
    "label": "declares",
    "to": 44
  }, {
    "from": 95,
    "label": "declares",
    "to": 53
  }, {
    "from": 95,
    "label": "declares",
    "to": 63
  }, {
    "from": 95,
    "label": "declares",
    "to": 68
  }, {
    "from": 95,
    "label": "declares",
    "to": 79
  }, {
    "from": 95,
    "label": "declares",
    "to": 85
  }, {
    "from": 2,
    "label": "contains",
    "to": 115
  }, {
    "from": 2,
    "label": "contains",
    "to": 116
  }, {
    "from": 115,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 115,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 115,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "assigns",
    "to": 122
  }, {
    "from": 115,
    "label": "initializes",
    "to": 123
  }, {
    "from": 123,
    "label": "assigns",
    "to": 124
  }, {
    "from": 115,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "assigns",
    "to": 126
  }, {
    "from": 115,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "assigns",
    "to": 128
  }, {
    "from": 115,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "assigns",
    "to": 130
  }, {
    "from": 115,
    "label": "initializes",
    "to": 131
  }, {
    "from": 131,
    "label": "assigns",
    "to": 132
  }, {
    "from": 115,
    "label": "initializes",
    "to": 133
  }, {
    "from": 133,
    "label": "assigns",
    "to": 134
  }, {
    "from": 115,
    "label": "initializes",
    "to": 135
  }, {
    "from": 135,
    "label": "assigns",
    "to": 136
  }, {
    "from": 115,
    "label": "initializes",
    "to": 137
  }, {
    "from": 137,
    "label": "assigns",
    "to": 138
  }, {
    "from": 115,
    "label": "initializes",
    "to": 139
  }, {
    "from": 139,
    "label": "assigns",
    "to": 140
  }, {
    "from": 115,
    "label": "initializes",
    "to": 141
  }, {
    "from": 141,
    "label": "assigns",
    "to": 142
  }, {
    "from": 115,
    "label": "initializes",
    "to": 143
  }, {
    "from": 143,
    "label": "assigns",
    "to": 144
  }, {
    "from": 115,
    "label": "initializes",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 115,
    "label": "initializes",
    "to": 147
  }, {
    "from": 147,
    "label": "assigns",
    "to": 148
  }, {
    "from": 115,
    "label": "initializes",
    "to": 149
  }, {
    "from": 149,
    "label": "assigns",
    "to": 150
  }, {
    "from": 115,
    "label": "initializes",
    "to": 151
  }, {
    "from": 151,
    "label": "assigns",
    "to": 152
  }, {
    "from": 116,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "requires",
    "to": 96
  }, {
    "from": 116,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "requires",
    "to": 1
  }, {
    "from": 154,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "requires",
    "to": 1
  }, {
    "from": 154,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "requires",
    "to": 2
  }, {
    "from": 154,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "requires",
    "to": 155
  }, {
    "from": 156,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "requires",
    "to": 157
  }, {
    "from": 156,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "requires",
    "to": 1
  }, {
    "from": 158,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "requires",
    "to": 157
  }, {
    "from": 117,
    "label": "contains",
    "to": 3
  }, {
    "from": 119,
    "label": "contains",
    "to": 22
  }, {
    "from": 119,
    "label": "contains",
    "to": 44
  }, {
    "from": 119,
    "label": "contains",
    "to": 53
  }, {
    "from": 119,
    "label": "contains",
    "to": 63
  }, {
    "from": 119,
    "label": "contains",
    "to": 68
  }, {
    "from": 119,
    "label": "contains",
    "to": 79
  }, {
    "from": 119,
    "label": "contains",
    "to": 85
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tar",
    "type": "module"
  }, {
    "id": 2,
    "text": "lar",
    "type": "module"
  }, {
    "id": 3,
    "text": "function(format, extension)\r\n  larExtension = extension or \"lar\"\r\n  format = format or \"ZIP\"\r\n\r\n  if format == \"ZIP\" then\r\n    if not zip then require \"zip\" end\r\n    Public.open = Private.openzip\r\n    Public.close = zip.close\r\n  elseif format == \"TAR.GZ\" then\r\n    if not tar then require \"tar\" end\r\n    Public.open = Private.opentar\r\n    Public.close = tar.close\r\n  else\r\n    error(\"Uknown LAR format\")\r\n  end\r\n\r\n  Private.openedFiles = {} -- file caching\r\n\r\n  -- redefines the global I/O functions\r\n  io.open = Private.ioopen\r\n  loadfile = Private.loadfile\r\n  dofile = Private.dofile\r\n  require = Private.require\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "larExtension = extension or \"lar\"",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "format = format or \"ZIP\"",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "if format == \"ZIP\" then\r\n    if not zip then require \"zip\" end\r\n    Public.open = Private.openzip\r\n    Public.close = zip.close\r\n  elseif format == \"TAR.GZ\" then\r\n    if not tar then require \"tar\" end\r\n    Public.open = Private.opentar\r\n    Public.close = tar.close\r\n  else\r\n    error(\"Uknown LAR format\")\r\n  end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "if not zip then require \"zip\" end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "require \"zip\"",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "Public.open = Private.openzip",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "Public.close = zip.close",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "if not tar then require \"tar\" end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "require \"tar\"",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "Public.open = Private.opentar",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "Public.close = tar.close",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "error(\"Uknown LAR format\")",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "Private.openedFiles = {}",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "io.open = Private.ioopen",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "loadfile = Private.loadfile",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "dofile = Private.dofile",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "require = Private.require",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function (filepath, mode)\r\n  -- tries to find a lar in the file path\r\n  local current = \"\"\r\n  local remain = filepath\r\n  local pos\r\n  while remain and remain ~= \"\" do\r\n    pos = string.find(remain, \"/\")\r\n    if (pos) then\r\n      current = current..string.sub(remain, 1, pos - 1)\r\n      remain = string.sub(remain, pos + 1)\r\n      local filename = current..\".\"..larExtension\r\n      if Private.openedFiles[filename] then\r\n        return Private.openedFiles[filename]\r\n      else\r\n        local gfile = gzip.open(filename, \"rb\")\r\n        if gfile then\r\n          local tarfile = tar.open(gfile)\r\n          if tarfile then\r\n\t    local file = tarfile:open(remain)\r\n            Private.openedFiles[filepath] = file\r\n            return file\r\n          end\r\n        else\r\n          current = current..\"/\"\r\n        end\r\n      end\r\n    else\r\n      current = current..remain\r\n      remain = \"\"\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local current = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local remain = filepath",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local pos",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "while remain and remain ~= \"\" do\r\n    pos = string.find(remain, \"/\")\r\n    if (pos) then\r\n      current = current..string.sub(remain, 1, pos - 1)\r\n      remain = string.sub(remain, pos + 1)\r\n      local filename = current..\".\"..larExtension\r\n      if Private.openedFiles[filename] then\r\n        return Private.openedFiles[filename]\r\n      else\r\n        local gfile = gzip.open(filename, \"rb\")\r\n        if gfile then\r\n          local tarfile = tar.open(gfile)\r\n          if tarfile then\r\n\t    local file = tarfile:open(remain)\r\n            Private.openedFiles[filepath] = file\r\n            return file\r\n          end\r\n        else\r\n          current = current..\"/\"\r\n        end\r\n      end\r\n    else\r\n      current = current..remain\r\n      remain = \"\"\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 27,
    "text": "pos = string.find(remain, \"/\")",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "if (pos) then\r\n      current = current..string.sub(remain, 1, pos - 1)\r\n      remain = string.sub(remain, pos + 1)\r\n      local filename = current..\".\"..larExtension\r\n      if Private.openedFiles[filename] then\r\n        return Private.openedFiles[filename]\r\n      else\r\n        local gfile = gzip.open(filename, \"rb\")\r\n        if gfile then\r\n          local tarfile = tar.open(gfile)\r\n          if tarfile then\r\n\t    local file = tarfile:open(remain)\r\n            Private.openedFiles[filepath] = file\r\n            return file\r\n          end\r\n        else\r\n          current = current..\"/\"\r\n        end\r\n      end\r\n    else\r\n      current = current..remain\r\n      remain = \"\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "current = current..string.sub(remain, 1, pos - 1)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "remain = string.sub(remain, pos + 1)",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "local filename = current..\".\"..larExtension",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if Private.openedFiles[filename] then\r\n        return Private.openedFiles[filename]\r\n      else\r\n        local gfile = gzip.open(filename, \"rb\")\r\n        if gfile then\r\n          local tarfile = tar.open(gfile)\r\n          if tarfile then\r\n\t    local file = tarfile:open(remain)\r\n            Private.openedFiles[filepath] = file\r\n            return file\r\n          end\r\n        else\r\n          current = current..\"/\"\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "local gfile = gzip.open(filename, \"rb\")",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if gfile then\r\n          local tarfile = tar.open(gfile)\r\n          if tarfile then\r\n\t    local file = tarfile:open(remain)\r\n            Private.openedFiles[filepath] = file\r\n            return file\r\n          end\r\n        else\r\n          current = current..\"/\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "local tarfile = tar.open(gfile)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "if tarfile then\r\n\t    local file = tarfile:open(remain)\r\n            Private.openedFiles[filepath] = file\r\n            return file\r\n          end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "local file = tarfile:open(remain)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "Private.openedFiles[filepath] = file",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "current = current..\"/\"",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "current = current..remain",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "remain = \"\"",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function (filepath, mode)\r\n  -- tries to find a lar in the file path\r\n  local current = \"\"\r\n  local remain = filepath\r\n  local pos\r\n  while remain and remain ~= \"\" do\r\n    pos = string.find(remain, \"/\")\r\n    if (pos) then\r\n      current = current..string.sub(remain, 1, pos - 1)\r\n      remain = string.sub(remain, pos + 1)\r\n      local filename = current..\".\"..larExtension\r\n      if Private.openedFiles[filepath] then\r\n        return Private.openedFiles[filepath]\r\n      else\r\n        local zfile = zip.open(filename)\r\n        if zfile then\r\n          local file = zfile:open(remain)\r\n          Private.openedFiles[filepath] = file\r\n          zip.close(filename)\r\n          return file\r\n        else\r\n          current = current..\"/\"\r\n        end\r\n      end\r\n    else\r\n      current = current..remain\r\n      remain = \"\"\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "while remain and remain ~= \"\" do\r\n    pos = string.find(remain, \"/\")\r\n    if (pos) then\r\n      current = current..string.sub(remain, 1, pos - 1)\r\n      remain = string.sub(remain, pos + 1)\r\n      local filename = current..\".\"..larExtension\r\n      if Private.openedFiles[filepath] then\r\n        return Private.openedFiles[filepath]\r\n      else\r\n        local zfile = zip.open(filename)\r\n        if zfile then\r\n          local file = zfile:open(remain)\r\n          Private.openedFiles[filepath] = file\r\n          zip.close(filename)\r\n          return file\r\n        else\r\n          current = current..\"/\"\r\n        end\r\n      end\r\n    else\r\n      current = current..remain\r\n      remain = \"\"\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 46,
    "text": "if (pos) then\r\n      current = current..string.sub(remain, 1, pos - 1)\r\n      remain = string.sub(remain, pos + 1)\r\n      local filename = current..\".\"..larExtension\r\n      if Private.openedFiles[filepath] then\r\n        return Private.openedFiles[filepath]\r\n      else\r\n        local zfile = zip.open(filename)\r\n        if zfile then\r\n          local file = zfile:open(remain)\r\n          Private.openedFiles[filepath] = file\r\n          zip.close(filename)\r\n          return file\r\n        else\r\n          current = current..\"/\"\r\n        end\r\n      end\r\n    else\r\n      current = current..remain\r\n      remain = \"\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "if Private.openedFiles[filepath] then\r\n        return Private.openedFiles[filepath]\r\n      else\r\n        local zfile = zip.open(filename)\r\n        if zfile then\r\n          local file = zfile:open(remain)\r\n          Private.openedFiles[filepath] = file\r\n          zip.close(filename)\r\n          return file\r\n        else\r\n          current = current..\"/\"\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "local zfile = zip.open(filename)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if zfile then\r\n          local file = zfile:open(remain)\r\n          Private.openedFiles[filepath] = file\r\n          zip.close(filename)\r\n          return file\r\n        else\r\n          current = current..\"/\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "local file = zfile:open(remain)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "zip.close(filename)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function (filename, mode)\r\n  local fh, msg = open(filename, mode)\r\n  openLars[filename] = \"IO\"\r\n  if fh == nil then\r\n    local fh2, msg2 = Public.open(filename, mode)\r\n    openLars[filename] = \"LAR\"\r\n    if fh2 then\r\n      fh = fh2\r\n      msg = msg2\r\n    end\r\n  end\r\n  return fh, msg\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local fh, msg = open(filename, mode)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "openLars[filename] = \"IO\"",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "if fh == nil then\r\n    local fh2, msg2 = Public.open(filename, mode)\r\n    openLars[filename] = \"LAR\"\r\n    if fh2 then\r\n      fh = fh2\r\n      msg = msg2\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "local fh2, msg2 = Public.open(filename, mode)",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "openLars[filename] = \"LAR\"",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "if fh2 then\r\n      fh = fh2\r\n      msg = msg2\r\n    end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "fh = fh2",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "msg = msg2",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function (filename)\r\n  if openLars[filename] == \"LAR\" then\r\n    Public.close(filename)\r\n  else\r\n    close(filename)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "if openLars[filename] == \"LAR\" then\r\n    Public.close(filename)\r\n  else\r\n    close(filename)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "Public.close(filename)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "close(filename)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function (filename)\r\n  local fh, chunk, msg\r\n  chunk, msg = _loadfile(filename)\r\n  if chunk == nil then\r\n    fh, msg = Public.open(filename)\r\n    if fh ~= nil then\r\n      local contents = fh:read(\"*a\")\r\n      fh:close()\r\n      if contents then\r\n        chunk, msg = loadstring(contents)\r\n      end\r\n    end\r\n  end\r\n  return chunk, msg\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "local fh, chunk, msg",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "chunk, msg = _loadfile(filename)",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "if chunk == nil then\r\n    fh, msg = Public.open(filename)\r\n    if fh ~= nil then\r\n      local contents = fh:read(\"*a\")\r\n      fh:close()\r\n      if contents then\r\n        chunk, msg = loadstring(contents)\r\n      end\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "fh, msg = Public.open(filename)",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "if fh ~= nil then\r\n      local contents = fh:read(\"*a\")\r\n      fh:close()\r\n      if contents then\r\n        chunk, msg = loadstring(contents)\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "local contents = fh:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "fh:close()",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "if contents then\r\n        chunk, msg = loadstring(contents)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "chunk, msg = loadstring(contents)",
    "type": "statement:assign"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function (filename)\r\n  local chunk, msg, ret\r\n  chunk, msg = loadfile(filename)\r\n  if chunk then\r\n    ret = chunk()\r\n  end\r\n  return ret\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "local chunk, msg, ret",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "chunk, msg = loadfile(filename)",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "if chunk then\r\n    ret = chunk()\r\n  end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "ret = chunk()",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function (packagename)\r\n  local status, ret = pcall(_require, packagename)\r\n  if status then\r\n    return ret\r\n  end\r\n\r\n  local filepath = string.gsub(\"?;?.lua\", \"?\", packagename)\r\n  for p in string.gfind(filepath, \"([^;]+)\") do\r\n    local chunk, msg = loadfile(p)\r\n    if chunk then\r\n      res = chunk() or true\r\n      package.loaded[packagename] = res\r\n    end\r\n  end\r\n\r\n  return res\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "local status, ret = pcall(_require, packagename)",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "if status then\r\n    return ret\r\n  end",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "local filepath = string.gsub(\"?;?.lua\", \"?\", packagename)",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "for p in string.gfind(filepath, \"([^;]+)\") do\r\n    local chunk, msg = loadfile(p)\r\n    if chunk then\r\n      res = chunk() or true\r\n      package.loaded[packagename] = res\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "local chunk, msg = loadfile(p)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if chunk then\r\n      res = chunk() or true\r\n      package.loaded[packagename] = res\r\n    end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "res = chunk() or true",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "package.loaded[packagename] = res",
    "type": "statement:assign"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "",
    "type": "function container"
  }, {
    "id": 96,
    "text": "zip",
    "type": "module"
  }, {
    "id": 97,
    "text": "close",
    "type": "global function"
  }, {
    "id": 98,
    "text": "open",
    "type": "global function"
  }, {
    "id": 99,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 100,
    "text": "close",
    "type": "global function"
  }, {
    "id": 101,
    "text": "open",
    "type": "global function"
  }, {
    "id": 102,
    "text": "error",
    "type": "global function"
  }, {
    "id": 103,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 104,
    "text": "find",
    "type": "global function"
  }, {
    "id": 105,
    "text": "close",
    "type": "global function"
  }, {
    "id": 106,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 107,
    "text": "require",
    "type": "global function"
  }, {
    "id": 108,
    "text": "chunk",
    "type": "global function"
  }, {
    "id": 109,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 110,
    "text": "_loadfile",
    "type": "global function"
  }, {
    "id": 111,
    "text": "open",
    "type": "global function"
  }, {
    "id": 112,
    "text": "open",
    "type": "global function"
  }, {
    "id": 113,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 114,
    "text": "gfind",
    "type": "global function"
  }, {
    "id": 115,
    "text": "",
    "type": "variable container"
  }, {
    "id": 116,
    "text": "",
    "type": "require container"
  }, {
    "id": 117,
    "text": "",
    "type": "local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 119,
    "text": "",
    "type": "local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 121,
    "text": "",
    "type": "local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "string"
  }, {
    "id": 123,
    "text": "",
    "type": "local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 125,
    "text": "",
    "type": "local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "n/a"
  }, {
    "id": 127,
    "text": "",
    "type": "local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "n/a"
  }, {
    "id": 129,
    "text": "",
    "type": "local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "n/a"
  }, {
    "id": 131,
    "text": "",
    "type": "local variable"
  }, {
    "id": 132,
    "text": "",
    "type": "n/a"
  }, {
    "id": 133,
    "text": "",
    "type": "local variable"
  }, {
    "id": 134,
    "text": "",
    "type": "n/a"
  }, {
    "id": 135,
    "text": "",
    "type": "global variable"
  }, {
    "id": 136,
    "text": "",
    "type": "n/a"
  }, {
    "id": 137,
    "text": "",
    "type": "global variable"
  }, {
    "id": 138,
    "text": "",
    "type": "n/a"
  }, {
    "id": 139,
    "text": "",
    "type": "global variable"
  }, {
    "id": 140,
    "text": "",
    "type": "n/a"
  }, {
    "id": 141,
    "text": "",
    "type": "global variable"
  }, {
    "id": 142,
    "text": "",
    "type": "n/a"
  }, {
    "id": 143,
    "text": "",
    "type": "global variable"
  }, {
    "id": 144,
    "text": "",
    "type": "n/a"
  }, {
    "id": 145,
    "text": "",
    "type": "global variable"
  }, {
    "id": 146,
    "text": "",
    "type": "n/a"
  }, {
    "id": 147,
    "text": "",
    "type": "global variable"
  }, {
    "id": 148,
    "text": "",
    "type": "n/a"
  }, {
    "id": 149,
    "text": "",
    "type": "global variable"
  }, {
    "id": 150,
    "text": "",
    "type": "n/a"
  }, {
    "id": 151,
    "text": "",
    "type": "global variable"
  }, {
    "id": 152,
    "text": "",
    "type": "n/a"
  }, {
    "id": 153,
    "text": "",
    "type": "global variable"
  }, {
    "id": 154,
    "text": "",
    "type": "require container"
  }, {
    "id": 155,
    "text": "test)",
    "type": "module"
  }, {
    "id": 156,
    "text": "",
    "type": "require container"
  }, {
    "id": 157,
    "text": "gzio",
    "type": "module"
  }, {
    "id": 158,
    "text": "",
    "type": "require container"
  } ]
}