{
  "_filename": "optparse.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-pythonic-optparse/module/lmod/pythonic/optparse.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 15,
    "label": "has",
    "to": 23
  }, {
    "from": 15,
    "label": "has",
    "to": 24
  }, {
    "from": 15,
    "label": "has",
    "to": 25
  }, {
    "from": 15,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 18
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 28,
    "label": "has",
    "to": 38
  }, {
    "from": 28,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 28,
    "label": "has",
    "to": 41
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 15,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 15,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 44
  }, {
    "from": 15,
    "label": "has",
    "to": 47
  }, {
    "from": 2,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 29
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 50,
    "label": "has",
    "to": 56
  }, {
    "from": 48,
    "label": "has",
    "to": 47
  }, {
    "from": 2,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 2,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 2,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 2,
    "label": "has",
    "to": 47
  }, {
    "from": 2,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 9
  }, {
    "from": 68,
    "label": "has",
    "to": 10
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 12
  }, {
    "from": 70,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 16
  }, {
    "from": 72,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 72,
    "label": "has",
    "to": 23
  }, {
    "from": 72,
    "label": "has",
    "to": 24
  }, {
    "from": 72,
    "label": "has",
    "to": 25
  }, {
    "from": 72,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 18
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 28,
    "label": "has",
    "to": 38
  }, {
    "from": 28,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 28,
    "label": "has",
    "to": 41
  }, {
    "from": 26,
    "label": "has",
    "to": 32
  }, {
    "from": 72,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 72,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 44
  }, {
    "from": 72,
    "label": "has",
    "to": 47
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 49
  }, {
    "from": 74,
    "label": "has",
    "to": 29
  }, {
    "from": 74,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 50,
    "label": "has",
    "to": 56
  }, {
    "from": 74,
    "label": "has",
    "to": 47
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 58
  }, {
    "from": 76,
    "label": "has",
    "to": 59
  }, {
    "from": 76,
    "label": "has",
    "to": 60
  }, {
    "from": 76,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 80
  }, {
    "from": 2,
    "label": "calls",
    "to": 70
  }, {
    "from": 2,
    "label": "calls",
    "to": 70
  }, {
    "from": 2,
    "label": "calls",
    "to": 81
  }, {
    "from": 2,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 68
  }, {
    "from": 2,
    "label": "calls",
    "to": 74
  }, {
    "from": 2,
    "label": "calls",
    "to": 82
  }, {
    "from": 2,
    "label": "calls",
    "to": 82
  }, {
    "from": 2,
    "label": "calls",
    "to": 82
  }, {
    "from": 2,
    "label": "calls",
    "to": 83
  }, {
    "from": 2,
    "label": "calls",
    "to": 79
  }, {
    "from": 1,
    "label": "contains",
    "to": 78
  }, {
    "from": 78,
    "label": "declares",
    "to": 2
  }, {
    "from": 78,
    "label": "declares",
    "to": 68
  }, {
    "from": 78,
    "label": "declares",
    "to": 70
  }, {
    "from": 78,
    "label": "declares",
    "to": 72
  }, {
    "from": 78,
    "label": "declares",
    "to": 74
  }, {
    "from": 78,
    "label": "declares",
    "to": 76
  }, {
    "from": 1,
    "label": "contains",
    "to": 84
  }, {
    "from": 1,
    "label": "contains",
    "to": 85
  }, {
    "from": 84,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 84,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 84,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 84,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 84,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 84,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 84,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 84,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 84,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 1,
    "label": "provides",
    "to": 104
  }, {
    "from": 100,
    "label": "represents",
    "to": 105
  }, {
    "from": 104,
    "label": "provides",
    "to": 105
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "optparse",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function OptionParser(t)\r\n  local usage = t.usage\r\n  local version = t.version\r\n\r\n  local o = {}\r\n  local option_descriptions = {}\r\n  local option_of = {}\r\n\r\n  function o.fail(s) -- extension\r\n    io.stderr:write(s .. '\\n')\r\n    os.exit(1)\r\n  end\r\n\r\n  function o.add_option(optdesc)\r\n    option_descriptions[#option_descriptions+1] = optdesc\r\n    for _,v in ipairs(optdesc) do\r\n      option_of[v] = optdesc\r\n    end\r\n  end\r\n  function o.parse_args()\r\n    -- expand options (e.g. \"--input=file\" -> \"--input\", \"file\")\r\n    local arg = {unpack(arg)}\r\n    for i=#arg,1,-1 do local v = arg[i]\r\n      local flag, val = v:match('^(%-%-%w+)=(.*)')\r\n      if flag then\r\n        arg[i] = flag\r\n        table.insert(arg, i+1, val)\r\n      end\r\n    end\r\n\r\n    local options = {}\r\n    local args = {}\r\n    local i = 1\r\n    while i <= #arg do local v = arg[i]\r\n      local optdesc = option_of[v]\r\n      if optdesc then\r\n        local action = optdesc.action\r\n        local val\r\n        if action == 'store' or action == nil then\r\n          i = i + 1\r\n          val = arg[i]\r\n          if not val then o.fail('option requires an argument ' .. v) end\r\n        elseif action == 'store_true' then\r\n          val = true\r\n        elseif action == 'store_false' then\r\n          val = false\r\n        end\r\n        options[optdesc.dest] = val\r\n      else\r\n        if v:match('^%-') then o.fail('invalid option ' .. v) end\r\n        args[#args+1] = v\r\n      end\r\n      i = i + 1\r\n    end\r\n    if options.help then\r\n      o.print_help()\r\n      os.exit()\r\n    end\r\n    if options.version then\r\n      io.stdout:write(t.version .. \"\\n\")\r\n      os.exit()\r\n    end\r\n    return options, args\r\n  end\r\n\r\n  local function flags_str(optdesc)\r\n    local sflags = {}\r\n    local action = optdesc.action\r\n    for _,flag in ipairs(optdesc) do\r\n      local sflagend\r\n      if action == nil or action == 'store' then\r\n        local metavar = optdesc.metavar or optdesc.dest:upper()\r\n        sflagend = #flag == 2 and ' ' .. metavar\r\n                              or  '=' .. metavar\r\n      else\r\n        sflagend = ''\r\n      end\r\n      sflags[#sflags+1] = flag .. sflagend\r\n    end\r\n    return table.concat(sflags, ', ')\r\n  end\r\n\r\n  function o.print_help()\r\n    io.stdout:write(\"Usage: \" .. usage:gsub('%%prog', arg[0]) .. \"\\n\")\r\n    io.stdout:write(\"\\n\")\r\n    io.stdout:write(\"Options:\\n\")\r\n    for _,optdesc in ipairs(option_descriptions) do\r\n      io.stdout:write(\"  \" .. flags_str(optdesc) ..\r\n                      \"  \" .. optdesc.help .. \"\\n\")\r\n    end\r\n  end\r\n  if t.add_help_option == nil or t.add_help_option == true then\r\n    o.add_option{\"--help\", action=\"store_true\", dest=\"help\",\r\n                 help=\"show this help message and exit\"}\r\n  end\r\n  if t.version then\r\n    o.add_option{\"--version\", action=\"store_true\", dest=\"version\",\r\n                 help=\"output version info.\"}\r\n  end\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local usage = t.usage",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local version = t.version",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local o = {}",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local option_descriptions = {}",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local option_of = {}",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "function o.fail(s) -- extension\r\n    io.stderr:write(s .. '\\n')\r\n    os.exit(1)\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 9,
    "text": "io.stderr:write(s .. '\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "os.exit(1)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "function o.add_option(optdesc)\r\n    option_descriptions[#option_descriptions+1] = optdesc\r\n    for _,v in ipairs(optdesc) do\r\n      option_of[v] = optdesc\r\n    end\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 12,
    "text": "option_descriptions[#option_descriptions+1] = optdesc",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "for _,v in ipairs(optdesc) do\r\n      option_of[v] = optdesc\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 14,
    "text": "option_of[v] = optdesc",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "function o.parse_args()\r\n    -- expand options (e.g. \"--input=file\" -> \"--input\", \"file\")\r\n    local arg = {unpack(arg)}\r\n    for i=#arg,1,-1 do local v = arg[i]\r\n      local flag, val = v:match('^(%-%-%w+)=(.*)')\r\n      if flag then\r\n        arg[i] = flag\r\n        table.insert(arg, i+1, val)\r\n      end\r\n    end\r\n\r\n    local options = {}\r\n    local args = {}\r\n    local i = 1\r\n    while i <= #arg do local v = arg[i]\r\n      local optdesc = option_of[v]\r\n      if optdesc then\r\n        local action = optdesc.action\r\n        local val\r\n        if action == 'store' or action == nil then\r\n          i = i + 1\r\n          val = arg[i]\r\n          if not val then o.fail('option requires an argument ' .. v) end\r\n        elseif action == 'store_true' then\r\n          val = true\r\n        elseif action == 'store_false' then\r\n          val = false\r\n        end\r\n        options[optdesc.dest] = val\r\n      else\r\n        if v:match('^%-') then o.fail('invalid option ' .. v) end\r\n        args[#args+1] = v\r\n      end\r\n      i = i + 1\r\n    end\r\n    if options.help then\r\n      o.print_help()\r\n      os.exit()\r\n    end\r\n    if options.version then\r\n      io.stdout:write(t.version .. \"\\n\")\r\n      os.exit()\r\n    end\r\n    return options, args\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 16,
    "text": "local arg = {unpack(arg)}",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "for i=#arg,1,-1 do local v = arg[i]\r\n      local flag, val = v:match('^(%-%-%w+)=(.*)')\r\n      if flag then\r\n        arg[i] = flag\r\n        table.insert(arg, i+1, val)\r\n      end\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 18,
    "text": "local v = arg[i]",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local flag, val = v:match('^(%-%-%w+)=(.*)')",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "if flag then\r\n        arg[i] = flag\r\n        table.insert(arg, i+1, val)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "arg[i] = flag",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "table.insert(arg, i+1, val)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "local options = {}",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local args = {}",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "while i <= #arg do local v = arg[i]\r\n      local optdesc = option_of[v]\r\n      if optdesc then\r\n        local action = optdesc.action\r\n        local val\r\n        if action == 'store' or action == nil then\r\n          i = i + 1\r\n          val = arg[i]\r\n          if not val then o.fail('option requires an argument ' .. v) end\r\n        elseif action == 'store_true' then\r\n          val = true\r\n        elseif action == 'store_false' then\r\n          val = false\r\n        end\r\n        options[optdesc.dest] = val\r\n      else\r\n        if v:match('^%-') then o.fail('invalid option ' .. v) end\r\n        args[#args+1] = v\r\n      end\r\n      i = i + 1\r\n    end",
    "type": "statement:while"
  }, {
    "id": 27,
    "text": "local optdesc = option_of[v]",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "if optdesc then\r\n        local action = optdesc.action\r\n        local val\r\n        if action == 'store' or action == nil then\r\n          i = i + 1\r\n          val = arg[i]\r\n          if not val then o.fail('option requires an argument ' .. v) end\r\n        elseif action == 'store_true' then\r\n          val = true\r\n        elseif action == 'store_false' then\r\n          val = false\r\n        end\r\n        options[optdesc.dest] = val\r\n      else\r\n        if v:match('^%-') then o.fail('invalid option ' .. v) end\r\n        args[#args+1] = v\r\n      end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "local action = optdesc.action",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local val",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "if action == 'store' or action == nil then\r\n          i = i + 1\r\n          val = arg[i]\r\n          if not val then o.fail('option requires an argument ' .. v) end\r\n        elseif action == 'store_true' then\r\n          val = true\r\n        elseif action == 'store_false' then\r\n          val = false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "val = arg[i]",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "if not val then o.fail('option requires an argument ' .. v) end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "o.fail('option requires an argument ' .. v)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "val = true",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "val = false",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "options[optdesc.dest] = val",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "if v:match('^%-') then o.fail('invalid option ' .. v) end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "o.fail('invalid option ' .. v)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "args[#args+1] = v",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "if options.help then\r\n      o.print_help()\r\n      os.exit()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "o.print_help()",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "os.exit()",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "if options.version then\r\n      io.stdout:write(t.version .. \"\\n\")\r\n      os.exit()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "io.stdout:write(t.version .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 48,
    "text": "local function flags_str(optdesc)\r\n    local sflags = {}\r\n    local action = optdesc.action\r\n    for _,flag in ipairs(optdesc) do\r\n      local sflagend\r\n      if action == nil or action == 'store' then\r\n        local metavar = optdesc.metavar or optdesc.dest:upper()\r\n        sflagend = #flag == 2 and ' ' .. metavar\r\n                              or  '=' .. metavar\r\n      else\r\n        sflagend = ''\r\n      end\r\n      sflags[#sflags+1] = flag .. sflagend\r\n    end\r\n    return table.concat(sflags, ', ')\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 49,
    "text": "local sflags = {}",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "for _,flag in ipairs(optdesc) do\r\n      local sflagend\r\n      if action == nil or action == 'store' then\r\n        local metavar = optdesc.metavar or optdesc.dest:upper()\r\n        sflagend = #flag == 2 and ' ' .. metavar\r\n                              or  '=' .. metavar\r\n      else\r\n        sflagend = ''\r\n      end\r\n      sflags[#sflags+1] = flag .. sflagend\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 51,
    "text": "local sflagend",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "if action == nil or action == 'store' then\r\n        local metavar = optdesc.metavar or optdesc.dest:upper()\r\n        sflagend = #flag == 2 and ' ' .. metavar\r\n                              or  '=' .. metavar\r\n      else\r\n        sflagend = ''\r\n      end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "local metavar = optdesc.metavar or optdesc.dest:upper()",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "sflagend = #flag == 2 and ' ' .. metavar\r\n                              or  '=' .. metavar",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "sflagend = ''",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "sflags[#sflags+1] = flag .. sflagend",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "function o.print_help()\r\n    io.stdout:write(\"Usage: \" .. usage:gsub('%%prog', arg[0]) .. \"\\n\")\r\n    io.stdout:write(\"\\n\")\r\n    io.stdout:write(\"Options:\\n\")\r\n    for _,optdesc in ipairs(option_descriptions) do\r\n      io.stdout:write(\"  \" .. flags_str(optdesc) ..\r\n                      \"  \" .. optdesc.help .. \"\\n\")\r\n    end\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 58,
    "text": "io.stdout:write(\"Usage: \" .. usage:gsub('%%prog', arg[0]) .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "io.stdout:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "io.stdout:write(\"Options:\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "for _,optdesc in ipairs(option_descriptions) do\r\n      io.stdout:write(\"  \" .. flags_str(optdesc) ..\r\n                      \"  \" .. optdesc.help .. \"\\n\")\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 62,
    "text": "io.stdout:write(\"  \" .. flags_str(optdesc) ..\r\n                      \"  \" .. optdesc.help .. \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "if t.add_help_option == nil or t.add_help_option == true then\r\n    o.add_option{\"--help\", action=\"store_true\", dest=\"help\",\r\n                 help=\"show this help message and exit\"}\r\n  end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "o.add_option{\"--help\", action=\"store_true\", dest=\"help\",\r\n                 help=\"show this help message and exit\"}",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "if t.version then\r\n    o.add_option{\"--version\", action=\"store_true\", dest=\"version\",\r\n                 help=\"output version info.\"}\r\n  end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "o.add_option{\"--version\", action=\"store_true\", dest=\"version\",\r\n                 help=\"output version info.\"}",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function o.fail(s) -- extension\r\n    io.stderr:write(s .. '\\n')\r\n    os.exit(1)\r\n  end",
    "type": "function"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function o.add_option(optdesc)\r\n    option_descriptions[#option_descriptions+1] = optdesc\r\n    for _,v in ipairs(optdesc) do\r\n      option_of[v] = optdesc\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function o.parse_args()\r\n    -- expand options (e.g. \"--input=file\" -> \"--input\", \"file\")\r\n    local arg = {unpack(arg)}\r\n    for i=#arg,1,-1 do local v = arg[i]\r\n      local flag, val = v:match('^(%-%-%w+)=(.*)')\r\n      if flag then\r\n        arg[i] = flag\r\n        table.insert(arg, i+1, val)\r\n      end\r\n    end\r\n\r\n    local options = {}\r\n    local args = {}\r\n    local i = 1\r\n    while i <= #arg do local v = arg[i]\r\n      local optdesc = option_of[v]\r\n      if optdesc then\r\n        local action = optdesc.action\r\n        local val\r\n        if action == 'store' or action == nil then\r\n          i = i + 1\r\n          val = arg[i]\r\n          if not val then o.fail('option requires an argument ' .. v) end\r\n        elseif action == 'store_true' then\r\n          val = true\r\n        elseif action == 'store_false' then\r\n          val = false\r\n        end\r\n        options[optdesc.dest] = val\r\n      else\r\n        if v:match('^%-') then o.fail('invalid option ' .. v) end\r\n        args[#args+1] = v\r\n      end\r\n      i = i + 1\r\n    end\r\n    if options.help then\r\n      o.print_help()\r\n      os.exit()\r\n    end\r\n    if options.version then\r\n      io.stdout:write(t.version .. \"\\n\")\r\n      os.exit()\r\n    end\r\n    return options, args\r\n  end",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "local function flags_str(optdesc)\r\n    local sflags = {}\r\n    local action = optdesc.action\r\n    for _,flag in ipairs(optdesc) do\r\n      local sflagend\r\n      if action == nil or action == 'store' then\r\n        local metavar = optdesc.metavar or optdesc.dest:upper()\r\n        sflagend = #flag == 2 and ' ' .. metavar\r\n                              or  '=' .. metavar\r\n      else\r\n        sflagend = ''\r\n      end\r\n      sflags[#sflags+1] = flag .. sflagend\r\n    end\r\n    return table.concat(sflags, ', ')\r\n  end",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function o.print_help()\r\n    io.stdout:write(\"Usage: \" .. usage:gsub('%%prog', arg[0]) .. \"\\n\")\r\n    io.stdout:write(\"\\n\")\r\n    io.stdout:write(\"Options:\\n\")\r\n    for _,optdesc in ipairs(option_descriptions) do\r\n      io.stdout:write(\"  \" .. flags_str(optdesc) ..\r\n                      \"  \" .. optdesc.help .. \"\\n\")\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "",
    "type": "function container"
  }, {
    "id": 79,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 80,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 81,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 82,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 83,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 84,
    "text": "",
    "type": "variable container"
  }, {
    "id": 85,
    "text": "",
    "type": "require container"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "n/a"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "n/a"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "n/a"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "n/a"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "n/a"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "n/a"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 102,
    "text": "",
    "type": "global variable"
  }, {
    "id": 103,
    "text": "",
    "type": "n/a"
  }, {
    "id": 104,
    "text": "",
    "type": "interface container"
  }, {
    "id": 105,
    "text": "",
    "type": "interface"
  } ]
}