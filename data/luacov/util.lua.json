{
  "_filename": "util.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacov/src/luacov/util.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 4
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 20,
    "label": "has",
    "to": 26
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 4
  }, {
    "from": 20,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 10
  }, {
    "from": 28,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 4
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 20,
    "label": "calls",
    "to": 33
  }, {
    "from": 13,
    "label": "calls",
    "to": 36
  }, {
    "from": 13,
    "label": "calls",
    "to": 37
  }, {
    "from": 20,
    "label": "calls",
    "to": 6
  }, {
    "from": 13,
    "label": "calls",
    "to": 34
  }, {
    "from": 20,
    "label": "calls",
    "to": 13
  }, {
    "from": 6,
    "label": "calls",
    "to": 35
  }, {
    "from": 28,
    "label": "calls",
    "to": 35
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 20,
    "label": "calls",
    "to": 2
  }, {
    "from": 20,
    "label": "calls",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 32
  }, {
    "from": 32,
    "label": "declares",
    "to": 2
  }, {
    "from": 32,
    "label": "declares",
    "to": 6
  }, {
    "from": 32,
    "label": "declares",
    "to": 13
  }, {
    "from": 32,
    "label": "declares",
    "to": 20
  }, {
    "from": 32,
    "label": "declares",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 1,
    "label": "contains",
    "to": 39
  }, {
    "from": 38,
    "label": "initializes",
    "to": 40
  }, {
    "from": 40,
    "label": "assigns",
    "to": 41
  }, {
    "from": 1,
    "label": "provides",
    "to": 42
  }, {
    "from": 40,
    "label": "represents",
    "to": 43
  }, {
    "from": 42,
    "label": "provides",
    "to": 43
  }, {
    "from": 40,
    "label": "contains",
    "to": 2
  }, {
    "from": 40,
    "label": "contains",
    "to": 13
  }, {
    "from": 40,
    "label": "contains",
    "to": 20
  }, {
    "from": 40,
    "label": "contains",
    "to": 28
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "util",
    "type": "module"
  }, {
    "id": 2,
    "text": "function util.unprefix(str, prefix)\r\n   if str:sub(1, #prefix) == prefix then\r\n      return str:sub(#prefix + 1)\r\n   else\r\n      return str\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if str:sub(1, #prefix) == prefix then\r\n      return str:sub(#prefix + 1)\r\n   else\r\n      return str\r\n   end",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function read_file(name)\r\n   local f, open_err = io.open(name, \"rb\")\r\n\r\n   if not f then\r\n      return nil, util.unprefix(open_err, name .. \": \")\r\n   end\r\n\r\n   local contents, read_err = f:read(\"*a\")\r\n   f:close()\r\n\r\n   if contents then\r\n      return contents\r\n   else\r\n      return nil, read_err\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local f, open_err = io.open(name, \"rb\")",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if not f then\r\n      return nil, util.unprefix(open_err, name .. \": \")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "local contents, read_err = f:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "if contents then\r\n      return contents\r\n   else\r\n      return nil, read_err\r\n   end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function util.load_string(str, env, chunkname)\r\n   if _VERSION:find(\"5%.1\") then\r\n      local func, err = loadstring(str, chunkname) -- luacheck: compat\r\n\r\n      if not func then\r\n         return nil, err\r\n      end\r\n\r\n      if env then\r\n         setfenv(func, env) -- luacheck: compat\r\n      end\r\n\r\n      return func\r\n   else\r\n      return load(str, chunkname, \"bt\", env or _ENV) -- luacheck: compat\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "if _VERSION:find(\"5%.1\") then\r\n      local func, err = loadstring(str, chunkname) -- luacheck: compat\r\n\r\n      if not func then\r\n         return nil, err\r\n      end\r\n\r\n      if env then\r\n         setfenv(func, env) -- luacheck: compat\r\n      end\r\n\r\n      return func\r\n   else\r\n      return load(str, chunkname, \"bt\", env or _ENV) -- luacheck: compat\r\n   end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "local func, err = loadstring(str, chunkname)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if not func then\r\n         return nil, err\r\n      end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "if env then\r\n         setfenv(func, env) -- luacheck: compat\r\n      end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "setfenv(func, env)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function util.load_config(name, env)\r\n   local src, read_err = read_file(name)\r\n\r\n   if not src then\r\n      return nil, \"read\", read_err\r\n   end\r\n\r\n   local func, load_err = util.load_string(src, env, \"@config\")\r\n\r\n   if not func then\r\n      return nil, \"load\", \"line \" .. util.unprefix(load_err, \"config:\")\r\n   end\r\n\r\n   local ok, ret = pcall(func)\r\n\r\n   if not ok then\r\n      return nil, \"run\", \"line \" .. util.unprefix(ret, \"config:\")\r\n   end\r\n\r\n   return true, ret\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "local src, read_err = read_file(name)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if not src then\r\n      return nil, \"read\", read_err\r\n   end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "local func, load_err = util.load_string(src, env, \"@config\")",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if not func then\r\n      return nil, \"load\", \"line \" .. util.unprefix(load_err, \"config:\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "local ok, ret = pcall(func)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if not ok then\r\n      return nil, \"run\", \"line \" .. util.unprefix(ret, \"config:\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function util.file_exists(name)\r\n   local f = io.open(name)\r\n\r\n   if f then\r\n      f:close()\r\n      return true\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local f = io.open(name)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if f then\r\n      f:close()\r\n      return true\r\n   else\r\n      return false\r\n   end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "",
    "type": "function container"
  }, {
    "id": 33,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 34,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 35,
    "text": "open",
    "type": "global function"
  }, {
    "id": 36,
    "text": "load",
    "type": "global function"
  }, {
    "id": 37,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 38,
    "text": "",
    "type": "variable container"
  }, {
    "id": 39,
    "text": "",
    "type": "require container"
  }, {
    "id": 40,
    "text": "",
    "type": "local variable"
  }, {
    "id": 41,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 42,
    "text": "",
    "type": "interface container"
  }, {
    "id": 43,
    "text": "",
    "type": "interface"
  } ]
}