{
  "_filename": "reporter.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacov/src/luacov/reporter.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 5
  }, {
    "from": 11,
    "label": "has",
    "to": 5
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 5
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 5
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 19,
    "label": "has",
    "to": 5
  }, {
    "from": 19,
    "label": "has",
    "to": 5
  }, {
    "from": 19,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 26
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 28,
    "label": "has",
    "to": 5
  }, {
    "from": 28,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 50
  }, {
    "from": 53,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 57,
    "label": "has",
    "to": 63
  }, {
    "from": 57,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 57,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 67,
    "label": "has",
    "to": 5
  }, {
    "from": 67,
    "label": "has",
    "to": 71
  }, {
    "from": 67,
    "label": "has",
    "to": 72
  }, {
    "from": 67,
    "label": "has",
    "to": 73
  }, {
    "from": 67,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 75,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 82,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 50
  }, {
    "from": 82,
    "label": "has",
    "to": 87
  }, {
    "from": 82,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 31
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 26
  }, {
    "from": 88,
    "label": "has",
    "to": 34
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 92,
    "label": "has",
    "to": 81
  }, {
    "from": 92,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 26
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 96,
    "label": "has",
    "to": 100
  }, {
    "from": 67,
    "label": "has",
    "to": 101
  }, {
    "from": 67,
    "label": "has",
    "to": 5
  }, {
    "from": 67,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 103,
    "label": "has",
    "to": 5
  }, {
    "from": 103,
    "label": "has",
    "to": 107
  }, {
    "from": 103,
    "label": "has",
    "to": 108
  }, {
    "from": 103,
    "label": "has",
    "to": 109
  }, {
    "from": 103,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 113,
    "label": "has",
    "to": 116
  }, {
    "from": 111,
    "label": "has",
    "to": 117
  }, {
    "from": 103,
    "label": "has",
    "to": 118
  }, {
    "from": 103,
    "label": "has",
    "to": 119
  }, {
    "from": 103,
    "label": "has",
    "to": 120
  }, {
    "from": 103,
    "label": "has",
    "to": 5
  }, {
    "from": 103,
    "label": "has",
    "to": 121
  }, {
    "from": 103,
    "label": "has",
    "to": 5
  }, {
    "from": 103,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 5
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 5
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 5
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 129,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 5
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 135,
    "label": "has",
    "to": 5
  }, {
    "from": 135,
    "label": "has",
    "to": 136
  }, {
    "from": 137,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 153,
    "label": "has",
    "to": 5
  }, {
    "from": 153,
    "label": "has",
    "to": 157
  }, {
    "from": 153,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 161
  }, {
    "from": 158,
    "label": "has",
    "to": 162
  }, {
    "from": 158,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 158,
    "label": "has",
    "to": 165
  }, {
    "from": 158,
    "label": "has",
    "to": 166
  }, {
    "from": 153,
    "label": "has",
    "to": 5
  }, {
    "from": 153,
    "label": "has",
    "to": 5
  }, {
    "from": 153,
    "label": "has",
    "to": 167
  }, {
    "from": 153,
    "label": "has",
    "to": 168
  }, {
    "from": 153,
    "label": "has",
    "to": 169
  }, {
    "from": 153,
    "label": "has",
    "to": 170
  }, {
    "from": 153,
    "label": "has",
    "to": 171
  }, {
    "from": 153,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 172,
    "label": "has",
    "to": 175
  }, {
    "from": 172,
    "label": "has",
    "to": 176
  }, {
    "from": 172,
    "label": "has",
    "to": 177
  }, {
    "from": 172,
    "label": "has",
    "to": 178
  }, {
    "from": 178,
    "label": "has",
    "to": 179
  }, {
    "from": 172,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 181,
    "label": "has",
    "to": 182
  }, {
    "from": 181,
    "label": "has",
    "to": 183
  }, {
    "from": 181,
    "label": "has",
    "to": 184
  }, {
    "from": 181,
    "label": "has",
    "to": 185
  }, {
    "from": 180,
    "label": "has",
    "to": 186
  }, {
    "from": 172,
    "label": "has",
    "to": 187
  }, {
    "from": 153,
    "label": "has",
    "to": 188
  }, {
    "from": 153,
    "label": "has",
    "to": 189
  }, {
    "from": 153,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 191,
    "label": "has",
    "to": 195
  }, {
    "from": 191,
    "label": "has",
    "to": 196
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 197,
    "label": "has",
    "to": 199
  }, {
    "from": 197,
    "label": "has",
    "to": 200
  }, {
    "from": 197,
    "label": "has",
    "to": 201
  }, {
    "from": 197,
    "label": "has",
    "to": 202
  }, {
    "from": 197,
    "label": "has",
    "to": 203
  }, {
    "from": 197,
    "label": "has",
    "to": 204
  }, {
    "from": 197,
    "label": "has",
    "to": 205
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 209
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 214,
    "label": "has",
    "to": 215
  }, {
    "from": 214,
    "label": "has",
    "to": 216
  }, {
    "from": 213,
    "label": "has",
    "to": 217
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 218,
    "label": "has",
    "to": 220
  }, {
    "from": 221,
    "label": "has",
    "to": 222
  }, {
    "from": 221,
    "label": "has",
    "to": 223
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 224,
    "label": "has",
    "to": 215
  }, {
    "from": 224,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 227,
    "label": "has",
    "to": 229
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 227,
    "label": "has",
    "to": 5
  }, {
    "from": 227,
    "label": "has",
    "to": 231
  }, {
    "from": 232,
    "label": "has",
    "to": 207
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 232,
    "label": "has",
    "to": 207
  }, {
    "from": 232,
    "label": "has",
    "to": 215
  }, {
    "from": 232,
    "label": "has",
    "to": 234
  }, {
    "from": 232,
    "label": "has",
    "to": 235
  }, {
    "from": 232,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 236,
    "label": "has",
    "to": 238
  }, {
    "from": 238,
    "label": "has",
    "to": 239
  }, {
    "from": 238,
    "label": "has",
    "to": 240
  }, {
    "from": 238,
    "label": "has",
    "to": 241
  }, {
    "from": 238,
    "label": "has",
    "to": 242
  }, {
    "from": 232,
    "label": "has",
    "to": 243
  }, {
    "from": 232,
    "label": "has",
    "to": 244
  }, {
    "from": 232,
    "label": "has",
    "to": 245
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 232,
    "label": "has",
    "to": 248
  }, {
    "from": 232,
    "label": "has",
    "to": 249
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 232,
    "label": "has",
    "to": 251
  }, {
    "from": 251,
    "label": "has",
    "to": 252
  }, {
    "from": 252,
    "label": "has",
    "to": 253
  }, {
    "from": 251,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 254,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 215
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 232,
    "label": "has",
    "to": 258
  }, {
    "from": 259,
    "label": "has",
    "to": 260
  }, {
    "from": 259,
    "label": "has",
    "to": 261
  }, {
    "from": 259,
    "label": "has",
    "to": 262
  }, {
    "from": 259,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 263,
    "label": "has",
    "to": 265
  }, {
    "from": 263,
    "label": "has",
    "to": 266
  }, {
    "from": 259,
    "label": "has",
    "to": 267
  }, {
    "from": 259,
    "label": "has",
    "to": 268
  }, {
    "from": 259,
    "label": "has",
    "to": 269
  }, {
    "from": 269,
    "label": "has",
    "to": 270
  }, {
    "from": 259,
    "label": "has",
    "to": 271
  }, {
    "from": 67,
    "label": "calls",
    "to": 281
  }, {
    "from": 259,
    "label": "calls",
    "to": 282
  }, {
    "from": 103,
    "label": "calls",
    "to": 289
  }, {
    "from": 232,
    "label": "calls",
    "to": 283
  }, {
    "from": 232,
    "label": "calls",
    "to": 283
  }, {
    "from": 232,
    "label": "calls",
    "to": 283
  }, {
    "from": 232,
    "label": "calls",
    "to": 283
  }, {
    "from": 103,
    "label": "calls",
    "to": 284
  }, {
    "from": 232,
    "label": "calls",
    "to": 284
  }, {
    "from": 272,
    "label": "calls",
    "to": 7
  }, {
    "from": 272,
    "label": "calls",
    "to": 7
  }, {
    "from": 272,
    "label": "calls",
    "to": 7
  }, {
    "from": 272,
    "label": "calls",
    "to": 7
  }, {
    "from": 272,
    "label": "calls",
    "to": 7
  }, {
    "from": 272,
    "label": "calls",
    "to": 7
  }, {
    "from": 272,
    "label": "calls",
    "to": 7
  }, {
    "from": 272,
    "label": "calls",
    "to": 7
  }, {
    "from": 272,
    "label": "calls",
    "to": 7
  }, {
    "from": 272,
    "label": "calls",
    "to": 7
  }, {
    "from": 272,
    "label": "calls",
    "to": 7
  }, {
    "from": 272,
    "label": "calls",
    "to": 7
  }, {
    "from": 272,
    "label": "calls",
    "to": 7
  }, {
    "from": 272,
    "label": "calls",
    "to": 7
  }, {
    "from": 103,
    "label": "calls",
    "to": 291
  }, {
    "from": 232,
    "label": "calls",
    "to": 227
  }, {
    "from": 232,
    "label": "calls",
    "to": 227
  }, {
    "from": 103,
    "label": "calls",
    "to": 277
  }, {
    "from": 103,
    "label": "calls",
    "to": 278
  }, {
    "from": 7,
    "label": "calls",
    "to": 2
  }, {
    "from": 272,
    "label": "calls",
    "to": 294
  }, {
    "from": 272,
    "label": "calls",
    "to": 294
  }, {
    "from": 103,
    "label": "calls",
    "to": 294
  }, {
    "from": 272,
    "label": "calls",
    "to": 294
  }, {
    "from": 7,
    "label": "calls",
    "to": 285
  }, {
    "from": 11,
    "label": "calls",
    "to": 285
  }, {
    "from": 272,
    "label": "calls",
    "to": 285
  }, {
    "from": 191,
    "label": "calls",
    "to": 285
  }, {
    "from": 232,
    "label": "calls",
    "to": 285
  }, {
    "from": 232,
    "label": "calls",
    "to": 285
  }, {
    "from": 232,
    "label": "calls",
    "to": 285
  }, {
    "from": 232,
    "label": "calls",
    "to": 285
  }, {
    "from": 232,
    "label": "calls",
    "to": 285
  }, {
    "from": 232,
    "label": "calls",
    "to": 285
  }, {
    "from": 259,
    "label": "calls",
    "to": 274
  }, {
    "from": 67,
    "label": "calls",
    "to": 11
  }, {
    "from": 67,
    "label": "calls",
    "to": 11
  }, {
    "from": 259,
    "label": "calls",
    "to": 286
  }, {
    "from": 259,
    "label": "calls",
    "to": 286
  }, {
    "from": 259,
    "label": "calls",
    "to": 287
  }, {
    "from": 153,
    "label": "calls",
    "to": 276
  }, {
    "from": 153,
    "label": "calls",
    "to": 276
  }, {
    "from": 272,
    "label": "calls",
    "to": 288
  }, {
    "from": 15,
    "label": "calls",
    "to": 293
  }, {
    "from": 103,
    "label": "calls",
    "to": 293
  }, {
    "from": 272,
    "label": "calls",
    "to": 293
  }, {
    "from": 19,
    "label": "calls",
    "to": 292
  }, {
    "from": 28,
    "label": "calls",
    "to": 292
  }, {
    "from": 42,
    "label": "calls",
    "to": 292
  }, {
    "from": 48,
    "label": "calls",
    "to": 292
  }, {
    "from": 57,
    "label": "calls",
    "to": 292
  }, {
    "from": 67,
    "label": "calls",
    "to": 292
  }, {
    "from": 67,
    "label": "calls",
    "to": 292
  }, {
    "from": 67,
    "label": "calls",
    "to": 292
  }, {
    "from": 67,
    "label": "calls",
    "to": 292
  }, {
    "from": 103,
    "label": "calls",
    "to": 292
  }, {
    "from": 232,
    "label": "calls",
    "to": 292
  }, {
    "from": 232,
    "label": "calls",
    "to": 292
  }, {
    "from": 103,
    "label": "calls",
    "to": 275
  }, {
    "from": 103,
    "label": "calls",
    "to": 273
  }, {
    "from": 153,
    "label": "calls",
    "to": 279
  }, {
    "from": 153,
    "label": "calls",
    "to": 280
  }, {
    "from": 103,
    "label": "calls",
    "to": 290
  }, {
    "from": 153,
    "label": "calls",
    "to": 290
  }, {
    "from": 1,
    "label": "contains",
    "to": 272
  }, {
    "from": 272,
    "label": "declares",
    "to": 2
  }, {
    "from": 272,
    "label": "declares",
    "to": 7
  }, {
    "from": 272,
    "label": "declares",
    "to": 11
  }, {
    "from": 272,
    "label": "declares",
    "to": 15
  }, {
    "from": 272,
    "label": "declares",
    "to": 17
  }, {
    "from": 272,
    "label": "declares",
    "to": 19
  }, {
    "from": 272,
    "label": "declares",
    "to": 28
  }, {
    "from": 272,
    "label": "declares",
    "to": 36
  }, {
    "from": 272,
    "label": "declares",
    "to": 42
  }, {
    "from": 272,
    "label": "declares",
    "to": 48
  }, {
    "from": 272,
    "label": "declares",
    "to": 57
  }, {
    "from": 272,
    "label": "declares",
    "to": 67
  }, {
    "from": 272,
    "label": "declares",
    "to": 103
  }, {
    "from": 272,
    "label": "declares",
    "to": 123
  }, {
    "from": 272,
    "label": "declares",
    "to": 125
  }, {
    "from": 272,
    "label": "declares",
    "to": 127
  }, {
    "from": 272,
    "label": "declares",
    "to": 129
  }, {
    "from": 272,
    "label": "declares",
    "to": 133
  }, {
    "from": 272,
    "label": "declares",
    "to": 135
  }, {
    "from": 272,
    "label": "declares",
    "to": 137
  }, {
    "from": 272,
    "label": "declares",
    "to": 139
  }, {
    "from": 272,
    "label": "declares",
    "to": 141
  }, {
    "from": 272,
    "label": "declares",
    "to": 143
  }, {
    "from": 272,
    "label": "declares",
    "to": 145
  }, {
    "from": 272,
    "label": "declares",
    "to": 147
  }, {
    "from": 272,
    "label": "declares",
    "to": 149
  }, {
    "from": 272,
    "label": "declares",
    "to": 151
  }, {
    "from": 272,
    "label": "declares",
    "to": 153
  }, {
    "from": 272,
    "label": "declares",
    "to": 191
  }, {
    "from": 272,
    "label": "declares",
    "to": 197
  }, {
    "from": 272,
    "label": "declares",
    "to": 206
  }, {
    "from": 272,
    "label": "declares",
    "to": 210
  }, {
    "from": 272,
    "label": "declares",
    "to": 213
  }, {
    "from": 272,
    "label": "declares",
    "to": 218
  }, {
    "from": 272,
    "label": "declares",
    "to": 221
  }, {
    "from": 272,
    "label": "declares",
    "to": 224
  }, {
    "from": 272,
    "label": "declares",
    "to": 227
  }, {
    "from": 272,
    "label": "declares",
    "to": 232
  }, {
    "from": 272,
    "label": "declares",
    "to": 259
  }, {
    "from": 1,
    "label": "contains",
    "to": 295
  }, {
    "from": 1,
    "label": "contains",
    "to": 296
  }, {
    "from": 295,
    "label": "initializes",
    "to": 297
  }, {
    "from": 297,
    "label": "assigns",
    "to": 298
  }, {
    "from": 295,
    "label": "initializes",
    "to": 299
  }, {
    "from": 299,
    "label": "assigns",
    "to": 300
  }, {
    "from": 300,
    "label": "assigns",
    "to": 301
  }, {
    "from": 300,
    "label": "assigns",
    "to": 302
  }, {
    "from": 300,
    "label": "assigns",
    "to": 303
  }, {
    "from": 300,
    "label": "assigns",
    "to": 304
  }, {
    "from": 300,
    "label": "assigns",
    "to": 305
  }, {
    "from": 300,
    "label": "assigns",
    "to": 306
  }, {
    "from": 300,
    "label": "assigns",
    "to": 307
  }, {
    "from": 295,
    "label": "initializes",
    "to": 308
  }, {
    "from": 308,
    "label": "assigns",
    "to": 309
  }, {
    "from": 309,
    "label": "assigns",
    "to": 310
  }, {
    "from": 309,
    "label": "assigns",
    "to": 311
  }, {
    "from": 309,
    "label": "assigns",
    "to": 312
  }, {
    "from": 309,
    "label": "assigns",
    "to": 313
  }, {
    "from": 309,
    "label": "assigns",
    "to": 314
  }, {
    "from": 309,
    "label": "assigns",
    "to": 315
  }, {
    "from": 309,
    "label": "assigns",
    "to": 316
  }, {
    "from": 309,
    "label": "assigns",
    "to": 317
  }, {
    "from": 309,
    "label": "assigns",
    "to": 318
  }, {
    "from": 309,
    "label": "assigns",
    "to": 319
  }, {
    "from": 309,
    "label": "assigns",
    "to": 320
  }, {
    "from": 309,
    "label": "assigns",
    "to": 321
  }, {
    "from": 309,
    "label": "assigns",
    "to": 322
  }, {
    "from": 309,
    "label": "assigns",
    "to": 323
  }, {
    "from": 295,
    "label": "initializes",
    "to": 324
  }, {
    "from": 324,
    "label": "assigns",
    "to": 325
  }, {
    "from": 325,
    "label": "assigns",
    "to": 326
  }, {
    "from": 325,
    "label": "assigns",
    "to": 327
  }, {
    "from": 325,
    "label": "assigns",
    "to": 328
  }, {
    "from": 325,
    "label": "assigns",
    "to": 329
  }, {
    "from": 325,
    "label": "assigns",
    "to": 330
  }, {
    "from": 325,
    "label": "assigns",
    "to": 331
  }, {
    "from": 325,
    "label": "assigns",
    "to": 332
  }, {
    "from": 325,
    "label": "assigns",
    "to": 333
  }, {
    "from": 325,
    "label": "assigns",
    "to": 334
  }, {
    "from": 325,
    "label": "assigns",
    "to": 335
  }, {
    "from": 325,
    "label": "assigns",
    "to": 336
  }, {
    "from": 325,
    "label": "assigns",
    "to": 337
  }, {
    "from": 325,
    "label": "assigns",
    "to": 338
  }, {
    "from": 325,
    "label": "assigns",
    "to": 339
  }, {
    "from": 325,
    "label": "assigns",
    "to": 340
  }, {
    "from": 325,
    "label": "assigns",
    "to": 341
  }, {
    "from": 325,
    "label": "assigns",
    "to": 342
  }, {
    "from": 325,
    "label": "assigns",
    "to": 343
  }, {
    "from": 325,
    "label": "assigns",
    "to": 344
  }, {
    "from": 325,
    "label": "assigns",
    "to": 345
  }, {
    "from": 325,
    "label": "assigns",
    "to": 346
  }, {
    "from": 325,
    "label": "assigns",
    "to": 347
  }, {
    "from": 325,
    "label": "assigns",
    "to": 348
  }, {
    "from": 325,
    "label": "assigns",
    "to": 349
  }, {
    "from": 295,
    "label": "initializes",
    "to": 350
  }, {
    "from": 350,
    "label": "assigns",
    "to": 351
  }, {
    "from": 295,
    "label": "initializes",
    "to": 352
  }, {
    "from": 352,
    "label": "assigns",
    "to": 353
  }, {
    "from": 295,
    "label": "initializes",
    "to": 354
  }, {
    "from": 354,
    "label": "assigns",
    "to": 355
  }, {
    "from": 295,
    "label": "initializes",
    "to": 356
  }, {
    "from": 356,
    "label": "assigns",
    "to": 357
  }, {
    "from": 295,
    "label": "initializes",
    "to": 358
  }, {
    "from": 358,
    "label": "assigns",
    "to": 359
  }, {
    "from": 295,
    "label": "initializes",
    "to": 360
  }, {
    "from": 360,
    "label": "assigns",
    "to": 361
  }, {
    "from": 296,
    "label": "initializes",
    "to": 362
  }, {
    "from": 362,
    "label": "requires",
    "to": 363
  }, {
    "from": 296,
    "label": "initializes",
    "to": 364
  }, {
    "from": 364,
    "label": "requires",
    "to": 365
  }, {
    "from": 296,
    "label": "initializes",
    "to": 366
  }, {
    "from": 366,
    "label": "requires",
    "to": 367
  }, {
    "from": 1,
    "label": "provides",
    "to": 368
  }, {
    "from": 297,
    "label": "represents",
    "to": 369
  }, {
    "from": 368,
    "label": "provides",
    "to": 369
  }, {
    "from": 370,
    "label": "requires",
    "to": 367
  }, {
    "from": 371,
    "label": "requires",
    "to": 365
  }, {
    "from": 372,
    "label": "requires",
    "to": 363
  }, {
    "from": 373,
    "label": "requires",
    "to": 363
  }, {
    "from": 374,
    "label": "requires",
    "to": 363
  }, {
    "from": 297,
    "label": "contains",
    "to": 259
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "reporter",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function replace(s, old, new)\r\n   old = old:gsub(\"%p\", \"%%%0\")\r\n   new = new:gsub(\"%%\", \"%%%%\")\r\n   return (s:gsub(old, new))\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "old = old:gsub(\"%p\", \"%%%0\")",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "new = new:gsub(\"%%\", \"%%%%\")",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function fixup(pat)\r\n   for _, fixup_pair in ipairs(fixups) do\r\n      pat = replace(pat, fixup_pair[1], fixup_pair[2])\r\n   end\r\n\r\n   return pat\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "for _, fixup_pair in ipairs(fixups) do\r\n      pat = replace(pat, fixup_pair[1], fixup_pair[2])\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "pat = replace(pat, fixup_pair[1], fixup_pair[2])",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function excluded(exclusions, line)\r\n   for _, e in ipairs(exclusions) do\r\n      if line:match(\"^ *\"..e..\" *$\") then\r\n         return true\r\n      end\r\n   end\r\n\r\n   return false\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "for _, e in ipairs(exclusions) do\r\n      if line:match(\"^ *\"..e..\" *$\") then\r\n         return true\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 13,
    "text": "if line:match(\"^ *\"..e..\" *$\") then\r\n         return true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function LineScanner:new()\r\n   return setmetatable({first = true, comment = false, after_function = false}, self)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function LineScanner:find(pattern)\r\n   return self.line:find(pattern, self.i)\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function LineScanner:skip_string()\r\n   -- Look for closing quote, possibly after even number of backslashes.\r\n   local _, quote_i = self:find(\"^(\\\\*)%1\"..self.quote)\r\n   if not quote_i then\r\n      _, quote_i = self:find(\"[^\\\\](\\\\*)%1\"..self.quote)\r\n   end\r\n\r\n   if quote_i then\r\n      self.i = quote_i + 1\r\n      self.quote = nil\r\n      table.insert(self.simple_line_buffer, \"'\")\r\n      return true\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local _, quote_i = self:find(\"^(\\\\*)%1\"..self.quote)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if not quote_i then\r\n      _, quote_i = self:find(\"[^\\\\](\\\\*)%1\"..self.quote)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "_, quote_i = self:find(\"[^\\\\](\\\\*)%1\"..self.quote)",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if quote_i then\r\n      self.i = quote_i + 1\r\n      self.quote = nil\r\n      table.insert(self.simple_line_buffer, \"'\")\r\n      return true\r\n   else\r\n      return false\r\n   end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "self.i = quote_i + 1",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "self.quote = nil",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "table.insert(self.simple_line_buffer, \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function LineScanner:skip_long_string()\r\n   local _, bracket_i = self:find(\"%]\"..self.equals..\"%]\")\r\n\r\n   if bracket_i then\r\n      self.i = bracket_i + 1\r\n      self.equals = nil\r\n\r\n      if self.comment then\r\n         self.comment = false\r\n      else\r\n         table.insert(self.simple_line_buffer, \"'\")\r\n      end\r\n\r\n      return true\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local _, bracket_i = self:find(\"%]\"..self.equals..\"%]\")",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if bracket_i then\r\n      self.i = bracket_i + 1\r\n      self.equals = nil\r\n\r\n      if self.comment then\r\n         self.comment = false\r\n      else\r\n         table.insert(self.simple_line_buffer, \"'\")\r\n      end\r\n\r\n      return true\r\n   else\r\n      return false\r\n   end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "self.i = bracket_i + 1",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "self.equals = nil",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if self.comment then\r\n         self.comment = false\r\n      else\r\n         table.insert(self.simple_line_buffer, \"'\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "self.comment = false",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function LineScanner:skip_args()\r\n   local _, paren_i = self:find(\"%)\")\r\n\r\n   if paren_i then\r\n      self.i = paren_i + 1\r\n      self.args = nil\r\n      return true\r\n   else\r\n      return false\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local _, paren_i = self:find(\"%)\")",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if paren_i then\r\n      self.i = paren_i + 1\r\n      self.args = nil\r\n      return true\r\n   else\r\n      return false\r\n   end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "self.i = paren_i + 1",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "self.args = nil",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function LineScanner:skip_whitespace()\r\n   local next_i = self:find(\"%S\") or #self.line + 1\r\n\r\n   if next_i ~= self.i then\r\n      self.i = next_i\r\n      table.insert(self.simple_line_buffer, \" \")\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local next_i = self:find(\"%S\") or #self.line + 1",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "if next_i ~= self.i then\r\n      self.i = next_i\r\n      table.insert(self.simple_line_buffer, \" \")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "self.i = next_i",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "table.insert(self.simple_line_buffer, \" \")",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function LineScanner:skip_number()\r\n   if self:find(\"^0[xX]\") then\r\n      self.i = self.i + 2\r\n   end\r\n\r\n   local _\r\n   _, _, self.i = self:find(\"^[%x%.]*()\")\r\n\r\n   if self:find(\"^[eEpP][%+%-]\") then\r\n      -- Skip exponent, too.\r\n      self.i = self.i + 2\r\n      _, _, self.i = self:find(\"^[%x%.]*()\")\r\n   end\r\n\r\n   -- Skip LuaJIT number suffixes (i, ll, ull).\r\n   _, _, self.i = self:find(\"^[iull]*()\")\r\n   table.insert(self.simple_line_buffer, \"0\")\r\nend",
    "type": "function"
  }, {
    "id": 49,
    "text": "if self:find(\"^0[xX]\") then\r\n      self.i = self.i + 2\r\n   end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "self.i = self.i + 2",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "local _",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "_, _, self.i = self:find(\"^[%x%.]*()\")",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "if self:find(\"^[eEpP][%+%-]\") then\r\n      -- Skip exponent, too.\r\n      self.i = self.i + 2\r\n      _, _, self.i = self:find(\"^[%x%.]*()\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "_, _, self.i = self:find(\"^[iull]*()\")",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "table.insert(self.simple_line_buffer, \"0\")",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function LineScanner:skip_name()\r\n   -- It is guaranteed that the first character matches \"%a_\".\r\n   local _, _, name = self:find(\"^([%w_]*)\")\r\n   self.i = self.i + #name\r\n\r\n   if keywords[name] then\r\n      name = keywords[name]\r\n   else\r\n      name = \"x\"\r\n   end\r\n\r\n   table.insert(self.simple_line_buffer, name)\r\n\r\n   if name == \"function\" then\r\n      -- This flag indicates that the next pair of parentheses (function args) must be skipped.\r\n      self.after_function = true\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "local _, _, name = self:find(\"^([%w_]*)\")",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "self.i = self.i + #name",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if keywords[name] then\r\n      name = keywords[name]\r\n   else\r\n      name = \"x\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "name = keywords[name]",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "name = \"x\"",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "table.insert(self.simple_line_buffer, name)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "if name == \"function\" then\r\n      -- This flag indicates that the next pair of parentheses (function args) must be skipped.\r\n      self.after_function = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "self.after_function = true",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function LineScanner:consume(line)\r\n   if self.first then\r\n      self.first = false\r\n\r\n      if line:match(\"^#!\") then\r\n         -- Ignore Unix hash-bang magic line.\r\n         return true, true\r\n      end\r\n   end\r\n\r\n   self.line = line\r\n   -- As scanner goes through the line, it puts its simplified parts into buffer.\r\n   -- Punctuation is preserved. Whitespace is replaced with single space.\r\n   -- Literal strings are replaced with \"''\", so that a string literal\r\n   -- containing special characters does not confuse exclusion rules.\r\n   -- Numbers are replaced with \"0\".\r\n   -- Identifiers are replaced with \"x\".\r\n   -- Literal keywords (nil, true and false) are replaced with \"n\", \"t\" and \"f\",\r\n   -- other keywords are preserved.\r\n   -- Function declaration arguments are removed.\r\n   self.simple_line_buffer = {}\r\n   self.i = 1\r\n\r\n   while self.i <= #line do\r\n      -- One iteration of this loop handles one token, where\r\n      -- string literal start and end are considered distinct tokens.\r\n      if self.quote then\r\n         if not self:skip_string() then\r\n            -- String literal ends on another line.\r\n            break\r\n         end\r\n      elseif self.equals then\r\n         if not self:skip_long_string() then\r\n            -- Long string literal or comment ends on another line.\r\n            break\r\n         end\r\n      elseif self.args then\r\n         if not self:skip_args() then\r\n            -- Function arguments end on another line.\r\n            break\r\n         end\r\n      else\r\n         self:skip_whitespace()\r\n\r\n         if self:find(\"^%.%d\") then\r\n            self.i = self.i + 1\r\n         end\r\n\r\n         if self:find(\"^%d\") then\r\n            self:skip_number()\r\n         elseif self:find(\"^[%a_]\") then\r\n            self:skip_name()\r\n         else\r\n            if self:find(\"^%-%-\") then\r\n               self.comment = true\r\n               self.i = self.i + 2\r\n            end\r\n\r\n            local _, bracket_i, equals = self:find(\"^%[(=*)%[\")\r\n            if equals then\r\n               self.i = bracket_i + 1\r\n               self.equals = equals\r\n\r\n               if not self.comment then\r\n                  table.insert(self.simple_line_buffer, \"'\")\r\n               end\r\n            elseif self.comment then\r\n               -- Simple comment, skip line.\r\n               self.comment = false\r\n               break\r\n            else\r\n               local char = line:sub(self.i, self.i)\r\n\r\n               if char == \".\" then\r\n                  -- Dot can't be saved as one character because of\r\n                  -- \"..\" and \"...\" tokens and the fact that number literals\r\n                  -- can start with one.\r\n                  local _, _, dots = self:find(\"^(%.*)\")\r\n                  self.i = self.i + #dots\r\n                  table.insert(self.simple_line_buffer, dots)\r\n               else\r\n                  self.i = self.i + 1\r\n\r\n                  if char == \"'\" or char == '\"' then\r\n                     table.insert(self.simple_line_buffer, \"'\")\r\n                     self.quote = char\r\n                  elseif self.after_function and char == \"(\" then\r\n                     -- This is the opening parenthesis of function declaration args.\r\n                     self.after_function = false\r\n                     self.args = true\r\n                  else\r\n                     -- Save other punctuation literally.\r\n                     -- This inserts an empty string when at the end of line,\r\n                     -- which is fine.\r\n                     table.insert(self.simple_line_buffer, char)\r\n                  end\r\n               end\r\n            end\r\n         end\r\n      end\r\n   end\r\n\r\n   local simple_line = table.concat(self.simple_line_buffer)\r\n   return excluded(any_hits_exclusions, simple_line), excluded(zero_hits_exclusions, simple_line)\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "if self.first then\r\n      self.first = false\r\n\r\n      if line:match(\"^#!\") then\r\n         -- Ignore Unix hash-bang magic line.\r\n         return true, true\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "self.first = false",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "if line:match(\"^#!\") then\r\n         -- Ignore Unix hash-bang magic line.\r\n         return true, true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "self.line = line",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "self.simple_line_buffer = {}",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "self.i = 1",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "while self.i <= #line do\r\n      -- One iteration of this loop handles one token, where\r\n      -- string literal start and end are considered distinct tokens.\r\n      if self.quote then\r\n         if not self:skip_string() then\r\n            -- String literal ends on another line.\r\n            break\r\n         end\r\n      elseif self.equals then\r\n         if not self:skip_long_string() then\r\n            -- Long string literal or comment ends on another line.\r\n            break\r\n         end\r\n      elseif self.args then\r\n         if not self:skip_args() then\r\n            -- Function arguments end on another line.\r\n            break\r\n         end\r\n      else\r\n         self:skip_whitespace()\r\n\r\n         if self:find(\"^%.%d\") then\r\n            self.i = self.i + 1\r\n         end\r\n\r\n         if self:find(\"^%d\") then\r\n            self:skip_number()\r\n         elseif self:find(\"^[%a_]\") then\r\n            self:skip_name()\r\n         else\r\n            if self:find(\"^%-%-\") then\r\n               self.comment = true\r\n               self.i = self.i + 2\r\n            end\r\n\r\n            local _, bracket_i, equals = self:find(\"^%[(=*)%[\")\r\n            if equals then\r\n               self.i = bracket_i + 1\r\n               self.equals = equals\r\n\r\n               if not self.comment then\r\n                  table.insert(self.simple_line_buffer, \"'\")\r\n               end\r\n            elseif self.comment then\r\n               -- Simple comment, skip line.\r\n               self.comment = false\r\n               break\r\n            else\r\n               local char = line:sub(self.i, self.i)\r\n\r\n               if char == \".\" then\r\n                  -- Dot can't be saved as one character because of\r\n                  -- \"..\" and \"...\" tokens and the fact that number literals\r\n                  -- can start with one.\r\n                  local _, _, dots = self:find(\"^(%.*)\")\r\n                  self.i = self.i + #dots\r\n                  table.insert(self.simple_line_buffer, dots)\r\n               else\r\n                  self.i = self.i + 1\r\n\r\n                  if char == \"'\" or char == '\"' then\r\n                     table.insert(self.simple_line_buffer, \"'\")\r\n                     self.quote = char\r\n                  elseif self.after_function and char == \"(\" then\r\n                     -- This is the opening parenthesis of function declaration args.\r\n                     self.after_function = false\r\n                     self.args = true\r\n                  else\r\n                     -- Save other punctuation literally.\r\n                     -- This inserts an empty string when at the end of line,\r\n                     -- which is fine.\r\n                     table.insert(self.simple_line_buffer, char)\r\n                  end\r\n               end\r\n            end\r\n         end\r\n      end\r\n   end",
    "type": "statement:while"
  }, {
    "id": 75,
    "text": "if self.quote then\r\n         if not self:skip_string() then\r\n            -- String literal ends on another line.\r\n            break\r\n         end\r\n      elseif self.equals then\r\n         if not self:skip_long_string() then\r\n            -- Long string literal or comment ends on another line.\r\n            break\r\n         end\r\n      elseif self.args then\r\n         if not self:skip_args() then\r\n            -- Function arguments end on another line.\r\n            break\r\n         end\r\n      else\r\n         self:skip_whitespace()\r\n\r\n         if self:find(\"^%.%d\") then\r\n            self.i = self.i + 1\r\n         end\r\n\r\n         if self:find(\"^%d\") then\r\n            self:skip_number()\r\n         elseif self:find(\"^[%a_]\") then\r\n            self:skip_name()\r\n         else\r\n            if self:find(\"^%-%-\") then\r\n               self.comment = true\r\n               self.i = self.i + 2\r\n            end\r\n\r\n            local _, bracket_i, equals = self:find(\"^%[(=*)%[\")\r\n            if equals then\r\n               self.i = bracket_i + 1\r\n               self.equals = equals\r\n\r\n               if not self.comment then\r\n                  table.insert(self.simple_line_buffer, \"'\")\r\n               end\r\n            elseif self.comment then\r\n               -- Simple comment, skip line.\r\n               self.comment = false\r\n               break\r\n            else\r\n               local char = line:sub(self.i, self.i)\r\n\r\n               if char == \".\" then\r\n                  -- Dot can't be saved as one character because of\r\n                  -- \"..\" and \"...\" tokens and the fact that number literals\r\n                  -- can start with one.\r\n                  local _, _, dots = self:find(\"^(%.*)\")\r\n                  self.i = self.i + #dots\r\n                  table.insert(self.simple_line_buffer, dots)\r\n               else\r\n                  self.i = self.i + 1\r\n\r\n                  if char == \"'\" or char == '\"' then\r\n                     table.insert(self.simple_line_buffer, \"'\")\r\n                     self.quote = char\r\n                  elseif self.after_function and char == \"(\" then\r\n                     -- This is the opening parenthesis of function declaration args.\r\n                     self.after_function = false\r\n                     self.args = true\r\n                  else\r\n                     -- Save other punctuation literally.\r\n                     -- This inserts an empty string when at the end of line,\r\n                     -- which is fine.\r\n                     table.insert(self.simple_line_buffer, char)\r\n                  end\r\n               end\r\n            end\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 76,
    "text": "if not self:skip_string() then\r\n            -- String literal ends on another line.\r\n            break\r\n         end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "if not self:skip_long_string() then\r\n            -- Long string literal or comment ends on another line.\r\n            break\r\n         end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "if not self:skip_args() then\r\n            -- Function arguments end on another line.\r\n            break\r\n         end",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "self:skip_whitespace()",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "if self:find(\"^%.%d\") then\r\n            self.i = self.i + 1\r\n         end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "self.i = self.i + 1",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "if self:find(\"^%d\") then\r\n            self:skip_number()\r\n         elseif self:find(\"^[%a_]\") then\r\n            self:skip_name()\r\n         else\r\n            if self:find(\"^%-%-\") then\r\n               self.comment = true\r\n               self.i = self.i + 2\r\n            end\r\n\r\n            local _, bracket_i, equals = self:find(\"^%[(=*)%[\")\r\n            if equals then\r\n               self.i = bracket_i + 1\r\n               self.equals = equals\r\n\r\n               if not self.comment then\r\n                  table.insert(self.simple_line_buffer, \"'\")\r\n               end\r\n            elseif self.comment then\r\n               -- Simple comment, skip line.\r\n               self.comment = false\r\n               break\r\n            else\r\n               local char = line:sub(self.i, self.i)\r\n\r\n               if char == \".\" then\r\n                  -- Dot can't be saved as one character because of\r\n                  -- \"..\" and \"...\" tokens and the fact that number literals\r\n                  -- can start with one.\r\n                  local _, _, dots = self:find(\"^(%.*)\")\r\n                  self.i = self.i + #dots\r\n                  table.insert(self.simple_line_buffer, dots)\r\n               else\r\n                  self.i = self.i + 1\r\n\r\n                  if char == \"'\" or char == '\"' then\r\n                     table.insert(self.simple_line_buffer, \"'\")\r\n                     self.quote = char\r\n                  elseif self.after_function and char == \"(\" then\r\n                     -- This is the opening parenthesis of function declaration args.\r\n                     self.after_function = false\r\n                     self.args = true\r\n                  else\r\n                     -- Save other punctuation literally.\r\n                     -- This inserts an empty string when at the end of line,\r\n                     -- which is fine.\r\n                     table.insert(self.simple_line_buffer, char)\r\n                  end\r\n               end\r\n            end\r\n         end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "self:skip_number()",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "self:skip_name()",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "if self:find(\"^%-%-\") then\r\n               self.comment = true\r\n               self.i = self.i + 2\r\n            end",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "self.comment = true",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "local _, bracket_i, equals = self:find(\"^%[(=*)%[\")",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "if equals then\r\n               self.i = bracket_i + 1\r\n               self.equals = equals\r\n\r\n               if not self.comment then\r\n                  table.insert(self.simple_line_buffer, \"'\")\r\n               end\r\n            elseif self.comment then\r\n               -- Simple comment, skip line.\r\n               self.comment = false\r\n               break\r\n            else\r\n               local char = line:sub(self.i, self.i)\r\n\r\n               if char == \".\" then\r\n                  -- Dot can't be saved as one character because of\r\n                  -- \"..\" and \"...\" tokens and the fact that number literals\r\n                  -- can start with one.\r\n                  local _, _, dots = self:find(\"^(%.*)\")\r\n                  self.i = self.i + #dots\r\n                  table.insert(self.simple_line_buffer, dots)\r\n               else\r\n                  self.i = self.i + 1\r\n\r\n                  if char == \"'\" or char == '\"' then\r\n                     table.insert(self.simple_line_buffer, \"'\")\r\n                     self.quote = char\r\n                  elseif self.after_function and char == \"(\" then\r\n                     -- This is the opening parenthesis of function declaration args.\r\n                     self.after_function = false\r\n                     self.args = true\r\n                  else\r\n                     -- Save other punctuation literally.\r\n                     -- This inserts an empty string when at the end of line,\r\n                     -- which is fine.\r\n                     table.insert(self.simple_line_buffer, char)\r\n                  end\r\n               end\r\n            end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "self.equals = equals",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "if not self.comment then\r\n                  table.insert(self.simple_line_buffer, \"'\")\r\n               end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "local char = line:sub(self.i, self.i)",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "if char == \".\" then\r\n                  -- Dot can't be saved as one character because of\r\n                  -- \"..\" and \"...\" tokens and the fact that number literals\r\n                  -- can start with one.\r\n                  local _, _, dots = self:find(\"^(%.*)\")\r\n                  self.i = self.i + #dots\r\n                  table.insert(self.simple_line_buffer, dots)\r\n               else\r\n                  self.i = self.i + 1\r\n\r\n                  if char == \"'\" or char == '\"' then\r\n                     table.insert(self.simple_line_buffer, \"'\")\r\n                     self.quote = char\r\n                  elseif self.after_function and char == \"(\" then\r\n                     -- This is the opening parenthesis of function declaration args.\r\n                     self.after_function = false\r\n                     self.args = true\r\n                  else\r\n                     -- Save other punctuation literally.\r\n                     -- This inserts an empty string when at the end of line,\r\n                     -- which is fine.\r\n                     table.insert(self.simple_line_buffer, char)\r\n                  end\r\n               end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "local _, _, dots = self:find(\"^(%.*)\")",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "self.i = self.i + #dots",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "table.insert(self.simple_line_buffer, dots)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "if char == \"'\" or char == '\"' then\r\n                     table.insert(self.simple_line_buffer, \"'\")\r\n                     self.quote = char\r\n                  elseif self.after_function and char == \"(\" then\r\n                     -- This is the opening parenthesis of function declaration args.\r\n                     self.after_function = false\r\n                     self.args = true\r\n                  else\r\n                     -- Save other punctuation literally.\r\n                     -- This inserts an empty string when at the end of line,\r\n                     -- which is fine.\r\n                     table.insert(self.simple_line_buffer, char)\r\n                  end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "self.quote = char",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "self.after_function = false",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "self.args = true",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "table.insert(self.simple_line_buffer, char)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "local simple_line = table.concat(self.simple_line_buffer)",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function ReporterBase:new(conf)\r\n   local stats = require(\"luacov.stats\")\r\n   local data = stats.load(conf.statsfile)\r\n\r\n   if not data then\r\n      return nil, \"Could not load stats file \" .. conf.statsfile .. \".\"\r\n   end\r\n\r\n   local files = {}\r\n   local filtered_data = {}\r\n   local max_hits = 0\r\n\r\n   -- Several original paths can map to one real path,\r\n   -- their stats should be merged in this case.\r\n   for filename, file_stats in pairs(data) do\r\n      if luacov.file_included(filename) then\r\n         filename = luacov.real_name(filename)\r\n\r\n         if filtered_data[filename] then\r\n            luacov.update_stats(filtered_data[filename], file_stats)\r\n         else\r\n            table.insert(files, filename)\r\n            filtered_data[filename] = file_stats\r\n         end\r\n\r\n         max_hits = math.max(max_hits, filtered_data[filename].max_hits)\r\n      end\r\n   end\r\n\r\n   table.sort(files)\r\n\r\n   local out, err = io.open(conf.reportfile, \"w\")\r\n   if not out then return nil, err end\r\n\r\n   local o = setmetatable({\r\n      _out  = out,\r\n      _cfg  = conf,\r\n      _data = filtered_data,\r\n      _files = files,\r\n      _mhit = max_hits,\r\n   }, self)\r\n  \r\n   return o\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "local stats = require(\"luacov.stats\")",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "local data = stats.load(conf.statsfile)",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "if not data then\r\n      return nil, \"Could not load stats file \" .. conf.statsfile .. \".\"\r\n   end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "local files = {}",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "local filtered_data = {}",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "local max_hits = 0",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "for filename, file_stats in pairs(data) do\r\n      if luacov.file_included(filename) then\r\n         filename = luacov.real_name(filename)\r\n\r\n         if filtered_data[filename] then\r\n            luacov.update_stats(filtered_data[filename], file_stats)\r\n         else\r\n            table.insert(files, filename)\r\n            filtered_data[filename] = file_stats\r\n         end\r\n\r\n         max_hits = math.max(max_hits, filtered_data[filename].max_hits)\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 111,
    "text": "if luacov.file_included(filename) then\r\n         filename = luacov.real_name(filename)\r\n\r\n         if filtered_data[filename] then\r\n            luacov.update_stats(filtered_data[filename], file_stats)\r\n         else\r\n            table.insert(files, filename)\r\n            filtered_data[filename] = file_stats\r\n         end\r\n\r\n         max_hits = math.max(max_hits, filtered_data[filename].max_hits)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 112,
    "text": "filename = luacov.real_name(filename)",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "if filtered_data[filename] then\r\n            luacov.update_stats(filtered_data[filename], file_stats)\r\n         else\r\n            table.insert(files, filename)\r\n            filtered_data[filename] = file_stats\r\n         end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "luacov.update_stats(filtered_data[filename], file_stats)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "table.insert(files, filename)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "filtered_data[filename] = file_stats",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "max_hits = math.max(max_hits, filtered_data[filename].max_hits)",
    "type": "statement:assign"
  }, {
    "id": 118,
    "text": "table.sort(files)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "local out, err = io.open(conf.reportfile, \"w\")",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "if not out then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "local o = setmetatable({\r\n      _out  = out,\r\n      _cfg  = conf,\r\n      _data = filtered_data,\r\n      _files = files,\r\n      _mhit = max_hits,\r\n   }, self)",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function ReporterBase:config()\r\n   return self._cfg\r\nend",
    "type": "function"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function ReporterBase:max_hits()\r\n   return self._mhit\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function ReporterBase:write(...)\r\n   return self._out:write(...)\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function ReporterBase:close()\r\n   self._out:close()\r\n   self._private = nil\r\nend",
    "type": "function"
  }, {
    "id": 130,
    "text": "self._out:close()",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "self._private = nil",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function ReporterBase:files()\r\n   return self._files\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "function ReporterBase:stats(filename)\r\n   return self._data[filename]\r\nend",
    "type": "function"
  }, {
    "id": 136,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 137,
    "text": "function ReporterBase:on_start()\r\nend",
    "type": "function"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function ReporterBase:on_new_file(filename)\r\nend",
    "type": "function"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function ReporterBase:on_file_error(filename, error_type, message)\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function ReporterBase:on_empty_line(filename, lineno, line)\r\nend",
    "type": "function"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function ReporterBase:on_mis_line(filename, lineno, line)\r\nend",
    "type": "function"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function ReporterBase:on_hit_line(filename, lineno, line, hits)\r\nend",
    "type": "function"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function ReporterBase:on_end_file(filename, hits, miss)\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function ReporterBase:on_end()\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function ReporterBase:_run_file(filename)\r\n   local file, open_err = io.open(filename)\r\n\r\n   if not file then\r\n      self:on_file_error(filename, \"open\", util.unprefix(open_err, filename .. \": \"))\r\n      return\r\n   end\r\n\r\n   local active_lines\r\n\r\n   if cluacov_ok then\r\n      local src, read_err = file:read(\"*a\")\r\n\r\n      if not src then\r\n         self:on_file_error(filename, \"read\", read_err)\r\n         return\r\n      end\r\n\r\n      local func, load_err = util.load_string(src, nil, \"@file\")\r\n\r\n      if not func then\r\n         self:on_file_error(filename, \"load\", \"line \" .. util.unprefix(load_err, \"file:\"))\r\n         return\r\n      end\r\n\r\n      active_lines = deepactivelines.get(func)\r\n      file:seek(\"set\")\r\n   end\r\n\r\n   self:on_new_file(filename)\r\n   local file_hits, file_miss = 0, 0\r\n   local filedata = self:stats(filename)\r\n\r\n   local line_nr = 1\r\n   local scanner = LineScanner:new()\r\n\r\n   while true do\r\n      local line = file:read(\"*l\")\r\n      if not line then break end\r\n\r\n      local always_excluded, excluded_when_not_hit = scanner:consume(line)\r\n      local hits = filedata[line_nr] or 0\r\n      local included = not always_excluded and (not excluded_when_not_hit or hits ~= 0)\r\n\r\n      if cluacov_ok then\r\n         included = included and active_lines[line_nr]\r\n      end\r\n\r\n      if included then\r\n         if hits == 0 then\r\n            self:on_mis_line(filename, line_nr, line)\r\n            file_miss = file_miss + 1\r\n         else\r\n            self:on_hit_line(filename, line_nr, line, hits)\r\n            file_hits = file_hits + 1\r\n         end\r\n      else\r\n         self:on_empty_line(filename, line_nr, line)\r\n      end\r\n\r\n      line_nr = line_nr + 1\r\n   end\r\n\r\n   file:close()\r\n   self:on_end_file(filename, file_hits, file_miss)\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "local file, open_err = io.open(filename)",
    "type": "statement:localassign"
  }, {
    "id": 155,
    "text": "if not file then\r\n      self:on_file_error(filename, \"open\", util.unprefix(open_err, filename .. \": \"))\r\n      return\r\n   end",
    "type": "statement:if"
  }, {
    "id": 156,
    "text": "self:on_file_error(filename, \"open\", util.unprefix(open_err, filename .. \": \"))",
    "type": "statement:functioncall"
  }, {
    "id": 157,
    "text": "local active_lines",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "if cluacov_ok then\r\n      local src, read_err = file:read(\"*a\")\r\n\r\n      if not src then\r\n         self:on_file_error(filename, \"read\", read_err)\r\n         return\r\n      end\r\n\r\n      local func, load_err = util.load_string(src, nil, \"@file\")\r\n\r\n      if not func then\r\n         self:on_file_error(filename, \"load\", \"line \" .. util.unprefix(load_err, \"file:\"))\r\n         return\r\n      end\r\n\r\n      active_lines = deepactivelines.get(func)\r\n      file:seek(\"set\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "local src, read_err = file:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "if not src then\r\n         self:on_file_error(filename, \"read\", read_err)\r\n         return\r\n      end",
    "type": "statement:if"
  }, {
    "id": 161,
    "text": "self:on_file_error(filename, \"read\", read_err)",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "local func, load_err = util.load_string(src, nil, \"@file\")",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "if not func then\r\n         self:on_file_error(filename, \"load\", \"line \" .. util.unprefix(load_err, \"file:\"))\r\n         return\r\n      end",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "self:on_file_error(filename, \"load\", \"line \" .. util.unprefix(load_err, \"file:\"))",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "active_lines = deepactivelines.get(func)",
    "type": "statement:assign"
  }, {
    "id": 166,
    "text": "file:seek(\"set\")",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "self:on_new_file(filename)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "local file_hits, file_miss = 0, 0",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "local filedata = self:stats(filename)",
    "type": "statement:localassign"
  }, {
    "id": 170,
    "text": "local line_nr = 1",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "local scanner = LineScanner:new()",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "while true do\r\n      local line = file:read(\"*l\")\r\n      if not line then break end\r\n\r\n      local always_excluded, excluded_when_not_hit = scanner:consume(line)\r\n      local hits = filedata[line_nr] or 0\r\n      local included = not always_excluded and (not excluded_when_not_hit or hits ~= 0)\r\n\r\n      if cluacov_ok then\r\n         included = included and active_lines[line_nr]\r\n      end\r\n\r\n      if included then\r\n         if hits == 0 then\r\n            self:on_mis_line(filename, line_nr, line)\r\n            file_miss = file_miss + 1\r\n         else\r\n            self:on_hit_line(filename, line_nr, line, hits)\r\n            file_hits = file_hits + 1\r\n         end\r\n      else\r\n         self:on_empty_line(filename, line_nr, line)\r\n      end\r\n\r\n      line_nr = line_nr + 1\r\n   end",
    "type": "statement:while"
  }, {
    "id": 173,
    "text": "local line = file:read(\"*l\")",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "if not line then break end",
    "type": "statement:if"
  }, {
    "id": 175,
    "text": "local always_excluded, excluded_when_not_hit = scanner:consume(line)",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "local hits = filedata[line_nr] or 0",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "local included = not always_excluded and (not excluded_when_not_hit or hits ~= 0)",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "if cluacov_ok then\r\n         included = included and active_lines[line_nr]\r\n      end",
    "type": "statement:if"
  }, {
    "id": 179,
    "text": "included = included and active_lines[line_nr]",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "if included then\r\n         if hits == 0 then\r\n            self:on_mis_line(filename, line_nr, line)\r\n            file_miss = file_miss + 1\r\n         else\r\n            self:on_hit_line(filename, line_nr, line, hits)\r\n            file_hits = file_hits + 1\r\n         end\r\n      else\r\n         self:on_empty_line(filename, line_nr, line)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 181,
    "text": "if hits == 0 then\r\n            self:on_mis_line(filename, line_nr, line)\r\n            file_miss = file_miss + 1\r\n         else\r\n            self:on_hit_line(filename, line_nr, line, hits)\r\n            file_hits = file_hits + 1\r\n         end",
    "type": "statement:if"
  }, {
    "id": 182,
    "text": "self:on_mis_line(filename, line_nr, line)",
    "type": "statement:functioncall"
  }, {
    "id": 183,
    "text": "file_miss = file_miss + 1",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "self:on_hit_line(filename, line_nr, line, hits)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "file_hits = file_hits + 1",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "self:on_empty_line(filename, line_nr, line)",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "line_nr = line_nr + 1",
    "type": "statement:assign"
  }, {
    "id": 188,
    "text": "file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "self:on_end_file(filename, file_hits, file_miss)",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "function ReporterBase:run()\r\n   self:on_start()\r\n\r\n   for _, filename in ipairs(self:files()) do\r\n      self:_run_file(filename)\r\n   end\r\n\r\n   self:on_end()\r\nend",
    "type": "function"
  }, {
    "id": 192,
    "text": "self:on_start()",
    "type": "statement:functioncall"
  }, {
    "id": 193,
    "text": "for _, filename in ipairs(self:files()) do\r\n      self:_run_file(filename)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 194,
    "text": "self:_run_file(filename)",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "self:on_end()",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 197,
    "text": "function DefaultReporter:on_start()\r\n   local most_hits = self:max_hits()\r\n   local most_hits_length = #(\"%d\"):format(most_hits)\r\n\r\n   self._summary      = {}\r\n   self._empty_format = (\" \"):rep(most_hits_length + 1)\r\n   self._zero_format  = (\"*\"):rep(most_hits_length)..\"0\"\r\n   self._count_format = (\"%% %dd\"):format(most_hits_length+1)\r\n   self._printed_first_header = false\r\nend",
    "type": "function"
  }, {
    "id": 198,
    "text": "local most_hits = self:max_hits()",
    "type": "statement:localassign"
  }, {
    "id": 199,
    "text": "local most_hits_length = #(\"%d\"):format(most_hits)",
    "type": "statement:localassign"
  }, {
    "id": 200,
    "text": "self._summary      = {}",
    "type": "statement:assign"
  }, {
    "id": 201,
    "text": "self._empty_format = (\" \"):rep(most_hits_length + 1)",
    "type": "statement:assign"
  }, {
    "id": 202,
    "text": "self._zero_format  = (\"*\"):rep(most_hits_length)..\"0\"",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "self._count_format = (\"%% %dd\"):format(most_hits_length+1)",
    "type": "statement:assign"
  }, {
    "id": 204,
    "text": "self._printed_first_header = false",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 206,
    "text": "function DefaultReporter:on_new_file(filename)\r\n   self:write((\"=\"):rep(78), \"\\n\")\r\n   self:write(filename, \"\\n\")\r\n   self:write((\"=\"):rep(78), \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 207,
    "text": "self:write((\"=\"):rep(78), \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "self:write(filename, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 209,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 210,
    "text": "function DefaultReporter:on_file_error(filename, error_type, message) --luacheck: no self\r\n   io.stderr:write((\"Couldn't %s %s: %s\\n\"):format(error_type, filename, message))\r\nend",
    "type": "function"
  }, {
    "id": 211,
    "text": "io.stderr:write((\"Couldn't %s %s: %s\\n\"):format(error_type, filename, message))",
    "type": "statement:functioncall"
  }, {
    "id": 212,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 213,
    "text": "function DefaultReporter:on_empty_line(_, _, line)\r\n   if line == \"\" then\r\n      self:write(\"\\n\")\r\n   else\r\n      self:write(self._empty_format, \" \", line, \"\\n\")\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 214,
    "text": "if line == \"\" then\r\n      self:write(\"\\n\")\r\n   else\r\n      self:write(self._empty_format, \" \", line, \"\\n\")\r\n   end",
    "type": "statement:if"
  }, {
    "id": 215,
    "text": "self:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "self:write(self._empty_format, \" \", line, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 218,
    "text": "function DefaultReporter:on_mis_line(_, _, line)\r\n   self:write(self._zero_format, \" \", line, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 219,
    "text": "self:write(self._zero_format, \" \", line, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 221,
    "text": "function DefaultReporter:on_hit_line(_, _, line, hits)\r\n   self:write(self._count_format:format(hits), \" \", line, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 222,
    "text": "self:write(self._count_format:format(hits), \" \", line, \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 223,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 224,
    "text": "function DefaultReporter:on_end_file(filename, hits, miss)\r\n   self._summary[filename] = { hits = hits, miss = miss }\r\n   self:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 225,
    "text": "self._summary[filename] = { hits = hits, miss = miss }",
    "type": "statement:assign"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "local function coverage_to_string(hits, missed)\r\n   local total = hits + missed\r\n\r\n   if total == 0 then\r\n      total = 1\r\n   end\r\n\r\n   return (\"%.2f%%\"):format(hits/total*100.0)\r\nend",
    "type": "function"
  }, {
    "id": 228,
    "text": "local total = hits + missed",
    "type": "statement:localassign"
  }, {
    "id": 229,
    "text": "if total == 0 then\r\n      total = 1\r\n   end",
    "type": "statement:if"
  }, {
    "id": 230,
    "text": "total = 1",
    "type": "statement:assign"
  }, {
    "id": 231,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 232,
    "text": "function DefaultReporter:on_end()\r\n   self:write((\"=\"):rep(78), \"\\n\")\r\n   self:write(\"Summary\\n\")\r\n   self:write((\"=\"):rep(78), \"\\n\")\r\n   self:write(\"\\n\")\r\n\r\n   local lines = {{\"File\", \"Hits\", \"Missed\", \"Coverage\"}}\r\n   local total_hits, total_missed = 0, 0\r\n\r\n   for _, filename in ipairs(self:files()) do\r\n      local summary = self._summary[filename]\r\n\r\n      if summary then\r\n         local hits, missed = summary.hits, summary.miss\r\n\r\n         table.insert(lines, {\r\n            filename,\r\n            tostring(summary.hits),\r\n            tostring(summary.miss),\r\n            coverage_to_string(hits, missed)\r\n         })\r\n\r\n         total_hits = total_hits + hits\r\n         total_missed = total_missed + missed\r\n      end\r\n   end\r\n\r\n   table.insert(lines, {\r\n      \"Total\",\r\n      tostring(total_hits),\r\n      tostring(total_missed),\r\n      coverage_to_string(total_hits, total_missed)\r\n   })\r\n\r\n   local max_column_lengths = {}\r\n\r\n   for _, line in ipairs(lines) do\r\n      for column_nr, column in ipairs(line) do\r\n         max_column_lengths[column_nr] = math.max(max_column_lengths[column_nr] or -1, #column)\r\n      end\r\n   end\r\n\r\n   local table_width = #max_column_lengths - 1\r\n\r\n   for _, column_length in ipairs(max_column_lengths) do\r\n      table_width = table_width + column_length\r\n   end\r\n\r\n\r\n   for line_nr, line in ipairs(lines) do\r\n      if line_nr == #lines or line_nr == 2 then\r\n         self:write((\"-\"):rep(table_width), \"\\n\")\r\n      end\r\n\r\n      for column_nr, column in ipairs(line) do\r\n         self:write(column)\r\n\r\n         if column_nr == #line then\r\n            self:write(\"\\n\")\r\n         else\r\n            self:write((\" \"):rep(max_column_lengths[column_nr] - #column + 1))\r\n         end\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 233,
    "text": "self:write(\"Summary\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "local lines = {{\"File\", \"Hits\", \"Missed\", \"Coverage\"}}",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "local total_hits, total_missed = 0, 0",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "for _, filename in ipairs(self:files()) do\r\n      local summary = self._summary[filename]\r\n\r\n      if summary then\r\n         local hits, missed = summary.hits, summary.miss\r\n\r\n         table.insert(lines, {\r\n            filename,\r\n            tostring(summary.hits),\r\n            tostring(summary.miss),\r\n            coverage_to_string(hits, missed)\r\n         })\r\n\r\n         total_hits = total_hits + hits\r\n         total_missed = total_missed + missed\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 237,
    "text": "local summary = self._summary[filename]",
    "type": "statement:localassign"
  }, {
    "id": 238,
    "text": "if summary then\r\n         local hits, missed = summary.hits, summary.miss\r\n\r\n         table.insert(lines, {\r\n            filename,\r\n            tostring(summary.hits),\r\n            tostring(summary.miss),\r\n            coverage_to_string(hits, missed)\r\n         })\r\n\r\n         total_hits = total_hits + hits\r\n         total_missed = total_missed + missed\r\n      end",
    "type": "statement:if"
  }, {
    "id": 239,
    "text": "local hits, missed = summary.hits, summary.miss",
    "type": "statement:localassign"
  }, {
    "id": 240,
    "text": "table.insert(lines, {\r\n            filename,\r\n            tostring(summary.hits),\r\n            tostring(summary.miss),\r\n            coverage_to_string(hits, missed)\r\n         })",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "total_hits = total_hits + hits",
    "type": "statement:assign"
  }, {
    "id": 242,
    "text": "total_missed = total_missed + missed",
    "type": "statement:assign"
  }, {
    "id": 243,
    "text": "table.insert(lines, {\r\n      \"Total\",\r\n      tostring(total_hits),\r\n      tostring(total_missed),\r\n      coverage_to_string(total_hits, total_missed)\r\n   })",
    "type": "statement:functioncall"
  }, {
    "id": 244,
    "text": "local max_column_lengths = {}",
    "type": "statement:localassign"
  }, {
    "id": 245,
    "text": "for _, line in ipairs(lines) do\r\n      for column_nr, column in ipairs(line) do\r\n         max_column_lengths[column_nr] = math.max(max_column_lengths[column_nr] or -1, #column)\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 246,
    "text": "for column_nr, column in ipairs(line) do\r\n         max_column_lengths[column_nr] = math.max(max_column_lengths[column_nr] or -1, #column)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 247,
    "text": "max_column_lengths[column_nr] = math.max(max_column_lengths[column_nr] or -1, #column)",
    "type": "statement:assign"
  }, {
    "id": 248,
    "text": "local table_width = #max_column_lengths - 1",
    "type": "statement:localassign"
  }, {
    "id": 249,
    "text": "for _, column_length in ipairs(max_column_lengths) do\r\n      table_width = table_width + column_length\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 250,
    "text": "table_width = table_width + column_length",
    "type": "statement:assign"
  }, {
    "id": 251,
    "text": "for line_nr, line in ipairs(lines) do\r\n      if line_nr == #lines or line_nr == 2 then\r\n         self:write((\"-\"):rep(table_width), \"\\n\")\r\n      end\r\n\r\n      for column_nr, column in ipairs(line) do\r\n         self:write(column)\r\n\r\n         if column_nr == #line then\r\n            self:write(\"\\n\")\r\n         else\r\n            self:write((\" \"):rep(max_column_lengths[column_nr] - #column + 1))\r\n         end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 252,
    "text": "if line_nr == #lines or line_nr == 2 then\r\n         self:write((\"-\"):rep(table_width), \"\\n\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 253,
    "text": "self:write((\"-\"):rep(table_width), \"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 254,
    "text": "for column_nr, column in ipairs(line) do\r\n         self:write(column)\r\n\r\n         if column_nr == #line then\r\n            self:write(\"\\n\")\r\n         else\r\n            self:write((\" \"):rep(max_column_lengths[column_nr] - #column + 1))\r\n         end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 255,
    "text": "self:write(column)",
    "type": "statement:functioncall"
  }, {
    "id": 256,
    "text": "if column_nr == #line then\r\n            self:write(\"\\n\")\r\n         else\r\n            self:write((\" \"):rep(max_column_lengths[column_nr] - #column + 1))\r\n         end",
    "type": "statement:if"
  }, {
    "id": 257,
    "text": "self:write((\" \"):rep(max_column_lengths[column_nr] - #column + 1))",
    "type": "statement:functioncall"
  }, {
    "id": 258,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 259,
    "text": "function reporter.report(reporter_class)\r\n   local configuration = luacov.load_config()\r\n\r\n   reporter_class = reporter_class or DefaultReporter\r\n\r\n   local rep, err = reporter_class:new(configuration)\r\n\r\n   if not rep then\r\n      print(err)\r\n      print(\"Run your Lua program with -lluacov and then rerun luacov.\")\r\n      os.exit(1)\r\n   end\r\n\r\n   rep:run()\r\n\r\n   rep:close()\r\n\r\n   if configuration.deletestats then\r\n      os.remove(configuration.statsfile)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 260,
    "text": "local configuration = luacov.load_config()",
    "type": "statement:localassign"
  }, {
    "id": 261,
    "text": "reporter_class = reporter_class or DefaultReporter",
    "type": "statement:assign"
  }, {
    "id": 262,
    "text": "local rep, err = reporter_class:new(configuration)",
    "type": "statement:localassign"
  }, {
    "id": 263,
    "text": "if not rep then\r\n      print(err)\r\n      print(\"Run your Lua program with -lluacov and then rerun luacov.\")\r\n      os.exit(1)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 264,
    "text": "print(err)",
    "type": "statement:functioncall"
  }, {
    "id": 265,
    "text": "print(\"Run your Lua program with -lluacov and then rerun luacov.\")",
    "type": "statement:functioncall"
  }, {
    "id": 266,
    "text": "os.exit(1)",
    "type": "statement:functioncall"
  }, {
    "id": 267,
    "text": "rep:run()",
    "type": "statement:functioncall"
  }, {
    "id": 268,
    "text": "rep:close()",
    "type": "statement:functioncall"
  }, {
    "id": 269,
    "text": "if configuration.deletestats then\r\n      os.remove(configuration.statsfile)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 270,
    "text": "os.remove(configuration.statsfile)",
    "type": "statement:functioncall"
  }, {
    "id": 271,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 272,
    "text": "",
    "type": "function container"
  }, {
    "id": 273,
    "text": "real_name",
    "type": "global function"
  }, {
    "id": 274,
    "text": "load_config",
    "type": "global function"
  }, {
    "id": 275,
    "text": "file_included",
    "type": "global function"
  }, {
    "id": 276,
    "text": "unprefix",
    "type": "global function"
  }, {
    "id": 277,
    "text": "update_stats",
    "type": "global function"
  }, {
    "id": 278,
    "text": "load",
    "type": "global function"
  }, {
    "id": 279,
    "text": "load_string",
    "type": "global function"
  }, {
    "id": 280,
    "text": "get",
    "type": "global function"
  }, {
    "id": 281,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 282,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 283,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 284,
    "text": "max",
    "type": "global function"
  }, {
    "id": 285,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 286,
    "text": "print",
    "type": "global function"
  }, {
    "id": 287,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 288,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 289,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 290,
    "text": "open",
    "type": "global function"
  }, {
    "id": 291,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 292,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 293,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 294,
    "text": "require",
    "type": "global function"
  }, {
    "id": 295,
    "text": "",
    "type": "variable container"
  }, {
    "id": 296,
    "text": "",
    "type": "require container"
  }, {
    "id": 297,
    "text": "",
    "type": "local variable"
  }, {
    "id": 298,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 299,
    "text": "",
    "type": "local variable"
  }, {
    "id": 300,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 301,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 302,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 303,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 304,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 305,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 306,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 307,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 308,
    "text": "",
    "type": "local variable"
  }, {
    "id": 309,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 310,
    "text": "",
    "type": "string"
  }, {
    "id": 311,
    "text": "",
    "type": "string"
  }, {
    "id": 312,
    "text": "",
    "type": "string"
  }, {
    "id": 313,
    "text": "",
    "type": "string"
  }, {
    "id": 314,
    "text": "",
    "type": "string"
  }, {
    "id": 315,
    "text": "",
    "type": "string"
  }, {
    "id": 316,
    "text": "",
    "type": "string"
  }, {
    "id": 317,
    "text": "",
    "type": "string"
  }, {
    "id": 318,
    "text": "",
    "type": "string"
  }, {
    "id": 319,
    "text": "",
    "type": "string"
  }, {
    "id": 320,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 321,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 322,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 323,
    "text": "",
    "type": "string"
  }, {
    "id": 324,
    "text": "",
    "type": "local variable"
  }, {
    "id": 325,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 326,
    "text": "",
    "type": "string"
  }, {
    "id": 327,
    "text": "",
    "type": "string"
  }, {
    "id": 328,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 329,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 330,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 331,
    "text": "",
    "type": "string"
  }, {
    "id": 332,
    "text": "",
    "type": "string"
  }, {
    "id": 333,
    "text": "",
    "type": "string"
  }, {
    "id": 334,
    "text": "",
    "type": "string"
  }, {
    "id": 335,
    "text": "",
    "type": "string"
  }, {
    "id": 336,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 337,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 338,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 339,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 340,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 341,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 342,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 343,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 344,
    "text": "",
    "type": "string"
  }, {
    "id": 345,
    "text": "",
    "type": "string"
  }, {
    "id": 346,
    "text": "",
    "type": "string"
  }, {
    "id": 347,
    "text": "",
    "type": "string"
  }, {
    "id": 348,
    "text": "",
    "type": "string"
  }, {
    "id": 349,
    "text": "",
    "type": "string"
  }, {
    "id": 350,
    "text": "",
    "type": "local variable"
  }, {
    "id": 351,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 352,
    "text": "",
    "type": "local variable"
  }, {
    "id": 353,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 354,
    "text": "",
    "type": "local variable"
  }, {
    "id": 355,
    "text": "",
    "type": "n/a"
  }, {
    "id": 356,
    "text": "",
    "type": "global variable"
  }, {
    "id": 357,
    "text": "",
    "type": "n/a"
  }, {
    "id": 358,
    "text": "",
    "type": "global variable"
  }, {
    "id": 359,
    "text": "",
    "type": "n/a"
  }, {
    "id": 360,
    "text": "",
    "type": "global variable"
  }, {
    "id": 361,
    "text": "",
    "type": "n/a"
  }, {
    "id": 362,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 363,
    "text": "runner)",
    "type": "module"
  }, {
    "id": 364,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 365,
    "text": "util)",
    "type": "module"
  }, {
    "id": 366,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 367,
    "text": "stats)",
    "type": "module"
  }, {
    "id": 368,
    "text": "",
    "type": "interface container"
  }, {
    "id": 369,
    "text": "",
    "type": "interface"
  }, {
    "id": 370,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 371,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 372,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 373,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 374,
    "text": "",
    "type": "require local variable"
  } ]
}