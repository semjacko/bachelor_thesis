{
  "_filename": "runner.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacov/src/luacov/runner.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 5
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 19,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 27,
    "label": "has",
    "to": 34
  }, {
    "from": 27,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 36,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 5
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 43,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 5
  }, {
    "from": 50,
    "label": "has",
    "to": 5
  }, {
    "from": 50,
    "label": "has",
    "to": 5
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 5
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 58,
    "label": "has",
    "to": 5
  }, {
    "from": 58,
    "label": "has",
    "to": 5
  }, {
    "from": 58,
    "label": "has",
    "to": 5
  }, {
    "from": 58,
    "label": "has",
    "to": 5
  }, {
    "from": 58,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 5
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 68,
    "label": "has",
    "to": 76
  }, {
    "from": 68,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 77,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 80
  }, {
    "from": 83,
    "label": "has",
    "to": 81
  }, {
    "from": 83,
    "label": "has",
    "to": 82
  }, {
    "from": 68,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 91,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 86,
    "label": "has",
    "to": 5
  }, {
    "from": 86,
    "label": "has",
    "to": 5
  }, {
    "from": 86,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 5
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 98,
    "label": "has",
    "to": 5
  }, {
    "from": 98,
    "label": "has",
    "to": 5
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 102,
    "label": "has",
    "to": 104
  }, {
    "from": 102,
    "label": "has",
    "to": 105
  }, {
    "from": 102,
    "label": "has",
    "to": 106
  }, {
    "from": 102,
    "label": "has",
    "to": 107
  }, {
    "from": 102,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 102,
    "label": "has",
    "to": 5
  }, {
    "from": 102,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 111,
    "label": "has",
    "to": 117
  }, {
    "from": 111,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 111,
    "label": "has",
    "to": 123
  }, {
    "from": 111,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 111,
    "label": "has",
    "to": 126
  }, {
    "from": 111,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 128,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 128,
    "label": "has",
    "to": 5
  }, {
    "from": 128,
    "label": "has",
    "to": 136
  }, {
    "from": 128,
    "label": "has",
    "to": 137
  }, {
    "from": 128,
    "label": "has",
    "to": 5
  }, {
    "from": 128,
    "label": "has",
    "to": 138
  }, {
    "from": 128,
    "label": "has",
    "to": 139
  }, {
    "from": 128,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 143,
    "label": "has",
    "to": 146
  }, {
    "from": 143,
    "label": "has",
    "to": 147
  }, {
    "from": 141,
    "label": "has",
    "to": 5
  }, {
    "from": 141,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 159
  }, {
    "from": 156,
    "label": "has",
    "to": 160
  }, {
    "from": 160,
    "label": "has",
    "to": 5
  }, {
    "from": 156,
    "label": "has",
    "to": 161
  }, {
    "from": 156,
    "label": "has",
    "to": 162
  }, {
    "from": 155,
    "label": "has",
    "to": 5
  }, {
    "from": 155,
    "label": "has",
    "to": 163
  }, {
    "from": 165,
    "label": "has",
    "to": 5
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 165,
    "label": "has",
    "to": 5
  }, {
    "from": 165,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 172
  }, {
    "from": 171,
    "label": "has",
    "to": 173
  }, {
    "from": 169,
    "label": "has",
    "to": 167
  }, {
    "from": 169,
    "label": "has",
    "to": 174
  }, {
    "from": 174,
    "label": "has",
    "to": 175
  }, {
    "from": 174,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 176,
    "label": "has",
    "to": 5
  }, {
    "from": 174,
    "label": "has",
    "to": 179
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 179,
    "label": "has",
    "to": 5
  }, {
    "from": 174,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 177
  }, {
    "from": 182,
    "label": "has",
    "to": 178
  }, {
    "from": 182,
    "label": "has",
    "to": 5
  }, {
    "from": 182,
    "label": "has",
    "to": 5
  }, {
    "from": 169,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 169,
    "label": "has",
    "to": 185
  }, {
    "from": 169,
    "label": "has",
    "to": 153
  }, {
    "from": 169,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 172
  }, {
    "from": 187,
    "label": "has",
    "to": 173
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 177
  }, {
    "from": 189,
    "label": "has",
    "to": 178
  }, {
    "from": 189,
    "label": "has",
    "to": 5
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 180
  }, {
    "from": 180,
    "label": "has",
    "to": 181
  }, {
    "from": 191,
    "label": "has",
    "to": 5
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 193,
    "label": "has",
    "to": 177
  }, {
    "from": 193,
    "label": "has",
    "to": 178
  }, {
    "from": 193,
    "label": "has",
    "to": 5
  }, {
    "from": 193,
    "label": "has",
    "to": 5
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 195,
    "label": "has",
    "to": 172
  }, {
    "from": 195,
    "label": "has",
    "to": 196
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 197,
    "label": "has",
    "to": 199
  }, {
    "from": 197,
    "label": "has",
    "to": 200
  }, {
    "from": 197,
    "label": "has",
    "to": 5
  }, {
    "from": 197,
    "label": "has",
    "to": 201
  }, {
    "from": 202,
    "label": "has",
    "to": 203
  }, {
    "from": 202,
    "label": "has",
    "to": 5
  }, {
    "from": 202,
    "label": "has",
    "to": 204
  }, {
    "from": 202,
    "label": "has",
    "to": 205
  }, {
    "from": 205,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 202,
    "label": "has",
    "to": 5
  }, {
    "from": 202,
    "label": "has",
    "to": 5
  }, {
    "from": 202,
    "label": "has",
    "to": 209
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 211,
    "label": "has",
    "to": 212
  }, {
    "from": 211,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 211,
    "label": "has",
    "to": 215
  }, {
    "from": 211,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 211,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 211,
    "label": "has",
    "to": 220
  }, {
    "from": 211,
    "label": "has",
    "to": 221
  }, {
    "from": 211,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 211,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 210,
    "label": "has",
    "to": 5
  }, {
    "from": 210,
    "label": "has",
    "to": 5
  }, {
    "from": 210,
    "label": "has",
    "to": 5
  }, {
    "from": 210,
    "label": "has",
    "to": 5
  }, {
    "from": 210,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 5
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 229,
    "label": "has",
    "to": 231
  }, {
    "from": 229,
    "label": "has",
    "to": 5
  }, {
    "from": 229,
    "label": "has",
    "to": 232
  }, {
    "from": 233,
    "label": "has",
    "to": 234
  }, {
    "from": 233,
    "label": "has",
    "to": 235
  }, {
    "from": 235,
    "label": "has",
    "to": 236
  }, {
    "from": 233,
    "label": "has",
    "to": 237
  }, {
    "from": 233,
    "label": "has",
    "to": 238
  }, {
    "from": 233,
    "label": "has",
    "to": 231
  }, {
    "from": 233,
    "label": "has",
    "to": 239
  }, {
    "from": 233,
    "label": "has",
    "to": 5
  }, {
    "from": 233,
    "label": "has",
    "to": 240
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 241,
    "label": "has",
    "to": 5
  }, {
    "from": 241,
    "label": "has",
    "to": 5
  }, {
    "from": 241,
    "label": "has",
    "to": 243
  }, {
    "from": 244,
    "label": "has",
    "to": 5
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 246,
    "label": "has",
    "to": 5
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 248,
    "label": "has",
    "to": 5
  }, {
    "from": 248,
    "label": "has",
    "to": 249
  }, {
    "from": 250,
    "label": "has",
    "to": 5
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 252,
    "label": "has",
    "to": 5
  }, {
    "from": 253,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 253,
    "label": "has",
    "to": 5
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 255,
    "label": "has",
    "to": 5
  }, {
    "from": 255,
    "label": "has",
    "to": 256
  }, {
    "from": 257,
    "label": "has",
    "to": 258
  }, {
    "from": 6,
    "label": "calls",
    "to": 4
  }, {
    "from": 202,
    "label": "calls",
    "to": 202
  }, {
    "from": 210,
    "label": "calls",
    "to": 202
  }, {
    "from": 197,
    "label": "calls",
    "to": 268
  }, {
    "from": 169,
    "label": "calls",
    "to": 269
  }, {
    "from": 27,
    "label": "calls",
    "to": 19
  }, {
    "from": 19,
    "label": "calls",
    "to": 271
  }, {
    "from": 19,
    "label": "calls",
    "to": 271
  }, {
    "from": 58,
    "label": "calls",
    "to": 271
  }, {
    "from": 210,
    "label": "calls",
    "to": 210
  }, {
    "from": 210,
    "label": "calls",
    "to": 210
  }, {
    "from": 229,
    "label": "calls",
    "to": 210
  }, {
    "from": 233,
    "label": "calls",
    "to": 210
  }, {
    "from": 43,
    "label": "calls",
    "to": 27
  }, {
    "from": 36,
    "label": "calls",
    "to": 141
  }, {
    "from": 169,
    "label": "calls",
    "to": 141
  }, {
    "from": 27,
    "label": "calls",
    "to": 262
  }, {
    "from": 210,
    "label": "calls",
    "to": 263
  }, {
    "from": 155,
    "label": "calls",
    "to": 193
  }, {
    "from": 169,
    "label": "calls",
    "to": 43
  }, {
    "from": 195,
    "label": "calls",
    "to": 43
  }, {
    "from": 259,
    "label": "calls",
    "to": 274
  }, {
    "from": 210,
    "label": "calls",
    "to": 274
  }, {
    "from": 244,
    "label": "calls",
    "to": 274
  }, {
    "from": 246,
    "label": "calls",
    "to": 274
  }, {
    "from": 248,
    "label": "calls",
    "to": 274
  }, {
    "from": 250,
    "label": "calls",
    "to": 274
  }, {
    "from": 141,
    "label": "calls",
    "to": 111
  }, {
    "from": 141,
    "label": "calls",
    "to": 111
  }, {
    "from": 141,
    "label": "calls",
    "to": 111
  }, {
    "from": 111,
    "label": "calls",
    "to": 102
  }, {
    "from": 15,
    "label": "calls",
    "to": 283
  }, {
    "from": 15,
    "label": "calls",
    "to": 283
  }, {
    "from": 141,
    "label": "calls",
    "to": 128
  }, {
    "from": 141,
    "label": "calls",
    "to": 128
  }, {
    "from": 10,
    "label": "calls",
    "to": 273
  }, {
    "from": 68,
    "label": "calls",
    "to": 273
  }, {
    "from": 86,
    "label": "calls",
    "to": 273
  }, {
    "from": 111,
    "label": "calls",
    "to": 273
  }, {
    "from": 111,
    "label": "calls",
    "to": 273
  }, {
    "from": 165,
    "label": "calls",
    "to": 275
  }, {
    "from": 169,
    "label": "calls",
    "to": 276
  }, {
    "from": 169,
    "label": "calls",
    "to": 276
  }, {
    "from": 210,
    "label": "calls",
    "to": 197
  }, {
    "from": 19,
    "label": "calls",
    "to": 277
  }, {
    "from": 27,
    "label": "calls",
    "to": 277
  }, {
    "from": 68,
    "label": "calls",
    "to": 277
  }, {
    "from": 111,
    "label": "calls",
    "to": 277
  }, {
    "from": 111,
    "label": "calls",
    "to": 277
  }, {
    "from": 128,
    "label": "calls",
    "to": 277
  }, {
    "from": 202,
    "label": "calls",
    "to": 277
  }, {
    "from": 141,
    "label": "calls",
    "to": 278
  }, {
    "from": 191,
    "label": "calls",
    "to": 278
  }, {
    "from": 210,
    "label": "calls",
    "to": 278
  }, {
    "from": 210,
    "label": "calls",
    "to": 278
  }, {
    "from": 210,
    "label": "calls",
    "to": 278
  }, {
    "from": 210,
    "label": "calls",
    "to": 278
  }, {
    "from": 210,
    "label": "calls",
    "to": 278
  }, {
    "from": 259,
    "label": "calls",
    "to": 287
  }, {
    "from": 259,
    "label": "calls",
    "to": 287
  }, {
    "from": 259,
    "label": "calls",
    "to": 287
  }, {
    "from": 259,
    "label": "calls",
    "to": 287
  }, {
    "from": 259,
    "label": "calls",
    "to": 287
  }, {
    "from": 36,
    "label": "calls",
    "to": 287
  }, {
    "from": 244,
    "label": "calls",
    "to": 241
  }, {
    "from": 246,
    "label": "calls",
    "to": 241
  }, {
    "from": 248,
    "label": "calls",
    "to": 241
  }, {
    "from": 250,
    "label": "calls",
    "to": 241
  }, {
    "from": 128,
    "label": "calls",
    "to": 288
  }, {
    "from": 169,
    "label": "calls",
    "to": 288
  }, {
    "from": 15,
    "label": "calls",
    "to": 10
  }, {
    "from": 15,
    "label": "calls",
    "to": 10
  }, {
    "from": 102,
    "label": "calls",
    "to": 279
  }, {
    "from": 68,
    "label": "calls",
    "to": 280
  }, {
    "from": 169,
    "label": "calls",
    "to": 6
  }, {
    "from": 259,
    "label": "calls",
    "to": 169
  }, {
    "from": 169,
    "label": "calls",
    "to": 191
  }, {
    "from": 27,
    "label": "calls",
    "to": 267
  }, {
    "from": 197,
    "label": "calls",
    "to": 264
  }, {
    "from": 155,
    "label": "calls",
    "to": 260
  }, {
    "from": 155,
    "label": "calls",
    "to": 260
  }, {
    "from": 165,
    "label": "calls",
    "to": 260
  }, {
    "from": 169,
    "label": "calls",
    "to": 260
  }, {
    "from": 169,
    "label": "calls",
    "to": 260
  }, {
    "from": 169,
    "label": "calls",
    "to": 260
  }, {
    "from": 6,
    "label": "calls",
    "to": 265
  }, {
    "from": 155,
    "label": "calls",
    "to": 266
  }, {
    "from": 155,
    "label": "calls",
    "to": 266
  }, {
    "from": 165,
    "label": "calls",
    "to": 155
  }, {
    "from": 169,
    "label": "calls",
    "to": 155
  }, {
    "from": 58,
    "label": "calls",
    "to": 53
  }, {
    "from": 58,
    "label": "calls",
    "to": 53
  }, {
    "from": 128,
    "label": "calls",
    "to": 261
  }, {
    "from": 111,
    "label": "calls",
    "to": 98
  }, {
    "from": 53,
    "label": "calls",
    "to": 282
  }, {
    "from": 68,
    "label": "calls",
    "to": 282
  }, {
    "from": 68,
    "label": "calls",
    "to": 282
  }, {
    "from": 68,
    "label": "calls",
    "to": 282
  }, {
    "from": 68,
    "label": "calls",
    "to": 282
  }, {
    "from": 68,
    "label": "calls",
    "to": 282
  }, {
    "from": 68,
    "label": "calls",
    "to": 282
  }, {
    "from": 68,
    "label": "calls",
    "to": 282
  }, {
    "from": 111,
    "label": "calls",
    "to": 282
  }, {
    "from": 229,
    "label": "calls",
    "to": 282
  }, {
    "from": 233,
    "label": "calls",
    "to": 282
  }, {
    "from": 233,
    "label": "calls",
    "to": 282
  }, {
    "from": 128,
    "label": "calls",
    "to": 284
  }, {
    "from": 259,
    "label": "calls",
    "to": 284
  }, {
    "from": 111,
    "label": "calls",
    "to": 68
  }, {
    "from": 10,
    "label": "calls",
    "to": 285
  }, {
    "from": 128,
    "label": "calls",
    "to": 286
  }, {
    "from": 141,
    "label": "calls",
    "to": 286
  }, {
    "from": 141,
    "label": "calls",
    "to": 286
  }, {
    "from": 141,
    "label": "calls",
    "to": 286
  }, {
    "from": 197,
    "label": "calls",
    "to": 286
  }, {
    "from": 202,
    "label": "calls",
    "to": 286
  }, {
    "from": 202,
    "label": "calls",
    "to": 286
  }, {
    "from": 210,
    "label": "calls",
    "to": 286
  }, {
    "from": 210,
    "label": "calls",
    "to": 286
  }, {
    "from": 210,
    "label": "calls",
    "to": 286
  }, {
    "from": 210,
    "label": "calls",
    "to": 286
  }, {
    "from": 210,
    "label": "calls",
    "to": 286
  }, {
    "from": 43,
    "label": "calls",
    "to": 36
  }, {
    "from": 210,
    "label": "calls",
    "to": 270
  }, {
    "from": 210,
    "label": "calls",
    "to": 270
  }, {
    "from": 229,
    "label": "calls",
    "to": 227
  }, {
    "from": 233,
    "label": "calls",
    "to": 227
  }, {
    "from": 1,
    "label": "contains",
    "to": 259
  }, {
    "from": 259,
    "label": "declares",
    "to": 4
  }, {
    "from": 259,
    "label": "declares",
    "to": 6
  }, {
    "from": 259,
    "label": "declares",
    "to": 10
  }, {
    "from": 259,
    "label": "declares",
    "to": 15
  }, {
    "from": 259,
    "label": "declares",
    "to": 19
  }, {
    "from": 259,
    "label": "declares",
    "to": 27
  }, {
    "from": 259,
    "label": "declares",
    "to": 36
  }, {
    "from": 259,
    "label": "declares",
    "to": 43
  }, {
    "from": 259,
    "label": "declares",
    "to": 50
  }, {
    "from": 259,
    "label": "declares",
    "to": 53
  }, {
    "from": 259,
    "label": "declares",
    "to": 58
  }, {
    "from": 259,
    "label": "declares",
    "to": 68
  }, {
    "from": 259,
    "label": "declares",
    "to": 86
  }, {
    "from": 259,
    "label": "declares",
    "to": 98
  }, {
    "from": 259,
    "label": "declares",
    "to": 102
  }, {
    "from": 259,
    "label": "declares",
    "to": 111
  }, {
    "from": 259,
    "label": "declares",
    "to": 128
  }, {
    "from": 259,
    "label": "declares",
    "to": 141
  }, {
    "from": 259,
    "label": "declares",
    "to": 149
  }, {
    "from": 259,
    "label": "declares",
    "to": 152
  }, {
    "from": 259,
    "label": "declares",
    "to": 155
  }, {
    "from": 259,
    "label": "declares",
    "to": 164
  }, {
    "from": 259,
    "label": "declares",
    "to": 165
  }, {
    "from": 259,
    "label": "declares",
    "to": 169
  }, {
    "from": 259,
    "label": "declares",
    "to": 187
  }, {
    "from": 259,
    "label": "declares",
    "to": 189
  }, {
    "from": 259,
    "label": "declares",
    "to": 191
  }, {
    "from": 259,
    "label": "declares",
    "to": 193
  }, {
    "from": 259,
    "label": "declares",
    "to": 195
  }, {
    "from": 259,
    "label": "declares",
    "to": 197
  }, {
    "from": 259,
    "label": "declares",
    "to": 202
  }, {
    "from": 259,
    "label": "declares",
    "to": 210
  }, {
    "from": 259,
    "label": "declares",
    "to": 227
  }, {
    "from": 259,
    "label": "declares",
    "to": 229
  }, {
    "from": 259,
    "label": "declares",
    "to": 233
  }, {
    "from": 259,
    "label": "declares",
    "to": 241
  }, {
    "from": 259,
    "label": "declares",
    "to": 244
  }, {
    "from": 259,
    "label": "declares",
    "to": 246
  }, {
    "from": 259,
    "label": "declares",
    "to": 248
  }, {
    "from": 259,
    "label": "declares",
    "to": 250
  }, {
    "from": 259,
    "label": "declares",
    "to": 252
  }, {
    "from": 259,
    "label": "declares",
    "to": 253
  }, {
    "from": 259,
    "label": "declares",
    "to": 255
  }, {
    "from": 259,
    "label": "declares",
    "to": 257
  }, {
    "from": 1,
    "label": "declares",
    "to": 272
  }, {
    "from": 1,
    "label": "declares",
    "to": 281
  }, {
    "from": 1,
    "label": "contains",
    "to": 291
  }, {
    "from": 1,
    "label": "contains",
    "to": 292
  }, {
    "from": 291,
    "label": "initializes",
    "to": 293
  }, {
    "from": 293,
    "label": "assigns",
    "to": 294
  }, {
    "from": 291,
    "label": "initializes",
    "to": 295
  }, {
    "from": 295,
    "label": "assigns",
    "to": 296
  }, {
    "from": 291,
    "label": "initializes",
    "to": 297
  }, {
    "from": 297,
    "label": "assigns",
    "to": 298
  }, {
    "from": 291,
    "label": "initializes",
    "to": 299
  }, {
    "from": 299,
    "label": "assigns",
    "to": 300
  }, {
    "from": 291,
    "label": "initializes",
    "to": 301
  }, {
    "from": 301,
    "label": "assigns",
    "to": 302
  }, {
    "from": 291,
    "label": "initializes",
    "to": 303
  }, {
    "from": 303,
    "label": "assigns",
    "to": 304
  }, {
    "from": 291,
    "label": "initializes",
    "to": 305
  }, {
    "from": 305,
    "label": "assigns",
    "to": 306
  }, {
    "from": 291,
    "label": "initializes",
    "to": 307
  }, {
    "from": 307,
    "label": "assigns",
    "to": 308
  }, {
    "from": 308,
    "label": "assigns",
    "to": 309
  }, {
    "from": 308,
    "label": "assigns",
    "to": 310
  }, {
    "from": 308,
    "label": "assigns",
    "to": 311
  }, {
    "from": 308,
    "label": "assigns",
    "to": 312
  }, {
    "from": 308,
    "label": "assigns",
    "to": 313
  }, {
    "from": 308,
    "label": "assigns",
    "to": 314
  }, {
    "from": 308,
    "label": "assigns",
    "to": 315
  }, {
    "from": 308,
    "label": "assigns",
    "to": 316
  }, {
    "from": 308,
    "label": "assigns",
    "to": 317
  }, {
    "from": 308,
    "label": "assigns",
    "to": 318
  }, {
    "from": 291,
    "label": "initializes",
    "to": 319
  }, {
    "from": 319,
    "label": "assigns",
    "to": 320
  }, {
    "from": 291,
    "label": "initializes",
    "to": 321
  }, {
    "from": 291,
    "label": "initializes",
    "to": 322
  }, {
    "from": 291,
    "label": "initializes",
    "to": 323
  }, {
    "from": 323,
    "label": "assigns",
    "to": 324
  }, {
    "from": 291,
    "label": "initializes",
    "to": 325
  }, {
    "from": 291,
    "label": "initializes",
    "to": 326
  }, {
    "from": 291,
    "label": "initializes",
    "to": 327
  }, {
    "from": 292,
    "label": "initializes",
    "to": 328
  }, {
    "from": 328,
    "label": "requires",
    "to": 290
  }, {
    "from": 292,
    "label": "initializes",
    "to": 329
  }, {
    "from": 329,
    "label": "requires",
    "to": 289
  }, {
    "from": 292,
    "label": "initializes",
    "to": 330
  }, {
    "from": 330,
    "label": "requires",
    "to": 331
  }, {
    "from": 292,
    "label": "initializes",
    "to": 332
  }, {
    "from": 332,
    "label": "requires",
    "to": 333
  }, {
    "from": 1,
    "label": "provides",
    "to": 334
  }, {
    "from": 265,
    "label": "represents",
    "to": 335
  }, {
    "from": 334,
    "label": "provides",
    "to": 335
  }, {
    "from": 293,
    "label": "represents",
    "to": 336
  }, {
    "from": 337,
    "label": "requires",
    "to": 1
  }, {
    "from": 338,
    "label": "initializes",
    "to": 332
  }, {
    "from": 332,
    "label": "requires",
    "to": 2
  }, {
    "from": 338,
    "label": "initializes",
    "to": 332
  }, {
    "from": 332,
    "label": "requires",
    "to": 3
  }, {
    "from": 339,
    "label": "requires",
    "to": 1
  }, {
    "from": 340,
    "label": "requires",
    "to": 1
  }, {
    "from": 341,
    "label": "requires",
    "to": 1
  }, {
    "from": 293,
    "label": "contains",
    "to": 15
  }, {
    "from": 293,
    "label": "contains",
    "to": 19
  }, {
    "from": 293,
    "label": "contains",
    "to": 27
  }, {
    "from": 293,
    "label": "contains",
    "to": 36
  }, {
    "from": 293,
    "label": "contains",
    "to": 86
  }, {
    "from": 293,
    "label": "contains",
    "to": 141
  }, {
    "from": 293,
    "label": "contains",
    "to": 149
  }, {
    "from": 293,
    "label": "contains",
    "to": 152
  }, {
    "from": 293,
    "label": "contains",
    "to": 165
  }, {
    "from": 293,
    "label": "contains",
    "to": 169
  }, {
    "from": 293,
    "label": "contains",
    "to": 195
  }, {
    "from": 293,
    "label": "contains",
    "to": 244
  }, {
    "from": 293,
    "label": "contains",
    "to": 246
  }, {
    "from": 293,
    "label": "contains",
    "to": 248
  }, {
    "from": 293,
    "label": "contains",
    "to": 250
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "runner",
    "type": "module"
  }, {
    "id": 2,
    "text": "test2",
    "type": "module"
  }, {
    "id": 3,
    "text": "test3",
    "type": "module"
  }, {
    "id": 4,
    "text": "function() return {} end",
    "type": "function"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "local function on_exit_wrap(fn)\r\n   local anchor = new_anchor()\r\n   debug.setmetatable(anchor, {__gc = fn})\r\n   return anchor\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local anchor = new_anchor()",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "debug.setmetatable(anchor, {__gc = fn})",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "local function match_any(patterns, str, on_empty)\r\n   if not patterns or not patterns[1] then\r\n      return on_empty\r\n   end\r\n\r\n   for _, pattern in ipairs(patterns) do\r\n      if string.match(str, pattern) then\r\n         return true\r\n      end\r\n   end\r\n\r\n   return false\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "if not patterns or not patterns[1] then\r\n      return on_empty\r\n   end",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "for _, pattern in ipairs(patterns) do\r\n      if string.match(str, pattern) then\r\n         return true\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 13,
    "text": "if string.match(str, pattern) then\r\n         return true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function runner.file_included(filename)\r\n   -- Normalize file names before using patterns.\r\n   filename = string.gsub(filename, \"\\\\\", \"/\")\r\n   filename = string.gsub(filename, \"%.lua$\", \"\")\r\n\r\n   -- If include list is empty, everything is included by default.\r\n   -- If exclude list is empty, nothing is excluded by default.\r\n   return match_any(runner.configuration.include, filename, true) and\r\n      not match_any(runner.configuration.exclude, filename, false)\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "filename = string.gsub(filename, \"\\\\\", \"/\")",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "filename = string.gsub(filename, \"%.lua$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function runner.update_stats(old_stats, extra_stats)\r\n   old_stats.max = math.max(old_stats.max, extra_stats.max)\r\n\r\n   -- Remove string keys so that they do not appear when iterating\r\n   -- over 'extra_stats'.\r\n   extra_stats.max = nil\r\n   extra_stats.max_hits = nil\r\n      \r\n   for line_nr, run_nr in pairs(extra_stats) do\r\n      old_stats[line_nr] = (old_stats[line_nr] or 0) + run_nr\r\n      old_stats.max_hits = math.max(old_stats.max_hits, old_stats[line_nr])\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "old_stats.max = math.max(old_stats.max, extra_stats.max)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "extra_stats.max = nil",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "extra_stats.max_hits = nil",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "for line_nr, run_nr in pairs(extra_stats) do\r\n      old_stats[line_nr] = (old_stats[line_nr] or 0) + run_nr\r\n      old_stats.max_hits = math.max(old_stats.max_hits, old_stats[line_nr])\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 24,
    "text": "old_stats[line_nr] = (old_stats[line_nr] or 0) + run_nr",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "old_stats.max_hits = math.max(old_stats.max_hits, old_stats[line_nr])",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function runner.save_stats()\r\n   local loaded = stats.load(runner.configuration.statsfile) or {}\r\n\r\n   for name, file_data in pairs(runner.data) do\r\n      if loaded[name] then\r\n         runner.update_stats(loaded[name], file_data)\r\n      else\r\n         loaded[name] = file_data\r\n      end\r\n   end\r\n\r\n   stats.save(runner.configuration.statsfile, loaded)\r\n   runner.data = {}\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "local loaded = stats.load(runner.configuration.statsfile) or {}",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "for name, file_data in pairs(runner.data) do\r\n      if loaded[name] then\r\n         runner.update_stats(loaded[name], file_data)\r\n      else\r\n         loaded[name] = file_data\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 30,
    "text": "if loaded[name] then\r\n         runner.update_stats(loaded[name], file_data)\r\n      else\r\n         loaded[name] = file_data\r\n      end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "runner.update_stats(loaded[name], file_data)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "loaded[name] = file_data",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "stats.save(runner.configuration.statsfile, loaded)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "runner.data = {}",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function runner.run_report(configuration)\r\n   configuration = runner.load_config(configuration)\r\n   local reporter = \"luacov.reporter\"\r\n\r\n   if configuration.reporter then\r\n      reporter = reporter .. \".\" .. configuration.reporter\r\n   end\r\n\r\n   require(reporter).report()\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "configuration = runner.load_config(configuration)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "local reporter = \"luacov.reporter\"",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "if configuration.reporter then\r\n      reporter = reporter .. \".\" .. configuration.reporter\r\n   end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "reporter = reporter .. \".\" .. configuration.reporter",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "require(reporter).report()",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "local function on_exit()\r\n   -- Lua >= 5.2 could call __gc when user call os.exit\r\n   -- so this method could be called twice\r\n   if on_exit_run_once then return end\r\n   on_exit_run_once = true\r\n   runner.save_stats()\r\n\r\n   if runner.configuration.runreport then\r\n      runner.run_report(runner.configuration)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "if on_exit_run_once then return end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "on_exit_run_once = true",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "runner.save_stats()",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "if runner.configuration.runreport then\r\n      runner.run_report(runner.configuration)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "runner.run_report(runner.configuration)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "local function escape_module_punctuation(ch)\r\n   if ch == \".\" then\r\n      return \"/\"\r\n   elseif ch == \"*\" then\r\n      return wildcard_expansion\r\n   else\r\n      return \"%\" .. ch\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "if ch == \".\" then\r\n      return \"/\"\r\n   elseif ch == \"*\" then\r\n      return wildcard_expansion\r\n   else\r\n      return \"%\" .. ch\r\n   end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "local function reversed_module_name_parts(name)\r\n   local parts = {}\r\n\r\n   for part in name:gmatch(\"[^%.]+\") do\r\n      table.insert(parts, 1, part)\r\n   end\r\n\r\n   return parts\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "local parts = {}",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "for part in name:gmatch(\"[^%.]+\") do\r\n      table.insert(parts, 1, part)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 56,
    "text": "table.insert(parts, 1, part)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "local function compare_names(name1, name2)\r\n   local parts1 = reversed_module_name_parts(name1)\r\n   local parts2 = reversed_module_name_parts(name2)\r\n\r\n   for i = 1, math.max(#parts1, #parts2) do\r\n      if not parts1[i] then return false end\r\n      if not parts2[i] then return true end\r\n\r\n      local is_literal1 = not parts1[i]:find(\"%*\")\r\n      local is_literal2 = not parts2[i]:find(\"%*\")\r\n\r\n      if is_literal1 ~= is_literal2 then\r\n         return is_literal1\r\n      end\r\n   end\r\n\r\n   -- Names are at the same level of specificness,\r\n   -- fall back to lexicographical comparison.\r\n   return name1 < name2\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "local parts1 = reversed_module_name_parts(name1)",
    "type": "statement:localassign"
  }, {
    "id": 60,
    "text": "local parts2 = reversed_module_name_parts(name2)",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "for i = 1, math.max(#parts1, #parts2) do\r\n      if not parts1[i] then return false end\r\n      if not parts2[i] then return true end\r\n\r\n      local is_literal1 = not parts1[i]:find(\"%*\")\r\n      local is_literal2 = not parts2[i]:find(\"%*\")\r\n\r\n      if is_literal1 ~= is_literal2 then\r\n         return is_literal1\r\n      end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 62,
    "text": "if not parts1[i] then return false end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "if not parts2[i] then return true end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "local is_literal1 = not parts1[i]:find(\"%*\")",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local is_literal2 = not parts2[i]:find(\"%*\")",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if is_literal1 ~= is_literal2 then\r\n         return is_literal1\r\n      end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "local function acknowledge_modules()\r\n   runner.modules = {patterns = {}, filenames = {}}\r\n\r\n   if not runner.configuration.modules then\r\n      return\r\n   end\r\n\r\n   if not runner.configuration.include then\r\n      runner.configuration.include = {}\r\n   end\r\n\r\n   local names = {}\r\n\r\n   for name in pairs(runner.configuration.modules) do\r\n      table.insert(names, name)\r\n   end\r\n\r\n   table.sort(names, compare_names)\r\n\r\n   for _, name in ipairs(names) do\r\n      local pattern = name:gsub(\"%p\", escape_module_punctuation) .. \"$\"\r\n      local filename = runner.configuration.modules[name]:gsub(\"[/\\\\]\", dir_sep)\r\n      table.insert(runner.modules.patterns, pattern)\r\n      table.insert(runner.configuration.include, pattern)\r\n      table.insert(runner.modules.filenames, filename)\r\n\r\n      if filename:match(\"init%.lua$\") then\r\n         pattern = pattern:gsub(\"$$\", \"/init$\")\r\n         table.insert(runner.modules.patterns, pattern)\r\n         table.insert(runner.configuration.include, pattern)\r\n         table.insert(runner.modules.filenames, filename)\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "runner.modules = {patterns = {}, filenames = {}}",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "if not runner.configuration.modules then\r\n      return\r\n   end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "if not runner.configuration.include then\r\n      runner.configuration.include = {}\r\n   end",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "runner.configuration.include = {}",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "local names = {}",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "for name in pairs(runner.configuration.modules) do\r\n      table.insert(names, name)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 75,
    "text": "table.insert(names, name)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "table.sort(names, compare_names)",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "for _, name in ipairs(names) do\r\n      local pattern = name:gsub(\"%p\", escape_module_punctuation) .. \"$\"\r\n      local filename = runner.configuration.modules[name]:gsub(\"[/\\\\]\", dir_sep)\r\n      table.insert(runner.modules.patterns, pattern)\r\n      table.insert(runner.configuration.include, pattern)\r\n      table.insert(runner.modules.filenames, filename)\r\n\r\n      if filename:match(\"init%.lua$\") then\r\n         pattern = pattern:gsub(\"$$\", \"/init$\")\r\n         table.insert(runner.modules.patterns, pattern)\r\n         table.insert(runner.configuration.include, pattern)\r\n         table.insert(runner.modules.filenames, filename)\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 78,
    "text": "local pattern = name:gsub(\"%p\", escape_module_punctuation) .. \"$\"",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "local filename = runner.configuration.modules[name]:gsub(\"[/\\\\]\", dir_sep)",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "table.insert(runner.modules.patterns, pattern)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "table.insert(runner.configuration.include, pattern)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "table.insert(runner.modules.filenames, filename)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "if filename:match(\"init%.lua$\") then\r\n         pattern = pattern:gsub(\"$$\", \"/init$\")\r\n         table.insert(runner.modules.patterns, pattern)\r\n         table.insert(runner.configuration.include, pattern)\r\n         table.insert(runner.modules.filenames, filename)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "pattern = pattern:gsub(\"$$\", \"/init$\")",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function runner.real_name(filename)\r\n   local orig_filename = filename\r\n   -- Normalize file names before using patterns.\r\n   filename = filename:gsub(\"\\\\\", \"/\"):gsub(\"%.lua$\", \"\")\r\n\r\n   for i, pattern in ipairs(runner.modules.patterns) do\r\n      local match = filename:match(pattern)\r\n\r\n      if match then\r\n         local new_filename = runner.modules.filenames[i]\r\n\r\n         if pattern:find(wildcard_expansion, 1, true) then\r\n            -- Given a prefix directory, join it\r\n            -- with matched part of source file name.\r\n            if not new_filename:match(\"/$\") then\r\n               new_filename = new_filename .. \"/\"\r\n            end\r\n\r\n            new_filename = new_filename .. match .. \".lua\"\r\n         end\r\n\r\n         -- Switch slashes back to native.\r\n         return (new_filename:gsub(\"[/\\\\]\", dir_sep))\r\n      end\r\n   end\r\n\r\n   return orig_filename\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "local orig_filename = filename",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "filename = filename:gsub(\"\\\\\", \"/\"):gsub(\"%.lua$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "for i, pattern in ipairs(runner.modules.patterns) do\r\n      local match = filename:match(pattern)\r\n\r\n      if match then\r\n         local new_filename = runner.modules.filenames[i]\r\n\r\n         if pattern:find(wildcard_expansion, 1, true) then\r\n            -- Given a prefix directory, join it\r\n            -- with matched part of source file name.\r\n            if not new_filename:match(\"/$\") then\r\n               new_filename = new_filename .. \"/\"\r\n            end\r\n\r\n            new_filename = new_filename .. match .. \".lua\"\r\n         end\r\n\r\n         -- Switch slashes back to native.\r\n         return (new_filename:gsub(\"[/\\\\]\", dir_sep))\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "local match = filename:match(pattern)",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "if match then\r\n         local new_filename = runner.modules.filenames[i]\r\n\r\n         if pattern:find(wildcard_expansion, 1, true) then\r\n            -- Given a prefix directory, join it\r\n            -- with matched part of source file name.\r\n            if not new_filename:match(\"/$\") then\r\n               new_filename = new_filename .. \"/\"\r\n            end\r\n\r\n            new_filename = new_filename .. match .. \".lua\"\r\n         end\r\n\r\n         -- Switch slashes back to native.\r\n         return (new_filename:gsub(\"[/\\\\]\", dir_sep))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "local new_filename = runner.modules.filenames[i]",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "if pattern:find(wildcard_expansion, 1, true) then\r\n            -- Given a prefix directory, join it\r\n            -- with matched part of source file name.\r\n            if not new_filename:match(\"/$\") then\r\n               new_filename = new_filename .. \"/\"\r\n            end\r\n\r\n            new_filename = new_filename .. match .. \".lua\"\r\n         end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "if not new_filename:match(\"/$\") then\r\n               new_filename = new_filename .. \"/\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "new_filename = new_filename .. \"/\"",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "new_filename = new_filename .. match .. \".lua\"",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "local function is_absolute(path)\r\n   if path:sub(1, 1) == dir_sep or path:sub(1, 1) == \"/\" then\r\n      return true\r\n   end\r\n\r\n   if dir_sep == \"\\\\\" and path:find(\"^%a:\") then\r\n      return true\r\n   end\r\n\r\n   return false\r\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "if path:sub(1, 1) == dir_sep or path:sub(1, 1) == \"/\" then\r\n      return true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "if dir_sep == \"\\\\\" and path:find(\"^%a:\") then\r\n      return true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "local function get_cur_dir()\r\n   local pwd_cmd = dir_sep == \"\\\\\" and \"cd 2>nul\" or \"pwd 2>/dev/null\"\r\n   local handler = io.popen(pwd_cmd, \"r\")\r\n   local cur_dir = handler:read(\"*a\")\r\n   handler:close()\r\n   cur_dir = cur_dir:gsub(\"\\r?\\n$\", \"\")\r\n\r\n   if cur_dir:sub(-1) ~= dir_sep and cur_dir:sub(-1) ~= \"/\" then\r\n      cur_dir = cur_dir .. dir_sep\r\n   end\r\n\r\n   return cur_dir\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "local pwd_cmd = dir_sep == \"\\\\\" and \"cd 2>nul\" or \"pwd 2>/dev/null\"",
    "type": "statement:localassign"
  }, {
    "id": 104,
    "text": "local handler = io.popen(pwd_cmd, \"r\")",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "local cur_dir = handler:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "handler:close()",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "cur_dir = cur_dir:gsub(\"\\r?\\n$\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "if cur_dir:sub(-1) ~= dir_sep and cur_dir:sub(-1) ~= \"/\" then\r\n      cur_dir = cur_dir .. dir_sep\r\n   end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "cur_dir = cur_dir .. dir_sep",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "local function set_config(configuration)\r\n   runner.configuration = {}\r\n\r\n   for option, default_value in pairs(runner.defaults) do\r\n      runner.configuration[option] = default_value\r\n   end\r\n\r\n   for option, value in pairs(configuration) do\r\n      runner.configuration[option] = value\r\n   end\r\n\r\n   -- Program using LuaCov may change directory during its execution.\r\n   -- Convert path options to absolute paths to use correct paths anyway.\r\n   local cur_dir\r\n\r\n   for _, option in ipairs({\"statsfile\", \"reportfile\"}) do\r\n      local path = runner.configuration[option]\r\n\r\n      if not is_absolute(path) then\r\n         cur_dir = cur_dir or get_cur_dir()\r\n         runner.configuration[option] = cur_dir .. path\r\n      end\r\n   end\r\n\r\n   acknowledge_modules()\r\n\r\n   for _, patt in ipairs(luacov_excludes) do\r\n      table.insert(runner.configuration.exclude, patt)\r\n   end\r\n\r\n   runner.tick = runner.tick or runner.configuration.tick\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "runner.configuration = {}",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "for option, default_value in pairs(runner.defaults) do\r\n      runner.configuration[option] = default_value\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 114,
    "text": "runner.configuration[option] = default_value",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "for option, value in pairs(configuration) do\r\n      runner.configuration[option] = value\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 116,
    "text": "runner.configuration[option] = value",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "local cur_dir",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "for _, option in ipairs({\"statsfile\", \"reportfile\"}) do\r\n      local path = runner.configuration[option]\r\n\r\n      if not is_absolute(path) then\r\n         cur_dir = cur_dir or get_cur_dir()\r\n         runner.configuration[option] = cur_dir .. path\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 119,
    "text": "local path = runner.configuration[option]",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "if not is_absolute(path) then\r\n         cur_dir = cur_dir or get_cur_dir()\r\n         runner.configuration[option] = cur_dir .. path\r\n      end",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "cur_dir = cur_dir or get_cur_dir()",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "runner.configuration[option] = cur_dir .. path",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "acknowledge_modules()",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "for _, patt in ipairs(luacov_excludes) do\r\n      table.insert(runner.configuration.exclude, patt)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 125,
    "text": "table.insert(runner.configuration.exclude, patt)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "runner.tick = runner.tick or runner.configuration.tick",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "local function load_config_file(name, is_default)\r\n   local conf = setmetatable({}, {__index = _G})\r\n\r\n   local ok, ret, error_msg = util.load_config(name, conf)\r\n\r\n   if ok then\r\n      if type(ret) == \"table\" then\r\n         for key, value in pairs(ret) do\r\n            if conf[key] == nil then\r\n               conf[key] = value\r\n            end\r\n         end\r\n      end\r\n\r\n      return conf\r\n   end\r\n\r\n   local error_type = ret\r\n\r\n   if error_type == \"read\" and is_default then\r\n      return nil\r\n   end\r\n\r\n   io.stderr:write((\"Error: couldn't %s config file %s: %s\\n\"):format(error_type, name, error_msg))\r\n   raw_os_exit(1)\r\nend",
    "type": "function"
  }, {
    "id": 129,
    "text": "local conf = setmetatable({}, {__index = _G})",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "local ok, ret, error_msg = util.load_config(name, conf)",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "if ok then\r\n      if type(ret) == \"table\" then\r\n         for key, value in pairs(ret) do\r\n            if conf[key] == nil then\r\n               conf[key] = value\r\n            end\r\n         end\r\n      end\r\n\r\n      return conf\r\n   end",
    "type": "statement:if"
  }, {
    "id": 132,
    "text": "if type(ret) == \"table\" then\r\n         for key, value in pairs(ret) do\r\n            if conf[key] == nil then\r\n               conf[key] = value\r\n            end\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 133,
    "text": "for key, value in pairs(ret) do\r\n            if conf[key] == nil then\r\n               conf[key] = value\r\n            end\r\n         end",
    "type": "statement:genericfor"
  }, {
    "id": 134,
    "text": "if conf[key] == nil then\r\n               conf[key] = value\r\n            end",
    "type": "statement:if"
  }, {
    "id": 135,
    "text": "conf[key] = value",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "local error_type = ret",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "if error_type == \"read\" and is_default then\r\n      return nil\r\n   end",
    "type": "statement:if"
  }, {
    "id": 138,
    "text": "io.stderr:write((\"Error: couldn't %s config file %s: %s\\n\"):format(error_type, name, error_msg))",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "raw_os_exit(1)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function runner.load_config(configuration)\r\n   if not runner.configuration then\r\n      if not configuration then\r\n         -- Nothing provided, load from default location if possible.\r\n         set_config(load_config_file(default_config_file, true) or runner.defaults)\r\n      elseif type(configuration) == \"string\" then\r\n         set_config(load_config_file(configuration))\r\n      elseif type(configuration) == \"table\" then\r\n         set_config(configuration)\r\n      else\r\n         error(\"Expected filename, config table or nil. Got \" .. type(configuration))\r\n      end\r\n   end\r\n\r\n   return runner.configuration\r\nend",
    "type": "function"
  }, {
    "id": 142,
    "text": "if not runner.configuration then\r\n      if not configuration then\r\n         -- Nothing provided, load from default location if possible.\r\n         set_config(load_config_file(default_config_file, true) or runner.defaults)\r\n      elseif type(configuration) == \"string\" then\r\n         set_config(load_config_file(configuration))\r\n      elseif type(configuration) == \"table\" then\r\n         set_config(configuration)\r\n      else\r\n         error(\"Expected filename, config table or nil. Got \" .. type(configuration))\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 143,
    "text": "if not configuration then\r\n         -- Nothing provided, load from default location if possible.\r\n         set_config(load_config_file(default_config_file, true) or runner.defaults)\r\n      elseif type(configuration) == \"string\" then\r\n         set_config(load_config_file(configuration))\r\n      elseif type(configuration) == \"table\" then\r\n         set_config(configuration)\r\n      else\r\n         error(\"Expected filename, config table or nil. Got \" .. type(configuration))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 144,
    "text": "set_config(load_config_file(default_config_file, true) or runner.defaults)",
    "type": "statement:functioncall"
  }, {
    "id": 145,
    "text": "set_config(load_config_file(configuration))",
    "type": "statement:functioncall"
  }, {
    "id": 146,
    "text": "set_config(configuration)",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "error(\"Expected filename, config table or nil. Got \" .. type(configuration))",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function runner.pause()\r\n   runner.paused = true\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "runner.paused = true",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function runner.resume()\r\n   runner.paused = false\r\nend",
    "type": "function"
  }, {
    "id": 153,
    "text": "runner.paused = false",
    "type": "statement:assign"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "local function has_hook_per_thread()\r\n   if hook_per_thread == nil then\r\n      local old_hook, old_mask, old_count = debug.gethook()\r\n      local noop = function() end\r\n      debug.sethook(noop, \"l\")\r\n      local thread_hook = coroutine.wrap(function() return debug.gethook() end)()\r\n      hook_per_thread = thread_hook ~= noop\r\n      debug.sethook(old_hook, old_mask, old_count)\r\n   end\r\n\r\n   return hook_per_thread\r\nend",
    "type": "function"
  }, {
    "id": 156,
    "text": "if hook_per_thread == nil then\r\n      local old_hook, old_mask, old_count = debug.gethook()\r\n      local noop = function() end\r\n      debug.sethook(noop, \"l\")\r\n      local thread_hook = coroutine.wrap(function() return debug.gethook() end)()\r\n      hook_per_thread = thread_hook ~= noop\r\n      debug.sethook(old_hook, old_mask, old_count)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 157,
    "text": "local old_hook, old_mask, old_count = debug.gethook()",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "local noop = function() end",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "debug.sethook(noop, \"l\")",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "local thread_hook = coroutine.wrap(function() return debug.gethook() end)()",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "hook_per_thread = thread_hook ~= noop",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "debug.sethook(old_hook, old_mask, old_count)",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 164,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 165,
    "text": "function runner.with_luacov(f)\r\n   return function(...)\r\n      if has_hook_per_thread() then\r\n         debug.sethook(runner.debug_hook, \"l\")\r\n      end\r\n\r\n      return f(...)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 166,
    "text": "if has_hook_per_thread() then\r\n         debug.sethook(runner.debug_hook, \"l\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 167,
    "text": "debug.sethook(runner.debug_hook, \"l\")",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "function runner.init(configuration)\r\n   runner.configuration = runner.load_config(configuration)\r\n\r\n   -- metatable trick on filehandle won't work if Lua exits through\r\n   -- os.exit() hence wrap that with exit code as well\r\n   os.exit = function(...) -- luacheck: no global\r\n      on_exit()\r\n      raw_os_exit(...)\r\n   end\r\n\r\n   debug.sethook(runner.debug_hook, \"l\")\r\n\r\n   if has_hook_per_thread() then\r\n      -- debug must be set for each coroutine separately\r\n      -- hence wrap coroutine function to set the hook there\r\n      -- as well\r\n      local rawcoroutinecreate = coroutine.create\r\n      coroutine.create = function(...) -- luacheck: no global\r\n         local co = rawcoroutinecreate(...)\r\n         debug.sethook(co, runner.debug_hook, \"l\")\r\n         return co\r\n      end\r\n\r\n      -- Version of assert which handles non-string errors properly.\r\n      local function safeassert(ok, ...)\r\n         if ok then\r\n            return ...\r\n         else\r\n            error(..., 0)\r\n         end\r\n      end\r\n\r\n      coroutine.wrap = function(...) -- luacheck: no global\r\n         local co = rawcoroutinecreate(...)\r\n         debug.sethook(co, runner.debug_hook, \"l\")\r\n         return function(...)\r\n            return safeassert(coroutine.resume(co, ...))\r\n         end\r\n      end\r\n   end\r\n\r\n   if not runner.tick then\r\n      runner.on_exit_trick = on_exit_wrap(on_exit)\r\n   end\r\n\r\n   runner.initialized = true\r\n   runner.paused = false\r\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "runner.configuration = runner.load_config(configuration)",
    "type": "statement:assign"
  }, {
    "id": 171,
    "text": "os.exit = function(...) -- luacheck: no global\r\n      on_exit()\r\n      raw_os_exit(...)\r\n   end",
    "type": "statement:assign"
  }, {
    "id": 172,
    "text": "on_exit()",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "raw_os_exit(...)",
    "type": "statement:functioncall"
  }, {
    "id": 174,
    "text": "if has_hook_per_thread() then\r\n      -- debug must be set for each coroutine separately\r\n      -- hence wrap coroutine function to set the hook there\r\n      -- as well\r\n      local rawcoroutinecreate = coroutine.create\r\n      coroutine.create = function(...) -- luacheck: no global\r\n         local co = rawcoroutinecreate(...)\r\n         debug.sethook(co, runner.debug_hook, \"l\")\r\n         return co\r\n      end\r\n\r\n      -- Version of assert which handles non-string errors properly.\r\n      local function safeassert(ok, ...)\r\n         if ok then\r\n            return ...\r\n         else\r\n            error(..., 0)\r\n         end\r\n      end\r\n\r\n      coroutine.wrap = function(...) -- luacheck: no global\r\n         local co = rawcoroutinecreate(...)\r\n         debug.sethook(co, runner.debug_hook, \"l\")\r\n         return function(...)\r\n            return safeassert(coroutine.resume(co, ...))\r\n         end\r\n      end\r\n   end",
    "type": "statement:if"
  }, {
    "id": 175,
    "text": "local rawcoroutinecreate = coroutine.create",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "coroutine.create = function(...) -- luacheck: no global\r\n         local co = rawcoroutinecreate(...)\r\n         debug.sethook(co, runner.debug_hook, \"l\")\r\n         return co\r\n      end",
    "type": "statement:assign"
  }, {
    "id": 177,
    "text": "local co = rawcoroutinecreate(...)",
    "type": "statement:localassign"
  }, {
    "id": 178,
    "text": "debug.sethook(co, runner.debug_hook, \"l\")",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "local function safeassert(ok, ...)\r\n         if ok then\r\n            return ...\r\n         else\r\n            error(..., 0)\r\n         end\r\n      end",
    "type": "statement:localfunction"
  }, {
    "id": 180,
    "text": "if ok then\r\n            return ...\r\n         else\r\n            error(..., 0)\r\n         end",
    "type": "statement:if"
  }, {
    "id": 181,
    "text": "error(..., 0)",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "coroutine.wrap = function(...) -- luacheck: no global\r\n         local co = rawcoroutinecreate(...)\r\n         debug.sethook(co, runner.debug_hook, \"l\")\r\n         return function(...)\r\n            return safeassert(coroutine.resume(co, ...))\r\n         end\r\n      end",
    "type": "statement:assign"
  }, {
    "id": 183,
    "text": "if not runner.tick then\r\n      runner.on_exit_trick = on_exit_wrap(on_exit)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 184,
    "text": "runner.on_exit_trick = on_exit_wrap(on_exit)",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "runner.initialized = true",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function(...) -- luacheck: no global\r\n      on_exit()\r\n      raw_os_exit(...)\r\n   end",
    "type": "function"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function(...) -- luacheck: no global\r\n         local co = rawcoroutinecreate(...)\r\n         debug.sethook(co, runner.debug_hook, \"l\")\r\n         return co\r\n      end",
    "type": "function"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "local function safeassert(ok, ...)\r\n         if ok then\r\n            return ...\r\n         else\r\n            error(..., 0)\r\n         end\r\n      end",
    "type": "function"
  }, {
    "id": 192,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 193,
    "text": "function(...) -- luacheck: no global\r\n         local co = rawcoroutinecreate(...)\r\n         debug.sethook(co, runner.debug_hook, \"l\")\r\n         return function(...)\r\n            return safeassert(coroutine.resume(co, ...))\r\n         end\r\n      end",
    "type": "function"
  }, {
    "id": 194,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 195,
    "text": "function runner.shutdown()\r\n   on_exit()\r\nend",
    "type": "function"
  }, {
    "id": 196,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 197,
    "text": "local function getsourcefile(func)\r\n   assert(type(func) == \"function\")\r\n   local d = debug.getinfo(func).source\r\n   if d and d:sub(1, 1) == \"@\" then\r\n      return d:sub(2)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 198,
    "text": "assert(type(func) == \"function\")",
    "type": "statement:functioncall"
  }, {
    "id": 199,
    "text": "local d = debug.getinfo(func).source",
    "type": "statement:localassign"
  }, {
    "id": 200,
    "text": "if d and d:sub(1, 1) == \"@\" then\r\n      return d:sub(2)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 201,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 202,
    "text": "local function findfunction(t, searched)\r\n   if searched[t] then\r\n      return\r\n   end\r\n\r\n   searched[t] = true\r\n\r\n   for _, v in pairs(t) do\r\n      if type(v) == \"function\" then\r\n         return v\r\n      elseif type(v) == \"table\" then\r\n         local func = findfunction(v, searched)\r\n         if func then return func end\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 203,
    "text": "if searched[t] then\r\n      return\r\n   end",
    "type": "statement:if"
  }, {
    "id": 204,
    "text": "searched[t] = true",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "for _, v in pairs(t) do\r\n      if type(v) == \"function\" then\r\n         return v\r\n      elseif type(v) == \"table\" then\r\n         local func = findfunction(v, searched)\r\n         if func then return func end\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 206,
    "text": "if type(v) == \"function\" then\r\n         return v\r\n      elseif type(v) == \"table\" then\r\n         local func = findfunction(v, searched)\r\n         if func then return func end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 207,
    "text": "local func = findfunction(v, searched)",
    "type": "statement:localassign"
  }, {
    "id": 208,
    "text": "if func then return func end",
    "type": "statement:if"
  }, {
    "id": 209,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 210,
    "text": "local function getfilename(name)\r\n   if type(name) == \"function\" then\r\n      local sourcefile = getsourcefile(name)\r\n\r\n      if not sourcefile then\r\n         error(\"Could not infer source filename\")\r\n      end\r\n\r\n      return sourcefile\r\n   elseif type(name) == \"table\" then\r\n      local func = findfunction(name, {})\r\n\r\n      if not func then\r\n         error(\"Could not find a function within \" .. tostring(name))\r\n      end\r\n\r\n      return getfilename(func)\r\n   else\r\n      if type(name) ~= \"string\" then\r\n         error(\"Bad argument: \" .. tostring(name))\r\n      end\r\n\r\n      if util.file_exists(name) then\r\n         return name\r\n      end\r\n\r\n      local success, result = pcall(require, name)\r\n\r\n      if not success then\r\n         error(\"Module/file '\" .. name .. \"' was not found\")\r\n      end\r\n\r\n      if type(result) ~= \"table\" and type(result) ~= \"function\" then\r\n         error(\"Module '\" .. name .. \"' did not return a result to lookup its file name\")\r\n      end\r\n\r\n      return getfilename(result)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 211,
    "text": "if type(name) == \"function\" then\r\n      local sourcefile = getsourcefile(name)\r\n\r\n      if not sourcefile then\r\n         error(\"Could not infer source filename\")\r\n      end\r\n\r\n      return sourcefile\r\n   elseif type(name) == \"table\" then\r\n      local func = findfunction(name, {})\r\n\r\n      if not func then\r\n         error(\"Could not find a function within \" .. tostring(name))\r\n      end\r\n\r\n      return getfilename(func)\r\n   else\r\n      if type(name) ~= \"string\" then\r\n         error(\"Bad argument: \" .. tostring(name))\r\n      end\r\n\r\n      if util.file_exists(name) then\r\n         return name\r\n      end\r\n\r\n      local success, result = pcall(require, name)\r\n\r\n      if not success then\r\n         error(\"Module/file '\" .. name .. \"' was not found\")\r\n      end\r\n\r\n      if type(result) ~= \"table\" and type(result) ~= \"function\" then\r\n         error(\"Module '\" .. name .. \"' did not return a result to lookup its file name\")\r\n      end\r\n\r\n      return getfilename(result)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 212,
    "text": "local sourcefile = getsourcefile(name)",
    "type": "statement:localassign"
  }, {
    "id": 213,
    "text": "if not sourcefile then\r\n         error(\"Could not infer source filename\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 214,
    "text": "error(\"Could not infer source filename\")",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "local func = findfunction(name, {})",
    "type": "statement:localassign"
  }, {
    "id": 216,
    "text": "if not func then\r\n         error(\"Could not find a function within \" .. tostring(name))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 217,
    "text": "error(\"Could not find a function within \" .. tostring(name))",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "if type(name) ~= \"string\" then\r\n         error(\"Bad argument: \" .. tostring(name))\r\n      end",
    "type": "statement:if"
  }, {
    "id": 219,
    "text": "error(\"Bad argument: \" .. tostring(name))",
    "type": "statement:functioncall"
  }, {
    "id": 220,
    "text": "if util.file_exists(name) then\r\n         return name\r\n      end",
    "type": "statement:if"
  }, {
    "id": 221,
    "text": "local success, result = pcall(require, name)",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "if not success then\r\n         error(\"Module/file '\" .. name .. \"' was not found\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "error(\"Module/file '\" .. name .. \"' was not found\")",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "if type(result) ~= \"table\" and type(result) ~= \"function\" then\r\n         error(\"Module '\" .. name .. \"' did not return a result to lookup its file name\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 225,
    "text": "error(\"Module '\" .. name .. \"' did not return a result to lookup its file name\")",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "local function escapefilename(name)\r\n   return name:gsub(\"%.lua$\", \"\"):gsub(\"[%%%^%$%.%(%)%[%]%+%*%-%?]\",\"%%%0\"):gsub(\"\\\\\", \"/\")\r\nend",
    "type": "function"
  }, {
    "id": 228,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 229,
    "text": "local function addfiletolist(name, list)\r\n  local f = \"^\"..escapefilename(getfilename(name))..\"$\"\r\n  table.insert(list, f)\r\n  return f\r\nend",
    "type": "function"
  }, {
    "id": 230,
    "text": "local f = \"^\"..escapefilename(getfilename(name))..\"$\"",
    "type": "statement:localassign"
  }, {
    "id": 231,
    "text": "table.insert(list, f)",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 233,
    "text": "local function addtreetolist(name, level, list)\r\n   local f = escapefilename(getfilename(name))\r\n\r\n   if level or f:match(\"/init$\") then\r\n      -- chop the last backslash and everything after it\r\n      f = f:match(\"^(.*)/\") or f\r\n   end\r\n\r\n   local t = \"^\"..f..\"/\"   -- the tree behind the file\r\n   f = \"^\"..f..\"$\"         -- the file\r\n   table.insert(list, f)\r\n   table.insert(list, t)\r\n   return f, t\r\nend",
    "type": "function"
  }, {
    "id": 234,
    "text": "local f = escapefilename(getfilename(name))",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "if level or f:match(\"/init$\") then\r\n      -- chop the last backslash and everything after it\r\n      f = f:match(\"^(.*)/\") or f\r\n   end",
    "type": "statement:if"
  }, {
    "id": 236,
    "text": "f = f:match(\"^(.*)/\") or f",
    "type": "statement:assign"
  }, {
    "id": 237,
    "text": "local t = \"^\"..f..\"/\"",
    "type": "statement:localassign"
  }, {
    "id": 238,
    "text": "f = \"^\"..f..\"$\"",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "table.insert(list, t)",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 241,
    "text": "local function checkresult(ok, ...)\r\n   if ok then\r\n      return ... -- success, strip 'true' value\r\n   else\r\n      return nil, ... -- failure; nil + error\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 242,
    "text": "if ok then\r\n      return ... -- success, strip 'true' value\r\n   else\r\n      return nil, ... -- failure; nil + error\r\n   end",
    "type": "statement:if"
  }, {
    "id": 243,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 244,
    "text": "function runner.excludefile(name)\r\n  return checkresult(pcall(addfiletolist, name, runner.configuration.exclude))\r\nend",
    "type": "function"
  }, {
    "id": 245,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 246,
    "text": "function runner.includefile(name)\r\n  return checkresult(pcall(addfiletolist, name, runner.configuration.include))\r\nend",
    "type": "function"
  }, {
    "id": 247,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 248,
    "text": "function runner.excludetree(name, level)\r\n  return checkresult(pcall(addtreetolist, name, level, runner.configuration.exclude))\r\nend",
    "type": "function"
  }, {
    "id": 249,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 250,
    "text": "function runner.includetree(name, level)\r\n  return checkresult(pcall(addtreetolist, name, level, runner.configuration.include))\r\nend",
    "type": "function"
  }, {
    "id": 251,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 252,
    "text": "function() return debug.gethook() end",
    "type": "function"
  }, {
    "id": 253,
    "text": "function(...)\r\n      if has_hook_per_thread() then\r\n         debug.sethook(runner.debug_hook, \"l\")\r\n      end\r\n\r\n      return f(...)\r\n   end",
    "type": "function"
  }, {
    "id": 254,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 255,
    "text": "function(...)\r\n            return safeassert(coroutine.resume(co, ...))\r\n         end",
    "type": "function"
  }, {
    "id": 256,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 257,
    "text": "function(_, configfile) runner.init(configfile) end",
    "type": "function"
  }, {
    "id": 258,
    "text": "runner.init(configfile)",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "",
    "type": "function container"
  }, {
    "id": 260,
    "text": "sethook",
    "type": "global function"
  }, {
    "id": 261,
    "text": "load_config",
    "type": "global function"
  }, {
    "id": 262,
    "text": "save",
    "type": "global function"
  }, {
    "id": 263,
    "text": "file_exists",
    "type": "global function"
  }, {
    "id": 264,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 265,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 266,
    "text": "gethook",
    "type": "global function"
  }, {
    "id": 267,
    "text": "load",
    "type": "global function"
  }, {
    "id": 268,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 269,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 270,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 271,
    "text": "max",
    "type": "global function"
  }, {
    "id": 272,
    "text": "save_stats",
    "type": "global function"
  }, {
    "id": 273,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 274,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 275,
    "text": "f",
    "type": "global function"
  }, {
    "id": 276,
    "text": "rawcoroutinecreate",
    "type": "global function"
  }, {
    "id": 277,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 278,
    "text": "error",
    "type": "global function"
  }, {
    "id": 279,
    "text": "popen",
    "type": "global function"
  }, {
    "id": 280,
    "text": "sort",
    "type": "global function"
  }, {
    "id": 281,
    "text": "file_included",
    "type": "global function"
  }, {
    "id": 282,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 283,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 284,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 285,
    "text": "match",
    "type": "global function"
  }, {
    "id": 286,
    "text": "type",
    "type": "global function"
  }, {
    "id": 287,
    "text": "require",
    "type": "global function"
  }, {
    "id": 288,
    "text": "raw_os_exit",
    "type": "global function"
  }, {
    "id": 289,
    "text": "util)",
    "type": "module"
  }, {
    "id": 290,
    "text": "stats)",
    "type": "module"
  }, {
    "id": 291,
    "text": "",
    "type": "variable container"
  }, {
    "id": 292,
    "text": "",
    "type": "require container"
  }, {
    "id": 293,
    "text": "",
    "type": "local variable"
  }, {
    "id": 294,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 295,
    "text": "",
    "type": "local variable"
  }, {
    "id": 296,
    "text": "",
    "type": "n/a"
  }, {
    "id": 297,
    "text": "",
    "type": "local variable"
  }, {
    "id": 298,
    "text": "",
    "type": "n/a"
  }, {
    "id": 299,
    "text": "",
    "type": "local variable"
  }, {
    "id": 300,
    "text": "",
    "type": "n/a"
  }, {
    "id": 301,
    "text": "",
    "type": "local variable"
  }, {
    "id": 302,
    "text": "",
    "type": "boolean"
  }, {
    "id": 303,
    "text": "",
    "type": "local variable"
  }, {
    "id": 304,
    "text": "",
    "type": "n/a"
  }, {
    "id": 305,
    "text": "",
    "type": "local variable"
  }, {
    "id": 306,
    "text": "",
    "type": "string"
  }, {
    "id": 307,
    "text": "",
    "type": "local variable"
  }, {
    "id": 308,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 309,
    "text": "",
    "type": "string"
  }, {
    "id": 310,
    "text": "",
    "type": "string"
  }, {
    "id": 311,
    "text": "",
    "type": "string"
  }, {
    "id": 312,
    "text": "",
    "type": "string"
  }, {
    "id": 313,
    "text": "",
    "type": "string"
  }, {
    "id": 314,
    "text": "",
    "type": "string"
  }, {
    "id": 315,
    "text": "",
    "type": "string"
  }, {
    "id": 316,
    "text": "",
    "type": "string"
  }, {
    "id": 317,
    "text": "",
    "type": "string"
  }, {
    "id": 318,
    "text": "",
    "type": "string"
  }, {
    "id": 319,
    "text": "",
    "type": "local variable"
  }, {
    "id": 320,
    "text": "",
    "type": "string"
  }, {
    "id": 321,
    "text": "",
    "type": "local variable"
  }, {
    "id": 322,
    "text": "",
    "type": "global variable"
  }, {
    "id": 323,
    "text": "",
    "type": "global variable"
  }, {
    "id": 324,
    "text": "",
    "type": "n/a"
  }, {
    "id": 325,
    "text": "",
    "type": "global variable"
  }, {
    "id": 326,
    "text": "",
    "type": "global variable"
  }, {
    "id": 327,
    "text": "",
    "type": "global variable"
  }, {
    "id": 328,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 329,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 330,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 331,
    "text": "(debug)",
    "type": "module"
  }, {
    "id": 332,
    "text": "",
    "type": "global variable"
  }, {
    "id": 333,
    "text": "(reporter)",
    "type": "module"
  }, {
    "id": 334,
    "text": "",
    "type": "interface container"
  }, {
    "id": 335,
    "text": "",
    "type": "interface"
  }, {
    "id": 336,
    "text": "",
    "type": "interface"
  }, {
    "id": 337,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 338,
    "text": "",
    "type": "require container"
  }, {
    "id": 339,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 340,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 341,
    "text": "",
    "type": "require local variable"
  } ]
}