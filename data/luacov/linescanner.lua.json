{
  "_filename": "linescanner.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luacov/tests/linescanner.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 7,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 2,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "calls",
    "to": 21
  }, {
    "from": 2,
    "label": "calls",
    "to": 19
  }, {
    "from": 2,
    "label": "calls",
    "to": 22
  }, {
    "from": 18,
    "label": "calls",
    "to": 23
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 2
  }, {
    "from": 18,
    "label": "calls",
    "to": 20
  }, {
    "from": 1,
    "label": "contains",
    "to": 18
  }, {
    "from": 18,
    "label": "declares",
    "to": 2
  }, {
    "from": 1,
    "label": "contains",
    "to": 24
  }, {
    "from": 1,
    "label": "contains",
    "to": 25
  }, {
    "from": 24,
    "label": "initializes",
    "to": 26
  }, {
    "from": 26,
    "label": "assigns",
    "to": 27
  }, {
    "from": 24,
    "label": "initializes",
    "to": 28
  }, {
    "from": 28,
    "label": "assigns",
    "to": 29
  }, {
    "from": 25,
    "label": "initializes",
    "to": 30
  }, {
    "from": 30,
    "label": "requires",
    "to": 31
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "linescanner",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function test(source)\r\n   ntests = ntests + 1\r\n\r\n   local lines = {}\r\n   local failed = false\r\n   local scanner = LineScanner:new()\r\n\r\n   for line in source:gmatch(\"[^\\n]+\") do\r\n      local expected_symbol = line:sub(-1)\r\n      line = line:sub(1, -2)\r\n\r\n      local always_excluded, excluded_when_not_hit = scanner:consume(line)\r\n      local actual_symbol = always_excluded and \"-\" or (excluded_when_not_hit and \"?\" or \"+\")\r\n\r\n      if actual_symbol ~= expected_symbol then\r\n         failed = true\r\n      end\r\n\r\n      table.insert(lines, line..expected_symbol..\" \"..actual_symbol)\r\n   end\r\n\r\n   if failed then\r\n      error((\"LineScanner test #%d failed!\\nLine/expected/actual:\\n\\n%s\"):format(\r\n         ntests, table.concat(lines, \"\\n\")\r\n      ), 0)\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "ntests = ntests + 1",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "local lines = {}",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local failed = false",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local scanner = LineScanner:new()",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "for line in source:gmatch(\"[^\\n]+\") do\r\n      local expected_symbol = line:sub(-1)\r\n      line = line:sub(1, -2)\r\n\r\n      local always_excluded, excluded_when_not_hit = scanner:consume(line)\r\n      local actual_symbol = always_excluded and \"-\" or (excluded_when_not_hit and \"?\" or \"+\")\r\n\r\n      if actual_symbol ~= expected_symbol then\r\n         failed = true\r\n      end\r\n\r\n      table.insert(lines, line..expected_symbol..\" \"..actual_symbol)\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 8,
    "text": "local expected_symbol = line:sub(-1)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "line = line:sub(1, -2)",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "local always_excluded, excluded_when_not_hit = scanner:consume(line)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local actual_symbol = always_excluded and \"-\" or (excluded_when_not_hit and \"?\" or \"+\")",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if actual_symbol ~= expected_symbol then\r\n         failed = true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "failed = true",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "table.insert(lines, line..expected_symbol..\" \"..actual_symbol)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "if failed then\r\n      error((\"LineScanner test #%d failed!\\nLine/expected/actual:\\n\\n%s\"):format(\r\n         ntests, table.concat(lines, \"\\n\")\r\n      ), 0)\r\n   end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "error((\"LineScanner test #%d failed!\\nLine/expected/actual:\\n\\n%s\"):format(\r\n         ntests, table.concat(lines, \"\\n\")\r\n      ), 0)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "",
    "type": "function container"
  }, {
    "id": 19,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 20,
    "text": "print",
    "type": "global function"
  }, {
    "id": 21,
    "text": "error",
    "type": "global function"
  }, {
    "id": 22,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 23,
    "text": "require",
    "type": "global function"
  }, {
    "id": 24,
    "text": "",
    "type": "variable container"
  }, {
    "id": 25,
    "text": "",
    "type": "require container"
  }, {
    "id": 26,
    "text": "",
    "type": "local variable"
  }, {
    "id": 27,
    "text": "",
    "type": "number"
  }, {
    "id": 28,
    "text": "",
    "type": "global variable"
  }, {
    "id": 29,
    "text": "",
    "type": "n/a"
  }, {
    "id": 30,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 31,
    "text": "reporter)",
    "type": "module"
  } ]
}