{
  "_filename": "cli.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luacov/tests/cli.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 13,
    "label": "has",
    "to": 20
  }, {
    "from": 13,
    "label": "has",
    "to": 21
  }, {
    "from": 13,
    "label": "has",
    "to": 22
  }, {
    "from": 13,
    "label": "has",
    "to": 23
  }, {
    "from": 13,
    "label": "has",
    "to": 24
  }, {
    "from": 13,
    "label": "has",
    "to": 25
  }, {
    "from": 13,
    "label": "has",
    "to": 26
  }, {
    "from": 13,
    "label": "has",
    "to": 27
  }, {
    "from": 13,
    "label": "has",
    "to": 28
  }, {
    "from": 13,
    "label": "has",
    "to": 29
  }, {
    "from": 13,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 13,
    "label": "has",
    "to": 34
  }, {
    "from": 13,
    "label": "has",
    "to": 18
  }, {
    "from": 13,
    "label": "has",
    "to": 19
  }, {
    "from": 13,
    "label": "has",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 7,
    "label": "calls",
    "to": 37
  }, {
    "from": 7,
    "label": "calls",
    "to": 37
  }, {
    "from": 13,
    "label": "calls",
    "to": 37
  }, {
    "from": 13,
    "label": "calls",
    "to": 7
  }, {
    "from": 13,
    "label": "calls",
    "to": 7
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 2
  }, {
    "from": 13,
    "label": "calls",
    "to": 39
  }, {
    "from": 13,
    "label": "calls",
    "to": 39
  }, {
    "from": 13,
    "label": "calls",
    "to": 39
  }, {
    "from": 13,
    "label": "calls",
    "to": 39
  }, {
    "from": 36,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 41
  }, {
    "from": 7,
    "label": "calls",
    "to": 42
  }, {
    "from": 36,
    "label": "calls",
    "to": 38
  }, {
    "from": 36,
    "label": "calls",
    "to": 13
  }, {
    "from": 36,
    "label": "calls",
    "to": 13
  }, {
    "from": 36,
    "label": "calls",
    "to": 13
  }, {
    "from": 36,
    "label": "calls",
    "to": 13
  }, {
    "from": 36,
    "label": "calls",
    "to": 13
  }, {
    "from": 36,
    "label": "calls",
    "to": 13
  }, {
    "from": 36,
    "label": "calls",
    "to": 13
  }, {
    "from": 1,
    "label": "contains",
    "to": 36
  }, {
    "from": 36,
    "label": "declares",
    "to": 2
  }, {
    "from": 36,
    "label": "declares",
    "to": 7
  }, {
    "from": 36,
    "label": "declares",
    "to": 13
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 1,
    "label": "contains",
    "to": 44
  }, {
    "from": 43,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 43,
    "label": "initializes",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 43,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 43,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "cli",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function exec(cmd)\r\n   local err_msg = (\"CLI test #%d failed (%s)\"):format(ntests, cmd)\r\n   local ok = assert(os.execute(cmd), err_msg)\r\n   assert(ok == 0 or ok == true, err_msg)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local err_msg = (\"CLI test #%d failed (%s)\"):format(ntests, cmd)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local ok = assert(os.execute(cmd), err_msg)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "assert(ok == 0 or ok == true, err_msg)",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function read(file)\r\n   local handler = assert(io.open(file))\r\n   local contents = assert(handler:read(\"*a\"))\r\n   handler:close()\r\n   return contents\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local handler = assert(io.open(file))",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local contents = assert(handler:read(\"*a\"))",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "handler:close()",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "local function test(dir, expected_file, flags)\r\n   ntests = ntests + 1\r\n   local test_dir = \"tests\" .. dir_sep .. dir\r\n   expected_file = expected_file or \"expected.out\"\r\n   flags = flags or \"\"\r\n\r\n   os.remove(test_dir .. dir_sep .. \"luacov.stats.out\")\r\n   os.remove(test_dir .. dir_sep .. \"luacov.report.out\")\r\n   local init_lua = \"package.path=[[?.lua;../../src/?.lua;]]..package.path; corowrap = coroutine.wrap\"\r\n   init_lua = init_lua:gsub(\"/\", dir_sep)\r\n   exec((\"cd %q && %q -e %q -lluacov test.lua\"):format(\r\n      test_dir, lua, init_lua))\r\n   local luacov_path = (\"../../src/bin/luacov\"):gsub(\"/\", dir_sep)\r\n   exec((\"cd %q && %q -e %q %s %s\"):format(\r\n      test_dir, lua, init_lua, luacov_path, flags))\r\n\r\n   expected_file = test_dir .. dir_sep .. expected_file\r\n   local expected = read(expected_file)\r\n   local actual_file = test_dir .. dir_sep .. \"luacov.report.out\"\r\n   local actual = read(actual_file)\r\n\r\n   local ok\r\n\r\n   if expected:find(\"X\") then\r\n      local expected_pattern = expected:gsub(\"%p\", \"%%%0\"):gsub(\"X\", \"%%d+\")\r\n      ok = actual:match(\"^\" .. expected_pattern .. \"$\")\r\n   else\r\n      ok = actual == expected\r\n   end\r\n\r\n   assert(ok, (\"CLI test #%d failed (%s ~= %s)\"):format(ntests, actual_file, expected_file))\r\n   os.remove(test_dir .. dir_sep .. \"luacov.stats.out\")\r\n   os.remove(test_dir .. dir_sep .. \"luacov.report.out\")\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "ntests = ntests + 1",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "local test_dir = \"tests\" .. dir_sep .. dir",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "expected_file = expected_file or \"expected.out\"",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "flags = flags or \"\"",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "os.remove(test_dir .. dir_sep .. \"luacov.stats.out\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "os.remove(test_dir .. dir_sep .. \"luacov.report.out\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "local init_lua = \"package.path=[[?.lua;../../src/?.lua;]]..package.path; corowrap = coroutine.wrap\"",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "init_lua = init_lua:gsub(\"/\", dir_sep)",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "exec((\"cd %q && %q -e %q -lluacov test.lua\"):format(\r\n      test_dir, lua, init_lua))",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "local luacov_path = (\"../../src/bin/luacov\"):gsub(\"/\", dir_sep)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "exec((\"cd %q && %q -e %q %s %s\"):format(\r\n      test_dir, lua, init_lua, luacov_path, flags))",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "expected_file = test_dir .. dir_sep .. expected_file",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "local expected = read(expected_file)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local actual_file = test_dir .. dir_sep .. \"luacov.report.out\"",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local actual = read(actual_file)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local ok",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if expected:find(\"X\") then\r\n      local expected_pattern = expected:gsub(\"%p\", \"%%%0\"):gsub(\"X\", \"%%d+\")\r\n      ok = actual:match(\"^\" .. expected_pattern .. \"$\")\r\n   else\r\n      ok = actual == expected\r\n   end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "local expected_pattern = expected:gsub(\"%p\", \"%%%0\"):gsub(\"X\", \"%%d+\")",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "ok = actual:match(\"^\" .. expected_pattern .. \"$\")",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "ok = actual == expected",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "assert(ok, (\"CLI test #%d failed (%s ~= %s)\"):format(ntests, actual_file, expected_file))",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "",
    "type": "function container"
  }, {
    "id": 37,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 38,
    "text": "print",
    "type": "global function"
  }, {
    "id": 39,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 40,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 41,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 42,
    "text": "open",
    "type": "global function"
  }, {
    "id": 43,
    "text": "",
    "type": "variable container"
  }, {
    "id": 44,
    "text": "",
    "type": "require container"
  }, {
    "id": 45,
    "text": "",
    "type": "local variable"
  }, {
    "id": 46,
    "text": "",
    "type": "n/a"
  }, {
    "id": 47,
    "text": "",
    "type": "local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "n/a"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "n/a"
  }, {
    "id": 51,
    "text": "",
    "type": "local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "number"
  } ]
}