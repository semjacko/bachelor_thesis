{
  "_filename": "hook.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacov/src/luacov/hook.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 2,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 2,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 6
  }, {
    "from": 32,
    "label": "has",
    "to": 7
  }, {
    "from": 32,
    "label": "has",
    "to": 5
  }, {
    "from": 32,
    "label": "has",
    "to": 8
  }, {
    "from": 32,
    "label": "has",
    "to": 9
  }, {
    "from": 32,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 32,
    "label": "has",
    "to": 5
  }, {
    "from": 32,
    "label": "has",
    "to": 12
  }, {
    "from": 32,
    "label": "has",
    "to": 13
  }, {
    "from": 32,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 32,
    "label": "has",
    "to": 5
  }, {
    "from": 32,
    "label": "has",
    "to": 5
  }, {
    "from": 32,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 32,
    "label": "has",
    "to": 21
  }, {
    "from": 32,
    "label": "has",
    "to": 22
  }, {
    "from": 32,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 32,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 2,
    "label": "calls",
    "to": 35
  }, {
    "from": 2,
    "label": "calls",
    "to": 38
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 34,
    "label": "declares",
    "to": 2
  }, {
    "from": 34,
    "label": "declares",
    "to": 32
  }, {
    "from": 1,
    "label": "contains",
    "to": 39
  }, {
    "from": 1,
    "label": "contains",
    "to": 40
  }, {
    "from": 39,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 1,
    "label": "provides",
    "to": 43
  }, {
    "from": 41,
    "label": "represents",
    "to": 44
  }, {
    "from": 43,
    "label": "provides",
    "to": 44
  }, {
    "from": 41,
    "label": "contains",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "hook",
    "type": "module"
  }, {
    "id": 2,
    "text": "function hook.new(runner)\r\n   local ignored_files = {}\r\n   local steps_after_save = 0\r\n\r\n   return function(_, line_nr, level)\r\n      -- Do not use string metamethods within the debug hook:\r\n      -- they may be absent if it's called from a sandboxed environment\r\n      -- or because of carelessly implemented monkey-patching.\r\n      level = level or 2\r\n      if not runner.initialized then\r\n         return\r\n      end\r\n\r\n      -- Get name of processed file.\r\n      local name = debug.getinfo(level, \"S\").source\r\n      local prefixed_name = string.match(name, \"^@(.*)\")\r\n      if prefixed_name then\r\n         name = prefixed_name\r\n      elseif not runner.configuration.codefromstrings then\r\n         -- Ignore Lua code loaded from raw strings by default.\r\n         return\r\n      end\r\n\r\n      local data = runner.data\r\n      local file = data[name]\r\n\r\n      if not file then\r\n         -- New or ignored file.\r\n         if ignored_files[name] then\r\n            return\r\n         elseif runner.file_included(name) then\r\n            file = {max = 0, max_hits = 0}\r\n            data[name] = file\r\n         else\r\n            ignored_files[name] = true\r\n            return\r\n         end\r\n      end\r\n\r\n      if line_nr > file.max then\r\n         file.max = line_nr\r\n      end\r\n\r\n      local hits = (file[line_nr] or 0) + 1\r\n      file[line_nr] = hits\r\n\r\n      if hits > file.max_hits then\r\n         file.max_hits = hits\r\n      end\r\n\r\n      if runner.tick then\r\n         steps_after_save = steps_after_save + 1\r\n\r\n         if steps_after_save == runner.configuration.savestepsize then\r\n            steps_after_save = 0\r\n\r\n            if not runner.paused then\r\n               runner.save_stats()\r\n            end\r\n         end\r\n      end\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local ignored_files = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local steps_after_save = 0",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "level = level or 2",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "if not runner.initialized then\r\n         return\r\n      end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "local name = debug.getinfo(level, \"S\").source",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local prefixed_name = string.match(name, \"^@(.*)\")",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if prefixed_name then\r\n         name = prefixed_name\r\n      elseif not runner.configuration.codefromstrings then\r\n         -- Ignore Lua code loaded from raw strings by default.\r\n         return\r\n      end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "name = prefixed_name",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "local data = runner.data",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local file = data[name]",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if not file then\r\n         -- New or ignored file.\r\n         if ignored_files[name] then\r\n            return\r\n         elseif runner.file_included(name) then\r\n            file = {max = 0, max_hits = 0}\r\n            data[name] = file\r\n         else\r\n            ignored_files[name] = true\r\n            return\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "if ignored_files[name] then\r\n            return\r\n         elseif runner.file_included(name) then\r\n            file = {max = 0, max_hits = 0}\r\n            data[name] = file\r\n         else\r\n            ignored_files[name] = true\r\n            return\r\n         end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "file = {max = 0, max_hits = 0}",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "data[name] = file",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "ignored_files[name] = true",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "if line_nr > file.max then\r\n         file.max = line_nr\r\n      end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "file.max = line_nr",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "local hits = (file[line_nr] or 0) + 1",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "file[line_nr] = hits",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if hits > file.max_hits then\r\n         file.max_hits = hits\r\n      end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "file.max_hits = hits",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "if runner.tick then\r\n         steps_after_save = steps_after_save + 1\r\n\r\n         if steps_after_save == runner.configuration.savestepsize then\r\n            steps_after_save = 0\r\n\r\n            if not runner.paused then\r\n               runner.save_stats()\r\n            end\r\n         end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "steps_after_save = steps_after_save + 1",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "if steps_after_save == runner.configuration.savestepsize then\r\n            steps_after_save = 0\r\n\r\n            if not runner.paused then\r\n               runner.save_stats()\r\n            end\r\n         end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "steps_after_save = 0",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "if not runner.paused then\r\n               runner.save_stats()\r\n            end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "runner.save_stats()",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function(_, line_nr, level)\r\n      -- Do not use string metamethods within the debug hook:\r\n      -- they may be absent if it's called from a sandboxed environment\r\n      -- or because of carelessly implemented monkey-patching.\r\n      level = level or 2\r\n      if not runner.initialized then\r\n         return\r\n      end\r\n\r\n      -- Get name of processed file.\r\n      local name = debug.getinfo(level, \"S\").source\r\n      local prefixed_name = string.match(name, \"^@(.*)\")\r\n      if prefixed_name then\r\n         name = prefixed_name\r\n      elseif not runner.configuration.codefromstrings then\r\n         -- Ignore Lua code loaded from raw strings by default.\r\n         return\r\n      end\r\n\r\n      local data = runner.data\r\n      local file = data[name]\r\n\r\n      if not file then\r\n         -- New or ignored file.\r\n         if ignored_files[name] then\r\n            return\r\n         elseif runner.file_included(name) then\r\n            file = {max = 0, max_hits = 0}\r\n            data[name] = file\r\n         else\r\n            ignored_files[name] = true\r\n            return\r\n         end\r\n      end\r\n\r\n      if line_nr > file.max then\r\n         file.max = line_nr\r\n      end\r\n\r\n      local hits = (file[line_nr] or 0) + 1\r\n      file[line_nr] = hits\r\n\r\n      if hits > file.max_hits then\r\n         file.max_hits = hits\r\n      end\r\n\r\n      if runner.tick then\r\n         steps_after_save = steps_after_save + 1\r\n\r\n         if steps_after_save == runner.configuration.savestepsize then\r\n            steps_after_save = 0\r\n\r\n            if not runner.paused then\r\n               runner.save_stats()\r\n            end\r\n         end\r\n      end\r\n   end",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "",
    "type": "function container"
  }, {
    "id": 35,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 36,
    "text": "save_stats",
    "type": "global function"
  }, {
    "id": 37,
    "text": "file_included",
    "type": "global function"
  }, {
    "id": 38,
    "text": "match",
    "type": "global function"
  }, {
    "id": 39,
    "text": "",
    "type": "variable container"
  }, {
    "id": 40,
    "text": "",
    "type": "require container"
  }, {
    "id": 41,
    "text": "",
    "type": "local variable"
  }, {
    "id": 42,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 43,
    "text": "",
    "type": "interface container"
  }, {
    "id": 44,
    "text": "",
    "type": "interface"
  } ]
}