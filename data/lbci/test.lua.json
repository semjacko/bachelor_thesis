{
  "_filename": "test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lbci/test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 2,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 2,
    "label": "has",
    "to": 29
  }, {
    "from": 2,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 2,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 34,
    "label": "has",
    "to": 39
  }, {
    "from": 34,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "calls",
    "to": 34
  }, {
    "from": 41,
    "label": "calls",
    "to": 34
  }, {
    "from": 41,
    "label": "calls",
    "to": 34
  }, {
    "from": 41,
    "label": "calls",
    "to": 34
  }, {
    "from": 41,
    "label": "calls",
    "to": 34
  }, {
    "from": 41,
    "label": "calls",
    "to": 42
  }, {
    "from": 41,
    "label": "calls",
    "to": 42
  }, {
    "from": 41,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 48
  }, {
    "from": 41,
    "label": "calls",
    "to": 48
  }, {
    "from": 2,
    "label": "calls",
    "to": 2
  }, {
    "from": 41,
    "label": "calls",
    "to": 2
  }, {
    "from": 41,
    "label": "calls",
    "to": 2
  }, {
    "from": 41,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 46
  }, {
    "from": 2,
    "label": "calls",
    "to": 46
  }, {
    "from": 2,
    "label": "calls",
    "to": 47
  }, {
    "from": 2,
    "label": "calls",
    "to": 45
  }, {
    "from": 2,
    "label": "calls",
    "to": 43
  }, {
    "from": 2,
    "label": "calls",
    "to": 49
  }, {
    "from": 2,
    "label": "calls",
    "to": 49
  }, {
    "from": 2,
    "label": "calls",
    "to": 49
  }, {
    "from": 41,
    "label": "calls",
    "to": 50
  }, {
    "from": 41,
    "label": "calls",
    "to": 44
  }, {
    "from": 2,
    "label": "calls",
    "to": 51
  }, {
    "from": 1,
    "label": "contains",
    "to": 41
  }, {
    "from": 41,
    "label": "declares",
    "to": 2
  }, {
    "from": 41,
    "label": "declares",
    "to": 34
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 1,
    "label": "contains",
    "to": 54
  }, {
    "from": 53,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 54,
    "label": "initializes",
    "to": 52
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function inspect(f,all)\r\n local F=inspector.getheader(f)\r\n print(\"header\",f)\r\n for k,v in next,F do\r\n  print(\"\",k,v)\r\n end\r\n\r\n print(\"constants\",F.constants)\r\n for i=1,F.constants do\r\n  local a=inspector.getconstant(f,i)\r\n  print(\"\",i,a)\r\n end\r\n\r\n print(\"locals\",F.locals)\r\n for i=1,F.locals do\r\n  local a,b,c=inspector.getlocal(f,i)\r\n  print(\"\",i,a,b,c)\r\n end\r\n\r\n print(\"upvalues\",F.upvalues)\r\n for i=1,F.upvalues do\r\n  local a=inspector.getupvalue(f,i)\r\n  print(\"\",i,a)\r\n end\r\n\r\n print(\"functions\",F.functions)\r\n for i=1,F.functions do\r\n  local a=inspector.getfunction(f,i)\r\n  print(\"\",i,a)\r\n end\r\n\r\n print(\"instructions\",F.instructions)\r\n for i=1,F.instructions do\r\n  local a,b,c,d,e=inspector.getinstruction(f,i)\r\n  print(\"\",i,a,b,c,d,e)\r\n  if b==\"GETGLOBAL\" then print(\">>> \",inspector.getconstant(f,-d)) end\r\n  if b==\"SETGLOBAL\" then print(\">>>*\",inspector.getconstant(f,-d)) end\r\n end\r\n\r\n print()\r\n if all then\r\n  for i=1,F.functions do\r\n   inspect(inspector.getfunction(f,i),all)\r\n  end\r\n end\r\n\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local F=inspector.getheader(f)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "print(\"header\",f)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "for k,v in next,F do\r\n  print(\"\",k,v)\r\n end",
    "type": "statement:genericfor"
  }, {
    "id": 6,
    "text": "print(\"\",k,v)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "print(\"constants\",F.constants)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "for i=1,F.constants do\r\n  local a=inspector.getconstant(f,i)\r\n  print(\"\",i,a)\r\n end",
    "type": "statement:numericfor"
  }, {
    "id": 9,
    "text": "local a=inspector.getconstant(f,i)",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "print(\"\",i,a)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "print(\"locals\",F.locals)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "for i=1,F.locals do\r\n  local a,b,c=inspector.getlocal(f,i)\r\n  print(\"\",i,a,b,c)\r\n end",
    "type": "statement:numericfor"
  }, {
    "id": 13,
    "text": "local a,b,c=inspector.getlocal(f,i)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "print(\"\",i,a,b,c)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "print(\"upvalues\",F.upvalues)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "for i=1,F.upvalues do\r\n  local a=inspector.getupvalue(f,i)\r\n  print(\"\",i,a)\r\n end",
    "type": "statement:numericfor"
  }, {
    "id": 17,
    "text": "local a=inspector.getupvalue(f,i)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "print(\"functions\",F.functions)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "for i=1,F.functions do\r\n  local a=inspector.getfunction(f,i)\r\n  print(\"\",i,a)\r\n end",
    "type": "statement:numericfor"
  }, {
    "id": 20,
    "text": "local a=inspector.getfunction(f,i)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "print(\"instructions\",F.instructions)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "for i=1,F.instructions do\r\n  local a,b,c,d,e=inspector.getinstruction(f,i)\r\n  print(\"\",i,a,b,c,d,e)\r\n  if b==\"GETGLOBAL\" then print(\">>> \",inspector.getconstant(f,-d)) end\r\n  if b==\"SETGLOBAL\" then print(\">>>*\",inspector.getconstant(f,-d)) end\r\n end",
    "type": "statement:numericfor"
  }, {
    "id": 23,
    "text": "local a,b,c,d,e=inspector.getinstruction(f,i)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "print(\"\",i,a,b,c,d,e)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "if b==\"GETGLOBAL\" then print(\">>> \",inspector.getconstant(f,-d)) end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "print(\">>> \",inspector.getconstant(f,-d))",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "if b==\"SETGLOBAL\" then print(\">>>*\",inspector.getconstant(f,-d)) end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "print(\">>>*\",inspector.getconstant(f,-d))",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "print()",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "if all then\r\n  for i=1,F.functions do\r\n   inspect(inspector.getfunction(f,i),all)\r\n  end\r\n end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "for i=1,F.functions do\r\n   inspect(inspector.getfunction(f,i),all)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 32,
    "text": "inspect(inspector.getfunction(f,i),all)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function (x,y)\r\n\tprint(x,\"=\",y,23)\r\n\tlocal z=x+2*y\r\n\tlocal last\r\n\tX=245\r\n\treturn inspect\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "print(x,\"=\",y,23)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "local z=x+2*y",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "local last",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "X=245",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "",
    "type": "function container"
  }, {
    "id": 42,
    "text": "setconstant",
    "type": "global function"
  }, {
    "id": 43,
    "text": "getheader",
    "type": "global function"
  }, {
    "id": 44,
    "text": "getinfo",
    "type": "global function"
  }, {
    "id": 45,
    "text": "getupvalue",
    "type": "global function"
  }, {
    "id": 46,
    "text": "getfunction",
    "type": "global function"
  }, {
    "id": 47,
    "text": "getlocal",
    "type": "global function"
  }, {
    "id": 48,
    "text": "print",
    "type": "global function"
  }, {
    "id": 49,
    "text": "getconstant",
    "type": "global function"
  }, {
    "id": 50,
    "text": "require",
    "type": "global function"
  }, {
    "id": 51,
    "text": "getinstruction",
    "type": "global function"
  }, {
    "id": 52,
    "text": "",
    "type": "global variable"
  }, {
    "id": 53,
    "text": "",
    "type": "variable container"
  }, {
    "id": 54,
    "text": "",
    "type": "require container"
  }, {
    "id": 55,
    "text": "",
    "type": "global variable"
  }, {
    "id": 56,
    "text": "",
    "type": "n/a"
  } ]
}