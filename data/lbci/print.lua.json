{
  "_filename": "print.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lbci/print.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 12,
    "label": "has",
    "to": 23
  }, {
    "from": 12,
    "label": "has",
    "to": 24
  }, {
    "from": 12,
    "label": "has",
    "to": 25
  }, {
    "from": 12,
    "label": "has",
    "to": 26
  }, {
    "from": 12,
    "label": "has",
    "to": 27
  }, {
    "from": 12,
    "label": "has",
    "to": 28
  }, {
    "from": 12,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 12,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 12,
    "label": "has",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 43
  }, {
    "from": 8,
    "label": "calls",
    "to": 43
  }, {
    "from": 12,
    "label": "calls",
    "to": 43
  }, {
    "from": 12,
    "label": "calls",
    "to": 43
  }, {
    "from": 12,
    "label": "calls",
    "to": 43
  }, {
    "from": 42,
    "label": "calls",
    "to": 44
  }, {
    "from": 12,
    "label": "calls",
    "to": 45
  }, {
    "from": 12,
    "label": "calls",
    "to": 12
  }, {
    "from": 42,
    "label": "calls",
    "to": 12
  }, {
    "from": 42,
    "label": "calls",
    "to": 12
  }, {
    "from": 12,
    "label": "calls",
    "to": 46
  }, {
    "from": 12,
    "label": "calls",
    "to": 8
  }, {
    "from": 12,
    "label": "calls",
    "to": 8
  }, {
    "from": 12,
    "label": "calls",
    "to": 8
  }, {
    "from": 42,
    "label": "calls",
    "to": 47
  }, {
    "from": 12,
    "label": "calls",
    "to": 2
  }, {
    "from": 12,
    "label": "calls",
    "to": 2
  }, {
    "from": 12,
    "label": "calls",
    "to": 2
  }, {
    "from": 12,
    "label": "calls",
    "to": 2
  }, {
    "from": 12,
    "label": "calls",
    "to": 2
  }, {
    "from": 12,
    "label": "calls",
    "to": 2
  }, {
    "from": 12,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 48
  }, {
    "from": 42,
    "label": "calls",
    "to": 49
  }, {
    "from": 2,
    "label": "calls",
    "to": 50
  }, {
    "from": 12,
    "label": "calls",
    "to": 50
  }, {
    "from": 12,
    "label": "calls",
    "to": 51
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 42,
    "label": "declares",
    "to": 2
  }, {
    "from": 42,
    "label": "declares",
    "to": 8
  }, {
    "from": 42,
    "label": "declares",
    "to": 12
  }, {
    "from": 42,
    "label": "declares",
    "to": 41
  }, {
    "from": 1,
    "label": "contains",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 53
  }, {
    "from": 52,
    "label": "initializes",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 52,
    "label": "initializes",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 53,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "requires",
    "to": 59
  }, {
    "from": 60,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "requires",
    "to": 59
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "print",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function S(t,k,x,c)\r\n\tlocal n=t[k]\r\n\tif n==1 then k=string.sub(k,1,-2) end\r\n\twrite(n,x or \"\",\" \",k,c or \", \")\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local n=t[k]",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if n==1 then k=string.sub(k,1,-2) end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "k=string.sub(k,1,-2)",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "write(n,x or \"\",\" \",k,c or \", \")",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function constant(f,i)\r\n\tif i~=nil and i<0 then\r\n\t\twrite(inspector.getconstant(f,-i),\" \")\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "if i~=nil and i<0 then\r\n\t\twrite(inspector.getconstant(f,-i),\" \")\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "write(inspector.getconstant(f,-i),\" \")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function inspect(f,all)\r\n local F=inspector.getheader(f)\r\n local k\r\n\r\n if F.line==0 then k=\"main\" else k=\"function\" end\r\n write(\"\\n\",k,\" <\",F.source,\":\",F.line,\",\",F.lastline,\"> (\")\r\n S(F,\"instructions\",nil,\")\\n\")\r\n if F.isvararg then k=\"+\" else k=\"\" end\r\n S(F,\"params\",k)\r\n S(F,\"slots\")\r\n S(F,\"upvalues\")\r\n S(F,\"locals\")\r\n S(F,\"constants\")\r\n S(F,\"functions\",nil,\"\\n\")\r\n\r\n for i=1,F.instructions do\r\n  local a,b,c,d,e=inspector.getinstruction(f,i)\r\n  b=string.sub(b..\"          \",1,9)\r\n  write(\"\\t\",i,\"\\t[\",a,\"]\\t\",b,\"\\t\",c,\" \",d,\" \",e or \"\",\"\\t; \")\r\n  constant(f,c)\r\n  constant(f,d)\r\n  constant(f,e)\r\n  write(\"\\n\")\r\n end\r\n\r\n if all then\r\n  for i=1,F.functions do\r\n   inspect(inspector.getfunction(f,i),all)\r\n  end\r\n end\r\n\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local F=inspector.getheader(f)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local k",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "if F.line==0 then k=\"main\" else k=\"function\" end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "k=\"main\"",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "k=\"function\"",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "write(\"\\n\",k,\" <\",F.source,\":\",F.line,\",\",F.lastline,\"> (\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "S(F,\"instructions\",nil,\")\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "if F.isvararg then k=\"+\" else k=\"\" end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "k=\"+\"",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "k=\"\"",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "S(F,\"params\",k)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "S(F,\"slots\")",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "S(F,\"upvalues\")",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "S(F,\"locals\")",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "S(F,\"constants\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "S(F,\"functions\",nil,\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "for i=1,F.instructions do\r\n  local a,b,c,d,e=inspector.getinstruction(f,i)\r\n  b=string.sub(b..\"          \",1,9)\r\n  write(\"\\t\",i,\"\\t[\",a,\"]\\t\",b,\"\\t\",c,\" \",d,\" \",e or \"\",\"\\t; \")\r\n  constant(f,c)\r\n  constant(f,d)\r\n  constant(f,e)\r\n  write(\"\\n\")\r\n end",
    "type": "statement:numericfor"
  }, {
    "id": 30,
    "text": "local a,b,c,d,e=inspector.getinstruction(f,i)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "b=string.sub(b..\"          \",1,9)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "write(\"\\t\",i,\"\\t[\",a,\"]\\t\",b,\"\\t\",c,\" \",d,\" \",e or \"\",\"\\t; \")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "constant(f,c)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "constant(f,d)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "constant(f,e)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "if all then\r\n  for i=1,F.functions do\r\n   inspect(inspector.getfunction(f,i),all)\r\n  end\r\n end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "for i=1,F.functions do\r\n   inspect(inspector.getfunction(f,i),all)\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 39,
    "text": "inspect(inspector.getfunction(f,i),all)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function () end",
    "type": "function"
  }, {
    "id": 42,
    "text": "",
    "type": "function container"
  }, {
    "id": 43,
    "text": "write",
    "type": "global function"
  }, {
    "id": 44,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 45,
    "text": "getheader",
    "type": "global function"
  }, {
    "id": 46,
    "text": "getfunction",
    "type": "global function"
  }, {
    "id": 47,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 48,
    "text": "getconstant",
    "type": "global function"
  }, {
    "id": 49,
    "text": "require",
    "type": "global function"
  }, {
    "id": 50,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 51,
    "text": "getinstruction",
    "type": "global function"
  }, {
    "id": 52,
    "text": "",
    "type": "variable container"
  }, {
    "id": 53,
    "text": "",
    "type": "require container"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "n/a"
  }, {
    "id": 56,
    "text": "",
    "type": "local variable"
  }, {
    "id": 57,
    "text": "",
    "type": "n/a"
  }, {
    "id": 58,
    "text": "",
    "type": "global variable"
  }, {
    "id": 59,
    "text": "bci",
    "type": "module"
  }, {
    "id": 60,
    "text": "",
    "type": "require container"
  } ]
}