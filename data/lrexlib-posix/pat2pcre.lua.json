{
  "_filename": "pat2pcre.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lrexlib-posix/test/pat2pcre.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 18
  }, {
    "from": 10,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 21,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 26
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 28
  }, {
    "from": 30,
    "label": "has",
    "to": 29
  }, {
    "from": 10,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 13
  }, {
    "from": 34,
    "label": "has",
    "to": 6
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 15
  }, {
    "from": 36,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 36,
    "label": "has",
    "to": 6
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 10,
    "label": "calls",
    "to": 34
  }, {
    "from": 10,
    "label": "calls",
    "to": 34
  }, {
    "from": 10,
    "label": "calls",
    "to": 34
  }, {
    "from": 36,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 2,
    "label": "calls",
    "to": 39
  }, {
    "from": 36,
    "label": "calls",
    "to": 43
  }, {
    "from": 10,
    "label": "calls",
    "to": 2
  }, {
    "from": 10,
    "label": "calls",
    "to": 36
  }, {
    "from": 10,
    "label": "calls",
    "to": 36
  }, {
    "from": 34,
    "label": "calls",
    "to": 40
  }, {
    "from": 10,
    "label": "calls",
    "to": 8
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 38,
    "label": "declares",
    "to": 2
  }, {
    "from": 38,
    "label": "declares",
    "to": 8
  }, {
    "from": 38,
    "label": "declares",
    "to": 10
  }, {
    "from": 38,
    "label": "declares",
    "to": 34
  }, {
    "from": 38,
    "label": "declares",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 44
  }, {
    "from": 1,
    "label": "contains",
    "to": 45
  }, {
    "from": 44,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "assigns",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 47,
    "label": "assigns",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 47,
    "label": "assigns",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 47,
    "label": "assigns",
    "to": 54
  }, {
    "from": 54,
    "label": "assigns",
    "to": 55
  }, {
    "from": 47,
    "label": "assigns",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 47,
    "label": "assigns",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 47,
    "label": "assigns",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 47,
    "label": "assigns",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 47,
    "label": "assigns",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 47,
    "label": "assigns",
    "to": 66
  }, {
    "from": 66,
    "label": "assigns",
    "to": 67
  }, {
    "from": 47,
    "label": "assigns",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 47,
    "label": "assigns",
    "to": 70
  }, {
    "from": 70,
    "label": "assigns",
    "to": 71
  }, {
    "from": 47,
    "label": "assigns",
    "to": 72
  }, {
    "from": 72,
    "label": "assigns",
    "to": 73
  }, {
    "from": 47,
    "label": "assigns",
    "to": 74
  }, {
    "from": 74,
    "label": "assigns",
    "to": 75
  }, {
    "from": 47,
    "label": "assigns",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 47,
    "label": "assigns",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 1,
    "label": "provides",
    "to": 80
  }, {
    "from": 41,
    "label": "represents",
    "to": 81
  }, {
    "from": 80,
    "label": "provides",
    "to": 81
  }, {
    "from": 82,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "pat2pcre",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function rep_normal (ch)\r\n  assert (ch ~= \"b\", \"\\\"%b\\\" subpattern is not supported\")\r\n  assert (ch ~= \"0\", \"invalid capture index\")\r\n  local v = t_esc[ch]\r\n  return v and (\"[\" .. v .. \"]\") or (\"\\\\\" .. ch)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "assert (ch ~= \"b\", \"\\\"%b\\\" subpattern is not supported\")",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "assert (ch ~= \"0\", \"invalid capture index\")",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "local v = t_esc[ch]",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "local function rep_charclass (ch)\r\n  return t_esc[ch] or (\"\\\\\" .. ch)\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function pat2pcre (s)\r\n  local ind = 0\r\n\r\n  local function getc ()\r\n    ind = ind + 1\r\n    return string.sub (s, ind, ind)\r\n  end\r\n\r\n  local function getnum ()\r\n    local num = string.match (s, \"^\\\\(%d%d?%d?)\", ind)\r\n    if num then\r\n      ind = ind + #num\r\n      return string.format (\"\\\\x%02X\", num)\r\n    end\r\n  end\r\n\r\n  local out, state = \"\", \"normal\"\r\n  while ind < #s do\r\n    local ch = getc ()\r\n    if state == \"normal\" then\r\n      if ch == \"%\" then\r\n        out = out .. rep_normal (getc ())\r\n      elseif ch == \"-\" then\r\n        out = out .. \"*?\"\r\n      elseif ch == \".\" then\r\n        out = out .. \"\\\\C\"\r\n      elseif ch == \"[\" then\r\n        out = out .. ch\r\n        state = \"charclass\"\r\n      else\r\n        local num = getnum ()\r\n        out = num and (out .. num) or (out .. ch)\r\n      end\r\n    elseif state == \"charclass\" then\r\n      if ch == \"%\" then\r\n        out = out .. rep_charclass (getc ())\r\n      elseif ch == \"]\" then\r\n        out = out .. ch\r\n        state = \"normal\"\r\n      else\r\n        local num = getnum ()\r\n        out = num and (out .. num) or (out .. ch)\r\n      end\r\n    end\r\n  end\r\n  return out\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "local ind = 0",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local function getc ()\r\n    ind = ind + 1\r\n    return string.sub (s, ind, ind)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 13,
    "text": "ind = ind + 1",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "local function getnum ()\r\n    local num = string.match (s, \"^\\\\(%d%d?%d?)\", ind)\r\n    if num then\r\n      ind = ind + #num\r\n      return string.format (\"\\\\x%02X\", num)\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 15,
    "text": "local num = string.match (s, \"^\\\\(%d%d?%d?)\", ind)",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "if num then\r\n      ind = ind + #num\r\n      return string.format (\"\\\\x%02X\", num)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "ind = ind + #num",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "local out, state = \"\", \"normal\"",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "while ind < #s do\r\n    local ch = getc ()\r\n    if state == \"normal\" then\r\n      if ch == \"%\" then\r\n        out = out .. rep_normal (getc ())\r\n      elseif ch == \"-\" then\r\n        out = out .. \"*?\"\r\n      elseif ch == \".\" then\r\n        out = out .. \"\\\\C\"\r\n      elseif ch == \"[\" then\r\n        out = out .. ch\r\n        state = \"charclass\"\r\n      else\r\n        local num = getnum ()\r\n        out = num and (out .. num) or (out .. ch)\r\n      end\r\n    elseif state == \"charclass\" then\r\n      if ch == \"%\" then\r\n        out = out .. rep_charclass (getc ())\r\n      elseif ch == \"]\" then\r\n        out = out .. ch\r\n        state = \"normal\"\r\n      else\r\n        local num = getnum ()\r\n        out = num and (out .. num) or (out .. ch)\r\n      end\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 20,
    "text": "local ch = getc ()",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if state == \"normal\" then\r\n      if ch == \"%\" then\r\n        out = out .. rep_normal (getc ())\r\n      elseif ch == \"-\" then\r\n        out = out .. \"*?\"\r\n      elseif ch == \".\" then\r\n        out = out .. \"\\\\C\"\r\n      elseif ch == \"[\" then\r\n        out = out .. ch\r\n        state = \"charclass\"\r\n      else\r\n        local num = getnum ()\r\n        out = num and (out .. num) or (out .. ch)\r\n      end\r\n    elseif state == \"charclass\" then\r\n      if ch == \"%\" then\r\n        out = out .. rep_charclass (getc ())\r\n      elseif ch == \"]\" then\r\n        out = out .. ch\r\n        state = \"normal\"\r\n      else\r\n        local num = getnum ()\r\n        out = num and (out .. num) or (out .. ch)\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "if ch == \"%\" then\r\n        out = out .. rep_normal (getc ())\r\n      elseif ch == \"-\" then\r\n        out = out .. \"*?\"\r\n      elseif ch == \".\" then\r\n        out = out .. \"\\\\C\"\r\n      elseif ch == \"[\" then\r\n        out = out .. ch\r\n        state = \"charclass\"\r\n      else\r\n        local num = getnum ()\r\n        out = num and (out .. num) or (out .. ch)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "out = out .. rep_normal (getc ())",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "out = out .. \"*?\"",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "out = out .. \"\\\\C\"",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "out = out .. ch",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "state = \"charclass\"",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "local num = getnum ()",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "out = num and (out .. num) or (out .. ch)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "if ch == \"%\" then\r\n        out = out .. rep_charclass (getc ())\r\n      elseif ch == \"]\" then\r\n        out = out .. ch\r\n        state = \"normal\"\r\n      else\r\n        local num = getnum ()\r\n        out = num and (out .. num) or (out .. ch)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "out = out .. rep_charclass (getc ())",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "state = \"normal\"",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "local function getc ()\r\n    ind = ind + 1\r\n    return string.sub (s, ind, ind)\r\n  end",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "local function getnum ()\r\n    local num = string.match (s, \"^\\\\(%d%d?%d?)\", ind)\r\n    if num then\r\n      ind = ind + #num\r\n      return string.format (\"\\\\x%02X\", num)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "",
    "type": "function container"
  }, {
    "id": 39,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 40,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 41,
    "text": "pat2pcre",
    "type": "global function"
  }, {
    "id": 42,
    "text": "format",
    "type": "global function"
  }, {
    "id": 43,
    "text": "match",
    "type": "global function"
  }, {
    "id": 44,
    "text": "",
    "type": "variable container"
  }, {
    "id": 45,
    "text": "",
    "type": "require container"
  }, {
    "id": 46,
    "text": "",
    "type": "local variable"
  }, {
    "id": 47,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 48,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 49,
    "text": "",
    "type": "string"
  }, {
    "id": 50,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 51,
    "text": "",
    "type": "string"
  }, {
    "id": 52,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 53,
    "text": "",
    "type": "string"
  }, {
    "id": 54,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 55,
    "text": "",
    "type": "string"
  }, {
    "id": 56,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 57,
    "text": "",
    "type": "string"
  }, {
    "id": 58,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 59,
    "text": "",
    "type": "string"
  }, {
    "id": 60,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 61,
    "text": "",
    "type": "string"
  }, {
    "id": 62,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 63,
    "text": "",
    "type": "string"
  }, {
    "id": 64,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 65,
    "text": "",
    "type": "string"
  }, {
    "id": 66,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 67,
    "text": "",
    "type": "string"
  }, {
    "id": 68,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 69,
    "text": "",
    "type": "string"
  }, {
    "id": 70,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 71,
    "text": "",
    "type": "string"
  }, {
    "id": 72,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 73,
    "text": "",
    "type": "string"
  }, {
    "id": 74,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 75,
    "text": "",
    "type": "string"
  }, {
    "id": 76,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 77,
    "text": "",
    "type": "string"
  }, {
    "id": 78,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 79,
    "text": "",
    "type": "string"
  }, {
    "id": 80,
    "text": "",
    "type": "interface container"
  }, {
    "id": 81,
    "text": "",
    "type": "interface"
  }, {
    "id": 82,
    "text": "",
    "type": "require local variable"
  } ]
}