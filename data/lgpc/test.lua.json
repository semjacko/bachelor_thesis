{
  "_filename": "test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lgpc/test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 7,
    "label": "has",
    "to": 22
  }, {
    "from": 7,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 10
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 16
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 20
  }, {
    "from": 24,
    "label": "has",
    "to": 22
  }, {
    "from": 24,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 32,
    "label": "has",
    "to": 35
  }, {
    "from": 32,
    "label": "has",
    "to": 36
  }, {
    "from": 32,
    "label": "has",
    "to": 37
  }, {
    "from": 32,
    "label": "has",
    "to": 38
  }, {
    "from": 32,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 45,
    "label": "has",
    "to": 50
  }, {
    "from": 45,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 16
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 45,
    "label": "has",
    "to": 59
  }, {
    "from": 45,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 61,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 61,
    "label": "has",
    "to": 75
  }, {
    "from": 61,
    "label": "has",
    "to": 76
  }, {
    "from": 61,
    "label": "has",
    "to": 77
  }, {
    "from": 61,
    "label": "has",
    "to": 78
  }, {
    "from": 61,
    "label": "has",
    "to": 79
  }, {
    "from": 61,
    "label": "has",
    "to": 80
  }, {
    "from": 61,
    "label": "has",
    "to": 81
  }, {
    "from": 61,
    "label": "has",
    "to": 82
  }, {
    "from": 61,
    "label": "has",
    "to": 83
  }, {
    "from": 61,
    "label": "has",
    "to": 84
  }, {
    "from": 61,
    "label": "has",
    "to": 85
  }, {
    "from": 61,
    "label": "has",
    "to": 86
  }, {
    "from": 61,
    "label": "has",
    "to": 87
  }, {
    "from": 61,
    "label": "has",
    "to": 88
  }, {
    "from": 61,
    "label": "has",
    "to": 89
  }, {
    "from": 61,
    "label": "has",
    "to": 90
  }, {
    "from": 61,
    "label": "has",
    "to": 91
  }, {
    "from": 61,
    "label": "has",
    "to": 85
  }, {
    "from": 61,
    "label": "has",
    "to": 92
  }, {
    "from": 61,
    "label": "has",
    "to": 93
  }, {
    "from": 61,
    "label": "has",
    "to": 94
  }, {
    "from": 61,
    "label": "has",
    "to": 95
  }, {
    "from": 61,
    "label": "has",
    "to": 96
  }, {
    "from": 40,
    "label": "calls",
    "to": 32
  }, {
    "from": 61,
    "label": "calls",
    "to": 103
  }, {
    "from": 97,
    "label": "calls",
    "to": 101
  }, {
    "from": 40,
    "label": "calls",
    "to": 101
  }, {
    "from": 61,
    "label": "calls",
    "to": 101
  }, {
    "from": 97,
    "label": "calls",
    "to": 101
  }, {
    "from": 7,
    "label": "calls",
    "to": 2
  }, {
    "from": 7,
    "label": "calls",
    "to": 2
  }, {
    "from": 7,
    "label": "calls",
    "to": 2
  }, {
    "from": 7,
    "label": "calls",
    "to": 2
  }, {
    "from": 7,
    "label": "calls",
    "to": 2
  }, {
    "from": 7,
    "label": "calls",
    "to": 2
  }, {
    "from": 7,
    "label": "calls",
    "to": 2
  }, {
    "from": 24,
    "label": "calls",
    "to": 2
  }, {
    "from": 24,
    "label": "calls",
    "to": 2
  }, {
    "from": 24,
    "label": "calls",
    "to": 2
  }, {
    "from": 24,
    "label": "calls",
    "to": 2
  }, {
    "from": 32,
    "label": "calls",
    "to": 2
  }, {
    "from": 32,
    "label": "calls",
    "to": 2
  }, {
    "from": 32,
    "label": "calls",
    "to": 2
  }, {
    "from": 32,
    "label": "calls",
    "to": 2
  }, {
    "from": 61,
    "label": "calls",
    "to": 2
  }, {
    "from": 61,
    "label": "calls",
    "to": 2
  }, {
    "from": 61,
    "label": "calls",
    "to": 2
  }, {
    "from": 61,
    "label": "calls",
    "to": 2
  }, {
    "from": 61,
    "label": "calls",
    "to": 2
  }, {
    "from": 61,
    "label": "calls",
    "to": 2
  }, {
    "from": 61,
    "label": "calls",
    "to": 2
  }, {
    "from": 61,
    "label": "calls",
    "to": 2
  }, {
    "from": 61,
    "label": "calls",
    "to": 2
  }, {
    "from": 61,
    "label": "calls",
    "to": 2
  }, {
    "from": 32,
    "label": "calls",
    "to": 24
  }, {
    "from": 32,
    "label": "calls",
    "to": 24
  }, {
    "from": 61,
    "label": "calls",
    "to": 40
  }, {
    "from": 61,
    "label": "calls",
    "to": 40
  }, {
    "from": 61,
    "label": "calls",
    "to": 40
  }, {
    "from": 61,
    "label": "calls",
    "to": 40
  }, {
    "from": 61,
    "label": "calls",
    "to": 40
  }, {
    "from": 61,
    "label": "calls",
    "to": 40
  }, {
    "from": 61,
    "label": "calls",
    "to": 40
  }, {
    "from": 61,
    "label": "calls",
    "to": 40
  }, {
    "from": 61,
    "label": "calls",
    "to": 40
  }, {
    "from": 97,
    "label": "calls",
    "to": 99
  }, {
    "from": 97,
    "label": "calls",
    "to": 99
  }, {
    "from": 61,
    "label": "calls",
    "to": 102
  }, {
    "from": 97,
    "label": "calls",
    "to": 100
  }, {
    "from": 97,
    "label": "calls",
    "to": 61
  }, {
    "from": 61,
    "label": "calls",
    "to": 45
  }, {
    "from": 61,
    "label": "calls",
    "to": 45
  }, {
    "from": 1,
    "label": "contains",
    "to": 97
  }, {
    "from": 97,
    "label": "declares",
    "to": 2
  }, {
    "from": 97,
    "label": "declares",
    "to": 7
  }, {
    "from": 97,
    "label": "declares",
    "to": 24
  }, {
    "from": 97,
    "label": "declares",
    "to": 32
  }, {
    "from": 97,
    "label": "declares",
    "to": 40
  }, {
    "from": 97,
    "label": "declares",
    "to": 45
  }, {
    "from": 97,
    "label": "declares",
    "to": 61
  }, {
    "from": 1,
    "label": "contains",
    "to": 104
  }, {
    "from": 1,
    "label": "contains",
    "to": 105
  }, {
    "from": 104,
    "label": "initializes",
    "to": 106
  }, {
    "from": 104,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 104,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 105,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "requires",
    "to": 98
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test",
    "type": "module"
  }, {
    "id": 2,
    "text": "function output(f,...)\r\n for i=1,arg.n do\r\n  f:write(arg[i],\" \")\r\n end\r\n f:write(\"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "for i=1,arg.n do\r\n  f:write(arg[i],\" \")\r\n end",
    "type": "statement:numericfor"
  }, {
    "id": 4,
    "text": "f:write(arg[i],\" \")",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "f:write(\"\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function plottri(f,p,r,g,b,w)\r\n if w==\"stroke\" then output(f,0,\"setlinewidth\") end\r\n output(f,r,g,b,\"setrgbcolor\")\r\n for c=1,p:get() do\r\n  local n=p:get(c)\r\n  local x1,y1=p:get(c,1)\r\n  local x2,y2=p:get(c,2)\r\n  for i=3,n do\r\n   local x,y=p:get(c,i)\r\n   output(f,x1,y1,\"moveto\")\r\n   output(f,x2,y2,\"lineto\")\r\n   output(f,x,y,\"lineto\")\r\n   output(f,\"closepath\")\r\n   x1,y1,x2,y2=x2,y2,x,y\r\n  end\r\n end\r\n output(f,w)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "if w==\"stroke\" then output(f,0,\"setlinewidth\") end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "output(f,0,\"setlinewidth\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "output(f,r,g,b,\"setrgbcolor\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "for c=1,p:get() do\r\n  local n=p:get(c)\r\n  local x1,y1=p:get(c,1)\r\n  local x2,y2=p:get(c,2)\r\n  for i=3,n do\r\n   local x,y=p:get(c,i)\r\n   output(f,x1,y1,\"moveto\")\r\n   output(f,x2,y2,\"lineto\")\r\n   output(f,x,y,\"lineto\")\r\n   output(f,\"closepath\")\r\n   x1,y1,x2,y2=x2,y2,x,y\r\n  end\r\n end",
    "type": "statement:numericfor"
  }, {
    "id": 12,
    "text": "local n=p:get(c)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "local x1,y1=p:get(c,1)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local x2,y2=p:get(c,2)",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "for i=3,n do\r\n   local x,y=p:get(c,i)\r\n   output(f,x1,y1,\"moveto\")\r\n   output(f,x2,y2,\"lineto\")\r\n   output(f,x,y,\"lineto\")\r\n   output(f,\"closepath\")\r\n   x1,y1,x2,y2=x2,y2,x,y\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 16,
    "text": "local x,y=p:get(c,i)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "output(f,x1,y1,\"moveto\")",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "output(f,x2,y2,\"lineto\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "output(f,x,y,\"lineto\")",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "output(f,\"closepath\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "x1,y1,x2,y2=x2,y2,x,y",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "output(f,w)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function plot(f,p,r,g,b,w)\r\n output(f,r,g,b,\"setrgbcolor\")\r\n for c=1,p:get() do\r\n  local n,h=p:get(c)\r\n  local s=\"moveto\"\r\n  for i=1,n do\r\n   local x,y=p:get(c,i)\r\n   output(f,x,y,s)\r\n   s=\"lineto\"\r\n  end\r\n  output(f,\"closepath\")\r\n end\r\n output(f,w)\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "for c=1,p:get() do\r\n  local n,h=p:get(c)\r\n  local s=\"moveto\"\r\n  for i=1,n do\r\n   local x,y=p:get(c,i)\r\n   output(f,x,y,s)\r\n   s=\"lineto\"\r\n  end\r\n  output(f,\"closepath\")\r\n end",
    "type": "statement:numericfor"
  }, {
    "id": 26,
    "text": "local n,h=p:get(c)",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local s=\"moveto\"",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "for i=1,n do\r\n   local x,y=p:get(c,i)\r\n   output(f,x,y,s)\r\n   s=\"lineto\"\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 29,
    "text": "output(f,x,y,s)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "s=\"lineto\"",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function show(n,f,p,r,g,b,w)\r\n output(f)\r\n output(f,\"%%Page:\",w,n)\r\n output(f,\"setup\")\r\n plot(f,p,r,g,b,\"eofill\")\r\n plot(f,p,0,0,0,\"stroke\")\r\n output(f,\"showpage\")\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "output(f)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "output(f,\"%%Page:\",w,n)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "output(f,\"setup\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "plot(f,p,r,g,b,\"eofill\")",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "plot(f,p,0,0,0,\"stroke\")",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "output(f,\"showpage\")",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function page(f,p,w,r,g,b)\r\n N=N+1\r\n print(N,p:get(),w)\r\n show(N,f,p,r,g,b,w)\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "N=N+1",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "print(N,p:get(),w)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "show(N,f,p,r,g,b,w)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function bbox(p,xmin,xmax,ymin,ymax)\r\n local huge=1e30\r\n xmin=xmin or  huge\r\n xmax=xmax or -huge\r\n ymin=ymin or  huge\r\n ymax=ymax or -huge\r\n for c=1,p:get() do\r\n  for i=1,p:get(c) do\r\n   local x,y=p:get(c,i)\r\n   if x<xmin then xmin=x elseif x>xmax then xmax=x end\r\n   if y<ymin then ymin=y elseif y>ymax then ymax=y end\r\n  end\r\n end\r\n return xmin,xmax,ymin,ymax\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local huge=1e30",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "xmin=xmin or  huge",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "xmax=xmax or -huge",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "ymin=ymin or  huge",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "ymax=ymax or -huge",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "for c=1,p:get() do\r\n  for i=1,p:get(c) do\r\n   local x,y=p:get(c,i)\r\n   if x<xmin then xmin=x elseif x>xmax then xmax=x end\r\n   if y<ymin then ymin=y elseif y>ymax then ymax=y end\r\n  end\r\n end",
    "type": "statement:numericfor"
  }, {
    "id": 52,
    "text": "for i=1,p:get(c) do\r\n   local x,y=p:get(c,i)\r\n   if x<xmin then xmin=x elseif x>xmax then xmax=x end\r\n   if y<ymin then ymin=y elseif y>ymax then ymax=y end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 53,
    "text": "if x<xmin then xmin=x elseif x>xmax then xmax=x end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "xmin=x",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "xmax=x",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "if y<ymin then ymin=y elseif y>ymax then ymax=y end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "ymin=y",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "ymax=y",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function test(file)\r\n local X0,Y0,DX,DY=50,50,500,500\r\n local xmin,xmax,ymin,ymax=bbox(b,bbox(a))\r\n print(\"bbox\",xmin,xmax,ymin,ymax)\r\n local dx=xmax-xmin\r\n local dy=ymax-ymin\r\n local d=(dx-dy)/2\r\n if (d>0) then ymin=ymin-d ymax=ymax+d d=dx else xmin=xmin-d xmax=xmax+d d=dy end\r\n local f=assert(io.open(file,\"w\"))\r\n output(f,\"%!PS-Adobe-2.0\")\r\n output(f,\"%%Title: gpc lua test\")\r\n output(f,\"%%%BoundingBox:\",X0-5,Y0-5,X0+DX+5,Y0+DY+5) -- inactive\r\n output(f,\"%%Creator:\",P.version)\r\n output(f,\"%%Pages:\",9)\r\n output(f,\"%%EndComments\")\r\n output(f,\"/setup {\",X0,Y0,\"translate\",DX,DY,\"scale\")\r\n output(f,\"1\",d,\"div dup scale\",-xmin,-ymin,\"translate\")\r\n output(f,d/200,\"setlinewidth} def\")\r\n page(f,a,\"a\",1,0.8,0.8)\r\n page(f,b,\"b\",0.8,0.8,1)\r\n page(f,a+b,\"union\",0.8,1,0.8)\r\n page(f,a*b,\"intersection\",0.8,1,0.8)\r\n page(f,a-b,\"diff\",1,0.8,0.8)\r\n page(f,b-a,\"diff\",0.8,0.8,1)\r\n page(f,a^b,\"xor\",0.8,1,0.8)\r\n page(f,a,\"a\",1,0.8,0.8)\r\n plot=plottri\r\n page(f,a:strip(),\"strip\",1,0.8,0.8)\r\n output(f,\"%%EOF\")\r\n f:close()\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "local X0,Y0,DX,DY=50,50,500,500",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "local xmin,xmax,ymin,ymax=bbox(b,bbox(a))",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "print(\"bbox\",xmin,xmax,ymin,ymax)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "local dx=xmax-xmin",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local dy=ymax-ymin",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "local d=(dx-dy)/2",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "if (d>0) then ymin=ymin-d ymax=ymax+d d=dx else xmin=xmin-d xmax=xmax+d d=dy end",
    "type": "statement:if"
  }, {
    "id": 69,
    "text": "ymin=ymin-d",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "ymax=ymax+d",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "d=dx",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "xmin=xmin-d",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "xmax=xmax+d",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "d=dy",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "local f=assert(io.open(file,\"w\"))",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "output(f,\"%!PS-Adobe-2.0\")",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "output(f,\"%%Title: gpc lua test\")",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "output(f,\"%%%BoundingBox:\",X0-5,Y0-5,X0+DX+5,Y0+DY+5)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "output(f,\"%%Creator:\",P.version)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "output(f,\"%%Pages:\",9)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "output(f,\"%%EndComments\")",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "output(f,\"/setup {\",X0,Y0,\"translate\",DX,DY,\"scale\")",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "output(f,\"1\",d,\"div dup scale\",-xmin,-ymin,\"translate\")",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "output(f,d/200,\"setlinewidth} def\")",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "page(f,a,\"a\",1,0.8,0.8)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "page(f,b,\"b\",0.8,0.8,1)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "page(f,a+b,\"union\",0.8,1,0.8)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "page(f,a*b,\"intersection\",0.8,1,0.8)",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "page(f,a-b,\"diff\",1,0.8,0.8)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "page(f,b-a,\"diff\",0.8,0.8,1)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "page(f,a^b,\"xor\",0.8,1,0.8)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "plot=plottri",
    "type": "statement:assign"
  }, {
    "id": 93,
    "text": "page(f,a:strip(),\"strip\",1,0.8,0.8)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "output(f,\"%%EOF\")",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "",
    "type": "function container"
  }, {
    "id": 98,
    "text": "gpc",
    "type": "module"
  }, {
    "id": 99,
    "text": "new",
    "type": "global function"
  }, {
    "id": 100,
    "text": "require",
    "type": "global function"
  }, {
    "id": 101,
    "text": "print",
    "type": "global function"
  }, {
    "id": 102,
    "text": "open",
    "type": "global function"
  }, {
    "id": 103,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 104,
    "text": "",
    "type": "variable container"
  }, {
    "id": 105,
    "text": "",
    "type": "require container"
  }, {
    "id": 106,
    "text": "",
    "type": "global variable"
  }, {
    "id": 107,
    "text": "",
    "type": "global variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "global variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  } ]
}