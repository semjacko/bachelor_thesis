{
  "_filename": "ldoc.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacomments/src/comments/ldoc.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "calls",
    "to": 13
  }, {
    "from": 10,
    "label": "calls",
    "to": 13
  }, {
    "from": 10,
    "label": "calls",
    "to": 12
  }, {
    "from": 2,
    "label": "calls",
    "to": 11
  }, {
    "from": 1,
    "label": "contains",
    "to": 10
  }, {
    "from": 10,
    "label": "declares",
    "to": 2
  }, {
    "from": 16,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 17
  }, {
    "from": 1,
    "label": "contains",
    "to": 18
  }, {
    "from": 17,
    "label": "initializes",
    "to": 19
  }, {
    "from": 19,
    "label": "assigns",
    "to": 20
  }, {
    "from": 17,
    "label": "initializes",
    "to": 21
  }, {
    "from": 21,
    "label": "assigns",
    "to": 22
  }, {
    "from": 17,
    "label": "initializes",
    "to": 23
  }, {
    "from": 23,
    "label": "assigns",
    "to": 24
  }, {
    "from": 17,
    "label": "initializes",
    "to": 25
  }, {
    "from": 25,
    "label": "assigns",
    "to": 26
  }, {
    "from": 18,
    "label": "initializes",
    "to": 27
  }, {
    "from": 27,
    "label": "requires",
    "to": 14
  }, {
    "from": 18,
    "label": "initializes",
    "to": 28
  }, {
    "from": 28,
    "label": "requires",
    "to": 15
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ldoc",
    "type": "module"
  }, {
    "id": 2,
    "text": "function parse(text)\r\n\r\nlocal rev = re.compile([[\r\n    start <- ( typedtag/ tagwname/oneword / shortparam  / taged  / description  )             \r\n    typedtag    <- (commentprefix \"@\"]].. typedtags ..[[ [%s]+ {:vartype:types:} s {:name:variable:} s {:text:.+:} ) ->{}                                      \r\n    tagwname    <- (commentprefix \"@\"]].. tagsWithName ..[[\" \"+ {:name:variable:} \" \"+ {:text:.*:})  ->{}\r\n    taged       <- (commentprefix \"@\"]].. tags ..[[\" \"+  {:text:.*:})                     ->{}\r\n    oneword     <- (commentprefix \"@\"]].. onewordtags .. [[\" \"+ {:name:[^\" \"]+:} s!(.))      ->{}    \r\n    description <- (commentprefix s {:text:.+:}{:type:\"\"->\"descr\":})                         -> {}\r\n   shortparam  <- (commentprefix ((\"@\"{:vartype:shortparams:})/({:vartype:shortparams:}\":\")){:type:\"\"->\"tparam\":} s {:name:variable:} s {:text:.+:})         ->{}\r\n\r\n    types     <-  (  s typelist  s )     ->{}\r\n    typelist  <-  basetypes (s  \"|\" s  basetypes )*\r\n\r\n    shortparams <- ]].. common.ldoc_short_params ..[[ ->{}\r\n    basetypes <- ]].. common.basetypes ..[[\r\n    s           <- ' '*\r\n    commentprefix           <- ('--'[-]* s)\r\n    variable    <-]].. common.variable.. [[\r\n    ]])\r\n\r\n  local x = rev:match(text)\r\n  if(x)then\r\n      x.style=\"ldoc\"\r\n      x.tag=\"comment\"\r\n    return x\r\n  else\r\n    return nil,\"Error: nothing parsed!\"\r\n  end\r\n\r\n\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local rev = re.compile([[\r\n    start <- ( typedtag/ tagwname/oneword / shortparam  / taged  / description  )             \r\n    typedtag    <- (commentprefix \"@\"]].. typedtags ..[[ [%s]+ {:vartype:types:} s {:name:variable:} s {:text:.+:} ) ->{}                                      \r\n    tagwname    <- (commentprefix \"@\"]].. tagsWithName ..[[\" \"+ {:name:variable:} \" \"+ {:text:.*:})  ->{}\r\n    taged       <- (commentprefix \"@\"]].. tags ..[[\" \"+  {:text:.*:})                     ->{}\r\n    oneword     <- (commentprefix \"@\"]].. onewordtags .. [[\" \"+ {:name:[^\" \"]+:} s!(.))      ->{}    \r\n    description <- (commentprefix s {:text:.+:}{:type:\"\"->\"descr\":})                         -> {}\r\n   shortparam  <- (commentprefix ((\"@\"{:vartype:shortparams:})/({:vartype:shortparams:}\":\")){:type:\"\"->\"tparam\":} s {:name:variable:} s {:text:.+:})         ->{}\r\n\r\n    types     <-  (  s typelist  s )     ->{}\r\n    typelist  <-  basetypes (s  \"|\" s  basetypes )*\r\n\r\n    shortparams <- ]].. common.ldoc_short_params ..[[ ->{}\r\n    basetypes <- ]].. common.basetypes ..[[\r\n    s           <- ' '*\r\n    commentprefix           <- ('--'[-]* s)\r\n    variable    <-]].. common.variable.. [[\r\n    ]])",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local x = rev:match(text)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if(x)then\r\n      x.style=\"ldoc\"\r\n      x.tag=\"comment\"\r\n    return x\r\n  else\r\n    return nil,\"Error: nothing parsed!\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "x.style=\"ldoc\"",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "x.tag=\"comment\"",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "",
    "type": "function container"
  }, {
    "id": 11,
    "text": "compile",
    "type": "global function"
  }, {
    "id": 12,
    "text": "module",
    "type": "global function"
  }, {
    "id": 13,
    "text": "require",
    "type": "global function"
  }, {
    "id": 14,
    "text": "(re)",
    "type": "module"
  }, {
    "id": 15,
    "text": "common)",
    "type": "module"
  }, {
    "id": 16,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 17,
    "text": "",
    "type": "variable container"
  }, {
    "id": 18,
    "text": "",
    "type": "require container"
  }, {
    "id": 19,
    "text": "",
    "type": "local variable"
  }, {
    "id": 20,
    "text": "",
    "type": "string"
  }, {
    "id": 21,
    "text": "",
    "type": "local variable"
  }, {
    "id": 22,
    "text": "",
    "type": "string"
  }, {
    "id": 23,
    "text": "",
    "type": "local variable"
  }, {
    "id": 24,
    "text": "",
    "type": "string"
  }, {
    "id": 25,
    "text": "",
    "type": "local variable"
  }, {
    "id": 26,
    "text": "",
    "type": "string"
  }, {
    "id": 27,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 28,
    "text": "",
    "type": "require local variable"
  } ]
}