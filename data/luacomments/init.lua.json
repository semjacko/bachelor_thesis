{
  "_filename": "init.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacomments/src/comments/init.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 16,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 14
  }, {
    "from": 25,
    "label": "has",
    "to": 14
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 33,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 33,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 29,
    "label": "has",
    "to": 14
  }, {
    "from": 29,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 45,
    "label": "has",
    "to": 14
  }, {
    "from": 45,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 14
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 8,
    "label": "calls",
    "to": 58
  }, {
    "from": 8,
    "label": "calls",
    "to": 58
  }, {
    "from": 8,
    "label": "calls",
    "to": 59
  }, {
    "from": 16,
    "label": "calls",
    "to": 59
  }, {
    "from": 25,
    "label": "calls",
    "to": 59
  }, {
    "from": 29,
    "label": "calls",
    "to": 59
  }, {
    "from": 45,
    "label": "calls",
    "to": 59
  }, {
    "from": 8,
    "label": "calls",
    "to": 58
  }, {
    "from": 29,
    "label": "calls",
    "to": 25
  }, {
    "from": 8,
    "label": "calls",
    "to": 60
  }, {
    "from": 8,
    "label": "calls",
    "to": 58
  }, {
    "from": 45,
    "label": "calls",
    "to": 45
  }, {
    "from": 52,
    "label": "calls",
    "to": 45
  }, {
    "from": 57,
    "label": "calls",
    "to": 63
  }, {
    "from": 57,
    "label": "calls",
    "to": 63
  }, {
    "from": 57,
    "label": "calls",
    "to": 63
  }, {
    "from": 57,
    "label": "calls",
    "to": 63
  }, {
    "from": 57,
    "label": "calls",
    "to": 63
  }, {
    "from": 57,
    "label": "calls",
    "to": 63
  }, {
    "from": 57,
    "label": "calls",
    "to": 63
  }, {
    "from": 8,
    "label": "calls",
    "to": 58
  }, {
    "from": 29,
    "label": "calls",
    "to": 29
  }, {
    "from": 52,
    "label": "calls",
    "to": 29
  }, {
    "from": 8,
    "label": "calls",
    "to": 58
  }, {
    "from": 16,
    "label": "calls",
    "to": 62
  }, {
    "from": 16,
    "label": "calls",
    "to": 62
  }, {
    "from": 29,
    "label": "calls",
    "to": 62
  }, {
    "from": 29,
    "label": "calls",
    "to": 62
  }, {
    "from": 45,
    "label": "calls",
    "to": 62
  }, {
    "from": 45,
    "label": "calls",
    "to": 8
  }, {
    "from": 57,
    "label": "calls",
    "to": 61
  }, {
    "from": 16,
    "label": "calls",
    "to": 16
  }, {
    "from": 3,
    "label": "contains",
    "to": 57
  }, {
    "from": 57,
    "label": "declares",
    "to": 8
  }, {
    "from": 57,
    "label": "declares",
    "to": 16
  }, {
    "from": 57,
    "label": "declares",
    "to": 25
  }, {
    "from": 57,
    "label": "declares",
    "to": 29
  }, {
    "from": 57,
    "label": "declares",
    "to": 45
  }, {
    "from": 57,
    "label": "declares",
    "to": 52
  }, {
    "from": 3,
    "label": "contains",
    "to": 65
  }, {
    "from": 3,
    "label": "contains",
    "to": 66
  }, {
    "from": 65,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  }, {
    "from": 65,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 70,
    "label": "assigns",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 70,
    "label": "assigns",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 70,
    "label": "assigns",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 70,
    "label": "assigns",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 70,
    "label": "assigns",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 70,
    "label": "assigns",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 66,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "requires",
    "to": 64
  }, {
    "from": 66,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "requires",
    "to": 2
  }, {
    "from": 66,
    "label": "initializes",
    "to": 85
  }, {
    "from": 85,
    "label": "requires",
    "to": 7
  }, {
    "from": 66,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "requires",
    "to": 6
  }, {
    "from": 66,
    "label": "initializes",
    "to": 87
  }, {
    "from": 87,
    "label": "requires",
    "to": 1
  }, {
    "from": 66,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "requires",
    "to": 4
  }, {
    "from": 66,
    "label": "initializes",
    "to": 89
  }, {
    "from": 89,
    "label": "requires",
    "to": 5
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "custom",
    "type": "module"
  }, {
    "id": 2,
    "text": "explua",
    "type": "module"
  }, {
    "id": 3,
    "text": "init",
    "type": "module"
  }, {
    "id": 4,
    "text": "ldoc",
    "type": "module"
  }, {
    "id": 5,
    "text": "leg",
    "type": "module"
  }, {
    "id": 6,
    "text": "literate",
    "type": "module"
  }, {
    "id": 7,
    "text": "luadoc",
    "type": "module"
  }, {
    "id": 8,
    "text": "function Parse(text,parser,extended)\r\n\tlocal result,errno\r\n\r\n\tif(parser==\"explua\")then\r\n\t\treturn explua.parse(text,extended)\r\n\telseif(parser==\"luadoc\")then\r\n\t\treturn\tluadoc.parse(text)\r\n\telseif(parser==\"literate\")then\r\n\t\treturn literate.parse(text)\r\n\telseif(parser==\"custom\")then\r\n\t\treturn custom.parse(text)\r\n\telseif(parser==\"ldoc\")then\r\n\t\treturn\tldoc.parse(text)\r\n\telseif(parser==\"leg\")then\r\n\t\treturn leg.parse(text)\r\n\telse\r\n\r\n\t\tfor k,v in ipairs(parsers) do\r\n\t\t\tresult,errno = v.parse(text,extended)\r\n\t\t\tif(result)then\r\n\t\t\t\treturn result\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn result,errno\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local result,errno",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if(parser==\"explua\")then\r\n\t\treturn explua.parse(text,extended)\r\n\telseif(parser==\"luadoc\")then\r\n\t\treturn\tluadoc.parse(text)\r\n\telseif(parser==\"literate\")then\r\n\t\treturn literate.parse(text)\r\n\telseif(parser==\"custom\")then\r\n\t\treturn custom.parse(text)\r\n\telseif(parser==\"ldoc\")then\r\n\t\treturn\tldoc.parse(text)\r\n\telseif(parser==\"leg\")then\r\n\t\treturn leg.parse(text)\r\n\telse\r\n\r\n\t\tfor k,v in ipairs(parsers) do\r\n\t\t\tresult,errno = v.parse(text,extended)\r\n\t\t\tif(result)then\r\n\t\t\t\treturn result\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "for k,v in ipairs(parsers) do\r\n\t\t\tresult,errno = v.parse(text,extended)\r\n\t\t\tif(result)then\r\n\t\t\t\treturn result\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 12,
    "text": "result,errno = v.parse(text,extended)",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "if(result)then\r\n\t\t\t\treturn result\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function findDocstring(subtree)\r\n\tif type(subtree.data) == \"table\" then\r\n\t\tfor _,v in ipairs(subtree.data) do\r\n\t\t\tif type(v.data) == \"table\" and #v.data > 0 then\r\n\t\t\t\tif v.key == \"Stat\" then\r\n\t\t\t\t\treturn false\r\n\t\t\t\tend\r\n\t\t\t\tlocal res = findDocstring(v)\r\n\t\t\t\tif res ~= nil then\r\n\t\t\t\t\treturn res\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tif v.key == \"COMMENT\" and v.parsed.style == \"literate\" and v.parsed.type == \"lp\" then\r\n\t\t\t\t\treturn v.parsed.text\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "if type(subtree.data) == \"table\" then\r\n\t\tfor _,v in ipairs(subtree.data) do\r\n\t\t\tif type(v.data) == \"table\" and #v.data > 0 then\r\n\t\t\t\tif v.key == \"Stat\" then\r\n\t\t\t\t\treturn false\r\n\t\t\t\tend\r\n\t\t\t\tlocal res = findDocstring(v)\r\n\t\t\t\tif res ~= nil then\r\n\t\t\t\t\treturn res\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tif v.key == \"COMMENT\" and v.parsed.style == \"literate\" and v.parsed.type == \"lp\" then\r\n\t\t\t\t\treturn v.parsed.text\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "for _,v in ipairs(subtree.data) do\r\n\t\t\tif type(v.data) == \"table\" and #v.data > 0 then\r\n\t\t\t\tif v.key == \"Stat\" then\r\n\t\t\t\t\treturn false\r\n\t\t\t\tend\r\n\t\t\t\tlocal res = findDocstring(v)\r\n\t\t\t\tif res ~= nil then\r\n\t\t\t\t\treturn res\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tif v.key == \"COMMENT\" and v.parsed.style == \"literate\" and v.parsed.type == \"lp\" then\r\n\t\t\t\t\treturn v.parsed.text\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "if type(v.data) == \"table\" and #v.data > 0 then\r\n\t\t\t\tif v.key == \"Stat\" then\r\n\t\t\t\t\treturn false\r\n\t\t\t\tend\r\n\t\t\t\tlocal res = findDocstring(v)\r\n\t\t\t\tif res ~= nil then\r\n\t\t\t\t\treturn res\r\n\t\t\t\tend\r\n\t\t\telse\r\n\t\t\t\tif v.key == \"COMMENT\" and v.parsed.style == \"literate\" and v.parsed.type == \"lp\" then\r\n\t\t\t\t\treturn v.parsed.text\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "if v.key == \"Stat\" then\r\n\t\t\t\t\treturn false\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "local res = findDocstring(v)",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "if res ~= nil then\r\n\t\t\t\t\treturn res\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "if v.key == \"COMMENT\" and v.parsed.style == \"literate\" and v.parsed.type == \"lp\" then\r\n\t\t\t\t\treturn v.parsed.text\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function hasBlockComment(subtree)\r\n\tfor _,v in ipairs(subtree.data) do\r\n\t\tif v.key == \"COMMENT\" and v.parsed.style == \"custom\" and (v.parsed.type == \"startblock\" or v.parsed.type == \"endblock\") then\r\n\t\t\treturn v.parsed.type, v\r\n\t\tend\r\n\tend\r\n\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "for _,v in ipairs(subtree.data) do\r\n\t\tif v.key == \"COMMENT\" and v.parsed.style == \"custom\" and (v.parsed.type == \"startblock\" or v.parsed.type == \"endblock\") then\r\n\t\t\treturn v.parsed.type, v\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 27,
    "text": "if v.key == \"COMMENT\" and v.parsed.style == \"custom\" and (v.parsed.type == \"startblock\" or v.parsed.type == \"endblock\") then\r\n\t\t\treturn v.parsed.type, v\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "local function markBlockChildren(ast)\r\n\tlocal res, node, tag\r\n\r\n\tif type(ast.data) == \"table\" then\r\n\t\tfor _,v in ipairs(ast.data) do\r\n\t\t\tif type(v.data) == \"table\" and v.key ~= \"IGNORED\" then\r\n\t\t\t\tif tag == true then\r\n\t\t\t\t\tv.comment = node\r\n\t\t\t\tend\r\n\t\t\t\tmarkBlockChildren(v)\r\n\t\t\telseif v.key == \"IGNORED\" then\r\n\t\t\t\tlocal res_tmp, node_tmp = hasBlockComment(v)\r\n\t\t\t\tif res_tmp == \"startblock\" then\r\n\t\t\t\t\tres = res_tmp\r\n\t\t\t\t\tnode = node_tmp\r\n\t\t\t\t\ttag = true\r\n\t\t\t\tend\r\n\t\t\t\tif res == \"endblock\" then\r\n\t\t\t\t\ttag = false\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\treturn ast\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "local res, node, tag",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "if type(ast.data) == \"table\" then\r\n\t\tfor _,v in ipairs(ast.data) do\r\n\t\t\tif type(v.data) == \"table\" and v.key ~= \"IGNORED\" then\r\n\t\t\t\tif tag == true then\r\n\t\t\t\t\tv.comment = node\r\n\t\t\t\tend\r\n\t\t\t\tmarkBlockChildren(v)\r\n\t\t\telseif v.key == \"IGNORED\" then\r\n\t\t\t\tlocal res_tmp, node_tmp = hasBlockComment(v)\r\n\t\t\t\tif res_tmp == \"startblock\" then\r\n\t\t\t\t\tres = res_tmp\r\n\t\t\t\t\tnode = node_tmp\r\n\t\t\t\t\ttag = true\r\n\t\t\t\tend\r\n\t\t\t\tif res == \"endblock\" then\r\n\t\t\t\t\ttag = false\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "for _,v in ipairs(ast.data) do\r\n\t\t\tif type(v.data) == \"table\" and v.key ~= \"IGNORED\" then\r\n\t\t\t\tif tag == true then\r\n\t\t\t\t\tv.comment = node\r\n\t\t\t\tend\r\n\t\t\t\tmarkBlockChildren(v)\r\n\t\t\telseif v.key == \"IGNORED\" then\r\n\t\t\t\tlocal res_tmp, node_tmp = hasBlockComment(v)\r\n\t\t\t\tif res_tmp == \"startblock\" then\r\n\t\t\t\t\tres = res_tmp\r\n\t\t\t\t\tnode = node_tmp\r\n\t\t\t\t\ttag = true\r\n\t\t\t\tend\r\n\t\t\t\tif res == \"endblock\" then\r\n\t\t\t\t\ttag = false\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 33,
    "text": "if type(v.data) == \"table\" and v.key ~= \"IGNORED\" then\r\n\t\t\t\tif tag == true then\r\n\t\t\t\t\tv.comment = node\r\n\t\t\t\tend\r\n\t\t\t\tmarkBlockChildren(v)\r\n\t\t\telseif v.key == \"IGNORED\" then\r\n\t\t\t\tlocal res_tmp, node_tmp = hasBlockComment(v)\r\n\t\t\t\tif res_tmp == \"startblock\" then\r\n\t\t\t\t\tres = res_tmp\r\n\t\t\t\t\tnode = node_tmp\r\n\t\t\t\t\ttag = true\r\n\t\t\t\tend\r\n\t\t\t\tif res == \"endblock\" then\r\n\t\t\t\t\ttag = false\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "if tag == true then\r\n\t\t\t\t\tv.comment = node\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "v.comment = node",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "markBlockChildren(v)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "local res_tmp, node_tmp = hasBlockComment(v)",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if res_tmp == \"startblock\" then\r\n\t\t\t\t\tres = res_tmp\r\n\t\t\t\t\tnode = node_tmp\r\n\t\t\t\t\ttag = true\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "res = res_tmp",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "node = node_tmp",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "tag = true",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "if res == \"endblock\" then\r\n\t\t\t\t\ttag = false\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "tag = false",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "local function TagAST(ast)\r\n\tif type(ast.data) == \"table\" and #ast.data > 0 then\r\n\t\tfor _,v in ipairs(ast.data) do\r\n\t\t\tTagAST(v)\r\n\t\tend\r\n\telse\r\n\t\tif ast.key == \"COMMENT\" then\r\n\t\t\tast.parsed = Parse(ast.str)\r\n\t\tend\r\n\tend\r\n\r\n\treturn ast\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "if type(ast.data) == \"table\" and #ast.data > 0 then\r\n\t\tfor _,v in ipairs(ast.data) do\r\n\t\t\tTagAST(v)\r\n\t\tend\r\n\telse\r\n\t\tif ast.key == \"COMMENT\" then\r\n\t\t\tast.parsed = Parse(ast.str)\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "for _,v in ipairs(ast.data) do\r\n\t\t\tTagAST(v)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 48,
    "text": "TagAST(v)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "if ast.key == \"COMMENT\" then\r\n\t\t\tast.parsed = Parse(ast.str)\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "ast.parsed = Parse(ast.str)",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function extendAST(ast)\r\n\tlocal extended_ast\r\n\textended_ast = TagAST(ast)\r\n\textended_ast = markBlockChildren(extended_ast)\r\n\treturn extended_ast\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local extended_ast",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "extended_ast = TagAST(ast)",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "extended_ast = markBlockChildren(extended_ast)",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "",
    "type": "function container"
  }, {
    "id": 58,
    "text": "function parse(text)\r\nlocal rev = re.compile([[\r\n    start <- ( tagwname  / taged /oneword/   description )         \r\n    tagwname    <- (commentprefix s* ]].. tagsWithName ..[[  {:name:variable:} s+ {:text:.*:})  ->{}\r\n    taged       <- (commentprefix s* ]].. tags ..        [[  {:text:.*:})           ->{}\r\n    oneword     <- (commentprefix s* ]].. onewordtags .. [[  {:name:[^\" \"]+:} s*!(.))      ->{}\r\n    description <- (commentprefix [%-]* s* {:type:\"\"->\"descr\":} {:text:.*:}) ->{}\r\n    s           <- (\"\\t\"/\" \")\r\n    commentprefix <- \"--\" !\"[\"\r\n    variable    <-]].. common.variable.. [[\r\n    ]],{\r\n    })\r\n  local x = rev:match(text)\r\n\r\n  if(x)then\r\n    x.style=\"luadoc\"\r\n    x.tag=\"comment\"\r\n    return x\r\n  else\r\n    return nil,\"Error: Nothing parsed!\"\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 59,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 60,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 61,
    "text": "module",
    "type": "global function"
  }, {
    "id": 62,
    "text": "type",
    "type": "global function"
  }, {
    "id": 63,
    "text": "require",
    "type": "global function"
  }, {
    "id": 64,
    "text": "(re)",
    "type": "module"
  }, {
    "id": 65,
    "text": "",
    "type": "variable container"
  }, {
    "id": 66,
    "text": "",
    "type": "require container"
  }, {
    "id": 67,
    "text": "",
    "type": "local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "n/a"
  }, {
    "id": 69,
    "text": "",
    "type": "local variable"
  }, {
    "id": 70,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 71,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 72,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 73,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 74,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 75,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 76,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 77,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 78,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 79,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 80,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 81,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 82,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 88,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "require local variable"
  } ]
}