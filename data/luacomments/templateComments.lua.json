{
  "_filename": "templateComments.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacomments/src/comments/templateComments.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 2,
    "label": "has",
    "to": 19
  }, {
    "from": 2,
    "label": "has",
    "to": 20
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 2,
    "label": "has",
    "to": 22
  }, {
    "from": 2,
    "label": "has",
    "to": 23
  }, {
    "from": 2,
    "label": "has",
    "to": 24
  }, {
    "from": 2,
    "label": "has",
    "to": 25
  }, {
    "from": 2,
    "label": "has",
    "to": 26
  }, {
    "from": 2,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 28,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 55,
    "label": "has",
    "to": 24
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 58
  }, {
    "from": 55,
    "label": "has",
    "to": 24
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 52,
    "label": "has",
    "to": 25
  }, {
    "from": 52,
    "label": "has",
    "to": 26
  }, {
    "from": 51,
    "label": "has",
    "to": 59
  }, {
    "from": 51,
    "label": "has",
    "to": 26
  }, {
    "from": 50,
    "label": "has",
    "to": 59
  }, {
    "from": 50,
    "label": "has",
    "to": 26
  }, {
    "from": 49,
    "label": "has",
    "to": 60
  }, {
    "from": 49,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 25
  }, {
    "from": 49,
    "label": "has",
    "to": 60
  }, {
    "from": 49,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 49,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 71,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 24
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 71,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 70,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 70,
    "label": "has",
    "to": 91
  }, {
    "from": 70,
    "label": "has",
    "to": 60
  }, {
    "from": 70,
    "label": "has",
    "to": 60
  }, {
    "from": 70,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 60
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 93,
    "label": "has",
    "to": 60
  }, {
    "from": 93,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 60
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 65
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 99,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 107,
    "label": "has",
    "to": 114
  }, {
    "from": 107,
    "label": "has",
    "to": 115
  }, {
    "from": 107,
    "label": "has",
    "to": 116
  }, {
    "from": 107,
    "label": "has",
    "to": 117
  }, {
    "from": 106,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 108
  }, {
    "from": 118,
    "label": "has",
    "to": 109
  }, {
    "from": 118,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 115
  }, {
    "from": 118,
    "label": "has",
    "to": 116
  }, {
    "from": 118,
    "label": "has",
    "to": 117
  }, {
    "from": 106,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 108
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 112
  }, {
    "from": 123,
    "label": "has",
    "to": 113
  }, {
    "from": 120,
    "label": "has",
    "to": 124
  }, {
    "from": 120,
    "label": "has",
    "to": 115
  }, {
    "from": 120,
    "label": "has",
    "to": 125
  }, {
    "from": 120,
    "label": "has",
    "to": 117
  }, {
    "from": 106,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 106,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 133,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 136,
    "label": "has",
    "to": 138
  }, {
    "from": 136,
    "label": "has",
    "to": 139
  }, {
    "from": 136,
    "label": "has",
    "to": 140
  }, {
    "from": 136,
    "label": "has",
    "to": 141
  }, {
    "from": 130,
    "label": "has",
    "to": 142
  }, {
    "from": 70,
    "label": "calls",
    "to": 93
  }, {
    "from": 93,
    "label": "calls",
    "to": 93
  }, {
    "from": 28,
    "label": "calls",
    "to": 155
  }, {
    "from": 49,
    "label": "calls",
    "to": 156
  }, {
    "from": 70,
    "label": "calls",
    "to": 156
  }, {
    "from": 93,
    "label": "calls",
    "to": 156
  }, {
    "from": 99,
    "label": "calls",
    "to": 156
  }, {
    "from": 106,
    "label": "calls",
    "to": 156
  }, {
    "from": 130,
    "label": "calls",
    "to": 156
  }, {
    "from": 28,
    "label": "calls",
    "to": 2
  }, {
    "from": 28,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 106
  }, {
    "from": 106,
    "label": "calls",
    "to": 106
  }, {
    "from": 28,
    "label": "calls",
    "to": 28
  }, {
    "from": 28,
    "label": "calls",
    "to": 162
  }, {
    "from": 28,
    "label": "calls",
    "to": 162
  }, {
    "from": 28,
    "label": "calls",
    "to": 162
  }, {
    "from": 49,
    "label": "calls",
    "to": 162
  }, {
    "from": 2,
    "label": "calls",
    "to": 150
  }, {
    "from": 2,
    "label": "calls",
    "to": 146
  }, {
    "from": 28,
    "label": "calls",
    "to": 165
  }, {
    "from": 106,
    "label": "calls",
    "to": 165
  }, {
    "from": 130,
    "label": "calls",
    "to": 165
  }, {
    "from": 130,
    "label": "calls",
    "to": 165
  }, {
    "from": 28,
    "label": "calls",
    "to": 160
  }, {
    "from": 106,
    "label": "calls",
    "to": 160
  }, {
    "from": 106,
    "label": "calls",
    "to": 160
  }, {
    "from": 106,
    "label": "calls",
    "to": 160
  }, {
    "from": 106,
    "label": "calls",
    "to": 160
  }, {
    "from": 106,
    "label": "calls",
    "to": 160
  }, {
    "from": 130,
    "label": "calls",
    "to": 160
  }, {
    "from": 28,
    "label": "calls",
    "to": 153
  }, {
    "from": 28,
    "label": "calls",
    "to": 159
  }, {
    "from": 106,
    "label": "calls",
    "to": 159
  }, {
    "from": 106,
    "label": "calls",
    "to": 159
  }, {
    "from": 106,
    "label": "calls",
    "to": 159
  }, {
    "from": 106,
    "label": "calls",
    "to": 159
  }, {
    "from": 130,
    "label": "calls",
    "to": 159
  }, {
    "from": 2,
    "label": "calls",
    "to": 130
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 99,
    "label": "calls",
    "to": 99
  }, {
    "from": 106,
    "label": "calls",
    "to": 158
  }, {
    "from": 106,
    "label": "calls",
    "to": 158
  }, {
    "from": 106,
    "label": "calls",
    "to": 158
  }, {
    "from": 49,
    "label": "calls",
    "to": 149
  }, {
    "from": 106,
    "label": "calls",
    "to": 149
  }, {
    "from": 106,
    "label": "calls",
    "to": 149
  }, {
    "from": 28,
    "label": "calls",
    "to": 154
  }, {
    "from": 2,
    "label": "calls",
    "to": 49
  }, {
    "from": 49,
    "label": "calls",
    "to": 49
  }, {
    "from": 49,
    "label": "calls",
    "to": 70
  }, {
    "from": 49,
    "label": "calls",
    "to": 70
  }, {
    "from": 70,
    "label": "calls",
    "to": 70
  }, {
    "from": 2,
    "label": "calls",
    "to": 157
  }, {
    "from": 2,
    "label": "calls",
    "to": 157
  }, {
    "from": 143,
    "label": "calls",
    "to": 161
  }, {
    "from": 28,
    "label": "calls",
    "to": 148
  }, {
    "from": 28,
    "label": "calls",
    "to": 163
  }, {
    "from": 49,
    "label": "calls",
    "to": 163
  }, {
    "from": 70,
    "label": "calls",
    "to": 163
  }, {
    "from": 99,
    "label": "calls",
    "to": 163
  }, {
    "from": 106,
    "label": "calls",
    "to": 163
  }, {
    "from": 143,
    "label": "calls",
    "to": 164
  }, {
    "from": 143,
    "label": "calls",
    "to": 164
  }, {
    "from": 143,
    "label": "calls",
    "to": 164
  }, {
    "from": 143,
    "label": "calls",
    "to": 164
  }, {
    "from": 143,
    "label": "calls",
    "to": 164
  }, {
    "from": 70,
    "label": "calls",
    "to": 166
  }, {
    "from": 2,
    "label": "calls",
    "to": 152
  }, {
    "from": 1,
    "label": "contains",
    "to": 143
  }, {
    "from": 143,
    "label": "declares",
    "to": 2
  }, {
    "from": 143,
    "label": "declares",
    "to": 28
  }, {
    "from": 143,
    "label": "declares",
    "to": 49
  }, {
    "from": 143,
    "label": "declares",
    "to": 70
  }, {
    "from": 143,
    "label": "declares",
    "to": 93
  }, {
    "from": 143,
    "label": "declares",
    "to": 99
  }, {
    "from": 143,
    "label": "declares",
    "to": 106
  }, {
    "from": 143,
    "label": "declares",
    "to": 130
  }, {
    "from": 144,
    "label": "calls",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 167
  }, {
    "from": 1,
    "label": "contains",
    "to": 168
  }, {
    "from": 167,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "assigns",
    "to": 170
  }, {
    "from": 167,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "assigns",
    "to": 172
  }, {
    "from": 167,
    "label": "initializes",
    "to": 173
  }, {
    "from": 173,
    "label": "assigns",
    "to": 174
  }, {
    "from": 167,
    "label": "initializes",
    "to": 175
  }, {
    "from": 175,
    "label": "assigns",
    "to": 176
  }, {
    "from": 167,
    "label": "initializes",
    "to": 177
  }, {
    "from": 177,
    "label": "assigns",
    "to": 178
  }, {
    "from": 167,
    "label": "initializes",
    "to": 179
  }, {
    "from": 179,
    "label": "assigns",
    "to": 180
  }, {
    "from": 167,
    "label": "initializes",
    "to": 181
  }, {
    "from": 181,
    "label": "assigns",
    "to": 182
  }, {
    "from": 167,
    "label": "initializes",
    "to": 183
  }, {
    "from": 183,
    "label": "assigns",
    "to": 184
  }, {
    "from": 184,
    "label": "assigns",
    "to": 185
  }, {
    "from": 185,
    "label": "assigns",
    "to": 186
  }, {
    "from": 184,
    "label": "assigns",
    "to": 187
  }, {
    "from": 187,
    "label": "assigns",
    "to": 188
  }, {
    "from": 167,
    "label": "initializes",
    "to": 189
  }, {
    "from": 189,
    "label": "assigns",
    "to": 190
  }, {
    "from": 167,
    "label": "initializes",
    "to": 191
  }, {
    "from": 191,
    "label": "assigns",
    "to": 192
  }, {
    "from": 192,
    "label": "assigns",
    "to": 193
  }, {
    "from": 193,
    "label": "assigns",
    "to": 194
  }, {
    "from": 192,
    "label": "assigns",
    "to": 195
  }, {
    "from": 195,
    "label": "assigns",
    "to": 196
  }, {
    "from": 167,
    "label": "initializes",
    "to": 197
  }, {
    "from": 197,
    "label": "assigns",
    "to": 198
  }, {
    "from": 168,
    "label": "initializes",
    "to": 199
  }, {
    "from": 199,
    "label": "requires",
    "to": 151
  }, {
    "from": 168,
    "label": "initializes",
    "to": 200
  }, {
    "from": 200,
    "label": "requires",
    "to": 145
  }, {
    "from": 168,
    "label": "initializes",
    "to": 201
  }, {
    "from": 201,
    "label": "requires",
    "to": 202
  }, {
    "from": 168,
    "label": "initializes",
    "to": 203
  }, {
    "from": 203,
    "label": "requires",
    "to": 204
  }, {
    "from": 168,
    "label": "initializes",
    "to": 205
  }, {
    "from": 205,
    "label": "requires",
    "to": 147
  }, {
    "from": 206,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "templateComments",
    "type": "module"
  }, {
    "id": 2,
    "text": "function processFile(file, style, func, output)\r\n\tprint(\"Processing: \",file)\r\n\tprint(output)\r\n\tlocal f, text\r\n\tlocal ast\r\n\r\n\tf = io.input(file)\r\n\ttext = f:read(\"*a\")\r\n\tf:close()\r\n\r\n\tast = m.processText(text)\r\n\tnew_ast = ast\r\n\tif style == nil then\r\n\t\tstyle = \"luadoc\"\r\n\tend\r\n\r\n\tif func == true then\r\n\t\tfunctionComments(ast,style)\r\n\telse\r\n\t\tfindConstructions(ast)\r\n\t\tastToString(ast)\r\n\t\tdocstringComments()\r\n\tend\r\n\r\n\tlocal new = io.open(output,\"w\")\r\n\tnew:write(new_text)\r\n\tnew:close()\r\n\tnew_text = \"\"\r\n\tstat_table = {}\r\n\treturn_found = false\r\n\ttext_tag.tag = \"\"\r\n\ttext_tag.text = \"\"\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "print(\"Processing: \",file)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "print(output)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "local f, text",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local ast",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "f = io.input(file)",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "text = f:read(\"*a\")",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "ast = m.processText(text)",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "new_ast = ast",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "if style == nil then\r\n\t\tstyle = \"luadoc\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "style = \"luadoc\"",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "if func == true then\r\n\t\tfunctionComments(ast,style)\r\n\telse\r\n\t\tfindConstructions(ast)\r\n\t\tastToString(ast)\r\n\t\tdocstringComments()\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "functionComments(ast,style)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "findConstructions(ast)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "astToString(ast)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "docstringComments()",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local new = io.open(output,\"w\")",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "new:write(new_text)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "new:close()",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "new_text = \"\"",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "stat_table = {}",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "return_found = false",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "text_tag.tag = \"\"",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "text_tag.text = \"\"",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function addComments(path, style, func, output)\r\n\r\n\tif (string.find(path, \"%.lua\") ~= nil) then\r\n\t\tif (string.find(output, \"%.lua\") ~= nil) then\r\n\t\t\toutput = string.sub(output, 0, string.len(output)-4)\r\n\t\t\toutput = output .. \"(1).lua\"\r\n\t\telse\r\n\t\t\tname = string.match(path, \"%/%a+%.lua\")\r\n\t\t\toutput = output .. name\r\n\t\tend\r\n\t    processFile(path, style, func, output)\r\n\telse\r\n\t    for file in lfs.dir(path) do\r\n\t        if file ~= \".\" and file ~= \"..\" then\r\n\t            local f = path..'/'..file\r\n\t            local attr = lfs.attributes (f)\r\n\t            assert (type(attr) == \"table\")\r\n\t            if attr.mode == \"directory\" then\r\n\t            \toutput = output .. '/' .. file\r\n\t            \tlfs.mkdir(output)\r\n\t                addComments(f,style, func,output)\r\n\t                output = output .. \"/..\"\r\n\t            else\r\n\t            \tif string.find(file, \"%.lua\") ~= nil then\r\n\t                \tprocessFile(path .. \"/\" .. file, style, func, output .. \"/\" .. file)\r\n\t            \tend\r\n\t            end\r\n\t        end\r\n\t    end\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "if (string.find(path, \"%.lua\") ~= nil) then\r\n\t\tif (string.find(output, \"%.lua\") ~= nil) then\r\n\t\t\toutput = string.sub(output, 0, string.len(output)-4)\r\n\t\t\toutput = output .. \"(1).lua\"\r\n\t\telse\r\n\t\t\tname = string.match(path, \"%/%a+%.lua\")\r\n\t\t\toutput = output .. name\r\n\t\tend\r\n\t    processFile(path, style, func, output)\r\n\telse\r\n\t    for file in lfs.dir(path) do\r\n\t        if file ~= \".\" and file ~= \"..\" then\r\n\t            local f = path..'/'..file\r\n\t            local attr = lfs.attributes (f)\r\n\t            assert (type(attr) == \"table\")\r\n\t            if attr.mode == \"directory\" then\r\n\t            \toutput = output .. '/' .. file\r\n\t            \tlfs.mkdir(output)\r\n\t                addComments(f,style, func,output)\r\n\t                output = output .. \"/..\"\r\n\t            else\r\n\t            \tif string.find(file, \"%.lua\") ~= nil then\r\n\t                \tprocessFile(path .. \"/\" .. file, style, func, output .. \"/\" .. file)\r\n\t            \tend\r\n\t            end\r\n\t        end\r\n\t    end\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "if (string.find(output, \"%.lua\") ~= nil) then\r\n\t\t\toutput = string.sub(output, 0, string.len(output)-4)\r\n\t\t\toutput = output .. \"(1).lua\"\r\n\t\telse\r\n\t\t\tname = string.match(path, \"%/%a+%.lua\")\r\n\t\t\toutput = output .. name\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "output = string.sub(output, 0, string.len(output)-4)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "output = output .. \"(1).lua\"",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "name = string.match(path, \"%/%a+%.lua\")",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "output = output .. name",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "processFile(path, style, func, output)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "for file in lfs.dir(path) do\r\n\t        if file ~= \".\" and file ~= \"..\" then\r\n\t            local f = path..'/'..file\r\n\t            local attr = lfs.attributes (f)\r\n\t            assert (type(attr) == \"table\")\r\n\t            if attr.mode == \"directory\" then\r\n\t            \toutput = output .. '/' .. file\r\n\t            \tlfs.mkdir(output)\r\n\t                addComments(f,style, func,output)\r\n\t                output = output .. \"/..\"\r\n\t            else\r\n\t            \tif string.find(file, \"%.lua\") ~= nil then\r\n\t                \tprocessFile(path .. \"/\" .. file, style, func, output .. \"/\" .. file)\r\n\t            \tend\r\n\t            end\r\n\t        end\r\n\t    end",
    "type": "statement:genericfor"
  }, {
    "id": 37,
    "text": "if file ~= \".\" and file ~= \"..\" then\r\n\t            local f = path..'/'..file\r\n\t            local attr = lfs.attributes (f)\r\n\t            assert (type(attr) == \"table\")\r\n\t            if attr.mode == \"directory\" then\r\n\t            \toutput = output .. '/' .. file\r\n\t            \tlfs.mkdir(output)\r\n\t                addComments(f,style, func,output)\r\n\t                output = output .. \"/..\"\r\n\t            else\r\n\t            \tif string.find(file, \"%.lua\") ~= nil then\r\n\t                \tprocessFile(path .. \"/\" .. file, style, func, output .. \"/\" .. file)\r\n\t            \tend\r\n\t            end\r\n\t        end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "local f = path..'/'..file",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local attr = lfs.attributes (f)",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "assert (type(attr) == \"table\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "if attr.mode == \"directory\" then\r\n\t            \toutput = output .. '/' .. file\r\n\t            \tlfs.mkdir(output)\r\n\t                addComments(f,style, func,output)\r\n\t                output = output .. \"/..\"\r\n\t            else\r\n\t            \tif string.find(file, \"%.lua\") ~= nil then\r\n\t                \tprocessFile(path .. \"/\" .. file, style, func, output .. \"/\" .. file)\r\n\t            \tend\r\n\t            end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "output = output .. '/' .. file",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "lfs.mkdir(output)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "addComments(f,style, func,output)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "output = output .. \"/..\"",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "if string.find(file, \"%.lua\") ~= nil then\r\n\t                \tprocessFile(path .. \"/\" .. file, style, func, output .. \"/\" .. file)\r\n\t            \tend",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "processFile(path .. \"/\" .. file, style, func, output .. \"/\" .. file)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function functionComments(ast,style)\r\n\r\n\tif ast.tag == \"GlobalFunction\" or ast.tag == \"LocalFunction\" or ast.tag == \"Function\" or ast.tag == \"LocalAssign\" then\r\n\r\n\t\tif ast.tag == \"GlobalFunction\" or ast.tag == \"LocalFunction\" or ast.tag == \"Function\" then\r\n\r\n\t\t\tif text_tag.tag == \"Stat\" then\r\n\t\t\t\tlocal comment = mu.getComment(ast)\r\n\t\t\t\tif comment == nil then\r\n\t\t\t\t\tif string.find(style,\"explua\") then\r\n\t\t\t\t\t\tnew_text = new_text .. createStyleComment(ast,style) .. text_tag.text\r\n\r\n\t\t\t\t\t\tcomment_style.explua = \"---\\n--% \"\r\n\t\t\t\t\t\treturn_found = false\r\n\t\t\t\t\telseif style == \"luadoc\" then\r\n\t\t\t\t\t\tnew_text = new_text .. createStyleComment(ast,style) .. text_tag.text\r\n\t\t\t\t\t\tcomment_style.luadoc = \"-- @author\\n-- @name \"\r\n\t\t\t\t\t\treturn_found = false\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tnew_text = new_text .. text_tag.text\r\n\t\t\t\tend\r\n\t\t\t\t\ttext_tag.tag = \"\"\r\n\t\t\t\t\ttext_tag.text = \"\"\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tnew_text = new_text .. text_tag.text\r\n\t\t\ttext_tag.text = \"\"\r\n\t\tend\r\n\t\treturn\r\n\telse\r\n\t\tnew_text = new_text .. text_tag.text\r\n\t\ttext_tag.text = \"\"\r\n\tend\r\n\r\n\tif  ast.tag == \"IGNORED\" or ast.tag == \"Stat\" or ast.tag == \"LastStat\" then\r\n\r\n\t\tif ast.tag == \"Stat\" then\r\n\t\t\ttext_tag.tag = \"Stat\"\r\n\t\t\ttext_tag.text = ast.text\r\n\t\telseif ast.tag == \"LastStat\" then\r\n\t\t\tnew_text = new_text .. ast.text\r\n\t\t\treturn\r\n\t\telse\r\n\t\t\tnew_text = new_text .. ast.text\r\n\t\t\ttext_tag.tag = \"\"\r\n\t\tend\r\n\tend\r\n\r\n\r\n\tif type(ast.data) == \"table\" then\r\n\r\n\t\tfor k,v in pairs(ast.data) do\r\n\r\n\t\t\tfunctionComments(v,style)\r\n\r\n\t\tend\r\n\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "if ast.tag == \"GlobalFunction\" or ast.tag == \"LocalFunction\" or ast.tag == \"Function\" or ast.tag == \"LocalAssign\" then\r\n\r\n\t\tif ast.tag == \"GlobalFunction\" or ast.tag == \"LocalFunction\" or ast.tag == \"Function\" then\r\n\r\n\t\t\tif text_tag.tag == \"Stat\" then\r\n\t\t\t\tlocal comment = mu.getComment(ast)\r\n\t\t\t\tif comment == nil then\r\n\t\t\t\t\tif string.find(style,\"explua\") then\r\n\t\t\t\t\t\tnew_text = new_text .. createStyleComment(ast,style) .. text_tag.text\r\n\r\n\t\t\t\t\t\tcomment_style.explua = \"---\\n--% \"\r\n\t\t\t\t\t\treturn_found = false\r\n\t\t\t\t\telseif style == \"luadoc\" then\r\n\t\t\t\t\t\tnew_text = new_text .. createStyleComment(ast,style) .. text_tag.text\r\n\t\t\t\t\t\tcomment_style.luadoc = \"-- @author\\n-- @name \"\r\n\t\t\t\t\t\treturn_found = false\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tnew_text = new_text .. text_tag.text\r\n\t\t\t\tend\r\n\t\t\t\t\ttext_tag.tag = \"\"\r\n\t\t\t\t\ttext_tag.text = \"\"\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tnew_text = new_text .. text_tag.text\r\n\t\t\ttext_tag.text = \"\"\r\n\t\tend\r\n\t\treturn\r\n\telse\r\n\t\tnew_text = new_text .. text_tag.text\r\n\t\ttext_tag.text = \"\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "if ast.tag == \"GlobalFunction\" or ast.tag == \"LocalFunction\" or ast.tag == \"Function\" then\r\n\r\n\t\t\tif text_tag.tag == \"Stat\" then\r\n\t\t\t\tlocal comment = mu.getComment(ast)\r\n\t\t\t\tif comment == nil then\r\n\t\t\t\t\tif string.find(style,\"explua\") then\r\n\t\t\t\t\t\tnew_text = new_text .. createStyleComment(ast,style) .. text_tag.text\r\n\r\n\t\t\t\t\t\tcomment_style.explua = \"---\\n--% \"\r\n\t\t\t\t\t\treturn_found = false\r\n\t\t\t\t\telseif style == \"luadoc\" then\r\n\t\t\t\t\t\tnew_text = new_text .. createStyleComment(ast,style) .. text_tag.text\r\n\t\t\t\t\t\tcomment_style.luadoc = \"-- @author\\n-- @name \"\r\n\t\t\t\t\t\treturn_found = false\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tnew_text = new_text .. text_tag.text\r\n\t\t\t\tend\r\n\t\t\t\t\ttext_tag.tag = \"\"\r\n\t\t\t\t\ttext_tag.text = \"\"\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tnew_text = new_text .. text_tag.text\r\n\t\t\ttext_tag.text = \"\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "if text_tag.tag == \"Stat\" then\r\n\t\t\t\tlocal comment = mu.getComment(ast)\r\n\t\t\t\tif comment == nil then\r\n\t\t\t\t\tif string.find(style,\"explua\") then\r\n\t\t\t\t\t\tnew_text = new_text .. createStyleComment(ast,style) .. text_tag.text\r\n\r\n\t\t\t\t\t\tcomment_style.explua = \"---\\n--% \"\r\n\t\t\t\t\t\treturn_found = false\r\n\t\t\t\t\telseif style == \"luadoc\" then\r\n\t\t\t\t\t\tnew_text = new_text .. createStyleComment(ast,style) .. text_tag.text\r\n\t\t\t\t\t\tcomment_style.luadoc = \"-- @author\\n-- @name \"\r\n\t\t\t\t\t\treturn_found = false\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tnew_text = new_text .. text_tag.text\r\n\t\t\t\tend\r\n\t\t\t\t\ttext_tag.tag = \"\"\r\n\t\t\t\t\ttext_tag.text = \"\"\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "local comment = mu.getComment(ast)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if comment == nil then\r\n\t\t\t\t\tif string.find(style,\"explua\") then\r\n\t\t\t\t\t\tnew_text = new_text .. createStyleComment(ast,style) .. text_tag.text\r\n\r\n\t\t\t\t\t\tcomment_style.explua = \"---\\n--% \"\r\n\t\t\t\t\t\treturn_found = false\r\n\t\t\t\t\telseif style == \"luadoc\" then\r\n\t\t\t\t\t\tnew_text = new_text .. createStyleComment(ast,style) .. text_tag.text\r\n\t\t\t\t\t\tcomment_style.luadoc = \"-- @author\\n-- @name \"\r\n\t\t\t\t\t\treturn_found = false\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\tnew_text = new_text .. text_tag.text\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "if string.find(style,\"explua\") then\r\n\t\t\t\t\t\tnew_text = new_text .. createStyleComment(ast,style) .. text_tag.text\r\n\r\n\t\t\t\t\t\tcomment_style.explua = \"---\\n--% \"\r\n\t\t\t\t\t\treturn_found = false\r\n\t\t\t\t\telseif style == \"luadoc\" then\r\n\t\t\t\t\t\tnew_text = new_text .. createStyleComment(ast,style) .. text_tag.text\r\n\t\t\t\t\t\tcomment_style.luadoc = \"-- @author\\n-- @name \"\r\n\t\t\t\t\t\treturn_found = false\r\n\t\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "new_text = new_text .. createStyleComment(ast,style) .. text_tag.text",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "comment_style.explua = \"---\\n--% \"",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "comment_style.luadoc = \"-- @author\\n-- @name \"",
    "type": "statement:assign"
  }, {
    "id": 59,
    "text": "new_text = new_text .. text_tag.text",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 61,
    "text": "if  ast.tag == \"IGNORED\" or ast.tag == \"Stat\" or ast.tag == \"LastStat\" then\r\n\r\n\t\tif ast.tag == \"Stat\" then\r\n\t\t\ttext_tag.tag = \"Stat\"\r\n\t\t\ttext_tag.text = ast.text\r\n\t\telseif ast.tag == \"LastStat\" then\r\n\t\t\tnew_text = new_text .. ast.text\r\n\t\t\treturn\r\n\t\telse\r\n\t\t\tnew_text = new_text .. ast.text\r\n\t\t\ttext_tag.tag = \"\"\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "if ast.tag == \"Stat\" then\r\n\t\t\ttext_tag.tag = \"Stat\"\r\n\t\t\ttext_tag.text = ast.text\r\n\t\telseif ast.tag == \"LastStat\" then\r\n\t\t\tnew_text = new_text .. ast.text\r\n\t\t\treturn\r\n\t\telse\r\n\t\t\tnew_text = new_text .. ast.text\r\n\t\t\ttext_tag.tag = \"\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "text_tag.tag = \"Stat\"",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "text_tag.text = ast.text",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "new_text = new_text .. ast.text",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "if type(ast.data) == \"table\" then\r\n\r\n\t\tfor k,v in pairs(ast.data) do\r\n\r\n\t\t\tfunctionComments(v,style)\r\n\r\n\t\tend\r\n\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "for k,v in pairs(ast.data) do\r\n\r\n\t\t\tfunctionComments(v,style)\r\n\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 68,
    "text": "functionComments(v,style)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function createStyleComment(ast,style)\r\n\r\n\tif ast.tag == \"ParList\" then\r\n\r\n\t\tfor part in string.gmatch(ast.text, \"([^,%s]+)\") do\r\n\t\t\tif style == \"luadoc\" then\r\n\t\t\t\tcomment_style.luadoc = comment_style.luadoc .. \"-- @param \" .. part .. \"\\n\"\r\n\t\t\telseif style == \"explua\" then\r\n\t\t\t\tcomment_style.explua = comment_style.explua .. \"--@ \" .. part .. \" ()\\n\"\r\n\t\t\tend\r\n\t\tend\r\n\telseif ast.text == \"return\" or ast.tag == \"LastStat\"then\r\n\r\n\t\tif return_found == false then\r\n\t\t\tif ast.text == \"return\" then\r\n\t\t\t\treturn_found = true\r\n\t\t\telse\r\n\t\t\t\tlocal ret = findReturnValue(ast)\r\n\t\t\t\treturn_found = true\r\n\t\t\t\tif ret == nil then\r\n\t\t\t\t\tret = \"\"\r\n\t\t\t\t\treturn_found = false\r\n\t\t\t\tend\r\n\t\t\t\tif style == \"explua\" then\r\n\t\t\t\t\tcomment_style.explua = comment_style.explua .. \"--: \".. ret .. \" ()\\n\"\r\n\t\t\t\telseif style == \"luadoc\" then\r\n\t\t\t\t\tcomment_style.luadoc = comment_style.luadoc .. \"-- @return \".. ret .. \"\\n\"\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\r\n\telseif ast.tag == \"FuncName\" then\r\n\t\tif style == \"luadoc\" then\r\n\t\t\tcomment_style.luadoc =  \"-- The \" .. ast.text .. \" function\\n\" .. comment_style.luadoc .. \"\\n\"\r\n\t\telseif style == \"explua\" then\r\n\t\t\tcomment_style.explua = comment_style.explua .. \"The \" .. ast.text .. \" function\\n---\\n\"\r\n\t\tend\r\n\tend\r\n\tif type(ast.data) == \"table\" then\r\n\r\n\t\tfor k,v in pairs(ast.data) do\r\n\r\n\t\t\tcreateStyleComment(v,style)\r\n\r\n\t\tend\r\n\r\n\tend\r\n\tif style == \"luadoc\" then\r\n\t\treturn comment_style.luadoc\r\n\telseif style == \"explua\" then\r\n\t\treturn comment_style.explua\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 71,
    "text": "if ast.tag == \"ParList\" then\r\n\r\n\t\tfor part in string.gmatch(ast.text, \"([^,%s]+)\") do\r\n\t\t\tif style == \"luadoc\" then\r\n\t\t\t\tcomment_style.luadoc = comment_style.luadoc .. \"-- @param \" .. part .. \"\\n\"\r\n\t\t\telseif style == \"explua\" then\r\n\t\t\t\tcomment_style.explua = comment_style.explua .. \"--@ \" .. part .. \" ()\\n\"\r\n\t\t\tend\r\n\t\tend\r\n\telseif ast.text == \"return\" or ast.tag == \"LastStat\"then\r\n\r\n\t\tif return_found == false then\r\n\t\t\tif ast.text == \"return\" then\r\n\t\t\t\treturn_found = true\r\n\t\t\telse\r\n\t\t\t\tlocal ret = findReturnValue(ast)\r\n\t\t\t\treturn_found = true\r\n\t\t\t\tif ret == nil then\r\n\t\t\t\t\tret = \"\"\r\n\t\t\t\t\treturn_found = false\r\n\t\t\t\tend\r\n\t\t\t\tif style == \"explua\" then\r\n\t\t\t\t\tcomment_style.explua = comment_style.explua .. \"--: \".. ret .. \" ()\\n\"\r\n\t\t\t\telseif style == \"luadoc\" then\r\n\t\t\t\t\tcomment_style.luadoc = comment_style.luadoc .. \"-- @return \".. ret .. \"\\n\"\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\r\n\telseif ast.tag == \"FuncName\" then\r\n\t\tif style == \"luadoc\" then\r\n\t\t\tcomment_style.luadoc =  \"-- The \" .. ast.text .. \" function\\n\" .. comment_style.luadoc .. \"\\n\"\r\n\t\telseif style == \"explua\" then\r\n\t\t\tcomment_style.explua = comment_style.explua .. \"The \" .. ast.text .. \" function\\n---\\n\"\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 72,
    "text": "for part in string.gmatch(ast.text, \"([^,%s]+)\") do\r\n\t\t\tif style == \"luadoc\" then\r\n\t\t\t\tcomment_style.luadoc = comment_style.luadoc .. \"-- @param \" .. part .. \"\\n\"\r\n\t\t\telseif style == \"explua\" then\r\n\t\t\t\tcomment_style.explua = comment_style.explua .. \"--@ \" .. part .. \" ()\\n\"\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 73,
    "text": "if style == \"luadoc\" then\r\n\t\t\t\tcomment_style.luadoc = comment_style.luadoc .. \"-- @param \" .. part .. \"\\n\"\r\n\t\t\telseif style == \"explua\" then\r\n\t\t\t\tcomment_style.explua = comment_style.explua .. \"--@ \" .. part .. \" ()\\n\"\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "comment_style.luadoc = comment_style.luadoc .. \"-- @param \" .. part .. \"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "comment_style.explua = comment_style.explua .. \"--@ \" .. part .. \" ()\\n\"",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "if return_found == false then\r\n\t\t\tif ast.text == \"return\" then\r\n\t\t\t\treturn_found = true\r\n\t\t\telse\r\n\t\t\t\tlocal ret = findReturnValue(ast)\r\n\t\t\t\treturn_found = true\r\n\t\t\t\tif ret == nil then\r\n\t\t\t\t\tret = \"\"\r\n\t\t\t\t\treturn_found = false\r\n\t\t\t\tend\r\n\t\t\t\tif style == \"explua\" then\r\n\t\t\t\t\tcomment_style.explua = comment_style.explua .. \"--: \".. ret .. \" ()\\n\"\r\n\t\t\t\telseif style == \"luadoc\" then\r\n\t\t\t\t\tcomment_style.luadoc = comment_style.luadoc .. \"-- @return \".. ret .. \"\\n\"\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "if ast.text == \"return\" then\r\n\t\t\t\treturn_found = true\r\n\t\t\telse\r\n\t\t\t\tlocal ret = findReturnValue(ast)\r\n\t\t\t\treturn_found = true\r\n\t\t\t\tif ret == nil then\r\n\t\t\t\t\tret = \"\"\r\n\t\t\t\t\treturn_found = false\r\n\t\t\t\tend\r\n\t\t\t\tif style == \"explua\" then\r\n\t\t\t\t\tcomment_style.explua = comment_style.explua .. \"--: \".. ret .. \" ()\\n\"\r\n\t\t\t\telseif style == \"luadoc\" then\r\n\t\t\t\t\tcomment_style.luadoc = comment_style.luadoc .. \"-- @return \".. ret .. \"\\n\"\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "return_found = true",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "local ret = findReturnValue(ast)",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "if ret == nil then\r\n\t\t\t\t\tret = \"\"\r\n\t\t\t\t\treturn_found = false\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "ret = \"\"",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "if style == \"explua\" then\r\n\t\t\t\t\tcomment_style.explua = comment_style.explua .. \"--: \".. ret .. \" ()\\n\"\r\n\t\t\t\telseif style == \"luadoc\" then\r\n\t\t\t\t\tcomment_style.luadoc = comment_style.luadoc .. \"-- @return \".. ret .. \"\\n\"\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "comment_style.explua = comment_style.explua .. \"--: \".. ret .. \" ()\\n\"",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "comment_style.luadoc = comment_style.luadoc .. \"-- @return \".. ret .. \"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "if style == \"luadoc\" then\r\n\t\t\tcomment_style.luadoc =  \"-- The \" .. ast.text .. \" function\\n\" .. comment_style.luadoc .. \"\\n\"\r\n\t\telseif style == \"explua\" then\r\n\t\t\tcomment_style.explua = comment_style.explua .. \"The \" .. ast.text .. \" function\\n---\\n\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "comment_style.luadoc =  \"-- The \" .. ast.text .. \" function\\n\" .. comment_style.luadoc .. \"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "comment_style.explua = comment_style.explua .. \"The \" .. ast.text .. \" function\\n---\\n\"",
    "type": "statement:assign"
  }, {
    "id": 88,
    "text": "if type(ast.data) == \"table\" then\r\n\r\n\t\tfor k,v in pairs(ast.data) do\r\n\r\n\t\t\tcreateStyleComment(v,style)\r\n\r\n\t\tend\r\n\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "for k,v in pairs(ast.data) do\r\n\r\n\t\t\tcreateStyleComment(v,style)\r\n\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 90,
    "text": "createStyleComment(v,style)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "if style == \"luadoc\" then\r\n\t\treturn comment_style.luadoc\r\n\telseif style == \"explua\" then\r\n\t\treturn comment_style.explua\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function findReturnValue(ast)\r\n\t\tlocal ret = nil\r\n\t\tif ast.tag == \"ExpList\" then\r\n\t\t\treturn ast.text\r\n\t\tend\r\n\t\tfor k,v in pairs(ast.data) do\r\n\r\n\t\t\tret = findReturnValue(v)\r\n\r\n\t\tend\r\n\treturn ret\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "local ret = nil",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "if ast.tag == \"ExpList\" then\r\n\t\t\treturn ast.text\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "for k,v in pairs(ast.data) do\r\n\r\n\t\t\tret = findReturnValue(v)\r\n\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 97,
    "text": "ret = findReturnValue(v)",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function astToString(ast)\r\n\r\n\tif ast.tag == \"GlobalFunction\" or ast.tag == \"LocalFunction\" or ast.tag == \"Function\" or ast.tag == \"LocalAssign\" then\r\n\t\treturn\r\n\tend\r\n\r\n\tif  ast.tag == \"IGNORED\" or ast.tag == \"Stat\" or ast.tag == \"LastStat\" then\r\n\t\tnew_text = new_text .. ast.text\r\n\tend\r\n\r\n\r\n\tif type(ast.data) == \"table\" then\r\n\t\tfor k,v in pairs(ast.data) do\r\n\t\t\tastToString(v)\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 100,
    "text": "if ast.tag == \"GlobalFunction\" or ast.tag == \"LocalFunction\" or ast.tag == \"Function\" or ast.tag == \"LocalAssign\" then\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "if  ast.tag == \"IGNORED\" or ast.tag == \"Stat\" or ast.tag == \"LastStat\" then\r\n\t\tnew_text = new_text .. ast.text\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "if type(ast.data) == \"table\" then\r\n\t\tfor k,v in pairs(ast.data) do\r\n\t\t\tastToString(v)\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "for k,v in pairs(ast.data) do\r\n\t\t\tastToString(v)\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 104,
    "text": "astToString(v)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function findConstructions(ast)\r\n\r\n\tif ast.tag == \"If\" then\r\n\t\tlocal info = {}\r\n\t\tlocal comm = mu.getComment(ast)\r\n\r\n\t\tif comm == nil then\r\n\t\t\tinfo.com = nil\r\n\t\telseif (string.match(comm,\"--_\")) == \"--_\" then\r\n\t\t\tinfo.comm = 1\r\n\t\telse\r\n\t\t\tinfo.comm = nil\r\n\t\tend\r\n\t\tinfo.stat = \"If\"\r\n\t\tinfo.len = string.len(ast.text)\r\n\t\tinfo.pos = ast.position\r\n\t\ttable.insert(stat_table,info)\r\n\tend\r\n\r\n\tif ast.tag == \"GenericFor\" or ast.tag == \"NumericFor\" or ast.tag == \"While\" then\r\n\t\tlocal info = {}\r\n\t\tlocal comm = mu.getComment(ast)\r\n\r\n\t\tif comm == nil then\r\n\t\t\tinfo.com = nil\r\n\t\telseif (string.match(comm,\"--_\")) == \"--_\" then\r\n\t\t\tinfo.comm = 1\r\n\t\telse\r\n\t\t\tinfo.comm = nil\r\n\t\tend\r\n\t\tinfo.stat = \"For\"\r\n\t\tinfo.len = string.len(ast.text)\r\n\t\tinfo.pos = ast.position\r\n\t\ttable.insert(stat_table,info)\r\n\tend\r\n\r\n\tif ast.tag == \"FuncBody\" then\r\n\t\tlocal info = {}\r\n\t\tlocal text = string.len(string.match(ast.text,\"%([^%)]*%)\"))\r\n\t\tlocal comm = string.match(string.sub(ast.text,string.len(text)),\"%s%-%-%[%[\") --matching --[[ at the start of function\r\n\r\n\t\tif comm ~= nil then\r\n\t\t\tinfo.comm = 1\r\n\t\telse\r\n\t\t\tinfo.comm = nil\r\n\t\tend\r\n\t\tinfo.stat = \"FuncBody\"\r\n\t\tinfo.len = string.len(ast.text)\r\n\t\tinfo.pos = ast.position + text + 1\r\n\t\ttable.insert(stat_table,info)\r\n\tend\r\n\r\n\tif type(ast.data) == \"table\" then\r\n\r\n\t\tfor k,v in pairs(ast.data) do\r\n\r\n\t\t\tfindConstructions(v)\r\n\r\n\t\tend\r\n\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "if ast.tag == \"If\" then\r\n\t\tlocal info = {}\r\n\t\tlocal comm = mu.getComment(ast)\r\n\r\n\t\tif comm == nil then\r\n\t\t\tinfo.com = nil\r\n\t\telseif (string.match(comm,\"--_\")) == \"--_\" then\r\n\t\t\tinfo.comm = 1\r\n\t\telse\r\n\t\t\tinfo.comm = nil\r\n\t\tend\r\n\t\tinfo.stat = \"If\"\r\n\t\tinfo.len = string.len(ast.text)\r\n\t\tinfo.pos = ast.position\r\n\t\ttable.insert(stat_table,info)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "local info = {}",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "local comm = mu.getComment(ast)",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "if comm == nil then\r\n\t\t\tinfo.com = nil\r\n\t\telseif (string.match(comm,\"--_\")) == \"--_\" then\r\n\t\t\tinfo.comm = 1\r\n\t\telse\r\n\t\t\tinfo.comm = nil\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "info.com = nil",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "info.comm = 1",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "info.comm = nil",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "info.stat = \"If\"",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "info.len = string.len(ast.text)",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "info.pos = ast.position",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "table.insert(stat_table,info)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "if ast.tag == \"GenericFor\" or ast.tag == \"NumericFor\" or ast.tag == \"While\" then\r\n\t\tlocal info = {}\r\n\t\tlocal comm = mu.getComment(ast)\r\n\r\n\t\tif comm == nil then\r\n\t\t\tinfo.com = nil\r\n\t\telseif (string.match(comm,\"--_\")) == \"--_\" then\r\n\t\t\tinfo.comm = 1\r\n\t\telse\r\n\t\t\tinfo.comm = nil\r\n\t\tend\r\n\t\tinfo.stat = \"For\"\r\n\t\tinfo.len = string.len(ast.text)\r\n\t\tinfo.pos = ast.position\r\n\t\ttable.insert(stat_table,info)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "info.stat = \"For\"",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "if ast.tag == \"FuncBody\" then\r\n\t\tlocal info = {}\r\n\t\tlocal text = string.len(string.match(ast.text,\"%([^%)]*%)\"))\r\n\t\tlocal comm = string.match(string.sub(ast.text,string.len(text)),\"%s%-%-%[%[\") --matching --[[ at the start of function\r\n\r\n\t\tif comm ~= nil then\r\n\t\t\tinfo.comm = 1\r\n\t\telse\r\n\t\t\tinfo.comm = nil\r\n\t\tend\r\n\t\tinfo.stat = \"FuncBody\"\r\n\t\tinfo.len = string.len(ast.text)\r\n\t\tinfo.pos = ast.position + text + 1\r\n\t\ttable.insert(stat_table,info)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 121,
    "text": "local text = string.len(string.match(ast.text,\"%([^%)]*%)\"))",
    "type": "statement:localassign"
  }, {
    "id": 122,
    "text": "local comm = string.match(string.sub(ast.text,string.len(text)),\"%s%-%-%[%[\")",
    "type": "statement:localassign"
  }, {
    "id": 123,
    "text": "if comm ~= nil then\r\n\t\t\tinfo.comm = 1\r\n\t\telse\r\n\t\t\tinfo.comm = nil\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "info.stat = \"FuncBody\"",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "info.pos = ast.position + text + 1",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "if type(ast.data) == \"table\" then\r\n\r\n\t\tfor k,v in pairs(ast.data) do\r\n\r\n\t\t\tfindConstructions(v)\r\n\r\n\t\tend\r\n\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 127,
    "text": "for k,v in pairs(ast.data) do\r\n\r\n\t\t\tfindConstructions(v)\r\n\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 128,
    "text": "findConstructions(v)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function docstringComments()\r\n\tlocal shift = 0\r\n\r\n\tfor k,v in pairs(stat_table) do\r\n\t\tif(stat_table[k].len > 100 and stat_table[k].comm == nil) then\r\n\t\t\tlocal part1 = string.sub(new_text,0,stat_table[k].pos+shift)\r\n\t\t\tlocal part2 = string.sub(new_text,stat_table[k].pos+shift+1)\r\n\t\t\tif stat_table[k].stat ~= \"FuncBody\" then\r\n\t\t\t\tlocal space = string.match(part1,\"[^\\n]*$\")\r\n\t\t\t\tnew_text = part1 .. \"--_write comment\\n\" .. space .. part2\r\n\t\t\t\tshift = shift + 17 + string.len(space)\r\n\t\t\telseif stat_table[k].stat == \"FuncBody\" then\r\n\t\t\t\tnew_text = part1 .. \"\\t--[[\\n\\twrite docstring comment\\n\\t--]]\\n\" .. part2\r\n\t\t\t\tshift = shift + 37\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 131,
    "text": "local shift = 0",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "for k,v in pairs(stat_table) do\r\n\t\tif(stat_table[k].len > 100 and stat_table[k].comm == nil) then\r\n\t\t\tlocal part1 = string.sub(new_text,0,stat_table[k].pos+shift)\r\n\t\t\tlocal part2 = string.sub(new_text,stat_table[k].pos+shift+1)\r\n\t\t\tif stat_table[k].stat ~= \"FuncBody\" then\r\n\t\t\t\tlocal space = string.match(part1,\"[^\\n]*$\")\r\n\t\t\t\tnew_text = part1 .. \"--_write comment\\n\" .. space .. part2\r\n\t\t\t\tshift = shift + 17 + string.len(space)\r\n\t\t\telseif stat_table[k].stat == \"FuncBody\" then\r\n\t\t\t\tnew_text = part1 .. \"\\t--[[\\n\\twrite docstring comment\\n\\t--]]\\n\" .. part2\r\n\t\t\t\tshift = shift + 37\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 133,
    "text": "if(stat_table[k].len > 100 and stat_table[k].comm == nil) then\r\n\t\t\tlocal part1 = string.sub(new_text,0,stat_table[k].pos+shift)\r\n\t\t\tlocal part2 = string.sub(new_text,stat_table[k].pos+shift+1)\r\n\t\t\tif stat_table[k].stat ~= \"FuncBody\" then\r\n\t\t\t\tlocal space = string.match(part1,\"[^\\n]*$\")\r\n\t\t\t\tnew_text = part1 .. \"--_write comment\\n\" .. space .. part2\r\n\t\t\t\tshift = shift + 17 + string.len(space)\r\n\t\t\telseif stat_table[k].stat == \"FuncBody\" then\r\n\t\t\t\tnew_text = part1 .. \"\\t--[[\\n\\twrite docstring comment\\n\\t--]]\\n\" .. part2\r\n\t\t\t\tshift = shift + 37\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "local part1 = string.sub(new_text,0,stat_table[k].pos+shift)",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "local part2 = string.sub(new_text,stat_table[k].pos+shift+1)",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "if stat_table[k].stat ~= \"FuncBody\" then\r\n\t\t\t\tlocal space = string.match(part1,\"[^\\n]*$\")\r\n\t\t\t\tnew_text = part1 .. \"--_write comment\\n\" .. space .. part2\r\n\t\t\t\tshift = shift + 17 + string.len(space)\r\n\t\t\telseif stat_table[k].stat == \"FuncBody\" then\r\n\t\t\t\tnew_text = part1 .. \"\\t--[[\\n\\twrite docstring comment\\n\\t--]]\\n\" .. part2\r\n\t\t\t\tshift = shift + 37\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 137,
    "text": "local space = string.match(part1,\"[^\\n]*$\")",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "new_text = part1 .. \"--_write comment\\n\" .. space .. part2",
    "type": "statement:assign"
  }, {
    "id": 139,
    "text": "shift = shift + 17 + string.len(space)",
    "type": "statement:assign"
  }, {
    "id": 140,
    "text": "new_text = part1 .. \"\\t--[[\\n\\twrite docstring comment\\n\\t--]]\\n\" .. part2",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "shift = shift + 37",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "",
    "type": "function container"
  }, {
    "id": 144,
    "text": "function main (arg)\r\n\r\n\tlocal argc = #arg\r\n\tif argc < 1 then\r\n\t\tprint_help ()\r\n\t\treturn\r\n\tend\r\n\tprocess_options (arg)\r\n\tif style == \"\" then\r\n\t\tstyle = \"luadoc\"\r\n\tend\r\n\tif path ~= \"\" then\r\n\t\tif output == nil then\r\n\t\t\toutput = path\r\n\t\tend\r\n\t\treturn tc.addComments(path, style, func, output)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 145,
    "text": "io",
    "type": "module"
  }, {
    "id": 146,
    "text": "input",
    "type": "global function"
  }, {
    "id": 147,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 148,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 149,
    "text": "getComment",
    "type": "global function"
  }, {
    "id": 150,
    "text": "open",
    "type": "global function"
  }, {
    "id": 151,
    "text": "metrics",
    "type": "module"
  }, {
    "id": 152,
    "text": "processText",
    "type": "global function"
  }, {
    "id": 153,
    "text": "dir",
    "type": "global function"
  }, {
    "id": 154,
    "text": "mkdir",
    "type": "global function"
  }, {
    "id": 155,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 156,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 157,
    "text": "print",
    "type": "global function"
  }, {
    "id": 158,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 159,
    "text": "match",
    "type": "global function"
  }, {
    "id": 160,
    "text": "len",
    "type": "global function"
  }, {
    "id": 161,
    "text": "module",
    "type": "global function"
  }, {
    "id": 162,
    "text": "find",
    "type": "global function"
  }, {
    "id": 163,
    "text": "type",
    "type": "global function"
  }, {
    "id": 164,
    "text": "require",
    "type": "global function"
  }, {
    "id": 165,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 166,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 167,
    "text": "",
    "type": "variable container"
  }, {
    "id": 168,
    "text": "",
    "type": "require container"
  }, {
    "id": 169,
    "text": "",
    "type": "local variable"
  }, {
    "id": 170,
    "text": "",
    "type": "n/a"
  }, {
    "id": 171,
    "text": "",
    "type": "local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "n/a"
  }, {
    "id": 173,
    "text": "",
    "type": "local variable"
  }, {
    "id": 174,
    "text": "",
    "type": "n/a"
  }, {
    "id": 175,
    "text": "",
    "type": "local variable"
  }, {
    "id": 176,
    "text": "",
    "type": "n/a"
  }, {
    "id": 177,
    "text": "",
    "type": "local variable"
  }, {
    "id": 178,
    "text": "",
    "type": "n/a"
  }, {
    "id": 179,
    "text": "",
    "type": "local variable"
  }, {
    "id": 180,
    "text": "",
    "type": "n/a"
  }, {
    "id": 181,
    "text": "",
    "type": "local variable"
  }, {
    "id": 182,
    "text": "",
    "type": "string"
  }, {
    "id": 183,
    "text": "",
    "type": "local variable"
  }, {
    "id": 184,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 185,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 186,
    "text": "",
    "type": "string"
  }, {
    "id": 187,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 188,
    "text": "",
    "type": "string"
  }, {
    "id": 189,
    "text": "",
    "type": "local variable"
  }, {
    "id": 190,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 191,
    "text": "",
    "type": "local variable"
  }, {
    "id": 192,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 193,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 194,
    "text": "",
    "type": "string"
  }, {
    "id": 195,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 196,
    "text": "",
    "type": "string"
  }, {
    "id": 197,
    "text": "",
    "type": "local variable"
  }, {
    "id": 198,
    "text": "",
    "type": "boolean"
  }, {
    "id": 199,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 200,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 201,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 202,
    "text": "utils",
    "type": "module"
  }, {
    "id": 203,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 204,
    "text": "util",
    "type": "module"
  }, {
    "id": 205,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 206,
    "text": "",
    "type": "require local variable"
  } ]
}