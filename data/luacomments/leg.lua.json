{
  "_filename": "leg.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacomments/src/comments/leg.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "calls",
    "to": 14
  }, {
    "from": 11,
    "label": "calls",
    "to": 14
  }, {
    "from": 11,
    "label": "calls",
    "to": 13
  }, {
    "from": 2,
    "label": "calls",
    "to": 12
  }, {
    "from": 1,
    "label": "contains",
    "to": 11
  }, {
    "from": 11,
    "label": "declares",
    "to": 2
  }, {
    "from": 17,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 18
  }, {
    "from": 1,
    "label": "contains",
    "to": 19
  }, {
    "from": 19,
    "label": "initializes",
    "to": 20
  }, {
    "from": 20,
    "label": "requires",
    "to": 15
  }, {
    "from": 19,
    "label": "initializes",
    "to": 21
  }, {
    "from": 21,
    "label": "requires",
    "to": 16
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "leg",
    "type": "module"
  }, {
    "id": 2,
    "text": "function parse(text)\r\n \r\n  local x = re.compile( [==[\r\n  start     <- (st)                               ->{}\r\n  st        <- (s begin s between s close s) \r\n  between   <- (!close (short  long? {:params:param?:} {:returns:ret?:} ))  \r\n\r\n  short     <- (s {:short:[^%nl]+:} s)                                    --prvy riadok -short description\r\n  long      <- (s {:long:(!(param)!(ret)!(close).)+:} s)                  --ostatne riadky kym sa nenajde param alebo ret - long description\r\n\r\n  param     <- (s'**'\"Parameters:\"   '**' s ((!(%nl%nl)& !ret )parameter )*  s) ->{}\r\n  ret       <- (s'**'\"Returns:\"      '**' s ((!(%nl%nl) & !close) returns )*  s)   ->{}\r\n\r\n  returns   <- (s [^`]* \"`\" {:var:variable:} \"`\"  {:text:(!(%nl).)+:} {:type:\"\"->\"return\" :} )  ->{}\r\n  parameter <- (s [^`]* \"`\" {:var:variable:} \"`\"  {:text:(!(%nl).)+:} {:type:\"\"->\"param\" :} )  ->{}\r\n\r\n  variable  <- ]==] .. common.variable .. [==[\r\n  begin     <-('--[' {:trail: '='*:} '[')\r\n  close     <- (s '--]' =trail ']')\r\n  s         <- [%s]*\r\n  ]==]\r\n  )\r\n  x=x:match(text)\r\n  if(x)then\r\n    x.tag=\"comment\"\r\n    x.style=\"leg\"\r\n    x.trail=nil\r\n    return x\r\n  else\r\n  return nil,\"Nothing parsed!\"\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local x = re.compile( [==[\r\n  start     <- (st)                               ->{}\r\n  st        <- (s begin s between s close s) \r\n  between   <- (!close (short  long? {:params:param?:} {:returns:ret?:} ))  \r\n\r\n  short     <- (s {:short:[^%nl]+:} s)                                    --prvy riadok -short description\r\n  long      <- (s {:long:(!(param)!(ret)!(close).)+:} s)                  --ostatne riadky kym sa nenajde param alebo ret - long description\r\n\r\n  param     <- (s'**'\"Parameters:\"   '**' s ((!(%nl%nl)& !ret )parameter )*  s) ->{}\r\n  ret       <- (s'**'\"Returns:\"      '**' s ((!(%nl%nl) & !close) returns )*  s)   ->{}\r\n\r\n  returns   <- (s [^`]* \"`\" {:var:variable:} \"`\"  {:text:(!(%nl).)+:} {:type:\"\"->\"return\" :} )  ->{}\r\n  parameter <- (s [^`]* \"`\" {:var:variable:} \"`\"  {:text:(!(%nl).)+:} {:type:\"\"->\"param\" :} )  ->{}\r\n\r\n  variable  <- ]==] .. common.variable .. [==[\r\n  begin     <-('--[' {:trail: '='*:} '[')\r\n  close     <- (s '--]' =trail ']')\r\n  s         <- [%s]*\r\n  ]==]\r\n  )",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "x=x:match(text)",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "if(x)then\r\n    x.tag=\"comment\"\r\n    x.style=\"leg\"\r\n    x.trail=nil\r\n    return x\r\n  else\r\n  return nil,\"Nothing parsed!\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "x.tag=\"comment\"",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "x.style=\"leg\"",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "x.trail=nil",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "",
    "type": "function container"
  }, {
    "id": 12,
    "text": "compile",
    "type": "global function"
  }, {
    "id": 13,
    "text": "module",
    "type": "global function"
  }, {
    "id": 14,
    "text": "require",
    "type": "global function"
  }, {
    "id": 15,
    "text": "(re)",
    "type": "module"
  }, {
    "id": 16,
    "text": "common)",
    "type": "module"
  }, {
    "id": 17,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 18,
    "text": "",
    "type": "variable container"
  }, {
    "id": 19,
    "text": "",
    "type": "require container"
  }, {
    "id": 20,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 21,
    "text": "",
    "type": "require local variable"
  } ]
}