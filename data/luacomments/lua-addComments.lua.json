{
  "_filename": "lua-addComments.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacomments/src/lua-addComments.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 11,
    "label": "has",
    "to": 17
  }, {
    "from": 7,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 19,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 19,
    "label": "has",
    "to": 23
  }, {
    "from": 19,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 23
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 23
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 23
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 26
  }, {
    "from": 41,
    "label": "has",
    "to": 23
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 23
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 7,
    "label": "calls",
    "to": 50
  }, {
    "from": 4,
    "label": "calls",
    "to": 52
  }, {
    "from": 19,
    "label": "calls",
    "to": 4
  }, {
    "from": 19,
    "label": "calls",
    "to": 3
  }, {
    "from": 7,
    "label": "calls",
    "to": 51
  }, {
    "from": 49,
    "label": "calls",
    "to": 53
  }, {
    "from": 49,
    "label": "calls",
    "to": 53
  }, {
    "from": 49,
    "label": "calls",
    "to": 19
  }, {
    "from": 49,
    "label": "calls",
    "to": 54
  }, {
    "from": 7,
    "label": "calls",
    "to": 55
  }, {
    "from": 7,
    "label": "calls",
    "to": 55
  }, {
    "from": 7,
    "label": "calls",
    "to": 55
  }, {
    "from": 19,
    "label": "calls",
    "to": 7
  }, {
    "from": 2,
    "label": "contains",
    "to": 49
  }, {
    "from": 49,
    "label": "declares",
    "to": 4
  }, {
    "from": 49,
    "label": "declares",
    "to": 7
  }, {
    "from": 49,
    "label": "declares",
    "to": 19
  }, {
    "from": 49,
    "label": "declares",
    "to": 31
  }, {
    "from": 49,
    "label": "declares",
    "to": 35
  }, {
    "from": 49,
    "label": "declares",
    "to": 38
  }, {
    "from": 49,
    "label": "declares",
    "to": 41
  }, {
    "from": 49,
    "label": "declares",
    "to": 45
  }, {
    "from": 2,
    "label": "contains",
    "to": 56
  }, {
    "from": 2,
    "label": "contains",
    "to": 57
  }, {
    "from": 56,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 56,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 56,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 56,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 56,
    "label": "initializes",
    "to": 66
  }, {
    "from": 56,
    "label": "initializes",
    "to": 67
  }, {
    "from": 67,
    "label": "assigns",
    "to": 68
  }, {
    "from": 68,
    "label": "assigns",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 68,
    "label": "assigns",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 68,
    "label": "assigns",
    "to": 73
  }, {
    "from": 73,
    "label": "assigns",
    "to": 74
  }, {
    "from": 68,
    "label": "assigns",
    "to": 75
  }, {
    "from": 75,
    "label": "assigns",
    "to": 76
  }, {
    "from": 68,
    "label": "assigns",
    "to": 77
  }, {
    "from": 77,
    "label": "assigns",
    "to": 78
  }, {
    "from": 68,
    "label": "assigns",
    "to": 79
  }, {
    "from": 79,
    "label": "assigns",
    "to": 80
  }, {
    "from": 68,
    "label": "assigns",
    "to": 81
  }, {
    "from": 81,
    "label": "assigns",
    "to": 82
  }, {
    "from": 57,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "requires",
    "to": 1
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 72
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 76
  }, {
    "from": 5,
    "label": "hasArgument",
    "to": 78
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 72
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 76
  }, {
    "from": 22,
    "label": "hasArgument",
    "to": 78
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 72
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 74
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 76
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 78
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "templateComments",
    "type": "module"
  }, {
    "id": 2,
    "text": "lua-addComments",
    "type": "module"
  }, {
    "id": 3,
    "text": "function addComments(path, style, func, output)\r\n\r\n\tif (string.find(path, \"%.lua\") ~= nil) then\r\n\t\tif (string.find(output, \"%.lua\") ~= nil) then\r\n\t\t\toutput = string.sub(output, 0, string.len(output)-4)\r\n\t\t\toutput = output .. \"(1).lua\"\r\n\t\telse\r\n\t\t\tname = string.match(path, \"%/%a+%.lua\")\r\n\t\t\toutput = output .. name\r\n\t\tend\r\n\t    processFile(path, style, func, output)\r\n\telse\r\n\t    for file in lfs.dir(path) do\r\n\t        if file ~= \".\" and file ~= \"..\" then\r\n\t            local f = path..'/'..file\r\n\t            local attr = lfs.attributes (f)\r\n\t            assert (type(attr) == \"table\")\r\n\t            if attr.mode == \"directory\" then\r\n\t            \toutput = output .. '/' .. file\r\n\t            \tlfs.mkdir(output)\r\n\t                addComments(f,style, func,output)\r\n\t                output = output .. \"/..\"\r\n\t            else\r\n\t            \tif string.find(file, \"%.lua\") ~= nil then\r\n\t                \tprocessFile(path .. \"/\" .. file, style, func, output .. \"/\" .. file)\r\n\t            \tend\r\n\t            end\r\n\t        end\r\n\t    end\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function print_help ()\r\nprint (\"Usage: \"..arg[0]..[[ \r\nAdd function comments or docstring comments to given file or directory of files. \r\nAvailable options are:\r\n  -p path                      \tinput directory or file path\r\n  -f \t\t\t\tadd function comments\r\n  -d  \t\t\t\tadd docstring comments\r\n  -s style                     \tstyle of comments you want to add (explua, luadoc)\r\n  -o path\t\t\toutput directory (optional)\r\n  -h, --help                   \tprint this help and exit]])\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "print (\"Usage: \"..arg[0]..[[ \r\nAdd function comments or docstring comments to given file or directory of files. \r\nAvailable options are:\r\n  -p path                      \tinput directory or file path\r\n  -f \t\t\t\tadd function comments\r\n  -d  \t\t\t\tadd docstring comments\r\n  -s style                     \tstyle of comments you want to add (explua, luadoc)\r\n  -o path\t\t\toutput directory (optional)\r\n  -h, --help                   \tprint this help and exit]])",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function process_options (arg)\r\n\t\r\n\tlocal i = 1\r\n\twhile i < #arg or i == #arg do\r\n\t\tlocal argi = arg[i]\t\t\r\n\t\tif string.sub (argi, 1, 1) == '-' then\r\n\r\n\t\t\tlocal opt = string.sub (argi, 2)\r\n\r\n\t\t\tif string.sub (opt, 1, 1) == '-' then\r\n\t\t\t\topt = string.gsub (opt, \"%-\", \"\")\r\n\r\n\t\t\tend\r\n\t\t\tif OPTIONS[opt] then\r\n\t\t\t\tif OPTIONS[opt] (arg, i) then\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\telse i = i + 1\r\n\t\t\t\tend\r\n\t\t\telse i = i + 1\r\n\t\t\tend\r\n\t\telse i = i + 1\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "while i < #arg or i == #arg do\r\n\t\tlocal argi = arg[i]\t\t\r\n\t\tif string.sub (argi, 1, 1) == '-' then\r\n\r\n\t\t\tlocal opt = string.sub (argi, 2)\r\n\r\n\t\t\tif string.sub (opt, 1, 1) == '-' then\r\n\t\t\t\topt = string.gsub (opt, \"%-\", \"\")\r\n\r\n\t\t\tend\r\n\t\t\tif OPTIONS[opt] then\r\n\t\t\t\tif OPTIONS[opt] (arg, i) then\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\telse i = i + 1\r\n\t\t\t\tend\r\n\t\t\telse i = i + 1\r\n\t\t\tend\r\n\t\telse i = i + 1\r\n\t\tend\r\n\tend",
    "type": "statement:while"
  }, {
    "id": 10,
    "text": "local argi = arg[i]",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if string.sub (argi, 1, 1) == '-' then\r\n\r\n\t\t\tlocal opt = string.sub (argi, 2)\r\n\r\n\t\t\tif string.sub (opt, 1, 1) == '-' then\r\n\t\t\t\topt = string.gsub (opt, \"%-\", \"\")\r\n\r\n\t\t\tend\r\n\t\t\tif OPTIONS[opt] then\r\n\t\t\t\tif OPTIONS[opt] (arg, i) then\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\telse i = i + 1\r\n\t\t\t\tend\r\n\t\t\telse i = i + 1\r\n\t\t\tend\r\n\t\telse i = i + 1\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "local opt = string.sub (argi, 2)",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if string.sub (opt, 1, 1) == '-' then\r\n\t\t\t\topt = string.gsub (opt, \"%-\", \"\")\r\n\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "opt = string.gsub (opt, \"%-\", \"\")",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "if OPTIONS[opt] then\r\n\t\t\t\tif OPTIONS[opt] (arg, i) then\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\telse i = i + 1\r\n\t\t\t\tend\r\n\t\t\telse i = i + 1\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "if OPTIONS[opt] (arg, i) then\r\n\t\t\t\t\ti = i + 1\r\n\t\t\t\telse i = i + 1\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function main (arg)\r\n\r\n\tlocal argc = #arg\r\n\tif argc < 1 then\r\n\t\tprint_help ()\r\n\t\treturn\r\n\tend\r\n\tprocess_options (arg)\r\n\tif style == \"\" then\r\n\t\tstyle = \"luadoc\"\r\n\tend\r\n\tif path ~= \"\" then\r\n\t\tif output == nil then\r\n\t\t\toutput = path\r\n\t\tend\r\n\t\treturn tc.addComments(path, style, func, output)\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local argc = #arg",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if argc < 1 then\r\n\t\tprint_help ()\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "print_help ()",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 24,
    "text": "process_options (arg)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "if style == \"\" then\r\n\t\tstyle = \"luadoc\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "style = \"luadoc\"",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "if path ~= \"\" then\r\n\t\tif output == nil then\r\n\t\t\toutput = path\r\n\t\tend\r\n\t\treturn tc.addComments(path, style, func, output)\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "if output == nil then\r\n\t\t\toutput = path\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "output = path",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function (arg, i)\r\n\t\tlocal dir = arg[i+1]\r\n\t\tpath = dir\r\n\t\treturn 1\r\n\tend",
    "type": "function"
  }, {
    "id": 32,
    "text": "local dir = arg[i+1]",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "path = dir",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function (arg, i)\r\n\t\tfunc = true\r\n\t\treturn 1\r\n\tend",
    "type": "function"
  }, {
    "id": 36,
    "text": "func = true",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function (arg, i)\r\n\t\tfunc = false\r\n\t\treturn 1\r\n\tend",
    "type": "function"
  }, {
    "id": 39,
    "text": "func = false",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function (arg, i)\r\n\t\tif string.find(arg[i+1],\"explua\") then\r\n\t\t\tstyle = \"explua\"\r\n\t\telseif string.find(arg[i+1],\"luadoc\") then\r\n\t\t\tstyle = \"luadoc\"\r\n\t\tend\r\n\t\treturn 1\r\n\tend",
    "type": "function"
  }, {
    "id": 42,
    "text": "if string.find(arg[i+1],\"explua\") then\r\n\t\t\tstyle = \"explua\"\r\n\t\telseif string.find(arg[i+1],\"luadoc\") then\r\n\t\t\tstyle = \"luadoc\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "style = \"explua\"",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function (arg, i)\r\n\t\tlocal dir2 = arg[i+1]\r\n\t\toutput = dir2\r\n\t\treturn 1\r\n\tend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local dir2 = arg[i+1]",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "output = dir2",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "",
    "type": "function container"
  }, {
    "id": 50,
    "text": "OPTIONS[opt]",
    "type": "global function"
  }, {
    "id": 51,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 52,
    "text": "print",
    "type": "global function"
  }, {
    "id": 53,
    "text": "find",
    "type": "global function"
  }, {
    "id": 54,
    "text": "require",
    "type": "global function"
  }, {
    "id": 55,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 56,
    "text": "",
    "type": "variable container"
  }, {
    "id": 57,
    "text": "",
    "type": "require container"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "string"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "boolean"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "string"
  }, {
    "id": 66,
    "text": "",
    "type": "local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 69,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 70,
    "text": "",
    "type": "function"
  }, {
    "id": 71,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 72,
    "text": "",
    "type": "function"
  }, {
    "id": 73,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 74,
    "text": "",
    "type": "function"
  }, {
    "id": 75,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 76,
    "text": "",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 78,
    "text": "",
    "type": "function"
  }, {
    "id": 79,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 80,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 81,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 82,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  } ]
}