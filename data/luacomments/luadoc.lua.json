{
  "_filename": "luadoc.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/luacomments/src/comments/luadoc.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "calls",
    "to": 3
  }, {
    "from": 2,
    "label": "calls",
    "to": 3
  }, {
    "from": 2,
    "label": "calls",
    "to": 3
  }, {
    "from": 2,
    "label": "calls",
    "to": 3
  }, {
    "from": 2,
    "label": "calls",
    "to": 3
  }, {
    "from": 2,
    "label": "calls",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "calls",
    "to": 14
  }, {
    "from": 11,
    "label": "calls",
    "to": 14
  }, {
    "from": 11,
    "label": "calls",
    "to": 13
  }, {
    "from": 3,
    "label": "calls",
    "to": 12
  }, {
    "from": 1,
    "label": "contains",
    "to": 11
  }, {
    "from": 11,
    "label": "declares",
    "to": 3
  }, {
    "from": 17,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 18
  }, {
    "from": 1,
    "label": "contains",
    "to": 19
  }, {
    "from": 18,
    "label": "initializes",
    "to": 20
  }, {
    "from": 20,
    "label": "assigns",
    "to": 21
  }, {
    "from": 18,
    "label": "initializes",
    "to": 22
  }, {
    "from": 22,
    "label": "assigns",
    "to": 23
  }, {
    "from": 18,
    "label": "initializes",
    "to": 24
  }, {
    "from": 24,
    "label": "assigns",
    "to": 25
  }, {
    "from": 19,
    "label": "initializes",
    "to": 26
  }, {
    "from": 26,
    "label": "requires",
    "to": 15
  }, {
    "from": 19,
    "label": "initializes",
    "to": 27
  }, {
    "from": 27,
    "label": "requires",
    "to": 16
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "luadoc",
    "type": "module"
  }, {
    "id": 2,
    "text": "function Parse(text,parser,extended)\r\n\tlocal result,errno\r\n\r\n\tif(parser==\"explua\")then\r\n\t\treturn explua.parse(text,extended)\r\n\telseif(parser==\"luadoc\")then\r\n\t\treturn\tluadoc.parse(text)\r\n\telseif(parser==\"literate\")then\r\n\t\treturn literate.parse(text)\r\n\telseif(parser==\"custom\")then\r\n\t\treturn custom.parse(text)\r\n\telseif(parser==\"ldoc\")then\r\n\t\treturn\tldoc.parse(text)\r\n\telseif(parser==\"leg\")then\r\n\t\treturn leg.parse(text)\r\n\telse\r\n\r\n\t\tfor k,v in ipairs(parsers) do\r\n\t\t\tresult,errno = v.parse(text,extended)\r\n\t\t\tif(result)then\r\n\t\t\t\treturn result\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn result,errno\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function parse(text)\r\nlocal rev = re.compile([[\r\n    start <- ( tagwname  / taged /oneword/   description )         \r\n    tagwname    <- (commentprefix s* ]].. tagsWithName ..[[  {:name:variable:} s+ {:text:.*:})  ->{}\r\n    taged       <- (commentprefix s* ]].. tags ..        [[  {:text:.*:})           ->{}\r\n    oneword     <- (commentprefix s* ]].. onewordtags .. [[  {:name:[^\" \"]+:} s*!(.))      ->{}\r\n    description <- (commentprefix [%-]* s* {:type:\"\"->\"descr\":} {:text:.*:}) ->{}\r\n    s           <- (\"\\t\"/\" \")\r\n    commentprefix <- \"--\" !\"[\"\r\n    variable    <-]].. common.variable.. [[\r\n    ]],{\r\n    })\r\n  local x = rev:match(text)\r\n\r\n  if(x)then\r\n    x.style=\"luadoc\"\r\n    x.tag=\"comment\"\r\n    return x\r\n  else\r\n    return nil,\"Error: Nothing parsed!\"\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local rev = re.compile([[\r\n    start <- ( tagwname  / taged /oneword/   description )         \r\n    tagwname    <- (commentprefix s* ]].. tagsWithName ..[[  {:name:variable:} s+ {:text:.*:})  ->{}\r\n    taged       <- (commentprefix s* ]].. tags ..        [[  {:text:.*:})           ->{}\r\n    oneword     <- (commentprefix s* ]].. onewordtags .. [[  {:name:[^\" \"]+:} s*!(.))      ->{}\r\n    description <- (commentprefix [%-]* s* {:type:\"\"->\"descr\":} {:text:.*:}) ->{}\r\n    s           <- (\"\\t\"/\" \")\r\n    commentprefix <- \"--\" !\"[\"\r\n    variable    <-]].. common.variable.. [[\r\n    ]],{\r\n    })",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local x = rev:match(text)",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "if(x)then\r\n    x.style=\"luadoc\"\r\n    x.tag=\"comment\"\r\n    return x\r\n  else\r\n    return nil,\"Error: Nothing parsed!\"\r\n  end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "x.style=\"luadoc\"",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "x.tag=\"comment\"",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "",
    "type": "function container"
  }, {
    "id": 12,
    "text": "compile",
    "type": "global function"
  }, {
    "id": 13,
    "text": "module",
    "type": "global function"
  }, {
    "id": 14,
    "text": "require",
    "type": "global function"
  }, {
    "id": 15,
    "text": "(re)",
    "type": "module"
  }, {
    "id": 16,
    "text": "common)",
    "type": "module"
  }, {
    "id": 17,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 18,
    "text": "",
    "type": "variable container"
  }, {
    "id": 19,
    "text": "",
    "type": "require container"
  }, {
    "id": 20,
    "text": "",
    "type": "local variable"
  }, {
    "id": 21,
    "text": "",
    "type": "n/a"
  }, {
    "id": 22,
    "text": "",
    "type": "local variable"
  }, {
    "id": 23,
    "text": "",
    "type": "n/a"
  }, {
    "id": 24,
    "text": "",
    "type": "local variable"
  }, {
    "id": 25,
    "text": "",
    "type": "n/a"
  }, {
    "id": 26,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 27,
    "text": "",
    "type": "require local variable"
  } ]
}