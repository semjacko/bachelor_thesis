{
  "_filename": "parser.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua_cliargs/src/cliargs/parser.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 8
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 21,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 10
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 15,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 28
  }, {
    "from": 32,
    "label": "has",
    "to": 29
  }, {
    "from": 32,
    "label": "has",
    "to": 30
  }, {
    "from": 32,
    "label": "has",
    "to": 10
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 10
  }, {
    "from": 34,
    "label": "has",
    "to": 10
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 10
  }, {
    "from": 38,
    "label": "has",
    "to": 10
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 41,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 10
  }, {
    "from": 41,
    "label": "has",
    "to": 48
  }, {
    "from": 41,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 52,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 52,
    "label": "has",
    "to": 65
  }, {
    "from": 52,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 66,
    "label": "has",
    "to": 72
  }, {
    "from": 66,
    "label": "has",
    "to": 73
  }, {
    "from": 52,
    "label": "has",
    "to": 74
  }, {
    "from": 52,
    "label": "has",
    "to": 75
  }, {
    "from": 52,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 73
  }, {
    "from": 52,
    "label": "has",
    "to": 78
  }, {
    "from": 52,
    "label": "has",
    "to": 79
  }, {
    "from": 52,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 75
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 77
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 52,
    "label": "has",
    "to": 78
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 41,
    "label": "has",
    "to": 10
  }, {
    "from": 41,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 47
  }, {
    "from": 84,
    "label": "has",
    "to": 10
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 48
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 86,
    "label": "has",
    "to": 10
  }, {
    "from": 86,
    "label": "has",
    "to": 10
  }, {
    "from": 86,
    "label": "has",
    "to": 10
  }, {
    "from": 86,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 95,
    "label": "has",
    "to": 101
  }, {
    "from": 95,
    "label": "has",
    "to": 10
  }, {
    "from": 95,
    "label": "has",
    "to": 10
  }, {
    "from": 93,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 102,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 93,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 107,
    "label": "has",
    "to": 112
  }, {
    "from": 107,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 113,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 107,
    "label": "has",
    "to": 117
  }, {
    "from": 93,
    "label": "has",
    "to": 10
  }, {
    "from": 93,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 96
  }, {
    "from": 119,
    "label": "has",
    "to": 97
  }, {
    "from": 119,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 119,
    "label": "has",
    "to": 101
  }, {
    "from": 119,
    "label": "has",
    "to": 10
  }, {
    "from": 119,
    "label": "has",
    "to": 10
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 121,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 10
  }, {
    "from": 123,
    "label": "has",
    "to": 10
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 10
  }, {
    "from": 126,
    "label": "has",
    "to": 124
  }, {
    "from": 126,
    "label": "has",
    "to": 10
  }, {
    "from": 126,
    "label": "has",
    "to": 10
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 128,
    "label": "has",
    "to": 10
  }, {
    "from": 128,
    "label": "has",
    "to": 10
  }, {
    "from": 128,
    "label": "has",
    "to": 124
  }, {
    "from": 128,
    "label": "has",
    "to": 10
  }, {
    "from": 128,
    "label": "has",
    "to": 10
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 10
  }, {
    "from": 130,
    "label": "has",
    "to": 10
  }, {
    "from": 130,
    "label": "has",
    "to": 10
  }, {
    "from": 130,
    "label": "has",
    "to": 124
  }, {
    "from": 130,
    "label": "has",
    "to": 10
  }, {
    "from": 130,
    "label": "has",
    "to": 10
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "has",
    "to": 10
  }, {
    "from": 132,
    "label": "has",
    "to": 10
  }, {
    "from": 132,
    "label": "has",
    "to": 10
  }, {
    "from": 132,
    "label": "has",
    "to": 10
  }, {
    "from": 132,
    "label": "has",
    "to": 124
  }, {
    "from": 132,
    "label": "has",
    "to": 10
  }, {
    "from": 132,
    "label": "has",
    "to": 10
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 134,
    "label": "has",
    "to": 136
  }, {
    "from": 134,
    "label": "has",
    "to": 10
  }, {
    "from": 134,
    "label": "has",
    "to": 10
  }, {
    "from": 134,
    "label": "has",
    "to": 10
  }, {
    "from": 134,
    "label": "has",
    "to": 10
  }, {
    "from": 134,
    "label": "has",
    "to": 10
  }, {
    "from": 134,
    "label": "has",
    "to": 124
  }, {
    "from": 134,
    "label": "has",
    "to": 10
  }, {
    "from": 134,
    "label": "has",
    "to": 10
  }, {
    "from": 134,
    "label": "has",
    "to": 137
  }, {
    "from": 15,
    "label": "calls",
    "to": 143
  }, {
    "from": 93,
    "label": "calls",
    "to": 121
  }, {
    "from": 15,
    "label": "calls",
    "to": 139
  }, {
    "from": 138,
    "label": "calls",
    "to": 139
  }, {
    "from": 34,
    "label": "calls",
    "to": 149
  }, {
    "from": 93,
    "label": "calls",
    "to": 149
  }, {
    "from": 15,
    "label": "calls",
    "to": 12
  }, {
    "from": 15,
    "label": "calls",
    "to": 142
  }, {
    "from": 15,
    "label": "calls",
    "to": 146
  }, {
    "from": 15,
    "label": "calls",
    "to": 146
  }, {
    "from": 41,
    "label": "calls",
    "to": 146
  }, {
    "from": 41,
    "label": "calls",
    "to": 146
  }, {
    "from": 86,
    "label": "calls",
    "to": 146
  }, {
    "from": 86,
    "label": "calls",
    "to": 146
  }, {
    "from": 138,
    "label": "calls",
    "to": 41
  }, {
    "from": 15,
    "label": "calls",
    "to": 150
  }, {
    "from": 38,
    "label": "calls",
    "to": 7
  }, {
    "from": 138,
    "label": "calls",
    "to": 38
  }, {
    "from": 138,
    "label": "calls",
    "to": 86
  }, {
    "from": 15,
    "label": "calls",
    "to": 32
  }, {
    "from": 7,
    "label": "calls",
    "to": 144
  }, {
    "from": 12,
    "label": "calls",
    "to": 144
  }, {
    "from": 138,
    "label": "calls",
    "to": 34
  }, {
    "from": 41,
    "label": "calls",
    "to": 154
  }, {
    "from": 138,
    "label": "calls",
    "to": 153
  }, {
    "from": 15,
    "label": "calls",
    "to": 141
  }, {
    "from": 34,
    "label": "calls",
    "to": 141
  }, {
    "from": 38,
    "label": "calls",
    "to": 141
  }, {
    "from": 38,
    "label": "calls",
    "to": 141
  }, {
    "from": 41,
    "label": "calls",
    "to": 141
  }, {
    "from": 86,
    "label": "calls",
    "to": 141
  }, {
    "from": 41,
    "label": "calls",
    "to": 152
  }, {
    "from": 41,
    "label": "calls",
    "to": 152
  }, {
    "from": 41,
    "label": "calls",
    "to": 152
  }, {
    "from": 119,
    "label": "calls",
    "to": 152
  }, {
    "from": 7,
    "label": "calls",
    "to": 145
  }, {
    "from": 12,
    "label": "calls",
    "to": 145
  }, {
    "from": 41,
    "label": "calls",
    "to": 156
  }, {
    "from": 138,
    "label": "calls",
    "to": 15
  }, {
    "from": 34,
    "label": "calls",
    "to": 155
  }, {
    "from": 41,
    "label": "calls",
    "to": 84
  }, {
    "from": 41,
    "label": "calls",
    "to": 84
  }, {
    "from": 15,
    "label": "calls",
    "to": 140
  }, {
    "from": 119,
    "label": "calls",
    "to": 140
  }, {
    "from": 138,
    "label": "calls",
    "to": 93
  }, {
    "from": 15,
    "label": "calls",
    "to": 147
  }, {
    "from": 119,
    "label": "calls",
    "to": 147
  }, {
    "from": 93,
    "label": "calls",
    "to": 147
  }, {
    "from": 93,
    "label": "calls",
    "to": 147
  }, {
    "from": 138,
    "label": "calls",
    "to": 147
  }, {
    "from": 138,
    "label": "calls",
    "to": 147
  }, {
    "from": 138,
    "label": "calls",
    "to": 151
  }, {
    "from": 138,
    "label": "calls",
    "to": 151
  }, {
    "from": 138,
    "label": "calls",
    "to": 151
  }, {
    "from": 138,
    "label": "calls",
    "to": 151
  }, {
    "from": 138,
    "label": "calls",
    "to": 151
  }, {
    "from": 93,
    "label": "calls",
    "to": 119
  }, {
    "from": 41,
    "label": "calls",
    "to": 148
  }, {
    "from": 41,
    "label": "calls",
    "to": 148
  }, {
    "from": 41,
    "label": "calls",
    "to": 148
  }, {
    "from": 2,
    "label": "contains",
    "to": 138
  }, {
    "from": 138,
    "label": "declares",
    "to": 7
  }, {
    "from": 138,
    "label": "declares",
    "to": 12
  }, {
    "from": 138,
    "label": "declares",
    "to": 15
  }, {
    "from": 138,
    "label": "declares",
    "to": 32
  }, {
    "from": 138,
    "label": "declares",
    "to": 34
  }, {
    "from": 138,
    "label": "declares",
    "to": 38
  }, {
    "from": 138,
    "label": "declares",
    "to": 41
  }, {
    "from": 138,
    "label": "declares",
    "to": 84
  }, {
    "from": 138,
    "label": "declares",
    "to": 86
  }, {
    "from": 138,
    "label": "declares",
    "to": 93
  }, {
    "from": 138,
    "label": "declares",
    "to": 119
  }, {
    "from": 138,
    "label": "declares",
    "to": 121
  }, {
    "from": 138,
    "label": "declares",
    "to": 123
  }, {
    "from": 138,
    "label": "declares",
    "to": 126
  }, {
    "from": 138,
    "label": "declares",
    "to": 128
  }, {
    "from": 138,
    "label": "declares",
    "to": 130
  }, {
    "from": 138,
    "label": "declares",
    "to": 132
  }, {
    "from": 138,
    "label": "declares",
    "to": 134
  }, {
    "from": 2,
    "label": "contains",
    "to": 157
  }, {
    "from": 2,
    "label": "contains",
    "to": 158
  }, {
    "from": 157,
    "label": "initializes",
    "to": 159
  }, {
    "from": 159,
    "label": "assigns",
    "to": 160
  }, {
    "from": 158,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "requires",
    "to": 1
  }, {
    "from": 158,
    "label": "initializes",
    "to": 162
  }, {
    "from": 162,
    "label": "requires",
    "to": 6
  }, {
    "from": 158,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "requires",
    "to": 4
  }, {
    "from": 158,
    "label": "initializes",
    "to": 164
  }, {
    "from": 164,
    "label": "requires",
    "to": 3
  }, {
    "from": 158,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "requires",
    "to": 5
  }, {
    "from": 2,
    "label": "provides",
    "to": 166
  }, {
    "from": 166,
    "label": "provides",
    "to": 167
  }, {
    "from": 159,
    "label": "contains",
    "to": 15
  }, {
    "from": 159,
    "label": "contains",
    "to": 34
  }, {
    "from": 159,
    "label": "contains",
    "to": 38
  }, {
    "from": 159,
    "label": "contains",
    "to": 41
  }, {
    "from": 159,
    "label": "contains",
    "to": 86
  }, {
    "from": 159,
    "label": "contains",
    "to": 93
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "constants",
    "type": "module"
  }, {
    "id": 2,
    "text": "parser",
    "type": "module"
  }, {
    "id": 3,
    "text": "disect_argument",
    "type": "module"
  }, {
    "id": 4,
    "text": "filter",
    "type": "module"
  }, {
    "id": 5,
    "text": "lookup",
    "type": "module"
  }, {
    "id": 6,
    "text": "shallow_copy",
    "type": "module"
  }, {
    "id": 7,
    "text": "local function clone_table_shift(t)\r\n  local clone = shallow_copy(t)\r\n  table.remove(clone, 1)\r\n  return clone\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local clone = shallow_copy(t)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "table.remove(clone, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function clone_table_remove(t, index)\r\n  local clone = shallow_copy(t)\r\n  table.remove(clone, index)\r\n  return clone\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "table.remove(clone, index)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function p.invoke_command(args, options, done)\r\n  local commands = filter(options, 'type', K.TYPE_COMMAND)\r\n\r\n  for index, opt in ipairs(args) do\r\n    local command = filter(commands, '__key__', opt)[1]\r\n\r\n    if command then\r\n      local command_args = clone_table_remove(args, index)\r\n\r\n      if command.__action__ then\r\n        local parsed_command_args, err = command:parse(command_args)\r\n\r\n        if err then\r\n          return nil, err\r\n        end\r\n\r\n        return command.__action__(parsed_command_args)\r\n      elseif command.__file__ then\r\n        local filename = command.__file__\r\n\r\n        if type(filename) == 'function' then\r\n          filename = filename()\r\n        end\r\n\r\n        local run_command_file = function()\r\n          _G.arg = command_args\r\n\r\n          local res, err = assert(loadfile(filename))()\r\n\r\n          _G.arg = args\r\n\r\n          return res, err\r\n        end\r\n\r\n        return run_command_file()\r\n      end\r\n    end\r\n  end\r\n\r\n  return done()\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "local commands = filter(options, 'type', K.TYPE_COMMAND)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "for index, opt in ipairs(args) do\r\n    local command = filter(commands, '__key__', opt)[1]\r\n\r\n    if command then\r\n      local command_args = clone_table_remove(args, index)\r\n\r\n      if command.__action__ then\r\n        local parsed_command_args, err = command:parse(command_args)\r\n\r\n        if err then\r\n          return nil, err\r\n        end\r\n\r\n        return command.__action__(parsed_command_args)\r\n      elseif command.__file__ then\r\n        local filename = command.__file__\r\n\r\n        if type(filename) == 'function' then\r\n          filename = filename()\r\n        end\r\n\r\n        local run_command_file = function()\r\n          _G.arg = command_args\r\n\r\n          local res, err = assert(loadfile(filename))()\r\n\r\n          _G.arg = args\r\n\r\n          return res, err\r\n        end\r\n\r\n        return run_command_file()\r\n      end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 18,
    "text": "local command = filter(commands, '__key__', opt)[1]",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if command then\r\n      local command_args = clone_table_remove(args, index)\r\n\r\n      if command.__action__ then\r\n        local parsed_command_args, err = command:parse(command_args)\r\n\r\n        if err then\r\n          return nil, err\r\n        end\r\n\r\n        return command.__action__(parsed_command_args)\r\n      elseif command.__file__ then\r\n        local filename = command.__file__\r\n\r\n        if type(filename) == 'function' then\r\n          filename = filename()\r\n        end\r\n\r\n        local run_command_file = function()\r\n          _G.arg = command_args\r\n\r\n          local res, err = assert(loadfile(filename))()\r\n\r\n          _G.arg = args\r\n\r\n          return res, err\r\n        end\r\n\r\n        return run_command_file()\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "local command_args = clone_table_remove(args, index)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if command.__action__ then\r\n        local parsed_command_args, err = command:parse(command_args)\r\n\r\n        if err then\r\n          return nil, err\r\n        end\r\n\r\n        return command.__action__(parsed_command_args)\r\n      elseif command.__file__ then\r\n        local filename = command.__file__\r\n\r\n        if type(filename) == 'function' then\r\n          filename = filename()\r\n        end\r\n\r\n        local run_command_file = function()\r\n          _G.arg = command_args\r\n\r\n          local res, err = assert(loadfile(filename))()\r\n\r\n          _G.arg = args\r\n\r\n          return res, err\r\n        end\r\n\r\n        return run_command_file()\r\n      end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "local parsed_command_args, err = command:parse(command_args)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if err then\r\n          return nil, err\r\n        end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "local filename = command.__file__",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if type(filename) == 'function' then\r\n          filename = filename()\r\n        end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "filename = filename()",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "local run_command_file = function()\r\n          _G.arg = command_args\r\n\r\n          local res, err = assert(loadfile(filename))()\r\n\r\n          _G.arg = args\r\n\r\n          return res, err\r\n        end",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "_G.arg = command_args",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "local res, err = assert(loadfile(filename))()",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "_G.arg = args",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function()\r\n          _G.arg = command_args\r\n\r\n          local res, err = assert(loadfile(filename))()\r\n\r\n          _G.arg = args\r\n\r\n          return res, err\r\n        end",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function p.print_help(args, printer, done)\r\n  -- has --help or -h ? display the help listing and abort!\r\n  for _, v in pairs(args) do\r\n    if v == \"--help\" or v == \"-h\" then\r\n      return nil, printer.generate_help_and_usage()\r\n    end\r\n  end\r\n\r\n  return done()\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "for _, v in pairs(args) do\r\n    if v == \"--help\" or v == \"-h\" then\r\n      return nil, printer.generate_help_and_usage()\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 36,
    "text": "if v == \"--help\" or v == \"-h\" then\r\n      return nil, printer.generate_help_and_usage()\r\n    end",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function p.track_dump_request(args, done)\r\n  -- starts with --__DUMP__; set dump to true to dump the parsed arguments\r\n  if args[1] == \"--__DUMP__\" then\r\n    return done(true, clone_table_shift(args))\r\n  else\r\n    return done(false, args)\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "if args[1] == \"--__DUMP__\" then\r\n    return done(true, clone_table_shift(args))\r\n  else\r\n    return done(false, args)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function p.process_arguments(args, options, done)\r\n  local values = {}\r\n  local cursor = 0\r\n  local argument_cursor = 1\r\n  local argument_delimiter_found = false\r\n  local function consume()\r\n    cursor = cursor + 1\r\n\r\n    return args[cursor]\r\n  end\r\n\r\n  local required = filter(options, 'type', K.TYPE_ARGUMENT)\r\n\r\n  while cursor < #args do\r\n    local curr_opt = consume()\r\n    local symbol, key, value, flag_negated = disect_argument(curr_opt)\r\n\r\n    -- end-of-options indicator:\r\n    if curr_opt == \"--\" then\r\n      argument_delimiter_found = true\r\n\r\n    -- an option:\r\n    elseif not argument_delimiter_found and symbol then\r\n      local entry = lookup(key, key, options)\r\n\r\n      if not key or not entry then\r\n        local option_type = value and \"option\" or \"flag\"\r\n\r\n        return nil, \"unknown/bad \" .. option_type .. \": \" .. curr_opt\r\n      end\r\n\r\n      if flag_negated and not entry.negatable then\r\n        return nil, \"flag '\" .. curr_opt .. \"' may not be negated using --no-\"\r\n      end\r\n\r\n      -- a flag and a value specified? that's an error\r\n      if entry.flag and value then\r\n        return nil, \"flag \" .. curr_opt .. \" does not take a value\"\r\n      elseif entry.flag then\r\n        value = not flag_negated\r\n      -- an option:\r\n      else\r\n        -- the value might be in the next argument, e.g:\r\n        --\r\n        --     --compress lzma\r\n        if not value then\r\n          -- if the option contained a = and there's no value, it means they\r\n          -- want to nullify an option's default value. eg:\r\n          --\r\n          --    --compress=\r\n          if curr_opt:find('=') then\r\n            value = '__CLIARGS_NULL__'\r\n          else\r\n            -- NOTE: this has the potential to be buggy and swallow the next\r\n            -- entry as this entry's value even though that entry may be an\r\n            -- actual argument/option\r\n            --\r\n            -- this would be a user error and there is no determinate way to\r\n            -- figure it out because if there's no leading symbol (- or --)\r\n            -- in that entry it can be an actual argument. :shrug:\r\n            value = consume()\r\n\r\n            if not value then\r\n              return nil, \"option \" .. curr_opt .. \" requires a value to be set\"\r\n            end\r\n          end\r\n        end\r\n      end\r\n\r\n      table.insert(values, { entry = entry, value = value })\r\n\r\n      if entry.callback then\r\n        local altkey = entry.key\r\n        local status, err\r\n\r\n        if key == entry.key then\r\n          altkey = entry.expanded_key\r\n        else\r\n          key = entry.expanded_key\r\n        end\r\n\r\n        status, err = entry.callback(key, value, altkey, curr_opt)\r\n\r\n        if status == nil and err then\r\n          return nil, err\r\n        end\r\n      end\r\n\r\n    -- a regular argument:\r\n    elseif argument_cursor <= #required then\r\n      local entry = required[argument_cursor]\r\n\r\n      table.insert(values, { entry = entry, value = curr_opt })\r\n\r\n      if entry.callback then\r\n        local status, err = entry.callback(entry.key, curr_opt)\r\n\r\n        if status == nil and err then\r\n          return nil, err\r\n        end\r\n      end\r\n\r\n      argument_cursor = argument_cursor + 1\r\n\r\n    -- a splat argument:\r\n    else\r\n      local entry = filter(options, 'type', K.TYPE_SPLAT)[1]\r\n\r\n      if entry then\r\n        table.insert(values, { entry = entry, value = curr_opt })\r\n\r\n        if entry.callback then\r\n          local status, err = entry.callback(entry.key, curr_opt)\r\n\r\n          if status == nil and err then\r\n            return nil, err\r\n          end\r\n        end\r\n      end\r\n\r\n      argument_cursor = argument_cursor + 1\r\n    end\r\n  end\r\n\r\n  return done(values, argument_cursor - 1)\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "local values = {}",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local cursor = 0",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local argument_cursor = 1",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local argument_delimiter_found = false",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local function consume()\r\n    cursor = cursor + 1\r\n\r\n    return args[cursor]\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 47,
    "text": "cursor = cursor + 1",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "local required = filter(options, 'type', K.TYPE_ARGUMENT)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "while cursor < #args do\r\n    local curr_opt = consume()\r\n    local symbol, key, value, flag_negated = disect_argument(curr_opt)\r\n\r\n    -- end-of-options indicator:\r\n    if curr_opt == \"--\" then\r\n      argument_delimiter_found = true\r\n\r\n    -- an option:\r\n    elseif not argument_delimiter_found and symbol then\r\n      local entry = lookup(key, key, options)\r\n\r\n      if not key or not entry then\r\n        local option_type = value and \"option\" or \"flag\"\r\n\r\n        return nil, \"unknown/bad \" .. option_type .. \": \" .. curr_opt\r\n      end\r\n\r\n      if flag_negated and not entry.negatable then\r\n        return nil, \"flag '\" .. curr_opt .. \"' may not be negated using --no-\"\r\n      end\r\n\r\n      -- a flag and a value specified? that's an error\r\n      if entry.flag and value then\r\n        return nil, \"flag \" .. curr_opt .. \" does not take a value\"\r\n      elseif entry.flag then\r\n        value = not flag_negated\r\n      -- an option:\r\n      else\r\n        -- the value might be in the next argument, e.g:\r\n        --\r\n        --     --compress lzma\r\n        if not value then\r\n          -- if the option contained a = and there's no value, it means they\r\n          -- want to nullify an option's default value. eg:\r\n          --\r\n          --    --compress=\r\n          if curr_opt:find('=') then\r\n            value = '__CLIARGS_NULL__'\r\n          else\r\n            -- NOTE: this has the potential to be buggy and swallow the next\r\n            -- entry as this entry's value even though that entry may be an\r\n            -- actual argument/option\r\n            --\r\n            -- this would be a user error and there is no determinate way to\r\n            -- figure it out because if there's no leading symbol (- or --)\r\n            -- in that entry it can be an actual argument. :shrug:\r\n            value = consume()\r\n\r\n            if not value then\r\n              return nil, \"option \" .. curr_opt .. \" requires a value to be set\"\r\n            end\r\n          end\r\n        end\r\n      end\r\n\r\n      table.insert(values, { entry = entry, value = value })\r\n\r\n      if entry.callback then\r\n        local altkey = entry.key\r\n        local status, err\r\n\r\n        if key == entry.key then\r\n          altkey = entry.expanded_key\r\n        else\r\n          key = entry.expanded_key\r\n        end\r\n\r\n        status, err = entry.callback(key, value, altkey, curr_opt)\r\n\r\n        if status == nil and err then\r\n          return nil, err\r\n        end\r\n      end\r\n\r\n    -- a regular argument:\r\n    elseif argument_cursor <= #required then\r\n      local entry = required[argument_cursor]\r\n\r\n      table.insert(values, { entry = entry, value = curr_opt })\r\n\r\n      if entry.callback then\r\n        local status, err = entry.callback(entry.key, curr_opt)\r\n\r\n        if status == nil and err then\r\n          return nil, err\r\n        end\r\n      end\r\n\r\n      argument_cursor = argument_cursor + 1\r\n\r\n    -- a splat argument:\r\n    else\r\n      local entry = filter(options, 'type', K.TYPE_SPLAT)[1]\r\n\r\n      if entry then\r\n        table.insert(values, { entry = entry, value = curr_opt })\r\n\r\n        if entry.callback then\r\n          local status, err = entry.callback(entry.key, curr_opt)\r\n\r\n          if status == nil and err then\r\n            return nil, err\r\n          end\r\n        end\r\n      end\r\n\r\n      argument_cursor = argument_cursor + 1\r\n    end\r\n  end",
    "type": "statement:while"
  }, {
    "id": 50,
    "text": "local curr_opt = consume()",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local symbol, key, value, flag_negated = disect_argument(curr_opt)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "if curr_opt == \"--\" then\r\n      argument_delimiter_found = true\r\n\r\n    -- an option:\r\n    elseif not argument_delimiter_found and symbol then\r\n      local entry = lookup(key, key, options)\r\n\r\n      if not key or not entry then\r\n        local option_type = value and \"option\" or \"flag\"\r\n\r\n        return nil, \"unknown/bad \" .. option_type .. \": \" .. curr_opt\r\n      end\r\n\r\n      if flag_negated and not entry.negatable then\r\n        return nil, \"flag '\" .. curr_opt .. \"' may not be negated using --no-\"\r\n      end\r\n\r\n      -- a flag and a value specified? that's an error\r\n      if entry.flag and value then\r\n        return nil, \"flag \" .. curr_opt .. \" does not take a value\"\r\n      elseif entry.flag then\r\n        value = not flag_negated\r\n      -- an option:\r\n      else\r\n        -- the value might be in the next argument, e.g:\r\n        --\r\n        --     --compress lzma\r\n        if not value then\r\n          -- if the option contained a = and there's no value, it means they\r\n          -- want to nullify an option's default value. eg:\r\n          --\r\n          --    --compress=\r\n          if curr_opt:find('=') then\r\n            value = '__CLIARGS_NULL__'\r\n          else\r\n            -- NOTE: this has the potential to be buggy and swallow the next\r\n            -- entry as this entry's value even though that entry may be an\r\n            -- actual argument/option\r\n            --\r\n            -- this would be a user error and there is no determinate way to\r\n            -- figure it out because if there's no leading symbol (- or --)\r\n            -- in that entry it can be an actual argument. :shrug:\r\n            value = consume()\r\n\r\n            if not value then\r\n              return nil, \"option \" .. curr_opt .. \" requires a value to be set\"\r\n            end\r\n          end\r\n        end\r\n      end\r\n\r\n      table.insert(values, { entry = entry, value = value })\r\n\r\n      if entry.callback then\r\n        local altkey = entry.key\r\n        local status, err\r\n\r\n        if key == entry.key then\r\n          altkey = entry.expanded_key\r\n        else\r\n          key = entry.expanded_key\r\n        end\r\n\r\n        status, err = entry.callback(key, value, altkey, curr_opt)\r\n\r\n        if status == nil and err then\r\n          return nil, err\r\n        end\r\n      end\r\n\r\n    -- a regular argument:\r\n    elseif argument_cursor <= #required then\r\n      local entry = required[argument_cursor]\r\n\r\n      table.insert(values, { entry = entry, value = curr_opt })\r\n\r\n      if entry.callback then\r\n        local status, err = entry.callback(entry.key, curr_opt)\r\n\r\n        if status == nil and err then\r\n          return nil, err\r\n        end\r\n      end\r\n\r\n      argument_cursor = argument_cursor + 1\r\n\r\n    -- a splat argument:\r\n    else\r\n      local entry = filter(options, 'type', K.TYPE_SPLAT)[1]\r\n\r\n      if entry then\r\n        table.insert(values, { entry = entry, value = curr_opt })\r\n\r\n        if entry.callback then\r\n          local status, err = entry.callback(entry.key, curr_opt)\r\n\r\n          if status == nil and err then\r\n            return nil, err\r\n          end\r\n        end\r\n      end\r\n\r\n      argument_cursor = argument_cursor + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "argument_delimiter_found = true",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "local entry = lookup(key, key, options)",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "if not key or not entry then\r\n        local option_type = value and \"option\" or \"flag\"\r\n\r\n        return nil, \"unknown/bad \" .. option_type .. \": \" .. curr_opt\r\n      end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "local option_type = value and \"option\" or \"flag\"",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if flag_negated and not entry.negatable then\r\n        return nil, \"flag '\" .. curr_opt .. \"' may not be negated using --no-\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "if entry.flag and value then\r\n        return nil, \"flag \" .. curr_opt .. \" does not take a value\"\r\n      elseif entry.flag then\r\n        value = not flag_negated\r\n      -- an option:\r\n      else\r\n        -- the value might be in the next argument, e.g:\r\n        --\r\n        --     --compress lzma\r\n        if not value then\r\n          -- if the option contained a = and there's no value, it means they\r\n          -- want to nullify an option's default value. eg:\r\n          --\r\n          --    --compress=\r\n          if curr_opt:find('=') then\r\n            value = '__CLIARGS_NULL__'\r\n          else\r\n            -- NOTE: this has the potential to be buggy and swallow the next\r\n            -- entry as this entry's value even though that entry may be an\r\n            -- actual argument/option\r\n            --\r\n            -- this would be a user error and there is no determinate way to\r\n            -- figure it out because if there's no leading symbol (- or --)\r\n            -- in that entry it can be an actual argument. :shrug:\r\n            value = consume()\r\n\r\n            if not value then\r\n              return nil, \"option \" .. curr_opt .. \" requires a value to be set\"\r\n            end\r\n          end\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "value = not flag_negated",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if not value then\r\n          -- if the option contained a = and there's no value, it means they\r\n          -- want to nullify an option's default value. eg:\r\n          --\r\n          --    --compress=\r\n          if curr_opt:find('=') then\r\n            value = '__CLIARGS_NULL__'\r\n          else\r\n            -- NOTE: this has the potential to be buggy and swallow the next\r\n            -- entry as this entry's value even though that entry may be an\r\n            -- actual argument/option\r\n            --\r\n            -- this would be a user error and there is no determinate way to\r\n            -- figure it out because if there's no leading symbol (- or --)\r\n            -- in that entry it can be an actual argument. :shrug:\r\n            value = consume()\r\n\r\n            if not value then\r\n              return nil, \"option \" .. curr_opt .. \" requires a value to be set\"\r\n            end\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "if curr_opt:find('=') then\r\n            value = '__CLIARGS_NULL__'\r\n          else\r\n            -- NOTE: this has the potential to be buggy and swallow the next\r\n            -- entry as this entry's value even though that entry may be an\r\n            -- actual argument/option\r\n            --\r\n            -- this would be a user error and there is no determinate way to\r\n            -- figure it out because if there's no leading symbol (- or --)\r\n            -- in that entry it can be an actual argument. :shrug:\r\n            value = consume()\r\n\r\n            if not value then\r\n              return nil, \"option \" .. curr_opt .. \" requires a value to be set\"\r\n            end\r\n          end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "value = '__CLIARGS_NULL__'",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "value = consume()",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "if not value then\r\n              return nil, \"option \" .. curr_opt .. \" requires a value to be set\"\r\n            end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "table.insert(values, { entry = entry, value = value })",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "if entry.callback then\r\n        local altkey = entry.key\r\n        local status, err\r\n\r\n        if key == entry.key then\r\n          altkey = entry.expanded_key\r\n        else\r\n          key = entry.expanded_key\r\n        end\r\n\r\n        status, err = entry.callback(key, value, altkey, curr_opt)\r\n\r\n        if status == nil and err then\r\n          return nil, err\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "local altkey = entry.key",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local status, err",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "if key == entry.key then\r\n          altkey = entry.expanded_key\r\n        else\r\n          key = entry.expanded_key\r\n        end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "altkey = entry.expanded_key",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "key = entry.expanded_key",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "status, err = entry.callback(key, value, altkey, curr_opt)",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "if status == nil and err then\r\n          return nil, err\r\n        end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "local entry = required[argument_cursor]",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "table.insert(values, { entry = entry, value = curr_opt })",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "if entry.callback then\r\n        local status, err = entry.callback(entry.key, curr_opt)\r\n\r\n        if status == nil and err then\r\n          return nil, err\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 77,
    "text": "local status, err = entry.callback(entry.key, curr_opt)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "argument_cursor = argument_cursor + 1",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "local entry = filter(options, 'type', K.TYPE_SPLAT)[1]",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "if entry then\r\n        table.insert(values, { entry = entry, value = curr_opt })\r\n\r\n        if entry.callback then\r\n          local status, err = entry.callback(entry.key, curr_opt)\r\n\r\n          if status == nil and err then\r\n            return nil, err\r\n          end\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "if entry.callback then\r\n          local status, err = entry.callback(entry.key, curr_opt)\r\n\r\n          if status == nil and err then\r\n            return nil, err\r\n          end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 82,
    "text": "if status == nil and err then\r\n            return nil, err\r\n          end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "local function consume()\r\n    cursor = cursor + 1\r\n\r\n    return args[cursor]\r\n  end",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function p.validate(options, arg_count, done)\r\n  local required = filter(options, 'type', K.TYPE_ARGUMENT)\r\n  local splatarg = filter(options, 'type', K.TYPE_SPLAT)[1] or { maxcount = 0 }\r\n\r\n  local min_arg_count = #required\r\n  local max_arg_count = #required + splatarg.maxcount\r\n\r\n  -- missing any required arguments, or too many?\r\n  if arg_count < min_arg_count or arg_count > max_arg_count then\r\n    if splatarg.maxcount > 0 then\r\n      return nil, (\r\n        \"bad number of arguments: \" ..\r\n        min_arg_count .. \"-\" .. max_arg_count ..\r\n        \" argument(s) must be specified, not \" .. arg_count\r\n      )\r\n    else\r\n      return nil, (\r\n        \"bad number of arguments: \" ..\r\n        min_arg_count .. \" argument(s) must be specified, not \" .. arg_count\r\n      )\r\n    end\r\n  end\r\n\r\n  return done()\r\nend",
    "type": "function"
  }, {
    "id": 87,
    "text": "local splatarg = filter(options, 'type', K.TYPE_SPLAT)[1] or { maxcount = 0 }",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "local min_arg_count = #required",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "local max_arg_count = #required + splatarg.maxcount",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "if arg_count < min_arg_count or arg_count > max_arg_count then\r\n    if splatarg.maxcount > 0 then\r\n      return nil, (\r\n        \"bad number of arguments: \" ..\r\n        min_arg_count .. \"-\" .. max_arg_count ..\r\n        \" argument(s) must be specified, not \" .. arg_count\r\n      )\r\n    else\r\n      return nil, (\r\n        \"bad number of arguments: \" ..\r\n        min_arg_count .. \" argument(s) must be specified, not \" .. arg_count\r\n      )\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "if splatarg.maxcount > 0 then\r\n      return nil, (\r\n        \"bad number of arguments: \" ..\r\n        min_arg_count .. \"-\" .. max_arg_count ..\r\n        \" argument(s) must be specified, not \" .. arg_count\r\n      )\r\n    else\r\n      return nil, (\r\n        \"bad number of arguments: \" ..\r\n        min_arg_count .. \" argument(s) must be specified, not \" .. arg_count\r\n      )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function p.collect_results(cli_values, options)\r\n  local results = {}\r\n  local function collect_with_default(entry)\r\n    local entry_values = {}\r\n    local _\r\n\r\n    for _, item in ipairs(cli_values) do\r\n      if item.entry == entry then\r\n        table.insert(entry_values, item.value)\r\n      end\r\n    end\r\n\r\n    if #entry_values == 0 then\r\n      return type(entry.default) == 'table' and entry.default or { entry.default }\r\n    else\r\n      return entry_values\r\n    end\r\n  end\r\n\r\n  local function write(entry, value)\r\n    if entry.key then results[entry.key] = value end\r\n    if entry.expanded_key then results[entry.expanded_key] = value end\r\n  end\r\n\r\n  for _, entry in pairs(options) do\r\n    local entry_cli_values = collect_with_default(entry)\r\n    local maxcount = entry.maxcount\r\n\r\n    if maxcount == nil then\r\n      maxcount = type(entry.default) == 'table' and 999 or 1\r\n    end\r\n\r\n    local entry_value = entry_cli_values\r\n\r\n    if maxcount == 1 and type(entry_cli_values) == 'table' then\r\n      -- take the last value\r\n      entry_value = entry_cli_values[#entry_cli_values]\r\n\r\n      if entry_value == '__CLIARGS_NULL__' then\r\n        entry_value = nil\r\n      end\r\n    end\r\n\r\n    write(entry, entry_value)\r\n  end\r\n\r\n  return results\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "local results = {}",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "local function collect_with_default(entry)\r\n    local entry_values = {}\r\n    local _\r\n\r\n    for _, item in ipairs(cli_values) do\r\n      if item.entry == entry then\r\n        table.insert(entry_values, item.value)\r\n      end\r\n    end\r\n\r\n    if #entry_values == 0 then\r\n      return type(entry.default) == 'table' and entry.default or { entry.default }\r\n    else\r\n      return entry_values\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 96,
    "text": "local entry_values = {}",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "local _",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "for _, item in ipairs(cli_values) do\r\n      if item.entry == entry then\r\n        table.insert(entry_values, item.value)\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 99,
    "text": "if item.entry == entry then\r\n        table.insert(entry_values, item.value)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "table.insert(entry_values, item.value)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "if #entry_values == 0 then\r\n      return type(entry.default) == 'table' and entry.default or { entry.default }\r\n    else\r\n      return entry_values\r\n    end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "local function write(entry, value)\r\n    if entry.key then results[entry.key] = value end\r\n    if entry.expanded_key then results[entry.expanded_key] = value end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 103,
    "text": "if entry.key then results[entry.key] = value end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "results[entry.key] = value",
    "type": "statement:assign"
  }, {
    "id": 105,
    "text": "if entry.expanded_key then results[entry.expanded_key] = value end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "results[entry.expanded_key] = value",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "for _, entry in pairs(options) do\r\n    local entry_cli_values = collect_with_default(entry)\r\n    local maxcount = entry.maxcount\r\n\r\n    if maxcount == nil then\r\n      maxcount = type(entry.default) == 'table' and 999 or 1\r\n    end\r\n\r\n    local entry_value = entry_cli_values\r\n\r\n    if maxcount == 1 and type(entry_cli_values) == 'table' then\r\n      -- take the last value\r\n      entry_value = entry_cli_values[#entry_cli_values]\r\n\r\n      if entry_value == '__CLIARGS_NULL__' then\r\n        entry_value = nil\r\n      end\r\n    end\r\n\r\n    write(entry, entry_value)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 108,
    "text": "local entry_cli_values = collect_with_default(entry)",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "local maxcount = entry.maxcount",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "if maxcount == nil then\r\n      maxcount = type(entry.default) == 'table' and 999 or 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "maxcount = type(entry.default) == 'table' and 999 or 1",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "local entry_value = entry_cli_values",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "if maxcount == 1 and type(entry_cli_values) == 'table' then\r\n      -- take the last value\r\n      entry_value = entry_cli_values[#entry_cli_values]\r\n\r\n      if entry_value == '__CLIARGS_NULL__' then\r\n        entry_value = nil\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 114,
    "text": "entry_value = entry_cli_values[#entry_cli_values]",
    "type": "statement:assign"
  }, {
    "id": 115,
    "text": "if entry_value == '__CLIARGS_NULL__' then\r\n        entry_value = nil\r\n      end",
    "type": "statement:if"
  }, {
    "id": 116,
    "text": "entry_value = nil",
    "type": "statement:assign"
  }, {
    "id": 117,
    "text": "write(entry, entry_value)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "local function collect_with_default(entry)\r\n    local entry_values = {}\r\n    local _\r\n\r\n    for _, item in ipairs(cli_values) do\r\n      if item.entry == entry then\r\n        table.insert(entry_values, item.value)\r\n      end\r\n    end\r\n\r\n    if #entry_values == 0 then\r\n      return type(entry.default) == 'table' and entry.default or { entry.default }\r\n    else\r\n      return entry_values\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "local function write(entry, value)\r\n    if entry.key then results[entry.key] = value end\r\n    if entry.expanded_key then results[entry.expanded_key] = value end\r\n  end",
    "type": "function"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function()\r\n            if dump then\r\n              return nil, printer.dump_internal_state(values)\r\n            else\r\n              return p.collect_results(values, options)\r\n            end\r\n          end",
    "type": "function"
  }, {
    "id": 124,
    "text": "if dump then\r\n              return nil, printer.dump_internal_state(values)\r\n            else\r\n              return p.collect_results(values, options)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function(values, arg_count)\r\n          return p.validate(options, arg_count, function()\r\n            if dump then\r\n              return nil, printer.dump_internal_state(values)\r\n            else\r\n              return p.collect_results(values, options)\r\n            end\r\n          end)\r\n        end",
    "type": "function"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "function()\r\n        return p.process_arguments(args_without_dump, options, function(values, arg_count)\r\n          return p.validate(options, arg_count, function()\r\n            if dump then\r\n              return nil, printer.dump_internal_state(values)\r\n            else\r\n              return p.collect_results(values, options)\r\n            end\r\n          end)\r\n        end)\r\n      end",
    "type": "function"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function(dump, args_without_dump)\r\n      return p.print_help(args_without_dump, printer, function()\r\n        return p.process_arguments(args_without_dump, options, function(values, arg_count)\r\n          return p.validate(options, arg_count, function()\r\n            if dump then\r\n              return nil, printer.dump_internal_state(values)\r\n            else\r\n              return p.collect_results(values, options)\r\n            end\r\n          end)\r\n        end)\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "function()\r\n    return p.track_dump_request(args, function(dump, args_without_dump)\r\n      return p.print_help(args_without_dump, printer, function()\r\n        return p.process_arguments(args_without_dump, options, function(values, arg_count)\r\n          return p.validate(options, arg_count, function()\r\n            if dump then\r\n              return nil, printer.dump_internal_state(values)\r\n            else\r\n              return p.collect_results(values, options)\r\n            end\r\n          end)\r\n        end)\r\n      end)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function(arguments, options, printer)\r\n  assert(arguments == nil or type(arguments) == \"table\",\r\n    \"expected an argument table to be passed in, \" ..\r\n    \"got something of type \" .. type(arguments)\r\n  )\r\n\r\n  local args = arguments or _G.arg or {}\r\n\r\n  -- the spiral of DOOM:\r\n  return p.invoke_command(args, options, function()\r\n    return p.track_dump_request(args, function(dump, args_without_dump)\r\n      return p.print_help(args_without_dump, printer, function()\r\n        return p.process_arguments(args_without_dump, options, function(values, arg_count)\r\n          return p.validate(options, arg_count, function()\r\n            if dump then\r\n              return nil, printer.dump_internal_state(values)\r\n            else\r\n              return p.collect_results(values, options)\r\n            end\r\n          end)\r\n        end)\r\n      end)\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "assert(arguments == nil or type(arguments) == \"table\",\r\n    \"expected an argument table to be passed in, \" ..\r\n    \"got something of type \" .. type(arguments)\r\n  )",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "local args = arguments or _G.arg or {}",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "",
    "type": "function container"
  }, {
    "id": 139,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 140,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 141,
    "text": "done",
    "type": "global function"
  }, {
    "id": 142,
    "text": "__action__",
    "type": "global function"
  }, {
    "id": 143,
    "text": "filename",
    "type": "global function"
  }, {
    "id": 144,
    "text": "shallow_copy",
    "type": "global function"
  }, {
    "id": 145,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 146,
    "text": "filter",
    "type": "global function"
  }, {
    "id": 147,
    "text": "type",
    "type": "global function"
  }, {
    "id": 148,
    "text": "callback",
    "type": "global function"
  }, {
    "id": 149,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 150,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 151,
    "text": "require",
    "type": "global function"
  }, {
    "id": 152,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 153,
    "text": "dump_internal_state",
    "type": "global function"
  }, {
    "id": 154,
    "text": "disect_argument",
    "type": "global function"
  }, {
    "id": 155,
    "text": "generate_help_and_usage",
    "type": "global function"
  }, {
    "id": 156,
    "text": "lookup",
    "type": "global function"
  }, {
    "id": 157,
    "text": "",
    "type": "variable container"
  }, {
    "id": 158,
    "text": "",
    "type": "require container"
  }, {
    "id": 159,
    "text": "",
    "type": "local variable"
  }, {
    "id": 160,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 161,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 162,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 163,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 164,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 165,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 166,
    "text": "",
    "type": "interface container"
  }, {
    "id": 167,
    "text": "",
    "type": "interface"
  } ]
}