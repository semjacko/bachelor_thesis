{
  "_filename": "splatarg_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/lua_cliargs/spec/features/splatarg_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 18
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 6
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 24
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 6
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 12
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 18
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 6
  }, {
    "from": 33,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 24
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 36
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 36
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 41
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 48
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 51
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 54
  }, {
    "from": 56,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 36
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 36
  }, {
    "from": 63,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 41
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 48
  }, {
    "from": 64,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 51
  }, {
    "from": 64,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 54
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 67
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 67
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 67
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 67
  }, {
    "from": 85,
    "label": "has",
    "to": 73
  }, {
    "from": 85,
    "label": "has",
    "to": 74
  }, {
    "from": 85,
    "label": "has",
    "to": 75
  }, {
    "from": 85,
    "label": "has",
    "to": 76
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 79
  }, {
    "from": 86,
    "label": "has",
    "to": 80
  }, {
    "from": 86,
    "label": "has",
    "to": 81
  }, {
    "from": 83,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 88,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 88,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 89
  }, {
    "from": 95,
    "label": "has",
    "to": 90
  }, {
    "from": 95,
    "label": "has",
    "to": 91
  }, {
    "from": 95,
    "label": "has",
    "to": 92
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 98
  }, {
    "from": 100,
    "label": "has",
    "to": 103
  }, {
    "from": 100,
    "label": "has",
    "to": 104
  }, {
    "from": 100,
    "label": "has",
    "to": 105
  }, {
    "from": 100,
    "label": "has",
    "to": 106
  }, {
    "from": 100,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 101
  }, {
    "from": 109,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 98
  }, {
    "from": 109,
    "label": "has",
    "to": 103
  }, {
    "from": 109,
    "label": "has",
    "to": 104
  }, {
    "from": 109,
    "label": "has",
    "to": 105
  }, {
    "from": 109,
    "label": "has",
    "to": 106
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 3
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 114,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 6
  }, {
    "from": 114,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 12
  }, {
    "from": 114,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 18
  }, {
    "from": 114,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 6
  }, {
    "from": 33,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 24
  }, {
    "from": 111,
    "label": "has",
    "to": 115
  }, {
    "from": 115,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 36
  }, {
    "from": 115,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 36
  }, {
    "from": 63,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 41
  }, {
    "from": 115,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 48
  }, {
    "from": 64,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 51
  }, {
    "from": 64,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 54
  }, {
    "from": 111,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 67
  }, {
    "from": 116,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 67
  }, {
    "from": 85,
    "label": "has",
    "to": 73
  }, {
    "from": 85,
    "label": "has",
    "to": 74
  }, {
    "from": 85,
    "label": "has",
    "to": 75
  }, {
    "from": 85,
    "label": "has",
    "to": 76
  }, {
    "from": 116,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 79
  }, {
    "from": 86,
    "label": "has",
    "to": 80
  }, {
    "from": 86,
    "label": "has",
    "to": 81
  }, {
    "from": 111,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 89
  }, {
    "from": 95,
    "label": "has",
    "to": 90
  }, {
    "from": 95,
    "label": "has",
    "to": 91
  }, {
    "from": 95,
    "label": "has",
    "to": 92
  }, {
    "from": 111,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 101
  }, {
    "from": 109,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 98
  }, {
    "from": 109,
    "label": "has",
    "to": 103
  }, {
    "from": 109,
    "label": "has",
    "to": 104
  }, {
    "from": 109,
    "label": "has",
    "to": 105
  }, {
    "from": 109,
    "label": "has",
    "to": 106
  }, {
    "from": 111,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "calls",
    "to": 128
  }, {
    "from": 120,
    "label": "calls",
    "to": 128
  }, {
    "from": 120,
    "label": "calls",
    "to": 122
  }, {
    "from": 120,
    "label": "calls",
    "to": 122
  }, {
    "from": 120,
    "label": "calls",
    "to": 131
  }, {
    "from": 120,
    "label": "calls",
    "to": 132
  }, {
    "from": 120,
    "label": "calls",
    "to": 132
  }, {
    "from": 120,
    "label": "calls",
    "to": 132
  }, {
    "from": 120,
    "label": "calls",
    "to": 124
  }, {
    "from": 120,
    "label": "calls",
    "to": 124
  }, {
    "from": 120,
    "label": "calls",
    "to": 124
  }, {
    "from": 120,
    "label": "calls",
    "to": 124
  }, {
    "from": 120,
    "label": "calls",
    "to": 124
  }, {
    "from": 120,
    "label": "calls",
    "to": 124
  }, {
    "from": 120,
    "label": "calls",
    "to": 124
  }, {
    "from": 120,
    "label": "calls",
    "to": 124
  }, {
    "from": 120,
    "label": "calls",
    "to": 124
  }, {
    "from": 120,
    "label": "calls",
    "to": 124
  }, {
    "from": 120,
    "label": "calls",
    "to": 124
  }, {
    "from": 120,
    "label": "calls",
    "to": 124
  }, {
    "from": 120,
    "label": "calls",
    "to": 124
  }, {
    "from": 120,
    "label": "calls",
    "to": 126
  }, {
    "from": 120,
    "label": "calls",
    "to": 126
  }, {
    "from": 120,
    "label": "calls",
    "to": 126
  }, {
    "from": 120,
    "label": "calls",
    "to": 126
  }, {
    "from": 120,
    "label": "calls",
    "to": 126
  }, {
    "from": 120,
    "label": "calls",
    "to": 126
  }, {
    "from": 120,
    "label": "calls",
    "to": 126
  }, {
    "from": 120,
    "label": "calls",
    "to": 126
  }, {
    "from": 120,
    "label": "calls",
    "to": 126
  }, {
    "from": 120,
    "label": "calls",
    "to": 121
  }, {
    "from": 120,
    "label": "calls",
    "to": 121
  }, {
    "from": 120,
    "label": "calls",
    "to": 121
  }, {
    "from": 120,
    "label": "calls",
    "to": 121
  }, {
    "from": 120,
    "label": "calls",
    "to": 121
  }, {
    "from": 120,
    "label": "calls",
    "to": 121
  }, {
    "from": 120,
    "label": "calls",
    "to": 121
  }, {
    "from": 120,
    "label": "calls",
    "to": 123
  }, {
    "from": 120,
    "label": "calls",
    "to": 123
  }, {
    "from": 120,
    "label": "calls",
    "to": 123
  }, {
    "from": 120,
    "label": "calls",
    "to": 133
  }, {
    "from": 120,
    "label": "calls",
    "to": 133
  }, {
    "from": 120,
    "label": "calls",
    "to": 133
  }, {
    "from": 120,
    "label": "calls",
    "to": 125
  }, {
    "from": 120,
    "label": "calls",
    "to": 130
  }, {
    "from": 120,
    "label": "calls",
    "to": 130
  }, {
    "from": 120,
    "label": "calls",
    "to": 127
  }, {
    "from": 120,
    "label": "calls",
    "to": 127
  }, {
    "from": 120,
    "label": "calls",
    "to": 127
  }, {
    "from": 120,
    "label": "calls",
    "to": 127
  }, {
    "from": 120,
    "label": "calls",
    "to": 127
  }, {
    "from": 120,
    "label": "calls",
    "to": 129
  }, {
    "from": 1,
    "label": "contains",
    "to": 120
  }, {
    "from": 120,
    "label": "declares",
    "to": 2
  }, {
    "from": 120,
    "label": "declares",
    "to": 5
  }, {
    "from": 120,
    "label": "declares",
    "to": 8
  }, {
    "from": 120,
    "label": "declares",
    "to": 11
  }, {
    "from": 120,
    "label": "declares",
    "to": 14
  }, {
    "from": 120,
    "label": "declares",
    "to": 17
  }, {
    "from": 120,
    "label": "declares",
    "to": 20
  }, {
    "from": 120,
    "label": "declares",
    "to": 23
  }, {
    "from": 120,
    "label": "declares",
    "to": 26
  }, {
    "from": 120,
    "label": "declares",
    "to": 29
  }, {
    "from": 120,
    "label": "declares",
    "to": 35
  }, {
    "from": 120,
    "label": "declares",
    "to": 38
  }, {
    "from": 120,
    "label": "declares",
    "to": 40
  }, {
    "from": 120,
    "label": "declares",
    "to": 43
  }, {
    "from": 120,
    "label": "declares",
    "to": 47
  }, {
    "from": 120,
    "label": "declares",
    "to": 50
  }, {
    "from": 120,
    "label": "declares",
    "to": 53
  }, {
    "from": 120,
    "label": "declares",
    "to": 56
  }, {
    "from": 120,
    "label": "declares",
    "to": 61
  }, {
    "from": 120,
    "label": "declares",
    "to": 66
  }, {
    "from": 120,
    "label": "declares",
    "to": 69
  }, {
    "from": 120,
    "label": "declares",
    "to": 72
  }, {
    "from": 120,
    "label": "declares",
    "to": 78
  }, {
    "from": 120,
    "label": "declares",
    "to": 83
  }, {
    "from": 120,
    "label": "declares",
    "to": 88
  }, {
    "from": 120,
    "label": "declares",
    "to": 94
  }, {
    "from": 120,
    "label": "declares",
    "to": 97
  }, {
    "from": 120,
    "label": "declares",
    "to": 100
  }, {
    "from": 120,
    "label": "declares",
    "to": 108
  }, {
    "from": 120,
    "label": "declares",
    "to": 111
  }, {
    "from": 1,
    "label": "contains",
    "to": 135
  }, {
    "from": 1,
    "label": "contains",
    "to": 136
  }, {
    "from": 136,
    "label": "initializes",
    "to": 137
  }, {
    "from": 137,
    "label": "requires",
    "to": 134
  }, {
    "from": 9,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 15,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 27,
    "label": "hasArgument",
    "to": 23
  }, {
    "from": 30,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 30,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 31,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 33,
    "label": "hasArgument",
    "to": 23
  }, {
    "from": 33,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 40
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 58,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 35
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 40
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 43
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 84,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 84,
    "label": "hasArgument",
    "to": 69
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 72
  }, {
    "from": 86,
    "label": "hasArgument",
    "to": 78
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 88
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 97
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 97
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 100
  }, {
    "from": 113,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 23
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 114,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 35
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 40
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 43
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 115,
    "label": "hasArgument",
    "to": 61
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 66
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 69
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 72
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 78
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 83
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 88
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 94
  }, {
    "from": 118,
    "label": "hasArgument",
    "to": 97
  }, {
    "from": 118,
    "label": "hasArgument",
    "to": 100
  }, {
    "from": 118,
    "label": "hasArgument",
    "to": 108
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "splatarg_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "function()\r\n    cli = require(\"cliargs.core\")()\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "cli = require(\"cliargs.core\")()",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function()\r\n        cli:splat('SPLAT', 'some repeatable arg')\r\n      end",
    "type": "function"
  }, {
    "id": 6,
    "text": "cli:splat('SPLAT', 'some repeatable arg')",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function()\r\n      assert.has_no_error(function()\r\n        cli:splat('SPLAT', 'some repeatable arg')\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 9,
    "text": "assert.has_no_error(function()\r\n        cli:splat('SPLAT', 'some repeatable arg')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function()\r\n        cli:splat()\r\n      end",
    "type": "function"
  }, {
    "id": 12,
    "text": "cli:splat()",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function()\r\n      assert.error_matches(function()\r\n        cli:splat()\r\n      end, 'Key and description are mandatory arguments')\r\n    end",
    "type": "function"
  }, {
    "id": 15,
    "text": "assert.error_matches(function()\r\n        cli:splat()\r\n      end, 'Key and description are mandatory arguments')",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function()\r\n        cli:splat('SPLAT')\r\n      end",
    "type": "function"
  }, {
    "id": 18,
    "text": "cli:splat('SPLAT')",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function()\r\n      assert.error_matches(function()\r\n        cli:splat('SPLAT')\r\n      end, 'Key and description are mandatory arguments')\r\n    end",
    "type": "function"
  }, {
    "id": 21,
    "text": "assert.error_matches(function()\r\n        cli:splat('SPLAT')\r\n      end, 'Key and description are mandatory arguments')",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function()\r\n        cli:splat('SOME_SPLAT', 'some repeatable arg')\r\n      end",
    "type": "function"
  }, {
    "id": 24,
    "text": "cli:splat('SOME_SPLAT', 'some repeatable arg')",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function()\r\n      cli:splat('SPLAT', 'some repeatable arg')\r\n\r\n      assert.error_matches(function()\r\n        cli:splat('SOME_SPLAT', 'some repeatable arg')\r\n      end, 'Only one splat')\r\n    end",
    "type": "function"
  }, {
    "id": 27,
    "text": "assert.error_matches(function()\r\n        cli:splat('SOME_SPLAT', 'some repeatable arg')\r\n      end, 'Only one splat')",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function()\r\n    it('works', function()\r\n      assert.has_no_error(function()\r\n        cli:splat('SPLAT', 'some repeatable arg')\r\n      end)\r\n    end)\r\n\r\n    it('requires a key', function()\r\n      assert.error_matches(function()\r\n        cli:splat()\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('requires a description', function()\r\n      assert.error_matches(function()\r\n        cli:splat('SPLAT')\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('rejects multiple definitions', function()\r\n      cli:splat('SPLAT', 'some repeatable arg')\r\n\r\n      assert.error_matches(function()\r\n        cli:splat('SOME_SPLAT', 'some repeatable arg')\r\n      end, 'Only one splat')\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 30,
    "text": "it('works', function()\r\n      assert.has_no_error(function()\r\n        cli:splat('SPLAT', 'some repeatable arg')\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "it('requires a key', function()\r\n      assert.error_matches(function()\r\n        cli:splat()\r\n      end, 'Key and description are mandatory arguments')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "it('requires a description', function()\r\n      assert.error_matches(function()\r\n        cli:splat('SPLAT')\r\n      end, 'Key and description are mandatory arguments')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "it('rejects multiple definitions', function()\r\n      cli:splat('SPLAT', 'some repeatable arg')\r\n\r\n      assert.error_matches(function()\r\n        cli:splat('SOME_SPLAT', 'some repeatable arg')\r\n      end, 'Only one splat')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function()\r\n      cli:splat('SPLAT', 'some repeatable arg', 'foo')\r\n    end",
    "type": "function"
  }, {
    "id": 36,
    "text": "cli:splat('SPLAT', 'some repeatable arg', 'foo')",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function()\r\n        cli:splat('SPLAT', 'some repeatable arg', 'foo')\r\n      end",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function()\r\n        assert.equal(helpers.parse(cli, '').SPLAT, 'foo')\r\n      end",
    "type": "function"
  }, {
    "id": 41,
    "text": "assert.equal(helpers.parse(cli, '').SPLAT, 'foo')",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function()\r\n      before_each(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', 'foo')\r\n      end)\r\n\r\n      it('uses the default value when nothing is passed in', function()\r\n        assert.equal(helpers.parse(cli, '').SPLAT, 'foo')\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 44,
    "text": "before_each(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', 'foo')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "it('uses the default value when nothing is passed in', function()\r\n        assert.equal(helpers.parse(cli, '').SPLAT, 'foo')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function()\r\n        cli:splat('SPLAT', 'some repeatable arg', 'foo', 3)\r\n      end",
    "type": "function"
  }, {
    "id": 48,
    "text": "cli:splat('SPLAT', 'some repeatable arg', 'foo', 3)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function()\r\n        assert.same(helpers.parse(cli, '').SPLAT, { 'foo' })\r\n      end",
    "type": "function"
  }, {
    "id": 51,
    "text": "assert.same(helpers.parse(cli, '').SPLAT, { 'foo' })",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function()\r\n        assert.same(helpers.parse(cli, 'asdf').SPLAT, { 'asdf' })\r\n      end",
    "type": "function"
  }, {
    "id": 54,
    "text": "assert.same(helpers.parse(cli, 'asdf').SPLAT, { 'asdf' })",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function()\r\n      before_each(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', 'foo', 3)\r\n      end)\r\n\r\n      it('uses the default value only once when nothing is passed in', function()\r\n        assert.same(helpers.parse(cli, '').SPLAT, { 'foo' })\r\n      end)\r\n\r\n      it('does not use the default value if something was passed in at least once', function()\r\n        assert.same(helpers.parse(cli, 'asdf').SPLAT, { 'asdf' })\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 57,
    "text": "before_each(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', 'foo', 3)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "it('uses the default value only once when nothing is passed in', function()\r\n        assert.same(helpers.parse(cli, '').SPLAT, { 'foo' })\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "it('does not use the default value if something was passed in at least once', function()\r\n        assert.same(helpers.parse(cli, 'asdf').SPLAT, { 'asdf' })\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function()\r\n    it('allows me to define a default value', function()\r\n      cli:splat('SPLAT', 'some repeatable arg', 'foo')\r\n    end)\r\n\r\n    context('when only 1 occurrence is allowed', function()\r\n      before_each(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', 'foo')\r\n      end)\r\n\r\n      it('uses the default value when nothing is passed in', function()\r\n        assert.equal(helpers.parse(cli, '').SPLAT, 'foo')\r\n      end)\r\n    end)\r\n\r\n    context('when more than 1 occurrence is allowed', function()\r\n      before_each(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', 'foo', 3)\r\n      end)\r\n\r\n      it('uses the default value only once when nothing is passed in', function()\r\n        assert.same(helpers.parse(cli, '').SPLAT, { 'foo' })\r\n      end)\r\n\r\n      it('does not use the default value if something was passed in at least once', function()\r\n        assert.same(helpers.parse(cli, 'asdf').SPLAT, { 'asdf' })\r\n      end)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 62,
    "text": "it('allows me to define a default value', function()\r\n      cli:splat('SPLAT', 'some repeatable arg', 'foo')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "context('when only 1 occurrence is allowed', function()\r\n      before_each(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', 'foo')\r\n      end)\r\n\r\n      it('uses the default value when nothing is passed in', function()\r\n        assert.equal(helpers.parse(cli, '').SPLAT, 'foo')\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "context('when more than 1 occurrence is allowed', function()\r\n      before_each(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', 'foo', 3)\r\n      end)\r\n\r\n      it('uses the default value only once when nothing is passed in', function()\r\n        assert.same(helpers.parse(cli, '').SPLAT, { 'foo' })\r\n      end)\r\n\r\n      it('does not use the default value if something was passed in at least once', function()\r\n        assert.same(helpers.parse(cli, 'asdf').SPLAT, { 'asdf' })\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function()\r\n        cli:splat('SPLAT', 'some repeatable arg', nil, 2)\r\n      end",
    "type": "function"
  }, {
    "id": 67,
    "text": "cli:splat('SPLAT', 'some repeatable arg', nil, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function()\r\n      assert.has_no_error(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', nil, 2)\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 70,
    "text": "assert.has_no_error(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', nil, 2)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function()\r\n      cli:splat('SPLAT', 'some repeatable arg', nil, 2)\r\n      local args = helpers.parse(cli, 'a b')\r\n\r\n      assert.equal(#args.SPLAT, 2)\r\n      assert.equal(args.SPLAT[1], 'a')\r\n      assert.equal(args.SPLAT[2], 'b')\r\n    end",
    "type": "function"
  }, {
    "id": 73,
    "text": "local args = helpers.parse(cli, 'a b')",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "assert.equal(#args.SPLAT, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "assert.equal(args.SPLAT[1], 'a')",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "assert.equal(args.SPLAT[2], 'b')",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function()\r\n      cli:splat('SPLAT', 'foobar', nil, 2)\r\n\r\n      local _, err = helpers.parse(cli, 'a b c')\r\n      assert.matches(\"bad number of arguments\", err)\r\n    end",
    "type": "function"
  }, {
    "id": 79,
    "text": "cli:splat('SPLAT', 'foobar', nil, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "local _, err = helpers.parse(cli, 'a b c')",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "assert.matches(\"bad number of arguments\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function()\r\n    it('accepts a repetition count', function()\r\n      assert.has_no_error(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', nil, 2)\r\n      end)\r\n    end)\r\n\r\n    it('appends the values to a list', function()\r\n      cli:splat('SPLAT', 'some repeatable arg', nil, 2)\r\n      local args = helpers.parse(cli, 'a b')\r\n\r\n      assert.equal(#args.SPLAT, 2)\r\n      assert.equal(args.SPLAT[1], 'a')\r\n      assert.equal(args.SPLAT[2], 'b')\r\n    end)\r\n\r\n    it('bails if more values were passed than acceptable', function()\r\n      cli:splat('SPLAT', 'foobar', nil, 2)\r\n\r\n      local _, err = helpers.parse(cli, 'a b c')\r\n      assert.matches(\"bad number of arguments\", err)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 84,
    "text": "it('accepts a repetition count', function()\r\n      assert.has_no_error(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', nil, 2)\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "it('appends the values to a list', function()\r\n      cli:splat('SPLAT', 'some repeatable arg', nil, 2)\r\n      local args = helpers.parse(cli, 'a b')\r\n\r\n      assert.equal(#args.SPLAT, 2)\r\n      assert.equal(args.SPLAT[1], 'a')\r\n      assert.equal(args.SPLAT[2], 'b')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "it('bails if more values were passed than acceptable', function()\r\n      cli:splat('SPLAT', 'foobar', nil, 2)\r\n\r\n      local _, err = helpers.parse(cli, 'a b c')\r\n      assert.matches(\"bad number of arguments\", err)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function()\r\n      cli:splat('SPLAT', 'foobar', nil, 1)\r\n\r\n      local args = helpers.parse(cli, 'asdf')\r\n\r\n      assert.equal(type(args.SPLAT), \"string\")\r\n      assert.equal(args.SPLAT, \"asdf\")\r\n    end",
    "type": "function"
  }, {
    "id": 89,
    "text": "cli:splat('SPLAT', 'foobar', nil, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "local args = helpers.parse(cli, 'asdf')",
    "type": "statement:localassign"
  }, {
    "id": 91,
    "text": "assert.equal(type(args.SPLAT), \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "assert.equal(args.SPLAT, \"asdf\")",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function()\r\n    it(\"works\", function()\r\n      cli:splat('SPLAT', 'foobar', nil, 1)\r\n\r\n      local args = helpers.parse(cli, 'asdf')\r\n\r\n      assert.equal(type(args.SPLAT), \"string\")\r\n      assert.equal(args.SPLAT, \"asdf\")\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 95,
    "text": "it(\"works\", function()\r\n      cli:splat('SPLAT', 'foobar', nil, 1)\r\n\r\n      local args = helpers.parse(cli, 'asdf')\r\n\r\n      assert.equal(type(args.SPLAT), \"string\")\r\n      assert.equal(args.SPLAT, \"asdf\")\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function(_, value)\r\n        table.insert(call_args, value)\r\n      end",
    "type": "function"
  }, {
    "id": 98,
    "text": "table.insert(call_args, value)",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function()\r\n      local call_args = {}\r\n\r\n      cli:splat('SPLAT', 'foobar', nil, 2, function(_, value)\r\n        table.insert(call_args, value)\r\n      end)\r\n\r\n      helpers.parse(cli, 'a b')\r\n\r\n      assert.equal(#call_args, 2)\r\n      assert.equal(call_args[1], 'a')\r\n      assert.equal(call_args[2], 'b')\r\n    end",
    "type": "function"
  }, {
    "id": 101,
    "text": "local call_args = {}",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "cli:splat('SPLAT', 'foobar', nil, 2, function(_, value)\r\n        table.insert(call_args, value)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "helpers.parse(cli, 'a b')",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "assert.equal(#call_args, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 105,
    "text": "assert.equal(call_args[1], 'a')",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "assert.equal(call_args[2], 'b')",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function()\r\n    it('invokes the callback every time a value for the splat arg is parsed', function()\r\n      local call_args = {}\r\n\r\n      cli:splat('SPLAT', 'foobar', nil, 2, function(_, value)\r\n        table.insert(call_args, value)\r\n      end)\r\n\r\n      helpers.parse(cli, 'a b')\r\n\r\n      assert.equal(#call_args, 2)\r\n      assert.equal(call_args[1], 'a')\r\n      assert.equal(call_args[2], 'b')\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 109,
    "text": "it('invokes the callback every time a value for the splat arg is parsed', function()\r\n      local call_args = {}\r\n\r\n      cli:splat('SPLAT', 'foobar', nil, 2, function(_, value)\r\n        table.insert(call_args, value)\r\n      end)\r\n\r\n      helpers.parse(cli, 'a b')\r\n\r\n      assert.equal(#call_args, 2)\r\n      assert.equal(call_args[1], 'a')\r\n      assert.equal(call_args[2], 'b')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function()\r\n  local cli\r\n\r\n  before_each(function()\r\n    cli = require(\"cliargs.core\")()\r\n  end)\r\n\r\n  describe('defining the splat arg', function()\r\n    it('works', function()\r\n      assert.has_no_error(function()\r\n        cli:splat('SPLAT', 'some repeatable arg')\r\n      end)\r\n    end)\r\n\r\n    it('requires a key', function()\r\n      assert.error_matches(function()\r\n        cli:splat()\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('requires a description', function()\r\n      assert.error_matches(function()\r\n        cli:splat('SPLAT')\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('rejects multiple definitions', function()\r\n      cli:splat('SPLAT', 'some repeatable arg')\r\n\r\n      assert.error_matches(function()\r\n        cli:splat('SOME_SPLAT', 'some repeatable arg')\r\n      end, 'Only one splat')\r\n    end)\r\n  end)\r\n\r\n  describe('default value', function()\r\n    it('allows me to define a default value', function()\r\n      cli:splat('SPLAT', 'some repeatable arg', 'foo')\r\n    end)\r\n\r\n    context('when only 1 occurrence is allowed', function()\r\n      before_each(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', 'foo')\r\n      end)\r\n\r\n      it('uses the default value when nothing is passed in', function()\r\n        assert.equal(helpers.parse(cli, '').SPLAT, 'foo')\r\n      end)\r\n    end)\r\n\r\n    context('when more than 1 occurrence is allowed', function()\r\n      before_each(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', 'foo', 3)\r\n      end)\r\n\r\n      it('uses the default value only once when nothing is passed in', function()\r\n        assert.same(helpers.parse(cli, '').SPLAT, { 'foo' })\r\n      end)\r\n\r\n      it('does not use the default value if something was passed in at least once', function()\r\n        assert.same(helpers.parse(cli, 'asdf').SPLAT, { 'asdf' })\r\n      end)\r\n    end)\r\n  end)\r\n\r\n  describe('repetition count', function()\r\n    it('accepts a repetition count', function()\r\n      assert.has_no_error(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', nil, 2)\r\n      end)\r\n    end)\r\n\r\n    it('appends the values to a list', function()\r\n      cli:splat('SPLAT', 'some repeatable arg', nil, 2)\r\n      local args = helpers.parse(cli, 'a b')\r\n\r\n      assert.equal(#args.SPLAT, 2)\r\n      assert.equal(args.SPLAT[1], 'a')\r\n      assert.equal(args.SPLAT[2], 'b')\r\n    end)\r\n\r\n    it('bails if more values were passed than acceptable', function()\r\n      cli:splat('SPLAT', 'foobar', nil, 2)\r\n\r\n      local _, err = helpers.parse(cli, 'a b c')\r\n      assert.matches(\"bad number of arguments\", err)\r\n    end)\r\n  end)\r\n\r\n  context(\"given a splatarg as the only argument/option\", function()\r\n    it(\"works\", function()\r\n      cli:splat('SPLAT', 'foobar', nil, 1)\r\n\r\n      local args = helpers.parse(cli, 'asdf')\r\n\r\n      assert.equal(type(args.SPLAT), \"string\")\r\n      assert.equal(args.SPLAT, \"asdf\")\r\n    end)\r\n  end)\r\n\r\n  describe('@callback', function()\r\n    it('invokes the callback every time a value for the splat arg is parsed', function()\r\n      local call_args = {}\r\n\r\n      cli:splat('SPLAT', 'foobar', nil, 2, function(_, value)\r\n        table.insert(call_args, value)\r\n      end)\r\n\r\n      helpers.parse(cli, 'a b')\r\n\r\n      assert.equal(#call_args, 2)\r\n      assert.equal(call_args[1], 'a')\r\n      assert.equal(call_args[2], 'b')\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "local cli",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "before_each(function()\r\n    cli = require(\"cliargs.core\")()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "describe('defining the splat arg', function()\r\n    it('works', function()\r\n      assert.has_no_error(function()\r\n        cli:splat('SPLAT', 'some repeatable arg')\r\n      end)\r\n    end)\r\n\r\n    it('requires a key', function()\r\n      assert.error_matches(function()\r\n        cli:splat()\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('requires a description', function()\r\n      assert.error_matches(function()\r\n        cli:splat('SPLAT')\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('rejects multiple definitions', function()\r\n      cli:splat('SPLAT', 'some repeatable arg')\r\n\r\n      assert.error_matches(function()\r\n        cli:splat('SOME_SPLAT', 'some repeatable arg')\r\n      end, 'Only one splat')\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "describe('default value', function()\r\n    it('allows me to define a default value', function()\r\n      cli:splat('SPLAT', 'some repeatable arg', 'foo')\r\n    end)\r\n\r\n    context('when only 1 occurrence is allowed', function()\r\n      before_each(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', 'foo')\r\n      end)\r\n\r\n      it('uses the default value when nothing is passed in', function()\r\n        assert.equal(helpers.parse(cli, '').SPLAT, 'foo')\r\n      end)\r\n    end)\r\n\r\n    context('when more than 1 occurrence is allowed', function()\r\n      before_each(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', 'foo', 3)\r\n      end)\r\n\r\n      it('uses the default value only once when nothing is passed in', function()\r\n        assert.same(helpers.parse(cli, '').SPLAT, { 'foo' })\r\n      end)\r\n\r\n      it('does not use the default value if something was passed in at least once', function()\r\n        assert.same(helpers.parse(cli, 'asdf').SPLAT, { 'asdf' })\r\n      end)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "describe('repetition count', function()\r\n    it('accepts a repetition count', function()\r\n      assert.has_no_error(function()\r\n        cli:splat('SPLAT', 'some repeatable arg', nil, 2)\r\n      end)\r\n    end)\r\n\r\n    it('appends the values to a list', function()\r\n      cli:splat('SPLAT', 'some repeatable arg', nil, 2)\r\n      local args = helpers.parse(cli, 'a b')\r\n\r\n      assert.equal(#args.SPLAT, 2)\r\n      assert.equal(args.SPLAT[1], 'a')\r\n      assert.equal(args.SPLAT[2], 'b')\r\n    end)\r\n\r\n    it('bails if more values were passed than acceptable', function()\r\n      cli:splat('SPLAT', 'foobar', nil, 2)\r\n\r\n      local _, err = helpers.parse(cli, 'a b c')\r\n      assert.matches(\"bad number of arguments\", err)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "context(\"given a splatarg as the only argument/option\", function()\r\n    it(\"works\", function()\r\n      cli:splat('SPLAT', 'foobar', nil, 1)\r\n\r\n      local args = helpers.parse(cli, 'asdf')\r\n\r\n      assert.equal(type(args.SPLAT), \"string\")\r\n      assert.equal(args.SPLAT, \"asdf\")\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "describe('@callback', function()\r\n    it('invokes the callback every time a value for the splat arg is parsed', function()\r\n      local call_args = {}\r\n\r\n      cli:splat('SPLAT', 'foobar', nil, 2, function(_, value)\r\n        table.insert(call_args, value)\r\n      end)\r\n\r\n      helpers.parse(cli, 'a b')\r\n\r\n      assert.equal(#call_args, 2)\r\n      assert.equal(call_args[1], 'a')\r\n      assert.equal(call_args[2], 'b')\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "",
    "type": "function container"
  }, {
    "id": 121,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 122,
    "text": "has_no_error",
    "type": "global function"
  }, {
    "id": 123,
    "text": "context",
    "type": "global function"
  }, {
    "id": 124,
    "text": "it",
    "type": "global function"
  }, {
    "id": 125,
    "text": "type",
    "type": "global function"
  }, {
    "id": 126,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 127,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 128,
    "text": "same",
    "type": "global function"
  }, {
    "id": 129,
    "text": "matches",
    "type": "global function"
  }, {
    "id": 130,
    "text": "require",
    "type": "global function"
  }, {
    "id": 131,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 132,
    "text": "error_matches",
    "type": "global function"
  }, {
    "id": 133,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 134,
    "text": "(spec_helper)",
    "type": "module"
  }, {
    "id": 135,
    "text": "",
    "type": "variable container"
  }, {
    "id": 136,
    "text": "",
    "type": "require container"
  }, {
    "id": 137,
    "text": "",
    "type": "require local variable"
  } ]
}