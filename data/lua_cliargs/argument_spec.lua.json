{
  "_filename": "argument_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/lua_cliargs/spec/features/argument_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 21
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 27
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 9
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 33
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 15
  }, {
    "from": 38,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 21
  }, {
    "from": 38,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 27
  }, {
    "from": 38,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 9
  }, {
    "from": 43,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 33
  }, {
    "from": 38,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 9
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 49,
    "label": "has",
    "to": 53
  }, {
    "from": 49,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 50
  }, {
    "from": 56,
    "label": "has",
    "to": 51
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 50
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 58
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 9
  }, {
    "from": 64,
    "label": "has",
    "to": 46
  }, {
    "from": 64,
    "label": "has",
    "to": 47
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 50
  }, {
    "from": 65,
    "label": "has",
    "to": 51
  }, {
    "from": 65,
    "label": "has",
    "to": 52
  }, {
    "from": 65,
    "label": "has",
    "to": 53
  }, {
    "from": 65,
    "label": "has",
    "to": 54
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 50
  }, {
    "from": 66,
    "label": "has",
    "to": 51
  }, {
    "from": 66,
    "label": "has",
    "to": 57
  }, {
    "from": 66,
    "label": "has",
    "to": 58
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 50
  }, {
    "from": 67,
    "label": "has",
    "to": 61
  }, {
    "from": 67,
    "label": "has",
    "to": 58
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 73
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 76
  }, {
    "from": 83,
    "label": "has",
    "to": 77
  }, {
    "from": 83,
    "label": "has",
    "to": 78
  }, {
    "from": 83,
    "label": "has",
    "to": 79
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 89,
    "label": "has",
    "to": 78
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 89,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 86
  }, {
    "from": 96,
    "label": "has",
    "to": 87
  }, {
    "from": 95,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 90
  }, {
    "from": 97,
    "label": "has",
    "to": 91
  }, {
    "from": 97,
    "label": "has",
    "to": 78
  }, {
    "from": 97,
    "label": "has",
    "to": 92
  }, {
    "from": 97,
    "label": "has",
    "to": 93
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 2
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 70
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 73
  }, {
    "from": 102,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 76
  }, {
    "from": 83,
    "label": "has",
    "to": 77
  }, {
    "from": 83,
    "label": "has",
    "to": 78
  }, {
    "from": 83,
    "label": "has",
    "to": 79
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 86
  }, {
    "from": 96,
    "label": "has",
    "to": 87
  }, {
    "from": 103,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 90
  }, {
    "from": 97,
    "label": "has",
    "to": 91
  }, {
    "from": 97,
    "label": "has",
    "to": 78
  }, {
    "from": 97,
    "label": "has",
    "to": 92
  }, {
    "from": 97,
    "label": "has",
    "to": 93
  }, {
    "from": 99,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 6
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 108,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 15
  }, {
    "from": 108,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 21
  }, {
    "from": 108,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 27
  }, {
    "from": 108,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 9
  }, {
    "from": 43,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 33
  }, {
    "from": 105,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 9
  }, {
    "from": 64,
    "label": "has",
    "to": 46
  }, {
    "from": 64,
    "label": "has",
    "to": 47
  }, {
    "from": 109,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 50
  }, {
    "from": 65,
    "label": "has",
    "to": 51
  }, {
    "from": 65,
    "label": "has",
    "to": 52
  }, {
    "from": 65,
    "label": "has",
    "to": 53
  }, {
    "from": 65,
    "label": "has",
    "to": 54
  }, {
    "from": 109,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 50
  }, {
    "from": 66,
    "label": "has",
    "to": 51
  }, {
    "from": 66,
    "label": "has",
    "to": 57
  }, {
    "from": 66,
    "label": "has",
    "to": 58
  }, {
    "from": 109,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 50
  }, {
    "from": 67,
    "label": "has",
    "to": 61
  }, {
    "from": 67,
    "label": "has",
    "to": 58
  }, {
    "from": 105,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 100
  }, {
    "from": 110,
    "label": "has",
    "to": 2
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 110,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 70
  }, {
    "from": 110,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 73
  }, {
    "from": 102,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 76
  }, {
    "from": 83,
    "label": "has",
    "to": 77
  }, {
    "from": 83,
    "label": "has",
    "to": 78
  }, {
    "from": 83,
    "label": "has",
    "to": 79
  }, {
    "from": 110,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 86
  }, {
    "from": 96,
    "label": "has",
    "to": 87
  }, {
    "from": 103,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 90
  }, {
    "from": 97,
    "label": "has",
    "to": 91
  }, {
    "from": 97,
    "label": "has",
    "to": 78
  }, {
    "from": 97,
    "label": "has",
    "to": 92
  }, {
    "from": 97,
    "label": "has",
    "to": 93
  }, {
    "from": 105,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "calls",
    "to": 119
  }, {
    "from": 112,
    "label": "calls",
    "to": 119
  }, {
    "from": 2,
    "label": "calls",
    "to": 121
  }, {
    "from": 112,
    "label": "calls",
    "to": 116
  }, {
    "from": 112,
    "label": "calls",
    "to": 116
  }, {
    "from": 112,
    "label": "calls",
    "to": 116
  }, {
    "from": 112,
    "label": "calls",
    "to": 116
  }, {
    "from": 112,
    "label": "calls",
    "to": 116
  }, {
    "from": 112,
    "label": "calls",
    "to": 116
  }, {
    "from": 112,
    "label": "calls",
    "to": 116
  }, {
    "from": 112,
    "label": "calls",
    "to": 116
  }, {
    "from": 112,
    "label": "calls",
    "to": 116
  }, {
    "from": 112,
    "label": "calls",
    "to": 116
  }, {
    "from": 112,
    "label": "calls",
    "to": 113
  }, {
    "from": 112,
    "label": "calls",
    "to": 113
  }, {
    "from": 112,
    "label": "calls",
    "to": 113
  }, {
    "from": 112,
    "label": "calls",
    "to": 113
  }, {
    "from": 112,
    "label": "calls",
    "to": 113
  }, {
    "from": 112,
    "label": "calls",
    "to": 113
  }, {
    "from": 112,
    "label": "calls",
    "to": 115
  }, {
    "from": 112,
    "label": "calls",
    "to": 115
  }, {
    "from": 112,
    "label": "calls",
    "to": 115
  }, {
    "from": 112,
    "label": "calls",
    "to": 115
  }, {
    "from": 112,
    "label": "calls",
    "to": 115
  }, {
    "from": 112,
    "label": "calls",
    "to": 115
  }, {
    "from": 112,
    "label": "calls",
    "to": 115
  }, {
    "from": 112,
    "label": "calls",
    "to": 115
  }, {
    "from": 112,
    "label": "calls",
    "to": 115
  }, {
    "from": 112,
    "label": "calls",
    "to": 115
  }, {
    "from": 112,
    "label": "calls",
    "to": 115
  }, {
    "from": 112,
    "label": "calls",
    "to": 122
  }, {
    "from": 112,
    "label": "calls",
    "to": 122
  }, {
    "from": 112,
    "label": "calls",
    "to": 122
  }, {
    "from": 112,
    "label": "calls",
    "to": 122
  }, {
    "from": 112,
    "label": "calls",
    "to": 114
  }, {
    "from": 112,
    "label": "calls",
    "to": 114
  }, {
    "from": 112,
    "label": "calls",
    "to": 123
  }, {
    "from": 112,
    "label": "calls",
    "to": 123
  }, {
    "from": 112,
    "label": "calls",
    "to": 123
  }, {
    "from": 112,
    "label": "calls",
    "to": 123
  }, {
    "from": 112,
    "label": "calls",
    "to": 120
  }, {
    "from": 112,
    "label": "calls",
    "to": 120
  }, {
    "from": 112,
    "label": "calls",
    "to": 117
  }, {
    "from": 112,
    "label": "calls",
    "to": 117
  }, {
    "from": 112,
    "label": "calls",
    "to": 117
  }, {
    "from": 112,
    "label": "calls",
    "to": 117
  }, {
    "from": 112,
    "label": "calls",
    "to": 118
  }, {
    "from": 1,
    "label": "contains",
    "to": 112
  }, {
    "from": 112,
    "label": "declares",
    "to": 2
  }, {
    "from": 112,
    "label": "declares",
    "to": 5
  }, {
    "from": 112,
    "label": "declares",
    "to": 8
  }, {
    "from": 112,
    "label": "declares",
    "to": 11
  }, {
    "from": 112,
    "label": "declares",
    "to": 14
  }, {
    "from": 112,
    "label": "declares",
    "to": 17
  }, {
    "from": 112,
    "label": "declares",
    "to": 20
  }, {
    "from": 112,
    "label": "declares",
    "to": 23
  }, {
    "from": 112,
    "label": "declares",
    "to": 26
  }, {
    "from": 112,
    "label": "declares",
    "to": 29
  }, {
    "from": 112,
    "label": "declares",
    "to": 32
  }, {
    "from": 112,
    "label": "declares",
    "to": 35
  }, {
    "from": 112,
    "label": "declares",
    "to": 38
  }, {
    "from": 112,
    "label": "declares",
    "to": 45
  }, {
    "from": 112,
    "label": "declares",
    "to": 49
  }, {
    "from": 112,
    "label": "declares",
    "to": 56
  }, {
    "from": 112,
    "label": "declares",
    "to": 60
  }, {
    "from": 112,
    "label": "declares",
    "to": 63
  }, {
    "from": 112,
    "label": "declares",
    "to": 69
  }, {
    "from": 112,
    "label": "declares",
    "to": 72
  }, {
    "from": 112,
    "label": "declares",
    "to": 75
  }, {
    "from": 112,
    "label": "declares",
    "to": 81
  }, {
    "from": 112,
    "label": "declares",
    "to": 85
  }, {
    "from": 112,
    "label": "declares",
    "to": 89
  }, {
    "from": 112,
    "label": "declares",
    "to": 95
  }, {
    "from": 112,
    "label": "declares",
    "to": 99
  }, {
    "from": 112,
    "label": "declares",
    "to": 105
  }, {
    "from": 1,
    "label": "contains",
    "to": 125
  }, {
    "from": 1,
    "label": "contains",
    "to": 126
  }, {
    "from": 126,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "requires",
    "to": 128
  }, {
    "from": 129,
    "label": "requires",
    "to": 128
  }, {
    "from": 130,
    "label": "requires",
    "to": 128
  }, {
    "from": 131,
    "label": "requires",
    "to": 128
  }, {
    "from": 124,
    "label": "requires",
    "to": 128
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 18,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 30,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 32
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 40,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 40,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 23
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 43,
    "label": "hasArgument",
    "to": 32
  }, {
    "from": 43,
    "label": "hasArgument",
    "to": 35
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 45
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 49
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 60
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 72
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 96,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 69
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 72
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 81
  }, {
    "from": 103,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 103,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 103,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 107,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 23
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 32
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 35
  }, {
    "from": 108,
    "label": "hasArgument",
    "to": 38
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 45
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 49
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 56
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 60
  }, {
    "from": 109,
    "label": "hasArgument",
    "to": 63
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 69
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 72
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 81
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 95
  }, {
    "from": 110,
    "label": "hasArgument",
    "to": 99
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "argument_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function capture(key, value, altkey)\r\n      table.insert(call_args, { key, value, altkey })\r\n    end",
    "type": "function"
  }, {
    "id": 3,
    "text": "table.insert(call_args, { key, value, altkey })",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function()\r\n    cli = require(\"cliargs.core\")()\r\n  end",
    "type": "function"
  }, {
    "id": 6,
    "text": "cli = require(\"cliargs.core\")()",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function()\r\n        cli:argument('PATH', 'path to a file')\r\n      end",
    "type": "function"
  }, {
    "id": 9,
    "text": "cli:argument('PATH', 'path to a file')",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function()\r\n      assert.has_no_errors(function()\r\n        cli:argument('PATH', 'path to a file')\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 12,
    "text": "assert.has_no_errors(function()\r\n        cli:argument('PATH', 'path to a file')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function()\r\n        cli:argument()\r\n      end",
    "type": "function"
  }, {
    "id": 15,
    "text": "cli:argument()",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function()\r\n      assert.error_matches(function()\r\n        cli:argument()\r\n      end, 'Key and description are mandatory arguments')\r\n    end",
    "type": "function"
  }, {
    "id": 18,
    "text": "assert.error_matches(function()\r\n        cli:argument()\r\n      end, 'Key and description are mandatory arguments')",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function()\r\n        cli:argument('PATH')\r\n      end",
    "type": "function"
  }, {
    "id": 21,
    "text": "cli:argument('PATH')",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function()\r\n      assert.error_matches(function()\r\n        cli:argument('PATH')\r\n      end, 'Key and description are mandatory arguments')\r\n    end",
    "type": "function"
  }, {
    "id": 24,
    "text": "assert.error_matches(function()\r\n        cli:argument('PATH')\r\n      end, 'Key and description are mandatory arguments')",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function()\r\n        cli:argument('PATH', 'path to a file', 'lolol')\r\n      end",
    "type": "function"
  }, {
    "id": 27,
    "text": "cli:argument('PATH', 'path to a file', 'lolol')",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function()\r\n      assert.error_matches(function()\r\n        cli:argument('PATH', 'path to a file', 'lolol')\r\n      end, 'Callback argument must be a function')\r\n    end",
    "type": "function"
  }, {
    "id": 30,
    "text": "assert.error_matches(function()\r\n        cli:argument('PATH', 'path to a file', 'lolol')\r\n      end, 'Callback argument must be a function')",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function()\r\n        cli:argument('PATH', '...')\r\n      end",
    "type": "function"
  }, {
    "id": 33,
    "text": "cli:argument('PATH', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function()\r\n      cli:argument('PATH', 'path to a file')\r\n\r\n      assert.error_matches(function()\r\n        cli:argument('PATH', '...')\r\n      end, 'Duplicate argument')\r\n    end",
    "type": "function"
  }, {
    "id": 36,
    "text": "assert.error_matches(function()\r\n        cli:argument('PATH', '...')\r\n      end, 'Duplicate argument')",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function()\r\n    it('works', function()\r\n      assert.has_no_errors(function()\r\n        cli:argument('PATH', 'path to a file')\r\n      end)\r\n    end)\r\n\r\n    it('requires a key', function()\r\n      assert.error_matches(function()\r\n        cli:argument()\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('requires a description', function()\r\n      assert.error_matches(function()\r\n        cli:argument('PATH')\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('rejects a bad callback', function()\r\n      assert.error_matches(function()\r\n        cli:argument('PATH', 'path to a file', 'lolol')\r\n      end, 'Callback argument must be a function')\r\n    end)\r\n\r\n    it('rejects duplicate arguments', function()\r\n      cli:argument('PATH', 'path to a file')\r\n\r\n      assert.error_matches(function()\r\n        cli:argument('PATH', '...')\r\n      end, 'Duplicate argument')\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 39,
    "text": "it('works', function()\r\n      assert.has_no_errors(function()\r\n        cli:argument('PATH', 'path to a file')\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "it('requires a key', function()\r\n      assert.error_matches(function()\r\n        cli:argument()\r\n      end, 'Key and description are mandatory arguments')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "it('requires a description', function()\r\n      assert.error_matches(function()\r\n        cli:argument('PATH')\r\n      end, 'Key and description are mandatory arguments')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "it('rejects a bad callback', function()\r\n      assert.error_matches(function()\r\n        cli:argument('PATH', 'path to a file', 'lolol')\r\n      end, 'Callback argument must be a function')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "it('rejects duplicate arguments', function()\r\n      cli:argument('PATH', 'path to a file')\r\n\r\n      assert.error_matches(function()\r\n        cli:argument('PATH', '...')\r\n      end, 'Duplicate argument')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function()\r\n      cli:argument('PATH', 'path to a file')\r\n\r\n      local args = helpers.parse(cli, '/some/where')\r\n\r\n      assert.equal(args.PATH, '/some/where')\r\n    end",
    "type": "function"
  }, {
    "id": 46,
    "text": "local args = helpers.parse(cli, '/some/where')",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "assert.equal(args.PATH, '/some/where')",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n      cli:argument('OUTPUT', 'path to the output file')\r\n\r\n      local args = helpers.parse(cli, '/some/where /some/where/else')\r\n\r\n      assert.equal(args.INPUT, '/some/where')\r\n      assert.equal(args.OUTPUT, '/some/where/else')\r\n    end",
    "type": "function"
  }, {
    "id": 50,
    "text": "cli:argument('INPUT', 'path to the input file')",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "cli:argument('OUTPUT', 'path to the output file')",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "local args = helpers.parse(cli, '/some/where /some/where/else')",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "assert.equal(args.INPUT, '/some/where')",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "assert.equal(args.OUTPUT, '/some/where/else')",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n      cli:argument('OUTPUT', 'path to the output file')\r\n\r\n      local _, err = helpers.parse(cli, '/some/where')\r\n      assert.matches('bad number of arguments', err)\r\n    end",
    "type": "function"
  }, {
    "id": 57,
    "text": "local _, err = helpers.parse(cli, '/some/where')",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "assert.matches('bad number of arguments', err)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n\r\n      local _, err = helpers.parse(cli, 'foo bar')\r\n\r\n      assert.matches('bad number of arguments', err)\r\n    end",
    "type": "function"
  }, {
    "id": 61,
    "text": "local _, err = helpers.parse(cli, 'foo bar')",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function()\r\n    it('works with a single argument', function()\r\n      cli:argument('PATH', 'path to a file')\r\n\r\n      local args = helpers.parse(cli, '/some/where')\r\n\r\n      assert.equal(args.PATH, '/some/where')\r\n    end)\r\n\r\n    it('works with multiple arguments', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n      cli:argument('OUTPUT', 'path to the output file')\r\n\r\n      local args = helpers.parse(cli, '/some/where /some/where/else')\r\n\r\n      assert.equal(args.INPUT, '/some/where')\r\n      assert.equal(args.OUTPUT, '/some/where/else')\r\n    end)\r\n\r\n    it('bails on missing arguments', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n      cli:argument('OUTPUT', 'path to the output file')\r\n\r\n      local _, err = helpers.parse(cli, '/some/where')\r\n      assert.matches('bad number of arguments', err)\r\n    end)\r\n\r\n    it('bails on too many arguments', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n\r\n      local _, err = helpers.parse(cli, 'foo bar')\r\n\r\n      assert.matches('bad number of arguments', err)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 64,
    "text": "it('works with a single argument', function()\r\n      cli:argument('PATH', 'path to a file')\r\n\r\n      local args = helpers.parse(cli, '/some/where')\r\n\r\n      assert.equal(args.PATH, '/some/where')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "it('works with multiple arguments', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n      cli:argument('OUTPUT', 'path to the output file')\r\n\r\n      local args = helpers.parse(cli, '/some/where /some/where/else')\r\n\r\n      assert.equal(args.INPUT, '/some/where')\r\n      assert.equal(args.OUTPUT, '/some/where/else')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "it('bails on missing arguments', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n      cli:argument('OUTPUT', 'path to the output file')\r\n\r\n      local _, err = helpers.parse(cli, '/some/where')\r\n      assert.matches('bad number of arguments', err)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "it('bails on too many arguments', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n\r\n      local _, err = helpers.parse(cli, 'foo bar')\r\n\r\n      assert.matches('bad number of arguments', err)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function()\r\n      call_args = {}\r\n    end",
    "type": "function"
  }, {
    "id": 70,
    "text": "call_args = {}",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function()\r\n        cli:argument('PATH', 'path to a file', capture)\r\n      end",
    "type": "function"
  }, {
    "id": 73,
    "text": "cli:argument('PATH', 'path to a file', capture)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function()\r\n        helpers.parse(cli, '/some/where')\r\n\r\n        assert.equal(call_args[1][1], 'PATH')\r\n        assert.equal(call_args[1][2], '/some/where')\r\n        assert.equal(call_args[1][3], nil)\r\n      end",
    "type": "function"
  }, {
    "id": 76,
    "text": "helpers.parse(cli, '/some/where')",
    "type": "statement:functioncall"
  }, {
    "id": 77,
    "text": "assert.equal(call_args[1][1], 'PATH')",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "assert.equal(call_args[1][2], '/some/where')",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "assert.equal(call_args[1][3], nil)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function()\r\n      before_each(function()\r\n        cli:argument('PATH', 'path to a file', capture)\r\n      end)\r\n\r\n      it('invokes the callback when the argument is parsed', function()\r\n        helpers.parse(cli, '/some/where')\r\n\r\n        assert.equal(call_args[1][1], 'PATH')\r\n        assert.equal(call_args[1][2], '/some/where')\r\n        assert.equal(call_args[1][3], nil)\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 82,
    "text": "before_each(function()\r\n        cli:argument('PATH', 'path to a file', capture)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "it('invokes the callback when the argument is parsed', function()\r\n        helpers.parse(cli, '/some/where')\r\n\r\n        assert.equal(call_args[1][1], 'PATH')\r\n        assert.equal(call_args[1][2], '/some/where')\r\n        assert.equal(call_args[1][3], nil)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function()\r\n        cli:argument('INPUT', '...', capture)\r\n        cli:argument('OUTPUT', '...', capture)\r\n      end",
    "type": "function"
  }, {
    "id": 86,
    "text": "cli:argument('INPUT', '...', capture)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "cli:argument('OUTPUT', '...', capture)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function()\r\n        helpers.parse(cli, '/some/where /some/where/else')\r\n\r\n        assert.equal(call_args[1][1], 'INPUT')\r\n        assert.equal(call_args[1][2], '/some/where')\r\n        assert.equal(call_args[2][1], 'OUTPUT')\r\n        assert.equal(call_args[2][2], '/some/where/else')\r\n      end",
    "type": "function"
  }, {
    "id": 90,
    "text": "helpers.parse(cli, '/some/where /some/where/else')",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "assert.equal(call_args[1][1], 'INPUT')",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "assert.equal(call_args[2][1], 'OUTPUT')",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "assert.equal(call_args[2][2], '/some/where/else')",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "function()\r\n      before_each(function()\r\n        cli:argument('INPUT', '...', capture)\r\n        cli:argument('OUTPUT', '...', capture)\r\n      end)\r\n\r\n      it('invokes the callback for each argument parsed', function()\r\n        helpers.parse(cli, '/some/where /some/where/else')\r\n\r\n        assert.equal(call_args[1][1], 'INPUT')\r\n        assert.equal(call_args[1][2], '/some/where')\r\n        assert.equal(call_args[2][1], 'OUTPUT')\r\n        assert.equal(call_args[2][2], '/some/where/else')\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 96,
    "text": "before_each(function()\r\n        cli:argument('INPUT', '...', capture)\r\n        cli:argument('OUTPUT', '...', capture)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "it('invokes the callback for each argument parsed', function()\r\n        helpers.parse(cli, '/some/where /some/where/else')\r\n\r\n        assert.equal(call_args[1][1], 'INPUT')\r\n        assert.equal(call_args[1][2], '/some/where')\r\n        assert.equal(call_args[2][1], 'OUTPUT')\r\n        assert.equal(call_args[2][2], '/some/where/else')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function()\r\n    local call_args\r\n    local function capture(key, value, altkey)\r\n      table.insert(call_args, { key, value, altkey })\r\n    end\r\n\r\n    before_each(function()\r\n      call_args = {}\r\n    end)\r\n\r\n    context('given a single argument', function()\r\n      before_each(function()\r\n        cli:argument('PATH', 'path to a file', capture)\r\n      end)\r\n\r\n      it('invokes the callback when the argument is parsed', function()\r\n        helpers.parse(cli, '/some/where')\r\n\r\n        assert.equal(call_args[1][1], 'PATH')\r\n        assert.equal(call_args[1][2], '/some/where')\r\n        assert.equal(call_args[1][3], nil)\r\n      end)\r\n    end)\r\n\r\n    context('given multiple arguments', function()\r\n      before_each(function()\r\n        cli:argument('INPUT', '...', capture)\r\n        cli:argument('OUTPUT', '...', capture)\r\n      end)\r\n\r\n      it('invokes the callback for each argument parsed', function()\r\n        helpers.parse(cli, '/some/where /some/where/else')\r\n\r\n        assert.equal(call_args[1][1], 'INPUT')\r\n        assert.equal(call_args[1][2], '/some/where')\r\n        assert.equal(call_args[2][1], 'OUTPUT')\r\n        assert.equal(call_args[2][2], '/some/where/else')\r\n      end)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 100,
    "text": "local call_args",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "before_each(function()\r\n      call_args = {}\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "context('given a single argument', function()\r\n      before_each(function()\r\n        cli:argument('PATH', 'path to a file', capture)\r\n      end)\r\n\r\n      it('invokes the callback when the argument is parsed', function()\r\n        helpers.parse(cli, '/some/where')\r\n\r\n        assert.equal(call_args[1][1], 'PATH')\r\n        assert.equal(call_args[1][2], '/some/where')\r\n        assert.equal(call_args[1][3], nil)\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "context('given multiple arguments', function()\r\n      before_each(function()\r\n        cli:argument('INPUT', '...', capture)\r\n        cli:argument('OUTPUT', '...', capture)\r\n      end)\r\n\r\n      it('invokes the callback for each argument parsed', function()\r\n        helpers.parse(cli, '/some/where /some/where/else')\r\n\r\n        assert.equal(call_args[1][1], 'INPUT')\r\n        assert.equal(call_args[1][2], '/some/where')\r\n        assert.equal(call_args[2][1], 'OUTPUT')\r\n        assert.equal(call_args[2][2], '/some/where/else')\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function()\r\n  local cli\r\n\r\n  before_each(function()\r\n    cli = require(\"cliargs.core\")()\r\n  end)\r\n\r\n  describe('defining arguments', function()\r\n    it('works', function()\r\n      assert.has_no_errors(function()\r\n        cli:argument('PATH', 'path to a file')\r\n      end)\r\n    end)\r\n\r\n    it('requires a key', function()\r\n      assert.error_matches(function()\r\n        cli:argument()\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('requires a description', function()\r\n      assert.error_matches(function()\r\n        cli:argument('PATH')\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('rejects a bad callback', function()\r\n      assert.error_matches(function()\r\n        cli:argument('PATH', 'path to a file', 'lolol')\r\n      end, 'Callback argument must be a function')\r\n    end)\r\n\r\n    it('rejects duplicate arguments', function()\r\n      cli:argument('PATH', 'path to a file')\r\n\r\n      assert.error_matches(function()\r\n        cli:argument('PATH', '...')\r\n      end, 'Duplicate argument')\r\n    end)\r\n  end)\r\n\r\n  describe('parsing arguments', function()\r\n    it('works with a single argument', function()\r\n      cli:argument('PATH', 'path to a file')\r\n\r\n      local args = helpers.parse(cli, '/some/where')\r\n\r\n      assert.equal(args.PATH, '/some/where')\r\n    end)\r\n\r\n    it('works with multiple arguments', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n      cli:argument('OUTPUT', 'path to the output file')\r\n\r\n      local args = helpers.parse(cli, '/some/where /some/where/else')\r\n\r\n      assert.equal(args.INPUT, '/some/where')\r\n      assert.equal(args.OUTPUT, '/some/where/else')\r\n    end)\r\n\r\n    it('bails on missing arguments', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n      cli:argument('OUTPUT', 'path to the output file')\r\n\r\n      local _, err = helpers.parse(cli, '/some/where')\r\n      assert.matches('bad number of arguments', err)\r\n    end)\r\n\r\n    it('bails on too many arguments', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n\r\n      local _, err = helpers.parse(cli, 'foo bar')\r\n\r\n      assert.matches('bad number of arguments', err)\r\n    end)\r\n  end)\r\n\r\n  describe('@callback', function()\r\n    local call_args\r\n    local function capture(key, value, altkey)\r\n      table.insert(call_args, { key, value, altkey })\r\n    end\r\n\r\n    before_each(function()\r\n      call_args = {}\r\n    end)\r\n\r\n    context('given a single argument', function()\r\n      before_each(function()\r\n        cli:argument('PATH', 'path to a file', capture)\r\n      end)\r\n\r\n      it('invokes the callback when the argument is parsed', function()\r\n        helpers.parse(cli, '/some/where')\r\n\r\n        assert.equal(call_args[1][1], 'PATH')\r\n        assert.equal(call_args[1][2], '/some/where')\r\n        assert.equal(call_args[1][3], nil)\r\n      end)\r\n    end)\r\n\r\n    context('given multiple arguments', function()\r\n      before_each(function()\r\n        cli:argument('INPUT', '...', capture)\r\n        cli:argument('OUTPUT', '...', capture)\r\n      end)\r\n\r\n      it('invokes the callback for each argument parsed', function()\r\n        helpers.parse(cli, '/some/where /some/where/else')\r\n\r\n        assert.equal(call_args[1][1], 'INPUT')\r\n        assert.equal(call_args[1][2], '/some/where')\r\n        assert.equal(call_args[2][1], 'OUTPUT')\r\n        assert.equal(call_args[2][2], '/some/where/else')\r\n      end)\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "local cli",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "before_each(function()\r\n    cli = require(\"cliargs.core\")()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "describe('defining arguments', function()\r\n    it('works', function()\r\n      assert.has_no_errors(function()\r\n        cli:argument('PATH', 'path to a file')\r\n      end)\r\n    end)\r\n\r\n    it('requires a key', function()\r\n      assert.error_matches(function()\r\n        cli:argument()\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('requires a description', function()\r\n      assert.error_matches(function()\r\n        cli:argument('PATH')\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('rejects a bad callback', function()\r\n      assert.error_matches(function()\r\n        cli:argument('PATH', 'path to a file', 'lolol')\r\n      end, 'Callback argument must be a function')\r\n    end)\r\n\r\n    it('rejects duplicate arguments', function()\r\n      cli:argument('PATH', 'path to a file')\r\n\r\n      assert.error_matches(function()\r\n        cli:argument('PATH', '...')\r\n      end, 'Duplicate argument')\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "describe('parsing arguments', function()\r\n    it('works with a single argument', function()\r\n      cli:argument('PATH', 'path to a file')\r\n\r\n      local args = helpers.parse(cli, '/some/where')\r\n\r\n      assert.equal(args.PATH, '/some/where')\r\n    end)\r\n\r\n    it('works with multiple arguments', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n      cli:argument('OUTPUT', 'path to the output file')\r\n\r\n      local args = helpers.parse(cli, '/some/where /some/where/else')\r\n\r\n      assert.equal(args.INPUT, '/some/where')\r\n      assert.equal(args.OUTPUT, '/some/where/else')\r\n    end)\r\n\r\n    it('bails on missing arguments', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n      cli:argument('OUTPUT', 'path to the output file')\r\n\r\n      local _, err = helpers.parse(cli, '/some/where')\r\n      assert.matches('bad number of arguments', err)\r\n    end)\r\n\r\n    it('bails on too many arguments', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n\r\n      local _, err = helpers.parse(cli, 'foo bar')\r\n\r\n      assert.matches('bad number of arguments', err)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "describe('@callback', function()\r\n    local call_args\r\n    local function capture(key, value, altkey)\r\n      table.insert(call_args, { key, value, altkey })\r\n    end\r\n\r\n    before_each(function()\r\n      call_args = {}\r\n    end)\r\n\r\n    context('given a single argument', function()\r\n      before_each(function()\r\n        cli:argument('PATH', 'path to a file', capture)\r\n      end)\r\n\r\n      it('invokes the callback when the argument is parsed', function()\r\n        helpers.parse(cli, '/some/where')\r\n\r\n        assert.equal(call_args[1][1], 'PATH')\r\n        assert.equal(call_args[1][2], '/some/where')\r\n        assert.equal(call_args[1][3], nil)\r\n      end)\r\n    end)\r\n\r\n    context('given multiple arguments', function()\r\n      before_each(function()\r\n        cli:argument('INPUT', '...', capture)\r\n        cli:argument('OUTPUT', '...', capture)\r\n      end)\r\n\r\n      it('invokes the callback for each argument parsed', function()\r\n        helpers.parse(cli, '/some/where /some/where/else')\r\n\r\n        assert.equal(call_args[1][1], 'INPUT')\r\n        assert.equal(call_args[1][2], '/some/where')\r\n        assert.equal(call_args[2][1], 'OUTPUT')\r\n        assert.equal(call_args[2][2], '/some/where/else')\r\n      end)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "",
    "type": "function container"
  }, {
    "id": 113,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 114,
    "text": "context",
    "type": "global function"
  }, {
    "id": 115,
    "text": "it",
    "type": "global function"
  }, {
    "id": 116,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 117,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 118,
    "text": "has_no_errors",
    "type": "global function"
  }, {
    "id": 119,
    "text": "matches",
    "type": "global function"
  }, {
    "id": 120,
    "text": "require",
    "type": "global function"
  }, {
    "id": 121,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 122,
    "text": "error_matches",
    "type": "global function"
  }, {
    "id": 123,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 124,
    "text": "",
    "type": "global variable"
  }, {
    "id": 125,
    "text": "",
    "type": "variable container"
  }, {
    "id": 126,
    "text": "",
    "type": "require container"
  }, {
    "id": 127,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 128,
    "text": "(spec_helper)",
    "type": "module"
  }, {
    "id": 129,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 130,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 131,
    "text": "",
    "type": "require local variable"
  } ]
}