{
  "_filename": "cliargs_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/lua_cliargs/spec/cliargs_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 4,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 16
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 18,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 19
  }, {
    "from": 29,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 16
  }, {
    "from": 29,
    "label": "has",
    "to": 21
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 24
  }, {
    "from": 30,
    "label": "has",
    "to": 25
  }, {
    "from": 30,
    "label": "has",
    "to": 26
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 35,
    "label": "has",
    "to": 42
  }, {
    "from": 35,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 35,
    "label": "has",
    "to": 45
  }, {
    "from": 35,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 33
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 36
  }, {
    "from": 49,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 49,
    "label": "has",
    "to": 40
  }, {
    "from": 49,
    "label": "has",
    "to": 41
  }, {
    "from": 49,
    "label": "has",
    "to": 42
  }, {
    "from": 49,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 49,
    "label": "has",
    "to": 45
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 5
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 8
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 13
  }, {
    "from": 51,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 19
  }, {
    "from": 29,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 16
  }, {
    "from": 29,
    "label": "has",
    "to": 21
  }, {
    "from": 56,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 24
  }, {
    "from": 30,
    "label": "has",
    "to": 25
  }, {
    "from": 30,
    "label": "has",
    "to": 26
  }, {
    "from": 51,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 33
  }, {
    "from": 57,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 36
  }, {
    "from": 49,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 49,
    "label": "has",
    "to": 40
  }, {
    "from": 49,
    "label": "has",
    "to": 41
  }, {
    "from": 49,
    "label": "has",
    "to": 42
  }, {
    "from": 49,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 49,
    "label": "has",
    "to": 45
  }, {
    "from": 51,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "calls",
    "to": 67
  }, {
    "from": 59,
    "label": "calls",
    "to": 67
  }, {
    "from": 59,
    "label": "calls",
    "to": 70
  }, {
    "from": 59,
    "label": "calls",
    "to": 64
  }, {
    "from": 59,
    "label": "calls",
    "to": 64
  }, {
    "from": 59,
    "label": "calls",
    "to": 64
  }, {
    "from": 59,
    "label": "calls",
    "to": 64
  }, {
    "from": 59,
    "label": "calls",
    "to": 62
  }, {
    "from": 59,
    "label": "calls",
    "to": 62
  }, {
    "from": 59,
    "label": "calls",
    "to": 62
  }, {
    "from": 59,
    "label": "calls",
    "to": 62
  }, {
    "from": 59,
    "label": "calls",
    "to": 62
  }, {
    "from": 59,
    "label": "calls",
    "to": 62
  }, {
    "from": 59,
    "label": "calls",
    "to": 60
  }, {
    "from": 59,
    "label": "calls",
    "to": 71
  }, {
    "from": 59,
    "label": "calls",
    "to": 72
  }, {
    "from": 59,
    "label": "calls",
    "to": 72
  }, {
    "from": 59,
    "label": "calls",
    "to": 72
  }, {
    "from": 59,
    "label": "calls",
    "to": 61
  }, {
    "from": 59,
    "label": "calls",
    "to": 63
  }, {
    "from": 59,
    "label": "calls",
    "to": 63
  }, {
    "from": 59,
    "label": "calls",
    "to": 63
  }, {
    "from": 59,
    "label": "calls",
    "to": 63
  }, {
    "from": 59,
    "label": "calls",
    "to": 68
  }, {
    "from": 59,
    "label": "calls",
    "to": 69
  }, {
    "from": 59,
    "label": "calls",
    "to": 69
  }, {
    "from": 59,
    "label": "calls",
    "to": 69
  }, {
    "from": 59,
    "label": "calls",
    "to": 65
  }, {
    "from": 59,
    "label": "calls",
    "to": 65
  }, {
    "from": 59,
    "label": "calls",
    "to": 65
  }, {
    "from": 59,
    "label": "calls",
    "to": 66
  }, {
    "from": 1,
    "label": "contains",
    "to": 59
  }, {
    "from": 59,
    "label": "declares",
    "to": 4
  }, {
    "from": 59,
    "label": "declares",
    "to": 7
  }, {
    "from": 59,
    "label": "declares",
    "to": 10
  }, {
    "from": 59,
    "label": "declares",
    "to": 12
  }, {
    "from": 59,
    "label": "declares",
    "to": 15
  }, {
    "from": 59,
    "label": "declares",
    "to": 18
  }, {
    "from": 59,
    "label": "declares",
    "to": 23
  }, {
    "from": 59,
    "label": "declares",
    "to": 28
  }, {
    "from": 59,
    "label": "declares",
    "to": 32
  }, {
    "from": 59,
    "label": "declares",
    "to": 35
  }, {
    "from": 59,
    "label": "declares",
    "to": 47
  }, {
    "from": 59,
    "label": "declares",
    "to": 51
  }, {
    "from": 1,
    "label": "contains",
    "to": 73
  }, {
    "from": 1,
    "label": "contains",
    "to": 74
  }, {
    "from": 74,
    "label": "initializes",
    "to": 75
  }, {
    "from": 75,
    "label": "requires",
    "to": 3
  }, {
    "from": 74,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "requires",
    "to": 2
  }, {
    "from": 77,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "requires",
    "to": 2
  }, {
    "from": 79,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "requires",
    "to": 78
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 15
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 15
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 18
  }, {
    "from": 30,
    "label": "hasArgument",
    "to": 23
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 32
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 35
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 10
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 15
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 18
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 23
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 32
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 35
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 47
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "cliargs_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "spec_helper",
    "type": "module"
  }, {
    "id": 3,
    "text": "cliargs",
    "type": "module"
  }, {
    "id": 4,
    "text": "function()\r\n    cliargs:flag('--foo', '...')\r\n  end",
    "type": "function"
  }, {
    "id": 5,
    "text": "cliargs:flag('--foo', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function()\r\n    cliargs = require 'cliargs'\r\n  end",
    "type": "function"
  }, {
    "id": 8,
    "text": "cliargs = require 'cliargs'",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function()\r\n  end",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function()\r\n    assert.equal(type(cliargs), 'table')\r\n  end",
    "type": "function"
  }, {
    "id": 13,
    "text": "assert.equal(type(cliargs), 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function()\r\n        args = cliargs:parse({})\r\n      end",
    "type": "function"
  }, {
    "id": 16,
    "text": "args = cliargs:parse({})",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function()\r\n      local args\r\n\r\n      assert.has_no_errors(function()\r\n        args = cliargs:parse({})\r\n      end)\r\n\r\n      assert.equal(type(args), 'table')\r\n    end",
    "type": "function"
  }, {
    "id": 19,
    "text": "local args",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "assert.has_no_errors(function()\r\n        args = cliargs:parse({})\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert.equal(type(args), 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function()\r\n      local args, err = cliargs:parse({ '--bar' }, true)\r\n\r\n      assert.equal(type(err), 'string')\r\n      assert.is_nil(args)\r\n    end",
    "type": "function"
  }, {
    "id": 24,
    "text": "local args, err = cliargs:parse({ '--bar' }, true)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "assert.equal(type(err), 'string')",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "assert.is_nil(args)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function()\r\n    it('works', function()\r\n      local args\r\n\r\n      assert.has_no_errors(function()\r\n        args = cliargs:parse({})\r\n      end)\r\n\r\n      assert.equal(type(args), 'table')\r\n    end)\r\n\r\n    it('propagates errors', function()\r\n      local args, err = cliargs:parse({ '--bar' }, true)\r\n\r\n      assert.equal(type(err), 'string')\r\n      assert.is_nil(args)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 29,
    "text": "it('works', function()\r\n      local args\r\n\r\n      assert.has_no_errors(function()\r\n        args = cliargs:parse({})\r\n      end)\r\n\r\n      assert.equal(type(args), 'table')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "it('propagates errors', function()\r\n      local args, err = cliargs:parse({ '--bar' }, true)\r\n\r\n      assert.equal(type(err), 'string')\r\n      assert.is_nil(args)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function()\r\n      assert.equal(type(cliargs.cleanup), 'function')\r\n    end",
    "type": "function"
  }, {
    "id": 33,
    "text": "assert.equal(type(cliargs.cleanup), 'function')",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function()\r\n      local modules = {}\r\n\r\n      for k, _ in pairs(package.loaded) do\r\n        if k:match('cliargs') then\r\n          table.insert(modules, k)\r\n        end\r\n      end\r\n\r\n      assert.is_not_equal(#modules, 0)\r\n      assert.is_not_nil(package.loaded['cliargs'])\r\n\r\n      cliargs:cleanup()\r\n\r\n      for k, _ in pairs(modules) do\r\n        assert.is_nil(package.loaded[k])\r\n      end\r\n\r\n      assert.is_nil(package.loaded['cliargs'])\r\n    end",
    "type": "function"
  }, {
    "id": 36,
    "text": "local modules = {}",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "for k, _ in pairs(package.loaded) do\r\n        if k:match('cliargs') then\r\n          table.insert(modules, k)\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 38,
    "text": "if k:match('cliargs') then\r\n          table.insert(modules, k)\r\n        end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "table.insert(modules, k)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "assert.is_not_equal(#modules, 0)",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "assert.is_not_nil(package.loaded['cliargs'])",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "cliargs:cleanup()",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "for k, _ in pairs(modules) do\r\n        assert.is_nil(package.loaded[k])\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 44,
    "text": "assert.is_nil(package.loaded[k])",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert.is_nil(package.loaded['cliargs'])",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function()\r\n\r\n    it('exposes a cleanup routine', function()\r\n      assert.equal(type(cliargs.cleanup), 'function')\r\n    end)\r\n\r\n    it('actually cleans up', function()\r\n      local modules = {}\r\n\r\n      for k, _ in pairs(package.loaded) do\r\n        if k:match('cliargs') then\r\n          table.insert(modules, k)\r\n        end\r\n      end\r\n\r\n      assert.is_not_equal(#modules, 0)\r\n      assert.is_not_nil(package.loaded['cliargs'])\r\n\r\n      cliargs:cleanup()\r\n\r\n      for k, _ in pairs(modules) do\r\n        assert.is_nil(package.loaded[k])\r\n      end\r\n\r\n      assert.is_nil(package.loaded['cliargs'])\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 48,
    "text": "it('exposes a cleanup routine', function()\r\n      assert.equal(type(cliargs.cleanup), 'function')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "it('actually cleans up', function()\r\n      local modules = {}\r\n\r\n      for k, _ in pairs(package.loaded) do\r\n        if k:match('cliargs') then\r\n          table.insert(modules, k)\r\n        end\r\n      end\r\n\r\n      assert.is_not_equal(#modules, 0)\r\n      assert.is_not_nil(package.loaded['cliargs'])\r\n\r\n      cliargs:cleanup()\r\n\r\n      for k, _ in pairs(modules) do\r\n        assert.is_nil(package.loaded[k])\r\n      end\r\n\r\n      assert.is_nil(package.loaded['cliargs'])\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function()\r\n  setup(function()\r\n    cliargs:flag('--foo', '...')\r\n  end)\r\n\r\n  after_each(function()\r\n    cliargs = require 'cliargs'\r\n  end)\r\n\r\n  it('does not blow up!', function()\r\n  end)\r\n\r\n  it('yields a default core instance', function()\r\n    assert.equal(type(cliargs), 'table')\r\n  end)\r\n\r\n  describe('#parse', function()\r\n    it('works', function()\r\n      local args\r\n\r\n      assert.has_no_errors(function()\r\n        args = cliargs:parse({})\r\n      end)\r\n\r\n      assert.equal(type(args), 'table')\r\n    end)\r\n\r\n    it('propagates errors', function()\r\n      local args, err = cliargs:parse({ '--bar' }, true)\r\n\r\n      assert.equal(type(err), 'string')\r\n      assert.is_nil(args)\r\n    end)\r\n  end)\r\n\r\n  describe('#cleanup', function()\r\n\r\n    it('exposes a cleanup routine', function()\r\n      assert.equal(type(cliargs.cleanup), 'function')\r\n    end)\r\n\r\n    it('actually cleans up', function()\r\n      local modules = {}\r\n\r\n      for k, _ in pairs(package.loaded) do\r\n        if k:match('cliargs') then\r\n          table.insert(modules, k)\r\n        end\r\n      end\r\n\r\n      assert.is_not_equal(#modules, 0)\r\n      assert.is_not_nil(package.loaded['cliargs'])\r\n\r\n      cliargs:cleanup()\r\n\r\n      for k, _ in pairs(modules) do\r\n        assert.is_nil(package.loaded[k])\r\n      end\r\n\r\n      assert.is_nil(package.loaded['cliargs'])\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "setup(function()\r\n    cliargs:flag('--foo', '...')\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "after_each(function()\r\n    cliargs = require 'cliargs'\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "it('does not blow up!', function()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "it('yields a default core instance', function()\r\n    assert.equal(type(cliargs), 'table')\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "describe('#parse', function()\r\n    it('works', function()\r\n      local args\r\n\r\n      assert.has_no_errors(function()\r\n        args = cliargs:parse({})\r\n      end)\r\n\r\n      assert.equal(type(args), 'table')\r\n    end)\r\n\r\n    it('propagates errors', function()\r\n      local args, err = cliargs:parse({ '--bar' }, true)\r\n\r\n      assert.equal(type(err), 'string')\r\n      assert.is_nil(args)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "describe('#cleanup', function()\r\n\r\n    it('exposes a cleanup routine', function()\r\n      assert.equal(type(cliargs.cleanup), 'function')\r\n    end)\r\n\r\n    it('actually cleans up', function()\r\n      local modules = {}\r\n\r\n      for k, _ in pairs(package.loaded) do\r\n        if k:match('cliargs') then\r\n          table.insert(modules, k)\r\n        end\r\n      end\r\n\r\n      assert.is_not_equal(#modules, 0)\r\n      assert.is_not_nil(package.loaded['cliargs'])\r\n\r\n      cliargs:cleanup()\r\n\r\n      for k, _ in pairs(modules) do\r\n        assert.is_nil(package.loaded[k])\r\n      end\r\n\r\n      assert.is_nil(package.loaded['cliargs'])\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "",
    "type": "function container"
  }, {
    "id": 60,
    "text": "setup",
    "type": "global function"
  }, {
    "id": 61,
    "text": "is_not_nil",
    "type": "global function"
  }, {
    "id": 62,
    "text": "it",
    "type": "global function"
  }, {
    "id": 63,
    "text": "type",
    "type": "global function"
  }, {
    "id": 64,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 65,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 66,
    "text": "has_no_errors",
    "type": "global function"
  }, {
    "id": 67,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 68,
    "text": "after_each",
    "type": "global function"
  }, {
    "id": 69,
    "text": "require",
    "type": "global function"
  }, {
    "id": 70,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 71,
    "text": "is_not_equal",
    "type": "global function"
  }, {
    "id": 72,
    "text": "is_nil",
    "type": "global function"
  }, {
    "id": 73,
    "text": "",
    "type": "variable container"
  }, {
    "id": 74,
    "text": "",
    "type": "require container"
  }, {
    "id": 75,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 76,
    "text": "",
    "type": "global variable"
  }, {
    "id": 77,
    "text": "",
    "type": "require container"
  }, {
    "id": 78,
    "text": "(spec_helper)",
    "type": "module"
  }, {
    "id": 79,
    "text": "",
    "type": "require container"
  } ]
}