{
  "_filename": "cliargs_parsing_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/lua_cliargs/spec/cliargs_parsing_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 17,
    "label": "has",
    "to": 23
  }, {
    "from": 17,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 30,
    "label": "has",
    "to": 21
  }, {
    "from": 30,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 30,
    "label": "has",
    "to": 38
  }, {
    "from": 30,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 21
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 21
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 2
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 61,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 61,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 15
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 18
  }, {
    "from": 64,
    "label": "has",
    "to": 19
  }, {
    "from": 64,
    "label": "has",
    "to": 20
  }, {
    "from": 64,
    "label": "has",
    "to": 21
  }, {
    "from": 64,
    "label": "has",
    "to": 22
  }, {
    "from": 64,
    "label": "has",
    "to": 23
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 26
  }, {
    "from": 65,
    "label": "has",
    "to": 27
  }, {
    "from": 65,
    "label": "has",
    "to": 28
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 31
  }, {
    "from": 66,
    "label": "has",
    "to": 32
  }, {
    "from": 66,
    "label": "has",
    "to": 33
  }, {
    "from": 66,
    "label": "has",
    "to": 34
  }, {
    "from": 66,
    "label": "has",
    "to": 35
  }, {
    "from": 66,
    "label": "has",
    "to": 21
  }, {
    "from": 66,
    "label": "has",
    "to": 36
  }, {
    "from": 66,
    "label": "has",
    "to": 37
  }, {
    "from": 66,
    "label": "has",
    "to": 38
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 41
  }, {
    "from": 67,
    "label": "has",
    "to": 42
  }, {
    "from": 67,
    "label": "has",
    "to": 43
  }, {
    "from": 67,
    "label": "has",
    "to": 21
  }, {
    "from": 67,
    "label": "has",
    "to": 44
  }, {
    "from": 67,
    "label": "has",
    "to": 45
  }, {
    "from": 61,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 48
  }, {
    "from": 68,
    "label": "has",
    "to": 49
  }, {
    "from": 68,
    "label": "has",
    "to": 50
  }, {
    "from": 68,
    "label": "has",
    "to": 51
  }, {
    "from": 61,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 54
  }, {
    "from": 69,
    "label": "has",
    "to": 55
  }, {
    "from": 69,
    "label": "has",
    "to": 56
  }, {
    "from": 69,
    "label": "has",
    "to": 21
  }, {
    "from": 69,
    "label": "has",
    "to": 57
  }, {
    "from": 69,
    "label": "has",
    "to": 58
  }, {
    "from": 69,
    "label": "has",
    "to": 59
  }, {
    "from": 61,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 71,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 12
  }, {
    "from": 71,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 62
  }, {
    "from": 74,
    "label": "has",
    "to": 2
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 74,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 15
  }, {
    "from": 74,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 18
  }, {
    "from": 64,
    "label": "has",
    "to": 19
  }, {
    "from": 64,
    "label": "has",
    "to": 20
  }, {
    "from": 64,
    "label": "has",
    "to": 21
  }, {
    "from": 64,
    "label": "has",
    "to": 22
  }, {
    "from": 64,
    "label": "has",
    "to": 23
  }, {
    "from": 74,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 26
  }, {
    "from": 65,
    "label": "has",
    "to": 27
  }, {
    "from": 65,
    "label": "has",
    "to": 28
  }, {
    "from": 74,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 31
  }, {
    "from": 66,
    "label": "has",
    "to": 32
  }, {
    "from": 66,
    "label": "has",
    "to": 33
  }, {
    "from": 66,
    "label": "has",
    "to": 34
  }, {
    "from": 66,
    "label": "has",
    "to": 35
  }, {
    "from": 66,
    "label": "has",
    "to": 21
  }, {
    "from": 66,
    "label": "has",
    "to": 36
  }, {
    "from": 66,
    "label": "has",
    "to": 37
  }, {
    "from": 66,
    "label": "has",
    "to": 38
  }, {
    "from": 74,
    "label": "has",
    "to": 67
  }, {
    "from": 67,
    "label": "has",
    "to": 41
  }, {
    "from": 67,
    "label": "has",
    "to": 42
  }, {
    "from": 67,
    "label": "has",
    "to": 43
  }, {
    "from": 67,
    "label": "has",
    "to": 21
  }, {
    "from": 67,
    "label": "has",
    "to": 44
  }, {
    "from": 67,
    "label": "has",
    "to": 45
  }, {
    "from": 74,
    "label": "has",
    "to": 68
  }, {
    "from": 68,
    "label": "has",
    "to": 48
  }, {
    "from": 68,
    "label": "has",
    "to": 49
  }, {
    "from": 68,
    "label": "has",
    "to": 50
  }, {
    "from": 68,
    "label": "has",
    "to": 51
  }, {
    "from": 74,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 54
  }, {
    "from": 69,
    "label": "has",
    "to": 55
  }, {
    "from": 69,
    "label": "has",
    "to": 56
  }, {
    "from": 69,
    "label": "has",
    "to": 21
  }, {
    "from": 69,
    "label": "has",
    "to": 57
  }, {
    "from": 69,
    "label": "has",
    "to": 58
  }, {
    "from": 69,
    "label": "has",
    "to": 59
  }, {
    "from": 71,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "calls",
    "to": 78
  }, {
    "from": 76,
    "label": "calls",
    "to": 78
  }, {
    "from": 76,
    "label": "calls",
    "to": 78
  }, {
    "from": 76,
    "label": "calls",
    "to": 78
  }, {
    "from": 76,
    "label": "calls",
    "to": 78
  }, {
    "from": 76,
    "label": "calls",
    "to": 78
  }, {
    "from": 76,
    "label": "calls",
    "to": 78
  }, {
    "from": 76,
    "label": "calls",
    "to": 78
  }, {
    "from": 76,
    "label": "calls",
    "to": 78
  }, {
    "from": 76,
    "label": "calls",
    "to": 78
  }, {
    "from": 76,
    "label": "calls",
    "to": 84
  }, {
    "from": 76,
    "label": "calls",
    "to": 84
  }, {
    "from": 76,
    "label": "calls",
    "to": 84
  }, {
    "from": 76,
    "label": "calls",
    "to": 84
  }, {
    "from": 76,
    "label": "calls",
    "to": 80
  }, {
    "from": 76,
    "label": "calls",
    "to": 80
  }, {
    "from": 76,
    "label": "calls",
    "to": 83
  }, {
    "from": 76,
    "label": "calls",
    "to": 83
  }, {
    "from": 6,
    "label": "calls",
    "to": 82
  }, {
    "from": 76,
    "label": "calls",
    "to": 81
  }, {
    "from": 76,
    "label": "calls",
    "to": 79
  }, {
    "from": 76,
    "label": "calls",
    "to": 79
  }, {
    "from": 76,
    "label": "calls",
    "to": 77
  }, {
    "from": 76,
    "label": "calls",
    "to": 77
  }, {
    "from": 76,
    "label": "calls",
    "to": 77
  }, {
    "from": 76,
    "label": "calls",
    "to": 77
  }, {
    "from": 76,
    "label": "calls",
    "to": 77
  }, {
    "from": 76,
    "label": "calls",
    "to": 77
  }, {
    "from": 1,
    "label": "contains",
    "to": 76
  }, {
    "from": 76,
    "label": "declares",
    "to": 2
  }, {
    "from": 76,
    "label": "declares",
    "to": 6
  }, {
    "from": 76,
    "label": "declares",
    "to": 9
  }, {
    "from": 76,
    "label": "declares",
    "to": 11
  }, {
    "from": 76,
    "label": "declares",
    "to": 14
  }, {
    "from": 76,
    "label": "declares",
    "to": 17
  }, {
    "from": 76,
    "label": "declares",
    "to": 25
  }, {
    "from": 76,
    "label": "declares",
    "to": 30
  }, {
    "from": 76,
    "label": "declares",
    "to": 40
  }, {
    "from": 76,
    "label": "declares",
    "to": 47
  }, {
    "from": 76,
    "label": "declares",
    "to": 53
  }, {
    "from": 76,
    "label": "declares",
    "to": 61
  }, {
    "from": 76,
    "label": "declares",
    "to": 71
  }, {
    "from": 1,
    "label": "contains",
    "to": 85
  }, {
    "from": 1,
    "label": "contains",
    "to": 86
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 25
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 67,
    "label": "hasArgument",
    "to": 40
  }, {
    "from": 68,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 69,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 73,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 25
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 40
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 74,
    "label": "hasArgument",
    "to": 61
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "cliargs_parsing_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function callback(key, value)\r\n      cb.key, cb.value = key, value\r\n      return true\r\n    end",
    "type": "function"
  }, {
    "id": 3,
    "text": "cb.key, cb.value = key, value",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function callback_arg(key, value)\r\n      table.insert(cb, { key = key, value = value })\r\n      return true\r\n    end",
    "type": "function"
  }, {
    "id": 7,
    "text": "table.insert(cb, { key = key, value = value })",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function callback_fail(key)\r\n      return nil, \"bad argument for \" .. key\r\n    end",
    "type": "function"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function()\r\n    cli = require(\"cliargs.core\")()\r\n  end",
    "type": "function"
  }, {
    "id": 12,
    "text": "cli = require(\"cliargs.core\")()",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function()\r\n      cb = {}\r\n    end",
    "type": "function"
  }, {
    "id": 15,
    "text": "cb = {}",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function()\r\n      cli:argument(\"ARG\", \"arg description\", callback)\r\n      local expected = { ARG = \"arg_val\" }\r\n      local result = cli:parse({ \"arg_val\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.equal(\"ARG\", cb.key)\r\n      assert.are.equal(\"arg_val\", cb.value)\r\n    end",
    "type": "function"
  }, {
    "id": 18,
    "text": "cli:argument(\"ARG\", \"arg description\", callback)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local expected = { ARG = \"arg_val\" }",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local result = cli:parse({ \"arg_val\" })",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "assert.are.same(expected, result)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert.are.equal(\"ARG\", cb.key)",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert.are.equal(\"arg_val\", cb.value)",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function()\r\n      cli:argument(\"ARG\", \"arg description\", callback_fail)\r\n\r\n      local _, err = cli:parse({ \"arg_val\" })\r\n      assert.matches('bad argument for ARG', err)\r\n    end",
    "type": "function"
  }, {
    "id": 26,
    "text": "cli:argument(\"ARG\", \"arg description\", callback_fail)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "local _, err = cli:parse({ \"arg_val\" })",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "assert.matches('bad argument for ARG', err)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function()\r\n      cli:argument(\"ARG1\", \"arg1 description\", callback_arg)\r\n      cli:argument(\"ARG2\", \"arg2 description\", callback_arg)\r\n      cli:argument(\"ARG3\", \"arg3 description\", callback_arg)\r\n      local expected = { ARG1 = \"arg1_val\", ARG2 = \"arg2_val\", ARG3 = \"arg3_val\" }\r\n      local result = cli:parse({ \"arg1_val\", \"arg2_val\", \"arg3_val\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.same({ key = \"ARG1\", value = \"arg1_val\"}, cb[1])\r\n      assert.are.same({ key = \"ARG2\", value = \"arg2_val\"}, cb[2])\r\n      assert.are.same({ key = \"ARG3\", value = \"arg3_val\"}, cb[3])\r\n    end",
    "type": "function"
  }, {
    "id": 31,
    "text": "cli:argument(\"ARG1\", \"arg1 description\", callback_arg)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "cli:argument(\"ARG2\", \"arg2 description\", callback_arg)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "cli:argument(\"ARG3\", \"arg3 description\", callback_arg)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "local expected = { ARG1 = \"arg1_val\", ARG2 = \"arg2_val\", ARG3 = \"arg3_val\" }",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "local result = cli:parse({ \"arg1_val\", \"arg2_val\", \"arg3_val\" })",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "assert.are.same({ key = \"ARG1\", value = \"arg1_val\"}, cb[1])",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "assert.are.same({ key = \"ARG2\", value = \"arg2_val\"}, cb[2])",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert.are.same({ key = \"ARG3\", value = \"arg3_val\"}, cb[3])",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function()\r\n      cli:splat(\"OPTARG\", \"optional arg description\", nil, 1, callback)\r\n      local expected = { OPTARG = \"opt_arg\" }\r\n      local result = cli:parse({ \"opt_arg\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.equal(\"OPTARG\", cb.key)\r\n      assert.are.equal(\"opt_arg\", cb.value)\r\n    end",
    "type": "function"
  }, {
    "id": 41,
    "text": "cli:splat(\"OPTARG\", \"optional arg description\", nil, 1, callback)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "local expected = { OPTARG = \"opt_arg\" }",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local result = cli:parse({ \"opt_arg\" })",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "assert.are.equal(\"OPTARG\", cb.key)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "assert.are.equal(\"opt_arg\", cb.value)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function()\r\n      cli:set_name('myapp')\r\n      cli:splat(\"OPTARG\", \"optinoal arg description\", nil, 1, callback_fail)\r\n\r\n      local _, err = cli:parse({ \"opt_arg\" })\r\n      assert.matches('bad argument for OPTARG', err)\r\n    end",
    "type": "function"
  }, {
    "id": 48,
    "text": "cli:set_name('myapp')",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "cli:splat(\"OPTARG\", \"optinoal arg description\", nil, 1, callback_fail)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "local _, err = cli:parse({ \"opt_arg\" })",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "assert.matches('bad argument for OPTARG', err)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function()\r\n      cli:splat(\"OPTARG\", \"optional arg description\", nil, 3, callback_arg)\r\n      local expected = { OPTARG = { \"opt_arg1\", \"opt_arg2\", \"opt_arg3\" } }\r\n      local result = cli:parse({ \"opt_arg1\", \"opt_arg2\", \"opt_arg3\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.same({ key = \"OPTARG\", value = \"opt_arg1\"}, cb[1])\r\n      assert.are.same({ key = \"OPTARG\", value = \"opt_arg2\"}, cb[2])\r\n      assert.are.same({ key = \"OPTARG\", value = \"opt_arg3\"}, cb[3])\r\n    end",
    "type": "function"
  }, {
    "id": 54,
    "text": "cli:splat(\"OPTARG\", \"optional arg description\", nil, 3, callback_arg)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "local expected = { OPTARG = { \"opt_arg1\", \"opt_arg2\", \"opt_arg3\" } }",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "local result = cli:parse({ \"opt_arg1\", \"opt_arg2\", \"opt_arg3\" })",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "assert.are.same({ key = \"OPTARG\", value = \"opt_arg1\"}, cb[1])",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert.are.same({ key = \"OPTARG\", value = \"opt_arg2\"}, cb[2])",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "assert.are.same({ key = \"OPTARG\", value = \"opt_arg3\"}, cb[3])",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function()\r\n    local cb = {}\r\n\r\n    local function callback(key, value)\r\n      cb.key, cb.value = key, value\r\n      return true\r\n    end\r\n\r\n    local function callback_arg(key, value)\r\n      table.insert(cb, { key = key, value = value })\r\n      return true\r\n    end\r\n\r\n    local function callback_fail(key)\r\n      return nil, \"bad argument for \" .. key\r\n    end\r\n\r\n    before_each(function()\r\n      cb = {}\r\n    end)\r\n\r\n    it(\"tests one required argument\", function()\r\n      cli:argument(\"ARG\", \"arg description\", callback)\r\n      local expected = { ARG = \"arg_val\" }\r\n      local result = cli:parse({ \"arg_val\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.equal(\"ARG\", cb.key)\r\n      assert.are.equal(\"arg_val\", cb.value)\r\n    end)\r\n\r\n    it(\"tests required argument callback returning error\", function()\r\n      cli:argument(\"ARG\", \"arg description\", callback_fail)\r\n\r\n      local _, err = cli:parse({ \"arg_val\" })\r\n      assert.matches('bad argument for ARG', err)\r\n    end)\r\n\r\n    it(\"tests many required arguments\", function()\r\n      cli:argument(\"ARG1\", \"arg1 description\", callback_arg)\r\n      cli:argument(\"ARG2\", \"arg2 description\", callback_arg)\r\n      cli:argument(\"ARG3\", \"arg3 description\", callback_arg)\r\n      local expected = { ARG1 = \"arg1_val\", ARG2 = \"arg2_val\", ARG3 = \"arg3_val\" }\r\n      local result = cli:parse({ \"arg1_val\", \"arg2_val\", \"arg3_val\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.same({ key = \"ARG1\", value = \"arg1_val\"}, cb[1])\r\n      assert.are.same({ key = \"ARG2\", value = \"arg2_val\"}, cb[2])\r\n      assert.are.same({ key = \"ARG3\", value = \"arg3_val\"}, cb[3])\r\n    end)\r\n\r\n    it(\"tests one optional argument\", function()\r\n      cli:splat(\"OPTARG\", \"optional arg description\", nil, 1, callback)\r\n      local expected = { OPTARG = \"opt_arg\" }\r\n      local result = cli:parse({ \"opt_arg\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.equal(\"OPTARG\", cb.key)\r\n      assert.are.equal(\"opt_arg\", cb.value)\r\n    end)\r\n\r\n    it(\"tests optional argument callback returning error\", function()\r\n      cli:set_name('myapp')\r\n      cli:splat(\"OPTARG\", \"optinoal arg description\", nil, 1, callback_fail)\r\n\r\n      local _, err = cli:parse({ \"opt_arg\" })\r\n      assert.matches('bad argument for OPTARG', err)\r\n    end)\r\n\r\n    it(\"tests many optional arguments\", function()\r\n      cli:splat(\"OPTARG\", \"optional arg description\", nil, 3, callback_arg)\r\n      local expected = { OPTARG = { \"opt_arg1\", \"opt_arg2\", \"opt_arg3\" } }\r\n      local result = cli:parse({ \"opt_arg1\", \"opt_arg2\", \"opt_arg3\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.same({ key = \"OPTARG\", value = \"opt_arg1\"}, cb[1])\r\n      assert.are.same({ key = \"OPTARG\", value = \"opt_arg2\"}, cb[2])\r\n      assert.are.same({ key = \"OPTARG\", value = \"opt_arg3\"}, cb[3])\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 62,
    "text": "local cb = {}",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "before_each(function()\r\n      cb = {}\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "it(\"tests one required argument\", function()\r\n      cli:argument(\"ARG\", \"arg description\", callback)\r\n      local expected = { ARG = \"arg_val\" }\r\n      local result = cli:parse({ \"arg_val\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.equal(\"ARG\", cb.key)\r\n      assert.are.equal(\"arg_val\", cb.value)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "it(\"tests required argument callback returning error\", function()\r\n      cli:argument(\"ARG\", \"arg description\", callback_fail)\r\n\r\n      local _, err = cli:parse({ \"arg_val\" })\r\n      assert.matches('bad argument for ARG', err)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "it(\"tests many required arguments\", function()\r\n      cli:argument(\"ARG1\", \"arg1 description\", callback_arg)\r\n      cli:argument(\"ARG2\", \"arg2 description\", callback_arg)\r\n      cli:argument(\"ARG3\", \"arg3 description\", callback_arg)\r\n      local expected = { ARG1 = \"arg1_val\", ARG2 = \"arg2_val\", ARG3 = \"arg3_val\" }\r\n      local result = cli:parse({ \"arg1_val\", \"arg2_val\", \"arg3_val\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.same({ key = \"ARG1\", value = \"arg1_val\"}, cb[1])\r\n      assert.are.same({ key = \"ARG2\", value = \"arg2_val\"}, cb[2])\r\n      assert.are.same({ key = \"ARG3\", value = \"arg3_val\"}, cb[3])\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "it(\"tests one optional argument\", function()\r\n      cli:splat(\"OPTARG\", \"optional arg description\", nil, 1, callback)\r\n      local expected = { OPTARG = \"opt_arg\" }\r\n      local result = cli:parse({ \"opt_arg\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.equal(\"OPTARG\", cb.key)\r\n      assert.are.equal(\"opt_arg\", cb.value)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "it(\"tests optional argument callback returning error\", function()\r\n      cli:set_name('myapp')\r\n      cli:splat(\"OPTARG\", \"optinoal arg description\", nil, 1, callback_fail)\r\n\r\n      local _, err = cli:parse({ \"opt_arg\" })\r\n      assert.matches('bad argument for OPTARG', err)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "it(\"tests many optional arguments\", function()\r\n      cli:splat(\"OPTARG\", \"optional arg description\", nil, 3, callback_arg)\r\n      local expected = { OPTARG = { \"opt_arg1\", \"opt_arg2\", \"opt_arg3\" } }\r\n      local result = cli:parse({ \"opt_arg1\", \"opt_arg2\", \"opt_arg3\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.same({ key = \"OPTARG\", value = \"opt_arg1\"}, cb[1])\r\n      assert.are.same({ key = \"OPTARG\", value = \"opt_arg2\"}, cb[2])\r\n      assert.are.same({ key = \"OPTARG\", value = \"opt_arg3\"}, cb[3])\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function()\r\n  local cli\r\n\r\n  before_each(function()\r\n    cli = require(\"cliargs.core\")()\r\n  end)\r\n\r\n  -- TODO, move to feature specs\r\n  describe(\"Tests argument parsing with callback\", function()\r\n    local cb = {}\r\n\r\n    local function callback(key, value)\r\n      cb.key, cb.value = key, value\r\n      return true\r\n    end\r\n\r\n    local function callback_arg(key, value)\r\n      table.insert(cb, { key = key, value = value })\r\n      return true\r\n    end\r\n\r\n    local function callback_fail(key)\r\n      return nil, \"bad argument for \" .. key\r\n    end\r\n\r\n    before_each(function()\r\n      cb = {}\r\n    end)\r\n\r\n    it(\"tests one required argument\", function()\r\n      cli:argument(\"ARG\", \"arg description\", callback)\r\n      local expected = { ARG = \"arg_val\" }\r\n      local result = cli:parse({ \"arg_val\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.equal(\"ARG\", cb.key)\r\n      assert.are.equal(\"arg_val\", cb.value)\r\n    end)\r\n\r\n    it(\"tests required argument callback returning error\", function()\r\n      cli:argument(\"ARG\", \"arg description\", callback_fail)\r\n\r\n      local _, err = cli:parse({ \"arg_val\" })\r\n      assert.matches('bad argument for ARG', err)\r\n    end)\r\n\r\n    it(\"tests many required arguments\", function()\r\n      cli:argument(\"ARG1\", \"arg1 description\", callback_arg)\r\n      cli:argument(\"ARG2\", \"arg2 description\", callback_arg)\r\n      cli:argument(\"ARG3\", \"arg3 description\", callback_arg)\r\n      local expected = { ARG1 = \"arg1_val\", ARG2 = \"arg2_val\", ARG3 = \"arg3_val\" }\r\n      local result = cli:parse({ \"arg1_val\", \"arg2_val\", \"arg3_val\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.same({ key = \"ARG1\", value = \"arg1_val\"}, cb[1])\r\n      assert.are.same({ key = \"ARG2\", value = \"arg2_val\"}, cb[2])\r\n      assert.are.same({ key = \"ARG3\", value = \"arg3_val\"}, cb[3])\r\n    end)\r\n\r\n    it(\"tests one optional argument\", function()\r\n      cli:splat(\"OPTARG\", \"optional arg description\", nil, 1, callback)\r\n      local expected = { OPTARG = \"opt_arg\" }\r\n      local result = cli:parse({ \"opt_arg\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.equal(\"OPTARG\", cb.key)\r\n      assert.are.equal(\"opt_arg\", cb.value)\r\n    end)\r\n\r\n    it(\"tests optional argument callback returning error\", function()\r\n      cli:set_name('myapp')\r\n      cli:splat(\"OPTARG\", \"optinoal arg description\", nil, 1, callback_fail)\r\n\r\n      local _, err = cli:parse({ \"opt_arg\" })\r\n      assert.matches('bad argument for OPTARG', err)\r\n    end)\r\n\r\n    it(\"tests many optional arguments\", function()\r\n      cli:splat(\"OPTARG\", \"optional arg description\", nil, 3, callback_arg)\r\n      local expected = { OPTARG = { \"opt_arg1\", \"opt_arg2\", \"opt_arg3\" } }\r\n      local result = cli:parse({ \"opt_arg1\", \"opt_arg2\", \"opt_arg3\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.same({ key = \"OPTARG\", value = \"opt_arg1\"}, cb[1])\r\n      assert.are.same({ key = \"OPTARG\", value = \"opt_arg2\"}, cb[2])\r\n      assert.are.same({ key = \"OPTARG\", value = \"opt_arg3\"}, cb[3])\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "local cli",
    "type": "statement:localassign"
  }, {
    "id": 73,
    "text": "before_each(function()\r\n    cli = require(\"cliargs.core\")()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "describe(\"Tests argument parsing with callback\", function()\r\n    local cb = {}\r\n\r\n    local function callback(key, value)\r\n      cb.key, cb.value = key, value\r\n      return true\r\n    end\r\n\r\n    local function callback_arg(key, value)\r\n      table.insert(cb, { key = key, value = value })\r\n      return true\r\n    end\r\n\r\n    local function callback_fail(key)\r\n      return nil, \"bad argument for \" .. key\r\n    end\r\n\r\n    before_each(function()\r\n      cb = {}\r\n    end)\r\n\r\n    it(\"tests one required argument\", function()\r\n      cli:argument(\"ARG\", \"arg description\", callback)\r\n      local expected = { ARG = \"arg_val\" }\r\n      local result = cli:parse({ \"arg_val\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.equal(\"ARG\", cb.key)\r\n      assert.are.equal(\"arg_val\", cb.value)\r\n    end)\r\n\r\n    it(\"tests required argument callback returning error\", function()\r\n      cli:argument(\"ARG\", \"arg description\", callback_fail)\r\n\r\n      local _, err = cli:parse({ \"arg_val\" })\r\n      assert.matches('bad argument for ARG', err)\r\n    end)\r\n\r\n    it(\"tests many required arguments\", function()\r\n      cli:argument(\"ARG1\", \"arg1 description\", callback_arg)\r\n      cli:argument(\"ARG2\", \"arg2 description\", callback_arg)\r\n      cli:argument(\"ARG3\", \"arg3 description\", callback_arg)\r\n      local expected = { ARG1 = \"arg1_val\", ARG2 = \"arg2_val\", ARG3 = \"arg3_val\" }\r\n      local result = cli:parse({ \"arg1_val\", \"arg2_val\", \"arg3_val\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.same({ key = \"ARG1\", value = \"arg1_val\"}, cb[1])\r\n      assert.are.same({ key = \"ARG2\", value = \"arg2_val\"}, cb[2])\r\n      assert.are.same({ key = \"ARG3\", value = \"arg3_val\"}, cb[3])\r\n    end)\r\n\r\n    it(\"tests one optional argument\", function()\r\n      cli:splat(\"OPTARG\", \"optional arg description\", nil, 1, callback)\r\n      local expected = { OPTARG = \"opt_arg\" }\r\n      local result = cli:parse({ \"opt_arg\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.equal(\"OPTARG\", cb.key)\r\n      assert.are.equal(\"opt_arg\", cb.value)\r\n    end)\r\n\r\n    it(\"tests optional argument callback returning error\", function()\r\n      cli:set_name('myapp')\r\n      cli:splat(\"OPTARG\", \"optinoal arg description\", nil, 1, callback_fail)\r\n\r\n      local _, err = cli:parse({ \"opt_arg\" })\r\n      assert.matches('bad argument for OPTARG', err)\r\n    end)\r\n\r\n    it(\"tests many optional arguments\", function()\r\n      cli:splat(\"OPTARG\", \"optional arg description\", nil, 3, callback_arg)\r\n      local expected = { OPTARG = { \"opt_arg1\", \"opt_arg2\", \"opt_arg3\" } }\r\n      local result = cli:parse({ \"opt_arg1\", \"opt_arg2\", \"opt_arg3\" })\r\n      assert.are.same(expected, result)\r\n      assert.are.same({ key = \"OPTARG\", value = \"opt_arg1\"}, cb[1])\r\n      assert.are.same({ key = \"OPTARG\", value = \"opt_arg2\"}, cb[2])\r\n      assert.are.same({ key = \"OPTARG\", value = \"opt_arg3\"}, cb[3])\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "",
    "type": "function container"
  }, {
    "id": 77,
    "text": "it",
    "type": "global function"
  }, {
    "id": 78,
    "text": "assert.are.same",
    "type": "global function"
  }, {
    "id": 79,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 80,
    "text": "matches",
    "type": "global function"
  }, {
    "id": 81,
    "text": "require",
    "type": "global function"
  }, {
    "id": 82,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 83,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 84,
    "text": "assert.are.equal",
    "type": "global function"
  }, {
    "id": 85,
    "text": "",
    "type": "variable container"
  }, {
    "id": 86,
    "text": "",
    "type": "require container"
  } ]
}