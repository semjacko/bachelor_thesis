{
  "_filename": "core_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/lua_cliargs/spec/core_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 7
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 10
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 13
  }, {
    "from": 21,
    "label": "has",
    "to": 14
  }, {
    "from": 21,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 14
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 23,
    "label": "has",
    "to": 26
  }, {
    "from": 23,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 31
  }, {
    "from": 34,
    "label": "has",
    "to": 32
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 31
  }, {
    "from": 41,
    "label": "has",
    "to": 32
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 38
  }, {
    "from": 55,
    "label": "has",
    "to": 39
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 31
  }, {
    "from": 56,
    "label": "has",
    "to": 32
  }, {
    "from": 56,
    "label": "has",
    "to": 42
  }, {
    "from": 53,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 45
  }, {
    "from": 53,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 48
  }, {
    "from": 53,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 51
  }, {
    "from": 53,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 18
  }, {
    "from": 62,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 7
  }, {
    "from": 62,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 10
  }, {
    "from": 62,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 13
  }, {
    "from": 21,
    "label": "has",
    "to": 14
  }, {
    "from": 21,
    "label": "has",
    "to": 15
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 24
  }, {
    "from": 63,
    "label": "has",
    "to": 14
  }, {
    "from": 63,
    "label": "has",
    "to": 25
  }, {
    "from": 63,
    "label": "has",
    "to": 26
  }, {
    "from": 63,
    "label": "has",
    "to": 27
  }, {
    "from": 61,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 30
  }, {
    "from": 64,
    "label": "has",
    "to": 31
  }, {
    "from": 64,
    "label": "has",
    "to": 32
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 35
  }, {
    "from": 65,
    "label": "has",
    "to": 31
  }, {
    "from": 65,
    "label": "has",
    "to": 32
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 54
  }, {
    "from": 66,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 38
  }, {
    "from": 55,
    "label": "has",
    "to": 39
  }, {
    "from": 66,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 31
  }, {
    "from": 56,
    "label": "has",
    "to": 32
  }, {
    "from": 56,
    "label": "has",
    "to": 42
  }, {
    "from": 66,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 45
  }, {
    "from": 66,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 48
  }, {
    "from": 66,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 51
  }, {
    "from": 61,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 68,
    "label": "has",
    "to": 75
  }, {
    "from": 68,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 69
  }, {
    "from": 78,
    "label": "has",
    "to": 70
  }, {
    "from": 78,
    "label": "has",
    "to": 71
  }, {
    "from": 78,
    "label": "has",
    "to": 72
  }, {
    "from": 78,
    "label": "has",
    "to": 73
  }, {
    "from": 78,
    "label": "has",
    "to": 74
  }, {
    "from": 78,
    "label": "has",
    "to": 75
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 80,
    "label": "has",
    "to": 83
  }, {
    "from": 80,
    "label": "has",
    "to": 84
  }, {
    "from": 80,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 86,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 92,
    "label": "has",
    "to": 96
  }, {
    "from": 92,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 81
  }, {
    "from": 99,
    "label": "has",
    "to": 82
  }, {
    "from": 99,
    "label": "has",
    "to": 83
  }, {
    "from": 99,
    "label": "has",
    "to": 84
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 87
  }, {
    "from": 100,
    "label": "has",
    "to": 88
  }, {
    "from": 100,
    "label": "has",
    "to": 89
  }, {
    "from": 100,
    "label": "has",
    "to": 90
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 93
  }, {
    "from": 101,
    "label": "has",
    "to": 94
  }, {
    "from": 101,
    "label": "has",
    "to": 95
  }, {
    "from": 101,
    "label": "has",
    "to": 96
  }, {
    "from": 98,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 87
  }, {
    "from": 103,
    "label": "has",
    "to": 93
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 105,
    "label": "has",
    "to": 109
  }, {
    "from": 105,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 107
  }, {
    "from": 111,
    "label": "has",
    "to": 108
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 112
  }, {
    "from": 116,
    "label": "has",
    "to": 107
  }, {
    "from": 116,
    "label": "has",
    "to": 108
  }, {
    "from": 116,
    "label": "has",
    "to": 113
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 118,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 119
  }, {
    "from": 124,
    "label": "has",
    "to": 120
  }, {
    "from": 124,
    "label": "has",
    "to": 121
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 87
  }, {
    "from": 128,
    "label": "has",
    "to": 93
  }, {
    "from": 126,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 106
  }, {
    "from": 129,
    "label": "has",
    "to": 107
  }, {
    "from": 129,
    "label": "has",
    "to": 108
  }, {
    "from": 129,
    "label": "has",
    "to": 109
  }, {
    "from": 126,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 112
  }, {
    "from": 116,
    "label": "has",
    "to": 107
  }, {
    "from": 116,
    "label": "has",
    "to": 108
  }, {
    "from": 116,
    "label": "has",
    "to": 113
  }, {
    "from": 126,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 119
  }, {
    "from": 124,
    "label": "has",
    "to": 120
  }, {
    "from": 124,
    "label": "has",
    "to": 121
  }, {
    "from": 126,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 4
  }, {
    "from": 133,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 18
  }, {
    "from": 62,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 7
  }, {
    "from": 62,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 10
  }, {
    "from": 62,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 13
  }, {
    "from": 21,
    "label": "has",
    "to": 14
  }, {
    "from": 21,
    "label": "has",
    "to": 15
  }, {
    "from": 136,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 24
  }, {
    "from": 63,
    "label": "has",
    "to": 14
  }, {
    "from": 63,
    "label": "has",
    "to": 25
  }, {
    "from": 63,
    "label": "has",
    "to": 26
  }, {
    "from": 63,
    "label": "has",
    "to": 27
  }, {
    "from": 136,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 30
  }, {
    "from": 64,
    "label": "has",
    "to": 31
  }, {
    "from": 64,
    "label": "has",
    "to": 32
  }, {
    "from": 136,
    "label": "has",
    "to": 65
  }, {
    "from": 65,
    "label": "has",
    "to": 35
  }, {
    "from": 65,
    "label": "has",
    "to": 31
  }, {
    "from": 65,
    "label": "has",
    "to": 32
  }, {
    "from": 136,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 54
  }, {
    "from": 66,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 38
  }, {
    "from": 55,
    "label": "has",
    "to": 39
  }, {
    "from": 66,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 31
  }, {
    "from": 56,
    "label": "has",
    "to": 32
  }, {
    "from": 56,
    "label": "has",
    "to": 42
  }, {
    "from": 66,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 45
  }, {
    "from": 66,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 48
  }, {
    "from": 66,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 51
  }, {
    "from": 133,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 69
  }, {
    "from": 78,
    "label": "has",
    "to": 70
  }, {
    "from": 78,
    "label": "has",
    "to": 71
  }, {
    "from": 78,
    "label": "has",
    "to": 72
  }, {
    "from": 78,
    "label": "has",
    "to": 73
  }, {
    "from": 78,
    "label": "has",
    "to": 74
  }, {
    "from": 78,
    "label": "has",
    "to": 75
  }, {
    "from": 133,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 81
  }, {
    "from": 99,
    "label": "has",
    "to": 82
  }, {
    "from": 99,
    "label": "has",
    "to": 83
  }, {
    "from": 99,
    "label": "has",
    "to": 84
  }, {
    "from": 138,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 87
  }, {
    "from": 100,
    "label": "has",
    "to": 88
  }, {
    "from": 100,
    "label": "has",
    "to": 89
  }, {
    "from": 100,
    "label": "has",
    "to": 90
  }, {
    "from": 138,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 93
  }, {
    "from": 101,
    "label": "has",
    "to": 94
  }, {
    "from": 101,
    "label": "has",
    "to": 95
  }, {
    "from": 101,
    "label": "has",
    "to": 96
  }, {
    "from": 133,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 127
  }, {
    "from": 139,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 87
  }, {
    "from": 128,
    "label": "has",
    "to": 93
  }, {
    "from": 139,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 106
  }, {
    "from": 129,
    "label": "has",
    "to": 107
  }, {
    "from": 129,
    "label": "has",
    "to": 108
  }, {
    "from": 129,
    "label": "has",
    "to": 109
  }, {
    "from": 139,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 112
  }, {
    "from": 116,
    "label": "has",
    "to": 107
  }, {
    "from": 116,
    "label": "has",
    "to": 108
  }, {
    "from": 116,
    "label": "has",
    "to": 113
  }, {
    "from": 139,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 119
  }, {
    "from": 124,
    "label": "has",
    "to": 120
  }, {
    "from": 124,
    "label": "has",
    "to": 121
  }, {
    "from": 133,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "calls",
    "to": 150
  }, {
    "from": 141,
    "label": "calls",
    "to": 150
  }, {
    "from": 141,
    "label": "calls",
    "to": 151
  }, {
    "from": 141,
    "label": "calls",
    "to": 145
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 143
  }, {
    "from": 141,
    "label": "calls",
    "to": 143
  }, {
    "from": 141,
    "label": "calls",
    "to": 143
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 142
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 154
  }, {
    "from": 141,
    "label": "calls",
    "to": 154
  }, {
    "from": 141,
    "label": "calls",
    "to": 154
  }, {
    "from": 141,
    "label": "calls",
    "to": 154
  }, {
    "from": 141,
    "label": "calls",
    "to": 152
  }, {
    "from": 141,
    "label": "calls",
    "to": 152
  }, {
    "from": 141,
    "label": "calls",
    "to": 153
  }, {
    "from": 141,
    "label": "calls",
    "to": 153
  }, {
    "from": 141,
    "label": "calls",
    "to": 149
  }, {
    "from": 141,
    "label": "calls",
    "to": 149
  }, {
    "from": 141,
    "label": "calls",
    "to": 149
  }, {
    "from": 141,
    "label": "calls",
    "to": 149
  }, {
    "from": 141,
    "label": "calls",
    "to": 149
  }, {
    "from": 141,
    "label": "calls",
    "to": 149
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 1,
    "label": "contains",
    "to": 141
  }, {
    "from": 141,
    "label": "declares",
    "to": 3
  }, {
    "from": 141,
    "label": "declares",
    "to": 6
  }, {
    "from": 141,
    "label": "declares",
    "to": 9
  }, {
    "from": 141,
    "label": "declares",
    "to": 12
  }, {
    "from": 141,
    "label": "declares",
    "to": 17
  }, {
    "from": 141,
    "label": "declares",
    "to": 23
  }, {
    "from": 141,
    "label": "declares",
    "to": 29
  }, {
    "from": 141,
    "label": "declares",
    "to": 34
  }, {
    "from": 141,
    "label": "declares",
    "to": 37
  }, {
    "from": 141,
    "label": "declares",
    "to": 41
  }, {
    "from": 141,
    "label": "declares",
    "to": 44
  }, {
    "from": 141,
    "label": "declares",
    "to": 47
  }, {
    "from": 141,
    "label": "declares",
    "to": 50
  }, {
    "from": 141,
    "label": "declares",
    "to": 53
  }, {
    "from": 141,
    "label": "declares",
    "to": 61
  }, {
    "from": 141,
    "label": "declares",
    "to": 68
  }, {
    "from": 141,
    "label": "declares",
    "to": 77
  }, {
    "from": 141,
    "label": "declares",
    "to": 80
  }, {
    "from": 141,
    "label": "declares",
    "to": 86
  }, {
    "from": 141,
    "label": "declares",
    "to": 92
  }, {
    "from": 141,
    "label": "declares",
    "to": 98
  }, {
    "from": 141,
    "label": "declares",
    "to": 103
  }, {
    "from": 141,
    "label": "declares",
    "to": 105
  }, {
    "from": 141,
    "label": "declares",
    "to": 111
  }, {
    "from": 141,
    "label": "declares",
    "to": 115
  }, {
    "from": 141,
    "label": "declares",
    "to": 118
  }, {
    "from": 141,
    "label": "declares",
    "to": 123
  }, {
    "from": 141,
    "label": "declares",
    "to": 126
  }, {
    "from": 141,
    "label": "declares",
    "to": 133
  }, {
    "from": 1,
    "label": "contains",
    "to": 155
  }, {
    "from": 1,
    "label": "contains",
    "to": 156
  }, {
    "from": 156,
    "label": "initializes",
    "to": 157
  }, {
    "from": 157,
    "label": "requires",
    "to": 2
  }, {
    "from": 19,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 20,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 21,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 41
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 58,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 62,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 23
  }, {
    "from": 64,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 65,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 41
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 66,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 78,
    "label": "hasArgument",
    "to": 68
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 80
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 86
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 92
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 118
  }, {
    "from": 128,
    "label": "hasArgument",
    "to": 103
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 105
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 115
  }, {
    "from": 131,
    "label": "hasArgument",
    "to": 118
  }, {
    "from": 131,
    "label": "hasArgument",
    "to": 123
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 23
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 41
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 61
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 68
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 80
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 86
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 92
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 98
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 103
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 105
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 115
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 118
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 123
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 126
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "core_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "spec_helper",
    "type": "module"
  }, {
    "id": 3,
    "text": "function()\r\n    cli = require(\"cliargs.core\")()\r\n  end",
    "type": "function"
  }, {
    "id": 4,
    "text": "cli = require(\"cliargs.core\")()",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function()\r\n        global_arg = _G['arg']\r\n      end",
    "type": "function"
  }, {
    "id": 7,
    "text": "global_arg = _G['arg']",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "function()\r\n        _G['arg'] = global_arg\r\n      end",
    "type": "function"
  }, {
    "id": 10,
    "text": "_G['arg'] = global_arg",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function()\r\n        _G[\"arg\"] = {\"--quiet\"}\r\n\r\n        cli:option('--quiet', '...')\r\n\r\n        assert.equal(cli:parse().quiet, true)\r\n      end",
    "type": "function"
  }, {
    "id": 13,
    "text": "_G[\"arg\"] = {\"--quiet\"}",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "cli:option('--quiet', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert.equal(cli:parse().quiet, true)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function()\r\n      local global_arg\r\n\r\n      before_each(function()\r\n        global_arg = _G['arg']\r\n      end)\r\n\r\n      after_each(function()\r\n        _G['arg'] = global_arg\r\n      end)\r\n\r\n      it('uses the global _G[\"arg\"] one', function()\r\n        _G[\"arg\"] = {\"--quiet\"}\r\n\r\n        cli:option('--quiet', '...')\r\n\r\n        assert.equal(cli:parse().quiet, true)\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 18,
    "text": "local global_arg",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "before_each(function()\r\n        global_arg = _G['arg']\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "after_each(function()\r\n        _G['arg'] = global_arg\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "it('uses the global _G[\"arg\"] one', function()\r\n        _G[\"arg\"] = {\"--quiet\"}\r\n\r\n        cli:option('--quiet', '...')\r\n\r\n        assert.equal(cli:parse().quiet, true)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function()\r\n      local arguments = { \"--quiet\" }\r\n      cli:option('--quiet', '...')\r\n\r\n      cli:parse(arguments)\r\n\r\n      assert.equal(#arguments, 1)\r\n      assert.equal(arguments[1], \"--quiet\")\r\n    end",
    "type": "function"
  }, {
    "id": 24,
    "text": "local arguments = { \"--quiet\" }",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "cli:parse(arguments)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "assert.equal(#arguments, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "assert.equal(arguments[1], \"--quiet\")",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function()\r\n      local res, err = cli:parse({'--help'})\r\n\r\n      assert.equal(type(res), \"nil\")\r\n      assert.equal(type(err), \"string\")\r\n    end",
    "type": "function"
  }, {
    "id": 30,
    "text": "local res, err = cli:parse({'--help'})",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "assert.equal(type(res), \"nil\")",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "assert.equal(type(err), \"string\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function()\r\n      local res, err = cli:parse({ \"arg1\" })\r\n\r\n      assert.equal(type(res), \"nil\")\r\n      assert.equal(type(err), \"string\")\r\n    end",
    "type": "function"
  }, {
    "id": 35,
    "text": "local res, err = cli:parse({ \"arg1\" })",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function()\r\n        cli:argument('INPUT', '...')\r\n        cli:flag('--quiet', '...')\r\n      end",
    "type": "function"
  }, {
    "id": 38,
    "text": "cli:argument('INPUT', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "cli:flag('--quiet', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function()\r\n        assert.equal(type(res), \"nil\")\r\n        assert.equal(type(err), \"string\")\r\n        assert.equal(err, cli.printer.generate_help_and_usage())\r\n      end",
    "type": "function"
  }, {
    "id": 42,
    "text": "assert.equal(err, cli.printer.generate_help_and_usage())",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function()\r\n        res, err = helpers.parse(cli, '--help something')\r\n      end",
    "type": "function"
  }, {
    "id": 45,
    "text": "res, err = helpers.parse(cli, '--help something')",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function()\r\n        res, err = helpers.parse(cli, '--quiet --help something')\r\n      end",
    "type": "function"
  }, {
    "id": 48,
    "text": "res, err = helpers.parse(cli, '--quiet --help something')",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function()\r\n        res, err = helpers.parse(cli, '--quiet something --help')\r\n      end",
    "type": "function"
  }, {
    "id": 51,
    "text": "res, err = helpers.parse(cli, '--quiet something --help')",
    "type": "statement:assign"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function()\r\n      local res, err\r\n\r\n      before_each(function()\r\n        cli:argument('INPUT', '...')\r\n        cli:flag('--quiet', '...')\r\n      end)\r\n\r\n      after_each(function()\r\n        assert.equal(type(res), \"nil\")\r\n        assert.equal(type(err), \"string\")\r\n        assert.equal(err, cli.printer.generate_help_and_usage())\r\n      end)\r\n\r\n      it('works with --help in the beginning', function()\r\n        res, err = helpers.parse(cli, '--help something')\r\n      end)\r\n\r\n      it('works with --help in the end of options', function()\r\n        res, err = helpers.parse(cli, '--quiet --help something')\r\n      end)\r\n\r\n      it('works with --help after an argument', function()\r\n        res, err = helpers.parse(cli, '--quiet something --help')\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 54,
    "text": "local res, err",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "before_each(function()\r\n        cli:argument('INPUT', '...')\r\n        cli:flag('--quiet', '...')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "after_each(function()\r\n        assert.equal(type(res), \"nil\")\r\n        assert.equal(type(err), \"string\")\r\n        assert.equal(err, cli.printer.generate_help_and_usage())\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "it('works with --help in the beginning', function()\r\n        res, err = helpers.parse(cli, '--help something')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "it('works with --help in the end of options', function()\r\n        res, err = helpers.parse(cli, '--quiet --help something')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "it('works with --help after an argument', function()\r\n        res, err = helpers.parse(cli, '--quiet something --help')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function()\r\n    context('when invoked without the arguments table', function()\r\n      local global_arg\r\n\r\n      before_each(function()\r\n        global_arg = _G['arg']\r\n      end)\r\n\r\n      after_each(function()\r\n        _G['arg'] = global_arg\r\n      end)\r\n\r\n      it('uses the global _G[\"arg\"] one', function()\r\n        _G[\"arg\"] = {\"--quiet\"}\r\n\r\n        cli:option('--quiet', '...')\r\n\r\n        assert.equal(cli:parse().quiet, true)\r\n      end)\r\n    end)\r\n\r\n    it('does not mutate the argument table', function()\r\n      local arguments = { \"--quiet\" }\r\n      cli:option('--quiet', '...')\r\n\r\n      cli:parse(arguments)\r\n\r\n      assert.equal(#arguments, 1)\r\n      assert.equal(arguments[1], \"--quiet\")\r\n    end)\r\n\r\n    it(\"generates the help listing but does not print it to STDOUT\", function()\r\n      local res, err = cli:parse({'--help'})\r\n\r\n      assert.equal(type(res), \"nil\")\r\n      assert.equal(type(err), \"string\")\r\n    end)\r\n\r\n    it(\"returns error strings but does not print them to STDOUT\", function()\r\n      local res, err = cli:parse({ \"arg1\" })\r\n\r\n      assert.equal(type(res), \"nil\")\r\n      assert.equal(type(err), \"string\")\r\n    end)\r\n\r\n    describe('displaying the help listing', function()\r\n      local res, err\r\n\r\n      before_each(function()\r\n        cli:argument('INPUT', '...')\r\n        cli:flag('--quiet', '...')\r\n      end)\r\n\r\n      after_each(function()\r\n        assert.equal(type(res), \"nil\")\r\n        assert.equal(type(err), \"string\")\r\n        assert.equal(err, cli.printer.generate_help_and_usage())\r\n      end)\r\n\r\n      it('works with --help in the beginning', function()\r\n        res, err = helpers.parse(cli, '--help something')\r\n      end)\r\n\r\n      it('works with --help in the end of options', function()\r\n        res, err = helpers.parse(cli, '--quiet --help something')\r\n      end)\r\n\r\n      it('works with --help after an argument', function()\r\n        res, err = helpers.parse(cli, '--quiet something --help')\r\n      end)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 62,
    "text": "context('when invoked without the arguments table', function()\r\n      local global_arg\r\n\r\n      before_each(function()\r\n        global_arg = _G['arg']\r\n      end)\r\n\r\n      after_each(function()\r\n        _G['arg'] = global_arg\r\n      end)\r\n\r\n      it('uses the global _G[\"arg\"] one', function()\r\n        _G[\"arg\"] = {\"--quiet\"}\r\n\r\n        cli:option('--quiet', '...')\r\n\r\n        assert.equal(cli:parse().quiet, true)\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "it('does not mutate the argument table', function()\r\n      local arguments = { \"--quiet\" }\r\n      cli:option('--quiet', '...')\r\n\r\n      cli:parse(arguments)\r\n\r\n      assert.equal(#arguments, 1)\r\n      assert.equal(arguments[1], \"--quiet\")\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "it(\"generates the help listing but does not print it to STDOUT\", function()\r\n      local res, err = cli:parse({'--help'})\r\n\r\n      assert.equal(type(res), \"nil\")\r\n      assert.equal(type(err), \"string\")\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "it(\"returns error strings but does not print them to STDOUT\", function()\r\n      local res, err = cli:parse({ \"arg1\" })\r\n\r\n      assert.equal(type(res), \"nil\")\r\n      assert.equal(type(err), \"string\")\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "describe('displaying the help listing', function()\r\n      local res, err\r\n\r\n      before_each(function()\r\n        cli:argument('INPUT', '...')\r\n        cli:flag('--quiet', '...')\r\n      end)\r\n\r\n      after_each(function()\r\n        assert.equal(type(res), \"nil\")\r\n        assert.equal(type(err), \"string\")\r\n        assert.equal(err, cli.printer.generate_help_and_usage())\r\n      end)\r\n\r\n      it('works with --help in the beginning', function()\r\n        res, err = helpers.parse(cli, '--help something')\r\n      end)\r\n\r\n      it('works with --help in the end of options', function()\r\n        res, err = helpers.parse(cli, '--quiet --help something')\r\n      end)\r\n\r\n      it('works with --help after an argument', function()\r\n        res, err = helpers.parse(cli, '--quiet something --help')\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function()\r\n      stub(cli.printer, 'print')\r\n\r\n      cli:argument('OUTPUT', '...')\r\n      cli:splat('INPUTS', '...', nil, 5)\r\n      cli:option('-c, --compress=VALUE', '...')\r\n      cli:flag('-q, --quiet', '...', true)\r\n\r\n      local _, err = cli:parse({'--__DUMP__', '/tmp/out', '/tmp/in.1', '/tmp/in.2', '/tmp/in.3' })\r\n\r\n      assert.matches('======= Provided command line =============', err)\r\n    end",
    "type": "function"
  }, {
    "id": 69,
    "text": "stub(cli.printer, 'print')",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "cli:argument('OUTPUT', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "cli:splat('INPUTS', '...', nil, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "cli:option('-c, --compress=VALUE', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "cli:flag('-q, --quiet', '...', true)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "local _, err = cli:parse({'--__DUMP__', '/tmp/out', '/tmp/in.1', '/tmp/in.2', '/tmp/in.3' })",
    "type": "statement:localassign"
  }, {
    "id": 75,
    "text": "assert.matches('======= Provided command line =============', err)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function()\r\n    it('dumps the state and errors out', function()\r\n      stub(cli.printer, 'print')\r\n\r\n      cli:argument('OUTPUT', '...')\r\n      cli:splat('INPUTS', '...', nil, 5)\r\n      cli:option('-c, --compress=VALUE', '...')\r\n      cli:flag('-q, --quiet', '...', true)\r\n\r\n      local _, err = cli:parse({'--__DUMP__', '/tmp/out', '/tmp/in.1', '/tmp/in.2', '/tmp/in.3' })\r\n\r\n      assert.matches('======= Provided command line =============', err)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 78,
    "text": "it('dumps the state and errors out', function()\r\n      stub(cli.printer, 'print')\r\n\r\n      cli:argument('OUTPUT', '...')\r\n      cli:splat('INPUTS', '...', nil, 5)\r\n      cli:option('-c, --compress=VALUE', '...')\r\n      cli:flag('-q, --quiet', '...', true)\r\n\r\n      local _, err = cli:parse({'--__DUMP__', '/tmp/out', '/tmp/in.1', '/tmp/in.2', '/tmp/in.3' })\r\n\r\n      assert.matches('======= Provided command line =============', err)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function()\r\n      cli:splat('ROOT', '...', 'foo')\r\n      assert.equal(cli:parse({}).ROOT, 'foo')\r\n\r\n      cli:redefine_default('ROOT', 'bar')\r\n      assert.equal(cli:parse({}).ROOT, 'bar')\r\n    end",
    "type": "function"
  }, {
    "id": 81,
    "text": "cli:splat('ROOT', '...', 'foo')",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "assert.equal(cli:parse({}).ROOT, 'foo')",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "cli:redefine_default('ROOT', 'bar')",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "assert.equal(cli:parse({}).ROOT, 'bar')",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function()\r\n      cli:option('-c, --compress=VALUE', '...', 'lzma')\r\n      assert.equal(cli:parse({}).compress, 'lzma')\r\n\r\n      cli:redefine_default('compress', 'bz2')\r\n      assert.equal(cli:parse({}).compress, 'bz2')\r\n    end",
    "type": "function"
  }, {
    "id": 87,
    "text": "cli:option('-c, --compress=VALUE', '...', 'lzma')",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "assert.equal(cli:parse({}).compress, 'lzma')",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "cli:redefine_default('compress', 'bz2')",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "assert.equal(cli:parse({}).compress, 'bz2')",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function()\r\n      cli:flag('-q, --quiet', '...', false)\r\n      assert.equal(cli:parse({}).quiet, false)\r\n\r\n      cli:redefine_default('quiet', true)\r\n      assert.equal(cli:parse({}).quiet, true)\r\n    end",
    "type": "function"
  }, {
    "id": 93,
    "text": "cli:flag('-q, --quiet', '...', false)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "assert.equal(cli:parse({}).quiet, false)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "cli:redefine_default('quiet', true)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "assert.equal(cli:parse({}).quiet, true)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function()\r\n    it('allows me to change the default for an optargument', function()\r\n      cli:splat('ROOT', '...', 'foo')\r\n      assert.equal(cli:parse({}).ROOT, 'foo')\r\n\r\n      cli:redefine_default('ROOT', 'bar')\r\n      assert.equal(cli:parse({}).ROOT, 'bar')\r\n    end)\r\n\r\n    it('allows me to change the default for an option', function()\r\n      cli:option('-c, --compress=VALUE', '...', 'lzma')\r\n      assert.equal(cli:parse({}).compress, 'lzma')\r\n\r\n      cli:redefine_default('compress', 'bz2')\r\n      assert.equal(cli:parse({}).compress, 'bz2')\r\n    end)\r\n\r\n    it('allows me to change the default for a flag', function()\r\n      cli:flag('-q, --quiet', '...', false)\r\n      assert.equal(cli:parse({}).quiet, false)\r\n\r\n      cli:redefine_default('quiet', true)\r\n      assert.equal(cli:parse({}).quiet, true)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 99,
    "text": "it('allows me to change the default for an optargument', function()\r\n      cli:splat('ROOT', '...', 'foo')\r\n      assert.equal(cli:parse({}).ROOT, 'foo')\r\n\r\n      cli:redefine_default('ROOT', 'bar')\r\n      assert.equal(cli:parse({}).ROOT, 'bar')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "it('allows me to change the default for an option', function()\r\n      cli:option('-c, --compress=VALUE', '...', 'lzma')\r\n      assert.equal(cli:parse({}).compress, 'lzma')\r\n\r\n      cli:redefine_default('compress', 'bz2')\r\n      assert.equal(cli:parse({}).compress, 'bz2')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "it('allows me to change the default for a flag', function()\r\n      cli:flag('-q, --quiet', '...', false)\r\n      assert.equal(cli:parse({}).quiet, false)\r\n\r\n      cli:redefine_default('quiet', true)\r\n      assert.equal(cli:parse({}).quiet, true)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function()\r\n      cli:option('-c, --compress=VALUE', '...', 'lzma')\r\n      cli:flag('-q, --quiet', '...', false)\r\n    end",
    "type": "function"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function()\r\n      cli:load_defaults({\r\n        compress = 'bz2',\r\n        quiet = true\r\n      })\r\n\r\n      args, err = cli:parse({})\r\n\r\n      assert.equal(err, nil)\r\n      assert.same(args, {\r\n        c = 'bz2',\r\n        compress = 'bz2',\r\n        q = true,\r\n        quiet = true\r\n      })\r\n    end",
    "type": "function"
  }, {
    "id": 106,
    "text": "cli:load_defaults({\r\n        compress = 'bz2',\r\n        quiet = true\r\n      })",
    "type": "statement:functioncall"
  }, {
    "id": 107,
    "text": "args, err = cli:parse({})",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "assert.equal(err, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "assert.same(args, {\r\n        c = 'bz2',\r\n        compress = 'bz2',\r\n        q = true,\r\n        quiet = true\r\n      })",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function()\r\n        cli:load_defaults({\r\n          compress = 'bz2',\r\n          quiet = true,\r\n          what = 'woot!'\r\n        })\r\n\r\n        args, err = cli:parse({})\r\n\r\n        assert.equal(err, nil)\r\n        assert.same(args, {\r\n          c = 'bz2',\r\n          compress = 'bz2',\r\n          q = true,\r\n          quiet = true\r\n        })\r\n      end",
    "type": "function"
  }, {
    "id": 112,
    "text": "cli:load_defaults({\r\n          compress = 'bz2',\r\n          quiet = true,\r\n          what = 'woot!'\r\n        })",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "assert.same(args, {\r\n          c = 'bz2',\r\n          compress = 'bz2',\r\n          q = true,\r\n          quiet = true\r\n        })",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function()\r\n      it('ignores keys that could not be mapped', function()\r\n        cli:load_defaults({\r\n          compress = 'bz2',\r\n          quiet = true,\r\n          what = 'woot!'\r\n        })\r\n\r\n        args, err = cli:parse({})\r\n\r\n        assert.equal(err, nil)\r\n        assert.same(args, {\r\n          c = 'bz2',\r\n          compress = 'bz2',\r\n          q = true,\r\n          quiet = true\r\n        })\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 116,
    "text": "it('ignores keys that could not be mapped', function()\r\n        cli:load_defaults({\r\n          compress = 'bz2',\r\n          quiet = true,\r\n          what = 'woot!'\r\n        })\r\n\r\n        args, err = cli:parse({})\r\n\r\n        assert.equal(err, nil)\r\n        assert.same(args, {\r\n          c = 'bz2',\r\n          compress = 'bz2',\r\n          q = true,\r\n          quiet = true\r\n        })\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function()\r\n        args, err = cli:load_defaults({\r\n          what = 'woot!'\r\n        }, true)\r\n\r\n        assert.equal(args, nil)\r\n        assert.equal(err, \"Unrecognized option with the key 'what'\")\r\n      end",
    "type": "function"
  }, {
    "id": 119,
    "text": "args, err = cli:load_defaults({\r\n          what = 'woot!'\r\n        }, true)",
    "type": "statement:assign"
  }, {
    "id": 120,
    "text": "assert.equal(args, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "assert.equal(err, \"Unrecognized option with the key 'what'\")",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function()\r\n      it('returns an error message if a key could not be mapped', function()\r\n        args, err = cli:load_defaults({\r\n          what = 'woot!'\r\n        }, true)\r\n\r\n        assert.equal(args, nil)\r\n        assert.equal(err, \"Unrecognized option with the key 'what'\")\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 124,
    "text": "it('returns an error message if a key could not be mapped', function()\r\n        args, err = cli:load_defaults({\r\n          what = 'woot!'\r\n        }, true)\r\n\r\n        assert.equal(args, nil)\r\n        assert.equal(err, \"Unrecognized option with the key 'what'\")\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function()\r\n    local args, err\r\n\r\n    before_each(function()\r\n      cli:option('-c, --compress=VALUE', '...', 'lzma')\r\n      cli:flag('-q, --quiet', '...', false)\r\n    end)\r\n\r\n    it('works', function()\r\n      cli:load_defaults({\r\n        compress = 'bz2',\r\n        quiet = true\r\n      })\r\n\r\n      args, err = cli:parse({})\r\n\r\n      assert.equal(err, nil)\r\n      assert.same(args, {\r\n        c = 'bz2',\r\n        compress = 'bz2',\r\n        q = true,\r\n        quiet = true\r\n      })\r\n    end)\r\n\r\n    context('when @strict is not true', function()\r\n      it('ignores keys that could not be mapped', function()\r\n        cli:load_defaults({\r\n          compress = 'bz2',\r\n          quiet = true,\r\n          what = 'woot!'\r\n        })\r\n\r\n        args, err = cli:parse({})\r\n\r\n        assert.equal(err, nil)\r\n        assert.same(args, {\r\n          c = 'bz2',\r\n          compress = 'bz2',\r\n          q = true,\r\n          quiet = true\r\n        })\r\n      end)\r\n    end)\r\n\r\n    context('when @strict is true', function()\r\n      it('returns an error message if a key could not be mapped', function()\r\n        args, err = cli:load_defaults({\r\n          what = 'woot!'\r\n        }, true)\r\n\r\n        assert.equal(args, nil)\r\n        assert.equal(err, \"Unrecognized option with the key 'what'\")\r\n      end)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 127,
    "text": "local args, err",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "before_each(function()\r\n      cli:option('-c, --compress=VALUE', '...', 'lzma')\r\n      cli:flag('-q, --quiet', '...', false)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "it('works', function()\r\n      cli:load_defaults({\r\n        compress = 'bz2',\r\n        quiet = true\r\n      })\r\n\r\n      args, err = cli:parse({})\r\n\r\n      assert.equal(err, nil)\r\n      assert.same(args, {\r\n        c = 'bz2',\r\n        compress = 'bz2',\r\n        q = true,\r\n        quiet = true\r\n      })\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "context('when @strict is not true', function()\r\n      it('ignores keys that could not be mapped', function()\r\n        cli:load_defaults({\r\n          compress = 'bz2',\r\n          quiet = true,\r\n          what = 'woot!'\r\n        })\r\n\r\n        args, err = cli:parse({})\r\n\r\n        assert.equal(err, nil)\r\n        assert.same(args, {\r\n          c = 'bz2',\r\n          compress = 'bz2',\r\n          q = true,\r\n          quiet = true\r\n        })\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "context('when @strict is true', function()\r\n      it('returns an error message if a key could not be mapped', function()\r\n        args, err = cli:load_defaults({\r\n          what = 'woot!'\r\n        }, true)\r\n\r\n        assert.equal(args, nil)\r\n        assert.equal(err, \"Unrecognized option with the key 'what'\")\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function()\r\n  local cli\r\n\r\n  before_each(function()\r\n    cli = require(\"cliargs.core\")()\r\n  end)\r\n\r\n  describe('#parse', function()\r\n    context('when invoked without the arguments table', function()\r\n      local global_arg\r\n\r\n      before_each(function()\r\n        global_arg = _G['arg']\r\n      end)\r\n\r\n      after_each(function()\r\n        _G['arg'] = global_arg\r\n      end)\r\n\r\n      it('uses the global _G[\"arg\"] one', function()\r\n        _G[\"arg\"] = {\"--quiet\"}\r\n\r\n        cli:option('--quiet', '...')\r\n\r\n        assert.equal(cli:parse().quiet, true)\r\n      end)\r\n    end)\r\n\r\n    it('does not mutate the argument table', function()\r\n      local arguments = { \"--quiet\" }\r\n      cli:option('--quiet', '...')\r\n\r\n      cli:parse(arguments)\r\n\r\n      assert.equal(#arguments, 1)\r\n      assert.equal(arguments[1], \"--quiet\")\r\n    end)\r\n\r\n    it(\"generates the help listing but does not print it to STDOUT\", function()\r\n      local res, err = cli:parse({'--help'})\r\n\r\n      assert.equal(type(res), \"nil\")\r\n      assert.equal(type(err), \"string\")\r\n    end)\r\n\r\n    it(\"returns error strings but does not print them to STDOUT\", function()\r\n      local res, err = cli:parse({ \"arg1\" })\r\n\r\n      assert.equal(type(res), \"nil\")\r\n      assert.equal(type(err), \"string\")\r\n    end)\r\n\r\n    describe('displaying the help listing', function()\r\n      local res, err\r\n\r\n      before_each(function()\r\n        cli:argument('INPUT', '...')\r\n        cli:flag('--quiet', '...')\r\n      end)\r\n\r\n      after_each(function()\r\n        assert.equal(type(res), \"nil\")\r\n        assert.equal(type(err), \"string\")\r\n        assert.equal(err, cli.printer.generate_help_and_usage())\r\n      end)\r\n\r\n      it('works with --help in the beginning', function()\r\n        res, err = helpers.parse(cli, '--help something')\r\n      end)\r\n\r\n      it('works with --help in the end of options', function()\r\n        res, err = helpers.parse(cli, '--quiet --help something')\r\n      end)\r\n\r\n      it('works with --help after an argument', function()\r\n        res, err = helpers.parse(cli, '--quiet something --help')\r\n      end)\r\n    end)\r\n  end)\r\n\r\n  describe('#parse - the --__DUMP__ special option', function()\r\n    it('dumps the state and errors out', function()\r\n      stub(cli.printer, 'print')\r\n\r\n      cli:argument('OUTPUT', '...')\r\n      cli:splat('INPUTS', '...', nil, 5)\r\n      cli:option('-c, --compress=VALUE', '...')\r\n      cli:flag('-q, --quiet', '...', true)\r\n\r\n      local _, err = cli:parse({'--__DUMP__', '/tmp/out', '/tmp/in.1', '/tmp/in.2', '/tmp/in.3' })\r\n\r\n      assert.matches('======= Provided command line =============', err)\r\n    end)\r\n  end)\r\n\r\n  describe('#redefine_default', function()\r\n    it('allows me to change the default for an optargument', function()\r\n      cli:splat('ROOT', '...', 'foo')\r\n      assert.equal(cli:parse({}).ROOT, 'foo')\r\n\r\n      cli:redefine_default('ROOT', 'bar')\r\n      assert.equal(cli:parse({}).ROOT, 'bar')\r\n    end)\r\n\r\n    it('allows me to change the default for an option', function()\r\n      cli:option('-c, --compress=VALUE', '...', 'lzma')\r\n      assert.equal(cli:parse({}).compress, 'lzma')\r\n\r\n      cli:redefine_default('compress', 'bz2')\r\n      assert.equal(cli:parse({}).compress, 'bz2')\r\n    end)\r\n\r\n    it('allows me to change the default for a flag', function()\r\n      cli:flag('-q, --quiet', '...', false)\r\n      assert.equal(cli:parse({}).quiet, false)\r\n\r\n      cli:redefine_default('quiet', true)\r\n      assert.equal(cli:parse({}).quiet, true)\r\n    end)\r\n  end)\r\n\r\n  describe('#load_defaults', function()\r\n    local args, err\r\n\r\n    before_each(function()\r\n      cli:option('-c, --compress=VALUE', '...', 'lzma')\r\n      cli:flag('-q, --quiet', '...', false)\r\n    end)\r\n\r\n    it('works', function()\r\n      cli:load_defaults({\r\n        compress = 'bz2',\r\n        quiet = true\r\n      })\r\n\r\n      args, err = cli:parse({})\r\n\r\n      assert.equal(err, nil)\r\n      assert.same(args, {\r\n        c = 'bz2',\r\n        compress = 'bz2',\r\n        q = true,\r\n        quiet = true\r\n      })\r\n    end)\r\n\r\n    context('when @strict is not true', function()\r\n      it('ignores keys that could not be mapped', function()\r\n        cli:load_defaults({\r\n          compress = 'bz2',\r\n          quiet = true,\r\n          what = 'woot!'\r\n        })\r\n\r\n        args, err = cli:parse({})\r\n\r\n        assert.equal(err, nil)\r\n        assert.same(args, {\r\n          c = 'bz2',\r\n          compress = 'bz2',\r\n          q = true,\r\n          quiet = true\r\n        })\r\n      end)\r\n    end)\r\n\r\n    context('when @strict is true', function()\r\n      it('returns an error message if a key could not be mapped', function()\r\n        args, err = cli:load_defaults({\r\n          what = 'woot!'\r\n        }, true)\r\n\r\n        assert.equal(args, nil)\r\n        assert.equal(err, \"Unrecognized option with the key 'what'\")\r\n      end)\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "local cli",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "before_each(function()\r\n    cli = require(\"cliargs.core\")()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "describe('#parse', function()\r\n    context('when invoked without the arguments table', function()\r\n      local global_arg\r\n\r\n      before_each(function()\r\n        global_arg = _G['arg']\r\n      end)\r\n\r\n      after_each(function()\r\n        _G['arg'] = global_arg\r\n      end)\r\n\r\n      it('uses the global _G[\"arg\"] one', function()\r\n        _G[\"arg\"] = {\"--quiet\"}\r\n\r\n        cli:option('--quiet', '...')\r\n\r\n        assert.equal(cli:parse().quiet, true)\r\n      end)\r\n    end)\r\n\r\n    it('does not mutate the argument table', function()\r\n      local arguments = { \"--quiet\" }\r\n      cli:option('--quiet', '...')\r\n\r\n      cli:parse(arguments)\r\n\r\n      assert.equal(#arguments, 1)\r\n      assert.equal(arguments[1], \"--quiet\")\r\n    end)\r\n\r\n    it(\"generates the help listing but does not print it to STDOUT\", function()\r\n      local res, err = cli:parse({'--help'})\r\n\r\n      assert.equal(type(res), \"nil\")\r\n      assert.equal(type(err), \"string\")\r\n    end)\r\n\r\n    it(\"returns error strings but does not print them to STDOUT\", function()\r\n      local res, err = cli:parse({ \"arg1\" })\r\n\r\n      assert.equal(type(res), \"nil\")\r\n      assert.equal(type(err), \"string\")\r\n    end)\r\n\r\n    describe('displaying the help listing', function()\r\n      local res, err\r\n\r\n      before_each(function()\r\n        cli:argument('INPUT', '...')\r\n        cli:flag('--quiet', '...')\r\n      end)\r\n\r\n      after_each(function()\r\n        assert.equal(type(res), \"nil\")\r\n        assert.equal(type(err), \"string\")\r\n        assert.equal(err, cli.printer.generate_help_and_usage())\r\n      end)\r\n\r\n      it('works with --help in the beginning', function()\r\n        res, err = helpers.parse(cli, '--help something')\r\n      end)\r\n\r\n      it('works with --help in the end of options', function()\r\n        res, err = helpers.parse(cli, '--quiet --help something')\r\n      end)\r\n\r\n      it('works with --help after an argument', function()\r\n        res, err = helpers.parse(cli, '--quiet something --help')\r\n      end)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "describe('#parse - the --__DUMP__ special option', function()\r\n    it('dumps the state and errors out', function()\r\n      stub(cli.printer, 'print')\r\n\r\n      cli:argument('OUTPUT', '...')\r\n      cli:splat('INPUTS', '...', nil, 5)\r\n      cli:option('-c, --compress=VALUE', '...')\r\n      cli:flag('-q, --quiet', '...', true)\r\n\r\n      local _, err = cli:parse({'--__DUMP__', '/tmp/out', '/tmp/in.1', '/tmp/in.2', '/tmp/in.3' })\r\n\r\n      assert.matches('======= Provided command line =============', err)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "describe('#redefine_default', function()\r\n    it('allows me to change the default for an optargument', function()\r\n      cli:splat('ROOT', '...', 'foo')\r\n      assert.equal(cli:parse({}).ROOT, 'foo')\r\n\r\n      cli:redefine_default('ROOT', 'bar')\r\n      assert.equal(cli:parse({}).ROOT, 'bar')\r\n    end)\r\n\r\n    it('allows me to change the default for an option', function()\r\n      cli:option('-c, --compress=VALUE', '...', 'lzma')\r\n      assert.equal(cli:parse({}).compress, 'lzma')\r\n\r\n      cli:redefine_default('compress', 'bz2')\r\n      assert.equal(cli:parse({}).compress, 'bz2')\r\n    end)\r\n\r\n    it('allows me to change the default for a flag', function()\r\n      cli:flag('-q, --quiet', '...', false)\r\n      assert.equal(cli:parse({}).quiet, false)\r\n\r\n      cli:redefine_default('quiet', true)\r\n      assert.equal(cli:parse({}).quiet, true)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "describe('#load_defaults', function()\r\n    local args, err\r\n\r\n    before_each(function()\r\n      cli:option('-c, --compress=VALUE', '...', 'lzma')\r\n      cli:flag('-q, --quiet', '...', false)\r\n    end)\r\n\r\n    it('works', function()\r\n      cli:load_defaults({\r\n        compress = 'bz2',\r\n        quiet = true\r\n      })\r\n\r\n      args, err = cli:parse({})\r\n\r\n      assert.equal(err, nil)\r\n      assert.same(args, {\r\n        c = 'bz2',\r\n        compress = 'bz2',\r\n        q = true,\r\n        quiet = true\r\n      })\r\n    end)\r\n\r\n    context('when @strict is not true', function()\r\n      it('ignores keys that could not be mapped', function()\r\n        cli:load_defaults({\r\n          compress = 'bz2',\r\n          quiet = true,\r\n          what = 'woot!'\r\n        })\r\n\r\n        args, err = cli:parse({})\r\n\r\n        assert.equal(err, nil)\r\n        assert.same(args, {\r\n          c = 'bz2',\r\n          compress = 'bz2',\r\n          q = true,\r\n          quiet = true\r\n        })\r\n      end)\r\n    end)\r\n\r\n    context('when @strict is true', function()\r\n      it('returns an error message if a key could not be mapped', function()\r\n        args, err = cli:load_defaults({\r\n          what = 'woot!'\r\n        }, true)\r\n\r\n        assert.equal(args, nil)\r\n        assert.equal(err, \"Unrecognized option with the key 'what'\")\r\n      end)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "",
    "type": "function container"
  }, {
    "id": 142,
    "text": "printer.generate_help_and_usage",
    "type": "global function"
  }, {
    "id": 143,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 144,
    "text": "context",
    "type": "global function"
  }, {
    "id": 145,
    "text": "stub",
    "type": "global function"
  }, {
    "id": 146,
    "text": "it",
    "type": "global function"
  }, {
    "id": 147,
    "text": "type",
    "type": "global function"
  }, {
    "id": 148,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 149,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 150,
    "text": "same",
    "type": "global function"
  }, {
    "id": 151,
    "text": "matches",
    "type": "global function"
  }, {
    "id": 152,
    "text": "after_each",
    "type": "global function"
  }, {
    "id": 153,
    "text": "require",
    "type": "global function"
  }, {
    "id": 154,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 155,
    "text": "",
    "type": "variable container"
  }, {
    "id": 156,
    "text": "",
    "type": "require container"
  }, {
    "id": 157,
    "text": "",
    "type": "require local variable"
  } ]
}