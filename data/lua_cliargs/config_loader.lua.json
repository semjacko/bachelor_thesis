{
  "_filename": "config_loader.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua_cliargs/src/cliargs/config_loader.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 14,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 14,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 22,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 15
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 17
  }, {
    "from": 37,
    "label": "has",
    "to": 18
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 28
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 37,
    "label": "has",
    "to": 6
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "calls",
    "to": 47
  }, {
    "from": 41,
    "label": "calls",
    "to": 50
  }, {
    "from": 3,
    "label": "calls",
    "to": 51
  }, {
    "from": 41,
    "label": "calls",
    "to": 45
  }, {
    "from": 41,
    "label": "calls",
    "to": 43
  }, {
    "from": 41,
    "label": "calls",
    "to": 54
  }, {
    "from": 41,
    "label": "calls",
    "to": 52
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 3
  }, {
    "from": 41,
    "label": "calls",
    "to": 49
  }, {
    "from": 41,
    "label": "calls",
    "to": 53
  }, {
    "from": 41,
    "label": "calls",
    "to": 53
  }, {
    "from": 41,
    "label": "calls",
    "to": 53
  }, {
    "from": 41,
    "label": "calls",
    "to": 53
  }, {
    "from": 41,
    "label": "calls",
    "to": 46
  }, {
    "from": 41,
    "label": "calls",
    "to": 48
  }, {
    "from": 1,
    "label": "contains",
    "to": 41
  }, {
    "from": 41,
    "label": "declares",
    "to": 3
  }, {
    "from": 41,
    "label": "declares",
    "to": 10
  }, {
    "from": 41,
    "label": "declares",
    "to": 14
  }, {
    "from": 41,
    "label": "declares",
    "to": 22
  }, {
    "from": 41,
    "label": "declares",
    "to": 37
  }, {
    "from": 1,
    "label": "contains",
    "to": 55
  }, {
    "from": 1,
    "label": "contains",
    "to": 56
  }, {
    "from": 56,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "requires",
    "to": 2
  }, {
    "from": 56,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "requires",
    "to": 42
  }, {
    "from": 56,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "requires",
    "to": 60
  }, {
    "from": 56,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "requires",
    "to": 44
  }, {
    "from": 1,
    "label": "provides",
    "to": 62
  }, {
    "from": 62,
    "label": "provides",
    "to": 63
  }, {
    "from": 62,
    "label": "provides",
    "to": 64
  }, {
    "from": 62,
    "label": "provides",
    "to": 65
  }, {
    "from": 62,
    "label": "provides",
    "to": 66
  }, {
    "from": 62,
    "label": "provides",
    "to": 67
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "config_loader",
    "type": "module"
  }, {
    "id": 2,
    "text": "trim",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function read_file(filepath)\r\n  local f, err = io.open(filepath, \"r\")\r\n\r\n  if not f then\r\n    return nil, err\r\n  end\r\n\r\n  local contents = f:read('*all')\r\n\r\n  f:close()\r\n\r\n  return contents\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local f, err = io.open(filepath, \"r\")",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if not f then\r\n    return nil, err\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "local contents = f:read('*all')",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function(filepath)\r\n    local file, err = loadfile(filepath)\r\n\r\n    if not file and err then\r\n      return nil, err\r\n    end\r\n\r\n    return file()\r\n  end",
    "type": "function"
  }, {
    "id": 11,
    "text": "local file, err = loadfile(filepath)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "if not file and err then\r\n      return nil, err\r\n    end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function(filepath)\r\n    local src, config, _, err\r\n    local json = require 'dkjson'\r\n\r\n    src, err = read_file(filepath)\r\n\r\n    if not src and err then\r\n      return nil, err\r\n    end\r\n\r\n    config, _, err = json.decode(src)\r\n\r\n    if err then\r\n      return nil, err\r\n    end\r\n\r\n    return config\r\n  end",
    "type": "function"
  }, {
    "id": 15,
    "text": "local src, config, _, err",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local json = require 'dkjson'",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "src, err = read_file(filepath)",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "if not src and err then\r\n      return nil, err\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "config, _, err = json.decode(src)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "if err then\r\n      return nil, err\r\n    end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function(filepath, group, no_cast)\r\n    local inifile = require 'inifile'\r\n    local config, err\r\n\r\n    group = group or 'cli'\r\n\r\n    assert(type(group) == 'string',\r\n      'You must provide an INI group to read from.'\r\n    )\r\n\r\n    config, err = inifile.parse(filepath)\r\n\r\n    if not config and err then\r\n      return nil, err\r\n    end\r\n\r\n    if not no_cast then\r\n      for k, src_value in pairs(config[group]) do\r\n        local v = trim(src_value)\r\n\r\n        if v == 'true' then\r\n          v = true\r\n        elseif v == 'false' then\r\n          v = false\r\n        end\r\n\r\n        config[group][k] = v\r\n      end\r\n    end\r\n\r\n    return config[group]\r\n  end",
    "type": "function"
  }, {
    "id": 23,
    "text": "local inifile = require 'inifile'",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local config, err",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "group = group or 'cli'",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "assert(type(group) == 'string',\r\n      'You must provide an INI group to read from.'\r\n    )",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "config, err = inifile.parse(filepath)",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "if not config and err then\r\n      return nil, err\r\n    end",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "if not no_cast then\r\n      for k, src_value in pairs(config[group]) do\r\n        local v = trim(src_value)\r\n\r\n        if v == 'true' then\r\n          v = true\r\n        elseif v == 'false' then\r\n          v = false\r\n        end\r\n\r\n        config[group][k] = v\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "for k, src_value in pairs(config[group]) do\r\n        local v = trim(src_value)\r\n\r\n        if v == 'true' then\r\n          v = true\r\n        elseif v == 'false' then\r\n          v = false\r\n        end\r\n\r\n        config[group][k] = v\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 31,
    "text": "local v = trim(src_value)",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "if v == 'true' then\r\n          v = true\r\n        elseif v == 'false' then\r\n          v = false\r\n        end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "v = true",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "v = false",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "config[group][k] = v",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function(filepath)\r\n    local src, config, _, err\r\n    local yaml = require 'yaml'\r\n\r\n    src, err = read_file(filepath)\r\n\r\n    if not src and err then\r\n      return nil, err\r\n    end\r\n\r\n    config, err = yaml.load(src)\r\n\r\n    if not config and err then\r\n      return nil, err\r\n    end\r\n\r\n    return config\r\n  end",
    "type": "function"
  }, {
    "id": 38,
    "text": "local yaml = require 'yaml'",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "config, err = yaml.load(src)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "",
    "type": "function container"
  }, {
    "id": 42,
    "text": "dkjson",
    "type": "module"
  }, {
    "id": 43,
    "text": "decode",
    "type": "global function"
  }, {
    "id": 44,
    "text": "yaml",
    "type": "module"
  }, {
    "id": 45,
    "text": "load",
    "type": "global function"
  }, {
    "id": 46,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 47,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 48,
    "text": "file",
    "type": "global function"
  }, {
    "id": 49,
    "text": "type",
    "type": "global function"
  }, {
    "id": 50,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 51,
    "text": "open",
    "type": "global function"
  }, {
    "id": 52,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 53,
    "text": "require",
    "type": "global function"
  }, {
    "id": 54,
    "text": "trim",
    "type": "global function"
  }, {
    "id": 55,
    "text": "",
    "type": "variable container"
  }, {
    "id": 56,
    "text": "",
    "type": "require container"
  }, {
    "id": 57,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 60,
    "text": "inifile",
    "type": "module"
  }, {
    "id": 61,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "interface container"
  }, {
    "id": 63,
    "text": "",
    "type": "interface"
  }, {
    "id": 64,
    "text": "",
    "type": "interface"
  }, {
    "id": 65,
    "text": "",
    "type": "interface"
  }, {
    "id": 66,
    "text": "",
    "type": "interface"
  }, {
    "id": 67,
    "text": "",
    "type": "interface"
  } ]
}