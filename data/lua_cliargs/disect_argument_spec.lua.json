{
  "_filename": "disect_argument_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/lua_cliargs/spec/utils/disect_argument_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 5
  }, {
    "from": 10,
    "label": "has",
    "to": 6
  }, {
    "from": 10,
    "label": "has",
    "to": 7
  }, {
    "from": 10,
    "label": "has",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 2
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 12,
    "label": "has",
    "to": 21
  }, {
    "from": 12,
    "label": "has",
    "to": 22
  }, {
    "from": 12,
    "label": "has",
    "to": 23
  }, {
    "from": 12,
    "label": "has",
    "to": 24
  }, {
    "from": 12,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 26,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 31
  }, {
    "from": 26,
    "label": "calls",
    "to": 30
  }, {
    "from": 26,
    "label": "calls",
    "to": 30
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 2,
    "label": "calls",
    "to": 28
  }, {
    "from": 26,
    "label": "calls",
    "to": 29
  }, {
    "from": 2,
    "label": "calls",
    "to": 27
  }, {
    "from": 1,
    "label": "contains",
    "to": 26
  }, {
    "from": 26,
    "label": "declares",
    "to": 2
  }, {
    "from": 26,
    "label": "declares",
    "to": 10
  }, {
    "from": 26,
    "label": "declares",
    "to": 12
  }, {
    "from": 1,
    "label": "contains",
    "to": 33
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 34,
    "label": "initializes",
    "to": 35
  }, {
    "from": 35,
    "label": "requires",
    "to": 36
  }, {
    "from": 34,
    "label": "initializes",
    "to": 32
  }, {
    "from": 3,
    "label": "hasArgument",
    "to": 10
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "disect_argument_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function assert_disect(pattern, expected)\r\n    it(\"works with '\" .. pattern .. \"'\", function()\r\n      local symbol, key, value, negated = disect_argument(pattern)\r\n\r\n      assert.equal(symbol, expected[1])\r\n      assert.equal(key, expected[2])\r\n      assert.equal(value, expected[3])\r\n      assert.equal(negated, expected[4])\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "it(\"works with '\" .. pattern .. \"'\", function()\r\n      local symbol, key, value, negated = disect_argument(pattern)\r\n\r\n      assert.equal(symbol, expected[1])\r\n      assert.equal(key, expected[2])\r\n      assert.equal(value, expected[3])\r\n      assert.equal(negated, expected[4])\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "local symbol, key, value, negated = disect_argument(pattern)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "assert.equal(symbol, expected[1])",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "assert.equal(key, expected[2])",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "assert.equal(value, expected[3])",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "assert.equal(negated, expected[4])",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function()\r\n      local symbol, key, value, negated = disect_argument(pattern)\r\n\r\n      assert.equal(symbol, expected[1])\r\n      assert.equal(key, expected[2])\r\n      assert.equal(value, expected[3])\r\n      assert.equal(negated, expected[4])\r\n    end",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function()\r\n  local function assert_disect(pattern, expected)\r\n    it(\"works with '\" .. pattern .. \"'\", function()\r\n      local symbol, key, value, negated = disect_argument(pattern)\r\n\r\n      assert.equal(symbol, expected[1])\r\n      assert.equal(key, expected[2])\r\n      assert.equal(value, expected[3])\r\n      assert.equal(negated, expected[4])\r\n    end)\r\n  end\r\n\r\n  -- flags\r\n  assert_disect(\"\", { nil, nil, nil, false })\r\n  assert_disect(\"-q\", { '-', 'q', nil, false })\r\n  assert_disect(\"--quiet\", { '--', 'quiet', nil, false })\r\n\r\n  -- -- -- -- flag negation\r\n  assert_disect(\"--no-quiet\", { '--', 'quiet', nil, true })\r\n  assert_disect(\"--no-q\", { '--', 'q', nil, true })\r\n\r\n  -- -- options\r\n  assert_disect(\"-v=VALUE\", { '-', 'v', 'VALUE', false })\r\n  assert_disect(\"--value=VALUE\", { '--', 'value', 'VALUE', false })\r\n  assert_disect('--value=with whitespace', { '--', 'value', 'with whitespace', false })\r\n\r\n  -- -- end-of-options indicator\r\n  assert_disect('--', { '--', nil, nil, false })\r\n\r\n  -- -- values\r\n  assert_disect('value', { nil, nil, 'value', false })\r\n  assert_disect('/path/to/something', { nil, nil, '/path/to/something', false })\r\n  assert_disect('oops-look-at--me', { nil, nil, 'oops-look-at--me', false })\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "assert_disect(\"\", { nil, nil, nil, false })",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assert_disect(\"-q\", { '-', 'q', nil, false })",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert_disect(\"--quiet\", { '--', 'quiet', nil, false })",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "assert_disect(\"--no-quiet\", { '--', 'quiet', nil, true })",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "assert_disect(\"--no-q\", { '--', 'q', nil, true })",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert_disect(\"-v=VALUE\", { '-', 'v', 'VALUE', false })",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "assert_disect(\"--value=VALUE\", { '--', 'value', 'VALUE', false })",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "assert_disect('--value=with whitespace', { '--', 'value', 'with whitespace', false })",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "assert_disect('--', { '--', nil, nil, false })",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "assert_disect('value', { nil, nil, 'value', false })",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert_disect('/path/to/something', { nil, nil, '/path/to/something', false })",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "assert_disect('oops-look-at--me', { nil, nil, 'oops-look-at--me', false })",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "",
    "type": "function container"
  }, {
    "id": 27,
    "text": "it",
    "type": "global function"
  }, {
    "id": 28,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 29,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 30,
    "text": "require",
    "type": "global function"
  }, {
    "id": 31,
    "text": "disect_argument",
    "type": "global function"
  }, {
    "id": 32,
    "text": "",
    "type": "global variable"
  }, {
    "id": 33,
    "text": "",
    "type": "variable container"
  }, {
    "id": 34,
    "text": "",
    "type": "require container"
  }, {
    "id": 35,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 36,
    "text": "disect_argument)",
    "type": "module"
  } ]
}