{
  "_filename": "printer_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/lua_cliargs/spec/printer_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 31
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 14
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 17
  }, {
    "from": 50,
    "label": "has",
    "to": 18
  }, {
    "from": 48,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 21
  }, {
    "from": 51,
    "label": "has",
    "to": 22
  }, {
    "from": 51,
    "label": "has",
    "to": 23
  }, {
    "from": 48,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 26
  }, {
    "from": 52,
    "label": "has",
    "to": 27
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 30
  }, {
    "from": 53,
    "label": "has",
    "to": 31
  }, {
    "from": 48,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 34
  }, {
    "from": 54,
    "label": "has",
    "to": 31
  }, {
    "from": 48,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 37
  }, {
    "from": 55,
    "label": "has",
    "to": 38
  }, {
    "from": 48,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 41
  }, {
    "from": 56,
    "label": "has",
    "to": 42
  }, {
    "from": 48,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 45
  }, {
    "from": 57,
    "label": "has",
    "to": 46
  }, {
    "from": 48,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 17
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 17
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 73,
    "label": "has",
    "to": 75
  }, {
    "from": 73,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 70
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 85,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 86
  }, {
    "from": 90,
    "label": "has",
    "to": 87
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 93
  }, {
    "from": 97,
    "label": "has",
    "to": 94
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 99,
    "label": "has",
    "to": 101
  }, {
    "from": 99,
    "label": "has",
    "to": 102
  }, {
    "from": 99,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 100
  }, {
    "from": 105,
    "label": "has",
    "to": 101
  }, {
    "from": 105,
    "label": "has",
    "to": 102
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 109
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 108
  }, {
    "from": 114,
    "label": "has",
    "to": 109
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 116,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 108
  }, {
    "from": 121,
    "label": "has",
    "to": 109
  }, {
    "from": 120,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 112
  }, {
    "from": 122,
    "label": "has",
    "to": 109
  }, {
    "from": 120,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 108
  }, {
    "from": 123,
    "label": "has",
    "to": 109
  }, {
    "from": 120,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 117
  }, {
    "from": 124,
    "label": "has",
    "to": 118
  }, {
    "from": 120,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 60
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 17
  }, {
    "from": 128,
    "label": "has",
    "to": 63
  }, {
    "from": 126,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 17
  }, {
    "from": 129,
    "label": "has",
    "to": 66
  }, {
    "from": 129,
    "label": "has",
    "to": 67
  }, {
    "from": 126,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 70
  }, {
    "from": 130,
    "label": "has",
    "to": 71
  }, {
    "from": 126,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 74
  }, {
    "from": 131,
    "label": "has",
    "to": 75
  }, {
    "from": 126,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 78
  }, {
    "from": 132,
    "label": "has",
    "to": 79
  }, {
    "from": 126,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 70
  }, {
    "from": 133,
    "label": "has",
    "to": 82
  }, {
    "from": 133,
    "label": "has",
    "to": 83
  }, {
    "from": 126,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 86
  }, {
    "from": 90,
    "label": "has",
    "to": 87
  }, {
    "from": 126,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 93
  }, {
    "from": 97,
    "label": "has",
    "to": 94
  }, {
    "from": 126,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 100
  }, {
    "from": 105,
    "label": "has",
    "to": 101
  }, {
    "from": 105,
    "label": "has",
    "to": 102
  }, {
    "from": 126,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 108
  }, {
    "from": 121,
    "label": "has",
    "to": 109
  }, {
    "from": 137,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 112
  }, {
    "from": 122,
    "label": "has",
    "to": 109
  }, {
    "from": 137,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 108
  }, {
    "from": 123,
    "label": "has",
    "to": 109
  }, {
    "from": 137,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 117
  }, {
    "from": 124,
    "label": "has",
    "to": 118
  }, {
    "from": 126,
    "label": "has",
    "to": 138
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 139,
    "label": "has",
    "to": 142
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 143,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 22
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 146,
    "label": "has",
    "to": 148
  }, {
    "from": 146,
    "label": "has",
    "to": 149
  }, {
    "from": 146,
    "label": "has",
    "to": 150
  }, {
    "from": 146,
    "label": "has",
    "to": 151
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 152,
    "label": "has",
    "to": 154
  }, {
    "from": 152,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 154
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 159,
    "label": "has",
    "to": 160
  }, {
    "from": 159,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 140
  }, {
    "from": 161,
    "label": "has",
    "to": 141
  }, {
    "from": 159,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 144
  }, {
    "from": 159,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 22
  }, {
    "from": 163,
    "label": "has",
    "to": 147
  }, {
    "from": 163,
    "label": "has",
    "to": 148
  }, {
    "from": 163,
    "label": "has",
    "to": 149
  }, {
    "from": 163,
    "label": "has",
    "to": 150
  }, {
    "from": 159,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 153
  }, {
    "from": 164,
    "label": "has",
    "to": 154
  }, {
    "from": 159,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 157
  }, {
    "from": 165,
    "label": "has",
    "to": 154
  }, {
    "from": 159,
    "label": "has",
    "to": 166
  }, {
    "from": 167,
    "label": "has",
    "to": 168
  }, {
    "from": 167,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 11
  }, {
    "from": 167,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 170,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 14
  }, {
    "from": 170,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 17
  }, {
    "from": 50,
    "label": "has",
    "to": 18
  }, {
    "from": 170,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 21
  }, {
    "from": 51,
    "label": "has",
    "to": 22
  }, {
    "from": 51,
    "label": "has",
    "to": 23
  }, {
    "from": 170,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 26
  }, {
    "from": 52,
    "label": "has",
    "to": 27
  }, {
    "from": 170,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 30
  }, {
    "from": 53,
    "label": "has",
    "to": 31
  }, {
    "from": 170,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 34
  }, {
    "from": 54,
    "label": "has",
    "to": 31
  }, {
    "from": 170,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 37
  }, {
    "from": 55,
    "label": "has",
    "to": 38
  }, {
    "from": 170,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 41
  }, {
    "from": 56,
    "label": "has",
    "to": 42
  }, {
    "from": 170,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 45
  }, {
    "from": 57,
    "label": "has",
    "to": 46
  }, {
    "from": 167,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 171,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 60
  }, {
    "from": 171,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 17
  }, {
    "from": 128,
    "label": "has",
    "to": 63
  }, {
    "from": 171,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 17
  }, {
    "from": 129,
    "label": "has",
    "to": 66
  }, {
    "from": 129,
    "label": "has",
    "to": 67
  }, {
    "from": 171,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 70
  }, {
    "from": 130,
    "label": "has",
    "to": 71
  }, {
    "from": 171,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 74
  }, {
    "from": 131,
    "label": "has",
    "to": 75
  }, {
    "from": 171,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 78
  }, {
    "from": 132,
    "label": "has",
    "to": 79
  }, {
    "from": 171,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 70
  }, {
    "from": 133,
    "label": "has",
    "to": 82
  }, {
    "from": 133,
    "label": "has",
    "to": 83
  }, {
    "from": 171,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 86
  }, {
    "from": 90,
    "label": "has",
    "to": 87
  }, {
    "from": 171,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 93
  }, {
    "from": 97,
    "label": "has",
    "to": 94
  }, {
    "from": 171,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 100
  }, {
    "from": 105,
    "label": "has",
    "to": 101
  }, {
    "from": 105,
    "label": "has",
    "to": 102
  }, {
    "from": 171,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 108
  }, {
    "from": 121,
    "label": "has",
    "to": 109
  }, {
    "from": 137,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 112
  }, {
    "from": 122,
    "label": "has",
    "to": 109
  }, {
    "from": 137,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 108
  }, {
    "from": 123,
    "label": "has",
    "to": 109
  }, {
    "from": 137,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 117
  }, {
    "from": 124,
    "label": "has",
    "to": 118
  }, {
    "from": 167,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 160
  }, {
    "from": 172,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 140
  }, {
    "from": 161,
    "label": "has",
    "to": 141
  }, {
    "from": 172,
    "label": "has",
    "to": 162
  }, {
    "from": 162,
    "label": "has",
    "to": 144
  }, {
    "from": 172,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 22
  }, {
    "from": 163,
    "label": "has",
    "to": 147
  }, {
    "from": 163,
    "label": "has",
    "to": 148
  }, {
    "from": 163,
    "label": "has",
    "to": 149
  }, {
    "from": 163,
    "label": "has",
    "to": 150
  }, {
    "from": 172,
    "label": "has",
    "to": 164
  }, {
    "from": 164,
    "label": "has",
    "to": 153
  }, {
    "from": 164,
    "label": "has",
    "to": 154
  }, {
    "from": 172,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 157
  }, {
    "from": 165,
    "label": "has",
    "to": 154
  }, {
    "from": 167,
    "label": "has",
    "to": 173
  }, {
    "from": 3,
    "label": "calls",
    "to": 176
  }, {
    "from": 174,
    "label": "calls",
    "to": 175
  }, {
    "from": 174,
    "label": "calls",
    "to": 175
  }, {
    "from": 174,
    "label": "calls",
    "to": 175
  }, {
    "from": 3,
    "label": "calls",
    "to": 180
  }, {
    "from": 3,
    "label": "calls",
    "to": 180
  }, {
    "from": 174,
    "label": "calls",
    "to": 180
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 179
  }, {
    "from": 174,
    "label": "calls",
    "to": 178
  }, {
    "from": 174,
    "label": "calls",
    "to": 178
  }, {
    "from": 174,
    "label": "calls",
    "to": 178
  }, {
    "from": 174,
    "label": "calls",
    "to": 178
  }, {
    "from": 174,
    "label": "calls",
    "to": 182
  }, {
    "from": 3,
    "label": "calls",
    "to": 177
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 174,
    "label": "calls",
    "to": 3
  }, {
    "from": 3,
    "label": "calls",
    "to": 184
  }, {
    "from": 3,
    "label": "calls",
    "to": 184
  }, {
    "from": 3,
    "label": "calls",
    "to": 184
  }, {
    "from": 3,
    "label": "calls",
    "to": 184
  }, {
    "from": 174,
    "label": "calls",
    "to": 184
  }, {
    "from": 174,
    "label": "calls",
    "to": 184
  }, {
    "from": 174,
    "label": "calls",
    "to": 183
  }, {
    "from": 174,
    "label": "calls",
    "to": 183
  }, {
    "from": 174,
    "label": "calls",
    "to": 181
  }, {
    "from": 174,
    "label": "calls",
    "to": 181
  }, {
    "from": 174,
    "label": "calls",
    "to": 181
  }, {
    "from": 174,
    "label": "calls",
    "to": 181
  }, {
    "from": 174,
    "label": "calls",
    "to": 185
  }, {
    "from": 174,
    "label": "calls",
    "to": 185
  }, {
    "from": 1,
    "label": "contains",
    "to": 174
  }, {
    "from": 174,
    "label": "declares",
    "to": 3
  }, {
    "from": 174,
    "label": "declares",
    "to": 7
  }, {
    "from": 174,
    "label": "declares",
    "to": 10
  }, {
    "from": 174,
    "label": "declares",
    "to": 13
  }, {
    "from": 174,
    "label": "declares",
    "to": 16
  }, {
    "from": 174,
    "label": "declares",
    "to": 20
  }, {
    "from": 174,
    "label": "declares",
    "to": 25
  }, {
    "from": 174,
    "label": "declares",
    "to": 29
  }, {
    "from": 174,
    "label": "declares",
    "to": 33
  }, {
    "from": 174,
    "label": "declares",
    "to": 36
  }, {
    "from": 174,
    "label": "declares",
    "to": 40
  }, {
    "from": 174,
    "label": "declares",
    "to": 44
  }, {
    "from": 174,
    "label": "declares",
    "to": 48
  }, {
    "from": 174,
    "label": "declares",
    "to": 59
  }, {
    "from": 174,
    "label": "declares",
    "to": 62
  }, {
    "from": 174,
    "label": "declares",
    "to": 65
  }, {
    "from": 174,
    "label": "declares",
    "to": 69
  }, {
    "from": 174,
    "label": "declares",
    "to": 73
  }, {
    "from": 174,
    "label": "declares",
    "to": 77
  }, {
    "from": 174,
    "label": "declares",
    "to": 81
  }, {
    "from": 174,
    "label": "declares",
    "to": 85
  }, {
    "from": 174,
    "label": "declares",
    "to": 89
  }, {
    "from": 174,
    "label": "declares",
    "to": 92
  }, {
    "from": 174,
    "label": "declares",
    "to": 96
  }, {
    "from": 174,
    "label": "declares",
    "to": 99
  }, {
    "from": 174,
    "label": "declares",
    "to": 104
  }, {
    "from": 174,
    "label": "declares",
    "to": 107
  }, {
    "from": 174,
    "label": "declares",
    "to": 111
  }, {
    "from": 174,
    "label": "declares",
    "to": 114
  }, {
    "from": 174,
    "label": "declares",
    "to": 116
  }, {
    "from": 174,
    "label": "declares",
    "to": 120
  }, {
    "from": 174,
    "label": "declares",
    "to": 126
  }, {
    "from": 174,
    "label": "declares",
    "to": 139
  }, {
    "from": 174,
    "label": "declares",
    "to": 143
  }, {
    "from": 174,
    "label": "declares",
    "to": 146
  }, {
    "from": 174,
    "label": "declares",
    "to": 152
  }, {
    "from": 174,
    "label": "declares",
    "to": 156
  }, {
    "from": 174,
    "label": "declares",
    "to": 159
  }, {
    "from": 174,
    "label": "declares",
    "to": 167
  }, {
    "from": 1,
    "label": "contains",
    "to": 186
  }, {
    "from": 1,
    "label": "contains",
    "to": 187
  }, {
    "from": 186,
    "label": "initializes",
    "to": 188
  }, {
    "from": 188,
    "label": "assigns",
    "to": 189
  }, {
    "from": 187,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "requires",
    "to": 2
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 13
  }, {
    "from": 50,
    "label": "hasArgument",
    "to": 16
  }, {
    "from": 51,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 52,
    "label": "hasArgument",
    "to": 25
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 54,
    "label": "hasArgument",
    "to": 33
  }, {
    "from": 55,
    "label": "hasArgument",
    "to": 36
  }, {
    "from": 56,
    "label": "hasArgument",
    "to": 40
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 97,
    "label": "hasArgument",
    "to": 92
  }, {
    "from": 105,
    "label": "hasArgument",
    "to": 99
  }, {
    "from": 121,
    "label": "hasArgument",
    "to": 107
  }, {
    "from": 121,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 122,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 107
  }, {
    "from": 123,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 116
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 128,
    "label": "hasArgument",
    "to": 62
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 65
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 69
  }, {
    "from": 131,
    "label": "hasArgument",
    "to": 73
  }, {
    "from": 132,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 81
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 92
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 96
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 99
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 107
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 116
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 120
  }, {
    "from": 161,
    "label": "hasArgument",
    "to": 139
  }, {
    "from": 162,
    "label": "hasArgument",
    "to": 143
  }, {
    "from": 163,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 164,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 165,
    "label": "hasArgument",
    "to": 156
  }, {
    "from": 169,
    "label": "hasArgument",
    "to": 10
  }, {
    "from": 170,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 170,
    "label": "hasArgument",
    "to": 13
  }, {
    "from": 170,
    "label": "hasArgument",
    "to": 16
  }, {
    "from": 170,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 170,
    "label": "hasArgument",
    "to": 25
  }, {
    "from": 170,
    "label": "hasArgument",
    "to": 29
  }, {
    "from": 170,
    "label": "hasArgument",
    "to": 33
  }, {
    "from": 170,
    "label": "hasArgument",
    "to": 36
  }, {
    "from": 170,
    "label": "hasArgument",
    "to": 40
  }, {
    "from": 170,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 170,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 62
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 65
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 69
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 73
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 81
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 92
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 96
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 99
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 107
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 111
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 114
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 116
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 120
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 139
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 143
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 146
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 152
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 156
  }, {
    "from": 172,
    "label": "hasArgument",
    "to": 159
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "printer_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "spec_helper",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function assert_msg(expected_msg)\r\n      local actual_msg = cli.printer.generate_usage()\r\n\r\n      assert.equal(trim(expected_msg), trim(actual_msg))\r\n    end",
    "type": "function"
  }, {
    "id": 4,
    "text": "local actual_msg = cli.printer.generate_usage()",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "assert.equal(trim(expected_msg), trim(actual_msg))",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function assert_msg(expected_msg)\r\n      local actual_msg = cli.printer.generate_help()\r\n\r\n      assert.equal(trim(expected_msg), trim(actual_msg))\r\n    end",
    "type": "function"
  }, {
    "id": 8,
    "text": "local actual_msg = cli.printer.generate_help()",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function()\r\n    cli = require(\"cliargs.core\")()\r\n  end",
    "type": "function"
  }, {
    "id": 11,
    "text": "cli = require(\"cliargs.core\")()",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function()\r\n      assert_msg 'Usage:'\r\n    end",
    "type": "function"
  }, {
    "id": 14,
    "text": "assert_msg 'Usage:'",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n\r\n      assert_msg [==[\r\n        Usage: [--] INPUT\r\n      ]==]\r\n    end",
    "type": "function"
  }, {
    "id": 17,
    "text": "cli:argument('INPUT', 'path to the input file')",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "assert_msg [==[\r\n        Usage: [--] INPUT\r\n      ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function()\r\n      cli:argument('INPUT', '...')\r\n      cli:argument('OUTPUT', '...')\r\n\r\n      assert_msg [==[\r\n        Usage: [--] INPUT OUTPUT\r\n      ]==]\r\n    end",
    "type": "function"
  }, {
    "id": 21,
    "text": "cli:argument('INPUT', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "cli:argument('OUTPUT', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "assert_msg [==[\r\n        Usage: [--] INPUT OUTPUT\r\n      ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function()\r\n      cli:set_name('foo')\r\n      assert_msg 'Usage: foo'\r\n    end",
    "type": "function"
  }, {
    "id": 26,
    "text": "cli:set_name('foo')",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "assert_msg 'Usage: foo'",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function()\r\n      cli:option('--foo=VALUE', '...')\r\n\r\n      assert_msg [==[\r\n        Usage: [OPTIONS]\r\n      ]==]\r\n    end",
    "type": "function"
  }, {
    "id": 30,
    "text": "cli:option('--foo=VALUE', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "assert_msg [==[\r\n        Usage: [OPTIONS]\r\n      ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function()\r\n      cli:flag('--foo', '...')\r\n\r\n      assert_msg [==[\r\n        Usage: [OPTIONS]\r\n      ]==]\r\n    end",
    "type": "function"
  }, {
    "id": 34,
    "text": "cli:flag('--foo', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function()\r\n      cli:splat('OUTPUT', '...', nil, 1)\r\n\r\n      assert_msg [==[\r\n        Usage: [--] [OUTPUT]\r\n      ]==]\r\n    end",
    "type": "function"
  }, {
    "id": 37,
    "text": "cli:splat('OUTPUT', '...', nil, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert_msg [==[\r\n        Usage: [--] [OUTPUT]\r\n      ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function()\r\n      cli:splat('OUTPUT', '...', nil, 2)\r\n\r\n      assert_msg [==[\r\n        Usage: [--] [OUTPUT-1 [OUTPUT-2]]\r\n      ]==]\r\n    end",
    "type": "function"
  }, {
    "id": 41,
    "text": "cli:splat('OUTPUT', '...', nil, 2)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "assert_msg [==[\r\n        Usage: [--] [OUTPUT-1 [OUTPUT-2]]\r\n      ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function()\r\n      cli:splat('OUTPUT', '...', nil, 5)\r\n\r\n      assert_msg [==[\r\n        Usage: [--] [OUTPUT-1 [OUTPUT-2 [...]]]\r\n      ]==]\r\n    end",
    "type": "function"
  }, {
    "id": 45,
    "text": "cli:splat('OUTPUT', '...', nil, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "assert_msg [==[\r\n        Usage: [--] [OUTPUT-1 [OUTPUT-2 [...]]]\r\n      ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function()\r\n    local function assert_msg(expected_msg)\r\n      local actual_msg = cli.printer.generate_usage()\r\n\r\n      assert.equal(trim(expected_msg), trim(actual_msg))\r\n    end\r\n\r\n    it('works with 0 arguments', function()\r\n      assert_msg 'Usage:'\r\n    end)\r\n\r\n    it('works with 1 argument', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n\r\n      assert_msg [==[\r\n        Usage: [--] INPUT\r\n      ]==]\r\n    end)\r\n\r\n    it('works with 2+ arguments', function()\r\n      cli:argument('INPUT', '...')\r\n      cli:argument('OUTPUT', '...')\r\n\r\n      assert_msg [==[\r\n        Usage: [--] INPUT OUTPUT\r\n      ]==]\r\n    end)\r\n\r\n    it('prints the app name', function()\r\n      cli:set_name('foo')\r\n      assert_msg 'Usage: foo'\r\n    end)\r\n\r\n    it('prints options', function()\r\n      cli:option('--foo=VALUE', '...')\r\n\r\n      assert_msg [==[\r\n        Usage: [OPTIONS]\r\n      ]==]\r\n    end)\r\n\r\n    it('prints flags', function()\r\n      cli:flag('--foo', '...')\r\n\r\n      assert_msg [==[\r\n        Usage: [OPTIONS]\r\n      ]==]\r\n    end)\r\n\r\n    it('prints a splat arg with reptitions == 1', function()\r\n      cli:splat('OUTPUT', '...', nil, 1)\r\n\r\n      assert_msg [==[\r\n        Usage: [--] [OUTPUT]\r\n      ]==]\r\n    end)\r\n\r\n    it('prints a splat arg with reptitions == 2', function()\r\n      cli:splat('OUTPUT', '...', nil, 2)\r\n\r\n      assert_msg [==[\r\n        Usage: [--] [OUTPUT-1 [OUTPUT-2]]\r\n      ]==]\r\n    end)\r\n\r\n    it('prints a splat arg with reptitions > 2', function()\r\n      cli:splat('OUTPUT', '...', nil, 5)\r\n\r\n      assert_msg [==[\r\n        Usage: [--] [OUTPUT-1 [OUTPUT-2 [...]]]\r\n      ]==]\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 49,
    "text": "it('works with 0 arguments', function()\r\n      assert_msg 'Usage:'\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "it('works with 1 argument', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n\r\n      assert_msg [==[\r\n        Usage: [--] INPUT\r\n      ]==]\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "it('works with 2+ arguments', function()\r\n      cli:argument('INPUT', '...')\r\n      cli:argument('OUTPUT', '...')\r\n\r\n      assert_msg [==[\r\n        Usage: [--] INPUT OUTPUT\r\n      ]==]\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "it('prints the app name', function()\r\n      cli:set_name('foo')\r\n      assert_msg 'Usage: foo'\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "it('prints options', function()\r\n      cli:option('--foo=VALUE', '...')\r\n\r\n      assert_msg [==[\r\n        Usage: [OPTIONS]\r\n      ]==]\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "it('prints flags', function()\r\n      cli:flag('--foo', '...')\r\n\r\n      assert_msg [==[\r\n        Usage: [OPTIONS]\r\n      ]==]\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "it('prints a splat arg with reptitions == 1', function()\r\n      cli:splat('OUTPUT', '...', nil, 1)\r\n\r\n      assert_msg [==[\r\n        Usage: [--] [OUTPUT]\r\n      ]==]\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "it('prints a splat arg with reptitions == 2', function()\r\n      cli:splat('OUTPUT', '...', nil, 2)\r\n\r\n      assert_msg [==[\r\n        Usage: [--] [OUTPUT-1 [OUTPUT-2]]\r\n      ]==]\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "it('prints a splat arg with reptitions > 2', function()\r\n      cli:splat('OUTPUT', '...', nil, 5)\r\n\r\n      assert_msg [==[\r\n        Usage: [--] [OUTPUT-1 [OUTPUT-2 [...]]]\r\n      ]==]\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function()\r\n      assert_msg ''\r\n    end",
    "type": "function"
  }, {
    "id": 60,
    "text": "assert_msg ''",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n\r\n      assert_msg [==[\r\n        ARGUMENTS:\r\n          INPUT path to the input file (required)\r\n      ]==]\r\n    end",
    "type": "function"
  }, {
    "id": 63,
    "text": "assert_msg [==[\r\n        ARGUMENTS:\r\n          INPUT path to the input file (required)\r\n      ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n      cli:argument('OUTPUT', 'path to the output file')\r\n\r\n      assert_msg [==[\r\n        ARGUMENTS:\r\n          INPUT  path to the input file (required)\r\n          OUTPUT path to the output file (required)\r\n      ]==]\r\n    end",
    "type": "function"
  }, {
    "id": 66,
    "text": "cli:argument('OUTPUT', 'path to the output file')",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "assert_msg [==[\r\n        ARGUMENTS:\r\n          INPUT  path to the input file (required)\r\n          OUTPUT path to the output file (required)\r\n      ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use')\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use\r\n      ]==]\r\n    end",
    "type": "function"
  }, {
    "id": 70,
    "text": "cli:option('--compress=VALUE', 'compression algorithm to use')",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use\r\n      ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use', 'lzma')\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use (default: lzma)\r\n      ]==]\r\n    end",
    "type": "function"
  }, {
    "id": 74,
    "text": "cli:option('--compress=VALUE', 'compression algorithm to use', 'lzma')",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use (default: lzma)\r\n      ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use', { 'lzma' })\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use (default: [])\r\n      ]==]\r\n    end",
    "type": "function"
  }, {
    "id": 78,
    "text": "cli:option('--compress=VALUE', 'compression algorithm to use', { 'lzma' })",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use (default: [])\r\n      ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use')\r\n      cli:option('-u, --url=URL', '...')\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use\r\n          -u, --url=URL    ...\r\n      ]==]\r\n    end",
    "type": "function"
  }, {
    "id": 82,
    "text": "cli:option('-u, --url=URL', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use\r\n          -u, --url=URL    ...\r\n      ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function()\r\n        cli:flag('-q, --quiet', '...')\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            -q, --quiet ...\r\n        ]==]\r\n      end",
    "type": "function"
  }, {
    "id": 86,
    "text": "cli:flag('-q, --quiet', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "assert_msg [==[\r\n          OPTIONS:\r\n            -q, --quiet ...\r\n        ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function()\r\n      it('prints it under OPTIONS', function()\r\n        cli:flag('-q, --quiet', '...')\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            -q, --quiet ...\r\n        ]==]\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 90,
    "text": "it('prints it under OPTIONS', function()\r\n        cli:flag('-q, --quiet', '...')\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            -q, --quiet ...\r\n        ]==]\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function()\r\n        cli:flag('--quiet', '...', true)\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            --quiet ...\r\n        ]==]\r\n      end",
    "type": "function"
  }, {
    "id": 93,
    "text": "cli:flag('--quiet', '...', true)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "assert_msg [==[\r\n          OPTIONS:\r\n            --quiet ...\r\n        ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function()\r\n      it('does not print \"on\" or \"off\"', function()\r\n        cli:flag('--quiet', '...', true)\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            --quiet ...\r\n        ]==]\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 97,
    "text": "it('does not print \"on\" or \"off\"', function()\r\n        cli:flag('--quiet', '...', true)\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            --quiet ...\r\n        ]==]\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function()\r\n        cli:flag('--[no-]quiet', '...', true)\r\n        cli:flag('--[no-]debug', '...', false)\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            --[no-]quiet ... (default: on)\r\n            --[no-]debug ... (default: off)\r\n        ]==]\r\n      end",
    "type": "function"
  }, {
    "id": 100,
    "text": "cli:flag('--[no-]quiet', '...', true)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "cli:flag('--[no-]debug', '...', false)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "assert_msg [==[\r\n          OPTIONS:\r\n            --[no-]quiet ... (default: on)\r\n            --[no-]debug ... (default: off)\r\n        ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function()\r\n      it('prints it along with its default value', function()\r\n        cli:flag('--[no-]quiet', '...', true)\r\n        cli:flag('--[no-]debug', '...', false)\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            --[no-]quiet ... (default: on)\r\n            --[no-]debug ... (default: off)\r\n        ]==]\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 105,
    "text": "it('prints it along with its default value', function()\r\n        cli:flag('--[no-]quiet', '...', true)\r\n        cli:flag('--[no-]debug', '...', false)\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            --[no-]quiet ... (default: on)\r\n            --[no-]debug ... (default: off)\r\n        ]==]\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\")\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end",
    "type": "function"
  }, {
    "id": 108,
    "text": "cli:splat(\"INPUTS\", \"directories to read from\")",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\", nil, 3)\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end",
    "type": "function"
  }, {
    "id": 112,
    "text": "cli:splat(\"INPUTS\", \"directories to read from\", nil, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\")\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end",
    "type": "function"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\", 'foo')\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional, default: foo)\r\n        ]==]\r\n      end",
    "type": "function"
  }, {
    "id": 117,
    "text": "cli:splat(\"INPUTS\", \"directories to read from\", 'foo')",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional, default: foo)\r\n        ]==]",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function()\r\n      it('prints it with a repetition of 1', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\")\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)\r\n\r\n      it('prints it with a repetition of > 1', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\", nil, 3)\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)\r\n\r\n      it('prints it without a default value', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\")\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)\r\n\r\n      it('prints it with a default value', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\", 'foo')\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional, default: foo)\r\n        ]==]\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 121,
    "text": "it('prints it with a repetition of 1', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\")\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "it('prints it with a repetition of > 1', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\", nil, 3)\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "it('prints it without a default value', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\")\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 124,
    "text": "it('prints it with a default value', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\", 'foo')\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional, default: foo)\r\n        ]==]\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function()\r\n    local function assert_msg(expected_msg)\r\n      local actual_msg = cli.printer.generate_help()\r\n\r\n      assert.equal(trim(expected_msg), trim(actual_msg))\r\n    end\r\n\r\n    it('works with nothing', function()\r\n      assert_msg ''\r\n    end)\r\n\r\n    it('works with 1 argument', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n\r\n      assert_msg [==[\r\n        ARGUMENTS:\r\n          INPUT path to the input file (required)\r\n      ]==]\r\n    end)\r\n\r\n    it('works with 2+ arguments', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n      cli:argument('OUTPUT', 'path to the output file')\r\n\r\n      assert_msg [==[\r\n        ARGUMENTS:\r\n          INPUT  path to the input file (required)\r\n          OUTPUT path to the output file (required)\r\n      ]==]\r\n    end)\r\n\r\n    it('works with 1 option', function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use')\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use\r\n      ]==]\r\n    end)\r\n\r\n    it(\"prints an option's default value\", function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use', 'lzma')\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use (default: lzma)\r\n      ]==]\r\n    end)\r\n\r\n    it(\"prints a repeatable option\", function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use', { 'lzma' })\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use (default: [])\r\n      ]==]\r\n    end)\r\n\r\n    it('works with many options', function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use')\r\n      cli:option('-u, --url=URL', '...')\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use\r\n          -u, --url=URL    ...\r\n      ]==]\r\n    end)\r\n\r\n    context('given a flag', function()\r\n      it('prints it under OPTIONS', function()\r\n        cli:flag('-q, --quiet', '...')\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            -q, --quiet ...\r\n        ]==]\r\n      end)\r\n    end)\r\n\r\n    context('given a flag with a default value but is not negatable', function()\r\n      it('does not print \"on\" or \"off\"', function()\r\n        cli:flag('--quiet', '...', true)\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            --quiet ...\r\n        ]==]\r\n      end)\r\n    end)\r\n\r\n    context('given a negatable flag', function()\r\n      it('prints it along with its default value', function()\r\n        cli:flag('--[no-]quiet', '...', true)\r\n        cli:flag('--[no-]debug', '...', false)\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            --[no-]quiet ... (default: on)\r\n            --[no-]debug ... (default: off)\r\n        ]==]\r\n      end)\r\n    end)\r\n\r\n    context('given a splat arg', function()\r\n      it('prints it with a repetition of 1', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\")\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)\r\n\r\n      it('prints it with a repetition of > 1', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\", nil, 3)\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)\r\n\r\n      it('prints it without a default value', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\")\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)\r\n\r\n      it('prints it with a default value', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\", 'foo')\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional, default: foo)\r\n        ]==]\r\n      end)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 127,
    "text": "it('works with nothing', function()\r\n      assert_msg ''\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "it('works with 1 argument', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n\r\n      assert_msg [==[\r\n        ARGUMENTS:\r\n          INPUT path to the input file (required)\r\n      ]==]\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "it('works with 2+ arguments', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n      cli:argument('OUTPUT', 'path to the output file')\r\n\r\n      assert_msg [==[\r\n        ARGUMENTS:\r\n          INPUT  path to the input file (required)\r\n          OUTPUT path to the output file (required)\r\n      ]==]\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "it('works with 1 option', function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use')\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use\r\n      ]==]\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "it(\"prints an option's default value\", function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use', 'lzma')\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use (default: lzma)\r\n      ]==]\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "it(\"prints a repeatable option\", function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use', { 'lzma' })\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use (default: [])\r\n      ]==]\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "it('works with many options', function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use')\r\n      cli:option('-u, --url=URL', '...')\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use\r\n          -u, --url=URL    ...\r\n      ]==]\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "context('given a flag', function()\r\n      it('prints it under OPTIONS', function()\r\n        cli:flag('-q, --quiet', '...')\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            -q, --quiet ...\r\n        ]==]\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "context('given a flag with a default value but is not negatable', function()\r\n      it('does not print \"on\" or \"off\"', function()\r\n        cli:flag('--quiet', '...', true)\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            --quiet ...\r\n        ]==]\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "context('given a negatable flag', function()\r\n      it('prints it along with its default value', function()\r\n        cli:flag('--[no-]quiet', '...', true)\r\n        cli:flag('--[no-]debug', '...', false)\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            --[no-]quiet ... (default: on)\r\n            --[no-]debug ... (default: off)\r\n        ]==]\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "context('given a splat arg', function()\r\n      it('prints it with a repetition of 1', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\")\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)\r\n\r\n      it('prints it with a repetition of > 1', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\", nil, 3)\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)\r\n\r\n      it('prints it without a default value', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\")\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)\r\n\r\n      it('prints it with a default value', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\", 'foo')\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional, default: foo)\r\n        ]==]\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 139,
    "text": "function()\r\n      original_arg = _G['arg']\r\n      _G['arg'] = { 'spec/printer_spec.lua' }\r\n    end",
    "type": "function"
  }, {
    "id": 140,
    "text": "original_arg = _G['arg']",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "_G['arg'] = { 'spec/printer_spec.lua' }",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 143,
    "text": "function()\r\n      _G['arg'] = original_arg\r\n    end",
    "type": "function"
  }, {
    "id": 144,
    "text": "_G['arg'] = original_arg",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 146,
    "text": "function()\r\n      cli:argument('OUTPUT', '...')\r\n      cli:splat('INPUTS', '...', nil, 100)\r\n      cli:option('-c, --compress=VALUE', '...')\r\n      cli:flag('-q, --quiet', '...', true)\r\n\r\n      assert.equal(trim [==[\r\n        ======= Provided command line =============\r\n\r\n        Number of arguments:\r\n          1 = 'spec/printer_spec.lua'\r\n\r\n        ======= Parsed command line ===============\r\n\r\n        Arguments:\r\n          OUTPUT                 => 'nil'\r\n\r\n        Optional arguments:INPUTS; allowed are 100 arguments\r\n\r\n        Optional parameters:\r\n          -c, --compress=VALUE   => nil (nil)\r\n          -q, --quiet            => nil (nil)\r\n\r\n        ===========================================\r\n      ]==], trim(cli.printer.dump_internal_state({})))\r\n    end",
    "type": "function"
  }, {
    "id": 147,
    "text": "cli:splat('INPUTS', '...', nil, 100)",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "cli:option('-c, --compress=VALUE', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 149,
    "text": "cli:flag('-q, --quiet', '...', true)",
    "type": "statement:functioncall"
  }, {
    "id": 150,
    "text": "assert.equal(trim [==[\r\n        ======= Provided command line =============\r\n\r\n        Number of arguments:\r\n          1 = 'spec/printer_spec.lua'\r\n\r\n        ======= Parsed command line ===============\r\n\r\n        Arguments:\r\n          OUTPUT                 => 'nil'\r\n\r\n        Optional arguments:INPUTS; allowed are 100 arguments\r\n\r\n        Optional parameters:\r\n          -c, --compress=VALUE   => nil (nil)\r\n          -q, --quiet            => nil (nil)\r\n\r\n        ===========================================\r\n      ]==], trim(cli.printer.dump_internal_state({})))",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 152,
    "text": "function()\r\n      cli:splat('INPUTS', '...', nil, 1)\r\n      cli.printer.dump_internal_state({})\r\n    end",
    "type": "function"
  }, {
    "id": 153,
    "text": "cli:splat('INPUTS', '...', nil, 1)",
    "type": "statement:functioncall"
  }, {
    "id": 154,
    "text": "cli.printer.dump_internal_state({})",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "function()\r\n      cli:splat('INPUTS', '...', nil, 5)\r\n      cli.printer.dump_internal_state({})\r\n    end",
    "type": "function"
  }, {
    "id": 157,
    "text": "cli:splat('INPUTS', '...', nil, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 158,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 159,
    "text": "function()\r\n    local original_arg\r\n\r\n    before_each(function()\r\n      original_arg = _G['arg']\r\n      _G['arg'] = { 'spec/printer_spec.lua' }\r\n    end)\r\n\r\n    after_each(function()\r\n      _G['arg'] = original_arg\r\n    end)\r\n\r\n    it('works', function()\r\n      cli:argument('OUTPUT', '...')\r\n      cli:splat('INPUTS', '...', nil, 100)\r\n      cli:option('-c, --compress=VALUE', '...')\r\n      cli:flag('-q, --quiet', '...', true)\r\n\r\n      assert.equal(trim [==[\r\n        ======= Provided command line =============\r\n\r\n        Number of arguments:\r\n          1 = 'spec/printer_spec.lua'\r\n\r\n        ======= Parsed command line ===============\r\n\r\n        Arguments:\r\n          OUTPUT                 => 'nil'\r\n\r\n        Optional arguments:INPUTS; allowed are 100 arguments\r\n\r\n        Optional parameters:\r\n          -c, --compress=VALUE   => nil (nil)\r\n          -q, --quiet            => nil (nil)\r\n\r\n        ===========================================\r\n      ]==], trim(cli.printer.dump_internal_state({})))\r\n    end)\r\n\r\n    it('does not fail with an optarg of 1 reptitions', function()\r\n      cli:splat('INPUTS', '...', nil, 1)\r\n      cli.printer.dump_internal_state({})\r\n    end)\r\n\r\n    it('does not fail with an optarg of many reptitions', function()\r\n      cli:splat('INPUTS', '...', nil, 5)\r\n      cli.printer.dump_internal_state({})\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 160,
    "text": "local original_arg",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "before_each(function()\r\n      original_arg = _G['arg']\r\n      _G['arg'] = { 'spec/printer_spec.lua' }\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 162,
    "text": "after_each(function()\r\n      _G['arg'] = original_arg\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "it('works', function()\r\n      cli:argument('OUTPUT', '...')\r\n      cli:splat('INPUTS', '...', nil, 100)\r\n      cli:option('-c, --compress=VALUE', '...')\r\n      cli:flag('-q, --quiet', '...', true)\r\n\r\n      assert.equal(trim [==[\r\n        ======= Provided command line =============\r\n\r\n        Number of arguments:\r\n          1 = 'spec/printer_spec.lua'\r\n\r\n        ======= Parsed command line ===============\r\n\r\n        Arguments:\r\n          OUTPUT                 => 'nil'\r\n\r\n        Optional arguments:INPUTS; allowed are 100 arguments\r\n\r\n        Optional parameters:\r\n          -c, --compress=VALUE   => nil (nil)\r\n          -q, --quiet            => nil (nil)\r\n\r\n        ===========================================\r\n      ]==], trim(cli.printer.dump_internal_state({})))\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "it('does not fail with an optarg of 1 reptitions', function()\r\n      cli:splat('INPUTS', '...', nil, 1)\r\n      cli.printer.dump_internal_state({})\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "it('does not fail with an optarg of many reptitions', function()\r\n      cli:splat('INPUTS', '...', nil, 5)\r\n      cli.printer.dump_internal_state({})\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 166,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 167,
    "text": "function()\r\n  local cli\r\n\r\n  before_each(function()\r\n    cli = require(\"cliargs.core\")()\r\n  end)\r\n\r\n  describe('#generate_usage', function()\r\n    local function assert_msg(expected_msg)\r\n      local actual_msg = cli.printer.generate_usage()\r\n\r\n      assert.equal(trim(expected_msg), trim(actual_msg))\r\n    end\r\n\r\n    it('works with 0 arguments', function()\r\n      assert_msg 'Usage:'\r\n    end)\r\n\r\n    it('works with 1 argument', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n\r\n      assert_msg [==[\r\n        Usage: [--] INPUT\r\n      ]==]\r\n    end)\r\n\r\n    it('works with 2+ arguments', function()\r\n      cli:argument('INPUT', '...')\r\n      cli:argument('OUTPUT', '...')\r\n\r\n      assert_msg [==[\r\n        Usage: [--] INPUT OUTPUT\r\n      ]==]\r\n    end)\r\n\r\n    it('prints the app name', function()\r\n      cli:set_name('foo')\r\n      assert_msg 'Usage: foo'\r\n    end)\r\n\r\n    it('prints options', function()\r\n      cli:option('--foo=VALUE', '...')\r\n\r\n      assert_msg [==[\r\n        Usage: [OPTIONS]\r\n      ]==]\r\n    end)\r\n\r\n    it('prints flags', function()\r\n      cli:flag('--foo', '...')\r\n\r\n      assert_msg [==[\r\n        Usage: [OPTIONS]\r\n      ]==]\r\n    end)\r\n\r\n    it('prints a splat arg with reptitions == 1', function()\r\n      cli:splat('OUTPUT', '...', nil, 1)\r\n\r\n      assert_msg [==[\r\n        Usage: [--] [OUTPUT]\r\n      ]==]\r\n    end)\r\n\r\n    it('prints a splat arg with reptitions == 2', function()\r\n      cli:splat('OUTPUT', '...', nil, 2)\r\n\r\n      assert_msg [==[\r\n        Usage: [--] [OUTPUT-1 [OUTPUT-2]]\r\n      ]==]\r\n    end)\r\n\r\n    it('prints a splat arg with reptitions > 2', function()\r\n      cli:splat('OUTPUT', '...', nil, 5)\r\n\r\n      assert_msg [==[\r\n        Usage: [--] [OUTPUT-1 [OUTPUT-2 [...]]]\r\n      ]==]\r\n    end)\r\n  end)\r\n\r\n  describe('#generate_help', function()\r\n    local function assert_msg(expected_msg)\r\n      local actual_msg = cli.printer.generate_help()\r\n\r\n      assert.equal(trim(expected_msg), trim(actual_msg))\r\n    end\r\n\r\n    it('works with nothing', function()\r\n      assert_msg ''\r\n    end)\r\n\r\n    it('works with 1 argument', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n\r\n      assert_msg [==[\r\n        ARGUMENTS:\r\n          INPUT path to the input file (required)\r\n      ]==]\r\n    end)\r\n\r\n    it('works with 2+ arguments', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n      cli:argument('OUTPUT', 'path to the output file')\r\n\r\n      assert_msg [==[\r\n        ARGUMENTS:\r\n          INPUT  path to the input file (required)\r\n          OUTPUT path to the output file (required)\r\n      ]==]\r\n    end)\r\n\r\n    it('works with 1 option', function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use')\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use\r\n      ]==]\r\n    end)\r\n\r\n    it(\"prints an option's default value\", function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use', 'lzma')\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use (default: lzma)\r\n      ]==]\r\n    end)\r\n\r\n    it(\"prints a repeatable option\", function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use', { 'lzma' })\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use (default: [])\r\n      ]==]\r\n    end)\r\n\r\n    it('works with many options', function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use')\r\n      cli:option('-u, --url=URL', '...')\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use\r\n          -u, --url=URL    ...\r\n      ]==]\r\n    end)\r\n\r\n    context('given a flag', function()\r\n      it('prints it under OPTIONS', function()\r\n        cli:flag('-q, --quiet', '...')\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            -q, --quiet ...\r\n        ]==]\r\n      end)\r\n    end)\r\n\r\n    context('given a flag with a default value but is not negatable', function()\r\n      it('does not print \"on\" or \"off\"', function()\r\n        cli:flag('--quiet', '...', true)\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            --quiet ...\r\n        ]==]\r\n      end)\r\n    end)\r\n\r\n    context('given a negatable flag', function()\r\n      it('prints it along with its default value', function()\r\n        cli:flag('--[no-]quiet', '...', true)\r\n        cli:flag('--[no-]debug', '...', false)\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            --[no-]quiet ... (default: on)\r\n            --[no-]debug ... (default: off)\r\n        ]==]\r\n      end)\r\n    end)\r\n\r\n    context('given a splat arg', function()\r\n      it('prints it with a repetition of 1', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\")\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)\r\n\r\n      it('prints it with a repetition of > 1', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\", nil, 3)\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)\r\n\r\n      it('prints it without a default value', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\")\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)\r\n\r\n      it('prints it with a default value', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\", 'foo')\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional, default: foo)\r\n        ]==]\r\n      end)\r\n    end)\r\n  end)\r\n\r\n  describe('#dump_internal_state', function()\r\n    local original_arg\r\n\r\n    before_each(function()\r\n      original_arg = _G['arg']\r\n      _G['arg'] = { 'spec/printer_spec.lua' }\r\n    end)\r\n\r\n    after_each(function()\r\n      _G['arg'] = original_arg\r\n    end)\r\n\r\n    it('works', function()\r\n      cli:argument('OUTPUT', '...')\r\n      cli:splat('INPUTS', '...', nil, 100)\r\n      cli:option('-c, --compress=VALUE', '...')\r\n      cli:flag('-q, --quiet', '...', true)\r\n\r\n      assert.equal(trim [==[\r\n        ======= Provided command line =============\r\n\r\n        Number of arguments:\r\n          1 = 'spec/printer_spec.lua'\r\n\r\n        ======= Parsed command line ===============\r\n\r\n        Arguments:\r\n          OUTPUT                 => 'nil'\r\n\r\n        Optional arguments:INPUTS; allowed are 100 arguments\r\n\r\n        Optional parameters:\r\n          -c, --compress=VALUE   => nil (nil)\r\n          -q, --quiet            => nil (nil)\r\n\r\n        ===========================================\r\n      ]==], trim(cli.printer.dump_internal_state({})))\r\n    end)\r\n\r\n    it('does not fail with an optarg of 1 reptitions', function()\r\n      cli:splat('INPUTS', '...', nil, 1)\r\n      cli.printer.dump_internal_state({})\r\n    end)\r\n\r\n    it('does not fail with an optarg of many reptitions', function()\r\n      cli:splat('INPUTS', '...', nil, 5)\r\n      cli.printer.dump_internal_state({})\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 168,
    "text": "local cli",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "before_each(function()\r\n    cli = require(\"cliargs.core\")()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "describe('#generate_usage', function()\r\n    local function assert_msg(expected_msg)\r\n      local actual_msg = cli.printer.generate_usage()\r\n\r\n      assert.equal(trim(expected_msg), trim(actual_msg))\r\n    end\r\n\r\n    it('works with 0 arguments', function()\r\n      assert_msg 'Usage:'\r\n    end)\r\n\r\n    it('works with 1 argument', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n\r\n      assert_msg [==[\r\n        Usage: [--] INPUT\r\n      ]==]\r\n    end)\r\n\r\n    it('works with 2+ arguments', function()\r\n      cli:argument('INPUT', '...')\r\n      cli:argument('OUTPUT', '...')\r\n\r\n      assert_msg [==[\r\n        Usage: [--] INPUT OUTPUT\r\n      ]==]\r\n    end)\r\n\r\n    it('prints the app name', function()\r\n      cli:set_name('foo')\r\n      assert_msg 'Usage: foo'\r\n    end)\r\n\r\n    it('prints options', function()\r\n      cli:option('--foo=VALUE', '...')\r\n\r\n      assert_msg [==[\r\n        Usage: [OPTIONS]\r\n      ]==]\r\n    end)\r\n\r\n    it('prints flags', function()\r\n      cli:flag('--foo', '...')\r\n\r\n      assert_msg [==[\r\n        Usage: [OPTIONS]\r\n      ]==]\r\n    end)\r\n\r\n    it('prints a splat arg with reptitions == 1', function()\r\n      cli:splat('OUTPUT', '...', nil, 1)\r\n\r\n      assert_msg [==[\r\n        Usage: [--] [OUTPUT]\r\n      ]==]\r\n    end)\r\n\r\n    it('prints a splat arg with reptitions == 2', function()\r\n      cli:splat('OUTPUT', '...', nil, 2)\r\n\r\n      assert_msg [==[\r\n        Usage: [--] [OUTPUT-1 [OUTPUT-2]]\r\n      ]==]\r\n    end)\r\n\r\n    it('prints a splat arg with reptitions > 2', function()\r\n      cli:splat('OUTPUT', '...', nil, 5)\r\n\r\n      assert_msg [==[\r\n        Usage: [--] [OUTPUT-1 [OUTPUT-2 [...]]]\r\n      ]==]\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "describe('#generate_help', function()\r\n    local function assert_msg(expected_msg)\r\n      local actual_msg = cli.printer.generate_help()\r\n\r\n      assert.equal(trim(expected_msg), trim(actual_msg))\r\n    end\r\n\r\n    it('works with nothing', function()\r\n      assert_msg ''\r\n    end)\r\n\r\n    it('works with 1 argument', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n\r\n      assert_msg [==[\r\n        ARGUMENTS:\r\n          INPUT path to the input file (required)\r\n      ]==]\r\n    end)\r\n\r\n    it('works with 2+ arguments', function()\r\n      cli:argument('INPUT', 'path to the input file')\r\n      cli:argument('OUTPUT', 'path to the output file')\r\n\r\n      assert_msg [==[\r\n        ARGUMENTS:\r\n          INPUT  path to the input file (required)\r\n          OUTPUT path to the output file (required)\r\n      ]==]\r\n    end)\r\n\r\n    it('works with 1 option', function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use')\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use\r\n      ]==]\r\n    end)\r\n\r\n    it(\"prints an option's default value\", function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use', 'lzma')\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use (default: lzma)\r\n      ]==]\r\n    end)\r\n\r\n    it(\"prints a repeatable option\", function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use', { 'lzma' })\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use (default: [])\r\n      ]==]\r\n    end)\r\n\r\n    it('works with many options', function()\r\n      cli:option('--compress=VALUE', 'compression algorithm to use')\r\n      cli:option('-u, --url=URL', '...')\r\n\r\n      assert_msg [==[\r\n        OPTIONS:\r\n          --compress=VALUE compression algorithm to use\r\n          -u, --url=URL    ...\r\n      ]==]\r\n    end)\r\n\r\n    context('given a flag', function()\r\n      it('prints it under OPTIONS', function()\r\n        cli:flag('-q, --quiet', '...')\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            -q, --quiet ...\r\n        ]==]\r\n      end)\r\n    end)\r\n\r\n    context('given a flag with a default value but is not negatable', function()\r\n      it('does not print \"on\" or \"off\"', function()\r\n        cli:flag('--quiet', '...', true)\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            --quiet ...\r\n        ]==]\r\n      end)\r\n    end)\r\n\r\n    context('given a negatable flag', function()\r\n      it('prints it along with its default value', function()\r\n        cli:flag('--[no-]quiet', '...', true)\r\n        cli:flag('--[no-]debug', '...', false)\r\n\r\n        assert_msg [==[\r\n          OPTIONS:\r\n            --[no-]quiet ... (default: on)\r\n            --[no-]debug ... (default: off)\r\n        ]==]\r\n      end)\r\n    end)\r\n\r\n    context('given a splat arg', function()\r\n      it('prints it with a repetition of 1', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\")\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)\r\n\r\n      it('prints it with a repetition of > 1', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\", nil, 3)\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)\r\n\r\n      it('prints it without a default value', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\")\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional)\r\n        ]==]\r\n      end)\r\n\r\n      it('prints it with a default value', function()\r\n        cli:splat(\"INPUTS\", \"directories to read from\", 'foo')\r\n        assert_msg [==[\r\n          ARGUMENTS:\r\n            INPUTS directories to read from (optional, default: foo)\r\n        ]==]\r\n      end)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "describe('#dump_internal_state', function()\r\n    local original_arg\r\n\r\n    before_each(function()\r\n      original_arg = _G['arg']\r\n      _G['arg'] = { 'spec/printer_spec.lua' }\r\n    end)\r\n\r\n    after_each(function()\r\n      _G['arg'] = original_arg\r\n    end)\r\n\r\n    it('works', function()\r\n      cli:argument('OUTPUT', '...')\r\n      cli:splat('INPUTS', '...', nil, 100)\r\n      cli:option('-c, --compress=VALUE', '...')\r\n      cli:flag('-q, --quiet', '...', true)\r\n\r\n      assert.equal(trim [==[\r\n        ======= Provided command line =============\r\n\r\n        Number of arguments:\r\n          1 = 'spec/printer_spec.lua'\r\n\r\n        ======= Parsed command line ===============\r\n\r\n        Arguments:\r\n          OUTPUT                 => 'nil'\r\n\r\n        Optional arguments:INPUTS; allowed are 100 arguments\r\n\r\n        Optional parameters:\r\n          -c, --compress=VALUE   => nil (nil)\r\n          -q, --quiet            => nil (nil)\r\n\r\n        ===========================================\r\n      ]==], trim(cli.printer.dump_internal_state({})))\r\n    end)\r\n\r\n    it('does not fail with an optarg of 1 reptitions', function()\r\n      cli:splat('INPUTS', '...', nil, 1)\r\n      cli.printer.dump_internal_state({})\r\n    end)\r\n\r\n    it('does not fail with an optarg of many reptitions', function()\r\n      cli:splat('INPUTS', '...', nil, 5)\r\n      cli.printer.dump_internal_state({})\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 173,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 174,
    "text": "",
    "type": "function container"
  }, {
    "id": 175,
    "text": "printer.dump_internal_state",
    "type": "global function"
  }, {
    "id": 176,
    "text": "printer.generate_help",
    "type": "global function"
  }, {
    "id": 177,
    "text": "printer.generate_usage",
    "type": "global function"
  }, {
    "id": 178,
    "text": "context",
    "type": "global function"
  }, {
    "id": 179,
    "text": "it",
    "type": "global function"
  }, {
    "id": 180,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 181,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 182,
    "text": "after_each",
    "type": "global function"
  }, {
    "id": 183,
    "text": "require",
    "type": "global function"
  }, {
    "id": 184,
    "text": "trim",
    "type": "global function"
  }, {
    "id": 185,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 186,
    "text": "",
    "type": "variable container"
  }, {
    "id": 187,
    "text": "",
    "type": "require container"
  }, {
    "id": 188,
    "text": "",
    "type": "local variable"
  }, {
    "id": 189,
    "text": "",
    "type": "n/a"
  }, {
    "id": 190,
    "text": "",
    "type": "require local variable"
  } ]
}