{
  "_filename": "printer.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua_cliargs/src/cliargs/printer.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 6,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 6,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 8
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 9
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 21,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 21,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 21,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 21,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 21,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 8
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 23
  }, {
    "from": 39,
    "label": "has",
    "to": 24
  }, {
    "from": 39,
    "label": "has",
    "to": 10
  }, {
    "from": 39,
    "label": "has",
    "to": 9
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 39,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 39,
    "label": "has",
    "to": 50
  }, {
    "from": 39,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 39,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 39,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 39,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 39,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 39,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 78
  }, {
    "from": 39,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 8
  }, {
    "from": 79,
    "label": "has",
    "to": 23
  }, {
    "from": 79,
    "label": "has",
    "to": 24
  }, {
    "from": 79,
    "label": "has",
    "to": 9
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 40
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 79,
    "label": "has",
    "to": 84
  }, {
    "from": 79,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 79,
    "label": "has",
    "to": 87
  }, {
    "from": 79,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 79,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 79,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 79,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 79,
    "label": "has",
    "to": 101
  }, {
    "from": 79,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 103,
    "label": "has",
    "to": 108
  }, {
    "from": 103,
    "label": "has",
    "to": 109
  }, {
    "from": 79,
    "label": "has",
    "to": 110
  }, {
    "from": 79,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 111
  }, {
    "from": 111,
    "label": "has",
    "to": 40
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 111,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 5
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 7
  }, {
    "from": 117,
    "label": "has",
    "to": 8
  }, {
    "from": 117,
    "label": "has",
    "to": 9
  }, {
    "from": 117,
    "label": "has",
    "to": 10
  }, {
    "from": 117,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 117,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 117,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 117,
    "label": "has",
    "to": 5
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 8
  }, {
    "from": 119,
    "label": "has",
    "to": 22
  }, {
    "from": 119,
    "label": "has",
    "to": 23
  }, {
    "from": 119,
    "label": "has",
    "to": 24
  }, {
    "from": 119,
    "label": "has",
    "to": 9
  }, {
    "from": 119,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 119,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 119,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 119,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 119,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 119,
    "label": "has",
    "to": 5
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 40
  }, {
    "from": 121,
    "label": "has",
    "to": 8
  }, {
    "from": 121,
    "label": "has",
    "to": 41
  }, {
    "from": 121,
    "label": "has",
    "to": 42
  }, {
    "from": 121,
    "label": "has",
    "to": 23
  }, {
    "from": 121,
    "label": "has",
    "to": 24
  }, {
    "from": 121,
    "label": "has",
    "to": 10
  }, {
    "from": 121,
    "label": "has",
    "to": 9
  }, {
    "from": 121,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 121,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 121,
    "label": "has",
    "to": 50
  }, {
    "from": 121,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 121,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 121,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 121,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 121,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 63,
    "label": "has",
    "to": 69
  }, {
    "from": 121,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 72,
    "label": "has",
    "to": 78
  }, {
    "from": 121,
    "label": "has",
    "to": 5
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 44
  }, {
    "from": 123,
    "label": "has",
    "to": 45
  }, {
    "from": 123,
    "label": "has",
    "to": 46
  }, {
    "from": 123,
    "label": "has",
    "to": 47
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 8
  }, {
    "from": 125,
    "label": "has",
    "to": 23
  }, {
    "from": 125,
    "label": "has",
    "to": 24
  }, {
    "from": 125,
    "label": "has",
    "to": 9
  }, {
    "from": 125,
    "label": "has",
    "to": 80
  }, {
    "from": 125,
    "label": "has",
    "to": 40
  }, {
    "from": 125,
    "label": "has",
    "to": 81
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 125,
    "label": "has",
    "to": 83
  }, {
    "from": 125,
    "label": "has",
    "to": 84
  }, {
    "from": 125,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 125,
    "label": "has",
    "to": 87
  }, {
    "from": 125,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 125,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 125,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 125,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 125,
    "label": "has",
    "to": 101
  }, {
    "from": 125,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 103,
    "label": "has",
    "to": 108
  }, {
    "from": 103,
    "label": "has",
    "to": 109
  }, {
    "from": 125,
    "label": "has",
    "to": 110
  }, {
    "from": 125,
    "label": "has",
    "to": 5
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 82
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 40
  }, {
    "from": 129,
    "label": "has",
    "to": 112
  }, {
    "from": 129,
    "label": "has",
    "to": 113
  }, {
    "from": 129,
    "label": "has",
    "to": 5
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 117
  }, {
    "from": 2,
    "label": "calls",
    "to": 138
  }, {
    "from": 2,
    "label": "calls",
    "to": 133
  }, {
    "from": 2,
    "label": "calls",
    "to": 133
  }, {
    "from": 2,
    "label": "calls",
    "to": 133
  }, {
    "from": 2,
    "label": "calls",
    "to": 133
  }, {
    "from": 2,
    "label": "calls",
    "to": 133
  }, {
    "from": 2,
    "label": "calls",
    "to": 133
  }, {
    "from": 2,
    "label": "calls",
    "to": 133
  }, {
    "from": 2,
    "label": "calls",
    "to": 133
  }, {
    "from": 2,
    "label": "calls",
    "to": 133
  }, {
    "from": 2,
    "label": "calls",
    "to": 123
  }, {
    "from": 2,
    "label": "calls",
    "to": 123
  }, {
    "from": 2,
    "label": "calls",
    "to": 123
  }, {
    "from": 2,
    "label": "calls",
    "to": 123
  }, {
    "from": 2,
    "label": "calls",
    "to": 140
  }, {
    "from": 2,
    "label": "calls",
    "to": 127
  }, {
    "from": 2,
    "label": "calls",
    "to": 127
  }, {
    "from": 2,
    "label": "calls",
    "to": 127
  }, {
    "from": 2,
    "label": "calls",
    "to": 127
  }, {
    "from": 2,
    "label": "calls",
    "to": 127
  }, {
    "from": 2,
    "label": "calls",
    "to": 127
  }, {
    "from": 2,
    "label": "calls",
    "to": 127
  }, {
    "from": 2,
    "label": "calls",
    "to": 127
  }, {
    "from": 2,
    "label": "calls",
    "to": 127
  }, {
    "from": 2,
    "label": "calls",
    "to": 127
  }, {
    "from": 2,
    "label": "calls",
    "to": 127
  }, {
    "from": 2,
    "label": "calls",
    "to": 127
  }, {
    "from": 2,
    "label": "calls",
    "to": 132
  }, {
    "from": 2,
    "label": "calls",
    "to": 132
  }, {
    "from": 2,
    "label": "calls",
    "to": 132
  }, {
    "from": 2,
    "label": "calls",
    "to": 132
  }, {
    "from": 2,
    "label": "calls",
    "to": 132
  }, {
    "from": 2,
    "label": "calls",
    "to": 132
  }, {
    "from": 2,
    "label": "calls",
    "to": 132
  }, {
    "from": 2,
    "label": "calls",
    "to": 132
  }, {
    "from": 2,
    "label": "calls",
    "to": 132
  }, {
    "from": 2,
    "label": "calls",
    "to": 132
  }, {
    "from": 2,
    "label": "calls",
    "to": 134
  }, {
    "from": 2,
    "label": "calls",
    "to": 135
  }, {
    "from": 2,
    "label": "calls",
    "to": 135
  }, {
    "from": 2,
    "label": "calls",
    "to": 135
  }, {
    "from": 2,
    "label": "calls",
    "to": 135
  }, {
    "from": 2,
    "label": "calls",
    "to": 135
  }, {
    "from": 2,
    "label": "calls",
    "to": 135
  }, {
    "from": 2,
    "label": "calls",
    "to": 135
  }, {
    "from": 2,
    "label": "calls",
    "to": 135
  }, {
    "from": 2,
    "label": "calls",
    "to": 135
  }, {
    "from": 2,
    "label": "calls",
    "to": 135
  }, {
    "from": 2,
    "label": "calls",
    "to": 135
  }, {
    "from": 2,
    "label": "calls",
    "to": 135
  }, {
    "from": 131,
    "label": "calls",
    "to": 141
  }, {
    "from": 131,
    "label": "calls",
    "to": 141
  }, {
    "from": 131,
    "label": "calls",
    "to": 141
  }, {
    "from": 2,
    "label": "calls",
    "to": 139
  }, {
    "from": 2,
    "label": "calls",
    "to": 139
  }, {
    "from": 2,
    "label": "calls",
    "to": 139
  }, {
    "from": 2,
    "label": "calls",
    "to": 139
  }, {
    "from": 2,
    "label": "calls",
    "to": 136
  }, {
    "from": 2,
    "label": "calls",
    "to": 136
  }, {
    "from": 2,
    "label": "calls",
    "to": 136
  }, {
    "from": 2,
    "label": "calls",
    "to": 119
  }, {
    "from": 2,
    "label": "calls",
    "to": 137
  }, {
    "from": 2,
    "label": "calls",
    "to": 143
  }, {
    "from": 2,
    "label": "calls",
    "to": 143
  }, {
    "from": 2,
    "label": "calls",
    "to": 143
  }, {
    "from": 2,
    "label": "calls",
    "to": 143
  }, {
    "from": 2,
    "label": "calls",
    "to": 143
  }, {
    "from": 2,
    "label": "calls",
    "to": 143
  }, {
    "from": 2,
    "label": "calls",
    "to": 121
  }, {
    "from": 1,
    "label": "contains",
    "to": 131
  }, {
    "from": 131,
    "label": "declares",
    "to": 2
  }, {
    "from": 131,
    "label": "declares",
    "to": 115
  }, {
    "from": 131,
    "label": "declares",
    "to": 117
  }, {
    "from": 131,
    "label": "declares",
    "to": 119
  }, {
    "from": 131,
    "label": "declares",
    "to": 121
  }, {
    "from": 131,
    "label": "declares",
    "to": 123
  }, {
    "from": 131,
    "label": "declares",
    "to": 125
  }, {
    "from": 131,
    "label": "declares",
    "to": 127
  }, {
    "from": 131,
    "label": "declares",
    "to": 129
  }, {
    "from": 1,
    "label": "declares",
    "to": 142
  }, {
    "from": 1,
    "label": "declares",
    "to": 144
  }, {
    "from": 1,
    "label": "contains",
    "to": 148
  }, {
    "from": 1,
    "label": "contains",
    "to": 149
  }, {
    "from": 148,
    "label": "initializes",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 148,
    "label": "initializes",
    "to": 152
  }, {
    "from": 149,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "requires",
    "to": 146
  }, {
    "from": 149,
    "label": "initializes",
    "to": 154
  }, {
    "from": 154,
    "label": "requires",
    "to": 147
  }, {
    "from": 149,
    "label": "initializes",
    "to": 155
  }, {
    "from": 155,
    "label": "requires",
    "to": 156
  }, {
    "from": 1,
    "label": "provides",
    "to": 157
  }, {
    "from": 145,
    "label": "represents",
    "to": 158
  }, {
    "from": 157,
    "label": "provides",
    "to": 158
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "printer",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function create_printer(get_parser_state)\r\n  local printer = {}\r\n\r\n  function printer.print(msg)\r\n    return _G.print(msg)\r\n  end\r\n\r\n  local function get_max_label_length()\r\n    local maxsz = 0\r\n    local state = get_parser_state()\r\n    local optargument = filter(state.options, 'type', K.TYPE_SPLAT)[1]\r\n    local commands = filter(state.options, 'type', K.TYPE_COMMAND)\r\n\r\n    for _, entry in ipairs(commands) do\r\n      if #entry.__key__ > maxsz then\r\n        maxsz = #entry.__key__\r\n      end\r\n    end\r\n\r\n    for _,table_name in ipairs({\"options\"}) do\r\n      for _, entry in ipairs(state[table_name]) do\r\n        local key = entry.label or entry.key or entry.__key__\r\n\r\n        if #key > maxsz then\r\n          maxsz = #key\r\n        end\r\n      end\r\n    end\r\n\r\n    if optargument and #optargument.key > maxsz then\r\n      maxsz = #optargument.key\r\n    end\r\n\r\n    return maxsz\r\n  end\r\n\r\n  -- Generate the USAGE heading message.\r\n  function printer.generate_usage()\r\n    local state = get_parser_state()\r\n    local msg = \"Usage:\"\r\n\r\n    local required = filter(state.options, 'type', K.TYPE_ARGUMENT)\r\n    local optional = filter(state.options, 'type', K.TYPE_OPTION)\r\n    local optargument = filter(state.options, 'type', K.TYPE_SPLAT)[1]\r\n\r\n    if #state.name > 0 then\r\n      msg = msg .. ' ' .. tostring(state.name)\r\n    end\r\n\r\n    if #optional > 0 then\r\n      msg = msg .. \" [OPTIONS]\"\r\n    end\r\n\r\n    if #required > 0 or optargument then\r\n      msg = msg .. \" [--]\"\r\n    end\r\n\r\n    if #required > 0 then\r\n      for _,entry in ipairs(required) do\r\n        msg = msg .. \" \" .. entry.key\r\n      end\r\n    end\r\n\r\n    if optargument then\r\n      if optargument.maxcount == 1 then\r\n        msg = msg .. \" [\" .. optargument.key .. \"]\"\r\n      elseif optargument.maxcount == 2 then\r\n        msg = msg .. \" [\" .. optargument.key .. \"-1 [\" .. optargument.key .. \"-2]]\"\r\n      elseif optargument.maxcount > 2 then\r\n        msg = msg .. \" [\" .. optargument.key .. \"-1 [\" .. optargument.key .. \"-2 [...]]]\"\r\n      end\r\n    end\r\n\r\n    return msg\r\n  end\r\n\r\n  function printer.generate_help()\r\n    local msg = ''\r\n    local state = get_parser_state()\r\n    local col1 = state.colsz[1]\r\n    local col2 = state.colsz[2]\r\n    local required = filter(state.options, 'type', K.TYPE_ARGUMENT)\r\n    local optional = filter(state.options, 'type', K.TYPE_OPTION)\r\n    local commands = filter(state.options, 'type', K.TYPE_COMMAND)\r\n    local optargument = filter(state.options, 'type', K.TYPE_SPLAT)[1]\r\n\r\n    local function append(label, desc)\r\n      label = \"  \" .. label .. string.rep(\" \", col1 - (#label + 2))\r\n      desc = wordwrap(desc, col2)   -- word-wrap\r\n      desc = desc:gsub(\"\\n\", \"\\n\" .. string.rep(\" \", col1)) -- add padding\r\n\r\n      msg = msg .. label .. desc .. \"\\n\"\r\n    end\r\n\r\n    if col1 == 0 then\r\n      col1 = get_max_label_length(state)\r\n    end\r\n\r\n    -- add margins\r\n    col1 = col1 + 3\r\n\r\n    if col2 == 0 then\r\n      col2 = MAX_COLS - col1\r\n    end\r\n\r\n    if col2 < 10 then\r\n      col2 = 10\r\n    end\r\n\r\n    if #commands > 0 then\r\n      msg = msg .. \"\\nCOMMANDS: \\n\"\r\n\r\n      for _, entry in ipairs(commands) do\r\n        append(entry.__key__, entry.description or '')\r\n      end\r\n    end\r\n\r\n    if required[1] or optargument then\r\n      msg = msg .. \"\\nARGUMENTS: \\n\"\r\n\r\n      for _,entry in ipairs(required) do\r\n        append(entry.key, entry.desc .. \" (required)\")\r\n      end\r\n    end\r\n\r\n    if optargument then\r\n      local optarg_desc = ' ' .. optargument.desc\r\n      local default_value = optargument.maxcount > 1 and\r\n        optargument.default[1] or\r\n        optargument.default\r\n\r\n      if #optargument.default > 0 then\r\n        optarg_desc = optarg_desc .. \" (optional, default: \" .. tostring(default_value[1]) .. \")\"\r\n      else\r\n        optarg_desc = optarg_desc .. \" (optional)\"\r\n      end\r\n\r\n      append(optargument.key, optarg_desc)\r\n    end\r\n\r\n    if #optional > 0 then\r\n      msg = msg .. \"\\nOPTIONS: \\n\"\r\n\r\n      for _,entry in ipairs(optional) do\r\n        local desc = entry.desc\r\n        if not entry.flag and entry.default and #tostring(entry.default) > 0 then\r\n          local readable_default = type(entry.default) == \"table\" and \"[]\" or tostring(entry.default)\r\n          desc = desc .. \" (default: \" .. readable_default .. \")\"\r\n        elseif entry.flag and entry.negatable then\r\n          local readable_default = entry.default and 'on' or 'off'\r\n          desc = desc .. \" (default: \" .. readable_default .. \")\"\r\n        end\r\n        append(entry.label, desc)\r\n      end\r\n    end\r\n\r\n    return msg\r\n  end\r\n\r\n  function printer.dump_internal_state(values)\r\n    local state = get_parser_state()\r\n    local required = filter(state.options, 'type', K.TYPE_ARGUMENT)\r\n    local optional = filter(state.options, 'type', K.TYPE_OPTION)\r\n    local optargument = filter(state.options, 'type', K.TYPE_SPLAT)[1]\r\n    local maxlabel = get_max_label_length()\r\n    local msg = ''\r\n\r\n    local function print(fragment)\r\n      msg = msg .. fragment .. '\\n'\r\n    end\r\n\r\n    print(\"\\n======= Provided command line =============\")\r\n    print(\"\\nNumber of arguments: \", #arg)\r\n\r\n    for i,v in ipairs(arg) do -- use gloabl 'arg' not the modified local 'args'\r\n      print(string.format(\"%3i = '%s'\", i, v))\r\n    end\r\n\r\n    print(\"\\n======= Parsed command line ===============\")\r\n    if #required > 0 then print(\"\\nArguments:\") end\r\n    for _, entry in ipairs(required) do\r\n      print(\r\n        \"  \" ..\r\n        entry.key .. string.rep(\" \", maxlabel + 2 - #entry.key) ..\r\n        \" => '\" ..\r\n        tostring(values[entry]) ..\r\n        \"'\"\r\n      )\r\n    end\r\n\r\n    if optargument then\r\n      print(\r\n        \"\\nOptional arguments:\" ..\r\n        optargument.key ..\r\n        \"; allowed are \" ..\r\n        tostring(optargument.maxcount) ..\r\n        \" arguments\"\r\n      )\r\n\r\n      if optargument.maxcount == 1 then\r\n          print(\r\n            \"  \" .. optargument.key ..\r\n            string.rep(\" \", maxlabel + 2 - #optargument.key) ..\r\n            \" => '\" ..\r\n            optargument.key ..\r\n            \"'\"\r\n          )\r\n      else\r\n        for i = 1, optargument.maxcount do\r\n          if values[optargument] and values[optargument][i] then\r\n            print(\r\n              \"  \" .. tostring(i) ..\r\n              string.rep(\" \", maxlabel + 2 - #tostring(i)) ..\r\n              \" => '\" ..\r\n              tostring(values[optargument][i]) ..\r\n              \"'\"\r\n            )\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\n    if #optional > 0 then print(\"\\nOptional parameters:\") end\r\n    local doubles = {}\r\n    for _, entry in pairs(optional) do\r\n      if not doubles[entry] then\r\n        local value = values[entry]\r\n\r\n        if type(value) == \"string\" then\r\n          value = \"'\"..value..\"'\"\r\n        else\r\n          value = tostring(value) ..\" (\" .. type(value) .. \")\"\r\n        end\r\n\r\n        print(\"  \" .. entry.label .. string.rep(\" \", maxlabel + 2 - #entry.label) .. \" => \" .. value)\r\n\r\n        doubles[entry] = entry\r\n      end\r\n    end\r\n\r\n    print(\"\\n===========================================\\n\\n\")\r\n\r\n    return msg\r\n  end\r\n\r\n  function printer.generate_help_and_usage()\r\n    local msg = ''\r\n\r\n    msg = msg .. printer.generate_usage() .. '\\n'\r\n    msg = msg .. printer.generate_help()\r\n\r\n    return msg\r\n  end\r\n\r\n  return printer\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local printer = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "function printer.print(msg)\r\n    return _G.print(msg)\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "local function get_max_label_length()\r\n    local maxsz = 0\r\n    local state = get_parser_state()\r\n    local optargument = filter(state.options, 'type', K.TYPE_SPLAT)[1]\r\n    local commands = filter(state.options, 'type', K.TYPE_COMMAND)\r\n\r\n    for _, entry in ipairs(commands) do\r\n      if #entry.__key__ > maxsz then\r\n        maxsz = #entry.__key__\r\n      end\r\n    end\r\n\r\n    for _,table_name in ipairs({\"options\"}) do\r\n      for _, entry in ipairs(state[table_name]) do\r\n        local key = entry.label or entry.key or entry.__key__\r\n\r\n        if #key > maxsz then\r\n          maxsz = #key\r\n        end\r\n      end\r\n    end\r\n\r\n    if optargument and #optargument.key > maxsz then\r\n      maxsz = #optargument.key\r\n    end\r\n\r\n    return maxsz\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 7,
    "text": "local maxsz = 0",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local state = get_parser_state()",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local optargument = filter(state.options, 'type', K.TYPE_SPLAT)[1]",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "local commands = filter(state.options, 'type', K.TYPE_COMMAND)",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "for _, entry in ipairs(commands) do\r\n      if #entry.__key__ > maxsz then\r\n        maxsz = #entry.__key__\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 12,
    "text": "if #entry.__key__ > maxsz then\r\n        maxsz = #entry.__key__\r\n      end",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "maxsz = #entry.__key__",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "for _,table_name in ipairs({\"options\"}) do\r\n      for _, entry in ipairs(state[table_name]) do\r\n        local key = entry.label or entry.key or entry.__key__\r\n\r\n        if #key > maxsz then\r\n          maxsz = #key\r\n        end\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 15,
    "text": "for _, entry in ipairs(state[table_name]) do\r\n        local key = entry.label or entry.key or entry.__key__\r\n\r\n        if #key > maxsz then\r\n          maxsz = #key\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 16,
    "text": "local key = entry.label or entry.key or entry.__key__",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if #key > maxsz then\r\n          maxsz = #key\r\n        end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "maxsz = #key",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "if optargument and #optargument.key > maxsz then\r\n      maxsz = #optargument.key\r\n    end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "maxsz = #optargument.key",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "function printer.generate_usage()\r\n    local state = get_parser_state()\r\n    local msg = \"Usage:\"\r\n\r\n    local required = filter(state.options, 'type', K.TYPE_ARGUMENT)\r\n    local optional = filter(state.options, 'type', K.TYPE_OPTION)\r\n    local optargument = filter(state.options, 'type', K.TYPE_SPLAT)[1]\r\n\r\n    if #state.name > 0 then\r\n      msg = msg .. ' ' .. tostring(state.name)\r\n    end\r\n\r\n    if #optional > 0 then\r\n      msg = msg .. \" [OPTIONS]\"\r\n    end\r\n\r\n    if #required > 0 or optargument then\r\n      msg = msg .. \" [--]\"\r\n    end\r\n\r\n    if #required > 0 then\r\n      for _,entry in ipairs(required) do\r\n        msg = msg .. \" \" .. entry.key\r\n      end\r\n    end\r\n\r\n    if optargument then\r\n      if optargument.maxcount == 1 then\r\n        msg = msg .. \" [\" .. optargument.key .. \"]\"\r\n      elseif optargument.maxcount == 2 then\r\n        msg = msg .. \" [\" .. optargument.key .. \"-1 [\" .. optargument.key .. \"-2]]\"\r\n      elseif optargument.maxcount > 2 then\r\n        msg = msg .. \" [\" .. optargument.key .. \"-1 [\" .. optargument.key .. \"-2 [...]]]\"\r\n      end\r\n    end\r\n\r\n    return msg\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 22,
    "text": "local msg = \"Usage:\"",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local required = filter(state.options, 'type', K.TYPE_ARGUMENT)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local optional = filter(state.options, 'type', K.TYPE_OPTION)",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if #state.name > 0 then\r\n      msg = msg .. ' ' .. tostring(state.name)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "msg = msg .. ' ' .. tostring(state.name)",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "if #optional > 0 then\r\n      msg = msg .. \" [OPTIONS]\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "msg = msg .. \" [OPTIONS]\"",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "if #required > 0 or optargument then\r\n      msg = msg .. \" [--]\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "msg = msg .. \" [--]\"",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "if #required > 0 then\r\n      for _,entry in ipairs(required) do\r\n        msg = msg .. \" \" .. entry.key\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "for _,entry in ipairs(required) do\r\n        msg = msg .. \" \" .. entry.key\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 33,
    "text": "msg = msg .. \" \" .. entry.key",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "if optargument then\r\n      if optargument.maxcount == 1 then\r\n        msg = msg .. \" [\" .. optargument.key .. \"]\"\r\n      elseif optargument.maxcount == 2 then\r\n        msg = msg .. \" [\" .. optargument.key .. \"-1 [\" .. optargument.key .. \"-2]]\"\r\n      elseif optargument.maxcount > 2 then\r\n        msg = msg .. \" [\" .. optargument.key .. \"-1 [\" .. optargument.key .. \"-2 [...]]]\"\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "if optargument.maxcount == 1 then\r\n        msg = msg .. \" [\" .. optargument.key .. \"]\"\r\n      elseif optargument.maxcount == 2 then\r\n        msg = msg .. \" [\" .. optargument.key .. \"-1 [\" .. optargument.key .. \"-2]]\"\r\n      elseif optargument.maxcount > 2 then\r\n        msg = msg .. \" [\" .. optargument.key .. \"-1 [\" .. optargument.key .. \"-2 [...]]]\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "msg = msg .. \" [\" .. optargument.key .. \"]\"",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "msg = msg .. \" [\" .. optargument.key .. \"-1 [\" .. optargument.key .. \"-2]]\"",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "msg = msg .. \" [\" .. optargument.key .. \"-1 [\" .. optargument.key .. \"-2 [...]]]\"",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "function printer.generate_help()\r\n    local msg = ''\r\n    local state = get_parser_state()\r\n    local col1 = state.colsz[1]\r\n    local col2 = state.colsz[2]\r\n    local required = filter(state.options, 'type', K.TYPE_ARGUMENT)\r\n    local optional = filter(state.options, 'type', K.TYPE_OPTION)\r\n    local commands = filter(state.options, 'type', K.TYPE_COMMAND)\r\n    local optargument = filter(state.options, 'type', K.TYPE_SPLAT)[1]\r\n\r\n    local function append(label, desc)\r\n      label = \"  \" .. label .. string.rep(\" \", col1 - (#label + 2))\r\n      desc = wordwrap(desc, col2)   -- word-wrap\r\n      desc = desc:gsub(\"\\n\", \"\\n\" .. string.rep(\" \", col1)) -- add padding\r\n\r\n      msg = msg .. label .. desc .. \"\\n\"\r\n    end\r\n\r\n    if col1 == 0 then\r\n      col1 = get_max_label_length(state)\r\n    end\r\n\r\n    -- add margins\r\n    col1 = col1 + 3\r\n\r\n    if col2 == 0 then\r\n      col2 = MAX_COLS - col1\r\n    end\r\n\r\n    if col2 < 10 then\r\n      col2 = 10\r\n    end\r\n\r\n    if #commands > 0 then\r\n      msg = msg .. \"\\nCOMMANDS: \\n\"\r\n\r\n      for _, entry in ipairs(commands) do\r\n        append(entry.__key__, entry.description or '')\r\n      end\r\n    end\r\n\r\n    if required[1] or optargument then\r\n      msg = msg .. \"\\nARGUMENTS: \\n\"\r\n\r\n      for _,entry in ipairs(required) do\r\n        append(entry.key, entry.desc .. \" (required)\")\r\n      end\r\n    end\r\n\r\n    if optargument then\r\n      local optarg_desc = ' ' .. optargument.desc\r\n      local default_value = optargument.maxcount > 1 and\r\n        optargument.default[1] or\r\n        optargument.default\r\n\r\n      if #optargument.default > 0 then\r\n        optarg_desc = optarg_desc .. \" (optional, default: \" .. tostring(default_value[1]) .. \")\"\r\n      else\r\n        optarg_desc = optarg_desc .. \" (optional)\"\r\n      end\r\n\r\n      append(optargument.key, optarg_desc)\r\n    end\r\n\r\n    if #optional > 0 then\r\n      msg = msg .. \"\\nOPTIONS: \\n\"\r\n\r\n      for _,entry in ipairs(optional) do\r\n        local desc = entry.desc\r\n        if not entry.flag and entry.default and #tostring(entry.default) > 0 then\r\n          local readable_default = type(entry.default) == \"table\" and \"[]\" or tostring(entry.default)\r\n          desc = desc .. \" (default: \" .. readable_default .. \")\"\r\n        elseif entry.flag and entry.negatable then\r\n          local readable_default = entry.default and 'on' or 'off'\r\n          desc = desc .. \" (default: \" .. readable_default .. \")\"\r\n        end\r\n        append(entry.label, desc)\r\n      end\r\n    end\r\n\r\n    return msg\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 40,
    "text": "local msg = ''",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "local col1 = state.colsz[1]",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "local col2 = state.colsz[2]",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "local function append(label, desc)\r\n      label = \"  \" .. label .. string.rep(\" \", col1 - (#label + 2))\r\n      desc = wordwrap(desc, col2)   -- word-wrap\r\n      desc = desc:gsub(\"\\n\", \"\\n\" .. string.rep(\" \", col1)) -- add padding\r\n\r\n      msg = msg .. label .. desc .. \"\\n\"\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 44,
    "text": "label = \"  \" .. label .. string.rep(\" \", col1 - (#label + 2))",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "desc = wordwrap(desc, col2)",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "desc = desc:gsub(\"\\n\", \"\\n\" .. string.rep(\" \", col1))",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "msg = msg .. label .. desc .. \"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "if col1 == 0 then\r\n      col1 = get_max_label_length(state)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "col1 = get_max_label_length(state)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "col1 = col1 + 3",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "if col2 == 0 then\r\n      col2 = MAX_COLS - col1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "col2 = MAX_COLS - col1",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "if col2 < 10 then\r\n      col2 = 10\r\n    end",
    "type": "statement:if"
  }, {
    "id": 54,
    "text": "col2 = 10",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "if #commands > 0 then\r\n      msg = msg .. \"\\nCOMMANDS: \\n\"\r\n\r\n      for _, entry in ipairs(commands) do\r\n        append(entry.__key__, entry.description or '')\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "msg = msg .. \"\\nCOMMANDS: \\n\"",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "for _, entry in ipairs(commands) do\r\n        append(entry.__key__, entry.description or '')\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 58,
    "text": "append(entry.__key__, entry.description or '')",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "if required[1] or optargument then\r\n      msg = msg .. \"\\nARGUMENTS: \\n\"\r\n\r\n      for _,entry in ipairs(required) do\r\n        append(entry.key, entry.desc .. \" (required)\")\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "msg = msg .. \"\\nARGUMENTS: \\n\"",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "for _,entry in ipairs(required) do\r\n        append(entry.key, entry.desc .. \" (required)\")\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 62,
    "text": "append(entry.key, entry.desc .. \" (required)\")",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "if optargument then\r\n      local optarg_desc = ' ' .. optargument.desc\r\n      local default_value = optargument.maxcount > 1 and\r\n        optargument.default[1] or\r\n        optargument.default\r\n\r\n      if #optargument.default > 0 then\r\n        optarg_desc = optarg_desc .. \" (optional, default: \" .. tostring(default_value[1]) .. \")\"\r\n      else\r\n        optarg_desc = optarg_desc .. \" (optional)\"\r\n      end\r\n\r\n      append(optargument.key, optarg_desc)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 64,
    "text": "local optarg_desc = ' ' .. optargument.desc",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local default_value = optargument.maxcount > 1 and\r\n        optargument.default[1] or\r\n        optargument.default",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "if #optargument.default > 0 then\r\n        optarg_desc = optarg_desc .. \" (optional, default: \" .. tostring(default_value[1]) .. \")\"\r\n      else\r\n        optarg_desc = optarg_desc .. \" (optional)\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 67,
    "text": "optarg_desc = optarg_desc .. \" (optional, default: \" .. tostring(default_value[1]) .. \")\"",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "optarg_desc = optarg_desc .. \" (optional)\"",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "append(optargument.key, optarg_desc)",
    "type": "statement:functioncall"
  }, {
    "id": 70,
    "text": "if #optional > 0 then\r\n      msg = msg .. \"\\nOPTIONS: \\n\"\r\n\r\n      for _,entry in ipairs(optional) do\r\n        local desc = entry.desc\r\n        if not entry.flag and entry.default and #tostring(entry.default) > 0 then\r\n          local readable_default = type(entry.default) == \"table\" and \"[]\" or tostring(entry.default)\r\n          desc = desc .. \" (default: \" .. readable_default .. \")\"\r\n        elseif entry.flag and entry.negatable then\r\n          local readable_default = entry.default and 'on' or 'off'\r\n          desc = desc .. \" (default: \" .. readable_default .. \")\"\r\n        end\r\n        append(entry.label, desc)\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 71,
    "text": "msg = msg .. \"\\nOPTIONS: \\n\"",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "for _,entry in ipairs(optional) do\r\n        local desc = entry.desc\r\n        if not entry.flag and entry.default and #tostring(entry.default) > 0 then\r\n          local readable_default = type(entry.default) == \"table\" and \"[]\" or tostring(entry.default)\r\n          desc = desc .. \" (default: \" .. readable_default .. \")\"\r\n        elseif entry.flag and entry.negatable then\r\n          local readable_default = entry.default and 'on' or 'off'\r\n          desc = desc .. \" (default: \" .. readable_default .. \")\"\r\n        end\r\n        append(entry.label, desc)\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 73,
    "text": "local desc = entry.desc",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "if not entry.flag and entry.default and #tostring(entry.default) > 0 then\r\n          local readable_default = type(entry.default) == \"table\" and \"[]\" or tostring(entry.default)\r\n          desc = desc .. \" (default: \" .. readable_default .. \")\"\r\n        elseif entry.flag and entry.negatable then\r\n          local readable_default = entry.default and 'on' or 'off'\r\n          desc = desc .. \" (default: \" .. readable_default .. \")\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "local readable_default = type(entry.default) == \"table\" and \"[]\" or tostring(entry.default)",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "desc = desc .. \" (default: \" .. readable_default .. \")\"",
    "type": "statement:assign"
  }, {
    "id": 77,
    "text": "local readable_default = entry.default and 'on' or 'off'",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "append(entry.label, desc)",
    "type": "statement:functioncall"
  }, {
    "id": 79,
    "text": "function printer.dump_internal_state(values)\r\n    local state = get_parser_state()\r\n    local required = filter(state.options, 'type', K.TYPE_ARGUMENT)\r\n    local optional = filter(state.options, 'type', K.TYPE_OPTION)\r\n    local optargument = filter(state.options, 'type', K.TYPE_SPLAT)[1]\r\n    local maxlabel = get_max_label_length()\r\n    local msg = ''\r\n\r\n    local function print(fragment)\r\n      msg = msg .. fragment .. '\\n'\r\n    end\r\n\r\n    print(\"\\n======= Provided command line =============\")\r\n    print(\"\\nNumber of arguments: \", #arg)\r\n\r\n    for i,v in ipairs(arg) do -- use gloabl 'arg' not the modified local 'args'\r\n      print(string.format(\"%3i = '%s'\", i, v))\r\n    end\r\n\r\n    print(\"\\n======= Parsed command line ===============\")\r\n    if #required > 0 then print(\"\\nArguments:\") end\r\n    for _, entry in ipairs(required) do\r\n      print(\r\n        \"  \" ..\r\n        entry.key .. string.rep(\" \", maxlabel + 2 - #entry.key) ..\r\n        \" => '\" ..\r\n        tostring(values[entry]) ..\r\n        \"'\"\r\n      )\r\n    end\r\n\r\n    if optargument then\r\n      print(\r\n        \"\\nOptional arguments:\" ..\r\n        optargument.key ..\r\n        \"; allowed are \" ..\r\n        tostring(optargument.maxcount) ..\r\n        \" arguments\"\r\n      )\r\n\r\n      if optargument.maxcount == 1 then\r\n          print(\r\n            \"  \" .. optargument.key ..\r\n            string.rep(\" \", maxlabel + 2 - #optargument.key) ..\r\n            \" => '\" ..\r\n            optargument.key ..\r\n            \"'\"\r\n          )\r\n      else\r\n        for i = 1, optargument.maxcount do\r\n          if values[optargument] and values[optargument][i] then\r\n            print(\r\n              \"  \" .. tostring(i) ..\r\n              string.rep(\" \", maxlabel + 2 - #tostring(i)) ..\r\n              \" => '\" ..\r\n              tostring(values[optargument][i]) ..\r\n              \"'\"\r\n            )\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\n    if #optional > 0 then print(\"\\nOptional parameters:\") end\r\n    local doubles = {}\r\n    for _, entry in pairs(optional) do\r\n      if not doubles[entry] then\r\n        local value = values[entry]\r\n\r\n        if type(value) == \"string\" then\r\n          value = \"'\"..value..\"'\"\r\n        else\r\n          value = tostring(value) ..\" (\" .. type(value) .. \")\"\r\n        end\r\n\r\n        print(\"  \" .. entry.label .. string.rep(\" \", maxlabel + 2 - #entry.label) .. \" => \" .. value)\r\n\r\n        doubles[entry] = entry\r\n      end\r\n    end\r\n\r\n    print(\"\\n===========================================\\n\\n\")\r\n\r\n    return msg\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 80,
    "text": "local maxlabel = get_max_label_length()",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "local function print(fragment)\r\n      msg = msg .. fragment .. '\\n'\r\n    end",
    "type": "statement:localfunction"
  }, {
    "id": 82,
    "text": "msg = msg .. fragment .. '\\n'",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "print(\"\\n======= Provided command line =============\")",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "print(\"\\nNumber of arguments: \", #arg)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "for i,v in ipairs(arg) do -- use gloabl 'arg' not the modified local 'args'\r\n      print(string.format(\"%3i = '%s'\", i, v))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 86,
    "text": "print(string.format(\"%3i = '%s'\", i, v))",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "print(\"\\n======= Parsed command line ===============\")",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "if #required > 0 then print(\"\\nArguments:\") end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "print(\"\\nArguments:\")",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "for _, entry in ipairs(required) do\r\n      print(\r\n        \"  \" ..\r\n        entry.key .. string.rep(\" \", maxlabel + 2 - #entry.key) ..\r\n        \" => '\" ..\r\n        tostring(values[entry]) ..\r\n        \"'\"\r\n      )\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 91,
    "text": "print(\r\n        \"  \" ..\r\n        entry.key .. string.rep(\" \", maxlabel + 2 - #entry.key) ..\r\n        \" => '\" ..\r\n        tostring(values[entry]) ..\r\n        \"'\"\r\n      )",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "if optargument then\r\n      print(\r\n        \"\\nOptional arguments:\" ..\r\n        optargument.key ..\r\n        \"; allowed are \" ..\r\n        tostring(optargument.maxcount) ..\r\n        \" arguments\"\r\n      )\r\n\r\n      if optargument.maxcount == 1 then\r\n          print(\r\n            \"  \" .. optargument.key ..\r\n            string.rep(\" \", maxlabel + 2 - #optargument.key) ..\r\n            \" => '\" ..\r\n            optargument.key ..\r\n            \"'\"\r\n          )\r\n      else\r\n        for i = 1, optargument.maxcount do\r\n          if values[optargument] and values[optargument][i] then\r\n            print(\r\n              \"  \" .. tostring(i) ..\r\n              string.rep(\" \", maxlabel + 2 - #tostring(i)) ..\r\n              \" => '\" ..\r\n              tostring(values[optargument][i]) ..\r\n              \"'\"\r\n            )\r\n          end\r\n        end\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "print(\r\n        \"\\nOptional arguments:\" ..\r\n        optargument.key ..\r\n        \"; allowed are \" ..\r\n        tostring(optargument.maxcount) ..\r\n        \" arguments\"\r\n      )",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "if optargument.maxcount == 1 then\r\n          print(\r\n            \"  \" .. optargument.key ..\r\n            string.rep(\" \", maxlabel + 2 - #optargument.key) ..\r\n            \" => '\" ..\r\n            optargument.key ..\r\n            \"'\"\r\n          )\r\n      else\r\n        for i = 1, optargument.maxcount do\r\n          if values[optargument] and values[optargument][i] then\r\n            print(\r\n              \"  \" .. tostring(i) ..\r\n              string.rep(\" \", maxlabel + 2 - #tostring(i)) ..\r\n              \" => '\" ..\r\n              tostring(values[optargument][i]) ..\r\n              \"'\"\r\n            )\r\n          end\r\n        end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 95,
    "text": "print(\r\n            \"  \" .. optargument.key ..\r\n            string.rep(\" \", maxlabel + 2 - #optargument.key) ..\r\n            \" => '\" ..\r\n            optargument.key ..\r\n            \"'\"\r\n          )",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "for i = 1, optargument.maxcount do\r\n          if values[optargument] and values[optargument][i] then\r\n            print(\r\n              \"  \" .. tostring(i) ..\r\n              string.rep(\" \", maxlabel + 2 - #tostring(i)) ..\r\n              \" => '\" ..\r\n              tostring(values[optargument][i]) ..\r\n              \"'\"\r\n            )\r\n          end\r\n        end",
    "type": "statement:numericfor"
  }, {
    "id": 97,
    "text": "if values[optargument] and values[optargument][i] then\r\n            print(\r\n              \"  \" .. tostring(i) ..\r\n              string.rep(\" \", maxlabel + 2 - #tostring(i)) ..\r\n              \" => '\" ..\r\n              tostring(values[optargument][i]) ..\r\n              \"'\"\r\n            )\r\n          end",
    "type": "statement:if"
  }, {
    "id": 98,
    "text": "print(\r\n              \"  \" .. tostring(i) ..\r\n              string.rep(\" \", maxlabel + 2 - #tostring(i)) ..\r\n              \" => '\" ..\r\n              tostring(values[optargument][i]) ..\r\n              \"'\"\r\n            )",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "if #optional > 0 then print(\"\\nOptional parameters:\") end",
    "type": "statement:if"
  }, {
    "id": 100,
    "text": "print(\"\\nOptional parameters:\")",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "local doubles = {}",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "for _, entry in pairs(optional) do\r\n      if not doubles[entry] then\r\n        local value = values[entry]\r\n\r\n        if type(value) == \"string\" then\r\n          value = \"'\"..value..\"'\"\r\n        else\r\n          value = tostring(value) ..\" (\" .. type(value) .. \")\"\r\n        end\r\n\r\n        print(\"  \" .. entry.label .. string.rep(\" \", maxlabel + 2 - #entry.label) .. \" => \" .. value)\r\n\r\n        doubles[entry] = entry\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 103,
    "text": "if not doubles[entry] then\r\n        local value = values[entry]\r\n\r\n        if type(value) == \"string\" then\r\n          value = \"'\"..value..\"'\"\r\n        else\r\n          value = tostring(value) ..\" (\" .. type(value) .. \")\"\r\n        end\r\n\r\n        print(\"  \" .. entry.label .. string.rep(\" \", maxlabel + 2 - #entry.label) .. \" => \" .. value)\r\n\r\n        doubles[entry] = entry\r\n      end",
    "type": "statement:if"
  }, {
    "id": 104,
    "text": "local value = values[entry]",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "if type(value) == \"string\" then\r\n          value = \"'\"..value..\"'\"\r\n        else\r\n          value = tostring(value) ..\" (\" .. type(value) .. \")\"\r\n        end",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "value = \"'\"..value..\"'\"",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "value = tostring(value) ..\" (\" .. type(value) .. \")\"",
    "type": "statement:assign"
  }, {
    "id": 108,
    "text": "print(\"  \" .. entry.label .. string.rep(\" \", maxlabel + 2 - #entry.label) .. \" => \" .. value)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "doubles[entry] = entry",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "print(\"\\n===========================================\\n\\n\")",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "function printer.generate_help_and_usage()\r\n    local msg = ''\r\n\r\n    msg = msg .. printer.generate_usage() .. '\\n'\r\n    msg = msg .. printer.generate_help()\r\n\r\n    return msg\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 112,
    "text": "msg = msg .. printer.generate_usage() .. '\\n'",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "msg = msg .. printer.generate_help()",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function printer.print(msg)\r\n    return _G.print(msg)\r\n  end",
    "type": "function"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "local function get_max_label_length()\r\n    local maxsz = 0\r\n    local state = get_parser_state()\r\n    local optargument = filter(state.options, 'type', K.TYPE_SPLAT)[1]\r\n    local commands = filter(state.options, 'type', K.TYPE_COMMAND)\r\n\r\n    for _, entry in ipairs(commands) do\r\n      if #entry.__key__ > maxsz then\r\n        maxsz = #entry.__key__\r\n      end\r\n    end\r\n\r\n    for _,table_name in ipairs({\"options\"}) do\r\n      for _, entry in ipairs(state[table_name]) do\r\n        local key = entry.label or entry.key or entry.__key__\r\n\r\n        if #key > maxsz then\r\n          maxsz = #key\r\n        end\r\n      end\r\n    end\r\n\r\n    if optargument and #optargument.key > maxsz then\r\n      maxsz = #optargument.key\r\n    end\r\n\r\n    return maxsz\r\n  end",
    "type": "function"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function printer.generate_usage()\r\n    local state = get_parser_state()\r\n    local msg = \"Usage:\"\r\n\r\n    local required = filter(state.options, 'type', K.TYPE_ARGUMENT)\r\n    local optional = filter(state.options, 'type', K.TYPE_OPTION)\r\n    local optargument = filter(state.options, 'type', K.TYPE_SPLAT)[1]\r\n\r\n    if #state.name > 0 then\r\n      msg = msg .. ' ' .. tostring(state.name)\r\n    end\r\n\r\n    if #optional > 0 then\r\n      msg = msg .. \" [OPTIONS]\"\r\n    end\r\n\r\n    if #required > 0 or optargument then\r\n      msg = msg .. \" [--]\"\r\n    end\r\n\r\n    if #required > 0 then\r\n      for _,entry in ipairs(required) do\r\n        msg = msg .. \" \" .. entry.key\r\n      end\r\n    end\r\n\r\n    if optargument then\r\n      if optargument.maxcount == 1 then\r\n        msg = msg .. \" [\" .. optargument.key .. \"]\"\r\n      elseif optargument.maxcount == 2 then\r\n        msg = msg .. \" [\" .. optargument.key .. \"-1 [\" .. optargument.key .. \"-2]]\"\r\n      elseif optargument.maxcount > 2 then\r\n        msg = msg .. \" [\" .. optargument.key .. \"-1 [\" .. optargument.key .. \"-2 [...]]]\"\r\n      end\r\n    end\r\n\r\n    return msg\r\n  end",
    "type": "function"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function printer.generate_help()\r\n    local msg = ''\r\n    local state = get_parser_state()\r\n    local col1 = state.colsz[1]\r\n    local col2 = state.colsz[2]\r\n    local required = filter(state.options, 'type', K.TYPE_ARGUMENT)\r\n    local optional = filter(state.options, 'type', K.TYPE_OPTION)\r\n    local commands = filter(state.options, 'type', K.TYPE_COMMAND)\r\n    local optargument = filter(state.options, 'type', K.TYPE_SPLAT)[1]\r\n\r\n    local function append(label, desc)\r\n      label = \"  \" .. label .. string.rep(\" \", col1 - (#label + 2))\r\n      desc = wordwrap(desc, col2)   -- word-wrap\r\n      desc = desc:gsub(\"\\n\", \"\\n\" .. string.rep(\" \", col1)) -- add padding\r\n\r\n      msg = msg .. label .. desc .. \"\\n\"\r\n    end\r\n\r\n    if col1 == 0 then\r\n      col1 = get_max_label_length(state)\r\n    end\r\n\r\n    -- add margins\r\n    col1 = col1 + 3\r\n\r\n    if col2 == 0 then\r\n      col2 = MAX_COLS - col1\r\n    end\r\n\r\n    if col2 < 10 then\r\n      col2 = 10\r\n    end\r\n\r\n    if #commands > 0 then\r\n      msg = msg .. \"\\nCOMMANDS: \\n\"\r\n\r\n      for _, entry in ipairs(commands) do\r\n        append(entry.__key__, entry.description or '')\r\n      end\r\n    end\r\n\r\n    if required[1] or optargument then\r\n      msg = msg .. \"\\nARGUMENTS: \\n\"\r\n\r\n      for _,entry in ipairs(required) do\r\n        append(entry.key, entry.desc .. \" (required)\")\r\n      end\r\n    end\r\n\r\n    if optargument then\r\n      local optarg_desc = ' ' .. optargument.desc\r\n      local default_value = optargument.maxcount > 1 and\r\n        optargument.default[1] or\r\n        optargument.default\r\n\r\n      if #optargument.default > 0 then\r\n        optarg_desc = optarg_desc .. \" (optional, default: \" .. tostring(default_value[1]) .. \")\"\r\n      else\r\n        optarg_desc = optarg_desc .. \" (optional)\"\r\n      end\r\n\r\n      append(optargument.key, optarg_desc)\r\n    end\r\n\r\n    if #optional > 0 then\r\n      msg = msg .. \"\\nOPTIONS: \\n\"\r\n\r\n      for _,entry in ipairs(optional) do\r\n        local desc = entry.desc\r\n        if not entry.flag and entry.default and #tostring(entry.default) > 0 then\r\n          local readable_default = type(entry.default) == \"table\" and \"[]\" or tostring(entry.default)\r\n          desc = desc .. \" (default: \" .. readable_default .. \")\"\r\n        elseif entry.flag and entry.negatable then\r\n          local readable_default = entry.default and 'on' or 'off'\r\n          desc = desc .. \" (default: \" .. readable_default .. \")\"\r\n        end\r\n        append(entry.label, desc)\r\n      end\r\n    end\r\n\r\n    return msg\r\n  end",
    "type": "function"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "local function append(label, desc)\r\n      label = \"  \" .. label .. string.rep(\" \", col1 - (#label + 2))\r\n      desc = wordwrap(desc, col2)   -- word-wrap\r\n      desc = desc:gsub(\"\\n\", \"\\n\" .. string.rep(\" \", col1)) -- add padding\r\n\r\n      msg = msg .. label .. desc .. \"\\n\"\r\n    end",
    "type": "function"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function printer.dump_internal_state(values)\r\n    local state = get_parser_state()\r\n    local required = filter(state.options, 'type', K.TYPE_ARGUMENT)\r\n    local optional = filter(state.options, 'type', K.TYPE_OPTION)\r\n    local optargument = filter(state.options, 'type', K.TYPE_SPLAT)[1]\r\n    local maxlabel = get_max_label_length()\r\n    local msg = ''\r\n\r\n    local function print(fragment)\r\n      msg = msg .. fragment .. '\\n'\r\n    end\r\n\r\n    print(\"\\n======= Provided command line =============\")\r\n    print(\"\\nNumber of arguments: \", #arg)\r\n\r\n    for i,v in ipairs(arg) do -- use gloabl 'arg' not the modified local 'args'\r\n      print(string.format(\"%3i = '%s'\", i, v))\r\n    end\r\n\r\n    print(\"\\n======= Parsed command line ===============\")\r\n    if #required > 0 then print(\"\\nArguments:\") end\r\n    for _, entry in ipairs(required) do\r\n      print(\r\n        \"  \" ..\r\n        entry.key .. string.rep(\" \", maxlabel + 2 - #entry.key) ..\r\n        \" => '\" ..\r\n        tostring(values[entry]) ..\r\n        \"'\"\r\n      )\r\n    end\r\n\r\n    if optargument then\r\n      print(\r\n        \"\\nOptional arguments:\" ..\r\n        optargument.key ..\r\n        \"; allowed are \" ..\r\n        tostring(optargument.maxcount) ..\r\n        \" arguments\"\r\n      )\r\n\r\n      if optargument.maxcount == 1 then\r\n          print(\r\n            \"  \" .. optargument.key ..\r\n            string.rep(\" \", maxlabel + 2 - #optargument.key) ..\r\n            \" => '\" ..\r\n            optargument.key ..\r\n            \"'\"\r\n          )\r\n      else\r\n        for i = 1, optargument.maxcount do\r\n          if values[optargument] and values[optargument][i] then\r\n            print(\r\n              \"  \" .. tostring(i) ..\r\n              string.rep(\" \", maxlabel + 2 - #tostring(i)) ..\r\n              \" => '\" ..\r\n              tostring(values[optargument][i]) ..\r\n              \"'\"\r\n            )\r\n          end\r\n        end\r\n      end\r\n    end\r\n\r\n    if #optional > 0 then print(\"\\nOptional parameters:\") end\r\n    local doubles = {}\r\n    for _, entry in pairs(optional) do\r\n      if not doubles[entry] then\r\n        local value = values[entry]\r\n\r\n        if type(value) == \"string\" then\r\n          value = \"'\"..value..\"'\"\r\n        else\r\n          value = tostring(value) ..\" (\" .. type(value) .. \")\"\r\n        end\r\n\r\n        print(\"  \" .. entry.label .. string.rep(\" \", maxlabel + 2 - #entry.label) .. \" => \" .. value)\r\n\r\n        doubles[entry] = entry\r\n      end\r\n    end\r\n\r\n    print(\"\\n===========================================\\n\\n\")\r\n\r\n    return msg\r\n  end",
    "type": "function"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "local function print(fragment)\r\n      msg = msg .. fragment .. '\\n'\r\n    end",
    "type": "function"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function printer.generate_help_and_usage()\r\n    local msg = ''\r\n\r\n    msg = msg .. printer.generate_usage() .. '\\n'\r\n    msg = msg .. printer.generate_help()\r\n\r\n    return msg\r\n  end",
    "type": "function"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "",
    "type": "function container"
  }, {
    "id": 132,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 133,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 134,
    "text": "wordwrap",
    "type": "global function"
  }, {
    "id": 135,
    "text": "filter",
    "type": "global function"
  }, {
    "id": 136,
    "text": "type",
    "type": "global function"
  }, {
    "id": 137,
    "text": "print",
    "type": "global function"
  }, {
    "id": 138,
    "text": "format",
    "type": "global function"
  }, {
    "id": 139,
    "text": "get_parser_state",
    "type": "global function"
  }, {
    "id": 140,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 141,
    "text": "require",
    "type": "global function"
  }, {
    "id": 142,
    "text": "dump_internal_state",
    "type": "global function"
  }, {
    "id": 143,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 144,
    "text": "generate_help_and_usage",
    "type": "global function"
  }, {
    "id": 145,
    "text": "create_printer",
    "type": "global function"
  }, {
    "id": 146,
    "text": "wordwrap)",
    "type": "module"
  }, {
    "id": 147,
    "text": "filter)",
    "type": "module"
  }, {
    "id": 148,
    "text": "",
    "type": "variable container"
  }, {
    "id": 149,
    "text": "",
    "type": "require container"
  }, {
    "id": 150,
    "text": "",
    "type": "local variable"
  }, {
    "id": 151,
    "text": "",
    "type": "number"
  }, {
    "id": 152,
    "text": "",
    "type": "local variable"
  }, {
    "id": 153,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 155,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 156,
    "text": "constants)",
    "type": "module"
  }, {
    "id": 157,
    "text": "",
    "type": "interface container"
  }, {
    "id": 158,
    "text": "",
    "type": "interface"
  } ]
}