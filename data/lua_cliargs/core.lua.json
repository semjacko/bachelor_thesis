{
  "_filename": "core.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua_cliargs/src/cliargs/core.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 9,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "has",
    "to": 13
  }, {
    "from": 9,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 16,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 16,
    "label": "has",
    "to": 25
  }, {
    "from": 16,
    "label": "has",
    "to": 26
  }, {
    "from": 9,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 27,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 4
  }, {
    "from": 27,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 4
  }, {
    "from": 27,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 9,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 4
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 41,
    "label": "has",
    "to": 46
  }, {
    "from": 41,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 4
  }, {
    "from": 47,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 51,
    "label": "has",
    "to": 4
  }, {
    "from": 51,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 56,
    "label": "has",
    "to": 61
  }, {
    "from": 56,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 57
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 62,
    "label": "has",
    "to": 67
  }, {
    "from": 62,
    "label": "has",
    "to": 68
  }, {
    "from": 62,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 62,
    "label": "has",
    "to": 71
  }, {
    "from": 62,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 57
  }, {
    "from": 72,
    "label": "has",
    "to": 67
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 4
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 72,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 76
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 57
  }, {
    "from": 76,
    "label": "has",
    "to": 73
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 76,
    "label": "has",
    "to": 82
  }, {
    "from": 76,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 87
  }, {
    "from": 83,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 9,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 9,
    "label": "has",
    "to": 94
  }, {
    "from": 95,
    "label": "has",
    "to": 17
  }, {
    "from": 95,
    "label": "has",
    "to": 18
  }, {
    "from": 95,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 95,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 95,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 95,
    "label": "has",
    "to": 25
  }, {
    "from": 95,
    "label": "has",
    "to": 26
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 28
  }, {
    "from": 97,
    "label": "has",
    "to": 29
  }, {
    "from": 97,
    "label": "has",
    "to": 30
  }, {
    "from": 97,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 4
  }, {
    "from": 97,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 4
  }, {
    "from": 97,
    "label": "has",
    "to": 4
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 99,
    "label": "has",
    "to": 32
  }, {
    "from": 99,
    "label": "has",
    "to": 4
  }, {
    "from": 99,
    "label": "has",
    "to": 100
  }, {
    "from": 101,
    "label": "has",
    "to": 34
  }, {
    "from": 101,
    "label": "has",
    "to": 4
  }, {
    "from": 101,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 36
  }, {
    "from": 103,
    "label": "has",
    "to": 4
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 38
  }, {
    "from": 105,
    "label": "has",
    "to": 4
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 40
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 42
  }, {
    "from": 109,
    "label": "has",
    "to": 43
  }, {
    "from": 109,
    "label": "has",
    "to": 4
  }, {
    "from": 109,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 109,
    "label": "has",
    "to": 46
  }, {
    "from": 109,
    "label": "has",
    "to": 4
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 111,
    "label": "has",
    "to": 4
  }, {
    "from": 111,
    "label": "has",
    "to": 4
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 52
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 113,
    "label": "has",
    "to": 54
  }, {
    "from": 113,
    "label": "has",
    "to": 55
  }, {
    "from": 113,
    "label": "has",
    "to": 4
  }, {
    "from": 113,
    "label": "has",
    "to": 4
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 57
  }, {
    "from": 115,
    "label": "has",
    "to": 58
  }, {
    "from": 115,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 115,
    "label": "has",
    "to": 61
  }, {
    "from": 115,
    "label": "has",
    "to": 4
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 63
  }, {
    "from": 117,
    "label": "has",
    "to": 57
  }, {
    "from": 117,
    "label": "has",
    "to": 64
  }, {
    "from": 117,
    "label": "has",
    "to": 65
  }, {
    "from": 117,
    "label": "has",
    "to": 66
  }, {
    "from": 117,
    "label": "has",
    "to": 67
  }, {
    "from": 117,
    "label": "has",
    "to": 68
  }, {
    "from": 117,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 117,
    "label": "has",
    "to": 71
  }, {
    "from": 117,
    "label": "has",
    "to": 4
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 57
  }, {
    "from": 119,
    "label": "has",
    "to": 67
  }, {
    "from": 119,
    "label": "has",
    "to": 73
  }, {
    "from": 119,
    "label": "has",
    "to": 74
  }, {
    "from": 119,
    "label": "has",
    "to": 4
  }, {
    "from": 119,
    "label": "has",
    "to": 75
  }, {
    "from": 119,
    "label": "has",
    "to": 4
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 121,
    "label": "has",
    "to": 57
  }, {
    "from": 121,
    "label": "has",
    "to": 73
  }, {
    "from": 121,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 121,
    "label": "has",
    "to": 82
  }, {
    "from": 121,
    "label": "has",
    "to": 4
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 84
  }, {
    "from": 123,
    "label": "has",
    "to": 85
  }, {
    "from": 123,
    "label": "has",
    "to": 86
  }, {
    "from": 123,
    "label": "has",
    "to": 87
  }, {
    "from": 123,
    "label": "has",
    "to": 4
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 4
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 90
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 4
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 93
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 4
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 9,
    "label": "calls",
    "to": 136
  }, {
    "from": 9,
    "label": "calls",
    "to": 136
  }, {
    "from": 9,
    "label": "calls",
    "to": 136
  }, {
    "from": 9,
    "label": "calls",
    "to": 136
  }, {
    "from": 9,
    "label": "calls",
    "to": 136
  }, {
    "from": 9,
    "label": "calls",
    "to": 136
  }, {
    "from": 9,
    "label": "calls",
    "to": 136
  }, {
    "from": 9,
    "label": "calls",
    "to": 136
  }, {
    "from": 9,
    "label": "calls",
    "to": 136
  }, {
    "from": 9,
    "label": "calls",
    "to": 136
  }, {
    "from": 9,
    "label": "calls",
    "to": 95
  }, {
    "from": 9,
    "label": "calls",
    "to": 95
  }, {
    "from": 9,
    "label": "calls",
    "to": 150
  }, {
    "from": 9,
    "label": "calls",
    "to": 150
  }, {
    "from": 9,
    "label": "calls",
    "to": 150
  }, {
    "from": 9,
    "label": "calls",
    "to": 150
  }, {
    "from": 9,
    "label": "calls",
    "to": 137
  }, {
    "from": 9,
    "label": "calls",
    "to": 138
  }, {
    "from": 9,
    "label": "calls",
    "to": 151
  }, {
    "from": 9,
    "label": "calls",
    "to": 142
  }, {
    "from": 9,
    "label": "calls",
    "to": 145
  }, {
    "from": 9,
    "label": "calls",
    "to": 139
  }, {
    "from": 9,
    "label": "calls",
    "to": 9
  }, {
    "from": 9,
    "label": "calls",
    "to": 3
  }, {
    "from": 9,
    "label": "calls",
    "to": 3
  }, {
    "from": 9,
    "label": "calls",
    "to": 3
  }, {
    "from": 9,
    "label": "calls",
    "to": 148
  }, {
    "from": 9,
    "label": "calls",
    "to": 148
  }, {
    "from": 9,
    "label": "calls",
    "to": 148
  }, {
    "from": 9,
    "label": "calls",
    "to": 148
  }, {
    "from": 135,
    "label": "calls",
    "to": 147
  }, {
    "from": 135,
    "label": "calls",
    "to": 147
  }, {
    "from": 135,
    "label": "calls",
    "to": 147
  }, {
    "from": 135,
    "label": "calls",
    "to": 147
  }, {
    "from": 135,
    "label": "calls",
    "to": 147
  }, {
    "from": 135,
    "label": "calls",
    "to": 147
  }, {
    "from": 135,
    "label": "calls",
    "to": 147
  }, {
    "from": 135,
    "label": "calls",
    "to": 147
  }, {
    "from": 9,
    "label": "calls",
    "to": 6
  }, {
    "from": 9,
    "label": "calls",
    "to": 6
  }, {
    "from": 9,
    "label": "calls",
    "to": 97
  }, {
    "from": 9,
    "label": "calls",
    "to": 143
  }, {
    "from": 9,
    "label": "calls",
    "to": 149
  }, {
    "from": 9,
    "label": "calls",
    "to": 149
  }, {
    "from": 9,
    "label": "calls",
    "to": 153
  }, {
    "from": 9,
    "label": "calls",
    "to": 140
  }, {
    "from": 3,
    "label": "calls",
    "to": 144
  }, {
    "from": 9,
    "label": "calls",
    "to": 144
  }, {
    "from": 9,
    "label": "calls",
    "to": 144
  }, {
    "from": 9,
    "label": "calls",
    "to": 144
  }, {
    "from": 9,
    "label": "calls",
    "to": 144
  }, {
    "from": 9,
    "label": "calls",
    "to": 144
  }, {
    "from": 9,
    "label": "calls",
    "to": 144
  }, {
    "from": 9,
    "label": "calls",
    "to": 144
  }, {
    "from": 9,
    "label": "calls",
    "to": 144
  }, {
    "from": 9,
    "label": "calls",
    "to": 144
  }, {
    "from": 9,
    "label": "calls",
    "to": 144
  }, {
    "from": 9,
    "label": "calls",
    "to": 144
  }, {
    "from": 3,
    "label": "calls",
    "to": 152
  }, {
    "from": 9,
    "label": "calls",
    "to": 141
  }, {
    "from": 9,
    "label": "calls",
    "to": 141
  }, {
    "from": 9,
    "label": "calls",
    "to": 146
  }, {
    "from": 9,
    "label": "calls",
    "to": 146
  }, {
    "from": 9,
    "label": "calls",
    "to": 146
  }, {
    "from": 9,
    "label": "calls",
    "to": 146
  }, {
    "from": 2,
    "label": "contains",
    "to": 135
  }, {
    "from": 135,
    "label": "declares",
    "to": 3
  }, {
    "from": 135,
    "label": "declares",
    "to": 6
  }, {
    "from": 135,
    "label": "declares",
    "to": 9
  }, {
    "from": 135,
    "label": "declares",
    "to": 95
  }, {
    "from": 135,
    "label": "declares",
    "to": 97
  }, {
    "from": 135,
    "label": "declares",
    "to": 99
  }, {
    "from": 135,
    "label": "declares",
    "to": 101
  }, {
    "from": 135,
    "label": "declares",
    "to": 103
  }, {
    "from": 135,
    "label": "declares",
    "to": 105
  }, {
    "from": 135,
    "label": "declares",
    "to": 107
  }, {
    "from": 135,
    "label": "declares",
    "to": 109
  }, {
    "from": 135,
    "label": "declares",
    "to": 111
  }, {
    "from": 135,
    "label": "declares",
    "to": 113
  }, {
    "from": 135,
    "label": "declares",
    "to": 115
  }, {
    "from": 135,
    "label": "declares",
    "to": 117
  }, {
    "from": 135,
    "label": "declares",
    "to": 119
  }, {
    "from": 135,
    "label": "declares",
    "to": 121
  }, {
    "from": 135,
    "label": "declares",
    "to": 123
  }, {
    "from": 135,
    "label": "declares",
    "to": 125
  }, {
    "from": 135,
    "label": "declares",
    "to": 127
  }, {
    "from": 135,
    "label": "declares",
    "to": 129
  }, {
    "from": 135,
    "label": "declares",
    "to": 131
  }, {
    "from": 135,
    "label": "declares",
    "to": 133
  }, {
    "from": 2,
    "label": "contains",
    "to": 155
  }, {
    "from": 2,
    "label": "contains",
    "to": 156
  }, {
    "from": 155,
    "label": "initializes",
    "to": 157
  }, {
    "from": 156,
    "label": "initializes",
    "to": 158
  }, {
    "from": 158,
    "label": "requires",
    "to": 154
  }, {
    "from": 156,
    "label": "initializes",
    "to": 159
  }, {
    "from": 159,
    "label": "requires",
    "to": 160
  }, {
    "from": 156,
    "label": "initializes",
    "to": 161
  }, {
    "from": 161,
    "label": "requires",
    "to": 162
  }, {
    "from": 156,
    "label": "initializes",
    "to": 163
  }, {
    "from": 163,
    "label": "requires",
    "to": 164
  }, {
    "from": 156,
    "label": "initializes",
    "to": 165
  }, {
    "from": 165,
    "label": "requires",
    "to": 166
  }, {
    "from": 156,
    "label": "initializes",
    "to": 167
  }, {
    "from": 167,
    "label": "requires",
    "to": 168
  }, {
    "from": 156,
    "label": "initializes",
    "to": 169
  }, {
    "from": 169,
    "label": "requires",
    "to": 170
  }, {
    "from": 156,
    "label": "initializes",
    "to": 171
  }, {
    "from": 171,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 172
  }, {
    "from": 9,
    "label": "represents",
    "to": 173
  }, {
    "from": 172,
    "label": "provides",
    "to": 173
  }, {
    "from": 174,
    "label": "requires",
    "to": 162
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "constants",
    "type": "module"
  }, {
    "id": 2,
    "text": "core",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function is_callable(fn)\r\n  return type(fn) == \"function\" or (getmetatable(fn) or {}).__call\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "local function cast_to_boolean(v)\r\n  if v == nil then\r\n    return v\r\n  else\r\n    return v and true or false\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "if v == nil then\r\n    return v\r\n  else\r\n    return v and true or false\r\n  end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 9,
    "text": "local function create_core()\r\n  --- @module\r\n  ---\r\n  --- The primary export you receive when you require the library. For example:\r\n  ---\r\n  ---     local cli = require 'cliargs'\r\n  local cli = {}\r\n  local colsz = { 0, 0 } -- column width, help text. Set to 0 for auto detect\r\n  local options = {}\r\n\r\n  cli.name = \"\"\r\n  cli.description = \"\"\r\n\r\n  cli.printer = create_printer(function()\r\n    return {\r\n      name = cli.name,\r\n      description = cli.description,\r\n      options = options,\r\n      colsz = colsz\r\n    }\r\n  end)\r\n\r\n  -- Used internally to add an option\r\n  local function define_option(k, ek, v, label, desc, default, callback)\r\n    local flag = (v == nil) -- no value, so it's a flag\r\n    local negatable = flag and (ek and ek:find('^%[no%-]') ~= nil)\r\n\r\n    if negatable then\r\n      ek = ek:sub(6)\r\n    end\r\n\r\n    -- guard against duplicates\r\n    if lookup(k, ek, options) then\r\n      error(\"Duplicate option: \" .. (k or ek) .. \", please rename one of them.\")\r\n    end\r\n\r\n    if negatable and lookup(nil, \"no-\"..ek, options) then\r\n      error(\"Duplicate option: \" .. (\"no-\"..ek) .. \", please rename one of them.\")\r\n    end\r\n\r\n    -- below description of full entry record, nils included for reference\r\n    local entry = {\r\n      type = K.TYPE_OPTION,\r\n      key = k,\r\n      expanded_key = ek,\r\n      desc = desc,\r\n      default = default,\r\n      label = label,\r\n      flag = flag,\r\n      negatable = negatable,\r\n      callback = callback\r\n    }\r\n\r\n    table.insert(options, entry)\r\n  end\r\n\r\n  local function define_command_option(key)\r\n    --- @module\r\n    ---\r\n    --- This is a special instance of the [cli]() module that you receive when\r\n    --- you define a new command using [cli#command]().\r\n    local cmd = create_core()\r\n\r\n    cmd.__key__ = key\r\n    cmd.type = K.TYPE_COMMAND\r\n\r\n    --- Specify a file that the command should run. The rest of the arguments\r\n    --- are forward to that file to process, which is free to use or not use\r\n    --- lua_cliargs in turn.\r\n    ---\r\n    --- @param {string} file_path\r\n    ---        Absolute file-path to a lua script to execute.\r\n    function cmd:file(file_path)\r\n      cmd.__file__ = file_path\r\n      return cmd\r\n    end\r\n\r\n    --- Define a command handler. This callback will be invoked if the command\r\n    --- argument was supplied by the user at runtime. What you return from this\r\n    --- callback will be returned to the parent CLI library's parse routine and\r\n    --- it will return that in turn!\r\n    ---\r\n    --- @param {function} callback\r\n    function cmd:action(callback)\r\n      cmd.__action__ = callback\r\n      return cmd\r\n    end\r\n\r\n    return cmd\r\n  end\r\n\r\n  -- ------------------------------------------------------------------------ --\r\n  -- PUBLIC API\r\n  -- ------------------------------------------------------------------------ --\r\n\r\n  --- CONFIG\r\n\r\n  --- Assigns the name of the program which will be used for logging.\r\n  function cli:set_name(in_name)\r\n    cli.name = in_name\r\n\r\n    return self\r\n  end\r\n\r\n  --- Write down a brief, 1-liner description of what the program does.\r\n  function cli:set_description(in_description)\r\n    cli.description = in_description\r\n\r\n    return self\r\n  end\r\n\r\n  --- Sets the amount of space allocated to the argument keys and descriptions\r\n  --- in the help listing.\r\n  ---\r\n  --- The sizes are used for wrapping long argument keys and descriptions.\r\n  ---\r\n  --- @param {number} [key_cols=0]\r\n  ---        The number of columns assigned to the argument keys, set to 0 to\r\n  ---        auto detect.\r\n  ---\r\n  --- @param {number} [desc_cols=0]\r\n  ---        The number of columns assigned to the argument descriptions, set to\r\n  ---        0 to auto set the total width to 72.\r\n  function cli:set_colsz(key_cols, desc_cols)\r\n    colsz = { key_cols or colsz[1], desc_cols or colsz[2] }\r\n  end\r\n\r\n  function cli:redefine_default(key, new_default)\r\n    local entry = lookup(key, key, options)\r\n\r\n    if not entry then\r\n      return nil\r\n    end\r\n\r\n    if entry.flag then\r\n      new_default = cast_to_boolean(new_default)\r\n    end\r\n\r\n    entry.default = shallow_copy(new_default)\r\n\r\n    return true\r\n  end\r\n\r\n  --- Load default values from a table.\r\n  ---\r\n  --- @param {table} config\r\n  ---        Your new set of defaults. The keys could either point to the short\r\n  ---        or expanded option keys, and their values are the new defaults.\r\n  ---\r\n  --- @param {boolean} [strict=false]\r\n  ---        Turn this on to return nil and an error message if a key in the\r\n  ---        config table could not be mapped to any CLI option.\r\n  ---\r\n  --- @return {true}\r\n  ---         When the new defaults were loaded successfully, or strict was not\r\n  ---         set.\r\n  ---\r\n  --- @return {union<nil, string>}\r\n  ---         When strict was set and there was an error.\r\n  function cli:load_defaults(config, strict)\r\n    for k, v in pairs(config) do\r\n      local success = self:redefine_default(k, v)\r\n\r\n      if strict and not success then\r\n        return nil, \"Unrecognized option with the key '\" .. k .. \"'\"\r\n      end\r\n    end\r\n\r\n    return true\r\n  end\r\n\r\n  --- Read config values from a configuration file.\r\n  ---\r\n  --- @param {string} path\r\n  ---        Absolute file path.\r\n  ---\r\n  --- @param {string} [format=nil]\r\n  ---        The config file format, which has to be one of:\r\n  ---        \"lua\", \"json\", \"ini\", or \"yaml\".\r\n  ---        When this is left blank, we try to auto-detect the format from the\r\n  ---        file extension.\r\n  ---\r\n  --- @param {boolean} [strict=false]\r\n  ---        Forwarded to [#load_defaults](). See that method for the parameter\r\n  ---        description.\r\n  ---\r\n  --- @return {true|union<nil, string>}\r\n  ---         Returns true on successful load. Otherwise, nil and an error\r\n  ---         message are returned instead.\r\n  function cli:read_defaults(path, format)\r\n    if not format then\r\n      format = path:match('%.([^%.]+)$')\r\n    end\r\n\r\n    local loader = config_loader.FORMAT_LOADERS[format]\r\n\r\n    if not loader then\r\n      return nil, 'Unsupported file format \"' .. format .. '\"'\r\n    end\r\n\r\n    return config_loader[loader](path)\r\n  end\r\n\r\n  --- Define a required argument.\r\n  ---\r\n  ---\r\n  --- Required arguments do not take a symbol like `-` or `--`, may not have a\r\n  --- default value, and are parsed in the order they are defined.\r\n  ---\r\n  ---\r\n  --- For example:\r\n  ---\r\n  --- ```lua\r\n  --- cli:argument('INPUT', 'path to the input file')\r\n  --- cli:argument('OUTPUT', 'path to the output file')\r\n  --- ```\r\n  ---\r\n  --- At run-time, the arguments have to be specified using the following\r\n  --- notation:\r\n  ---\r\n  --- ```bash\r\n  --- $ ./script.lua ./main.c ./a.out\r\n  --- ```\r\n  ---\r\n  --- If the user does not pass a value to _every_ argument, the parser will\r\n  --- raise an error.\r\n  ---\r\n  --- @param {string} key\r\n  ---\r\n  ---        The argument identifier that will be displayed to the user and\r\n  ---        be used to reference the run-time value.\r\n  ---\r\n  --- @param {string} desc\r\n  ---\r\n  ---        A description for this argument to display in usage help.\r\n  ---\r\n  --- @param {function} [callback]\r\n  ---        Callback to invoke when this argument is parsed.\r\n  function cli:argument(key, desc, callback)\r\n    assert(type(key) == \"string\" and type(desc) == \"string\",\r\n      \"Key and description are mandatory arguments (Strings)\"\r\n    )\r\n\r\n    assert(callback == nil or is_callable(callback),\r\n      \"Callback argument must be a function\"\r\n    )\r\n\r\n    if lookup(key, key, options) then\r\n      error(\"Duplicate argument: \" .. key .. \", please rename one of them.\")\r\n    end\r\n\r\n    table.insert(options, {\r\n      type = K.TYPE_ARGUMENT,\r\n      key = key,\r\n      desc = desc,\r\n      callback = callback\r\n    })\r\n\r\n    return self\r\n  end\r\n\r\n  --- Defines a \"splat\" (or catch-all) argument.\r\n  ---\r\n  --- This is a special kind of argument that may be specified 0 or more times,\r\n  --- the values being appended to a list.\r\n  ---\r\n  --- For example, let's assume our program takes a single output file and works\r\n  --- on multiple source files:\r\n  ---\r\n  --- ```lua\r\n  --- cli:argument('OUTPUT', 'path to the output file')\r\n  --- cli:splat('INPUTS', 'the sources to compile', nil, 10) -- up to 10 source files\r\n  --- ```\r\n  ---\r\n  --- At run-time, it could be invoked as such:\r\n  ---\r\n  --- ```bash\r\n  --- $ ./script.lua ./a.out file1.c file2.c main.c\r\n  --- ```\r\n  ---\r\n  --- If you want to make the output optional, you could do something like this:\r\n  ---\r\n  --- ```lua\r\n  --- cli:option('-o, --output=FILE', 'path to the output file', './a.out')\r\n  --- cli:splat('INPUTS', 'the sources to compile', nil, 10)\r\n  --- ```\r\n  ---\r\n  --- And now we may omit the output file path:\r\n  ---\r\n  --- ```bash\r\n  --- $ ./script.lua file1.c file2.c main.c\r\n  --- ```\r\n  ---\r\n  --- @param {string} key\r\n  ---        The argument's \"name\" that will be displayed to the user.\r\n  ---\r\n  --- @param {string} desc\r\n  ---        A description of the argument.\r\n  ---\r\n  --- @param {*} [default=nil]\r\n  ---        A default value.\r\n  ---\r\n  --- @param {number} [maxcount=1]\r\n  ---        The maximum number of occurences allowed.\r\n  ---\r\n  --- @param {function} [callback]\r\n  ---        A function to call **everytime** a value for this argument is\r\n  ---        parsed.\r\n  ---\r\n  function cli:splat(key, desc, default, maxcount, callback)\r\n    assert(#filter(options, 'type', K.TYPE_SPLAT) == 0,\r\n      \"Only one splat argument may be defined.\"\r\n    )\r\n\r\n    assert(type(key) == \"string\" and type(desc) == \"string\",\r\n      \"Key and description are mandatory arguments (Strings)\"\r\n    )\r\n\r\n    assert(type(default) == \"string\" or default == nil,\r\n      \"Default value must either be omitted or be a string\"\r\n    )\r\n\r\n    maxcount = tonumber(maxcount or 1)\r\n\r\n    assert(maxcount > 0 and maxcount < 1000,\r\n      \"Maxcount must be a number from 1 to 999\"\r\n    )\r\n\r\n    assert(is_callable(callback) or callback == nil,\r\n      \"Callback argument: expected a function or nil\"\r\n    )\r\n\r\n    local typed_default = default or {}\r\n\r\n    if type(typed_default) ~= 'table' then\r\n      typed_default = { typed_default }\r\n    end\r\n\r\n    table.insert(options, {\r\n      type = K.TYPE_SPLAT,\r\n      key = key,\r\n      desc = desc,\r\n      default = typed_default,\r\n      maxcount = maxcount,\r\n      callback = callback\r\n    })\r\n\r\n    return self\r\n  end\r\n\r\n  --- Defines an optional argument.\r\n  ---\r\n  --- Optional arguments can use 3 different notations, and can accept a value.\r\n  ---\r\n  --- @param {string} key\r\n  ---\r\n  ---        The argument identifier. This can either be `-key`, or\r\n  ---        `-key, --expanded-key`.\r\n  ---        Values can be specified either by appending a space after the\r\n  ---        identifier (e.g. `-key value` or `--expanded-key value`) or by\r\n  ---        separating them with a `=` (e.g. `-key=value` or\r\n  ---        `--expanded-key=value`).\r\n  ---\r\n  --- @param {string} desc\r\n  ---\r\n  ---        A description for the argument to be shown in --help.\r\n  ---\r\n  --- @param {bool} [default=nil]\r\n  ---\r\n  ---         A default value to use in case the option was not specified at\r\n  ---         run-time (the default value is nil if you leave this blank.)\r\n  ---\r\n  --- @param {function} [callback]\r\n  ---\r\n  ---        A callback to invoke when this option is parsed.\r\n  ---\r\n  --- @example\r\n  ---\r\n  --- The following option will be stored in `args[\"i\"]` and `args[\"input\"]`\r\n  --- with a default value of `file.txt`:\r\n  ---\r\n  ---     cli:option(\"-i, --input=FILE\", \"path to the input file\", \"file.txt\")\r\n  function cli:option(key, desc, default, callback)\r\n    assert(type(key) == \"string\" and type(desc) == \"string\",\r\n      \"Key and description are mandatory arguments (Strings)\"\r\n    )\r\n\r\n    assert(is_callable(callback) or callback == nil,\r\n      \"Callback argument: expected a function or nil\"\r\n    )\r\n\r\n    local k, ek, v = disect(key)\r\n\r\n    -- if there's no VALUE indicator anywhere, what they want really is a flag.\r\n    -- e.g:\r\n    --\r\n    --     cli:option('-q, --quiet', '...')\r\n    if v == nil then\r\n      return self:flag(key, desc, default, callback)\r\n    end\r\n\r\n    define_option(k, ek, v, key, desc, default, callback)\r\n\r\n    return self\r\n  end\r\n\r\n  --- Define an optional \"flag\" argument.\r\n  ---\r\n  --- Flags are a special subset of options that can either be `true` or `false`.\r\n  ---\r\n  --- For example:\r\n  --- ```lua\r\n  --- cli:flag('-q, --quiet', 'Suppress output.', true)\r\n  --- ```\r\n  ---\r\n  --- At run-time:\r\n  ---\r\n  --- ```bash\r\n  --- $ ./script.lua --quiet\r\n  --- $ ./script.lua -q\r\n  --- ```\r\n  ---\r\n  --- Passing a value to a flag raises an error:\r\n  ---\r\n  --- ```bash\r\n  --- $ ./script.lua --quiet=foo\r\n  --- $ echo $? # => 1\r\n  --- ```\r\n  ---\r\n  --- Flags may be _negatable_ by prepending `[no-]` to their key:\r\n  ---\r\n  --- ```lua\r\n  --- cli:flag('-c, --[no-]compress', 'whether to compress or not', true)\r\n  --- ```\r\n  ---\r\n  --- Now the user gets to pass `--no-compress` if they want to skip\r\n  --- compression, or either specify `--compress` explicitly or leave it\r\n  --- unspecified to use compression.\r\n  ---\r\n  --- @param {string} key\r\n  --- @param {string} desc\r\n  --- @param {*} default\r\n  --- @param {function} callback\r\n  function cli:flag(key, desc, default, callback)\r\n    if type(default) == \"function\" then\r\n      callback = default\r\n      default = nil\r\n    end\r\n\r\n    assert(type(key) == \"string\" and type(desc) == \"string\",\r\n      \"Key and description are mandatory arguments (Strings)\"\r\n    )\r\n\r\n    local k, ek, v = disect(key)\r\n\r\n    if v ~= nil then\r\n      error(\"A flag type option cannot have a value set: \" .. key)\r\n    end\r\n\r\n    define_option(k, ek, nil, key, desc, cast_to_boolean(default), callback)\r\n\r\n    return self\r\n  end\r\n\r\n  --- Define a command argument.\r\n  ---\r\n  --- @param {string} name\r\n  ---        The name of the command and the argument that the user has to\r\n  ---        supply to invoke it.\r\n  ---\r\n  --- @param {string} [desc]\r\n  ---        An optional string to show in the help listing which should\r\n  ---        describe what the command does. It will be displayed if --help\r\n  ---        was run on the main program.\r\n  ---\r\n  ---\r\n  --- @return {cmd}\r\n  ---         Another instance of the CLI library which is scoped to that\r\n  ---         command.\r\n  function cli:command(name, desc)\r\n    local cmd = define_command_option(name)\r\n\r\n    cmd:set_name(cli.name .. ' ' .. name)\r\n    cmd:set_description(desc)\r\n\r\n    table.insert(options, cmd)\r\n\r\n    return cmd\r\n  end\r\n\r\n  --- Parse the process arguments table.\r\n  ---\r\n  --- @param {table<string>} [arguments=_G.arg]\r\n  ---        The list of arguments to parse. Defaults to the global `arg` table\r\n  ---        which contains the arguments the process was started with.\r\n  ---\r\n  --- @return {table}\r\n  ---         A table containing all the arguments, options, flags,\r\n  ---         and splat arguments that were specified or had a default\r\n  ---         (where applicable).\r\n  ---\r\n  --- @return {array<nil, string>}\r\n  ---         If a parsing error has occured, note that the --help option is\r\n  ---         also considered an error.\r\n  function cli:parse(arguments)\r\n    return parser(arguments, options, cli.printer)\r\n  end\r\n\r\n  --- Prints the USAGE message.\r\n  ---\r\n  --- @return {string}\r\n  ---         The USAGE message.\r\n  function cli:print_usage()\r\n    cli.printer.print(cli:get_usage_message())\r\n  end\r\n\r\n  function cli:get_usage_message()\r\n    return cli.printer.generate_usage()\r\n  end\r\n\r\n  --- Prints the HELP information.\r\n  ---\r\n  --- @return {string}\r\n  ---         The HELP message.\r\n  function cli:print_help()\r\n    cli.printer.print(cli.printer.generate_help_and_usage())\r\n  end\r\n\r\n  return cli\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "local cli = {}",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "local colsz = { 0, 0 }",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local options = {}",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "cli.name = \"\"",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "cli.description = \"\"",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "cli.printer = create_printer(function()\r\n    return {\r\n      name = cli.name,\r\n      description = cli.description,\r\n      options = options,\r\n      colsz = colsz\r\n    }\r\n  end)",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "local function define_option(k, ek, v, label, desc, default, callback)\r\n    local flag = (v == nil) -- no value, so it's a flag\r\n    local negatable = flag and (ek and ek:find('^%[no%-]') ~= nil)\r\n\r\n    if negatable then\r\n      ek = ek:sub(6)\r\n    end\r\n\r\n    -- guard against duplicates\r\n    if lookup(k, ek, options) then\r\n      error(\"Duplicate option: \" .. (k or ek) .. \", please rename one of them.\")\r\n    end\r\n\r\n    if negatable and lookup(nil, \"no-\"..ek, options) then\r\n      error(\"Duplicate option: \" .. (\"no-\"..ek) .. \", please rename one of them.\")\r\n    end\r\n\r\n    -- below description of full entry record, nils included for reference\r\n    local entry = {\r\n      type = K.TYPE_OPTION,\r\n      key = k,\r\n      expanded_key = ek,\r\n      desc = desc,\r\n      default = default,\r\n      label = label,\r\n      flag = flag,\r\n      negatable = negatable,\r\n      callback = callback\r\n    }\r\n\r\n    table.insert(options, entry)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 17,
    "text": "local flag = (v == nil)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local negatable = flag and (ek and ek:find('^%[no%-]') ~= nil)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if negatable then\r\n      ek = ek:sub(6)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "ek = ek:sub(6)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if lookup(k, ek, options) then\r\n      error(\"Duplicate option: \" .. (k or ek) .. \", please rename one of them.\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "error(\"Duplicate option: \" .. (k or ek) .. \", please rename one of them.\")",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "if negatable and lookup(nil, \"no-\"..ek, options) then\r\n      error(\"Duplicate option: \" .. (\"no-\"..ek) .. \", please rename one of them.\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "error(\"Duplicate option: \" .. (\"no-\"..ek) .. \", please rename one of them.\")",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "local entry = {\r\n      type = K.TYPE_OPTION,\r\n      key = k,\r\n      expanded_key = ek,\r\n      desc = desc,\r\n      default = default,\r\n      label = label,\r\n      flag = flag,\r\n      negatable = negatable,\r\n      callback = callback\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "table.insert(options, entry)",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "local function define_command_option(key)\r\n    --- @module\r\n    ---\r\n    --- This is a special instance of the [cli]() module that you receive when\r\n    --- you define a new command using [cli#command]().\r\n    local cmd = create_core()\r\n\r\n    cmd.__key__ = key\r\n    cmd.type = K.TYPE_COMMAND\r\n\r\n    --- Specify a file that the command should run. The rest of the arguments\r\n    --- are forward to that file to process, which is free to use or not use\r\n    --- lua_cliargs in turn.\r\n    ---\r\n    --- @param {string} file_path\r\n    ---        Absolute file-path to a lua script to execute.\r\n    function cmd:file(file_path)\r\n      cmd.__file__ = file_path\r\n      return cmd\r\n    end\r\n\r\n    --- Define a command handler. This callback will be invoked if the command\r\n    --- argument was supplied by the user at runtime. What you return from this\r\n    --- callback will be returned to the parent CLI library's parse routine and\r\n    --- it will return that in turn!\r\n    ---\r\n    --- @param {function} callback\r\n    function cmd:action(callback)\r\n      cmd.__action__ = callback\r\n      return cmd\r\n    end\r\n\r\n    return cmd\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 28,
    "text": "local cmd = create_core()",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "cmd.__key__ = key",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "cmd.type = K.TYPE_COMMAND",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "function cmd:file(file_path)\r\n      cmd.__file__ = file_path\r\n      return cmd\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 32,
    "text": "cmd.__file__ = file_path",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "function cmd:action(callback)\r\n      cmd.__action__ = callback\r\n      return cmd\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 34,
    "text": "cmd.__action__ = callback",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "function cli:set_name(in_name)\r\n    cli.name = in_name\r\n\r\n    return self\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 36,
    "text": "cli.name = in_name",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "function cli:set_description(in_description)\r\n    cli.description = in_description\r\n\r\n    return self\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 38,
    "text": "cli.description = in_description",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "function cli:set_colsz(key_cols, desc_cols)\r\n    colsz = { key_cols or colsz[1], desc_cols or colsz[2] }\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 40,
    "text": "colsz = { key_cols or colsz[1], desc_cols or colsz[2] }",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "function cli:redefine_default(key, new_default)\r\n    local entry = lookup(key, key, options)\r\n\r\n    if not entry then\r\n      return nil\r\n    end\r\n\r\n    if entry.flag then\r\n      new_default = cast_to_boolean(new_default)\r\n    end\r\n\r\n    entry.default = shallow_copy(new_default)\r\n\r\n    return true\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 42,
    "text": "local entry = lookup(key, key, options)",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "if not entry then\r\n      return nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "if entry.flag then\r\n      new_default = cast_to_boolean(new_default)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "new_default = cast_to_boolean(new_default)",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "entry.default = shallow_copy(new_default)",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "function cli:load_defaults(config, strict)\r\n    for k, v in pairs(config) do\r\n      local success = self:redefine_default(k, v)\r\n\r\n      if strict and not success then\r\n        return nil, \"Unrecognized option with the key '\" .. k .. \"'\"\r\n      end\r\n    end\r\n\r\n    return true\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 48,
    "text": "for k, v in pairs(config) do\r\n      local success = self:redefine_default(k, v)\r\n\r\n      if strict and not success then\r\n        return nil, \"Unrecognized option with the key '\" .. k .. \"'\"\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 49,
    "text": "local success = self:redefine_default(k, v)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "if strict and not success then\r\n        return nil, \"Unrecognized option with the key '\" .. k .. \"'\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "function cli:read_defaults(path, format)\r\n    if not format then\r\n      format = path:match('%.([^%.]+)$')\r\n    end\r\n\r\n    local loader = config_loader.FORMAT_LOADERS[format]\r\n\r\n    if not loader then\r\n      return nil, 'Unsupported file format \"' .. format .. '\"'\r\n    end\r\n\r\n    return config_loader[loader](path)\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 52,
    "text": "if not format then\r\n      format = path:match('%.([^%.]+)$')\r\n    end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "format = path:match('%.([^%.]+)$')",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "local loader = config_loader.FORMAT_LOADERS[format]",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "if not loader then\r\n      return nil, 'Unsupported file format \"' .. format .. '\"'\r\n    end",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "function cli:argument(key, desc, callback)\r\n    assert(type(key) == \"string\" and type(desc) == \"string\",\r\n      \"Key and description are mandatory arguments (Strings)\"\r\n    )\r\n\r\n    assert(callback == nil or is_callable(callback),\r\n      \"Callback argument must be a function\"\r\n    )\r\n\r\n    if lookup(key, key, options) then\r\n      error(\"Duplicate argument: \" .. key .. \", please rename one of them.\")\r\n    end\r\n\r\n    table.insert(options, {\r\n      type = K.TYPE_ARGUMENT,\r\n      key = key,\r\n      desc = desc,\r\n      callback = callback\r\n    })\r\n\r\n    return self\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 57,
    "text": "assert(type(key) == \"string\" and type(desc) == \"string\",\r\n      \"Key and description are mandatory arguments (Strings)\"\r\n    )",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "assert(callback == nil or is_callable(callback),\r\n      \"Callback argument must be a function\"\r\n    )",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "if lookup(key, key, options) then\r\n      error(\"Duplicate argument: \" .. key .. \", please rename one of them.\")\r\n    end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "error(\"Duplicate argument: \" .. key .. \", please rename one of them.\")",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "table.insert(options, {\r\n      type = K.TYPE_ARGUMENT,\r\n      key = key,\r\n      desc = desc,\r\n      callback = callback\r\n    })",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "function cli:splat(key, desc, default, maxcount, callback)\r\n    assert(#filter(options, 'type', K.TYPE_SPLAT) == 0,\r\n      \"Only one splat argument may be defined.\"\r\n    )\r\n\r\n    assert(type(key) == \"string\" and type(desc) == \"string\",\r\n      \"Key and description are mandatory arguments (Strings)\"\r\n    )\r\n\r\n    assert(type(default) == \"string\" or default == nil,\r\n      \"Default value must either be omitted or be a string\"\r\n    )\r\n\r\n    maxcount = tonumber(maxcount or 1)\r\n\r\n    assert(maxcount > 0 and maxcount < 1000,\r\n      \"Maxcount must be a number from 1 to 999\"\r\n    )\r\n\r\n    assert(is_callable(callback) or callback == nil,\r\n      \"Callback argument: expected a function or nil\"\r\n    )\r\n\r\n    local typed_default = default or {}\r\n\r\n    if type(typed_default) ~= 'table' then\r\n      typed_default = { typed_default }\r\n    end\r\n\r\n    table.insert(options, {\r\n      type = K.TYPE_SPLAT,\r\n      key = key,\r\n      desc = desc,\r\n      default = typed_default,\r\n      maxcount = maxcount,\r\n      callback = callback\r\n    })\r\n\r\n    return self\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 63,
    "text": "assert(#filter(options, 'type', K.TYPE_SPLAT) == 0,\r\n      \"Only one splat argument may be defined.\"\r\n    )",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "assert(type(default) == \"string\" or default == nil,\r\n      \"Default value must either be omitted or be a string\"\r\n    )",
    "type": "statement:functioncall"
  }, {
    "id": 65,
    "text": "maxcount = tonumber(maxcount or 1)",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "assert(maxcount > 0 and maxcount < 1000,\r\n      \"Maxcount must be a number from 1 to 999\"\r\n    )",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "assert(is_callable(callback) or callback == nil,\r\n      \"Callback argument: expected a function or nil\"\r\n    )",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "local typed_default = default or {}",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "if type(typed_default) ~= 'table' then\r\n      typed_default = { typed_default }\r\n    end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "typed_default = { typed_default }",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "table.insert(options, {\r\n      type = K.TYPE_SPLAT,\r\n      key = key,\r\n      desc = desc,\r\n      default = typed_default,\r\n      maxcount = maxcount,\r\n      callback = callback\r\n    })",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "function cli:option(key, desc, default, callback)\r\n    assert(type(key) == \"string\" and type(desc) == \"string\",\r\n      \"Key and description are mandatory arguments (Strings)\"\r\n    )\r\n\r\n    assert(is_callable(callback) or callback == nil,\r\n      \"Callback argument: expected a function or nil\"\r\n    )\r\n\r\n    local k, ek, v = disect(key)\r\n\r\n    -- if there's no VALUE indicator anywhere, what they want really is a flag.\r\n    -- e.g:\r\n    --\r\n    --     cli:option('-q, --quiet', '...')\r\n    if v == nil then\r\n      return self:flag(key, desc, default, callback)\r\n    end\r\n\r\n    define_option(k, ek, v, key, desc, default, callback)\r\n\r\n    return self\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 73,
    "text": "local k, ek, v = disect(key)",
    "type": "statement:localassign"
  }, {
    "id": 74,
    "text": "if v == nil then\r\n      return self:flag(key, desc, default, callback)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "define_option(k, ek, v, key, desc, default, callback)",
    "type": "statement:functioncall"
  }, {
    "id": 76,
    "text": "function cli:flag(key, desc, default, callback)\r\n    if type(default) == \"function\" then\r\n      callback = default\r\n      default = nil\r\n    end\r\n\r\n    assert(type(key) == \"string\" and type(desc) == \"string\",\r\n      \"Key and description are mandatory arguments (Strings)\"\r\n    )\r\n\r\n    local k, ek, v = disect(key)\r\n\r\n    if v ~= nil then\r\n      error(\"A flag type option cannot have a value set: \" .. key)\r\n    end\r\n\r\n    define_option(k, ek, nil, key, desc, cast_to_boolean(default), callback)\r\n\r\n    return self\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 77,
    "text": "if type(default) == \"function\" then\r\n      callback = default\r\n      default = nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "callback = default",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "default = nil",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "if v ~= nil then\r\n      error(\"A flag type option cannot have a value set: \" .. key)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "error(\"A flag type option cannot have a value set: \" .. key)",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "define_option(k, ek, nil, key, desc, cast_to_boolean(default), callback)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "function cli:command(name, desc)\r\n    local cmd = define_command_option(name)\r\n\r\n    cmd:set_name(cli.name .. ' ' .. name)\r\n    cmd:set_description(desc)\r\n\r\n    table.insert(options, cmd)\r\n\r\n    return cmd\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 84,
    "text": "local cmd = define_command_option(name)",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "cmd:set_name(cli.name .. ' ' .. name)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "cmd:set_description(desc)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "table.insert(options, cmd)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "function cli:parse(arguments)\r\n    return parser(arguments, options, cli.printer)\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 89,
    "text": "function cli:print_usage()\r\n    cli.printer.print(cli:get_usage_message())\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 90,
    "text": "cli.printer.print(cli:get_usage_message())",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "function cli:get_usage_message()\r\n    return cli.printer.generate_usage()\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 92,
    "text": "function cli:print_help()\r\n    cli.printer.print(cli.printer.generate_help_and_usage())\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 93,
    "text": "cli.printer.print(cli.printer.generate_help_and_usage())",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 95,
    "text": "local function define_option(k, ek, v, label, desc, default, callback)\r\n    local flag = (v == nil) -- no value, so it's a flag\r\n    local negatable = flag and (ek and ek:find('^%[no%-]') ~= nil)\r\n\r\n    if negatable then\r\n      ek = ek:sub(6)\r\n    end\r\n\r\n    -- guard against duplicates\r\n    if lookup(k, ek, options) then\r\n      error(\"Duplicate option: \" .. (k or ek) .. \", please rename one of them.\")\r\n    end\r\n\r\n    if negatable and lookup(nil, \"no-\"..ek, options) then\r\n      error(\"Duplicate option: \" .. (\"no-\"..ek) .. \", please rename one of them.\")\r\n    end\r\n\r\n    -- below description of full entry record, nils included for reference\r\n    local entry = {\r\n      type = K.TYPE_OPTION,\r\n      key = k,\r\n      expanded_key = ek,\r\n      desc = desc,\r\n      default = default,\r\n      label = label,\r\n      flag = flag,\r\n      negatable = negatable,\r\n      callback = callback\r\n    }\r\n\r\n    table.insert(options, entry)\r\n  end",
    "type": "function"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "local function define_command_option(key)\r\n    --- @module\r\n    ---\r\n    --- This is a special instance of the [cli]() module that you receive when\r\n    --- you define a new command using [cli#command]().\r\n    local cmd = create_core()\r\n\r\n    cmd.__key__ = key\r\n    cmd.type = K.TYPE_COMMAND\r\n\r\n    --- Specify a file that the command should run. The rest of the arguments\r\n    --- are forward to that file to process, which is free to use or not use\r\n    --- lua_cliargs in turn.\r\n    ---\r\n    --- @param {string} file_path\r\n    ---        Absolute file-path to a lua script to execute.\r\n    function cmd:file(file_path)\r\n      cmd.__file__ = file_path\r\n      return cmd\r\n    end\r\n\r\n    --- Define a command handler. This callback will be invoked if the command\r\n    --- argument was supplied by the user at runtime. What you return from this\r\n    --- callback will be returned to the parent CLI library's parse routine and\r\n    --- it will return that in turn!\r\n    ---\r\n    --- @param {function} callback\r\n    function cmd:action(callback)\r\n      cmd.__action__ = callback\r\n      return cmd\r\n    end\r\n\r\n    return cmd\r\n  end",
    "type": "function"
  }, {
    "id": 98,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 99,
    "text": "function cmd:file(file_path)\r\n      cmd.__file__ = file_path\r\n      return cmd\r\n    end",
    "type": "function"
  }, {
    "id": 100,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 101,
    "text": "function cmd:action(callback)\r\n      cmd.__action__ = callback\r\n      return cmd\r\n    end",
    "type": "function"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function cli:set_name(in_name)\r\n    cli.name = in_name\r\n\r\n    return self\r\n  end",
    "type": "function"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function cli:set_description(in_description)\r\n    cli.description = in_description\r\n\r\n    return self\r\n  end",
    "type": "function"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function cli:set_colsz(key_cols, desc_cols)\r\n    colsz = { key_cols or colsz[1], desc_cols or colsz[2] }\r\n  end",
    "type": "function"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "function cli:redefine_default(key, new_default)\r\n    local entry = lookup(key, key, options)\r\n\r\n    if not entry then\r\n      return nil\r\n    end\r\n\r\n    if entry.flag then\r\n      new_default = cast_to_boolean(new_default)\r\n    end\r\n\r\n    entry.default = shallow_copy(new_default)\r\n\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function cli:load_defaults(config, strict)\r\n    for k, v in pairs(config) do\r\n      local success = self:redefine_default(k, v)\r\n\r\n      if strict and not success then\r\n        return nil, \"Unrecognized option with the key '\" .. k .. \"'\"\r\n      end\r\n    end\r\n\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function cli:read_defaults(path, format)\r\n    if not format then\r\n      format = path:match('%.([^%.]+)$')\r\n    end\r\n\r\n    local loader = config_loader.FORMAT_LOADERS[format]\r\n\r\n    if not loader then\r\n      return nil, 'Unsupported file format \"' .. format .. '\"'\r\n    end\r\n\r\n    return config_loader[loader](path)\r\n  end",
    "type": "function"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function cli:argument(key, desc, callback)\r\n    assert(type(key) == \"string\" and type(desc) == \"string\",\r\n      \"Key and description are mandatory arguments (Strings)\"\r\n    )\r\n\r\n    assert(callback == nil or is_callable(callback),\r\n      \"Callback argument must be a function\"\r\n    )\r\n\r\n    if lookup(key, key, options) then\r\n      error(\"Duplicate argument: \" .. key .. \", please rename one of them.\")\r\n    end\r\n\r\n    table.insert(options, {\r\n      type = K.TYPE_ARGUMENT,\r\n      key = key,\r\n      desc = desc,\r\n      callback = callback\r\n    })\r\n\r\n    return self\r\n  end",
    "type": "function"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function cli:splat(key, desc, default, maxcount, callback)\r\n    assert(#filter(options, 'type', K.TYPE_SPLAT) == 0,\r\n      \"Only one splat argument may be defined.\"\r\n    )\r\n\r\n    assert(type(key) == \"string\" and type(desc) == \"string\",\r\n      \"Key and description are mandatory arguments (Strings)\"\r\n    )\r\n\r\n    assert(type(default) == \"string\" or default == nil,\r\n      \"Default value must either be omitted or be a string\"\r\n    )\r\n\r\n    maxcount = tonumber(maxcount or 1)\r\n\r\n    assert(maxcount > 0 and maxcount < 1000,\r\n      \"Maxcount must be a number from 1 to 999\"\r\n    )\r\n\r\n    assert(is_callable(callback) or callback == nil,\r\n      \"Callback argument: expected a function or nil\"\r\n    )\r\n\r\n    local typed_default = default or {}\r\n\r\n    if type(typed_default) ~= 'table' then\r\n      typed_default = { typed_default }\r\n    end\r\n\r\n    table.insert(options, {\r\n      type = K.TYPE_SPLAT,\r\n      key = key,\r\n      desc = desc,\r\n      default = typed_default,\r\n      maxcount = maxcount,\r\n      callback = callback\r\n    })\r\n\r\n    return self\r\n  end",
    "type": "function"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function cli:option(key, desc, default, callback)\r\n    assert(type(key) == \"string\" and type(desc) == \"string\",\r\n      \"Key and description are mandatory arguments (Strings)\"\r\n    )\r\n\r\n    assert(is_callable(callback) or callback == nil,\r\n      \"Callback argument: expected a function or nil\"\r\n    )\r\n\r\n    local k, ek, v = disect(key)\r\n\r\n    -- if there's no VALUE indicator anywhere, what they want really is a flag.\r\n    -- e.g:\r\n    --\r\n    --     cli:option('-q, --quiet', '...')\r\n    if v == nil then\r\n      return self:flag(key, desc, default, callback)\r\n    end\r\n\r\n    define_option(k, ek, v, key, desc, default, callback)\r\n\r\n    return self\r\n  end",
    "type": "function"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function cli:flag(key, desc, default, callback)\r\n    if type(default) == \"function\" then\r\n      callback = default\r\n      default = nil\r\n    end\r\n\r\n    assert(type(key) == \"string\" and type(desc) == \"string\",\r\n      \"Key and description are mandatory arguments (Strings)\"\r\n    )\r\n\r\n    local k, ek, v = disect(key)\r\n\r\n    if v ~= nil then\r\n      error(\"A flag type option cannot have a value set: \" .. key)\r\n    end\r\n\r\n    define_option(k, ek, nil, key, desc, cast_to_boolean(default), callback)\r\n\r\n    return self\r\n  end",
    "type": "function"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function cli:command(name, desc)\r\n    local cmd = define_command_option(name)\r\n\r\n    cmd:set_name(cli.name .. ' ' .. name)\r\n    cmd:set_description(desc)\r\n\r\n    table.insert(options, cmd)\r\n\r\n    return cmd\r\n  end",
    "type": "function"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function cli:parse(arguments)\r\n    return parser(arguments, options, cli.printer)\r\n  end",
    "type": "function"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function cli:print_usage()\r\n    cli.printer.print(cli:get_usage_message())\r\n  end",
    "type": "function"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function cli:get_usage_message()\r\n    return cli.printer.generate_usage()\r\n  end",
    "type": "function"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function cli:print_help()\r\n    cli.printer.print(cli.printer.generate_help_and_usage())\r\n  end",
    "type": "function"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function()\r\n    return {\r\n      name = cli.name,\r\n      description = cli.description,\r\n      options = options,\r\n      colsz = colsz\r\n    }\r\n  end",
    "type": "function"
  }, {
    "id": 134,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 135,
    "text": "",
    "type": "function container"
  }, {
    "id": 136,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 137,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 138,
    "text": "cli.printer.generate_help_and_usage",
    "type": "global function"
  }, {
    "id": 139,
    "text": "config_loader[loader]",
    "type": "global function"
  }, {
    "id": 140,
    "text": "parser",
    "type": "global function"
  }, {
    "id": 141,
    "text": "cli.printer.print",
    "type": "global function"
  }, {
    "id": 142,
    "text": "shallow_copy",
    "type": "global function"
  }, {
    "id": 143,
    "text": "filter",
    "type": "global function"
  }, {
    "id": 144,
    "text": "type",
    "type": "global function"
  }, {
    "id": 145,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 146,
    "text": "error",
    "type": "global function"
  }, {
    "id": 147,
    "text": "require",
    "type": "global function"
  }, {
    "id": 148,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 149,
    "text": "disect",
    "type": "global function"
  }, {
    "id": 150,
    "text": "lookup",
    "type": "global function"
  }, {
    "id": 151,
    "text": "cli.printer.generate_usage",
    "type": "global function"
  }, {
    "id": 152,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 153,
    "text": "create_printer",
    "type": "global function"
  }, {
    "id": 154,
    "text": "disect)",
    "type": "module"
  }, {
    "id": 155,
    "text": "",
    "type": "variable container"
  }, {
    "id": 156,
    "text": "",
    "type": "require container"
  }, {
    "id": 157,
    "text": "",
    "type": "local variable"
  }, {
    "id": 158,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 159,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 160,
    "text": "lookup)",
    "type": "module"
  }, {
    "id": 161,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 162,
    "text": "filter)",
    "type": "module"
  }, {
    "id": 163,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 164,
    "text": "shallow_copy)",
    "type": "module"
  }, {
    "id": 165,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 166,
    "text": "printer)",
    "type": "module"
  }, {
    "id": 167,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 168,
    "text": "config_loader)",
    "type": "module"
  }, {
    "id": 169,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 170,
    "text": "parser)",
    "type": "module"
  }, {
    "id": 171,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "interface container"
  }, {
    "id": 173,
    "text": "",
    "type": "interface"
  }, {
    "id": 174,
    "text": "",
    "type": "require local variable"
  } ]
}