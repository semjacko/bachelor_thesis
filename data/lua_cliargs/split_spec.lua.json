{
  "_filename": "split_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/lua_cliargs/spec/utils/split_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 14,
    "label": "has",
    "to": 4
  }, {
    "from": 14,
    "label": "has",
    "to": 5
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 14,
    "label": "has",
    "to": 7
  }, {
    "from": 14,
    "label": "has",
    "to": 5
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 14,
    "label": "has",
    "to": 9
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 14,
    "label": "has",
    "to": 10
  }, {
    "from": 14,
    "label": "has",
    "to": 11
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "calls",
    "to": 18
  }, {
    "from": 16,
    "label": "calls",
    "to": 18
  }, {
    "from": 16,
    "label": "calls",
    "to": 18
  }, {
    "from": 16,
    "label": "calls",
    "to": 18
  }, {
    "from": 16,
    "label": "calls",
    "to": 19
  }, {
    "from": 16,
    "label": "calls",
    "to": 19
  }, {
    "from": 16,
    "label": "calls",
    "to": 19
  }, {
    "from": 16,
    "label": "calls",
    "to": 19
  }, {
    "from": 16,
    "label": "calls",
    "to": 21
  }, {
    "from": 16,
    "label": "calls",
    "to": 20
  }, {
    "from": 16,
    "label": "calls",
    "to": 17
  }, {
    "from": 1,
    "label": "contains",
    "to": 16
  }, {
    "from": 16,
    "label": "declares",
    "to": 2
  }, {
    "from": 16,
    "label": "declares",
    "to": 13
  }, {
    "from": 1,
    "label": "contains",
    "to": 22
  }, {
    "from": 1,
    "label": "contains",
    "to": 23
  }, {
    "from": 23,
    "label": "initializes",
    "to": 24
  }, {
    "from": 24,
    "label": "requires",
    "to": 25
  }, {
    "from": 26,
    "label": "requires",
    "to": 25
  }, {
    "from": 27,
    "label": "requires",
    "to": 25
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 2
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "split_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "function()\r\n    -- takes: str, split-char\r\n    local expected, result\r\n\r\n    result = subject(\"hello,world\",\",\")\r\n    expected = {\"hello\", \"world\"}\r\n    assert.is.same(result, expected)\r\n\r\n    result = subject(\"hello,world,\",\",\")\r\n    expected = {\"hello\", \"world\"}\r\n    assert.is.same(result, expected)\r\n\r\n    result = subject(\"hello\",\",\")\r\n    expected = {\"hello\"}\r\n    assert.is.same(result, expected)\r\n\r\n    result = subject(\"\",\",\")\r\n    expected = {}\r\n    assert.is.same(result, expected)\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "local expected, result",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "result = subject(\"hello,world\",\",\")",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "expected = {\"hello\", \"world\"}",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "assert.is.same(result, expected)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "result = subject(\"hello,world,\",\",\")",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "result = subject(\"hello\",\",\")",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "expected = {\"hello\"}",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "result = subject(\"\",\",\")",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "expected = {}",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function()\r\n  it(\"should work\", function()\r\n    -- takes: str, split-char\r\n    local expected, result\r\n\r\n    result = subject(\"hello,world\",\",\")\r\n    expected = {\"hello\", \"world\"}\r\n    assert.is.same(result, expected)\r\n\r\n    result = subject(\"hello,world,\",\",\")\r\n    expected = {\"hello\", \"world\"}\r\n    assert.is.same(result, expected)\r\n\r\n    result = subject(\"hello\",\",\")\r\n    expected = {\"hello\"}\r\n    assert.is.same(result, expected)\r\n\r\n    result = subject(\"\",\",\")\r\n    expected = {}\r\n    assert.is.same(result, expected)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "it(\"should work\", function()\r\n    -- takes: str, split-char\r\n    local expected, result\r\n\r\n    result = subject(\"hello,world\",\",\")\r\n    expected = {\"hello\", \"world\"}\r\n    assert.is.same(result, expected)\r\n\r\n    result = subject(\"hello,world,\",\",\")\r\n    expected = {\"hello\", \"world\"}\r\n    assert.is.same(result, expected)\r\n\r\n    result = subject(\"hello\",\",\")\r\n    expected = {\"hello\"}\r\n    assert.is.same(result, expected)\r\n\r\n    result = subject(\"\",\",\")\r\n    expected = {}\r\n    assert.is.same(result, expected)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "",
    "type": "function container"
  }, {
    "id": 17,
    "text": "it",
    "type": "global function"
  }, {
    "id": 18,
    "text": "subject",
    "type": "global function"
  }, {
    "id": 19,
    "text": "assert.is.same",
    "type": "global function"
  }, {
    "id": 20,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 21,
    "text": "require",
    "type": "global function"
  }, {
    "id": 22,
    "text": "",
    "type": "variable container"
  }, {
    "id": 23,
    "text": "",
    "type": "require container"
  }, {
    "id": 24,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 25,
    "text": "split)",
    "type": "module"
  }, {
    "id": 26,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 27,
    "text": "",
    "type": "require local variable"
  } ]
}