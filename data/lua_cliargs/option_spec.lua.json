{
  "_filename": "option_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/lua_cliargs/spec/features/option_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 21
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 21
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 21
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 21
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 15
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 21
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 21
  }, {
    "from": 35,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 21
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 41,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 43
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 53,
    "label": "has",
    "to": 47
  }, {
    "from": 53,
    "label": "has",
    "to": 55
  }, {
    "from": 53,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 57,
    "label": "has",
    "to": 60
  }, {
    "from": 57,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 58
  }, {
    "from": 63,
    "label": "has",
    "to": 59
  }, {
    "from": 63,
    "label": "has",
    "to": 60
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 69
  }, {
    "from": 73,
    "label": "has",
    "to": 70
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 70
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 76
  }, {
    "from": 79,
    "label": "has",
    "to": 70
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 81,
    "label": "has",
    "to": 70
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 82
  }, {
    "from": 85,
    "label": "has",
    "to": 70
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 87,
    "label": "has",
    "to": 70
  }, {
    "from": 87,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 88
  }, {
    "from": 91,
    "label": "has",
    "to": 70
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 94
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 97
  }, {
    "from": 102,
    "label": "has",
    "to": 98
  }, {
    "from": 100,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 107,
    "label": "has",
    "to": 109
  }, {
    "from": 107,
    "label": "has",
    "to": 110
  }, {
    "from": 107,
    "label": "has",
    "to": 111
  }, {
    "from": 107,
    "label": "has",
    "to": 112
  }, {
    "from": 107,
    "label": "has",
    "to": 113
  }, {
    "from": 107,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 105
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 108
  }, {
    "from": 117,
    "label": "has",
    "to": 109
  }, {
    "from": 117,
    "label": "has",
    "to": 110
  }, {
    "from": 117,
    "label": "has",
    "to": 111
  }, {
    "from": 117,
    "label": "has",
    "to": 112
  }, {
    "from": 117,
    "label": "has",
    "to": 113
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 120
  }, {
    "from": 124,
    "label": "has",
    "to": 121
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 126,
    "label": "has",
    "to": 128
  }, {
    "from": 126,
    "label": "has",
    "to": 129
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 66
  }, {
    "from": 130,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 69
  }, {
    "from": 73,
    "label": "has",
    "to": 70
  }, {
    "from": 130,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 76
  }, {
    "from": 79,
    "label": "has",
    "to": 70
  }, {
    "from": 130,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 82
  }, {
    "from": 85,
    "label": "has",
    "to": 70
  }, {
    "from": 130,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 88
  }, {
    "from": 91,
    "label": "has",
    "to": 70
  }, {
    "from": 130,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 94
  }, {
    "from": 136,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 97
  }, {
    "from": 102,
    "label": "has",
    "to": 98
  }, {
    "from": 130,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 105
  }, {
    "from": 137,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 108
  }, {
    "from": 117,
    "label": "has",
    "to": 109
  }, {
    "from": 117,
    "label": "has",
    "to": 110
  }, {
    "from": 117,
    "label": "has",
    "to": 111
  }, {
    "from": 117,
    "label": "has",
    "to": 112
  }, {
    "from": 117,
    "label": "has",
    "to": 113
  }, {
    "from": 130,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 120
  }, {
    "from": 124,
    "label": "has",
    "to": 121
  }, {
    "from": 130,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 127
  }, {
    "from": 139,
    "label": "has",
    "to": 128
  }, {
    "from": 130,
    "label": "has",
    "to": 140
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 141,
    "label": "has",
    "to": 144
  }, {
    "from": 145,
    "label": "has",
    "to": 146
  }, {
    "from": 145,
    "label": "has",
    "to": 147
  }, {
    "from": 145,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 153,
    "label": "has",
    "to": 155
  }, {
    "from": 153,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 142
  }, {
    "from": 166,
    "label": "has",
    "to": 143
  }, {
    "from": 165,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 146
  }, {
    "from": 167,
    "label": "has",
    "to": 147
  }, {
    "from": 165,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 150
  }, {
    "from": 168,
    "label": "has",
    "to": 151
  }, {
    "from": 165,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 154
  }, {
    "from": 169,
    "label": "has",
    "to": 155
  }, {
    "from": 165,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 158
  }, {
    "from": 170,
    "label": "has",
    "to": 159
  }, {
    "from": 165,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 162
  }, {
    "from": 171,
    "label": "has",
    "to": 163
  }, {
    "from": 165,
    "label": "has",
    "to": 172
  }, {
    "from": 173,
    "label": "has",
    "to": 174
  }, {
    "from": 173,
    "label": "has",
    "to": 175
  }, {
    "from": 173,
    "label": "has",
    "to": 176
  }, {
    "from": 177,
    "label": "has",
    "to": 178
  }, {
    "from": 177,
    "label": "has",
    "to": 179
  }, {
    "from": 177,
    "label": "has",
    "to": 180
  }, {
    "from": 177,
    "label": "has",
    "to": 181
  }, {
    "from": 177,
    "label": "has",
    "to": 182
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 183,
    "label": "has",
    "to": 186
  }, {
    "from": 183,
    "label": "has",
    "to": 187
  }, {
    "from": 183,
    "label": "has",
    "to": 188
  }, {
    "from": 183,
    "label": "has",
    "to": 189
  }, {
    "from": 183,
    "label": "has",
    "to": 190
  }, {
    "from": 183,
    "label": "has",
    "to": 191
  }, {
    "from": 183,
    "label": "has",
    "to": 192
  }, {
    "from": 193,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 174
  }, {
    "from": 194,
    "label": "has",
    "to": 175
  }, {
    "from": 193,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 178
  }, {
    "from": 195,
    "label": "has",
    "to": 179
  }, {
    "from": 195,
    "label": "has",
    "to": 180
  }, {
    "from": 195,
    "label": "has",
    "to": 181
  }, {
    "from": 193,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 184
  }, {
    "from": 196,
    "label": "has",
    "to": 185
  }, {
    "from": 196,
    "label": "has",
    "to": 186
  }, {
    "from": 196,
    "label": "has",
    "to": 187
  }, {
    "from": 196,
    "label": "has",
    "to": 188
  }, {
    "from": 196,
    "label": "has",
    "to": 189
  }, {
    "from": 196,
    "label": "has",
    "to": 190
  }, {
    "from": 196,
    "label": "has",
    "to": 191
  }, {
    "from": 193,
    "label": "has",
    "to": 197
  }, {
    "from": 198,
    "label": "has",
    "to": 199
  }, {
    "from": 198,
    "label": "has",
    "to": 200
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 199
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 201,
    "label": "has",
    "to": 204
  }, {
    "from": 201,
    "label": "has",
    "to": 205
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 199
  }, {
    "from": 207,
    "label": "has",
    "to": 203
  }, {
    "from": 207,
    "label": "has",
    "to": 204
  }, {
    "from": 206,
    "label": "has",
    "to": 208
  }, {
    "from": 209,
    "label": "has",
    "to": 174
  }, {
    "from": 209,
    "label": "has",
    "to": 175
  }, {
    "from": 209,
    "label": "has",
    "to": 210
  }, {
    "from": 209,
    "label": "has",
    "to": 211
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 212,
    "label": "has",
    "to": 214
  }, {
    "from": 212,
    "label": "has",
    "to": 180
  }, {
    "from": 212,
    "label": "has",
    "to": 215
  }, {
    "from": 212,
    "label": "has",
    "to": 216
  }, {
    "from": 212,
    "label": "has",
    "to": 217
  }, {
    "from": 212,
    "label": "has",
    "to": 191
  }, {
    "from": 212,
    "label": "has",
    "to": 218
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 174
  }, {
    "from": 220,
    "label": "has",
    "to": 175
  }, {
    "from": 220,
    "label": "has",
    "to": 210
  }, {
    "from": 219,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 213
  }, {
    "from": 221,
    "label": "has",
    "to": 214
  }, {
    "from": 221,
    "label": "has",
    "to": 180
  }, {
    "from": 221,
    "label": "has",
    "to": 215
  }, {
    "from": 221,
    "label": "has",
    "to": 216
  }, {
    "from": 221,
    "label": "has",
    "to": 217
  }, {
    "from": 221,
    "label": "has",
    "to": 191
  }, {
    "from": 219,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 223,
    "label": "has",
    "to": 2
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 223,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 174
  }, {
    "from": 194,
    "label": "has",
    "to": 175
  }, {
    "from": 225,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 178
  }, {
    "from": 195,
    "label": "has",
    "to": 179
  }, {
    "from": 195,
    "label": "has",
    "to": 180
  }, {
    "from": 195,
    "label": "has",
    "to": 181
  }, {
    "from": 225,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 184
  }, {
    "from": 196,
    "label": "has",
    "to": 185
  }, {
    "from": 196,
    "label": "has",
    "to": 186
  }, {
    "from": 196,
    "label": "has",
    "to": 187
  }, {
    "from": 196,
    "label": "has",
    "to": 188
  }, {
    "from": 196,
    "label": "has",
    "to": 189
  }, {
    "from": 196,
    "label": "has",
    "to": 190
  }, {
    "from": 196,
    "label": "has",
    "to": 191
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 199
  }, {
    "from": 207,
    "label": "has",
    "to": 203
  }, {
    "from": 207,
    "label": "has",
    "to": 204
  }, {
    "from": 223,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 174
  }, {
    "from": 220,
    "label": "has",
    "to": 175
  }, {
    "from": 220,
    "label": "has",
    "to": 210
  }, {
    "from": 227,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 213
  }, {
    "from": 221,
    "label": "has",
    "to": 214
  }, {
    "from": 221,
    "label": "has",
    "to": 180
  }, {
    "from": 221,
    "label": "has",
    "to": 215
  }, {
    "from": 221,
    "label": "has",
    "to": 216
  }, {
    "from": 221,
    "label": "has",
    "to": 217
  }, {
    "from": 221,
    "label": "has",
    "to": 191
  }, {
    "from": 223,
    "label": "has",
    "to": 228
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 229,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 6
  }, {
    "from": 229,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 232,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 15
  }, {
    "from": 232,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 21
  }, {
    "from": 232,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 21
  }, {
    "from": 35,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 21
  }, {
    "from": 229,
    "label": "has",
    "to": 233
  }, {
    "from": 233,
    "label": "has",
    "to": 38
  }, {
    "from": 233,
    "label": "has",
    "to": 39
  }, {
    "from": 229,
    "label": "has",
    "to": 234
  }, {
    "from": 234,
    "label": "has",
    "to": 42
  }, {
    "from": 234,
    "label": "has",
    "to": 43
  }, {
    "from": 229,
    "label": "has",
    "to": 235
  }, {
    "from": 235,
    "label": "has",
    "to": 46
  }, {
    "from": 235,
    "label": "has",
    "to": 47
  }, {
    "from": 229,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 50
  }, {
    "from": 236,
    "label": "has",
    "to": 43
  }, {
    "from": 236,
    "label": "has",
    "to": 51
  }, {
    "from": 229,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 54
  }, {
    "from": 237,
    "label": "has",
    "to": 47
  }, {
    "from": 237,
    "label": "has",
    "to": 55
  }, {
    "from": 229,
    "label": "has",
    "to": 238
  }, {
    "from": 238,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 58
  }, {
    "from": 63,
    "label": "has",
    "to": 59
  }, {
    "from": 63,
    "label": "has",
    "to": 60
  }, {
    "from": 229,
    "label": "has",
    "to": 239
  }, {
    "from": 239,
    "label": "has",
    "to": 131
  }, {
    "from": 131,
    "label": "has",
    "to": 66
  }, {
    "from": 239,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 69
  }, {
    "from": 73,
    "label": "has",
    "to": 70
  }, {
    "from": 239,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 76
  }, {
    "from": 79,
    "label": "has",
    "to": 70
  }, {
    "from": 239,
    "label": "has",
    "to": 134
  }, {
    "from": 134,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 82
  }, {
    "from": 85,
    "label": "has",
    "to": 70
  }, {
    "from": 239,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 88
  }, {
    "from": 91,
    "label": "has",
    "to": 70
  }, {
    "from": 239,
    "label": "has",
    "to": 136
  }, {
    "from": 136,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 94
  }, {
    "from": 136,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 97
  }, {
    "from": 102,
    "label": "has",
    "to": 98
  }, {
    "from": 239,
    "label": "has",
    "to": 137
  }, {
    "from": 137,
    "label": "has",
    "to": 116
  }, {
    "from": 116,
    "label": "has",
    "to": 105
  }, {
    "from": 137,
    "label": "has",
    "to": 117
  }, {
    "from": 117,
    "label": "has",
    "to": 108
  }, {
    "from": 117,
    "label": "has",
    "to": 109
  }, {
    "from": 117,
    "label": "has",
    "to": 110
  }, {
    "from": 117,
    "label": "has",
    "to": 111
  }, {
    "from": 117,
    "label": "has",
    "to": 112
  }, {
    "from": 117,
    "label": "has",
    "to": 113
  }, {
    "from": 239,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 124
  }, {
    "from": 124,
    "label": "has",
    "to": 120
  }, {
    "from": 124,
    "label": "has",
    "to": 121
  }, {
    "from": 239,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 127
  }, {
    "from": 139,
    "label": "has",
    "to": 128
  }, {
    "from": 229,
    "label": "has",
    "to": 240
  }, {
    "from": 240,
    "label": "has",
    "to": 166
  }, {
    "from": 166,
    "label": "has",
    "to": 142
  }, {
    "from": 166,
    "label": "has",
    "to": 143
  }, {
    "from": 240,
    "label": "has",
    "to": 167
  }, {
    "from": 167,
    "label": "has",
    "to": 146
  }, {
    "from": 167,
    "label": "has",
    "to": 147
  }, {
    "from": 240,
    "label": "has",
    "to": 168
  }, {
    "from": 168,
    "label": "has",
    "to": 150
  }, {
    "from": 168,
    "label": "has",
    "to": 151
  }, {
    "from": 240,
    "label": "has",
    "to": 169
  }, {
    "from": 169,
    "label": "has",
    "to": 154
  }, {
    "from": 169,
    "label": "has",
    "to": 155
  }, {
    "from": 240,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 158
  }, {
    "from": 170,
    "label": "has",
    "to": 159
  }, {
    "from": 240,
    "label": "has",
    "to": 171
  }, {
    "from": 171,
    "label": "has",
    "to": 162
  }, {
    "from": 171,
    "label": "has",
    "to": 163
  }, {
    "from": 229,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 224
  }, {
    "from": 241,
    "label": "has",
    "to": 2
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 241,
    "label": "has",
    "to": 225
  }, {
    "from": 225,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 174
  }, {
    "from": 194,
    "label": "has",
    "to": 175
  }, {
    "from": 225,
    "label": "has",
    "to": 195
  }, {
    "from": 195,
    "label": "has",
    "to": 178
  }, {
    "from": 195,
    "label": "has",
    "to": 179
  }, {
    "from": 195,
    "label": "has",
    "to": 180
  }, {
    "from": 195,
    "label": "has",
    "to": 181
  }, {
    "from": 225,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 184
  }, {
    "from": 196,
    "label": "has",
    "to": 185
  }, {
    "from": 196,
    "label": "has",
    "to": 186
  }, {
    "from": 196,
    "label": "has",
    "to": 187
  }, {
    "from": 196,
    "label": "has",
    "to": 188
  }, {
    "from": 196,
    "label": "has",
    "to": 189
  }, {
    "from": 196,
    "label": "has",
    "to": 190
  }, {
    "from": 196,
    "label": "has",
    "to": 191
  }, {
    "from": 241,
    "label": "has",
    "to": 226
  }, {
    "from": 226,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 202
  }, {
    "from": 202,
    "label": "has",
    "to": 199
  }, {
    "from": 207,
    "label": "has",
    "to": 203
  }, {
    "from": 207,
    "label": "has",
    "to": 204
  }, {
    "from": 241,
    "label": "has",
    "to": 227
  }, {
    "from": 227,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 174
  }, {
    "from": 220,
    "label": "has",
    "to": 175
  }, {
    "from": 220,
    "label": "has",
    "to": 210
  }, {
    "from": 227,
    "label": "has",
    "to": 221
  }, {
    "from": 221,
    "label": "has",
    "to": 213
  }, {
    "from": 221,
    "label": "has",
    "to": 214
  }, {
    "from": 221,
    "label": "has",
    "to": 180
  }, {
    "from": 221,
    "label": "has",
    "to": 215
  }, {
    "from": 221,
    "label": "has",
    "to": 216
  }, {
    "from": 221,
    "label": "has",
    "to": 217
  }, {
    "from": 221,
    "label": "has",
    "to": 191
  }, {
    "from": 229,
    "label": "has",
    "to": 242
  }, {
    "from": 243,
    "label": "calls",
    "to": 253
  }, {
    "from": 243,
    "label": "calls",
    "to": 254
  }, {
    "from": 243,
    "label": "calls",
    "to": 254
  }, {
    "from": 2,
    "label": "calls",
    "to": 256
  }, {
    "from": 243,
    "label": "calls",
    "to": 247
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 250
  }, {
    "from": 243,
    "label": "calls",
    "to": 251
  }, {
    "from": 243,
    "label": "calls",
    "to": 251
  }, {
    "from": 243,
    "label": "calls",
    "to": 251
  }, {
    "from": 243,
    "label": "calls",
    "to": 251
  }, {
    "from": 243,
    "label": "calls",
    "to": 251
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 244
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 248
  }, {
    "from": 243,
    "label": "calls",
    "to": 258
  }, {
    "from": 243,
    "label": "calls",
    "to": 258
  }, {
    "from": 243,
    "label": "calls",
    "to": 258
  }, {
    "from": 243,
    "label": "calls",
    "to": 258
  }, {
    "from": 243,
    "label": "calls",
    "to": 258
  }, {
    "from": 243,
    "label": "calls",
    "to": 258
  }, {
    "from": 243,
    "label": "calls",
    "to": 245
  }, {
    "from": 243,
    "label": "calls",
    "to": 245
  }, {
    "from": 243,
    "label": "calls",
    "to": 245
  }, {
    "from": 243,
    "label": "calls",
    "to": 245
  }, {
    "from": 243,
    "label": "calls",
    "to": 245
  }, {
    "from": 243,
    "label": "calls",
    "to": 245
  }, {
    "from": 243,
    "label": "calls",
    "to": 245
  }, {
    "from": 243,
    "label": "calls",
    "to": 245
  }, {
    "from": 243,
    "label": "calls",
    "to": 245
  }, {
    "from": 243,
    "label": "calls",
    "to": 245
  }, {
    "from": 243,
    "label": "calls",
    "to": 245
  }, {
    "from": 243,
    "label": "calls",
    "to": 257
  }, {
    "from": 243,
    "label": "calls",
    "to": 257
  }, {
    "from": 243,
    "label": "calls",
    "to": 257
  }, {
    "from": 243,
    "label": "calls",
    "to": 249
  }, {
    "from": 243,
    "label": "calls",
    "to": 255
  }, {
    "from": 243,
    "label": "calls",
    "to": 255
  }, {
    "from": 243,
    "label": "calls",
    "to": 246
  }, {
    "from": 243,
    "label": "calls",
    "to": 252
  }, {
    "from": 1,
    "label": "contains",
    "to": 243
  }, {
    "from": 243,
    "label": "declares",
    "to": 2
  }, {
    "from": 243,
    "label": "declares",
    "to": 5
  }, {
    "from": 243,
    "label": "declares",
    "to": 8
  }, {
    "from": 243,
    "label": "declares",
    "to": 11
  }, {
    "from": 243,
    "label": "declares",
    "to": 14
  }, {
    "from": 243,
    "label": "declares",
    "to": 17
  }, {
    "from": 243,
    "label": "declares",
    "to": 20
  }, {
    "from": 243,
    "label": "declares",
    "to": 23
  }, {
    "from": 243,
    "label": "declares",
    "to": 26
  }, {
    "from": 243,
    "label": "declares",
    "to": 28
  }, {
    "from": 243,
    "label": "declares",
    "to": 31
  }, {
    "from": 243,
    "label": "declares",
    "to": 37
  }, {
    "from": 243,
    "label": "declares",
    "to": 41
  }, {
    "from": 243,
    "label": "declares",
    "to": 45
  }, {
    "from": 243,
    "label": "declares",
    "to": 49
  }, {
    "from": 243,
    "label": "declares",
    "to": 53
  }, {
    "from": 243,
    "label": "declares",
    "to": 57
  }, {
    "from": 243,
    "label": "declares",
    "to": 62
  }, {
    "from": 243,
    "label": "declares",
    "to": 65
  }, {
    "from": 243,
    "label": "declares",
    "to": 68
  }, {
    "from": 243,
    "label": "declares",
    "to": 72
  }, {
    "from": 243,
    "label": "declares",
    "to": 75
  }, {
    "from": 243,
    "label": "declares",
    "to": 78
  }, {
    "from": 243,
    "label": "declares",
    "to": 81
  }, {
    "from": 243,
    "label": "declares",
    "to": 84
  }, {
    "from": 243,
    "label": "declares",
    "to": 87
  }, {
    "from": 243,
    "label": "declares",
    "to": 90
  }, {
    "from": 243,
    "label": "declares",
    "to": 93
  }, {
    "from": 243,
    "label": "declares",
    "to": 96
  }, {
    "from": 243,
    "label": "declares",
    "to": 100
  }, {
    "from": 243,
    "label": "declares",
    "to": 104
  }, {
    "from": 243,
    "label": "declares",
    "to": 107
  }, {
    "from": 243,
    "label": "declares",
    "to": 115
  }, {
    "from": 243,
    "label": "declares",
    "to": 119
  }, {
    "from": 243,
    "label": "declares",
    "to": 123
  }, {
    "from": 243,
    "label": "declares",
    "to": 126
  }, {
    "from": 243,
    "label": "declares",
    "to": 130
  }, {
    "from": 243,
    "label": "declares",
    "to": 141
  }, {
    "from": 243,
    "label": "declares",
    "to": 145
  }, {
    "from": 243,
    "label": "declares",
    "to": 149
  }, {
    "from": 243,
    "label": "declares",
    "to": 153
  }, {
    "from": 243,
    "label": "declares",
    "to": 157
  }, {
    "from": 243,
    "label": "declares",
    "to": 161
  }, {
    "from": 243,
    "label": "declares",
    "to": 165
  }, {
    "from": 243,
    "label": "declares",
    "to": 173
  }, {
    "from": 243,
    "label": "declares",
    "to": 177
  }, {
    "from": 243,
    "label": "declares",
    "to": 183
  }, {
    "from": 243,
    "label": "declares",
    "to": 193
  }, {
    "from": 243,
    "label": "declares",
    "to": 198
  }, {
    "from": 243,
    "label": "declares",
    "to": 201
  }, {
    "from": 243,
    "label": "declares",
    "to": 206
  }, {
    "from": 243,
    "label": "declares",
    "to": 209
  }, {
    "from": 243,
    "label": "declares",
    "to": 212
  }, {
    "from": 243,
    "label": "declares",
    "to": 219
  }, {
    "from": 243,
    "label": "declares",
    "to": 223
  }, {
    "from": 243,
    "label": "declares",
    "to": 229
  }, {
    "from": 1,
    "label": "contains",
    "to": 260
  }, {
    "from": 1,
    "label": "contains",
    "to": 261
  }, {
    "from": 261,
    "label": "initializes",
    "to": 262
  }, {
    "from": 262,
    "label": "requires",
    "to": 259
  }, {
    "from": 12,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 18,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 24,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 29,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 33,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 33,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 23
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 57
  }, {
    "from": 73,
    "label": "hasArgument",
    "to": 68
  }, {
    "from": 79,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 85,
    "label": "hasArgument",
    "to": 81
  }, {
    "from": 91,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 93
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 96
  }, {
    "from": 116,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 117,
    "label": "hasArgument",
    "to": 107
  }, {
    "from": 124,
    "label": "hasArgument",
    "to": 119
  }, {
    "from": 131,
    "label": "hasArgument",
    "to": 65
  }, {
    "from": 132,
    "label": "hasArgument",
    "to": 68
  }, {
    "from": 132,
    "label": "hasArgument",
    "to": 72
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 133,
    "label": "hasArgument",
    "to": 78
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 81
  }, {
    "from": 134,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 135,
    "label": "hasArgument",
    "to": 90
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 93
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 96
  }, {
    "from": 136,
    "label": "hasArgument",
    "to": 100
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 107
  }, {
    "from": 137,
    "label": "hasArgument",
    "to": 115
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 119
  }, {
    "from": 138,
    "label": "hasArgument",
    "to": 123
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 166,
    "label": "hasArgument",
    "to": 141
  }, {
    "from": 167,
    "label": "hasArgument",
    "to": 145
  }, {
    "from": 168,
    "label": "hasArgument",
    "to": 149
  }, {
    "from": 169,
    "label": "hasArgument",
    "to": 153
  }, {
    "from": 170,
    "label": "hasArgument",
    "to": 157
  }, {
    "from": 171,
    "label": "hasArgument",
    "to": 161
  }, {
    "from": 194,
    "label": "hasArgument",
    "to": 173
  }, {
    "from": 195,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 196,
    "label": "hasArgument",
    "to": 183
  }, {
    "from": 202,
    "label": "hasArgument",
    "to": 198
  }, {
    "from": 207,
    "label": "hasArgument",
    "to": 198
  }, {
    "from": 207,
    "label": "hasArgument",
    "to": 201
  }, {
    "from": 220,
    "label": "hasArgument",
    "to": 209
  }, {
    "from": 221,
    "label": "hasArgument",
    "to": 212
  }, {
    "from": 225,
    "label": "hasArgument",
    "to": 173
  }, {
    "from": 225,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 225,
    "label": "hasArgument",
    "to": 183
  }, {
    "from": 225,
    "label": "hasArgument",
    "to": 193
  }, {
    "from": 226,
    "label": "hasArgument",
    "to": 198
  }, {
    "from": 226,
    "label": "hasArgument",
    "to": 201
  }, {
    "from": 226,
    "label": "hasArgument",
    "to": 206
  }, {
    "from": 227,
    "label": "hasArgument",
    "to": 209
  }, {
    "from": 227,
    "label": "hasArgument",
    "to": 212
  }, {
    "from": 227,
    "label": "hasArgument",
    "to": 219
  }, {
    "from": 231,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 23
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 28
  }, {
    "from": 232,
    "label": "hasArgument",
    "to": 31
  }, {
    "from": 233,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 234,
    "label": "hasArgument",
    "to": 41
  }, {
    "from": 235,
    "label": "hasArgument",
    "to": 45
  }, {
    "from": 236,
    "label": "hasArgument",
    "to": 49
  }, {
    "from": 237,
    "label": "hasArgument",
    "to": 53
  }, {
    "from": 238,
    "label": "hasArgument",
    "to": 57
  }, {
    "from": 238,
    "label": "hasArgument",
    "to": 62
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 65
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 68
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 72
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 78
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 81
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 84
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 90
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 93
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 96
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 100
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 104
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 107
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 115
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 119
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 123
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 126
  }, {
    "from": 239,
    "label": "hasArgument",
    "to": 130
  }, {
    "from": 240,
    "label": "hasArgument",
    "to": 141
  }, {
    "from": 240,
    "label": "hasArgument",
    "to": 145
  }, {
    "from": 240,
    "label": "hasArgument",
    "to": 149
  }, {
    "from": 240,
    "label": "hasArgument",
    "to": 153
  }, {
    "from": 240,
    "label": "hasArgument",
    "to": 157
  }, {
    "from": 240,
    "label": "hasArgument",
    "to": 161
  }, {
    "from": 240,
    "label": "hasArgument",
    "to": 165
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 173
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 177
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 183
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 193
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 198
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 201
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 206
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 209
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 212
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 219
  }, {
    "from": 241,
    "label": "hasArgument",
    "to": 223
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "option_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function capture(key, value, altkey)\r\n      table.insert(call_args, { key, value, altkey })\r\n    end",
    "type": "function"
  }, {
    "id": 3,
    "text": "table.insert(call_args, { key, value, altkey })",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "function()\r\n    cli = require(\"cliargs.core\")()\r\n  end",
    "type": "function"
  }, {
    "id": 6,
    "text": "cli = require(\"cliargs.core\")()",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function()\r\n        cli:option()\r\n      end",
    "type": "function"
  }, {
    "id": 9,
    "text": "cli:option()",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function()\r\n      assert.error_matches(function()\r\n        cli:option()\r\n      end, 'Key and description are mandatory arguments')\r\n    end",
    "type": "function"
  }, {
    "id": 12,
    "text": "assert.error_matches(function()\r\n        cli:option()\r\n      end, 'Key and description are mandatory arguments')",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function()\r\n        cli:option('--url=URL')\r\n      end",
    "type": "function"
  }, {
    "id": 15,
    "text": "cli:option('--url=URL')",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function()\r\n      assert.error_matches(function()\r\n        cli:option('--url=URL')\r\n      end, 'Key and description are mandatory arguments')\r\n    end",
    "type": "function"
  }, {
    "id": 18,
    "text": "assert.error_matches(function()\r\n        cli:option('--url=URL')\r\n      end, 'Key and description are mandatory arguments')",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function()\r\n        cli:option('--url=URL', '...')\r\n      end",
    "type": "function"
  }, {
    "id": 21,
    "text": "cli:option('--url=URL', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function()\r\n      assert.has_no_errors(function()\r\n        cli:option('--url=URL', '...')\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 24,
    "text": "assert.has_no_errors(function()\r\n        cli:option('--url=URL', '...')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function()\r\n        cli:option('--url=URL', '...')\r\n      end",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function()\r\n      cli:option('--url=URL', '...')\r\n\r\n      assert.error_matches(function()\r\n        cli:option('--url=URL', '...')\r\n      end, 'Duplicate')\r\n    end",
    "type": "function"
  }, {
    "id": 29,
    "text": "assert.error_matches(function()\r\n        cli:option('--url=URL', '...')\r\n      end, 'Duplicate')",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function()\r\n    it('requires a key', function()\r\n      assert.error_matches(function()\r\n        cli:option()\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('requires a description', function()\r\n      assert.error_matches(function()\r\n        cli:option('--url=URL')\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('works', function()\r\n      assert.has_no_errors(function()\r\n        cli:option('--url=URL', '...')\r\n      end)\r\n    end)\r\n\r\n    it('rejects a duplicate option', function()\r\n      cli:option('--url=URL', '...')\r\n\r\n      assert.error_matches(function()\r\n        cli:option('--url=URL', '...')\r\n      end, 'Duplicate')\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 32,
    "text": "it('requires a key', function()\r\n      assert.error_matches(function()\r\n        cli:option()\r\n      end, 'Key and description are mandatory arguments')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "it('requires a description', function()\r\n      assert.error_matches(function()\r\n        cli:option('--url=URL')\r\n      end, 'Key and description are mandatory arguments')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "it('works', function()\r\n      assert.has_no_errors(function()\r\n        cli:option('--url=URL', '...')\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "it('rejects a duplicate option', function()\r\n      cli:option('--url=URL', '...')\r\n\r\n      assert.error_matches(function()\r\n        cli:option('--url=URL', '...')\r\n      end, 'Duplicate')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function()\r\n    cli:option('-u VALUE', '...')\r\n    assert.equal(helpers.parse(cli, '-u something').u, 'something')\r\n  end",
    "type": "function"
  }, {
    "id": 38,
    "text": "cli:option('-u VALUE', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "assert.equal(helpers.parse(cli, '-u something').u, 'something')",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function()\r\n    cli:option('--url=VALUE', '...')\r\n    assert.equal(helpers.parse(cli, '--url=something').url, 'something')\r\n  end",
    "type": "function"
  }, {
    "id": 42,
    "text": "cli:option('--url=VALUE', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "assert.equal(helpers.parse(cli, '--url=something').url, 'something')",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function()\r\n    cli:option('--url VALUE', '...')\r\n    assert.equal(helpers.parse(cli, '--url something').url, 'something')\r\n  end",
    "type": "function"
  }, {
    "id": 46,
    "text": "cli:option('--url VALUE', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "assert.equal(helpers.parse(cli, '--url something').url, 'something')",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function()\r\n    cli:option('-u, --url=VALUE', '...')\r\n    assert.equal(helpers.parse(cli, '--url=something').url, 'something')\r\n    assert.equal(helpers.parse(cli, '-u=something').url, 'something')\r\n  end",
    "type": "function"
  }, {
    "id": 50,
    "text": "cli:option('-u, --url=VALUE', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "assert.equal(helpers.parse(cli, '-u=something').url, 'something')",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function()\r\n    cli:option('-u --url=VALUE', '...')\r\n    assert.equal(helpers.parse(cli, '--url something').url, 'something')\r\n    assert.equal(helpers.parse(cli, '-u    something').url, 'something')\r\n  end",
    "type": "function"
  }, {
    "id": 54,
    "text": "cli:option('-u --url=VALUE', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert.equal(helpers.parse(cli, '-u    something').url, 'something')",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function()\r\n      stub(cli, 'flag')\r\n\r\n      cli:option('-q', '...')\r\n\r\n      assert.stub(cli.flag).was.called();\r\n    end",
    "type": "function"
  }, {
    "id": 58,
    "text": "stub(cli, 'flag')",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "cli:option('-q', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "assert.stub(cli.flag).was.called()",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function()\r\n    it('proxies to #flag', function()\r\n      stub(cli, 'flag')\r\n\r\n      cli:option('-q', '...')\r\n\r\n      assert.stub(cli.flag).was.called();\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 63,
    "text": "it('proxies to #flag', function()\r\n      stub(cli, 'flag')\r\n\r\n      cli:option('-q', '...')\r\n\r\n      assert.stub(cli.flag).was.called();\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function()\r\n      cli:option('-s, --source=SOURCE', '...')\r\n    end",
    "type": "function"
  }, {
    "id": 66,
    "text": "cli:option('-s, --source=SOURCE', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function()\r\n        local args = helpers.parse(cli, '-s /foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end",
    "type": "function"
  }, {
    "id": 69,
    "text": "local args = helpers.parse(cli, '-s /foo/**/*.lua')",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "assert.equal(args.source, '/foo/**/*.lua')",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-s /foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 73,
    "text": "it('works', function()\r\n        local args = helpers.parse(cli, '-s /foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function()\r\n        local args = helpers.parse(cli, '-s=/foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end",
    "type": "function"
  }, {
    "id": 76,
    "text": "local args = helpers.parse(cli, '-s=/foo/**/*.lua')",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-s=/foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 79,
    "text": "it('works', function()\r\n        local args = helpers.parse(cli, '-s=/foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function()\r\n        local args = helpers.parse(cli, '--source /foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end",
    "type": "function"
  }, {
    "id": 82,
    "text": "local args = helpers.parse(cli, '--source /foo/**/*.lua')",
    "type": "statement:localassign"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '--source /foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 85,
    "text": "it('works', function()\r\n        local args = helpers.parse(cli, '--source /foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function()\r\n        local args = helpers.parse(cli, '--source=/foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end",
    "type": "function"
  }, {
    "id": 88,
    "text": "local args = helpers.parse(cli, '--source=/foo/**/*.lua')",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '--source=/foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 91,
    "text": "it('works', function()\r\n        local args = helpers.parse(cli, '--source=/foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function()\r\n        cli:option('-Xassembler OPTIONS', '...')\r\n      end",
    "type": "function"
  }, {
    "id": 94,
    "text": "cli:option('-Xassembler OPTIONS', '...')",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 96,
    "text": "function()\r\n        local args = helpers.parse(cli, '-Xassembler foo')\r\n        assert.equal(args.Xassembler, 'foo')\r\n      end",
    "type": "function"
  }, {
    "id": 97,
    "text": "local args = helpers.parse(cli, '-Xassembler foo')",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "assert.equal(args.Xassembler, 'foo')",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function()\r\n      before_each(function()\r\n        cli:option('-Xassembler OPTIONS', '...')\r\n      end)\r\n\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-Xassembler foo')\r\n        assert.equal(args.Xassembler, 'foo')\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 101,
    "text": "before_each(function()\r\n        cli:option('-Xassembler OPTIONS', '...')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "it('works', function()\r\n        local args = helpers.parse(cli, '-Xassembler foo')\r\n        assert.equal(args.Xassembler, 'foo')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function()\r\n        cli:option('-k, --key=OPTIONS', '...', {})\r\n      end",
    "type": "function"
  }, {
    "id": 105,
    "text": "cli:option('-k, --key=OPTIONS', '...', {})",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function()\r\n        local args = helpers.parse(cli, '-k 1 --key=3 -k asdf')\r\n\r\n        assert.equal(type(args.k), 'table')\r\n        assert.equal(#args.k, 3)\r\n        assert.equal(args.k[1], '1')\r\n        assert.equal(args.k[2], '3')\r\n        assert.equal(args.k[3], 'asdf')\r\n      end",
    "type": "function"
  }, {
    "id": 108,
    "text": "local args = helpers.parse(cli, '-k 1 --key=3 -k asdf')",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "assert.equal(type(args.k), 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "assert.equal(#args.k, 3)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "assert.equal(args.k[1], '1')",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "assert.equal(args.k[2], '3')",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "assert.equal(args.k[3], 'asdf')",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function()\r\n      before_each(function()\r\n        cli:option('-k, --key=OPTIONS', '...', {})\r\n      end)\r\n\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-k 1 --key=3 -k asdf')\r\n\r\n        assert.equal(type(args.k), 'table')\r\n        assert.equal(#args.k, 3)\r\n        assert.equal(args.k[1], '1')\r\n        assert.equal(args.k[2], '3')\r\n        assert.equal(args.k[3], 'asdf')\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 116,
    "text": "before_each(function()\r\n        cli:option('-k, --key=OPTIONS', '...', {})\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "it('works', function()\r\n        local args = helpers.parse(cli, '-k 1 --key=3 -k asdf')\r\n\r\n        assert.equal(type(args.k), 'table')\r\n        assert.equal(#args.k, 3)\r\n        assert.equal(args.k[1], '1')\r\n        assert.equal(args.k[2], '3')\r\n        assert.equal(args.k[3], 'asdf')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function()\r\n        local _, err = helpers.parse(cli, '--asdf=jkl;', true)\r\n        assert.matches('unknown', err)\r\n      end",
    "type": "function"
  }, {
    "id": 120,
    "text": "local _, err = helpers.parse(cli, '--asdf=jkl;', true)",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "assert.matches('unknown', err)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function()\r\n      it('bails', function()\r\n        local _, err = helpers.parse(cli, '--asdf=jkl;', true)\r\n        assert.matches('unknown', err)\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 124,
    "text": "it('bails', function()\r\n        local _, err = helpers.parse(cli, '--asdf=jkl;', true)\r\n        assert.matches('unknown', err)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function()\r\n      local _, err = helpers.parse(cli, '-s')\r\n      assert.matches(\"option %-s requires a value to be set\", err)\r\n    end",
    "type": "function"
  }, {
    "id": 127,
    "text": "local _, err = helpers.parse(cli, '-s')",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "assert.matches(\"option %-s requires a value to be set\", err)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 130,
    "text": "function()\r\n    before_each(function()\r\n      cli:option('-s, --source=SOURCE', '...')\r\n    end)\r\n\r\n    context('using a -short key and space as a delimiter', function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-s /foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end)\r\n\r\n    context('using a -short key and = as a delimiter', function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-s=/foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end)\r\n\r\n    context('using an --expanded-key and space as a delimiter', function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '--source /foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end)\r\n\r\n    context('using an --expanded-key and = as a delimiter', function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '--source=/foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end)\r\n\r\n    context('for an option with a short key longer than 1 char', function()\r\n      before_each(function()\r\n        cli:option('-Xassembler OPTIONS', '...')\r\n      end)\r\n\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-Xassembler foo')\r\n        assert.equal(args.Xassembler, 'foo')\r\n      end)\r\n    end)\r\n\r\n    context('given multiple values', function()\r\n      before_each(function()\r\n        cli:option('-k, --key=OPTIONS', '...', {})\r\n      end)\r\n\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-k 1 --key=3 -k asdf')\r\n\r\n        assert.equal(type(args.k), 'table')\r\n        assert.equal(#args.k, 3)\r\n        assert.equal(args.k[1], '1')\r\n        assert.equal(args.k[2], '3')\r\n        assert.equal(args.k[3], 'asdf')\r\n      end)\r\n    end)\r\n\r\n    context('given an unknown option', function()\r\n      it('bails', function()\r\n        local _, err = helpers.parse(cli, '--asdf=jkl;', true)\r\n        assert.matches('unknown', err)\r\n      end)\r\n    end)\r\n\r\n    it('bails if no value was passed', function()\r\n      local _, err = helpers.parse(cli, '-s')\r\n      assert.matches(\"option %-s requires a value to be set\", err)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 131,
    "text": "before_each(function()\r\n      cli:option('-s, --source=SOURCE', '...')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "context('using a -short key and space as a delimiter', function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-s /foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 133,
    "text": "context('using a -short key and = as a delimiter', function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-s=/foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 134,
    "text": "context('using an --expanded-key and space as a delimiter', function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '--source /foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "context('using an --expanded-key and = as a delimiter', function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '--source=/foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 136,
    "text": "context('for an option with a short key longer than 1 char', function()\r\n      before_each(function()\r\n        cli:option('-Xassembler OPTIONS', '...')\r\n      end)\r\n\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-Xassembler foo')\r\n        assert.equal(args.Xassembler, 'foo')\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "context('given multiple values', function()\r\n      before_each(function()\r\n        cli:option('-k, --key=OPTIONS', '...', {})\r\n      end)\r\n\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-k 1 --key=3 -k asdf')\r\n\r\n        assert.equal(type(args.k), 'table')\r\n        assert.equal(#args.k, 3)\r\n        assert.equal(args.k[1], '1')\r\n        assert.equal(args.k[2], '3')\r\n        assert.equal(args.k[3], 'asdf')\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "context('given an unknown option', function()\r\n      it('bails', function()\r\n        local _, err = helpers.parse(cli, '--asdf=jkl;', true)\r\n        assert.matches('unknown', err)\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 139,
    "text": "it('bails if no value was passed', function()\r\n      local _, err = helpers.parse(cli, '-s')\r\n      assert.matches(\"option %-s requires a value to be set\", err)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "function()\r\n      cli:option('--compress=VALUE', '...', nil)\r\n      assert.equal(helpers.parse(cli, '').compress, nil)\r\n    end",
    "type": "function"
  }, {
    "id": 142,
    "text": "cli:option('--compress=VALUE', '...', nil)",
    "type": "statement:functioncall"
  }, {
    "id": 143,
    "text": "assert.equal(helpers.parse(cli, '').compress, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 144,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 145,
    "text": "function()\r\n      cli:option('--compress=VALUE', '...', 'lzma')\r\n      assert.equal(helpers.parse(cli, '').compress, 'lzma')\r\n    end",
    "type": "function"
  }, {
    "id": 146,
    "text": "cli:option('--compress=VALUE', '...', 'lzma')",
    "type": "statement:functioncall"
  }, {
    "id": 147,
    "text": "assert.equal(helpers.parse(cli, '').compress, 'lzma')",
    "type": "statement:functioncall"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function()\r\n      cli:option('--count=VALUE', '...', 5)\r\n      assert.equal(helpers.parse(cli, '').count, 5)\r\n    end",
    "type": "function"
  }, {
    "id": 150,
    "text": "cli:option('--count=VALUE', '...', 5)",
    "type": "statement:functioncall"
  }, {
    "id": 151,
    "text": "assert.equal(helpers.parse(cli, '').count, 5)",
    "type": "statement:functioncall"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function()\r\n      cli:option('--quiet=VALUE', '...', true)\r\n      assert.equal(helpers.parse(cli, '').quiet, true)\r\n    end",
    "type": "function"
  }, {
    "id": 154,
    "text": "cli:option('--quiet=VALUE', '...', true)",
    "type": "statement:functioncall"
  }, {
    "id": 155,
    "text": "assert.equal(helpers.parse(cli, '').quiet, true)",
    "type": "statement:functioncall"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "function()\r\n      cli:option('--sources=VALUE', '...', {})\r\n      assert.same(helpers.parse(cli, '').sources, {})\r\n    end",
    "type": "function"
  }, {
    "id": 158,
    "text": "cli:option('--sources=VALUE', '...', {})",
    "type": "statement:functioncall"
  }, {
    "id": 159,
    "text": "assert.same(helpers.parse(cli, '').sources, {})",
    "type": "statement:functioncall"
  }, {
    "id": 160,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 161,
    "text": "function()\r\n      cli:option('--compress=URL', '...', 'lzma')\r\n      assert.equal(helpers.parse(cli, '--compress=').compress, nil)\r\n    end",
    "type": "function"
  }, {
    "id": 162,
    "text": "cli:option('--compress=URL', '...', 'lzma')",
    "type": "statement:functioncall"
  }, {
    "id": 163,
    "text": "assert.equal(helpers.parse(cli, '--compress=').compress, nil)",
    "type": "statement:functioncall"
  }, {
    "id": 164,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 165,
    "text": "function()\r\n    it('accepts a nil', function()\r\n      cli:option('--compress=VALUE', '...', nil)\r\n      assert.equal(helpers.parse(cli, '').compress, nil)\r\n    end)\r\n\r\n    it('accepts a string', function()\r\n      cli:option('--compress=VALUE', '...', 'lzma')\r\n      assert.equal(helpers.parse(cli, '').compress, 'lzma')\r\n    end)\r\n\r\n    it('accepts a number', function()\r\n      cli:option('--count=VALUE', '...', 5)\r\n      assert.equal(helpers.parse(cli, '').count, 5)\r\n    end)\r\n\r\n    it('accepts a boolean', function()\r\n      cli:option('--quiet=VALUE', '...', true)\r\n      assert.equal(helpers.parse(cli, '').quiet, true)\r\n    end)\r\n\r\n    it('accepts an empty table', function()\r\n      cli:option('--sources=VALUE', '...', {})\r\n      assert.same(helpers.parse(cli, '').sources, {})\r\n    end)\r\n\r\n    it('lets me override/reset the default value', function()\r\n      cli:option('--compress=URL', '...', 'lzma')\r\n      assert.equal(helpers.parse(cli, '--compress=').compress, nil)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 166,
    "text": "it('accepts a nil', function()\r\n      cli:option('--compress=VALUE', '...', nil)\r\n      assert.equal(helpers.parse(cli, '').compress, nil)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 167,
    "text": "it('accepts a string', function()\r\n      cli:option('--compress=VALUE', '...', 'lzma')\r\n      assert.equal(helpers.parse(cli, '').compress, 'lzma')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 168,
    "text": "it('accepts a number', function()\r\n      cli:option('--count=VALUE', '...', 5)\r\n      assert.equal(helpers.parse(cli, '').count, 5)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 169,
    "text": "it('accepts a boolean', function()\r\n      cli:option('--quiet=VALUE', '...', true)\r\n      assert.equal(helpers.parse(cli, '').quiet, true)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 170,
    "text": "it('accepts an empty table', function()\r\n      cli:option('--sources=VALUE', '...', {})\r\n      assert.same(helpers.parse(cli, '').sources, {})\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 171,
    "text": "it('lets me override/reset the default value', function()\r\n      cli:option('--compress=URL', '...', 'lzma')\r\n      assert.equal(helpers.parse(cli, '--compress=').compress, nil)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 172,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 173,
    "text": "function()\r\n        call_args = {}\r\n\r\n        cli:option('-c, --compress=VALUE', '...', nil, capture)\r\n      end",
    "type": "function"
  }, {
    "id": 174,
    "text": "call_args = {}",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "cli:option('-c, --compress=VALUE', '...', nil, capture)",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 177,
    "text": "function()\r\n        helpers.parse(cli, '--compress=lzma')\r\n\r\n        assert.equal(call_args[1][1], 'compress')\r\n        assert.equal(call_args[1][2], 'lzma')\r\n        assert.equal(call_args[1][3], 'c')\r\n      end",
    "type": "function"
  }, {
    "id": 178,
    "text": "helpers.parse(cli, '--compress=lzma')",
    "type": "statement:functioncall"
  }, {
    "id": 179,
    "text": "assert.equal(call_args[1][1], 'compress')",
    "type": "statement:functioncall"
  }, {
    "id": 180,
    "text": "assert.equal(call_args[1][2], 'lzma')",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "assert.equal(call_args[1][3], 'c')",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "function()\r\n        cli:option('--tags=VALUE', '...', {}, capture)\r\n\r\n        helpers.parse(cli, '--tags only --tags foo')\r\n\r\n        assert.equal(call_args[1][1], 'tags')\r\n        assert.equal(call_args[1][2], 'only')\r\n        assert.equal(call_args[1][3], nil)\r\n\r\n        assert.equal(call_args[2][1], 'tags')\r\n        assert.equal(call_args[2][2], 'foo')\r\n        assert.equal(call_args[2][3], nil)\r\n      end",
    "type": "function"
  }, {
    "id": 184,
    "text": "cli:option('--tags=VALUE', '...', {}, capture)",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "helpers.parse(cli, '--tags only --tags foo')",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "assert.equal(call_args[1][1], 'tags')",
    "type": "statement:functioncall"
  }, {
    "id": 187,
    "text": "assert.equal(call_args[1][2], 'only')",
    "type": "statement:functioncall"
  }, {
    "id": 188,
    "text": "assert.equal(call_args[1][3], nil)",
    "type": "statement:functioncall"
  }, {
    "id": 189,
    "text": "assert.equal(call_args[2][1], 'tags')",
    "type": "statement:functioncall"
  }, {
    "id": 190,
    "text": "assert.equal(call_args[2][2], 'foo')",
    "type": "statement:functioncall"
  }, {
    "id": 191,
    "text": "assert.equal(call_args[2][3], nil)",
    "type": "statement:functioncall"
  }, {
    "id": 192,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 193,
    "text": "function()\r\n      before_each(function()\r\n        call_args = {}\r\n\r\n        cli:option('-c, --compress=VALUE', '...', nil, capture)\r\n      end)\r\n\r\n      it('invokes the callback when the option is parsed', function()\r\n        helpers.parse(cli, '--compress=lzma')\r\n\r\n        assert.equal(call_args[1][1], 'compress')\r\n        assert.equal(call_args[1][2], 'lzma')\r\n        assert.equal(call_args[1][3], 'c')\r\n      end)\r\n\r\n      it('invokes the callback with the latest value when the option is a list', function()\r\n        cli:option('--tags=VALUE', '...', {}, capture)\r\n\r\n        helpers.parse(cli, '--tags only --tags foo')\r\n\r\n        assert.equal(call_args[1][1], 'tags')\r\n        assert.equal(call_args[1][2], 'only')\r\n        assert.equal(call_args[1][3], nil)\r\n\r\n        assert.equal(call_args[2][1], 'tags')\r\n        assert.equal(call_args[2][2], 'foo')\r\n        assert.equal(call_args[2][3], nil)\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 194,
    "text": "before_each(function()\r\n        call_args = {}\r\n\r\n        cli:option('-c, --compress=VALUE', '...', nil, capture)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 195,
    "text": "it('invokes the callback when the option is parsed', function()\r\n        helpers.parse(cli, '--compress=lzma')\r\n\r\n        assert.equal(call_args[1][1], 'compress')\r\n        assert.equal(call_args[1][2], 'lzma')\r\n        assert.equal(call_args[1][3], 'c')\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 196,
    "text": "it('invokes the callback with the latest value when the option is a list', function()\r\n        cli:option('--tags=VALUE', '...', {}, capture)\r\n\r\n        helpers.parse(cli, '--tags only --tags foo')\r\n\r\n        assert.equal(call_args[1][1], 'tags')\r\n        assert.equal(call_args[1][2], 'only')\r\n        assert.equal(call_args[1][3], nil)\r\n\r\n        assert.equal(call_args[2][1], 'tags')\r\n        assert.equal(call_args[2][2], 'foo')\r\n        assert.equal(call_args[2][3], nil)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 197,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 198,
    "text": "function()\r\n          return nil, \">>> bad argument <<<\"\r\n        end",
    "type": "function"
  }, {
    "id": 199,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 200,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 201,
    "text": "function()\r\n        cli:option('-c, --compress=VALUE', '...', nil, function()\r\n          return nil, \">>> bad argument <<<\"\r\n        end)\r\n\r\n        local _, err = helpers.parse(cli, '-c lzma', true)\r\n        assert.equal('>>> bad argument <<<', err)\r\n      end",
    "type": "function"
  }, {
    "id": 202,
    "text": "cli:option('-c, --compress=VALUE', '...', nil, function()\r\n          return nil, \">>> bad argument <<<\"\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 203,
    "text": "local _, err = helpers.parse(cli, '-c lzma', true)",
    "type": "statement:localassign"
  }, {
    "id": 204,
    "text": "assert.equal('>>> bad argument <<<', err)",
    "type": "statement:functioncall"
  }, {
    "id": 205,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 206,
    "text": "function()\r\n      it('propagates the error', function()\r\n        cli:option('-c, --compress=VALUE', '...', nil, function()\r\n          return nil, \">>> bad argument <<<\"\r\n        end)\r\n\r\n        local _, err = helpers.parse(cli, '-c lzma', true)\r\n        assert.equal('>>> bad argument <<<', err)\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 207,
    "text": "it('propagates the error', function()\r\n        cli:option('-c, --compress=VALUE', '...', nil, function()\r\n          return nil, \">>> bad argument <<<\"\r\n        end)\r\n\r\n        local _, err = helpers.parse(cli, '-c lzma', true)\r\n        assert.equal('>>> bad argument <<<', err)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 208,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 209,
    "text": "function()\r\n        call_args = {}\r\n\r\n        cli:option('-c, --compress=VALUE', '...', nil, capture)\r\n        cli:option('--input=PATH', '...', nil, capture)\r\n      end",
    "type": "function"
  }, {
    "id": 210,
    "text": "cli:option('--input=PATH', '...', nil, capture)",
    "type": "statement:functioncall"
  }, {
    "id": 211,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 212,
    "text": "function()\r\n        helpers.parse(cli, '-c lzma --input=/tmp')\r\n\r\n        assert.equal(call_args[1][1], 'c')\r\n        assert.equal(call_args[1][2], 'lzma')\r\n        assert.equal(call_args[1][3], 'compress')\r\n\r\n        assert.equal(call_args[2][1], 'input')\r\n        assert.equal(call_args[2][2], '/tmp')\r\n        assert.equal(call_args[2][3], nil)\r\n      end",
    "type": "function"
  }, {
    "id": 213,
    "text": "helpers.parse(cli, '-c lzma --input=/tmp')",
    "type": "statement:functioncall"
  }, {
    "id": 214,
    "text": "assert.equal(call_args[1][1], 'c')",
    "type": "statement:functioncall"
  }, {
    "id": 215,
    "text": "assert.equal(call_args[1][3], 'compress')",
    "type": "statement:functioncall"
  }, {
    "id": 216,
    "text": "assert.equal(call_args[2][1], 'input')",
    "type": "statement:functioncall"
  }, {
    "id": 217,
    "text": "assert.equal(call_args[2][2], '/tmp')",
    "type": "statement:functioncall"
  }, {
    "id": 218,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 219,
    "text": "function()\r\n      before_each(function()\r\n        call_args = {}\r\n\r\n        cli:option('-c, --compress=VALUE', '...', nil, capture)\r\n        cli:option('--input=PATH', '...', nil, capture)\r\n      end)\r\n\r\n      it('invokes the callback for each option parsed', function()\r\n        helpers.parse(cli, '-c lzma --input=/tmp')\r\n\r\n        assert.equal(call_args[1][1], 'c')\r\n        assert.equal(call_args[1][2], 'lzma')\r\n        assert.equal(call_args[1][3], 'compress')\r\n\r\n        assert.equal(call_args[2][1], 'input')\r\n        assert.equal(call_args[2][2], '/tmp')\r\n        assert.equal(call_args[2][3], nil)\r\n      end)\r\n    end",
    "type": "function"
  }, {
    "id": 220,
    "text": "before_each(function()\r\n        call_args = {}\r\n\r\n        cli:option('-c, --compress=VALUE', '...', nil, capture)\r\n        cli:option('--input=PATH', '...', nil, capture)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 221,
    "text": "it('invokes the callback for each option parsed', function()\r\n        helpers.parse(cli, '-c lzma --input=/tmp')\r\n\r\n        assert.equal(call_args[1][1], 'c')\r\n        assert.equal(call_args[1][2], 'lzma')\r\n        assert.equal(call_args[1][3], 'compress')\r\n\r\n        assert.equal(call_args[2][1], 'input')\r\n        assert.equal(call_args[2][2], '/tmp')\r\n        assert.equal(call_args[2][3], nil)\r\n      end)",
    "type": "statement:functioncall"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function()\r\n    local call_args\r\n    local function capture(key, value, altkey)\r\n      table.insert(call_args, { key, value, altkey })\r\n    end\r\n\r\n    context('given a single option', function()\r\n      before_each(function()\r\n        call_args = {}\r\n\r\n        cli:option('-c, --compress=VALUE', '...', nil, capture)\r\n      end)\r\n\r\n      it('invokes the callback when the option is parsed', function()\r\n        helpers.parse(cli, '--compress=lzma')\r\n\r\n        assert.equal(call_args[1][1], 'compress')\r\n        assert.equal(call_args[1][2], 'lzma')\r\n        assert.equal(call_args[1][3], 'c')\r\n      end)\r\n\r\n      it('invokes the callback with the latest value when the option is a list', function()\r\n        cli:option('--tags=VALUE', '...', {}, capture)\r\n\r\n        helpers.parse(cli, '--tags only --tags foo')\r\n\r\n        assert.equal(call_args[1][1], 'tags')\r\n        assert.equal(call_args[1][2], 'only')\r\n        assert.equal(call_args[1][3], nil)\r\n\r\n        assert.equal(call_args[2][1], 'tags')\r\n        assert.equal(call_args[2][2], 'foo')\r\n        assert.equal(call_args[2][3], nil)\r\n      end)\r\n    end)\r\n\r\n    context('when the callback returns an error message', function()\r\n      it('propagates the error', function()\r\n        cli:option('-c, --compress=VALUE', '...', nil, function()\r\n          return nil, \">>> bad argument <<<\"\r\n        end)\r\n\r\n        local _, err = helpers.parse(cli, '-c lzma', true)\r\n        assert.equal('>>> bad argument <<<', err)\r\n      end)\r\n    end)\r\n\r\n    context('given multiple options', function()\r\n      before_each(function()\r\n        call_args = {}\r\n\r\n        cli:option('-c, --compress=VALUE', '...', nil, capture)\r\n        cli:option('--input=PATH', '...', nil, capture)\r\n      end)\r\n\r\n      it('invokes the callback for each option parsed', function()\r\n        helpers.parse(cli, '-c lzma --input=/tmp')\r\n\r\n        assert.equal(call_args[1][1], 'c')\r\n        assert.equal(call_args[1][2], 'lzma')\r\n        assert.equal(call_args[1][3], 'compress')\r\n\r\n        assert.equal(call_args[2][1], 'input')\r\n        assert.equal(call_args[2][2], '/tmp')\r\n        assert.equal(call_args[2][3], nil)\r\n      end)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 224,
    "text": "local call_args",
    "type": "statement:localassign"
  }, {
    "id": 225,
    "text": "context('given a single option', function()\r\n      before_each(function()\r\n        call_args = {}\r\n\r\n        cli:option('-c, --compress=VALUE', '...', nil, capture)\r\n      end)\r\n\r\n      it('invokes the callback when the option is parsed', function()\r\n        helpers.parse(cli, '--compress=lzma')\r\n\r\n        assert.equal(call_args[1][1], 'compress')\r\n        assert.equal(call_args[1][2], 'lzma')\r\n        assert.equal(call_args[1][3], 'c')\r\n      end)\r\n\r\n      it('invokes the callback with the latest value when the option is a list', function()\r\n        cli:option('--tags=VALUE', '...', {}, capture)\r\n\r\n        helpers.parse(cli, '--tags only --tags foo')\r\n\r\n        assert.equal(call_args[1][1], 'tags')\r\n        assert.equal(call_args[1][2], 'only')\r\n        assert.equal(call_args[1][3], nil)\r\n\r\n        assert.equal(call_args[2][1], 'tags')\r\n        assert.equal(call_args[2][2], 'foo')\r\n        assert.equal(call_args[2][3], nil)\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "context('when the callback returns an error message', function()\r\n      it('propagates the error', function()\r\n        cli:option('-c, --compress=VALUE', '...', nil, function()\r\n          return nil, \">>> bad argument <<<\"\r\n        end)\r\n\r\n        local _, err = helpers.parse(cli, '-c lzma', true)\r\n        assert.equal('>>> bad argument <<<', err)\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "context('given multiple options', function()\r\n      before_each(function()\r\n        call_args = {}\r\n\r\n        cli:option('-c, --compress=VALUE', '...', nil, capture)\r\n        cli:option('--input=PATH', '...', nil, capture)\r\n      end)\r\n\r\n      it('invokes the callback for each option parsed', function()\r\n        helpers.parse(cli, '-c lzma --input=/tmp')\r\n\r\n        assert.equal(call_args[1][1], 'c')\r\n        assert.equal(call_args[1][2], 'lzma')\r\n        assert.equal(call_args[1][3], 'compress')\r\n\r\n        assert.equal(call_args[2][1], 'input')\r\n        assert.equal(call_args[2][2], '/tmp')\r\n        assert.equal(call_args[2][3], nil)\r\n      end)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 229,
    "text": "function()\r\n  local cli\r\n\r\n  before_each(function()\r\n    cli = require(\"cliargs.core\")()\r\n  end)\r\n\r\n  describe('defining options', function()\r\n    it('requires a key', function()\r\n      assert.error_matches(function()\r\n        cli:option()\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('requires a description', function()\r\n      assert.error_matches(function()\r\n        cli:option('--url=URL')\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('works', function()\r\n      assert.has_no_errors(function()\r\n        cli:option('--url=URL', '...')\r\n      end)\r\n    end)\r\n\r\n    it('rejects a duplicate option', function()\r\n      cli:option('--url=URL', '...')\r\n\r\n      assert.error_matches(function()\r\n        cli:option('--url=URL', '...')\r\n      end, 'Duplicate')\r\n    end)\r\n  end)\r\n\r\n  it('works with only a short key: -u VALUE', function()\r\n    cli:option('-u VALUE', '...')\r\n    assert.equal(helpers.parse(cli, '-u something').u, 'something')\r\n  end)\r\n\r\n  it('works with only an expanded key: --url=VALUE', function()\r\n    cli:option('--url=VALUE', '...')\r\n    assert.equal(helpers.parse(cli, '--url=something').url, 'something')\r\n  end)\r\n\r\n  it('works with only an expanded key using space as a delimiter: --url VALUE', function()\r\n    cli:option('--url VALUE', '...')\r\n    assert.equal(helpers.parse(cli, '--url something').url, 'something')\r\n  end)\r\n\r\n  it('works with both: -u, --url=VALUE', function()\r\n    cli:option('-u, --url=VALUE', '...')\r\n    assert.equal(helpers.parse(cli, '--url=something').url, 'something')\r\n    assert.equal(helpers.parse(cli, '-u=something').url, 'something')\r\n  end)\r\n\r\n  it('works with both keys and no comma between them: -u --url VALUE', function()\r\n    cli:option('-u --url=VALUE', '...')\r\n    assert.equal(helpers.parse(cli, '--url something').url, 'something')\r\n    assert.equal(helpers.parse(cli, '-u    something').url, 'something')\r\n  end)\r\n\r\n  context('given no value indicator (an implicit flag, e.g. --quiet)', function()\r\n    it('proxies to #flag', function()\r\n      stub(cli, 'flag')\r\n\r\n      cli:option('-q', '...')\r\n\r\n      assert.stub(cli.flag).was.called();\r\n    end)\r\n  end)\r\n\r\n  describe('parsing', function()\r\n    before_each(function()\r\n      cli:option('-s, --source=SOURCE', '...')\r\n    end)\r\n\r\n    context('using a -short key and space as a delimiter', function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-s /foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end)\r\n\r\n    context('using a -short key and = as a delimiter', function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-s=/foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end)\r\n\r\n    context('using an --expanded-key and space as a delimiter', function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '--source /foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end)\r\n\r\n    context('using an --expanded-key and = as a delimiter', function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '--source=/foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end)\r\n\r\n    context('for an option with a short key longer than 1 char', function()\r\n      before_each(function()\r\n        cli:option('-Xassembler OPTIONS', '...')\r\n      end)\r\n\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-Xassembler foo')\r\n        assert.equal(args.Xassembler, 'foo')\r\n      end)\r\n    end)\r\n\r\n    context('given multiple values', function()\r\n      before_each(function()\r\n        cli:option('-k, --key=OPTIONS', '...', {})\r\n      end)\r\n\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-k 1 --key=3 -k asdf')\r\n\r\n        assert.equal(type(args.k), 'table')\r\n        assert.equal(#args.k, 3)\r\n        assert.equal(args.k[1], '1')\r\n        assert.equal(args.k[2], '3')\r\n        assert.equal(args.k[3], 'asdf')\r\n      end)\r\n    end)\r\n\r\n    context('given an unknown option', function()\r\n      it('bails', function()\r\n        local _, err = helpers.parse(cli, '--asdf=jkl;', true)\r\n        assert.matches('unknown', err)\r\n      end)\r\n    end)\r\n\r\n    it('bails if no value was passed', function()\r\n      local _, err = helpers.parse(cli, '-s')\r\n      assert.matches(\"option %-s requires a value to be set\", err)\r\n    end)\r\n  end)\r\n\r\n  describe('parsing with a default value', function()\r\n    it('accepts a nil', function()\r\n      cli:option('--compress=VALUE', '...', nil)\r\n      assert.equal(helpers.parse(cli, '').compress, nil)\r\n    end)\r\n\r\n    it('accepts a string', function()\r\n      cli:option('--compress=VALUE', '...', 'lzma')\r\n      assert.equal(helpers.parse(cli, '').compress, 'lzma')\r\n    end)\r\n\r\n    it('accepts a number', function()\r\n      cli:option('--count=VALUE', '...', 5)\r\n      assert.equal(helpers.parse(cli, '').count, 5)\r\n    end)\r\n\r\n    it('accepts a boolean', function()\r\n      cli:option('--quiet=VALUE', '...', true)\r\n      assert.equal(helpers.parse(cli, '').quiet, true)\r\n    end)\r\n\r\n    it('accepts an empty table', function()\r\n      cli:option('--sources=VALUE', '...', {})\r\n      assert.same(helpers.parse(cli, '').sources, {})\r\n    end)\r\n\r\n    it('lets me override/reset the default value', function()\r\n      cli:option('--compress=URL', '...', 'lzma')\r\n      assert.equal(helpers.parse(cli, '--compress=').compress, nil)\r\n    end)\r\n  end)\r\n\r\n  describe('@callback', function()\r\n    local call_args\r\n    local function capture(key, value, altkey)\r\n      table.insert(call_args, { key, value, altkey })\r\n    end\r\n\r\n    context('given a single option', function()\r\n      before_each(function()\r\n        call_args = {}\r\n\r\n        cli:option('-c, --compress=VALUE', '...', nil, capture)\r\n      end)\r\n\r\n      it('invokes the callback when the option is parsed', function()\r\n        helpers.parse(cli, '--compress=lzma')\r\n\r\n        assert.equal(call_args[1][1], 'compress')\r\n        assert.equal(call_args[1][2], 'lzma')\r\n        assert.equal(call_args[1][3], 'c')\r\n      end)\r\n\r\n      it('invokes the callback with the latest value when the option is a list', function()\r\n        cli:option('--tags=VALUE', '...', {}, capture)\r\n\r\n        helpers.parse(cli, '--tags only --tags foo')\r\n\r\n        assert.equal(call_args[1][1], 'tags')\r\n        assert.equal(call_args[1][2], 'only')\r\n        assert.equal(call_args[1][3], nil)\r\n\r\n        assert.equal(call_args[2][1], 'tags')\r\n        assert.equal(call_args[2][2], 'foo')\r\n        assert.equal(call_args[2][3], nil)\r\n      end)\r\n    end)\r\n\r\n    context('when the callback returns an error message', function()\r\n      it('propagates the error', function()\r\n        cli:option('-c, --compress=VALUE', '...', nil, function()\r\n          return nil, \">>> bad argument <<<\"\r\n        end)\r\n\r\n        local _, err = helpers.parse(cli, '-c lzma', true)\r\n        assert.equal('>>> bad argument <<<', err)\r\n      end)\r\n    end)\r\n\r\n    context('given multiple options', function()\r\n      before_each(function()\r\n        call_args = {}\r\n\r\n        cli:option('-c, --compress=VALUE', '...', nil, capture)\r\n        cli:option('--input=PATH', '...', nil, capture)\r\n      end)\r\n\r\n      it('invokes the callback for each option parsed', function()\r\n        helpers.parse(cli, '-c lzma --input=/tmp')\r\n\r\n        assert.equal(call_args[1][1], 'c')\r\n        assert.equal(call_args[1][2], 'lzma')\r\n        assert.equal(call_args[1][3], 'compress')\r\n\r\n        assert.equal(call_args[2][1], 'input')\r\n        assert.equal(call_args[2][2], '/tmp')\r\n        assert.equal(call_args[2][3], nil)\r\n      end)\r\n    end)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 230,
    "text": "local cli",
    "type": "statement:localassign"
  }, {
    "id": 231,
    "text": "before_each(function()\r\n    cli = require(\"cliargs.core\")()\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 232,
    "text": "describe('defining options', function()\r\n    it('requires a key', function()\r\n      assert.error_matches(function()\r\n        cli:option()\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('requires a description', function()\r\n      assert.error_matches(function()\r\n        cli:option('--url=URL')\r\n      end, 'Key and description are mandatory arguments')\r\n    end)\r\n\r\n    it('works', function()\r\n      assert.has_no_errors(function()\r\n        cli:option('--url=URL', '...')\r\n      end)\r\n    end)\r\n\r\n    it('rejects a duplicate option', function()\r\n      cli:option('--url=URL', '...')\r\n\r\n      assert.error_matches(function()\r\n        cli:option('--url=URL', '...')\r\n      end, 'Duplicate')\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 233,
    "text": "it('works with only a short key: -u VALUE', function()\r\n    cli:option('-u VALUE', '...')\r\n    assert.equal(helpers.parse(cli, '-u something').u, 'something')\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 234,
    "text": "it('works with only an expanded key: --url=VALUE', function()\r\n    cli:option('--url=VALUE', '...')\r\n    assert.equal(helpers.parse(cli, '--url=something').url, 'something')\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 235,
    "text": "it('works with only an expanded key using space as a delimiter: --url VALUE', function()\r\n    cli:option('--url VALUE', '...')\r\n    assert.equal(helpers.parse(cli, '--url something').url, 'something')\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 236,
    "text": "it('works with both: -u, --url=VALUE', function()\r\n    cli:option('-u, --url=VALUE', '...')\r\n    assert.equal(helpers.parse(cli, '--url=something').url, 'something')\r\n    assert.equal(helpers.parse(cli, '-u=something').url, 'something')\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 237,
    "text": "it('works with both keys and no comma between them: -u --url VALUE', function()\r\n    cli:option('-u --url=VALUE', '...')\r\n    assert.equal(helpers.parse(cli, '--url something').url, 'something')\r\n    assert.equal(helpers.parse(cli, '-u    something').url, 'something')\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 238,
    "text": "context('given no value indicator (an implicit flag, e.g. --quiet)', function()\r\n    it('proxies to #flag', function()\r\n      stub(cli, 'flag')\r\n\r\n      cli:option('-q', '...')\r\n\r\n      assert.stub(cli.flag).was.called();\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 239,
    "text": "describe('parsing', function()\r\n    before_each(function()\r\n      cli:option('-s, --source=SOURCE', '...')\r\n    end)\r\n\r\n    context('using a -short key and space as a delimiter', function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-s /foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end)\r\n\r\n    context('using a -short key and = as a delimiter', function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-s=/foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end)\r\n\r\n    context('using an --expanded-key and space as a delimiter', function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '--source /foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end)\r\n\r\n    context('using an --expanded-key and = as a delimiter', function()\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '--source=/foo/**/*.lua')\r\n        assert.equal(args.source, '/foo/**/*.lua')\r\n      end)\r\n    end)\r\n\r\n    context('for an option with a short key longer than 1 char', function()\r\n      before_each(function()\r\n        cli:option('-Xassembler OPTIONS', '...')\r\n      end)\r\n\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-Xassembler foo')\r\n        assert.equal(args.Xassembler, 'foo')\r\n      end)\r\n    end)\r\n\r\n    context('given multiple values', function()\r\n      before_each(function()\r\n        cli:option('-k, --key=OPTIONS', '...', {})\r\n      end)\r\n\r\n      it('works', function()\r\n        local args = helpers.parse(cli, '-k 1 --key=3 -k asdf')\r\n\r\n        assert.equal(type(args.k), 'table')\r\n        assert.equal(#args.k, 3)\r\n        assert.equal(args.k[1], '1')\r\n        assert.equal(args.k[2], '3')\r\n        assert.equal(args.k[3], 'asdf')\r\n      end)\r\n    end)\r\n\r\n    context('given an unknown option', function()\r\n      it('bails', function()\r\n        local _, err = helpers.parse(cli, '--asdf=jkl;', true)\r\n        assert.matches('unknown', err)\r\n      end)\r\n    end)\r\n\r\n    it('bails if no value was passed', function()\r\n      local _, err = helpers.parse(cli, '-s')\r\n      assert.matches(\"option %-s requires a value to be set\", err)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 240,
    "text": "describe('parsing with a default value', function()\r\n    it('accepts a nil', function()\r\n      cli:option('--compress=VALUE', '...', nil)\r\n      assert.equal(helpers.parse(cli, '').compress, nil)\r\n    end)\r\n\r\n    it('accepts a string', function()\r\n      cli:option('--compress=VALUE', '...', 'lzma')\r\n      assert.equal(helpers.parse(cli, '').compress, 'lzma')\r\n    end)\r\n\r\n    it('accepts a number', function()\r\n      cli:option('--count=VALUE', '...', 5)\r\n      assert.equal(helpers.parse(cli, '').count, 5)\r\n    end)\r\n\r\n    it('accepts a boolean', function()\r\n      cli:option('--quiet=VALUE', '...', true)\r\n      assert.equal(helpers.parse(cli, '').quiet, true)\r\n    end)\r\n\r\n    it('accepts an empty table', function()\r\n      cli:option('--sources=VALUE', '...', {})\r\n      assert.same(helpers.parse(cli, '').sources, {})\r\n    end)\r\n\r\n    it('lets me override/reset the default value', function()\r\n      cli:option('--compress=URL', '...', 'lzma')\r\n      assert.equal(helpers.parse(cli, '--compress=').compress, nil)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 241,
    "text": "describe('@callback', function()\r\n    local call_args\r\n    local function capture(key, value, altkey)\r\n      table.insert(call_args, { key, value, altkey })\r\n    end\r\n\r\n    context('given a single option', function()\r\n      before_each(function()\r\n        call_args = {}\r\n\r\n        cli:option('-c, --compress=VALUE', '...', nil, capture)\r\n      end)\r\n\r\n      it('invokes the callback when the option is parsed', function()\r\n        helpers.parse(cli, '--compress=lzma')\r\n\r\n        assert.equal(call_args[1][1], 'compress')\r\n        assert.equal(call_args[1][2], 'lzma')\r\n        assert.equal(call_args[1][3], 'c')\r\n      end)\r\n\r\n      it('invokes the callback with the latest value when the option is a list', function()\r\n        cli:option('--tags=VALUE', '...', {}, capture)\r\n\r\n        helpers.parse(cli, '--tags only --tags foo')\r\n\r\n        assert.equal(call_args[1][1], 'tags')\r\n        assert.equal(call_args[1][2], 'only')\r\n        assert.equal(call_args[1][3], nil)\r\n\r\n        assert.equal(call_args[2][1], 'tags')\r\n        assert.equal(call_args[2][2], 'foo')\r\n        assert.equal(call_args[2][3], nil)\r\n      end)\r\n    end)\r\n\r\n    context('when the callback returns an error message', function()\r\n      it('propagates the error', function()\r\n        cli:option('-c, --compress=VALUE', '...', nil, function()\r\n          return nil, \">>> bad argument <<<\"\r\n        end)\r\n\r\n        local _, err = helpers.parse(cli, '-c lzma', true)\r\n        assert.equal('>>> bad argument <<<', err)\r\n      end)\r\n    end)\r\n\r\n    context('given multiple options', function()\r\n      before_each(function()\r\n        call_args = {}\r\n\r\n        cli:option('-c, --compress=VALUE', '...', nil, capture)\r\n        cli:option('--input=PATH', '...', nil, capture)\r\n      end)\r\n\r\n      it('invokes the callback for each option parsed', function()\r\n        helpers.parse(cli, '-c lzma --input=/tmp')\r\n\r\n        assert.equal(call_args[1][1], 'c')\r\n        assert.equal(call_args[1][2], 'lzma')\r\n        assert.equal(call_args[1][3], 'compress')\r\n\r\n        assert.equal(call_args[2][1], 'input')\r\n        assert.equal(call_args[2][2], '/tmp')\r\n        assert.equal(call_args[2][3], nil)\r\n      end)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 243,
    "text": "",
    "type": "function container"
  }, {
    "id": 244,
    "text": "parse",
    "type": "global function"
  }, {
    "id": 245,
    "text": "context",
    "type": "global function"
  }, {
    "id": 246,
    "text": "stub",
    "type": "global function"
  }, {
    "id": 247,
    "text": "stub",
    "type": "global function"
  }, {
    "id": 248,
    "text": "it",
    "type": "global function"
  }, {
    "id": 249,
    "text": "type",
    "type": "global function"
  }, {
    "id": 250,
    "text": "equal",
    "type": "global function"
  }, {
    "id": 251,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 252,
    "text": "has_no_errors",
    "type": "global function"
  }, {
    "id": 253,
    "text": "same",
    "type": "global function"
  }, {
    "id": 254,
    "text": "matches",
    "type": "global function"
  }, {
    "id": 255,
    "text": "require",
    "type": "global function"
  }, {
    "id": 256,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 257,
    "text": "error_matches",
    "type": "global function"
  }, {
    "id": 258,
    "text": "before_each",
    "type": "global function"
  }, {
    "id": 259,
    "text": "(spec_helper)",
    "type": "module"
  }, {
    "id": 260,
    "text": "",
    "type": "variable container"
  }, {
    "id": 261,
    "text": "",
    "type": "require container"
  }, {
    "id": 262,
    "text": "",
    "type": "require local variable"
  } ]
}