{
  "_filename": "matrix.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-matrix/lua/matrix.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 10
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 19,
    "label": "has",
    "to": 5
  }, {
    "from": 19,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 6
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 21
  }, {
    "from": 27,
    "label": "has",
    "to": 22
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 5
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 6
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 10
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 31,
    "label": "has",
    "to": 5
  }, {
    "from": 31,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 5
  }, {
    "from": 39,
    "label": "has",
    "to": 5
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 6
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 10
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 5
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 49,
    "label": "has",
    "to": 6
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 49,
    "label": "has",
    "to": 5
  }, {
    "from": 49,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 5
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 40
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 56,
    "label": "has",
    "to": 5
  }, {
    "from": 56,
    "label": "has",
    "to": 63
  }, {
    "from": 56,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 56,
    "label": "has",
    "to": 5
  }, {
    "from": 56,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 5
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 69,
    "label": "has",
    "to": 5
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 5
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 69,
    "label": "has",
    "to": 5
  }, {
    "from": 69,
    "label": "has",
    "to": 75
  }, {
    "from": 69,
    "label": "has",
    "to": 76
  }, {
    "from": 69,
    "label": "has",
    "to": 77
  }, {
    "from": 69,
    "label": "has",
    "to": 63
  }, {
    "from": 69,
    "label": "has",
    "to": 78
  }, {
    "from": 69,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 79,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 82,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 84,
    "label": "has",
    "to": 86
  }, {
    "from": 79,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 87,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 97
  }, {
    "from": 87,
    "label": "has",
    "to": 98
  }, {
    "from": 69,
    "label": "has",
    "to": 5
  }, {
    "from": 69,
    "label": "has",
    "to": 5
  }, {
    "from": 69,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 5
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 100,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 100,
    "label": "has",
    "to": 109
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 100,
    "label": "has",
    "to": 5
  }, {
    "from": 100,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 5
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 115,
    "label": "has",
    "to": 77
  }, {
    "from": 115,
    "label": "has",
    "to": 119
  }, {
    "from": 115,
    "label": "has",
    "to": 120
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 123,
    "label": "has",
    "to": 125
  }, {
    "from": 123,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 115,
    "label": "has",
    "to": 5
  }, {
    "from": 115,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 129
  }, {
    "from": 128,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 131
  }, {
    "from": 128,
    "label": "has",
    "to": 132
  }, {
    "from": 132,
    "label": "has",
    "to": 133
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 135,
    "label": "has",
    "to": 127
  }, {
    "from": 133,
    "label": "has",
    "to": 125
  }, {
    "from": 128,
    "label": "has",
    "to": 136
  }, {
    "from": 115,
    "label": "has",
    "to": 5
  }, {
    "from": 115,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 70
  }, {
    "from": 138,
    "label": "has",
    "to": 63
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 138,
    "label": "has",
    "to": 75
  }, {
    "from": 138,
    "label": "has",
    "to": 117
  }, {
    "from": 138,
    "label": "has",
    "to": 118
  }, {
    "from": 138,
    "label": "has",
    "to": 140
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 140,
    "label": "has",
    "to": 142
  }, {
    "from": 140,
    "label": "has",
    "to": 143
  }, {
    "from": 143,
    "label": "has",
    "to": 144
  }, {
    "from": 138,
    "label": "has",
    "to": 145
  }, {
    "from": 138,
    "label": "has",
    "to": 146
  }, {
    "from": 138,
    "label": "has",
    "to": 147
  }, {
    "from": 138,
    "label": "has",
    "to": 5
  }, {
    "from": 138,
    "label": "has",
    "to": 5
  }, {
    "from": 138,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 75
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 149,
    "label": "has",
    "to": 152
  }, {
    "from": 152,
    "label": "has",
    "to": 153
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 149,
    "label": "has",
    "to": 5
  }, {
    "from": 149,
    "label": "has",
    "to": 155
  }, {
    "from": 156,
    "label": "has",
    "to": 70
  }, {
    "from": 156,
    "label": "has",
    "to": 157
  }, {
    "from": 156,
    "label": "has",
    "to": 158
  }, {
    "from": 156,
    "label": "has",
    "to": 159
  }, {
    "from": 156,
    "label": "has",
    "to": 160
  }, {
    "from": 156,
    "label": "has",
    "to": 161
  }, {
    "from": 161,
    "label": "has",
    "to": 162
  }, {
    "from": 161,
    "label": "has",
    "to": 163
  }, {
    "from": 161,
    "label": "has",
    "to": 164
  }, {
    "from": 161,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 161,
    "label": "has",
    "to": 167
  }, {
    "from": 156,
    "label": "has",
    "to": 5
  }, {
    "from": 156,
    "label": "has",
    "to": 5
  }, {
    "from": 156,
    "label": "has",
    "to": 168
  }, {
    "from": 169,
    "label": "has",
    "to": 70
  }, {
    "from": 169,
    "label": "has",
    "to": 157
  }, {
    "from": 169,
    "label": "has",
    "to": 170
  }, {
    "from": 169,
    "label": "has",
    "to": 171
  }, {
    "from": 169,
    "label": "has",
    "to": 160
  }, {
    "from": 169,
    "label": "has",
    "to": 172
  }, {
    "from": 172,
    "label": "has",
    "to": 173
  }, {
    "from": 172,
    "label": "has",
    "to": 174
  }, {
    "from": 172,
    "label": "has",
    "to": 175
  }, {
    "from": 172,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 172,
    "label": "has",
    "to": 167
  }, {
    "from": 169,
    "label": "has",
    "to": 5
  }, {
    "from": 169,
    "label": "has",
    "to": 5
  }, {
    "from": 169,
    "label": "has",
    "to": 178
  }, {
    "from": 179,
    "label": "has",
    "to": 180
  }, {
    "from": 179,
    "label": "has",
    "to": 181
  }, {
    "from": 179,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 183,
    "label": "has",
    "to": 83
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 184,
    "label": "has",
    "to": 185
  }, {
    "from": 183,
    "label": "has",
    "to": 186
  }, {
    "from": 179,
    "label": "has",
    "to": 187
  }, {
    "from": 179,
    "label": "has",
    "to": 5
  }, {
    "from": 179,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 189,
    "label": "has",
    "to": 181
  }, {
    "from": 189,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 192,
    "label": "has",
    "to": 193
  }, {
    "from": 192,
    "label": "has",
    "to": 194
  }, {
    "from": 194,
    "label": "has",
    "to": 195
  }, {
    "from": 189,
    "label": "has",
    "to": 5
  }, {
    "from": 189,
    "label": "has",
    "to": 196
  }, {
    "from": 197,
    "label": "has",
    "to": 5
  }, {
    "from": 197,
    "label": "has",
    "to": 198
  }, {
    "from": 199,
    "label": "has",
    "to": 200
  }, {
    "from": 200,
    "label": "has",
    "to": 201
  }, {
    "from": 199,
    "label": "has",
    "to": 5
  }, {
    "from": 199,
    "label": "has",
    "to": 202
  }, {
    "from": 203,
    "label": "has",
    "to": 204
  }, {
    "from": 203,
    "label": "has",
    "to": 205
  }, {
    "from": 203,
    "label": "has",
    "to": 206
  }, {
    "from": 206,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 203,
    "label": "has",
    "to": 5
  }, {
    "from": 203,
    "label": "has",
    "to": 209
  }, {
    "from": 210,
    "label": "has",
    "to": 5
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 212,
    "label": "has",
    "to": 213
  }, {
    "from": 213,
    "label": "has",
    "to": 214
  }, {
    "from": 212,
    "label": "has",
    "to": 5
  }, {
    "from": 212,
    "label": "has",
    "to": 215
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 216,
    "label": "has",
    "to": 219
  }, {
    "from": 219,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 216,
    "label": "has",
    "to": 5
  }, {
    "from": 216,
    "label": "has",
    "to": 222
  }, {
    "from": 223,
    "label": "has",
    "to": 116
  }, {
    "from": 223,
    "label": "has",
    "to": 224
  }, {
    "from": 224,
    "label": "has",
    "to": 225
  }, {
    "from": 223,
    "label": "has",
    "to": 5
  }, {
    "from": 223,
    "label": "has",
    "to": 5
  }, {
    "from": 223,
    "label": "has",
    "to": 5
  }, {
    "from": 223,
    "label": "has",
    "to": 226
  }, {
    "from": 227,
    "label": "has",
    "to": 5
  }, {
    "from": 227,
    "label": "has",
    "to": 228
  }, {
    "from": 229,
    "label": "has",
    "to": 230
  }, {
    "from": 229,
    "label": "has",
    "to": 231
  }, {
    "from": 231,
    "label": "has",
    "to": 232
  }, {
    "from": 229,
    "label": "has",
    "to": 5
  }, {
    "from": 229,
    "label": "has",
    "to": 233
  }, {
    "from": 234,
    "label": "has",
    "to": 235
  }, {
    "from": 234,
    "label": "has",
    "to": 6
  }, {
    "from": 234,
    "label": "has",
    "to": 236
  }, {
    "from": 236,
    "label": "has",
    "to": 10
  }, {
    "from": 236,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 234,
    "label": "has",
    "to": 5
  }, {
    "from": 234,
    "label": "has",
    "to": 239
  }, {
    "from": 240,
    "label": "has",
    "to": 235
  }, {
    "from": 240,
    "label": "has",
    "to": 6
  }, {
    "from": 240,
    "label": "has",
    "to": 241
  }, {
    "from": 241,
    "label": "has",
    "to": 10
  }, {
    "from": 241,
    "label": "has",
    "to": 242
  }, {
    "from": 242,
    "label": "has",
    "to": 243
  }, {
    "from": 240,
    "label": "has",
    "to": 5
  }, {
    "from": 240,
    "label": "has",
    "to": 244
  }, {
    "from": 245,
    "label": "has",
    "to": 235
  }, {
    "from": 245,
    "label": "has",
    "to": 6
  }, {
    "from": 245,
    "label": "has",
    "to": 246
  }, {
    "from": 246,
    "label": "has",
    "to": 247
  }, {
    "from": 246,
    "label": "has",
    "to": 248
  }, {
    "from": 246,
    "label": "has",
    "to": 249
  }, {
    "from": 249,
    "label": "has",
    "to": 250
  }, {
    "from": 249,
    "label": "has",
    "to": 251
  }, {
    "from": 245,
    "label": "has",
    "to": 5
  }, {
    "from": 245,
    "label": "has",
    "to": 252
  }, {
    "from": 253,
    "label": "has",
    "to": 254
  }, {
    "from": 253,
    "label": "has",
    "to": 235
  }, {
    "from": 253,
    "label": "has",
    "to": 6
  }, {
    "from": 253,
    "label": "has",
    "to": 255
  }, {
    "from": 253,
    "label": "has",
    "to": 256
  }, {
    "from": 256,
    "label": "has",
    "to": 10
  }, {
    "from": 256,
    "label": "has",
    "to": 257
  }, {
    "from": 257,
    "label": "has",
    "to": 238
  }, {
    "from": 256,
    "label": "has",
    "to": 258
  }, {
    "from": 258,
    "label": "has",
    "to": 259
  }, {
    "from": 253,
    "label": "has",
    "to": 5
  }, {
    "from": 253,
    "label": "has",
    "to": 260
  }, {
    "from": 261,
    "label": "has",
    "to": 262
  }, {
    "from": 261,
    "label": "has",
    "to": 235
  }, {
    "from": 261,
    "label": "has",
    "to": 6
  }, {
    "from": 261,
    "label": "has",
    "to": 263
  }, {
    "from": 263,
    "label": "has",
    "to": 10
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 264,
    "label": "has",
    "to": 238
  }, {
    "from": 261,
    "label": "has",
    "to": 265
  }, {
    "from": 261,
    "label": "has",
    "to": 266
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 266,
    "label": "has",
    "to": 248
  }, {
    "from": 266,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 269
  }, {
    "from": 261,
    "label": "has",
    "to": 5
  }, {
    "from": 261,
    "label": "has",
    "to": 270
  }, {
    "from": 271,
    "label": "has",
    "to": 272
  }, {
    "from": 271,
    "label": "has",
    "to": 235
  }, {
    "from": 271,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 274
  }, {
    "from": 274,
    "label": "has",
    "to": 275
  }, {
    "from": 271,
    "label": "has",
    "to": 5
  }, {
    "from": 271,
    "label": "has",
    "to": 276
  }, {
    "from": 277,
    "label": "has",
    "to": 272
  }, {
    "from": 277,
    "label": "has",
    "to": 235
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 278,
    "label": "has",
    "to": 279
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 277,
    "label": "has",
    "to": 5
  }, {
    "from": 277,
    "label": "has",
    "to": 281
  }, {
    "from": 282,
    "label": "has",
    "to": 283
  }, {
    "from": 282,
    "label": "has",
    "to": 5
  }, {
    "from": 282,
    "label": "has",
    "to": 284
  }, {
    "from": 282,
    "label": "has",
    "to": 285
  }, {
    "from": 285,
    "label": "has",
    "to": 286
  }, {
    "from": 282,
    "label": "has",
    "to": 5
  }, {
    "from": 282,
    "label": "has",
    "to": 287
  }, {
    "from": 288,
    "label": "has",
    "to": 5
  }, {
    "from": 288,
    "label": "has",
    "to": 289
  }, {
    "from": 290,
    "label": "has",
    "to": 291
  }, {
    "from": 290,
    "label": "has",
    "to": 292
  }, {
    "from": 290,
    "label": "has",
    "to": 116
  }, {
    "from": 290,
    "label": "has",
    "to": 293
  }, {
    "from": 290,
    "label": "has",
    "to": 294
  }, {
    "from": 294,
    "label": "has",
    "to": 295
  }, {
    "from": 294,
    "label": "has",
    "to": 296
  }, {
    "from": 296,
    "label": "has",
    "to": 297
  }, {
    "from": 294,
    "label": "has",
    "to": 298
  }, {
    "from": 290,
    "label": "has",
    "to": 5
  }, {
    "from": 290,
    "label": "has",
    "to": 299
  }, {
    "from": 300,
    "label": "has",
    "to": 301
  }, {
    "from": 300,
    "label": "has",
    "to": 302
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 303,
    "label": "has",
    "to": 305
  }, {
    "from": 303,
    "label": "has",
    "to": 306
  }, {
    "from": 303,
    "label": "has",
    "to": 307
  }, {
    "from": 307,
    "label": "has",
    "to": 308
  }, {
    "from": 307,
    "label": "has",
    "to": 309
  }, {
    "from": 309,
    "label": "has",
    "to": 310
  }, {
    "from": 307,
    "label": "has",
    "to": 311
  }, {
    "from": 311,
    "label": "has",
    "to": 312
  }, {
    "from": 311,
    "label": "has",
    "to": 313
  }, {
    "from": 303,
    "label": "has",
    "to": 5
  }, {
    "from": 303,
    "label": "has",
    "to": 314
  }, {
    "from": 315,
    "label": "has",
    "to": 5
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 317,
    "label": "has",
    "to": 5
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 319,
    "label": "has",
    "to": 5
  }, {
    "from": 319,
    "label": "has",
    "to": 5
  }, {
    "from": 319,
    "label": "has",
    "to": 321
  }, {
    "from": 322,
    "label": "has",
    "to": 323
  }, {
    "from": 322,
    "label": "has",
    "to": 5
  }, {
    "from": 322,
    "label": "has",
    "to": 324
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 326,
    "label": "has",
    "to": 17
  }, {
    "from": 325,
    "label": "has",
    "to": 5
  }, {
    "from": 325,
    "label": "has",
    "to": 327
  }, {
    "from": 328,
    "label": "has",
    "to": 329
  }, {
    "from": 328,
    "label": "has",
    "to": 330
  }, {
    "from": 330,
    "label": "has",
    "to": 331
  }, {
    "from": 330,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 330,
    "label": "has",
    "to": 334
  }, {
    "from": 330,
    "label": "has",
    "to": 5
  }, {
    "from": 328,
    "label": "has",
    "to": 5
  }, {
    "from": 328,
    "label": "has",
    "to": 335
  }, {
    "from": 336,
    "label": "has",
    "to": 331
  }, {
    "from": 336,
    "label": "has",
    "to": 332
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 336,
    "label": "has",
    "to": 334
  }, {
    "from": 336,
    "label": "has",
    "to": 5
  }, {
    "from": 336,
    "label": "has",
    "to": 337
  }, {
    "from": 338,
    "label": "has",
    "to": 5
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 340,
    "label": "has",
    "to": 6
  }, {
    "from": 340,
    "label": "has",
    "to": 341
  }, {
    "from": 340,
    "label": "has",
    "to": 342
  }, {
    "from": 340,
    "label": "has",
    "to": 343
  }, {
    "from": 340,
    "label": "has",
    "to": 5
  }, {
    "from": 340,
    "label": "has",
    "to": 344
  }, {
    "from": 345,
    "label": "has",
    "to": 5
  }, {
    "from": 345,
    "label": "has",
    "to": 346
  }, {
    "from": 347,
    "label": "has",
    "to": 6
  }, {
    "from": 347,
    "label": "has",
    "to": 348
  }, {
    "from": 348,
    "label": "has",
    "to": 349
  }, {
    "from": 348,
    "label": "has",
    "to": 51
  }, {
    "from": 348,
    "label": "has",
    "to": 350
  }, {
    "from": 350,
    "label": "has",
    "to": 351
  }, {
    "from": 348,
    "label": "has",
    "to": 52
  }, {
    "from": 347,
    "label": "has",
    "to": 5
  }, {
    "from": 347,
    "label": "has",
    "to": 352
  }, {
    "from": 353,
    "label": "has",
    "to": 116
  }, {
    "from": 353,
    "label": "has",
    "to": 354
  }, {
    "from": 353,
    "label": "has",
    "to": 5
  }, {
    "from": 353,
    "label": "has",
    "to": 355
  }, {
    "from": 356,
    "label": "has",
    "to": 357
  }, {
    "from": 356,
    "label": "has",
    "to": 6
  }, {
    "from": 356,
    "label": "has",
    "to": 358
  }, {
    "from": 358,
    "label": "has",
    "to": 10
  }, {
    "from": 358,
    "label": "has",
    "to": 359
  }, {
    "from": 359,
    "label": "has",
    "to": 360
  }, {
    "from": 356,
    "label": "has",
    "to": 5
  }, {
    "from": 356,
    "label": "has",
    "to": 361
  }, {
    "from": 362,
    "label": "has",
    "to": 5
  }, {
    "from": 362,
    "label": "has",
    "to": 363
  }, {
    "from": 364,
    "label": "has",
    "to": 5
  }, {
    "from": 364,
    "label": "has",
    "to": 365
  }, {
    "from": 366,
    "label": "has",
    "to": 367
  }, {
    "from": 366,
    "label": "has",
    "to": 5
  }, {
    "from": 366,
    "label": "has",
    "to": 5
  }, {
    "from": 366,
    "label": "has",
    "to": 5
  }, {
    "from": 366,
    "label": "has",
    "to": 368
  }, {
    "from": 369,
    "label": "has",
    "to": 370
  }, {
    "from": 369,
    "label": "has",
    "to": 5
  }, {
    "from": 369,
    "label": "has",
    "to": 5
  }, {
    "from": 369,
    "label": "has",
    "to": 5
  }, {
    "from": 369,
    "label": "has",
    "to": 371
  }, {
    "from": 372,
    "label": "has",
    "to": 5
  }, {
    "from": 372,
    "label": "has",
    "to": 373
  }, {
    "from": 374,
    "label": "has",
    "to": 5
  }, {
    "from": 374,
    "label": "has",
    "to": 375
  }, {
    "from": 376,
    "label": "has",
    "to": 377
  }, {
    "from": 376,
    "label": "has",
    "to": 5
  }, {
    "from": 376,
    "label": "has",
    "to": 378
  }, {
    "from": 376,
    "label": "has",
    "to": 5
  }, {
    "from": 376,
    "label": "has",
    "to": 379
  }, {
    "from": 379,
    "label": "has",
    "to": 380
  }, {
    "from": 380,
    "label": "has",
    "to": 381
  }, {
    "from": 376,
    "label": "has",
    "to": 5
  }, {
    "from": 376,
    "label": "has",
    "to": 5
  }, {
    "from": 376,
    "label": "has",
    "to": 382
  }, {
    "from": 383,
    "label": "has",
    "to": 5
  }, {
    "from": 383,
    "label": "has",
    "to": 384
  }, {
    "from": 385,
    "label": "has",
    "to": 386
  }, {
    "from": 385,
    "label": "has",
    "to": 387
  }, {
    "from": 388,
    "label": "has",
    "to": 5
  }, {
    "from": 388,
    "label": "has",
    "to": 389
  }, {
    "from": 390,
    "label": "has",
    "to": 5
  }, {
    "from": 390,
    "label": "has",
    "to": 391
  }, {
    "from": 392,
    "label": "has",
    "to": 393
  }, {
    "from": 392,
    "label": "has",
    "to": 5
  }, {
    "from": 392,
    "label": "has",
    "to": 394
  }, {
    "from": 395,
    "label": "has",
    "to": 5
  }, {
    "from": 395,
    "label": "has",
    "to": 396
  }, {
    "from": 397,
    "label": "has",
    "to": 398
  }, {
    "from": 397,
    "label": "has",
    "to": 399
  }, {
    "from": 397,
    "label": "has",
    "to": 400
  }, {
    "from": 400,
    "label": "has",
    "to": 401
  }, {
    "from": 397,
    "label": "has",
    "to": 402
  }, {
    "from": 402,
    "label": "has",
    "to": 5
  }, {
    "from": 397,
    "label": "has",
    "to": 5
  }, {
    "from": 397,
    "label": "has",
    "to": 5
  }, {
    "from": 397,
    "label": "has",
    "to": 403
  }, {
    "from": 404,
    "label": "has",
    "to": 5
  }, {
    "from": 405,
    "label": "has",
    "to": 5
  }, {
    "from": 405,
    "label": "has",
    "to": 406
  }, {
    "from": 407,
    "label": "has",
    "to": 5
  }, {
    "from": 407,
    "label": "has",
    "to": 408
  }, {
    "from": 409,
    "label": "has",
    "to": 5
  }, {
    "from": 409,
    "label": "has",
    "to": 410
  }, {
    "from": 411,
    "label": "has",
    "to": 5
  }, {
    "from": 411,
    "label": "has",
    "to": 412
  }, {
    "from": 413,
    "label": "has",
    "to": 5
  }, {
    "from": 413,
    "label": "has",
    "to": 414
  }, {
    "from": 415,
    "label": "has",
    "to": 5
  }, {
    "from": 415,
    "label": "has",
    "to": 416
  }, {
    "from": 417,
    "label": "has",
    "to": 5
  }, {
    "from": 417,
    "label": "has",
    "to": 418
  }, {
    "from": 419,
    "label": "has",
    "to": 5
  }, {
    "from": 419,
    "label": "has",
    "to": 420
  }, {
    "from": 421,
    "label": "has",
    "to": 5
  }, {
    "from": 421,
    "label": "has",
    "to": 422
  }, {
    "from": 423,
    "label": "has",
    "to": 5
  }, {
    "from": 423,
    "label": "has",
    "to": 424
  }, {
    "from": 425,
    "label": "has",
    "to": 5
  }, {
    "from": 426,
    "label": "has",
    "to": 5
  }, {
    "from": 427,
    "label": "has",
    "to": 5
  }, {
    "from": 428,
    "label": "has",
    "to": 5
  }, {
    "from": 429,
    "label": "has",
    "to": 5
  }, {
    "from": 429,
    "label": "has",
    "to": 430
  }, {
    "from": 203,
    "label": "calls",
    "to": 443
  }, {
    "from": 69,
    "label": "calls",
    "to": 437
  }, {
    "from": 69,
    "label": "calls",
    "to": 437
  }, {
    "from": 431,
    "label": "calls",
    "to": 437
  }, {
    "from": 431,
    "label": "calls",
    "to": 437
  }, {
    "from": 56,
    "label": "calls",
    "to": 438
  }, {
    "from": 69,
    "label": "calls",
    "to": 438
  }, {
    "from": 138,
    "label": "calls",
    "to": 438
  }, {
    "from": 156,
    "label": "calls",
    "to": 438
  }, {
    "from": 169,
    "label": "calls",
    "to": 438
  }, {
    "from": 253,
    "label": "calls",
    "to": 438
  }, {
    "from": 261,
    "label": "calls",
    "to": 438
  }, {
    "from": 356,
    "label": "calls",
    "to": 438
  }, {
    "from": 156,
    "label": "calls",
    "to": 439
  }, {
    "from": 56,
    "label": "calls",
    "to": 464
  }, {
    "from": 431,
    "label": "calls",
    "to": 464
  }, {
    "from": 431,
    "label": "calls",
    "to": 464
  }, {
    "from": 356,
    "label": "calls",
    "to": 441
  }, {
    "from": 300,
    "label": "calls",
    "to": 290
  }, {
    "from": 431,
    "label": "calls",
    "to": 290
  }, {
    "from": 431,
    "label": "calls",
    "to": 44
  }, {
    "from": 431,
    "label": "calls",
    "to": 44
  }, {
    "from": 431,
    "label": "calls",
    "to": 44
  }, {
    "from": 431,
    "label": "calls",
    "to": 44
  }, {
    "from": 347,
    "label": "calls",
    "to": 404
  }, {
    "from": 39,
    "label": "calls",
    "to": 138
  }, {
    "from": 56,
    "label": "calls",
    "to": 138
  }, {
    "from": 156,
    "label": "calls",
    "to": 138
  }, {
    "from": 156,
    "label": "calls",
    "to": 138
  }, {
    "from": 431,
    "label": "calls",
    "to": 138
  }, {
    "from": 431,
    "label": "calls",
    "to": 442
  }, {
    "from": 431,
    "label": "calls",
    "to": 442
  }, {
    "from": 431,
    "label": "calls",
    "to": 442
  }, {
    "from": 282,
    "label": "calls",
    "to": 442
  }, {
    "from": 115,
    "label": "calls",
    "to": 113
  }, {
    "from": 115,
    "label": "calls",
    "to": 113
  }, {
    "from": 115,
    "label": "calls",
    "to": 113
  }, {
    "from": 138,
    "label": "calls",
    "to": 113
  }, {
    "from": 156,
    "label": "calls",
    "to": 149
  }, {
    "from": 156,
    "label": "calls",
    "to": 149
  }, {
    "from": 156,
    "label": "calls",
    "to": 149
  }, {
    "from": 169,
    "label": "calls",
    "to": 149
  }, {
    "from": 169,
    "label": "calls",
    "to": 149
  }, {
    "from": 169,
    "label": "calls",
    "to": 149
  }, {
    "from": 300,
    "label": "calls",
    "to": 444
  }, {
    "from": 431,
    "label": "calls",
    "to": 300
  }, {
    "from": 149,
    "label": "calls",
    "to": 469
  }, {
    "from": 189,
    "label": "calls",
    "to": 469
  }, {
    "from": 156,
    "label": "calls",
    "to": 49
  }, {
    "from": 156,
    "label": "calls",
    "to": 49
  }, {
    "from": 431,
    "label": "calls",
    "to": 49
  }, {
    "from": 234,
    "label": "calls",
    "to": 468
  }, {
    "from": 240,
    "label": "calls",
    "to": 468
  }, {
    "from": 245,
    "label": "calls",
    "to": 468
  }, {
    "from": 253,
    "label": "calls",
    "to": 468
  }, {
    "from": 253,
    "label": "calls",
    "to": 468
  }, {
    "from": 261,
    "label": "calls",
    "to": 468
  }, {
    "from": 261,
    "label": "calls",
    "to": 468
  }, {
    "from": 271,
    "label": "calls",
    "to": 468
  }, {
    "from": 277,
    "label": "calls",
    "to": 468
  }, {
    "from": 395,
    "label": "calls",
    "to": 447
  }, {
    "from": 397,
    "label": "calls",
    "to": 447
  }, {
    "from": 69,
    "label": "calls",
    "to": 445
  }, {
    "from": 69,
    "label": "calls",
    "to": 445
  }, {
    "from": 431,
    "label": "calls",
    "to": 445
  }, {
    "from": 431,
    "label": "calls",
    "to": 445
  }, {
    "from": 431,
    "label": "calls",
    "to": 446
  }, {
    "from": 356,
    "label": "calls",
    "to": 462
  }, {
    "from": 115,
    "label": "calls",
    "to": 100
  }, {
    "from": 69,
    "label": "calls",
    "to": 448
  }, {
    "from": 156,
    "label": "calls",
    "to": 19
  }, {
    "from": 156,
    "label": "calls",
    "to": 19
  }, {
    "from": 431,
    "label": "calls",
    "to": 19
  }, {
    "from": 2,
    "label": "calls",
    "to": 465
  }, {
    "from": 2,
    "label": "calls",
    "to": 465
  }, {
    "from": 2,
    "label": "calls",
    "to": 465
  }, {
    "from": 431,
    "label": "calls",
    "to": 465
  }, {
    "from": 19,
    "label": "calls",
    "to": 465
  }, {
    "from": 26,
    "label": "calls",
    "to": 465
  }, {
    "from": 31,
    "label": "calls",
    "to": 465
  }, {
    "from": 44,
    "label": "calls",
    "to": 465
  }, {
    "from": 49,
    "label": "calls",
    "to": 465
  }, {
    "from": 138,
    "label": "calls",
    "to": 465
  }, {
    "from": 431,
    "label": "calls",
    "to": 465
  }, {
    "from": 234,
    "label": "calls",
    "to": 465
  }, {
    "from": 240,
    "label": "calls",
    "to": 465
  }, {
    "from": 245,
    "label": "calls",
    "to": 465
  }, {
    "from": 253,
    "label": "calls",
    "to": 465
  }, {
    "from": 261,
    "label": "calls",
    "to": 465
  }, {
    "from": 340,
    "label": "calls",
    "to": 465
  }, {
    "from": 347,
    "label": "calls",
    "to": 465
  }, {
    "from": 356,
    "label": "calls",
    "to": 465
  }, {
    "from": 388,
    "label": "calls",
    "to": 465
  }, {
    "from": 431,
    "label": "calls",
    "to": 465
  }, {
    "from": 325,
    "label": "calls",
    "to": 322
  }, {
    "from": 113,
    "label": "calls",
    "to": 450
  }, {
    "from": 431,
    "label": "calls",
    "to": 451
  }, {
    "from": 431,
    "label": "calls",
    "to": 452
  }, {
    "from": 431,
    "label": "calls",
    "to": 452
  }, {
    "from": 431,
    "label": "calls",
    "to": 461
  }, {
    "from": 216,
    "label": "calls",
    "to": 466
  }, {
    "from": 282,
    "label": "calls",
    "to": 458
  }, {
    "from": 282,
    "label": "calls",
    "to": 458
  }, {
    "from": 290,
    "label": "calls",
    "to": 458
  }, {
    "from": 290,
    "label": "calls",
    "to": 458
  }, {
    "from": 282,
    "label": "calls",
    "to": 436
  }, {
    "from": 288,
    "label": "calls",
    "to": 436
  }, {
    "from": 390,
    "label": "calls",
    "to": 436
  }, {
    "from": 303,
    "label": "calls",
    "to": 463
  }, {
    "from": 303,
    "label": "calls",
    "to": 463
  }, {
    "from": 431,
    "label": "calls",
    "to": 240
  }, {
    "from": 290,
    "label": "calls",
    "to": 440
  }, {
    "from": 388,
    "label": "calls",
    "to": 440
  }, {
    "from": 423,
    "label": "calls",
    "to": 440
  }, {
    "from": 423,
    "label": "calls",
    "to": 440
  }, {
    "from": 138,
    "label": "calls",
    "to": 245
  }, {
    "from": 179,
    "label": "calls",
    "to": 223
  }, {
    "from": 189,
    "label": "calls",
    "to": 223
  }, {
    "from": 203,
    "label": "calls",
    "to": 223
  }, {
    "from": 216,
    "label": "calls",
    "to": 223
  }, {
    "from": 234,
    "label": "calls",
    "to": 223
  }, {
    "from": 240,
    "label": "calls",
    "to": 223
  }, {
    "from": 245,
    "label": "calls",
    "to": 223
  }, {
    "from": 253,
    "label": "calls",
    "to": 223
  }, {
    "from": 261,
    "label": "calls",
    "to": 223
  }, {
    "from": 271,
    "label": "calls",
    "to": 223
  }, {
    "from": 277,
    "label": "calls",
    "to": 223
  }, {
    "from": 290,
    "label": "calls",
    "to": 223
  }, {
    "from": 303,
    "label": "calls",
    "to": 223
  }, {
    "from": 319,
    "label": "calls",
    "to": 223
  }, {
    "from": 356,
    "label": "calls",
    "to": 223
  }, {
    "from": 431,
    "label": "calls",
    "to": 223
  }, {
    "from": 431,
    "label": "calls",
    "to": 223
  }, {
    "from": 179,
    "label": "calls",
    "to": 460
  }, {
    "from": 69,
    "label": "calls",
    "to": 456
  }, {
    "from": 138,
    "label": "calls",
    "to": 115
  }, {
    "from": 39,
    "label": "calls",
    "to": 31
  }, {
    "from": 56,
    "label": "calls",
    "to": 31
  }, {
    "from": 156,
    "label": "calls",
    "to": 31
  }, {
    "from": 156,
    "label": "calls",
    "to": 31
  }, {
    "from": 169,
    "label": "calls",
    "to": 31
  }, {
    "from": 431,
    "label": "calls",
    "to": 31
  }, {
    "from": 431,
    "label": "calls",
    "to": 455
  }, {
    "from": 138,
    "label": "calls",
    "to": 253
  }, {
    "from": 303,
    "label": "calls",
    "to": 454
  }, {
    "from": 56,
    "label": "calls",
    "to": 234
  }, {
    "from": 69,
    "label": "calls",
    "to": 234
  }, {
    "from": 138,
    "label": "calls",
    "to": 234
  }, {
    "from": 156,
    "label": "calls",
    "to": 234
  }, {
    "from": 169,
    "label": "calls",
    "to": 234
  }, {
    "from": 395,
    "label": "calls",
    "to": 453
  }, {
    "from": 397,
    "label": "calls",
    "to": 453
  }, {
    "from": 405,
    "label": "calls",
    "to": 453
  }, {
    "from": 407,
    "label": "calls",
    "to": 453
  }, {
    "from": 409,
    "label": "calls",
    "to": 453
  }, {
    "from": 411,
    "label": "calls",
    "to": 453
  }, {
    "from": 413,
    "label": "calls",
    "to": 453
  }, {
    "from": 415,
    "label": "calls",
    "to": 453
  }, {
    "from": 417,
    "label": "calls",
    "to": 453
  }, {
    "from": 345,
    "label": "calls",
    "to": 457
  }, {
    "from": 431,
    "label": "calls",
    "to": 449
  }, {
    "from": 353,
    "label": "calls",
    "to": 347
  }, {
    "from": 431,
    "label": "calls",
    "to": 26
  }, {
    "from": 2,
    "label": "calls",
    "to": 467
  }, {
    "from": 2,
    "label": "calls",
    "to": 467
  }, {
    "from": 69,
    "label": "calls",
    "to": 467
  }, {
    "from": 69,
    "label": "calls",
    "to": 467
  }, {
    "from": 113,
    "label": "calls",
    "to": 467
  }, {
    "from": 115,
    "label": "calls",
    "to": 467
  }, {
    "from": 115,
    "label": "calls",
    "to": 467
  }, {
    "from": 115,
    "label": "calls",
    "to": 467
  }, {
    "from": 138,
    "label": "calls",
    "to": 467
  }, {
    "from": 138,
    "label": "calls",
    "to": 467
  }, {
    "from": 149,
    "label": "calls",
    "to": 467
  }, {
    "from": 179,
    "label": "calls",
    "to": 467
  }, {
    "from": 223,
    "label": "calls",
    "to": 467
  }, {
    "from": 290,
    "label": "calls",
    "to": 467
  }, {
    "from": 353,
    "label": "calls",
    "to": 467
  }, {
    "from": 431,
    "label": "calls",
    "to": 459
  }, {
    "from": 431,
    "label": "calls",
    "to": 459
  }, {
    "from": 431,
    "label": "calls",
    "to": 459
  }, {
    "from": 431,
    "label": "calls",
    "to": 459
  }, {
    "from": 431,
    "label": "calls",
    "to": 459
  }, {
    "from": 392,
    "label": "calls",
    "to": 459
  }, {
    "from": 431,
    "label": "calls",
    "to": 39
  }, {
    "from": 169,
    "label": "calls",
    "to": 56
  }, {
    "from": 169,
    "label": "calls",
    "to": 56
  }, {
    "from": 431,
    "label": "calls",
    "to": 56
  }, {
    "from": 1,
    "label": "contains",
    "to": 431
  }, {
    "from": 431,
    "label": "declares",
    "to": 2
  }, {
    "from": 431,
    "label": "declares",
    "to": 19
  }, {
    "from": 431,
    "label": "declares",
    "to": 26
  }, {
    "from": 431,
    "label": "declares",
    "to": 31
  }, {
    "from": 431,
    "label": "declares",
    "to": 39
  }, {
    "from": 431,
    "label": "declares",
    "to": 44
  }, {
    "from": 431,
    "label": "declares",
    "to": 49
  }, {
    "from": 431,
    "label": "declares",
    "to": 56
  }, {
    "from": 431,
    "label": "declares",
    "to": 67
  }, {
    "from": 431,
    "label": "declares",
    "to": 69
  }, {
    "from": 431,
    "label": "declares",
    "to": 100
  }, {
    "from": 431,
    "label": "declares",
    "to": 113
  }, {
    "from": 431,
    "label": "declares",
    "to": 115
  }, {
    "from": 431,
    "label": "declares",
    "to": 138
  }, {
    "from": 431,
    "label": "declares",
    "to": 149
  }, {
    "from": 431,
    "label": "declares",
    "to": 156
  }, {
    "from": 431,
    "label": "declares",
    "to": 169
  }, {
    "from": 431,
    "label": "declares",
    "to": 179
  }, {
    "from": 431,
    "label": "declares",
    "to": 189
  }, {
    "from": 431,
    "label": "declares",
    "to": 197
  }, {
    "from": 431,
    "label": "declares",
    "to": 199
  }, {
    "from": 431,
    "label": "declares",
    "to": 203
  }, {
    "from": 431,
    "label": "declares",
    "to": 210
  }, {
    "from": 431,
    "label": "declares",
    "to": 212
  }, {
    "from": 431,
    "label": "declares",
    "to": 216
  }, {
    "from": 431,
    "label": "declares",
    "to": 223
  }, {
    "from": 431,
    "label": "declares",
    "to": 227
  }, {
    "from": 431,
    "label": "declares",
    "to": 229
  }, {
    "from": 431,
    "label": "declares",
    "to": 234
  }, {
    "from": 431,
    "label": "declares",
    "to": 240
  }, {
    "from": 431,
    "label": "declares",
    "to": 245
  }, {
    "from": 431,
    "label": "declares",
    "to": 253
  }, {
    "from": 431,
    "label": "declares",
    "to": 261
  }, {
    "from": 431,
    "label": "declares",
    "to": 271
  }, {
    "from": 431,
    "label": "declares",
    "to": 277
  }, {
    "from": 431,
    "label": "declares",
    "to": 282
  }, {
    "from": 431,
    "label": "declares",
    "to": 288
  }, {
    "from": 431,
    "label": "declares",
    "to": 290
  }, {
    "from": 431,
    "label": "declares",
    "to": 300
  }, {
    "from": 431,
    "label": "declares",
    "to": 303
  }, {
    "from": 431,
    "label": "declares",
    "to": 315
  }, {
    "from": 431,
    "label": "declares",
    "to": 317
  }, {
    "from": 431,
    "label": "declares",
    "to": 319
  }, {
    "from": 431,
    "label": "declares",
    "to": 322
  }, {
    "from": 431,
    "label": "declares",
    "to": 325
  }, {
    "from": 431,
    "label": "declares",
    "to": 328
  }, {
    "from": 431,
    "label": "declares",
    "to": 336
  }, {
    "from": 431,
    "label": "declares",
    "to": 338
  }, {
    "from": 431,
    "label": "declares",
    "to": 340
  }, {
    "from": 431,
    "label": "declares",
    "to": 345
  }, {
    "from": 431,
    "label": "declares",
    "to": 347
  }, {
    "from": 431,
    "label": "declares",
    "to": 353
  }, {
    "from": 431,
    "label": "declares",
    "to": 356
  }, {
    "from": 431,
    "label": "declares",
    "to": 362
  }, {
    "from": 431,
    "label": "declares",
    "to": 364
  }, {
    "from": 431,
    "label": "declares",
    "to": 366
  }, {
    "from": 431,
    "label": "declares",
    "to": 369
  }, {
    "from": 431,
    "label": "declares",
    "to": 372
  }, {
    "from": 431,
    "label": "declares",
    "to": 374
  }, {
    "from": 431,
    "label": "declares",
    "to": 376
  }, {
    "from": 431,
    "label": "declares",
    "to": 383
  }, {
    "from": 431,
    "label": "declares",
    "to": 385
  }, {
    "from": 431,
    "label": "declares",
    "to": 388
  }, {
    "from": 431,
    "label": "declares",
    "to": 390
  }, {
    "from": 431,
    "label": "declares",
    "to": 392
  }, {
    "from": 431,
    "label": "declares",
    "to": 395
  }, {
    "from": 431,
    "label": "declares",
    "to": 397
  }, {
    "from": 431,
    "label": "declares",
    "to": 404
  }, {
    "from": 431,
    "label": "declares",
    "to": 405
  }, {
    "from": 431,
    "label": "declares",
    "to": 407
  }, {
    "from": 431,
    "label": "declares",
    "to": 409
  }, {
    "from": 431,
    "label": "declares",
    "to": 411
  }, {
    "from": 431,
    "label": "declares",
    "to": 413
  }, {
    "from": 431,
    "label": "declares",
    "to": 415
  }, {
    "from": 431,
    "label": "declares",
    "to": 417
  }, {
    "from": 431,
    "label": "declares",
    "to": 419
  }, {
    "from": 431,
    "label": "declares",
    "to": 421
  }, {
    "from": 431,
    "label": "declares",
    "to": 423
  }, {
    "from": 431,
    "label": "declares",
    "to": 425
  }, {
    "from": 431,
    "label": "declares",
    "to": 426
  }, {
    "from": 431,
    "label": "declares",
    "to": 427
  }, {
    "from": 431,
    "label": "declares",
    "to": 428
  }, {
    "from": 431,
    "label": "declares",
    "to": 429
  }, {
    "from": 1,
    "label": "declares",
    "to": 432
  }, {
    "from": 1,
    "label": "declares",
    "to": 433
  }, {
    "from": 1,
    "label": "declares",
    "to": 434
  }, {
    "from": 1,
    "label": "declares",
    "to": 435
  }, {
    "from": 1,
    "label": "declares",
    "to": 449
  }, {
    "from": 1,
    "label": "declares",
    "to": 455
  }, {
    "from": 1,
    "label": "contains",
    "to": 470
  }, {
    "from": 1,
    "label": "contains",
    "to": 471
  }, {
    "from": 470,
    "label": "initializes",
    "to": 472
  }, {
    "from": 472,
    "label": "assigns",
    "to": 473
  }, {
    "from": 470,
    "label": "initializes",
    "to": 474
  }, {
    "from": 474,
    "label": "assigns",
    "to": 475
  }, {
    "from": 470,
    "label": "initializes",
    "to": 476
  }, {
    "from": 476,
    "label": "assigns",
    "to": 477
  }, {
    "from": 470,
    "label": "initializes",
    "to": 478
  }, {
    "from": 478,
    "label": "assigns",
    "to": 479
  }, {
    "from": 470,
    "label": "initializes",
    "to": 480
  }, {
    "from": 480,
    "label": "assigns",
    "to": 481
  }, {
    "from": 470,
    "label": "initializes",
    "to": 482
  }, {
    "from": 482,
    "label": "assigns",
    "to": 483
  }, {
    "from": 470,
    "label": "initializes",
    "to": 484
  }, {
    "from": 484,
    "label": "assigns",
    "to": 485
  }, {
    "from": 470,
    "label": "initializes",
    "to": 486
  }, {
    "from": 486,
    "label": "assigns",
    "to": 487
  }, {
    "from": 470,
    "label": "initializes",
    "to": 488
  }, {
    "from": 488,
    "label": "assigns",
    "to": 489
  }, {
    "from": 470,
    "label": "initializes",
    "to": 490
  }, {
    "from": 490,
    "label": "assigns",
    "to": 491
  }, {
    "from": 491,
    "label": "assigns",
    "to": 492
  }, {
    "from": 492,
    "label": "assigns",
    "to": 493
  }, {
    "from": 491,
    "label": "assigns",
    "to": 494
  }, {
    "from": 494,
    "label": "assigns",
    "to": 495
  }, {
    "from": 470,
    "label": "initializes",
    "to": 496
  }, {
    "from": 496,
    "label": "assigns",
    "to": 497
  }, {
    "from": 470,
    "label": "initializes",
    "to": 498
  }, {
    "from": 498,
    "label": "assigns",
    "to": 499
  }, {
    "from": 470,
    "label": "initializes",
    "to": 500
  }, {
    "from": 500,
    "label": "assigns",
    "to": 501
  }, {
    "from": 470,
    "label": "initializes",
    "to": 502
  }, {
    "from": 502,
    "label": "assigns",
    "to": 503
  }, {
    "from": 470,
    "label": "initializes",
    "to": 504
  }, {
    "from": 504,
    "label": "assigns",
    "to": 505
  }, {
    "from": 470,
    "label": "initializes",
    "to": 506
  }, {
    "from": 506,
    "label": "assigns",
    "to": 507
  }, {
    "from": 470,
    "label": "initializes",
    "to": 508
  }, {
    "from": 508,
    "label": "assigns",
    "to": 509
  }, {
    "from": 470,
    "label": "initializes",
    "to": 510
  }, {
    "from": 510,
    "label": "assigns",
    "to": 511
  }, {
    "from": 470,
    "label": "initializes",
    "to": 512
  }, {
    "from": 512,
    "label": "assigns",
    "to": 513
  }, {
    "from": 470,
    "label": "initializes",
    "to": 514
  }, {
    "from": 514,
    "label": "assigns",
    "to": 515
  }, {
    "from": 470,
    "label": "initializes",
    "to": 516
  }, {
    "from": 516,
    "label": "assigns",
    "to": 517
  }, {
    "from": 470,
    "label": "initializes",
    "to": 518
  }, {
    "from": 518,
    "label": "assigns",
    "to": 519
  }, {
    "from": 470,
    "label": "initializes",
    "to": 520
  }, {
    "from": 520,
    "label": "assigns",
    "to": 521
  }, {
    "from": 470,
    "label": "initializes",
    "to": 522
  }, {
    "from": 522,
    "label": "assigns",
    "to": 523
  }, {
    "from": 470,
    "label": "initializes",
    "to": 524
  }, {
    "from": 524,
    "label": "assigns",
    "to": 525
  }, {
    "from": 1,
    "label": "provides",
    "to": 526
  }, {
    "from": 472,
    "label": "represents",
    "to": 527
  }, {
    "from": 526,
    "label": "provides",
    "to": 527
  }, {
    "from": 528,
    "label": "requires",
    "to": 1
  }, {
    "from": 529,
    "label": "requires",
    "to": 1
  }, {
    "from": 472,
    "label": "contains",
    "to": 19
  }, {
    "from": 472,
    "label": "contains",
    "to": 26
  }, {
    "from": 472,
    "label": "contains",
    "to": 31
  }, {
    "from": 472,
    "label": "contains",
    "to": 39
  }, {
    "from": 472,
    "label": "contains",
    "to": 44
  }, {
    "from": 472,
    "label": "contains",
    "to": 49
  }, {
    "from": 472,
    "label": "contains",
    "to": 56
  }, {
    "from": 472,
    "label": "contains",
    "to": 69
  }, {
    "from": 472,
    "label": "contains",
    "to": 115
  }, {
    "from": 472,
    "label": "contains",
    "to": 138
  }, {
    "from": 472,
    "label": "contains",
    "to": 156
  }, {
    "from": 472,
    "label": "contains",
    "to": 169
  }, {
    "from": 472,
    "label": "contains",
    "to": 179
  }, {
    "from": 472,
    "label": "contains",
    "to": 189
  }, {
    "from": 472,
    "label": "contains",
    "to": 203
  }, {
    "from": 472,
    "label": "contains",
    "to": 216
  }, {
    "from": 472,
    "label": "contains",
    "to": 223
  }, {
    "from": 472,
    "label": "contains",
    "to": 234
  }, {
    "from": 472,
    "label": "contains",
    "to": 240
  }, {
    "from": 472,
    "label": "contains",
    "to": 245
  }, {
    "from": 472,
    "label": "contains",
    "to": 253
  }, {
    "from": 472,
    "label": "contains",
    "to": 261
  }, {
    "from": 472,
    "label": "contains",
    "to": 271
  }, {
    "from": 472,
    "label": "contains",
    "to": 277
  }, {
    "from": 472,
    "label": "contains",
    "to": 290
  }, {
    "from": 472,
    "label": "contains",
    "to": 300
  }, {
    "from": 472,
    "label": "contains",
    "to": 303
  }, {
    "from": 472,
    "label": "contains",
    "to": 315
  }, {
    "from": 472,
    "label": "contains",
    "to": 317
  }, {
    "from": 472,
    "label": "contains",
    "to": 319
  }, {
    "from": 472,
    "label": "contains",
    "to": 322
  }, {
    "from": 472,
    "label": "contains",
    "to": 325
  }, {
    "from": 472,
    "label": "contains",
    "to": 328
  }, {
    "from": 472,
    "label": "contains",
    "to": 338
  }, {
    "from": 472,
    "label": "contains",
    "to": 340
  }, {
    "from": 472,
    "label": "contains",
    "to": 345
  }, {
    "from": 472,
    "label": "contains",
    "to": 347
  }, {
    "from": 472,
    "label": "contains",
    "to": 353
  }, {
    "from": 472,
    "label": "contains",
    "to": 356
  }, {
    "from": 474,
    "label": "contains",
    "to": 362
  }, {
    "from": 474,
    "label": "contains",
    "to": 364
  }, {
    "from": 474,
    "label": "contains",
    "to": 366
  }, {
    "from": 474,
    "label": "contains",
    "to": 369
  }, {
    "from": 474,
    "label": "contains",
    "to": 372
  }, {
    "from": 474,
    "label": "contains",
    "to": 374
  }, {
    "from": 474,
    "label": "contains",
    "to": 376
  }, {
    "from": 474,
    "label": "contains",
    "to": 383
  }, {
    "from": 474,
    "label": "contains",
    "to": 385
  }, {
    "from": 496,
    "label": "contains",
    "to": 388
  }, {
    "from": 496,
    "label": "contains",
    "to": 390
  }, {
    "from": 496,
    "label": "contains",
    "to": 397
  }, {
    "from": 496,
    "label": "contains",
    "to": 405
  }, {
    "from": 496,
    "label": "contains",
    "to": 407
  }, {
    "from": 496,
    "label": "contains",
    "to": 409
  }, {
    "from": 496,
    "label": "contains",
    "to": 411
  }, {
    "from": 496,
    "label": "contains",
    "to": 413
  }, {
    "from": 496,
    "label": "contains",
    "to": 415
  }, {
    "from": 496,
    "label": "contains",
    "to": 417
  }, {
    "from": 496,
    "label": "contains",
    "to": 419
  }, {
    "from": 496,
    "label": "contains",
    "to": 421
  }, {
    "from": 496,
    "label": "contains",
    "to": 423
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 493
  }, {
    "from": 57,
    "label": "hasArgument",
    "to": 495
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 493
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 495
  }, {
    "from": 98,
    "label": "hasArgument",
    "to": 493
  }, {
    "from": 98,
    "label": "hasArgument",
    "to": 495
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 493
  }, {
    "from": 254,
    "label": "hasArgument",
    "to": 495
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 493
  }, {
    "from": 262,
    "label": "hasArgument",
    "to": 495
  }, {
    "from": 301,
    "label": "hasArgument",
    "to": 493
  }, {
    "from": 301,
    "label": "hasArgument",
    "to": 495
  }, {
    "from": 357,
    "label": "hasArgument",
    "to": 493
  }, {
    "from": 357,
    "label": "hasArgument",
    "to": 495
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 493
  }, {
    "from": 386,
    "label": "hasArgument",
    "to": 495
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "matrix",
    "type": "module"
  }, {
    "id": 2,
    "text": "function matrix:new( rows, columns, value )\r\n\t-- check for given matrix\r\n\tif type( rows ) == \"table\" then\r\n\t\t-- check for vector\r\n\t\tif type(rows[1]) ~= \"table\" then -- expect a vector\r\n\t\t\treturn setmetatable( {{rows[1]},{rows[2]},{rows[3]}},matrix_meta )\r\n\t\tend\r\n\t\treturn setmetatable( rows,matrix_meta )\r\n\tend\r\n\t-- get matrix table\r\n\tlocal mtx = {}\r\n\tlocal value = value or 0\r\n\t-- build identity matrix of given rows\r\n\tif columns == \"I\" then\r\n\t\tfor i = 1,rows do\r\n\t\t\tmtx[i] = {}\r\n\t\t\tfor j = 1,rows do\r\n\t\t\t\tif i == j then\r\n\t\t\t\t\tmtx[i][j] = 1\r\n\t\t\t\telse\r\n\t\t\t\t\tmtx[i][j] = 0\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t-- build new matrix\r\n\telse\r\n\t\tfor i = 1,rows do\r\n\t\t\tmtx[i] = {}\r\n\t\t\tfor j = 1,columns do\r\n\t\t\t\tmtx[i][j] = value\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\t-- return matrix with shared metatable\r\n\treturn setmetatable( mtx,matrix_meta )\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if type( rows ) == \"table\" then\r\n\t\t-- check for vector\r\n\t\tif type(rows[1]) ~= \"table\" then -- expect a vector\r\n\t\t\treturn setmetatable( {{rows[1]},{rows[2]},{rows[3]}},matrix_meta )\r\n\t\tend\r\n\t\treturn setmetatable( rows,matrix_meta )\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "if type(rows[1]) ~= \"table\" then -- expect a vector\r\n\t\t\treturn setmetatable( {{rows[1]},{rows[2]},{rows[3]}},matrix_meta )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "local mtx = {}",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local value = value or 0",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if columns == \"I\" then\r\n\t\tfor i = 1,rows do\r\n\t\t\tmtx[i] = {}\r\n\t\t\tfor j = 1,rows do\r\n\t\t\t\tif i == j then\r\n\t\t\t\t\tmtx[i][j] = 1\r\n\t\t\t\telse\r\n\t\t\t\t\tmtx[i][j] = 0\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend\r\n\t-- build new matrix\r\n\telse\r\n\t\tfor i = 1,rows do\r\n\t\t\tmtx[i] = {}\r\n\t\t\tfor j = 1,columns do\r\n\t\t\t\tmtx[i][j] = value\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "for i = 1,rows do\r\n\t\t\tmtx[i] = {}\r\n\t\t\tfor j = 1,rows do\r\n\t\t\t\tif i == j then\r\n\t\t\t\t\tmtx[i][j] = 1\r\n\t\t\t\telse\r\n\t\t\t\t\tmtx[i][j] = 0\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 10,
    "text": "mtx[i] = {}",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "for j = 1,rows do\r\n\t\t\t\tif i == j then\r\n\t\t\t\t\tmtx[i][j] = 1\r\n\t\t\t\telse\r\n\t\t\t\t\tmtx[i][j] = 0\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 12,
    "text": "if i == j then\r\n\t\t\t\t\tmtx[i][j] = 1\r\n\t\t\t\telse\r\n\t\t\t\t\tmtx[i][j] = 0\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "mtx[i][j] = 1",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "mtx[i][j] = 0",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "for i = 1,rows do\r\n\t\t\tmtx[i] = {}\r\n\t\t\tfor j = 1,columns do\r\n\t\t\t\tmtx[i][j] = value\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 16,
    "text": "for j = 1,columns do\r\n\t\t\t\tmtx[i][j] = value\r\n\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 17,
    "text": "mtx[i][j] = value",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function matrix.add( m1, m2 )\r\n\tlocal mtx = {}\r\n\tfor i = 1,#m1 do\r\n\t\tlocal m3i = {}\r\n\t\tmtx[i] = m3i\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tm3i[j] = m1[i][j] + m2[i][j]\r\n\t\tend\r\n\tend\r\n\treturn setmetatable( mtx, matrix_meta )\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "for i = 1,#m1 do\r\n\t\tlocal m3i = {}\r\n\t\tmtx[i] = m3i\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tm3i[j] = m1[i][j] + m2[i][j]\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 21,
    "text": "local m3i = {}",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "mtx[i] = m3i",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "for j = 1,#m1[1] do\r\n\t\t\tm3i[j] = m1[i][j] + m2[i][j]\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 24,
    "text": "m3i[j] = m1[i][j] + m2[i][j]",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function matrix.sub( m1, m2 )\r\n\tlocal mtx = {}\r\n\tfor i = 1,#m1 do\r\n\t\tlocal m3i = {}\r\n\t\tmtx[i] = m3i\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tm3i[j] = m1[i][j] - m2[i][j]\r\n\t\tend\r\n\tend\r\n\treturn setmetatable( mtx, matrix_meta )\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "for i = 1,#m1 do\r\n\t\tlocal m3i = {}\r\n\t\tmtx[i] = m3i\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tm3i[j] = m1[i][j] - m2[i][j]\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 28,
    "text": "for j = 1,#m1[1] do\r\n\t\t\tm3i[j] = m1[i][j] - m2[i][j]\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 29,
    "text": "m3i[j] = m1[i][j] - m2[i][j]",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function matrix.mul( m1, m2 )\r\n\t-- multiply rows with columns\r\n\tlocal mtx = {}\r\n\tfor i = 1,#m1 do\r\n\t\tmtx[i] = {}\r\n\t\tfor j = 1,#m2[1] do\r\n\t\t\tlocal num = m1[i][1] * m2[1][j]\r\n\t\t\tfor n = 2,#m1[1] do\r\n\t\t\t\tnum = num + m1[i][n] * m2[n][j]\r\n\t\t\tend\r\n\t\t\tmtx[i][j] = num\r\n\t\tend\r\n\tend\r\n\treturn setmetatable( mtx, matrix_meta )\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "for i = 1,#m1 do\r\n\t\tmtx[i] = {}\r\n\t\tfor j = 1,#m2[1] do\r\n\t\t\tlocal num = m1[i][1] * m2[1][j]\r\n\t\t\tfor n = 2,#m1[1] do\r\n\t\t\t\tnum = num + m1[i][n] * m2[n][j]\r\n\t\t\tend\r\n\t\t\tmtx[i][j] = num\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 33,
    "text": "for j = 1,#m2[1] do\r\n\t\t\tlocal num = m1[i][1] * m2[1][j]\r\n\t\t\tfor n = 2,#m1[1] do\r\n\t\t\t\tnum = num + m1[i][n] * m2[n][j]\r\n\t\t\tend\r\n\t\t\tmtx[i][j] = num\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 34,
    "text": "local num = m1[i][1] * m2[1][j]",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "for n = 2,#m1[1] do\r\n\t\t\t\tnum = num + m1[i][n] * m2[n][j]\r\n\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 36,
    "text": "num = num + m1[i][n] * m2[n][j]",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "mtx[i][j] = num",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function matrix.div( m1, m2 )\r\n\tlocal rank; m2,rank = matrix.invert( m2 )\r\n\tif not m2 then return m2, rank end -- singular\r\n\treturn matrix.mul( m1, m2 )\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local rank",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "m2,rank = matrix.invert( m2 )",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "if not m2 then return m2, rank end",
    "type": "statement:if"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function matrix.mulnum( m1, num )\r\n\tlocal mtx = {}\r\n\t-- multiply elements with number\r\n\tfor i = 1,#m1 do\r\n\t\tmtx[i] = {}\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tmtx[i][j] = m1[i][j] * num\r\n\t\tend\r\n\tend\r\n\treturn setmetatable( mtx, matrix_meta )\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "for i = 1,#m1 do\r\n\t\tmtx[i] = {}\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tmtx[i][j] = m1[i][j] * num\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 46,
    "text": "for j = 1,#m1[1] do\r\n\t\t\tmtx[i][j] = m1[i][j] * num\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 47,
    "text": "mtx[i][j] = m1[i][j] * num",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 49,
    "text": "function matrix.divnum( m1, num )\r\n\tlocal mtx = {}\r\n\t-- divide elements by number\r\n\tfor i = 1,#m1 do\r\n\t\tlocal mtxi = {}\r\n\t\tmtx[i] = mtxi\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tmtxi[j] = m1[i][j] / num\r\n\t\tend\r\n\tend\r\n\treturn setmetatable( mtx, matrix_meta )\r\nend",
    "type": "function"
  }, {
    "id": 50,
    "text": "for i = 1,#m1 do\r\n\t\tlocal mtxi = {}\r\n\t\tmtx[i] = mtxi\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tmtxi[j] = m1[i][j] / num\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 51,
    "text": "local mtxi = {}",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "mtx[i] = mtxi",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "for j = 1,#m1[1] do\r\n\t\t\tmtxi[j] = m1[i][j] / num\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 54,
    "text": "mtxi[j] = m1[i][j] / num",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function matrix.pow( m1, num )\r\n\tassert(num == math.floor(num), \"exponent not an integer\")\r\n\tif num == 0 then\r\n\t\treturn matrix:new( #m1,\"I\" )\r\n\tend\r\n\tif num < 0 then\r\n\t\tlocal rank; m1,rank = matrix.invert( m1 )\r\n      if not m1 then return m1, rank end -- singular\r\n\t\tnum = -num\r\n\tend\r\n\tlocal mtx = matrix.copy( m1 )\r\n\tfor i = 2,num\tdo\r\n\t\tmtx = matrix.mul( mtx,m1 )\r\n\tend\r\n\treturn mtx\r\nend",
    "type": "function"
  }, {
    "id": 57,
    "text": "assert(num == math.floor(num), \"exponent not an integer\")",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "if num == 0 then\r\n\t\treturn matrix:new( #m1,\"I\" )\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "if num < 0 then\r\n\t\tlocal rank; m1,rank = matrix.invert( m1 )\r\n      if not m1 then return m1, rank end -- singular\r\n\t\tnum = -num\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "m1,rank = matrix.invert( m1 )",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "if not m1 then return m1, rank end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "num = -num",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "local mtx = matrix.copy( m1 )",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "for i = 2,num\tdo\r\n\t\tmtx = matrix.mul( mtx,m1 )\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 65,
    "text": "mtx = matrix.mul( mtx,m1 )",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "local function number_norm2(x)\r\n  return x * x\r\nend",
    "type": "function"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function matrix.det( m1 )\r\n\r\n\t-- check if matrix is quadratic\r\n\tassert(#m1 == #m1[1], \"matrix not square\")\r\n\t\r\n\tlocal size = #m1\r\n\t\r\n\tif size == 1 then\r\n\t\treturn m1[1][1]\r\n\tend\r\n\t\r\n\tif size == 2 then\r\n\t\treturn m1[1][1]*m1[2][2] - m1[2][1]*m1[1][2]\r\n\tend\r\n\t\r\n\tif size == 3 then\r\n\t\treturn ( m1[1][1]*m1[2][2]*m1[3][3] + m1[1][2]*m1[2][3]*m1[3][1] + m1[1][3]*m1[2][1]*m1[3][2]\r\n\t\t\t- m1[1][3]*m1[2][2]*m1[3][1] - m1[1][1]*m1[2][3]*m1[3][2] - m1[1][2]*m1[2][1]*m1[3][3] )\r\n\tend\r\n\t\r\n\t--// no symbolic matrix supported below here\r\n\tlocal e = m1[1][1]\r\n\tlocal zero  = type(e) == \"table\" and e.zero or 0\r\n\tlocal norm2 = type(e) == \"table\" and e.norm2 or number_norm2\r\n\r\n\t--// matrix is bigger than 3x3\r\n\t-- get determinant\r\n\t-- using Gauss elimination and Laplace\r\n\t-- start eliminating from below better for removals\r\n\t-- get copy of matrix, set initial determinant\r\n\tlocal mtx = matrix.copy( m1 )\r\n\tlocal det = 1\r\n\t-- get det up to the last element\r\n\tfor j = 1,#mtx[1] do\r\n\t\t-- get smallest element so that |factor| > 1\r\n\t\t-- and set it as last element\r\n\t\tlocal rows = #mtx\r\n\t\tlocal subdet,xrow\r\n\t\tfor i = 1,rows do\r\n\t\t\t-- get element\r\n\t\t\tlocal e = mtx[i][j]\r\n\t\t\t-- if no subdet has been found\r\n\t\t\tif not subdet then\r\n\t\t\t\t-- check if element it is not zero\r\n\t\t\t\tif e ~= zero then\r\n\t\t\t\t\t-- use element as new subdet\r\n\t\t\t\t\tsubdet,xrow = e,i\r\n\t\t\t\tend\r\n\t\t\t-- check for elements nearest to 1 or -1\r\n\t\t\telseif e ~= zero and math.abs(norm2(e)-1) < math.abs(norm2(subdet)-1) then\r\n\t\t\t\tsubdet,xrow = e,i\r\n\t\t\tend\r\n\t\tend\r\n\t\t-- only cary on if subdet is found\r\n\t\tif subdet then\r\n\t\t\t-- check if xrow is the last row,\r\n\t\t\t-- else switch lines and multiply det by -1\r\n\t\t\tif xrow ~= rows then\r\n\t\t\t\tmtx[rows],mtx[xrow] = mtx[xrow],mtx[rows]\r\n\t\t\t\tdet = -det\r\n\t\t\tend\r\n\t\t\t-- traverse all fields setting element to zero\r\n\t\t\t-- we don't set to zero cause we don't use that column anymore then anyways\r\n\t\t\tfor i = 1,rows-1 do\r\n\t\t\t\t-- factor is the dividor of the first element\r\n\t\t\t\t-- if element is not already zero\r\n\t\t\t\tif mtx[i][j] ~= zero then\r\n\t\t\t\t\tlocal factor = mtx[i][j]/subdet\r\n\t\t\t\t\t-- update all remaining fields of the matrix, with value from xrow\r\n\t\t\t\t\tfor n = j+1,#mtx[1] do\r\n\t\t\t\t\t\tmtx[i][n] = mtx[i][n] - factor * mtx[rows][n]\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t-- update determinant and remove row\r\n\t\t\tif math.fmod( rows,2 ) == 0 then\r\n\t\t\t\tdet = -det\r\n\t\t\tend\r\n\t\t\tdet = det * subdet\r\n\t\t\ttable.remove( mtx )\r\n\t\telse\r\n\t\t\t-- break here table det is 0\r\n\t\t\treturn det * 0\r\n\t\tend\r\n\tend\r\n\t-- det ready to return\r\n\treturn det\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "assert(#m1 == #m1[1], \"matrix not square\")",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "local size = #m1",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if size == 1 then\r\n\t\treturn m1[1][1]\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "if size == 2 then\r\n\t\treturn m1[1][1]*m1[2][2] - m1[2][1]*m1[1][2]\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "if size == 3 then\r\n\t\treturn ( m1[1][1]*m1[2][2]*m1[3][3] + m1[1][2]*m1[2][3]*m1[3][1] + m1[1][3]*m1[2][1]*m1[3][2]\r\n\t\t\t- m1[1][3]*m1[2][2]*m1[3][1] - m1[1][1]*m1[2][3]*m1[3][2] - m1[1][2]*m1[2][1]*m1[3][3] )\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 75,
    "text": "local e = m1[1][1]",
    "type": "statement:localassign"
  }, {
    "id": 76,
    "text": "local zero  = type(e) == \"table\" and e.zero or 0",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "local norm2 = type(e) == \"table\" and e.norm2 or number_norm2",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local det = 1",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "for j = 1,#mtx[1] do\r\n\t\t-- get smallest element so that |factor| > 1\r\n\t\t-- and set it as last element\r\n\t\tlocal rows = #mtx\r\n\t\tlocal subdet,xrow\r\n\t\tfor i = 1,rows do\r\n\t\t\t-- get element\r\n\t\t\tlocal e = mtx[i][j]\r\n\t\t\t-- if no subdet has been found\r\n\t\t\tif not subdet then\r\n\t\t\t\t-- check if element it is not zero\r\n\t\t\t\tif e ~= zero then\r\n\t\t\t\t\t-- use element as new subdet\r\n\t\t\t\t\tsubdet,xrow = e,i\r\n\t\t\t\tend\r\n\t\t\t-- check for elements nearest to 1 or -1\r\n\t\t\telseif e ~= zero and math.abs(norm2(e)-1) < math.abs(norm2(subdet)-1) then\r\n\t\t\t\tsubdet,xrow = e,i\r\n\t\t\tend\r\n\t\tend\r\n\t\t-- only cary on if subdet is found\r\n\t\tif subdet then\r\n\t\t\t-- check if xrow is the last row,\r\n\t\t\t-- else switch lines and multiply det by -1\r\n\t\t\tif xrow ~= rows then\r\n\t\t\t\tmtx[rows],mtx[xrow] = mtx[xrow],mtx[rows]\r\n\t\t\t\tdet = -det\r\n\t\t\tend\r\n\t\t\t-- traverse all fields setting element to zero\r\n\t\t\t-- we don't set to zero cause we don't use that column anymore then anyways\r\n\t\t\tfor i = 1,rows-1 do\r\n\t\t\t\t-- factor is the dividor of the first element\r\n\t\t\t\t-- if element is not already zero\r\n\t\t\t\tif mtx[i][j] ~= zero then\r\n\t\t\t\t\tlocal factor = mtx[i][j]/subdet\r\n\t\t\t\t\t-- update all remaining fields of the matrix, with value from xrow\r\n\t\t\t\t\tfor n = j+1,#mtx[1] do\r\n\t\t\t\t\t\tmtx[i][n] = mtx[i][n] - factor * mtx[rows][n]\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t-- update determinant and remove row\r\n\t\t\tif math.fmod( rows,2 ) == 0 then\r\n\t\t\t\tdet = -det\r\n\t\t\tend\r\n\t\t\tdet = det * subdet\r\n\t\t\ttable.remove( mtx )\r\n\t\telse\r\n\t\t\t-- break here table det is 0\r\n\t\t\treturn det * 0\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 80,
    "text": "local rows = #mtx",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "local subdet,xrow",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "for i = 1,rows do\r\n\t\t\t-- get element\r\n\t\t\tlocal e = mtx[i][j]\r\n\t\t\t-- if no subdet has been found\r\n\t\t\tif not subdet then\r\n\t\t\t\t-- check if element it is not zero\r\n\t\t\t\tif e ~= zero then\r\n\t\t\t\t\t-- use element as new subdet\r\n\t\t\t\t\tsubdet,xrow = e,i\r\n\t\t\t\tend\r\n\t\t\t-- check for elements nearest to 1 or -1\r\n\t\t\telseif e ~= zero and math.abs(norm2(e)-1) < math.abs(norm2(subdet)-1) then\r\n\t\t\t\tsubdet,xrow = e,i\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 83,
    "text": "local e = mtx[i][j]",
    "type": "statement:localassign"
  }, {
    "id": 84,
    "text": "if not subdet then\r\n\t\t\t\t-- check if element it is not zero\r\n\t\t\t\tif e ~= zero then\r\n\t\t\t\t\t-- use element as new subdet\r\n\t\t\t\t\tsubdet,xrow = e,i\r\n\t\t\t\tend\r\n\t\t\t-- check for elements nearest to 1 or -1\r\n\t\t\telseif e ~= zero and math.abs(norm2(e)-1) < math.abs(norm2(subdet)-1) then\r\n\t\t\t\tsubdet,xrow = e,i\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 85,
    "text": "if e ~= zero then\r\n\t\t\t\t\t-- use element as new subdet\r\n\t\t\t\t\tsubdet,xrow = e,i\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "subdet,xrow = e,i",
    "type": "statement:assign"
  }, {
    "id": 87,
    "text": "if subdet then\r\n\t\t\t-- check if xrow is the last row,\r\n\t\t\t-- else switch lines and multiply det by -1\r\n\t\t\tif xrow ~= rows then\r\n\t\t\t\tmtx[rows],mtx[xrow] = mtx[xrow],mtx[rows]\r\n\t\t\t\tdet = -det\r\n\t\t\tend\r\n\t\t\t-- traverse all fields setting element to zero\r\n\t\t\t-- we don't set to zero cause we don't use that column anymore then anyways\r\n\t\t\tfor i = 1,rows-1 do\r\n\t\t\t\t-- factor is the dividor of the first element\r\n\t\t\t\t-- if element is not already zero\r\n\t\t\t\tif mtx[i][j] ~= zero then\r\n\t\t\t\t\tlocal factor = mtx[i][j]/subdet\r\n\t\t\t\t\t-- update all remaining fields of the matrix, with value from xrow\r\n\t\t\t\t\tfor n = j+1,#mtx[1] do\r\n\t\t\t\t\t\tmtx[i][n] = mtx[i][n] - factor * mtx[rows][n]\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\t-- update determinant and remove row\r\n\t\t\tif math.fmod( rows,2 ) == 0 then\r\n\t\t\t\tdet = -det\r\n\t\t\tend\r\n\t\t\tdet = det * subdet\r\n\t\t\ttable.remove( mtx )\r\n\t\telse\r\n\t\t\t-- break here table det is 0\r\n\t\t\treturn det * 0\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 88,
    "text": "if xrow ~= rows then\r\n\t\t\t\tmtx[rows],mtx[xrow] = mtx[xrow],mtx[rows]\r\n\t\t\t\tdet = -det\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "mtx[rows],mtx[xrow] = mtx[xrow],mtx[rows]",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "det = -det",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "for i = 1,rows-1 do\r\n\t\t\t\t-- factor is the dividor of the first element\r\n\t\t\t\t-- if element is not already zero\r\n\t\t\t\tif mtx[i][j] ~= zero then\r\n\t\t\t\t\tlocal factor = mtx[i][j]/subdet\r\n\t\t\t\t\t-- update all remaining fields of the matrix, with value from xrow\r\n\t\t\t\t\tfor n = j+1,#mtx[1] do\r\n\t\t\t\t\t\tmtx[i][n] = mtx[i][n] - factor * mtx[rows][n]\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 92,
    "text": "if mtx[i][j] ~= zero then\r\n\t\t\t\t\tlocal factor = mtx[i][j]/subdet\r\n\t\t\t\t\t-- update all remaining fields of the matrix, with value from xrow\r\n\t\t\t\t\tfor n = j+1,#mtx[1] do\r\n\t\t\t\t\t\tmtx[i][n] = mtx[i][n] - factor * mtx[rows][n]\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 93,
    "text": "local factor = mtx[i][j]/subdet",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "for n = j+1,#mtx[1] do\r\n\t\t\t\t\t\tmtx[i][n] = mtx[i][n] - factor * mtx[rows][n]\r\n\t\t\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 95,
    "text": "mtx[i][n] = mtx[i][n] - factor * mtx[rows][n]",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "if math.fmod( rows,2 ) == 0 then\r\n\t\t\t\tdet = -det\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "det = det * subdet",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "table.remove( mtx )",
    "type": "statement:functioncall"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function( mtx,i,j,zero,one,norm2 )\r\n\t-- check if element is one\r\n\tif mtx[i][j] == one then return true end\r\n\t-- check for lowest value\r\n\tlocal _ilow\r\n\tfor _i = i,#mtx do\r\n\t\tlocal e = mtx[_i][j]\r\n\t\tif e == one then\r\n\t\t\tbreak\r\n\t\tend\r\n\t\tif not _ilow then\r\n\t\t\tif e ~= zero then\r\n\t\t\t\t_ilow = _i\r\n\t\t\tend\r\n\t\telseif (e ~= zero) and math.abs(norm2(e)-1) < math.abs(norm2(mtx[_ilow][j])-1) then\r\n\t\t\t_ilow = _i\r\n\t\tend\r\n\tend\r\n\tif _ilow then\r\n\t\t-- switch lines if not input line\r\n\t\t-- legal operation\r\n\t\tif _ilow ~= i then\r\n\t\t\tmtx[i],mtx[_ilow] = mtx[_ilow],mtx[i]\r\n\t\tend\r\n\t\treturn true\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 101,
    "text": "if mtx[i][j] == one then return true end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "local _ilow",
    "type": "statement:localassign"
  }, {
    "id": 103,
    "text": "for _i = i,#mtx do\r\n\t\tlocal e = mtx[_i][j]\r\n\t\tif e == one then\r\n\t\t\tbreak\r\n\t\tend\r\n\t\tif not _ilow then\r\n\t\t\tif e ~= zero then\r\n\t\t\t\t_ilow = _i\r\n\t\t\tend\r\n\t\telseif (e ~= zero) and math.abs(norm2(e)-1) < math.abs(norm2(mtx[_ilow][j])-1) then\r\n\t\t\t_ilow = _i\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 104,
    "text": "local e = mtx[_i][j]",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "if e == one then\r\n\t\t\tbreak\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 106,
    "text": "if not _ilow then\r\n\t\t\tif e ~= zero then\r\n\t\t\t\t_ilow = _i\r\n\t\t\tend\r\n\t\telseif (e ~= zero) and math.abs(norm2(e)-1) < math.abs(norm2(mtx[_ilow][j])-1) then\r\n\t\t\t_ilow = _i\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "if e ~= zero then\r\n\t\t\t\t_ilow = _i\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 108,
    "text": "_ilow = _i",
    "type": "statement:assign"
  }, {
    "id": 109,
    "text": "if _ilow then\r\n\t\t-- switch lines if not input line\r\n\t\t-- legal operation\r\n\t\tif _ilow ~= i then\r\n\t\t\tmtx[i],mtx[_ilow] = mtx[_ilow],mtx[i]\r\n\t\tend\r\n\t\treturn true\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 110,
    "text": "if _ilow ~= i then\r\n\t\t\tmtx[i],mtx[_ilow] = mtx[_ilow],mtx[i]\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 111,
    "text": "mtx[i],mtx[_ilow] = mtx[_ilow],mtx[i]",
    "type": "statement:assign"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "local function copy(x)\r\n\treturn type(x) == \"table\" and x.copy(x) or x\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function matrix.dogauss( mtx )\r\n\tlocal e = mtx[1][1]\r\n\tlocal zero = type(e) == \"table\" and e.zero or 0\r\n\tlocal one  = type(e) == \"table\" and e.one  or 1\r\n\tlocal norm2 = type(e) == \"table\" and e.norm2 or number_norm2\r\n\r\n\tlocal rows,columns = #mtx,#mtx[1]\r\n\t-- stairs left -> right\r\n\tfor j = 1,rows do\r\n\t\t-- check if element can be setted to one\r\n\t\tif setelementtosmallest( mtx,j,j,zero,one,norm2 ) then\r\n\t\t\t-- start parsing rows\r\n\t\t\tfor i = j+1,rows do\r\n\t\t\t\t-- check if element is not already zero\r\n\t\t\t\tif mtx[i][j] ~= zero then\r\n\t\t\t\t\t-- we may add x*otherline row, to set element to zero\r\n\t\t\t\t\t-- tozero - x*mtx[j][j] = 0; x = tozero/mtx[j][j]\r\n\t\t\t\t\tlocal factor = mtx[i][j]/mtx[j][j]\r\n\t\t\t\t\t--// this should not be used although it does no division,\r\n\t\t\t\t\t-- yet with big matrices (since we do no reducing and other things)\r\n\t\t\t\t\t-- we get too big numbers\r\n\t\t\t\t\t--local factor1,factor2 = mtx[i][j],mtx[j][j] //--\r\n\t\t\t\t\tmtx[i][j] = copy(zero)\r\n\t\t\t\t\tfor _j = j+1,columns do\r\n\t\t\t\t\t\t--// mtx[i][_j] = mtx[i][_j] * factor2 - factor1 * mtx[j][_j] //--\r\n\t\t\t\t\t\tmtx[i][_j] = mtx[i][_j] - factor * mtx[j][_j]\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\t-- return false and the rank of the matrix\r\n\t\t\treturn false,j-1\r\n\t\tend\r\n\tend\r\n\t-- stairs right <- left\r\n\tfor j = rows,1,-1 do\r\n\t\t-- set element to one\r\n\t\t-- do division here\r\n\t\tlocal div = mtx[j][j]\r\n\t\tfor _j = j+1,columns do\r\n\t\t\tmtx[j][_j] = mtx[j][_j] / div\r\n\t\tend\r\n\t\t-- start parsing rows\r\n\t\tfor i = j-1,1,-1 do\r\n\t\t\t-- check if element is not already zero\t\t\t\r\n\t\t\tif mtx[i][j] ~= zero then\r\n\t\t\t\tlocal factor = mtx[i][j]\r\n\t\t\t\tfor _j = j+1,columns do\r\n\t\t\t\t\tmtx[i][_j] = mtx[i][_j] - factor * mtx[j][_j]\r\n\t\t\t\tend\r\n\t\t\t\tmtx[i][j] = copy(zero)\r\n\t\t\tend\r\n\t\tend\r\n\t\tmtx[j][j] = copy(one)\r\n\tend\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "local e = mtx[1][1]",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "local zero = type(e) == \"table\" and e.zero or 0",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "local one  = type(e) == \"table\" and e.one  or 1",
    "type": "statement:localassign"
  }, {
    "id": 119,
    "text": "local rows,columns = #mtx,#mtx[1]",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "for j = 1,rows do\r\n\t\t-- check if element can be setted to one\r\n\t\tif setelementtosmallest( mtx,j,j,zero,one,norm2 ) then\r\n\t\t\t-- start parsing rows\r\n\t\t\tfor i = j+1,rows do\r\n\t\t\t\t-- check if element is not already zero\r\n\t\t\t\tif mtx[i][j] ~= zero then\r\n\t\t\t\t\t-- we may add x*otherline row, to set element to zero\r\n\t\t\t\t\t-- tozero - x*mtx[j][j] = 0; x = tozero/mtx[j][j]\r\n\t\t\t\t\tlocal factor = mtx[i][j]/mtx[j][j]\r\n\t\t\t\t\t--// this should not be used although it does no division,\r\n\t\t\t\t\t-- yet with big matrices (since we do no reducing and other things)\r\n\t\t\t\t\t-- we get too big numbers\r\n\t\t\t\t\t--local factor1,factor2 = mtx[i][j],mtx[j][j] //--\r\n\t\t\t\t\tmtx[i][j] = copy(zero)\r\n\t\t\t\t\tfor _j = j+1,columns do\r\n\t\t\t\t\t\t--// mtx[i][_j] = mtx[i][_j] * factor2 - factor1 * mtx[j][_j] //--\r\n\t\t\t\t\t\tmtx[i][_j] = mtx[i][_j] - factor * mtx[j][_j]\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\t-- return false and the rank of the matrix\r\n\t\t\treturn false,j-1\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 121,
    "text": "if setelementtosmallest( mtx,j,j,zero,one,norm2 ) then\r\n\t\t\t-- start parsing rows\r\n\t\t\tfor i = j+1,rows do\r\n\t\t\t\t-- check if element is not already zero\r\n\t\t\t\tif mtx[i][j] ~= zero then\r\n\t\t\t\t\t-- we may add x*otherline row, to set element to zero\r\n\t\t\t\t\t-- tozero - x*mtx[j][j] = 0; x = tozero/mtx[j][j]\r\n\t\t\t\t\tlocal factor = mtx[i][j]/mtx[j][j]\r\n\t\t\t\t\t--// this should not be used although it does no division,\r\n\t\t\t\t\t-- yet with big matrices (since we do no reducing and other things)\r\n\t\t\t\t\t-- we get too big numbers\r\n\t\t\t\t\t--local factor1,factor2 = mtx[i][j],mtx[j][j] //--\r\n\t\t\t\t\tmtx[i][j] = copy(zero)\r\n\t\t\t\t\tfor _j = j+1,columns do\r\n\t\t\t\t\t\t--// mtx[i][_j] = mtx[i][_j] * factor2 - factor1 * mtx[j][_j] //--\r\n\t\t\t\t\t\tmtx[i][_j] = mtx[i][_j] - factor * mtx[j][_j]\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\t-- return false and the rank of the matrix\r\n\t\t\treturn false,j-1\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "for i = j+1,rows do\r\n\t\t\t\t-- check if element is not already zero\r\n\t\t\t\tif mtx[i][j] ~= zero then\r\n\t\t\t\t\t-- we may add x*otherline row, to set element to zero\r\n\t\t\t\t\t-- tozero - x*mtx[j][j] = 0; x = tozero/mtx[j][j]\r\n\t\t\t\t\tlocal factor = mtx[i][j]/mtx[j][j]\r\n\t\t\t\t\t--// this should not be used although it does no division,\r\n\t\t\t\t\t-- yet with big matrices (since we do no reducing and other things)\r\n\t\t\t\t\t-- we get too big numbers\r\n\t\t\t\t\t--local factor1,factor2 = mtx[i][j],mtx[j][j] //--\r\n\t\t\t\t\tmtx[i][j] = copy(zero)\r\n\t\t\t\t\tfor _j = j+1,columns do\r\n\t\t\t\t\t\t--// mtx[i][_j] = mtx[i][_j] * factor2 - factor1 * mtx[j][_j] //--\r\n\t\t\t\t\t\tmtx[i][_j] = mtx[i][_j] - factor * mtx[j][_j]\r\n\t\t\t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 123,
    "text": "if mtx[i][j] ~= zero then\r\n\t\t\t\t\t-- we may add x*otherline row, to set element to zero\r\n\t\t\t\t\t-- tozero - x*mtx[j][j] = 0; x = tozero/mtx[j][j]\r\n\t\t\t\t\tlocal factor = mtx[i][j]/mtx[j][j]\r\n\t\t\t\t\t--// this should not be used although it does no division,\r\n\t\t\t\t\t-- yet with big matrices (since we do no reducing and other things)\r\n\t\t\t\t\t-- we get too big numbers\r\n\t\t\t\t\t--local factor1,factor2 = mtx[i][j],mtx[j][j] //--\r\n\t\t\t\t\tmtx[i][j] = copy(zero)\r\n\t\t\t\t\tfor _j = j+1,columns do\r\n\t\t\t\t\t\t--// mtx[i][_j] = mtx[i][_j] * factor2 - factor1 * mtx[j][_j] //--\r\n\t\t\t\t\t\tmtx[i][_j] = mtx[i][_j] - factor * mtx[j][_j]\r\n\t\t\t\t\tend\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "local factor = mtx[i][j]/mtx[j][j]",
    "type": "statement:localassign"
  }, {
    "id": 125,
    "text": "mtx[i][j] = copy(zero)",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "for _j = j+1,columns do\r\n\t\t\t\t\t\t--// mtx[i][_j] = mtx[i][_j] * factor2 - factor1 * mtx[j][_j] //--\r\n\t\t\t\t\t\tmtx[i][_j] = mtx[i][_j] - factor * mtx[j][_j]\r\n\t\t\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 127,
    "text": "mtx[i][_j] = mtx[i][_j] - factor * mtx[j][_j]",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "for j = rows,1,-1 do\r\n\t\t-- set element to one\r\n\t\t-- do division here\r\n\t\tlocal div = mtx[j][j]\r\n\t\tfor _j = j+1,columns do\r\n\t\t\tmtx[j][_j] = mtx[j][_j] / div\r\n\t\tend\r\n\t\t-- start parsing rows\r\n\t\tfor i = j-1,1,-1 do\r\n\t\t\t-- check if element is not already zero\t\t\t\r\n\t\t\tif mtx[i][j] ~= zero then\r\n\t\t\t\tlocal factor = mtx[i][j]\r\n\t\t\t\tfor _j = j+1,columns do\r\n\t\t\t\t\tmtx[i][_j] = mtx[i][_j] - factor * mtx[j][_j]\r\n\t\t\t\tend\r\n\t\t\t\tmtx[i][j] = copy(zero)\r\n\t\t\tend\r\n\t\tend\r\n\t\tmtx[j][j] = copy(one)\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 129,
    "text": "local div = mtx[j][j]",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "for _j = j+1,columns do\r\n\t\t\tmtx[j][_j] = mtx[j][_j] / div\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 131,
    "text": "mtx[j][_j] = mtx[j][_j] / div",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "for i = j-1,1,-1 do\r\n\t\t\t-- check if element is not already zero\t\t\t\r\n\t\t\tif mtx[i][j] ~= zero then\r\n\t\t\t\tlocal factor = mtx[i][j]\r\n\t\t\t\tfor _j = j+1,columns do\r\n\t\t\t\t\tmtx[i][_j] = mtx[i][_j] - factor * mtx[j][_j]\r\n\t\t\t\tend\r\n\t\t\t\tmtx[i][j] = copy(zero)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 133,
    "text": "if mtx[i][j] ~= zero then\r\n\t\t\t\tlocal factor = mtx[i][j]\r\n\t\t\t\tfor _j = j+1,columns do\r\n\t\t\t\t\tmtx[i][_j] = mtx[i][_j] - factor * mtx[j][_j]\r\n\t\t\t\tend\r\n\t\t\t\tmtx[i][j] = copy(zero)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 134,
    "text": "local factor = mtx[i][j]",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "for _j = j+1,columns do\r\n\t\t\t\t\tmtx[i][_j] = mtx[i][_j] - factor * mtx[j][_j]\r\n\t\t\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 136,
    "text": "mtx[j][j] = copy(one)",
    "type": "statement:assign"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function matrix.invert( m1 )\r\n\tassert(#m1 == #m1[1], \"matrix not square\")\r\n\tlocal mtx = matrix.copy( m1 )\r\n\tlocal ident = setmetatable( {},matrix_meta )\r\n\tlocal e = m1[1][1]\r\n    local zero = type(e) == \"table\" and e.zero or 0\r\n    local one  = type(e) == \"table\" and e.one  or 1\r\n\tfor i = 1,#m1 do\r\n\t\tlocal identi = {}\r\n\t\tident[i] = identi\r\n\t\tfor j = 1,#m1 do\r\n\t\t\tidenti[j] = copy((i == j) and one or zero)\r\n\t\tend\r\n\tend\r\n\tmtx = matrix.concath( mtx,ident )\r\n\tlocal done,rank = matrix.dogauss( mtx )\r\n\tif done then\r\n\t\treturn matrix.subm( mtx, 1,(#mtx[1]/2)+1,#mtx,#mtx[1] )\r\n\telse\r\n\t\treturn nil,rank\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 139,
    "text": "local ident = setmetatable( {},matrix_meta )",
    "type": "statement:localassign"
  }, {
    "id": 140,
    "text": "for i = 1,#m1 do\r\n\t\tlocal identi = {}\r\n\t\tident[i] = identi\r\n\t\tfor j = 1,#m1 do\r\n\t\t\tidenti[j] = copy((i == j) and one or zero)\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 141,
    "text": "local identi = {}",
    "type": "statement:localassign"
  }, {
    "id": 142,
    "text": "ident[i] = identi",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "for j = 1,#m1 do\r\n\t\t\tidenti[j] = copy((i == j) and one or zero)\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 144,
    "text": "identi[j] = copy((i == j) and one or zero)",
    "type": "statement:assign"
  }, {
    "id": 145,
    "text": "mtx = matrix.concath( mtx,ident )",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "local done,rank = matrix.dogauss( mtx )",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "if done then\r\n\t\treturn matrix.subm( mtx, 1,(#mtx[1]/2)+1,#mtx,#mtx[1] )\r\n\telse\r\n\t\treturn nil,rank\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "local function get_abs_avg( m1, m2 )\r\n\tlocal dist = 0\r\n\tlocal e = m1[1][1]\r\n\tlocal abs = type(e) == \"table\" and e.abs or math.abs\r\n\tfor i=1,#m1 do\r\n\t\tfor j=1,#m1[1] do\r\n\t\t\tdist = dist + abs(m1[i][j]-m2[i][j])\r\n\t\tend\r\n\tend\r\n\t-- norm by numbers of entries\r\n\treturn dist/(#m1*2)\r\nend",
    "type": "function"
  }, {
    "id": 150,
    "text": "local dist = 0",
    "type": "statement:localassign"
  }, {
    "id": 151,
    "text": "local abs = type(e) == \"table\" and e.abs or math.abs",
    "type": "statement:localassign"
  }, {
    "id": 152,
    "text": "for i=1,#m1 do\r\n\t\tfor j=1,#m1[1] do\r\n\t\t\tdist = dist + abs(m1[i][j]-m2[i][j])\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 153,
    "text": "for j=1,#m1[1] do\r\n\t\t\tdist = dist + abs(m1[i][j]-m2[i][j])\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 154,
    "text": "dist = dist + abs(m1[i][j]-m2[i][j])",
    "type": "statement:assign"
  }, {
    "id": 155,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 156,
    "text": "function matrix.sqrt( m1, iters )\r\n\tassert(#m1 == #m1[1], \"matrix not square\")\r\n\tlocal iters = iters or math.huge\r\n\tlocal y = matrix.copy( m1 )\r\n\tlocal z = matrix(#y, 'I')\r\n\tlocal dist = math.huge\r\n\t-- iterate, and get the average error\r\n\tfor n=1,iters do\r\n\t\tlocal lasty,lastz = y,z\r\n\t\t-- calc square root\r\n\t\t-- y, z = (1/2)*(y + z^-1), (1/2)*(z + y^-1)\r\n\t\ty, z = matrix.divnum((matrix.add(y,matrix.invert(z))),2),\r\n\t\t\t\tmatrix.divnum((matrix.add(z,matrix.invert(y))),2)\r\n\t\tlocal dist1 = get_abs_avg(y,lasty)\r\n\t\tif iters == math.huge then\r\n\t\t\tif dist1 >= dist then\r\n\t\t\t\treturn lasty,lastz,get_abs_avg(matrix.mul(lasty,lasty),m1)\r\n\t\t\tend\r\n\t\tend\r\n\t\tdist = dist1\r\n\tend\r\n\treturn y,z,get_abs_avg(matrix.mul(y,y),m1)\r\nend",
    "type": "function"
  }, {
    "id": 157,
    "text": "local iters = iters or math.huge",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "local y = matrix.copy( m1 )",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "local z = matrix(#y, 'I')",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "local dist = math.huge",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "for n=1,iters do\r\n\t\tlocal lasty,lastz = y,z\r\n\t\t-- calc square root\r\n\t\t-- y, z = (1/2)*(y + z^-1), (1/2)*(z + y^-1)\r\n\t\ty, z = matrix.divnum((matrix.add(y,matrix.invert(z))),2),\r\n\t\t\t\tmatrix.divnum((matrix.add(z,matrix.invert(y))),2)\r\n\t\tlocal dist1 = get_abs_avg(y,lasty)\r\n\t\tif iters == math.huge then\r\n\t\t\tif dist1 >= dist then\r\n\t\t\t\treturn lasty,lastz,get_abs_avg(matrix.mul(lasty,lasty),m1)\r\n\t\t\tend\r\n\t\tend\r\n\t\tdist = dist1\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 162,
    "text": "local lasty,lastz = y,z",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "y, z = matrix.divnum((matrix.add(y,matrix.invert(z))),2),\r\n\t\t\t\tmatrix.divnum((matrix.add(z,matrix.invert(y))),2)",
    "type": "statement:assign"
  }, {
    "id": 164,
    "text": "local dist1 = get_abs_avg(y,lasty)",
    "type": "statement:localassign"
  }, {
    "id": 165,
    "text": "if iters == math.huge then\r\n\t\t\tif dist1 >= dist then\r\n\t\t\t\treturn lasty,lastz,get_abs_avg(matrix.mul(lasty,lasty),m1)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "if dist1 >= dist then\r\n\t\t\t\treturn lasty,lastz,get_abs_avg(matrix.mul(lasty,lasty),m1)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 167,
    "text": "dist = dist1",
    "type": "statement:assign"
  }, {
    "id": 168,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 169,
    "text": "function matrix.root( m1, root, iters )\r\n\tassert(#m1 == #m1[1], \"matrix not square\")\r\n\tlocal iters = iters or math.huge\r\n\tlocal mx = matrix.copy( m1 )\r\n\tlocal my = matrix.mul(mx:invert(),mx:pow(root-1))\r\n\tlocal dist = math.huge\r\n\t-- iterate, and get the average error\r\n\tfor n=1,iters do\r\n\t\tlocal lastx,lasty = mx,my\r\n\t\t-- calc root of matrix\r\n\t\t--mx,my = ((p-1)*mx + my^-1)/p,\r\n\t\t--\t((((p-1)*my + mx^-1)/p)*my^-1)^(p-2) *\r\n\t\t--\t((p-1)*my + mx^-1)/p\r\n\t\tmx,my = mx:mulnum(root-1):add(my:invert()):divnum(root),\r\n\t\t\tmy:mulnum(root-1):add(mx:invert()):divnum(root)\r\n\t\t\t\t:mul(my:invert():pow(root-2)):mul(my:mulnum(root-1)\r\n\t\t\t\t:add(mx:invert())):divnum(root)\r\n\t\tlocal dist1 = get_abs_avg(mx,lastx)\r\n\t\tif iters == math.huge then\r\n\t\t\tif dist1 >= dist then\r\n\t\t\t\treturn lastx,lasty,get_abs_avg(matrix.pow(lastx,root),m1)\r\n\t\t\tend\r\n\t\tend\r\n\t\tdist = dist1\r\n\tend\r\n\treturn mx,my,get_abs_avg(matrix.pow(mx,root),m1)\r\nend",
    "type": "function"
  }, {
    "id": 170,
    "text": "local mx = matrix.copy( m1 )",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "local my = matrix.mul(mx:invert(),mx:pow(root-1))",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "for n=1,iters do\r\n\t\tlocal lastx,lasty = mx,my\r\n\t\t-- calc root of matrix\r\n\t\t--mx,my = ((p-1)*mx + my^-1)/p,\r\n\t\t--\t((((p-1)*my + mx^-1)/p)*my^-1)^(p-2) *\r\n\t\t--\t((p-1)*my + mx^-1)/p\r\n\t\tmx,my = mx:mulnum(root-1):add(my:invert()):divnum(root),\r\n\t\t\tmy:mulnum(root-1):add(mx:invert()):divnum(root)\r\n\t\t\t\t:mul(my:invert():pow(root-2)):mul(my:mulnum(root-1)\r\n\t\t\t\t:add(mx:invert())):divnum(root)\r\n\t\tlocal dist1 = get_abs_avg(mx,lastx)\r\n\t\tif iters == math.huge then\r\n\t\t\tif dist1 >= dist then\r\n\t\t\t\treturn lastx,lasty,get_abs_avg(matrix.pow(lastx,root),m1)\r\n\t\t\tend\r\n\t\tend\r\n\t\tdist = dist1\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 173,
    "text": "local lastx,lasty = mx,my",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "mx,my = mx:mulnum(root-1):add(my:invert()):divnum(root),\r\n\t\t\tmy:mulnum(root-1):add(mx:invert()):divnum(root)\r\n\t\t\t\t:mul(my:invert():pow(root-2)):mul(my:mulnum(root-1)\r\n\t\t\t\t:add(mx:invert())):divnum(root)",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "local dist1 = get_abs_avg(mx,lastx)",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "if iters == math.huge then\r\n\t\t\tif dist1 >= dist then\r\n\t\t\t\treturn lastx,lasty,get_abs_avg(matrix.pow(lastx,root),m1)\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "if dist1 >= dist then\r\n\t\t\t\treturn lastx,lasty,get_abs_avg(matrix.pow(lastx,root),m1)\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 178,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 179,
    "text": "function matrix.normf(mtx)\r\n\tlocal mtype = matrix.type(mtx)\r\n\tlocal result = 0\r\n\tfor i = 1,#mtx do\r\n\tfor j = 1,#mtx[1] do\r\n\t\tlocal e = mtx[i][j]\r\n\t\tif mtype ~= \"number\" then e = e:abs() end\r\n\t\tresult = result + e^2\r\n\tend\r\n\tend\r\n\tlocal sqrt = (type(result) == \"number\") and math.sqrt or result.sqrt\r\n\treturn sqrt(result)\r\nend",
    "type": "function"
  }, {
    "id": 180,
    "text": "local mtype = matrix.type(mtx)",
    "type": "statement:localassign"
  }, {
    "id": 181,
    "text": "local result = 0",
    "type": "statement:localassign"
  }, {
    "id": 182,
    "text": "for i = 1,#mtx do\r\n\tfor j = 1,#mtx[1] do\r\n\t\tlocal e = mtx[i][j]\r\n\t\tif mtype ~= \"number\" then e = e:abs() end\r\n\t\tresult = result + e^2\r\n\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 183,
    "text": "for j = 1,#mtx[1] do\r\n\t\tlocal e = mtx[i][j]\r\n\t\tif mtype ~= \"number\" then e = e:abs() end\r\n\t\tresult = result + e^2\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 184,
    "text": "if mtype ~= \"number\" then e = e:abs() end",
    "type": "statement:if"
  }, {
    "id": 185,
    "text": "e = e:abs()",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "result = result + e^2",
    "type": "statement:assign"
  }, {
    "id": 187,
    "text": "local sqrt = (type(result) == \"number\") and math.sqrt or result.sqrt",
    "type": "statement:localassign"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function matrix.normmax(mtx)\r\n\tlocal abs = (matrix.type(mtx) == \"number\") and math.abs or mtx[1][1].abs\r\n\tlocal result = 0\r\n\tfor i = 1,#mtx do\r\n\tfor j = 1,#mtx[1] do\r\n\t\tlocal e = abs(mtx[i][j])\r\n\t\tif e > result then result = e end\r\n\tend\r\n\tend\r\n\treturn result\r\nend",
    "type": "function"
  }, {
    "id": 190,
    "text": "local abs = (matrix.type(mtx) == \"number\") and math.abs or mtx[1][1].abs",
    "type": "statement:localassign"
  }, {
    "id": 191,
    "text": "for i = 1,#mtx do\r\n\tfor j = 1,#mtx[1] do\r\n\t\tlocal e = abs(mtx[i][j])\r\n\t\tif e > result then result = e end\r\n\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 192,
    "text": "for j = 1,#mtx[1] do\r\n\t\tlocal e = abs(mtx[i][j])\r\n\t\tif e > result then result = e end\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 193,
    "text": "local e = abs(mtx[i][j])",
    "type": "statement:localassign"
  }, {
    "id": 194,
    "text": "if e > result then result = e end",
    "type": "statement:if"
  }, {
    "id": 195,
    "text": "result = e",
    "type": "statement:assign"
  }, {
    "id": 196,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 197,
    "text": "function( num,mult )\r\n\treturn math.floor( num * mult + 0.5 ) / mult\r\nend",
    "type": "function"
  }, {
    "id": 198,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 199,
    "text": "function( t,mult )\r\n\tfor i,v in ipairs(t) do\r\n\t\tt[i] = math.floor( v * mult + 0.5 ) / mult\r\n\tend\r\n\treturn t\r\nend",
    "type": "function"
  }, {
    "id": 200,
    "text": "for i,v in ipairs(t) do\r\n\t\tt[i] = math.floor( v * mult + 0.5 ) / mult\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 201,
    "text": "t[i] = math.floor( v * mult + 0.5 ) / mult",
    "type": "statement:assign"
  }, {
    "id": 202,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 203,
    "text": "function matrix.round( mtx, idp )\r\n\tlocal mult = 10^( idp or 0 )\r\n\tlocal fround = matrix.type( mtx ) == \"number\" and numround or tround\r\n\tfor i = 1,#mtx do\r\n\t\tfor j = 1,#mtx[1] do\r\n\t\t\tmtx[i][j] = fround(mtx[i][j],mult)\r\n\t\tend\r\n\tend\r\n\treturn mtx\r\nend",
    "type": "function"
  }, {
    "id": 204,
    "text": "local mult = 10^( idp or 0 )",
    "type": "statement:localassign"
  }, {
    "id": 205,
    "text": "local fround = matrix.type( mtx ) == \"number\" and numround or tround",
    "type": "statement:localassign"
  }, {
    "id": 206,
    "text": "for i = 1,#mtx do\r\n\t\tfor j = 1,#mtx[1] do\r\n\t\t\tmtx[i][j] = fround(mtx[i][j],mult)\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 207,
    "text": "for j = 1,#mtx[1] do\r\n\t\t\tmtx[i][j] = fround(mtx[i][j],mult)\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 208,
    "text": "mtx[i][j] = fround(mtx[i][j],mult)",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 210,
    "text": "function( _,start,stop,idp )\r\n\treturn math.random( start,stop ) / idp\r\nend",
    "type": "function"
  }, {
    "id": 211,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 212,
    "text": "function( t,start,stop,idp )\r\n\tfor i in ipairs(t) do\r\n\t\tt[i] = math.random( start,stop ) / idp\r\n\tend\r\n\treturn t\r\nend",
    "type": "function"
  }, {
    "id": 213,
    "text": "for i in ipairs(t) do\r\n\t\tt[i] = math.random( start,stop ) / idp\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 214,
    "text": "t[i] = math.random( start,stop ) / idp",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 216,
    "text": "function matrix.random( mtx,start,stop,idp )\r\n\tlocal start,stop,idp = start or -10,stop or 10,idp or 1\r\n\tlocal ffill = matrix.type( mtx ) == \"number\" and numfill or tfill\r\n\tfor i = 1,#mtx do\r\n\t\tfor j = 1,#mtx[1] do\r\n\t\t\tmtx[i][j] = ffill( mtx[i][j], start, stop, idp )\r\n\t\tend\r\n\tend\r\n\treturn mtx\r\nend",
    "type": "function"
  }, {
    "id": 217,
    "text": "local start,stop,idp = start or -10,stop or 10,idp or 1",
    "type": "statement:localassign"
  }, {
    "id": 218,
    "text": "local ffill = matrix.type( mtx ) == \"number\" and numfill or tfill",
    "type": "statement:localassign"
  }, {
    "id": 219,
    "text": "for i = 1,#mtx do\r\n\t\tfor j = 1,#mtx[1] do\r\n\t\t\tmtx[i][j] = ffill( mtx[i][j], start, stop, idp )\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 220,
    "text": "for j = 1,#mtx[1] do\r\n\t\t\tmtx[i][j] = ffill( mtx[i][j], start, stop, idp )\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 221,
    "text": "mtx[i][j] = ffill( mtx[i][j], start, stop, idp )",
    "type": "statement:assign"
  }, {
    "id": 222,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 223,
    "text": "function matrix.type( mtx )\r\n\tlocal e = mtx[1][1]\r\n\tif type(e) == \"table\" then\r\n\t\tif e.type then\r\n\t\t\treturn e:type()\r\n\t\tend\r\n\t\treturn \"tensor\"\r\n\tend\r\n\treturn \"number\"\r\nend",
    "type": "function"
  }, {
    "id": 224,
    "text": "if type(e) == \"table\" then\r\n\t\tif e.type then\r\n\t\t\treturn e:type()\r\n\t\tend\r\n\t\treturn \"tensor\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 225,
    "text": "if e.type then\r\n\t\t\treturn e:type()\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 226,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 227,
    "text": "function( num )\r\n\treturn num\r\nend",
    "type": "function"
  }, {
    "id": 228,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 229,
    "text": "function( t )\r\n\tlocal newt = setmetatable( {}, getmetatable( t ) )\r\n\tfor i,v in ipairs( t ) do\r\n\t\tnewt[i] = v\r\n\tend\r\n\treturn newt\r\nend",
    "type": "function"
  }, {
    "id": 230,
    "text": "local newt = setmetatable( {}, getmetatable( t ) )",
    "type": "statement:localassign"
  }, {
    "id": 231,
    "text": "for i,v in ipairs( t ) do\r\n\t\tnewt[i] = v\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 232,
    "text": "newt[i] = v",
    "type": "statement:assign"
  }, {
    "id": 233,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 234,
    "text": "function matrix.copy( m1 )\r\n\tlocal docopy = matrix.type( m1 ) == \"number\" and num_copy or t_copy\r\n\tlocal mtx = {}\r\n\tfor i = 1,#m1[1] do\r\n\t\tmtx[i] = {}\r\n\t\tfor j = 1,#m1 do\r\n\t\t\tmtx[i][j] = docopy( m1[i][j] )\r\n\t\tend\r\n\tend\r\n\treturn setmetatable( mtx, matrix_meta )\r\nend",
    "type": "function"
  }, {
    "id": 235,
    "text": "local docopy = matrix.type( m1 ) == \"number\" and num_copy or t_copy",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "for i = 1,#m1[1] do\r\n\t\tmtx[i] = {}\r\n\t\tfor j = 1,#m1 do\r\n\t\t\tmtx[i][j] = docopy( m1[i][j] )\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 237,
    "text": "for j = 1,#m1 do\r\n\t\t\tmtx[i][j] = docopy( m1[i][j] )\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 238,
    "text": "mtx[i][j] = docopy( m1[i][j] )",
    "type": "statement:assign"
  }, {
    "id": 239,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 240,
    "text": "function matrix.transpose( m1 )\r\n\tlocal docopy = matrix.type( m1 ) == \"number\" and num_copy or t_copy\r\n\tlocal mtx = {}\r\n\tfor i = 1,#m1[1] do\r\n\t\tmtx[i] = {}\r\n\t\tfor j = 1,#m1 do\r\n\t\t\tmtx[i][j] = docopy( m1[j][i] )\r\n\t\tend\r\n\tend\r\n\treturn setmetatable( mtx, matrix_meta )\r\nend",
    "type": "function"
  }, {
    "id": 241,
    "text": "for i = 1,#m1[1] do\r\n\t\tmtx[i] = {}\r\n\t\tfor j = 1,#m1 do\r\n\t\t\tmtx[i][j] = docopy( m1[j][i] )\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 242,
    "text": "for j = 1,#m1 do\r\n\t\t\tmtx[i][j] = docopy( m1[j][i] )\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 243,
    "text": "mtx[i][j] = docopy( m1[j][i] )",
    "type": "statement:assign"
  }, {
    "id": 244,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 245,
    "text": "function matrix.subm( m1,i1,j1,i2,j2 )\r\n\tlocal docopy = matrix.type( m1 ) == \"number\" and num_copy or t_copy\r\n\tlocal mtx = {}\r\n\tfor i = i1,i2 do\r\n\t\tlocal _i = i-i1+1\r\n\t\tmtx[_i] = {}\r\n\t\tfor j = j1,j2 do\r\n\t\t\tlocal _j = j-j1+1\r\n\t\t\tmtx[_i][_j] = docopy( m1[i][j] )\r\n\t\tend\r\n\tend\r\n\treturn setmetatable( mtx, matrix_meta )\r\nend",
    "type": "function"
  }, {
    "id": 246,
    "text": "for i = i1,i2 do\r\n\t\tlocal _i = i-i1+1\r\n\t\tmtx[_i] = {}\r\n\t\tfor j = j1,j2 do\r\n\t\t\tlocal _j = j-j1+1\r\n\t\t\tmtx[_i][_j] = docopy( m1[i][j] )\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 247,
    "text": "local _i = i-i1+1",
    "type": "statement:localassign"
  }, {
    "id": 248,
    "text": "mtx[_i] = {}",
    "type": "statement:assign"
  }, {
    "id": 249,
    "text": "for j = j1,j2 do\r\n\t\t\tlocal _j = j-j1+1\r\n\t\t\tmtx[_i][_j] = docopy( m1[i][j] )\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 250,
    "text": "local _j = j-j1+1",
    "type": "statement:localassign"
  }, {
    "id": 251,
    "text": "mtx[_i][_j] = docopy( m1[i][j] )",
    "type": "statement:assign"
  }, {
    "id": 252,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 253,
    "text": "function matrix.concath( m1,m2 )\r\n\tassert(#m1 == #m2, \"matrix size mismatch\")\r\n\tlocal docopy = matrix.type( m1 ) == \"number\" and num_copy or t_copy\r\n\tlocal mtx = {}\r\n\tlocal offset = #m1[1]\r\n\tfor i = 1,#m1 do\r\n\t\tmtx[i] = {}\r\n\t\tfor j = 1,offset do\r\n\t\t\tmtx[i][j] = docopy( m1[i][j] )\r\n\t\tend\r\n\t\tfor j = 1,#m2[1] do\r\n\t\t\tmtx[i][j+offset] = docopy( m2[i][j] )\r\n\t\tend\r\n\tend\r\n\treturn setmetatable( mtx, matrix_meta )\r\nend",
    "type": "function"
  }, {
    "id": 254,
    "text": "assert(#m1 == #m2, \"matrix size mismatch\")",
    "type": "statement:functioncall"
  }, {
    "id": 255,
    "text": "local offset = #m1[1]",
    "type": "statement:localassign"
  }, {
    "id": 256,
    "text": "for i = 1,#m1 do\r\n\t\tmtx[i] = {}\r\n\t\tfor j = 1,offset do\r\n\t\t\tmtx[i][j] = docopy( m1[i][j] )\r\n\t\tend\r\n\t\tfor j = 1,#m2[1] do\r\n\t\t\tmtx[i][j+offset] = docopy( m2[i][j] )\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 257,
    "text": "for j = 1,offset do\r\n\t\t\tmtx[i][j] = docopy( m1[i][j] )\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 258,
    "text": "for j = 1,#m2[1] do\r\n\t\t\tmtx[i][j+offset] = docopy( m2[i][j] )\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 259,
    "text": "mtx[i][j+offset] = docopy( m2[i][j] )",
    "type": "statement:assign"
  }, {
    "id": 260,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 261,
    "text": "function matrix.concatv( m1,m2 )\r\n\tassert(#m1[1] == #m2[1], \"matrix size mismatch\")\r\n\tlocal docopy = matrix.type( m1 ) == \"number\" and num_copy or t_copy\r\n\tlocal mtx = {}\r\n\tfor i = 1,#m1 do\r\n\t\tmtx[i] = {}\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tmtx[i][j] = docopy( m1[i][j] )\r\n\t\tend\r\n\tend\r\n\tlocal offset = #mtx\r\n\tfor i = 1,#m2 do\r\n\t\tlocal _i = i + offset\r\n\t\tmtx[_i] = {}\r\n\t\tfor j = 1,#m2[1] do\r\n\t\t\tmtx[_i][j] = docopy( m2[i][j] )\r\n\t\tend\r\n\tend\r\n\treturn setmetatable( mtx, matrix_meta )\r\nend",
    "type": "function"
  }, {
    "id": 262,
    "text": "assert(#m1[1] == #m2[1], \"matrix size mismatch\")",
    "type": "statement:functioncall"
  }, {
    "id": 263,
    "text": "for i = 1,#m1 do\r\n\t\tmtx[i] = {}\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tmtx[i][j] = docopy( m1[i][j] )\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 264,
    "text": "for j = 1,#m1[1] do\r\n\t\t\tmtx[i][j] = docopy( m1[i][j] )\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 265,
    "text": "local offset = #mtx",
    "type": "statement:localassign"
  }, {
    "id": 266,
    "text": "for i = 1,#m2 do\r\n\t\tlocal _i = i + offset\r\n\t\tmtx[_i] = {}\r\n\t\tfor j = 1,#m2[1] do\r\n\t\t\tmtx[_i][j] = docopy( m2[i][j] )\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 267,
    "text": "local _i = i + offset",
    "type": "statement:localassign"
  }, {
    "id": 268,
    "text": "for j = 1,#m2[1] do\r\n\t\t\tmtx[_i][j] = docopy( m2[i][j] )\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 269,
    "text": "mtx[_i][j] = docopy( m2[i][j] )",
    "type": "statement:assign"
  }, {
    "id": 270,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 271,
    "text": "function matrix.rotl( m1 )\r\n\tlocal mtx = matrix:new( #m1[1],#m1 )\r\n\tlocal docopy = matrix.type( m1 ) == \"number\" and num_copy or t_copy\r\n\tfor i = 1,#m1 do\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tmtx[#m1[1]-j+1][i] = docopy( m1[i][j] )\r\n\t\tend\r\n\tend\r\n\treturn mtx\r\nend",
    "type": "function"
  }, {
    "id": 272,
    "text": "local mtx = matrix:new( #m1[1],#m1 )",
    "type": "statement:localassign"
  }, {
    "id": 273,
    "text": "for i = 1,#m1 do\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tmtx[#m1[1]-j+1][i] = docopy( m1[i][j] )\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 274,
    "text": "for j = 1,#m1[1] do\r\n\t\t\tmtx[#m1[1]-j+1][i] = docopy( m1[i][j] )\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 275,
    "text": "mtx[#m1[1]-j+1][i] = docopy( m1[i][j] )",
    "type": "statement:assign"
  }, {
    "id": 276,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 277,
    "text": "function matrix.rotr( m1 )\r\n\tlocal mtx = matrix:new( #m1[1],#m1 )\r\n\tlocal docopy = matrix.type( m1 ) == \"number\" and num_copy or t_copy\r\n\tfor i = 1,#m1 do\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tmtx[j][#m1-i+1] = docopy( m1[i][j] )\r\n\t\tend\r\n\tend\r\n\treturn mtx\r\nend",
    "type": "function"
  }, {
    "id": 278,
    "text": "for i = 1,#m1 do\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tmtx[j][#m1-i+1] = docopy( m1[i][j] )\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 279,
    "text": "for j = 1,#m1[1] do\r\n\t\t\tmtx[j][#m1-i+1] = docopy( m1[i][j] )\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 280,
    "text": "mtx[j][#m1-i+1] = docopy( m1[i][j] )",
    "type": "statement:assign"
  }, {
    "id": 281,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 282,
    "text": "local function tensor_tostring( t,fstr )\r\n\tif not fstr then return \"[\"..table.concat(t,\",\")..\"]\" end\r\n\tlocal tval = {}\r\n\tfor i,v in ipairs( t ) do\r\n\t\ttval[i] = string.format( fstr,v )\r\n\tend\r\n\treturn \"[\"..table.concat(tval,\",\")..\"]\"\r\nend",
    "type": "function"
  }, {
    "id": 283,
    "text": "if not fstr then return \"[\"..table.concat(t,\",\")..\"]\" end",
    "type": "statement:if"
  }, {
    "id": 284,
    "text": "local tval = {}",
    "type": "statement:localassign"
  }, {
    "id": 285,
    "text": "for i,v in ipairs( t ) do\r\n\t\ttval[i] = string.format( fstr,v )\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 286,
    "text": "tval[i] = string.format( fstr,v )",
    "type": "statement:assign"
  }, {
    "id": 287,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 288,
    "text": "local function number_tostring( e,fstr )\r\n\treturn fstr and string.format( fstr,e ) or e\r\nend",
    "type": "function"
  }, {
    "id": 289,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 290,
    "text": "function matrix.tostring( mtx, formatstr )\r\n\tlocal ts = {}\r\n\tlocal mtype = matrix.type( mtx )\r\n\tlocal e = mtx[1][1]\r\n\tlocal tostring = mtype == \"tensor\" and tensor_tostring or\r\n\t      type(e) == \"table\" and e.tostring or number_tostring\r\n\tfor i = 1,#mtx do\r\n\t\tlocal tstr = {}\r\n\t\tfor j = 1,#mtx[1] do\r\n\t\t\ttstr[j] = tostring(mtx[i][j],formatstr)\r\n\t\tend\r\n\t\tts[i] = table.concat(tstr, \"\\t\")\r\n\tend\r\n\treturn table.concat(ts, \"\\n\")\r\nend",
    "type": "function"
  }, {
    "id": 291,
    "text": "local ts = {}",
    "type": "statement:localassign"
  }, {
    "id": 292,
    "text": "local mtype = matrix.type( mtx )",
    "type": "statement:localassign"
  }, {
    "id": 293,
    "text": "local tostring = mtype == \"tensor\" and tensor_tostring or\r\n\t      type(e) == \"table\" and e.tostring or number_tostring",
    "type": "statement:localassign"
  }, {
    "id": 294,
    "text": "for i = 1,#mtx do\r\n\t\tlocal tstr = {}\r\n\t\tfor j = 1,#mtx[1] do\r\n\t\t\ttstr[j] = tostring(mtx[i][j],formatstr)\r\n\t\tend\r\n\t\tts[i] = table.concat(tstr, \"\\t\")\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 295,
    "text": "local tstr = {}",
    "type": "statement:localassign"
  }, {
    "id": 296,
    "text": "for j = 1,#mtx[1] do\r\n\t\t\ttstr[j] = tostring(mtx[i][j],formatstr)\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 297,
    "text": "tstr[j] = tostring(mtx[i][j],formatstr)",
    "type": "statement:assign"
  }, {
    "id": 298,
    "text": "ts[i] = table.concat(tstr, \"\\t\")",
    "type": "statement:assign"
  }, {
    "id": 299,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 300,
    "text": "function matrix.print( ... )\r\n\tprint( matrix.tostring( ... ) )\r\nend",
    "type": "function"
  }, {
    "id": 301,
    "text": "print( matrix.tostring( ... ) )",
    "type": "statement:functioncall"
  }, {
    "id": 302,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 303,
    "text": "function matrix.latex( mtx, align )\r\n\t-- align : option to align the elements\r\n\t--\t\tc = center; l = left; r = right\r\n\t--\t\t\\usepackage{dcolumn}; D{.}{,}{-1}; aligns number by . replaces it with ,\r\n\tlocal align = align or \"c\"\r\n\tlocal str = \"$\\\\left( \\\\begin{array}{\"..string.rep( align, #mtx[1] )..\"}\\n\"\r\n\tlocal getstr = matrix.type( mtx ) == \"tensor\" and tensor_tostring or number_tostring\r\n\tfor i = 1,#mtx do\r\n\t\tstr = str..\"\\t\"..getstr(mtx[i][1])\r\n\t\tfor j = 2,#mtx[1] do\r\n\t\t\tstr = str..\" & \"..getstr(mtx[i][j])\r\n\t\tend\r\n\t\t-- close line\r\n\t\tif i == #mtx then\r\n\t\t\tstr = str..\"\\n\"\r\n\t\telse\r\n\t\t\tstr = str..\" \\\\\\\\\\n\"\r\n\t\tend\r\n\tend\r\n\treturn str..\"\\\\end{array} \\\\right)$\"\r\nend",
    "type": "function"
  }, {
    "id": 304,
    "text": "local align = align or \"c\"",
    "type": "statement:localassign"
  }, {
    "id": 305,
    "text": "local str = \"$\\\\left( \\\\begin{array}{\"..string.rep( align, #mtx[1] )..\"}\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 306,
    "text": "local getstr = matrix.type( mtx ) == \"tensor\" and tensor_tostring or number_tostring",
    "type": "statement:localassign"
  }, {
    "id": 307,
    "text": "for i = 1,#mtx do\r\n\t\tstr = str..\"\\t\"..getstr(mtx[i][1])\r\n\t\tfor j = 2,#mtx[1] do\r\n\t\t\tstr = str..\" & \"..getstr(mtx[i][j])\r\n\t\tend\r\n\t\t-- close line\r\n\t\tif i == #mtx then\r\n\t\t\tstr = str..\"\\n\"\r\n\t\telse\r\n\t\t\tstr = str..\" \\\\\\\\\\n\"\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 308,
    "text": "str = str..\"\\t\"..getstr(mtx[i][1])",
    "type": "statement:assign"
  }, {
    "id": 309,
    "text": "for j = 2,#mtx[1] do\r\n\t\t\tstr = str..\" & \"..getstr(mtx[i][j])\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 310,
    "text": "str = str..\" & \"..getstr(mtx[i][j])",
    "type": "statement:assign"
  }, {
    "id": 311,
    "text": "if i == #mtx then\r\n\t\t\tstr = str..\"\\n\"\r\n\t\telse\r\n\t\t\tstr = str..\" \\\\\\\\\\n\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 312,
    "text": "str = str..\"\\n\"",
    "type": "statement:assign"
  }, {
    "id": 313,
    "text": "str = str..\" \\\\\\\\\\n\"",
    "type": "statement:assign"
  }, {
    "id": 314,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 315,
    "text": "function matrix.rows( mtx )\r\n\treturn #mtx\r\nend",
    "type": "function"
  }, {
    "id": 316,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 317,
    "text": "function matrix.columns( mtx )\r\n\treturn #mtx[1]\r\nend",
    "type": "function"
  }, {
    "id": 318,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 319,
    "text": "function matrix.size( mtx )\r\n\tif matrix.type( mtx ) == \"tensor\" then\r\n\t\treturn #mtx,#mtx[1],#mtx[1][1]\r\n\tend\r\n\treturn #mtx,#mtx[1]\r\nend",
    "type": "function"
  }, {
    "id": 320,
    "text": "if matrix.type( mtx ) == \"tensor\" then\r\n\t\treturn #mtx,#mtx[1],#mtx[1][1]\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 321,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 322,
    "text": "function matrix.getelement( mtx,i,j )\r\n\tif mtx[i] and mtx[i][j] then\r\n\t\treturn mtx[i][j]\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 323,
    "text": "if mtx[i] and mtx[i][j] then\r\n\t\treturn mtx[i][j]\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 324,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 325,
    "text": "function matrix.setelement( mtx,i,j,value )\r\n\tif matrix.getelement( mtx,i,j ) then\r\n\t\t-- check if value type is number\r\n\t\tmtx[i][j] = value\r\n\t\treturn 1\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 326,
    "text": "if matrix.getelement( mtx,i,j ) then\r\n\t\t-- check if value type is number\r\n\t\tmtx[i][j] = value\r\n\t\treturn 1\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 327,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 328,
    "text": "function matrix.ipairs( mtx )\r\n\tlocal i,j,rows,columns = 1,0,#mtx,#mtx[1]\r\n\tlocal function iter()\r\n\t\tj = j + 1\r\n\t\tif j > columns then -- return first element from next row\r\n\t\t\ti,j = i + 1,1\r\n\t\tend\r\n\t\tif i <= rows then\r\n\t\t\treturn i,j\r\n\t\tend\r\n\tend\r\n\treturn iter\r\nend",
    "type": "function"
  }, {
    "id": 329,
    "text": "local i,j,rows,columns = 1,0,#mtx,#mtx[1]",
    "type": "statement:localassign"
  }, {
    "id": 330,
    "text": "local function iter()\r\n\t\tj = j + 1\r\n\t\tif j > columns then -- return first element from next row\r\n\t\t\ti,j = i + 1,1\r\n\t\tend\r\n\t\tif i <= rows then\r\n\t\t\treturn i,j\r\n\t\tend\r\n\tend",
    "type": "statement:localfunction"
  }, {
    "id": 331,
    "text": "j = j + 1",
    "type": "statement:assign"
  }, {
    "id": 332,
    "text": "if j > columns then -- return first element from next row\r\n\t\t\ti,j = i + 1,1\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 333,
    "text": "i,j = i + 1,1",
    "type": "statement:assign"
  }, {
    "id": 334,
    "text": "if i <= rows then\r\n\t\t\treturn i,j\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 335,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 336,
    "text": "local function iter()\r\n\t\tj = j + 1\r\n\t\tif j > columns then -- return first element from next row\r\n\t\t\ti,j = i + 1,1\r\n\t\tend\r\n\t\tif i <= rows then\r\n\t\t\treturn i,j\r\n\t\tend\r\n\tend",
    "type": "function"
  }, {
    "id": 337,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 338,
    "text": "function matrix.scalar( m1, m2 )\r\n\treturn m1[1][1]*m2[1][1] + m1[2][1]*m2[2][1] +  m1[3][1]*m2[3][1]\r\nend",
    "type": "function"
  }, {
    "id": 339,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 340,
    "text": "function matrix.cross( m1, m2 )\r\n\tlocal mtx = {}\r\n\tmtx[1] = { m1[2][1]*m2[3][1] - m1[3][1]*m2[2][1] }\r\n\tmtx[2] = { m1[3][1]*m2[1][1] - m1[1][1]*m2[3][1] }\r\n\tmtx[3] = { m1[1][1]*m2[2][1] - m1[2][1]*m2[1][1] }\r\n\treturn setmetatable( mtx, matrix_meta )\r\nend",
    "type": "function"
  }, {
    "id": 341,
    "text": "mtx[1] = { m1[2][1]*m2[3][1] - m1[3][1]*m2[2][1] }",
    "type": "statement:assign"
  }, {
    "id": 342,
    "text": "mtx[2] = { m1[3][1]*m2[1][1] - m1[1][1]*m2[3][1] }",
    "type": "statement:assign"
  }, {
    "id": 343,
    "text": "mtx[3] = { m1[1][1]*m2[2][1] - m1[2][1]*m2[1][1] }",
    "type": "statement:assign"
  }, {
    "id": 344,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 345,
    "text": "function matrix.len( m1 )\r\n\treturn math.sqrt( m1[1][1]^2 + m1[2][1]^2 + m1[3][1]^2 )\r\nend",
    "type": "function"
  }, {
    "id": 346,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 347,
    "text": "function matrix.replace( m1, func, ... )\r\n\tlocal mtx = {}\r\n\tfor i = 1,#m1 do\r\n\t\tlocal m1i = m1[i]\r\n\t\tlocal mtxi = {}\r\n\t\tfor j = 1,#m1i do\r\n\t\t\tmtxi[j] = func( m1i[j], ... )\r\n\t\tend\r\n\t\tmtx[i] = mtxi\r\n\tend\r\n\treturn setmetatable( mtx, matrix_meta )\r\nend",
    "type": "function"
  }, {
    "id": 348,
    "text": "for i = 1,#m1 do\r\n\t\tlocal m1i = m1[i]\r\n\t\tlocal mtxi = {}\r\n\t\tfor j = 1,#m1i do\r\n\t\t\tmtxi[j] = func( m1i[j], ... )\r\n\t\tend\r\n\t\tmtx[i] = mtxi\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 349,
    "text": "local m1i = m1[i]",
    "type": "statement:localassign"
  }, {
    "id": 350,
    "text": "for j = 1,#m1i do\r\n\t\t\tmtxi[j] = func( m1i[j], ... )\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 351,
    "text": "mtxi[j] = func( m1i[j], ... )",
    "type": "statement:assign"
  }, {
    "id": 352,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 353,
    "text": "function matrix.elementstostrings( mtx )\r\n\tlocal e = mtx[1][1]\r\n\tlocal tostring = type(e) == \"table\" and e.tostring or tostring\r\n\treturn matrix.replace(mtx, tostring)\r\nend",
    "type": "function"
  }, {
    "id": 354,
    "text": "local tostring = type(e) == \"table\" and e.tostring or tostring",
    "type": "statement:localassign"
  }, {
    "id": 355,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 356,
    "text": "function matrix.solve( m1 )\r\n\tassert( matrix.type( m1 ) == \"symbol\", \"matrix not of type 'symbol'\" )\r\n\tlocal mtx = {}\r\n\tfor i = 1,#m1 do\r\n\t\tmtx[i] = {}\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tmtx[i][j] = tonumber( loadstring( \"return \"..m1[i][j][1] )() )\r\n\t\tend\r\n\tend\r\n\treturn setmetatable( mtx, matrix_meta )\r\nend",
    "type": "function"
  }, {
    "id": 357,
    "text": "assert( matrix.type( m1 ) == \"symbol\", \"matrix not of type 'symbol'\" )",
    "type": "statement:functioncall"
  }, {
    "id": 358,
    "text": "for i = 1,#m1 do\r\n\t\tmtx[i] = {}\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tmtx[i][j] = tonumber( loadstring( \"return \"..m1[i][j][1] )() )\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 359,
    "text": "for j = 1,#m1[1] do\r\n\t\t\tmtx[i][j] = tonumber( loadstring( \"return \"..m1[i][j][1] )() )\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 360,
    "text": "mtx[i][j] = tonumber( loadstring( \"return \"..m1[i][j][1] )() )",
    "type": "statement:assign"
  }, {
    "id": 361,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 362,
    "text": "function( ... )\r\n\treturn matrix.add( ... )\r\nend",
    "type": "function"
  }, {
    "id": 363,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 364,
    "text": "function( ... )\r\n\treturn matrix.sub( ... )\r\nend",
    "type": "function"
  }, {
    "id": 365,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 366,
    "text": "function( m1,m2 )\r\n\tif getmetatable( m1 ) ~= matrix_meta then\r\n\t\treturn matrix.mulnum( m2,m1 )\r\n\telseif getmetatable( m2 ) ~= matrix_meta then\r\n\t\treturn matrix.mulnum( m1,m2 )\r\n\tend\r\n\treturn matrix.mul( m1,m2 )\r\nend",
    "type": "function"
  }, {
    "id": 367,
    "text": "if getmetatable( m1 ) ~= matrix_meta then\r\n\t\treturn matrix.mulnum( m2,m1 )\r\n\telseif getmetatable( m2 ) ~= matrix_meta then\r\n\t\treturn matrix.mulnum( m1,m2 )\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 368,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 369,
    "text": "function( m1,m2 )\r\n\tif getmetatable( m1 ) ~= matrix_meta then\r\n\t\treturn matrix.mulnum( matrix.invert(m2),m1 )\r\n\telseif getmetatable( m2 ) ~= matrix_meta then\r\n\t\treturn matrix.divnum( m1,m2 )\r\n\tend\r\n\treturn matrix.div( m1,m2 )\r\nend",
    "type": "function"
  }, {
    "id": 370,
    "text": "if getmetatable( m1 ) ~= matrix_meta then\r\n\t\treturn matrix.mulnum( matrix.invert(m2),m1 )\r\n\telseif getmetatable( m2 ) ~= matrix_meta then\r\n\t\treturn matrix.divnum( m1,m2 )\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 371,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 372,
    "text": "function( mtx )\r\n\treturn matrix.mulnum( mtx,-1 )\r\nend",
    "type": "function"
  }, {
    "id": 373,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 374,
    "text": "function( m1, opt )\r\n\treturn option[opt] and option[opt]( m1 ) or matrix.pow( m1,opt )\r\nend",
    "type": "function"
  }, {
    "id": 375,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 376,
    "text": "function( m1, m2 )\r\n\t-- check same type\r\n\tif matrix.type( m1 ) ~= matrix.type( m2 ) then\r\n\t\treturn false\r\n\tend\r\n\t-- check same size\r\n\tif #m1 ~= #m2 or #m1[1] ~= #m2[1] then\r\n\t\treturn false\r\n\tend\r\n\t-- check elements equal\r\n\tfor i = 1,#m1 do\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tif m1[i][j] ~= m2[i][j] then\r\n\t\t\t\treturn false\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn true\r\nend",
    "type": "function"
  }, {
    "id": 377,
    "text": "if matrix.type( m1 ) ~= matrix.type( m2 ) then\r\n\t\treturn false\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 378,
    "text": "if #m1 ~= #m2 or #m1[1] ~= #m2[1] then\r\n\t\treturn false\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 379,
    "text": "for i = 1,#m1 do\r\n\t\tfor j = 1,#m1[1] do\r\n\t\t\tif m1[i][j] ~= m2[i][j] then\r\n\t\t\t\treturn false\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 380,
    "text": "for j = 1,#m1[1] do\r\n\t\t\tif m1[i][j] ~= m2[i][j] then\r\n\t\t\t\treturn false\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 381,
    "text": "if m1[i][j] ~= m2[i][j] then\r\n\t\t\t\treturn false\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 382,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 383,
    "text": "function( ... )\r\n\treturn matrix.tostring( ... )\r\nend",
    "type": "function"
  }, {
    "id": 384,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 385,
    "text": "function( ... )\r\n\tmatrix.print( ... )\r\nend",
    "type": "function"
  }, {
    "id": 386,
    "text": "matrix.print( ... )",
    "type": "statement:functioncall"
  }, {
    "id": 387,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 388,
    "text": "function symbol_meta.new(o)\r\n\treturn setmetatable({tostring(o)}, symbol_meta)\r\nend",
    "type": "function"
  }, {
    "id": 389,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 390,
    "text": "function symbol_meta.tostring( e,fstr )\r\n\treturn string.format( fstr,e[1] )\r\nend",
    "type": "function"
  }, {
    "id": 391,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 392,
    "text": "function symbol_meta:type()\r\n\tif getmetatable(self) == symbol_meta then\r\n\t\treturn \"symbol\"\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 393,
    "text": "if getmetatable(self) == symbol_meta then\r\n\t\treturn \"symbol\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 394,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 395,
    "text": "function symbol_meta:gsub(from, to)\r\n\treturn symbol.to( string.gsub( self[1],from,to ) )\r\nend",
    "type": "function"
  }, {
    "id": 396,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 397,
    "text": "function symbol_meta.makereplacer( ... )\r\n\tlocal tosub = {}\r\n\tlocal args = {...}\r\n\tfor i = 1,#args,2 do\r\n\t\ttosub[args[i]] = args[i+1]\r\n    end\r\n\tlocal function func( a ) return tosub[a] or a end\r\n\treturn function(sym)\r\n\t\treturn symbol.to( string.gsub( sym[1], \"%a\", func ) )\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 398,
    "text": "local tosub = {}",
    "type": "statement:localassign"
  }, {
    "id": 399,
    "text": "local args = {...}",
    "type": "statement:localassign"
  }, {
    "id": 400,
    "text": "for i = 1,#args,2 do\r\n\t\ttosub[args[i]] = args[i+1]\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 401,
    "text": "tosub[args[i]] = args[i+1]",
    "type": "statement:assign"
  }, {
    "id": 402,
    "text": "local function func( a ) return tosub[a] or a end",
    "type": "statement:localfunction"
  }, {
    "id": 403,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 404,
    "text": "local function func( a ) return tosub[a] or a end",
    "type": "function"
  }, {
    "id": 405,
    "text": "function symbol_meta.abs(a)\r\n\treturn symbol.to(\"(\" .. a[1] .. \"):abs()\")\r\nend",
    "type": "function"
  }, {
    "id": 406,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 407,
    "text": "function symbol_meta.sqrt(a)\r\n\treturn symbol.to(\"(\" .. a[1] .. \"):sqrt()\")\r\nend",
    "type": "function"
  }, {
    "id": 408,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 409,
    "text": "function symbol_meta.__add(a,b)\r\n\treturn symbol.to(a .. \"+\" .. b)\r\nend",
    "type": "function"
  }, {
    "id": 410,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 411,
    "text": "function symbol_meta.__sub(a,b)\r\n\treturn symbol.to(a .. \"-\" .. b)\r\nend",
    "type": "function"
  }, {
    "id": 412,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 413,
    "text": "function symbol_meta.__mul(a,b)\r\n\treturn symbol.to(\"(\" .. a .. \")*(\" .. b .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 414,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 415,
    "text": "function symbol_meta.__div(a,b)\r\n\treturn symbol.to(\"(\" .. a .. \")/(\" .. b .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 416,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 417,
    "text": "function symbol_meta.__pow(a,b)\r\n\treturn symbol.to(\"(\" .. a .. \")^(\" .. b .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 418,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 419,
    "text": "function symbol_meta.__eq(a,b)\r\n\treturn a[1] == b[1]\r\nend",
    "type": "function"
  }, {
    "id": 420,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 421,
    "text": "function symbol_meta.__tostring(a)\r\n\treturn a[1]\r\nend",
    "type": "function"
  }, {
    "id": 422,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 423,
    "text": "function symbol_meta.__concat(a,b)\r\n\treturn tostring(a) .. tostring(b)\r\nend",
    "type": "function"
  }, {
    "id": 424,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 425,
    "text": "function( ... ) return matrix.new( ... ) end",
    "type": "function"
  }, {
    "id": 426,
    "text": "function( m1 ) return matrix.conjugate( m1 ) end",
    "type": "function"
  }, {
    "id": 427,
    "text": "function( m1 ) return matrix.transpose( m1 ) end",
    "type": "function"
  }, {
    "id": 428,
    "text": "function( _,s ) return symbol_meta.to( s ) end",
    "type": "function"
  }, {
    "id": 429,
    "text": "function(sym)\r\n\t\treturn symbol.to( string.gsub( sym[1], \"%a\", func ) )\r\n\tend",
    "type": "function"
  }, {
    "id": 430,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 431,
    "text": "",
    "type": "function container"
  }, {
    "id": 432,
    "text": "replace",
    "type": "global function"
  }, {
    "id": 433,
    "text": "transpose",
    "type": "global function"
  }, {
    "id": 434,
    "text": "mul",
    "type": "global function"
  }, {
    "id": 435,
    "text": "concath",
    "type": "global function"
  }, {
    "id": 436,
    "text": "format",
    "type": "global function"
  }, {
    "id": 437,
    "text": "abs",
    "type": "global function"
  }, {
    "id": 438,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 439,
    "text": "matrix",
    "type": "global function"
  }, {
    "id": 440,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 441,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 442,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 443,
    "text": "fround",
    "type": "global function"
  }, {
    "id": 444,
    "text": "print",
    "type": "global function"
  }, {
    "id": 445,
    "text": "norm2",
    "type": "global function"
  }, {
    "id": 446,
    "text": "to",
    "type": "global function"
  }, {
    "id": 447,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 448,
    "text": "fmod",
    "type": "global function"
  }, {
    "id": 449,
    "text": "new",
    "type": "global function"
  }, {
    "id": 450,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 451,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 452,
    "text": "random",
    "type": "global function"
  }, {
    "id": 453,
    "text": "to",
    "type": "global function"
  }, {
    "id": 454,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 455,
    "text": "conjugate",
    "type": "global function"
  }, {
    "id": 456,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 457,
    "text": "sqrt",
    "type": "global function"
  }, {
    "id": 458,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 459,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 460,
    "text": "sqrt",
    "type": "global function"
  }, {
    "id": 461,
    "text": "option[opt]",
    "type": "global function"
  }, {
    "id": 462,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 463,
    "text": "getstr",
    "type": "global function"
  }, {
    "id": 464,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 465,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 466,
    "text": "ffill",
    "type": "global function"
  }, {
    "id": 467,
    "text": "type",
    "type": "global function"
  }, {
    "id": 468,
    "text": "docopy",
    "type": "global function"
  }, {
    "id": 469,
    "text": "abs",
    "type": "global function"
  }, {
    "id": 470,
    "text": "",
    "type": "variable container"
  }, {
    "id": 471,
    "text": "",
    "type": "require container"
  }, {
    "id": 472,
    "text": "",
    "type": "local variable"
  }, {
    "id": 473,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 474,
    "text": "",
    "type": "local variable"
  }, {
    "id": 475,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 476,
    "text": "",
    "type": "local variable"
  }, {
    "id": 477,
    "text": "",
    "type": "n/a"
  }, {
    "id": 478,
    "text": "",
    "type": "local variable"
  }, {
    "id": 479,
    "text": "",
    "type": "n/a"
  }, {
    "id": 480,
    "text": "",
    "type": "local variable"
  }, {
    "id": 481,
    "text": "",
    "type": "n/a"
  }, {
    "id": 482,
    "text": "",
    "type": "local variable"
  }, {
    "id": 483,
    "text": "",
    "type": "n/a"
  }, {
    "id": 484,
    "text": "",
    "type": "local variable"
  }, {
    "id": 485,
    "text": "",
    "type": "n/a"
  }, {
    "id": 486,
    "text": "",
    "type": "local variable"
  }, {
    "id": 487,
    "text": "",
    "type": "n/a"
  }, {
    "id": 488,
    "text": "",
    "type": "local variable"
  }, {
    "id": 489,
    "text": "",
    "type": "n/a"
  }, {
    "id": 490,
    "text": "",
    "type": "local variable"
  }, {
    "id": 491,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 492,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 493,
    "text": "",
    "type": "function"
  }, {
    "id": 494,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 495,
    "text": "",
    "type": "function"
  }, {
    "id": 496,
    "text": "",
    "type": "local variable"
  }, {
    "id": 497,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 498,
    "text": "",
    "type": "local variable"
  }, {
    "id": 499,
    "text": "",
    "type": "n/a"
  }, {
    "id": 500,
    "text": "",
    "type": "global variable"
  }, {
    "id": 501,
    "text": "",
    "type": "n/a"
  }, {
    "id": 502,
    "text": "",
    "type": "global variable"
  }, {
    "id": 503,
    "text": "",
    "type": "n/a"
  }, {
    "id": 504,
    "text": "",
    "type": "global variable"
  }, {
    "id": 505,
    "text": "",
    "type": "n/a"
  }, {
    "id": 506,
    "text": "",
    "type": "global variable"
  }, {
    "id": 507,
    "text": "",
    "type": "n/a"
  }, {
    "id": 508,
    "text": "",
    "type": "global variable"
  }, {
    "id": 509,
    "text": "",
    "type": "n/a"
  }, {
    "id": 510,
    "text": "",
    "type": "global variable"
  }, {
    "id": 511,
    "text": "",
    "type": "n/a"
  }, {
    "id": 512,
    "text": "",
    "type": "global variable"
  }, {
    "id": 513,
    "text": "",
    "type": "n/a"
  }, {
    "id": 514,
    "text": "",
    "type": "global variable"
  }, {
    "id": 515,
    "text": "",
    "type": "n/a"
  }, {
    "id": 516,
    "text": "",
    "type": "global variable"
  }, {
    "id": 517,
    "text": "",
    "type": "n/a"
  }, {
    "id": 518,
    "text": "",
    "type": "global variable"
  }, {
    "id": 519,
    "text": "",
    "type": "n/a"
  }, {
    "id": 520,
    "text": "",
    "type": "global variable"
  }, {
    "id": 521,
    "text": "",
    "type": "n/a"
  }, {
    "id": 522,
    "text": "",
    "type": "global variable"
  }, {
    "id": 523,
    "text": "",
    "type": "n/a"
  }, {
    "id": 524,
    "text": "",
    "type": "global variable"
  }, {
    "id": 525,
    "text": "",
    "type": "n/a"
  }, {
    "id": 526,
    "text": "",
    "type": "interface container"
  }, {
    "id": 527,
    "text": "",
    "type": "interface"
  }, {
    "id": 528,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 529,
    "text": "",
    "type": "require local variable"
  } ]
}