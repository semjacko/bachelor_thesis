{
  "_filename": "complex.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-matrix/lua/complex.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 4,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 14,
    "label": "has",
    "to": 22
  }, {
    "from": 14,
    "label": "has",
    "to": 23
  }, {
    "from": 12,
    "label": "has",
    "to": 24
  }, {
    "from": 12,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 20
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 12,
    "label": "has",
    "to": 29
  }, {
    "from": 12,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 3
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 3
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 3
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 3
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 3
  }, {
    "from": 44,
    "label": "has",
    "to": 3
  }, {
    "from": 44,
    "label": "has",
    "to": 3
  }, {
    "from": 44,
    "label": "has",
    "to": 3
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 3
  }, {
    "from": 44,
    "label": "has",
    "to": 3
  }, {
    "from": 44,
    "label": "has",
    "to": 3
  }, {
    "from": 44,
    "label": "has",
    "to": 3
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 53,
    "label": "has",
    "to": 3
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 3
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 3
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 3
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 61,
    "label": "has",
    "to": 3
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 3
  }, {
    "from": 66,
    "label": "has",
    "to": 3
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 3
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 3
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 3
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 3
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 3
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 79,
    "label": "has",
    "to": 3
  }, {
    "from": 79,
    "label": "has",
    "to": 81
  }, {
    "from": 82,
    "label": "has",
    "to": 3
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 85,
    "label": "has",
    "to": 45
  }, {
    "from": 85,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 84,
    "label": "has",
    "to": 3
  }, {
    "from": 84,
    "label": "has",
    "to": 92
  }, {
    "from": 84,
    "label": "has",
    "to": 3
  }, {
    "from": 84,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 94,
    "label": "has",
    "to": 3
  }, {
    "from": 94,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 3
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 100,
    "label": "has",
    "to": 3
  }, {
    "from": 100,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 3
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 3
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 108,
    "label": "has",
    "to": 3
  }, {
    "from": 108,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 109
  }, {
    "from": 111,
    "label": "has",
    "to": 3
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 113,
    "label": "has",
    "to": 109
  }, {
    "from": 113,
    "label": "has",
    "to": 3
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 109
  }, {
    "from": 115,
    "label": "has",
    "to": 3
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 117,
    "label": "has",
    "to": 3
  }, {
    "from": 117,
    "label": "has",
    "to": 3
  }, {
    "from": 117,
    "label": "has",
    "to": 119
  }, {
    "from": 120,
    "label": "has",
    "to": 3
  }, {
    "from": 120,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 122,
    "label": "has",
    "to": 3
  }, {
    "from": 122,
    "label": "has",
    "to": 3
  }, {
    "from": 122,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 3
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 3
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 129,
    "label": "has",
    "to": 51
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "calls",
    "to": 153
  }, {
    "from": 5,
    "label": "calls",
    "to": 153
  }, {
    "from": 44,
    "label": "calls",
    "to": 154
  }, {
    "from": 44,
    "label": "calls",
    "to": 154
  }, {
    "from": 44,
    "label": "calls",
    "to": 154
  }, {
    "from": 44,
    "label": "calls",
    "to": 154
  }, {
    "from": 44,
    "label": "calls",
    "to": 154
  }, {
    "from": 44,
    "label": "calls",
    "to": 154
  }, {
    "from": 132,
    "label": "calls",
    "to": 159
  }, {
    "from": 5,
    "label": "calls",
    "to": 168
  }, {
    "from": 5,
    "label": "calls",
    "to": 168
  }, {
    "from": 5,
    "label": "calls",
    "to": 168
  }, {
    "from": 5,
    "label": "calls",
    "to": 168
  }, {
    "from": 5,
    "label": "calls",
    "to": 168
  }, {
    "from": 132,
    "label": "calls",
    "to": 155
  }, {
    "from": 132,
    "label": "calls",
    "to": 155
  }, {
    "from": 132,
    "label": "calls",
    "to": 155
  }, {
    "from": 132,
    "label": "calls",
    "to": 71
  }, {
    "from": 5,
    "label": "calls",
    "to": 156
  }, {
    "from": 5,
    "label": "calls",
    "to": 156
  }, {
    "from": 5,
    "label": "calls",
    "to": 156
  }, {
    "from": 53,
    "label": "calls",
    "to": 173
  }, {
    "from": 55,
    "label": "calls",
    "to": 173
  }, {
    "from": 84,
    "label": "calls",
    "to": 173
  }, {
    "from": 98,
    "label": "calls",
    "to": 173
  }, {
    "from": 50,
    "label": "calls",
    "to": 44
  }, {
    "from": 132,
    "label": "calls",
    "to": 44
  }, {
    "from": 132,
    "label": "calls",
    "to": 44
  }, {
    "from": 53,
    "label": "calls",
    "to": 161
  }, {
    "from": 55,
    "label": "calls",
    "to": 161
  }, {
    "from": 59,
    "label": "calls",
    "to": 161
  }, {
    "from": 84,
    "label": "calls",
    "to": 161
  }, {
    "from": 94,
    "label": "calls",
    "to": 161
  }, {
    "from": 94,
    "label": "calls",
    "to": 161
  }, {
    "from": 94,
    "label": "calls",
    "to": 161
  }, {
    "from": 98,
    "label": "calls",
    "to": 161
  }, {
    "from": 132,
    "label": "calls",
    "to": 79
  }, {
    "from": 132,
    "label": "calls",
    "to": 84
  }, {
    "from": 5,
    "label": "calls",
    "to": 163
  }, {
    "from": 5,
    "label": "calls",
    "to": 163
  }, {
    "from": 5,
    "label": "calls",
    "to": 163
  }, {
    "from": 5,
    "label": "calls",
    "to": 160
  }, {
    "from": 5,
    "label": "calls",
    "to": 160
  }, {
    "from": 84,
    "label": "calls",
    "to": 169
  }, {
    "from": 105,
    "label": "calls",
    "to": 169
  }, {
    "from": 105,
    "label": "calls",
    "to": 169
  }, {
    "from": 5,
    "label": "calls",
    "to": 157
  }, {
    "from": 5,
    "label": "calls",
    "to": 157
  }, {
    "from": 5,
    "label": "calls",
    "to": 157
  }, {
    "from": 39,
    "label": "calls",
    "to": 165
  }, {
    "from": 41,
    "label": "calls",
    "to": 165
  }, {
    "from": 84,
    "label": "calls",
    "to": 165
  }, {
    "from": 100,
    "label": "calls",
    "to": 165
  }, {
    "from": 100,
    "label": "calls",
    "to": 166
  }, {
    "from": 50,
    "label": "calls",
    "to": 158
  }, {
    "from": 132,
    "label": "calls",
    "to": 158
  }, {
    "from": 98,
    "label": "calls",
    "to": 167
  }, {
    "from": 132,
    "label": "calls",
    "to": 5
  }, {
    "from": 132,
    "label": "calls",
    "to": 5
  }, {
    "from": 132,
    "label": "calls",
    "to": 5
  }, {
    "from": 132,
    "label": "calls",
    "to": 5
  }, {
    "from": 132,
    "label": "calls",
    "to": 5
  }, {
    "from": 132,
    "label": "calls",
    "to": 5
  }, {
    "from": 132,
    "label": "calls",
    "to": 5
  }, {
    "from": 132,
    "label": "calls",
    "to": 5
  }, {
    "from": 132,
    "label": "calls",
    "to": 5
  }, {
    "from": 132,
    "label": "calls",
    "to": 103
  }, {
    "from": 132,
    "label": "calls",
    "to": 34
  }, {
    "from": 132,
    "label": "calls",
    "to": 34
  }, {
    "from": 5,
    "label": "calls",
    "to": 170
  }, {
    "from": 5,
    "label": "calls",
    "to": 170
  }, {
    "from": 5,
    "label": "calls",
    "to": 170
  }, {
    "from": 5,
    "label": "calls",
    "to": 170
  }, {
    "from": 5,
    "label": "calls",
    "to": 170
  }, {
    "from": 5,
    "label": "calls",
    "to": 170
  }, {
    "from": 5,
    "label": "calls",
    "to": 170
  }, {
    "from": 132,
    "label": "calls",
    "to": 170
  }, {
    "from": 34,
    "label": "calls",
    "to": 170
  }, {
    "from": 39,
    "label": "calls",
    "to": 170
  }, {
    "from": 41,
    "label": "calls",
    "to": 170
  }, {
    "from": 69,
    "label": "calls",
    "to": 170
  }, {
    "from": 71,
    "label": "calls",
    "to": 170
  }, {
    "from": 73,
    "label": "calls",
    "to": 170
  }, {
    "from": 75,
    "label": "calls",
    "to": 170
  }, {
    "from": 77,
    "label": "calls",
    "to": 170
  }, {
    "from": 79,
    "label": "calls",
    "to": 170
  }, {
    "from": 82,
    "label": "calls",
    "to": 170
  }, {
    "from": 84,
    "label": "calls",
    "to": 170
  }, {
    "from": 84,
    "label": "calls",
    "to": 170
  }, {
    "from": 94,
    "label": "calls",
    "to": 170
  }, {
    "from": 98,
    "label": "calls",
    "to": 170
  }, {
    "from": 100,
    "label": "calls",
    "to": 170
  }, {
    "from": 103,
    "label": "calls",
    "to": 170
  }, {
    "from": 105,
    "label": "calls",
    "to": 170
  }, {
    "from": 132,
    "label": "calls",
    "to": 170
  }, {
    "from": 39,
    "label": "calls",
    "to": 164
  }, {
    "from": 41,
    "label": "calls",
    "to": 164
  }, {
    "from": 84,
    "label": "calls",
    "to": 164
  }, {
    "from": 100,
    "label": "calls",
    "to": 164
  }, {
    "from": 5,
    "label": "calls",
    "to": 171
  }, {
    "from": 5,
    "label": "calls",
    "to": 171
  }, {
    "from": 5,
    "label": "calls",
    "to": 171
  }, {
    "from": 5,
    "label": "calls",
    "to": 172
  }, {
    "from": 5,
    "label": "calls",
    "to": 172
  }, {
    "from": 5,
    "label": "calls",
    "to": 162
  }, {
    "from": 36,
    "label": "calls",
    "to": 162
  }, {
    "from": 132,
    "label": "calls",
    "to": 73
  }, {
    "from": 132,
    "label": "calls",
    "to": 75
  }, {
    "from": 1,
    "label": "contains",
    "to": 132
  }, {
    "from": 132,
    "label": "declares",
    "to": 2
  }, {
    "from": 132,
    "label": "declares",
    "to": 4
  }, {
    "from": 132,
    "label": "declares",
    "to": 5
  }, {
    "from": 132,
    "label": "declares",
    "to": 34
  }, {
    "from": 132,
    "label": "declares",
    "to": 36
  }, {
    "from": 132,
    "label": "declares",
    "to": 39
  }, {
    "from": 132,
    "label": "declares",
    "to": 41
  }, {
    "from": 132,
    "label": "declares",
    "to": 44
  }, {
    "from": 132,
    "label": "declares",
    "to": 50
  }, {
    "from": 132,
    "label": "declares",
    "to": 53
  }, {
    "from": 132,
    "label": "declares",
    "to": 55
  }, {
    "from": 132,
    "label": "declares",
    "to": 57
  }, {
    "from": 132,
    "label": "declares",
    "to": 59
  }, {
    "from": 132,
    "label": "declares",
    "to": 61
  }, {
    "from": 132,
    "label": "declares",
    "to": 63
  }, {
    "from": 132,
    "label": "declares",
    "to": 66
  }, {
    "from": 132,
    "label": "declares",
    "to": 69
  }, {
    "from": 132,
    "label": "declares",
    "to": 71
  }, {
    "from": 132,
    "label": "declares",
    "to": 73
  }, {
    "from": 132,
    "label": "declares",
    "to": 75
  }, {
    "from": 132,
    "label": "declares",
    "to": 77
  }, {
    "from": 132,
    "label": "declares",
    "to": 79
  }, {
    "from": 132,
    "label": "declares",
    "to": 82
  }, {
    "from": 132,
    "label": "declares",
    "to": 84
  }, {
    "from": 132,
    "label": "declares",
    "to": 94
  }, {
    "from": 132,
    "label": "declares",
    "to": 98
  }, {
    "from": 132,
    "label": "declares",
    "to": 100
  }, {
    "from": 132,
    "label": "declares",
    "to": 103
  }, {
    "from": 132,
    "label": "declares",
    "to": 105
  }, {
    "from": 132,
    "label": "declares",
    "to": 108
  }, {
    "from": 132,
    "label": "declares",
    "to": 111
  }, {
    "from": 132,
    "label": "declares",
    "to": 113
  }, {
    "from": 132,
    "label": "declares",
    "to": 115
  }, {
    "from": 132,
    "label": "declares",
    "to": 117
  }, {
    "from": 132,
    "label": "declares",
    "to": 120
  }, {
    "from": 132,
    "label": "declares",
    "to": 122
  }, {
    "from": 132,
    "label": "declares",
    "to": 125
  }, {
    "from": 132,
    "label": "declares",
    "to": 127
  }, {
    "from": 132,
    "label": "declares",
    "to": 129
  }, {
    "from": 132,
    "label": "declares",
    "to": 131
  }, {
    "from": 1,
    "label": "declares",
    "to": 133
  }, {
    "from": 1,
    "label": "declares",
    "to": 134
  }, {
    "from": 1,
    "label": "declares",
    "to": 135
  }, {
    "from": 1,
    "label": "declares",
    "to": 136
  }, {
    "from": 1,
    "label": "declares",
    "to": 137
  }, {
    "from": 1,
    "label": "declares",
    "to": 138
  }, {
    "from": 1,
    "label": "declares",
    "to": 139
  }, {
    "from": 1,
    "label": "declares",
    "to": 140
  }, {
    "from": 1,
    "label": "declares",
    "to": 141
  }, {
    "from": 1,
    "label": "declares",
    "to": 142
  }, {
    "from": 1,
    "label": "declares",
    "to": 143
  }, {
    "from": 1,
    "label": "declares",
    "to": 144
  }, {
    "from": 1,
    "label": "declares",
    "to": 145
  }, {
    "from": 1,
    "label": "declares",
    "to": 146
  }, {
    "from": 1,
    "label": "declares",
    "to": 147
  }, {
    "from": 1,
    "label": "declares",
    "to": 148
  }, {
    "from": 1,
    "label": "declares",
    "to": 149
  }, {
    "from": 1,
    "label": "declares",
    "to": 150
  }, {
    "from": 1,
    "label": "declares",
    "to": 151
  }, {
    "from": 1,
    "label": "declares",
    "to": 152
  }, {
    "from": 1,
    "label": "contains",
    "to": 174
  }, {
    "from": 1,
    "label": "contains",
    "to": 175
  }, {
    "from": 174,
    "label": "initializes",
    "to": 176
  }, {
    "from": 176,
    "label": "assigns",
    "to": 177
  }, {
    "from": 174,
    "label": "initializes",
    "to": 178
  }, {
    "from": 178,
    "label": "assigns",
    "to": 179
  }, {
    "from": 174,
    "label": "initializes",
    "to": 180
  }, {
    "from": 180,
    "label": "assigns",
    "to": 181
  }, {
    "from": 174,
    "label": "initializes",
    "to": 182
  }, {
    "from": 182,
    "label": "assigns",
    "to": 183
  }, {
    "from": 174,
    "label": "initializes",
    "to": 184
  }, {
    "from": 184,
    "label": "assigns",
    "to": 185
  }, {
    "from": 174,
    "label": "initializes",
    "to": 186
  }, {
    "from": 186,
    "label": "assigns",
    "to": 187
  }, {
    "from": 174,
    "label": "initializes",
    "to": 188
  }, {
    "from": 188,
    "label": "assigns",
    "to": 189
  }, {
    "from": 174,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "assigns",
    "to": 191
  }, {
    "from": 174,
    "label": "initializes",
    "to": 192
  }, {
    "from": 192,
    "label": "assigns",
    "to": 193
  }, {
    "from": 174,
    "label": "initializes",
    "to": 194
  }, {
    "from": 194,
    "label": "assigns",
    "to": 195
  }, {
    "from": 174,
    "label": "initializes",
    "to": 196
  }, {
    "from": 196,
    "label": "assigns",
    "to": 197
  }, {
    "from": 174,
    "label": "initializes",
    "to": 198
  }, {
    "from": 198,
    "label": "assigns",
    "to": 199
  }, {
    "from": 174,
    "label": "initializes",
    "to": 200
  }, {
    "from": 200,
    "label": "assigns",
    "to": 201
  }, {
    "from": 174,
    "label": "initializes",
    "to": 202
  }, {
    "from": 202,
    "label": "assigns",
    "to": 203
  }, {
    "from": 174,
    "label": "initializes",
    "to": 204
  }, {
    "from": 204,
    "label": "assigns",
    "to": 205
  }, {
    "from": 174,
    "label": "initializes",
    "to": 206
  }, {
    "from": 206,
    "label": "assigns",
    "to": 207
  }, {
    "from": 174,
    "label": "initializes",
    "to": 208
  }, {
    "from": 208,
    "label": "assigns",
    "to": 209
  }, {
    "from": 1,
    "label": "provides",
    "to": 210
  }, {
    "from": 176,
    "label": "represents",
    "to": 211
  }, {
    "from": 210,
    "label": "provides",
    "to": 211
  }, {
    "from": 212,
    "label": "requires",
    "to": 1
  }, {
    "from": 213,
    "label": "requires",
    "to": 1
  }, {
    "from": 176,
    "label": "contains",
    "to": 5
  }, {
    "from": 176,
    "label": "contains",
    "to": 34
  }, {
    "from": 176,
    "label": "contains",
    "to": 36
  }, {
    "from": 176,
    "label": "contains",
    "to": 39
  }, {
    "from": 176,
    "label": "contains",
    "to": 41
  }, {
    "from": 176,
    "label": "contains",
    "to": 44
  }, {
    "from": 176,
    "label": "contains",
    "to": 50
  }, {
    "from": 176,
    "label": "contains",
    "to": 53
  }, {
    "from": 176,
    "label": "contains",
    "to": 55
  }, {
    "from": 176,
    "label": "contains",
    "to": 57
  }, {
    "from": 176,
    "label": "contains",
    "to": 59
  }, {
    "from": 176,
    "label": "contains",
    "to": 61
  }, {
    "from": 176,
    "label": "contains",
    "to": 63
  }, {
    "from": 176,
    "label": "contains",
    "to": 66
  }, {
    "from": 176,
    "label": "contains",
    "to": 69
  }, {
    "from": 176,
    "label": "contains",
    "to": 71
  }, {
    "from": 176,
    "label": "contains",
    "to": 73
  }, {
    "from": 176,
    "label": "contains",
    "to": 75
  }, {
    "from": 176,
    "label": "contains",
    "to": 77
  }, {
    "from": 176,
    "label": "contains",
    "to": 79
  }, {
    "from": 176,
    "label": "contains",
    "to": 82
  }, {
    "from": 176,
    "label": "contains",
    "to": 84
  }, {
    "from": 176,
    "label": "contains",
    "to": 94
  }, {
    "from": 176,
    "label": "contains",
    "to": 98
  }, {
    "from": 176,
    "label": "contains",
    "to": 100
  }, {
    "from": 176,
    "label": "contains",
    "to": 103
  }, {
    "from": 176,
    "label": "contains",
    "to": 105
  }, {
    "from": 178,
    "label": "contains",
    "to": 108
  }, {
    "from": 178,
    "label": "contains",
    "to": 111
  }, {
    "from": 178,
    "label": "contains",
    "to": 113
  }, {
    "from": 178,
    "label": "contains",
    "to": 115
  }, {
    "from": 178,
    "label": "contains",
    "to": 117
  }, {
    "from": 178,
    "label": "contains",
    "to": 120
  }, {
    "from": 178,
    "label": "contains",
    "to": 122
  }, {
    "from": 178,
    "label": "contains",
    "to": 125
  }, {
    "from": 178,
    "label": "contains",
    "to": 127
  }, {
    "from": 178,
    "label": "contains",
    "to": 129
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "complex",
    "type": "module"
  }, {
    "id": 2,
    "text": "function() return 1 end",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "function() return -1 end",
    "type": "function"
  }, {
    "id": 5,
    "text": "function complex.to( num )\r\n\t-- check for table type\r\n\tif type( num ) == \"table\" then\r\n\t\t-- check for a complex number\r\n\t\tif getmetatable( num ) == complex_meta then\r\n\t\t\treturn num\r\n\t\tend\r\n\t\tlocal real,imag = tonumber( num[1] ),tonumber( num[2] )\r\n\t\tif real and imag then\r\n\t\t\treturn setmetatable( { real,imag }, complex_meta )\r\n\t\tend\r\n\t\treturn\r\n\tend\r\n\t-- check for number\r\n\tlocal isnum = tonumber( num )\r\n\tif isnum then\r\n\t\treturn setmetatable( { isnum,0 }, complex_meta )\r\n\tend\r\n\tif type( num ) == \"string\" then\r\n\t\t-- check for real and complex\r\n\t\t-- number chars [%-%+%*%^%d%./Ee]\r\n\t\tlocal real,sign,imag = string.match( num, \"^([%-%+%*%^%d%./Ee]*%d)([%+%-])([%-%+%*%^%d%./Ee]*)i$\" )\r\n\t\tif real then\r\n\t\t\tif string.lower(string.sub(real,1,1)) == \"e\"\r\n\t\t\tor string.lower(string.sub(imag,1,1)) == \"e\" then\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\t\t\tif imag == \"\" then\r\n\t\t\t\tif sign == \"+\" then\r\n\t\t\t\t\timag = _retone\r\n\t\t\t\telse\r\n\t\t\t\t\timag = _retminusone\r\n\t\t\t\tend\r\n\t\t\telseif sign == \"+\" then\r\n\t\t\t\timag = loadstring(\"return tonumber(\"..imag..\")\")\r\n\t\t\telse\r\n\t\t\t\timag = loadstring(\"return tonumber(\"..sign..imag..\")\")\r\n\t\t\tend\r\n\t\t\treal = loadstring(\"return tonumber(\"..real..\")\")\r\n\t\t\tif real and imag then\r\n\t\t\t\treturn setmetatable( { real(),imag() }, complex_meta )\r\n\t\t\tend\r\n\t\t\treturn\r\n\t\tend\r\n\t\t-- check for complex\r\n\t\tlocal imag = string.match( num,\"^([%-%+%*%^%d%./Ee]*)i$\" )\r\n\t\tif imag then\r\n\t\t\tif imag == \"\" then\r\n\t\t\t\treturn setmetatable( { 0,1 }, complex_meta )\r\n\t\t\telseif imag == \"-\" then\r\n\t\t\t\treturn setmetatable( { 0,-1 }, complex_meta )\r\n\t\t\tend\r\n\t\t\tif string.lower(string.sub(imag,1,1)) ~= \"e\" then\r\n\t\t\t\timag = loadstring(\"return tonumber(\"..imag..\")\")\r\n\t\t\t\tif imag then\r\n\t\t\t\t\treturn setmetatable( { 0,imag() }, complex_meta )\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\treturn\r\n\t\tend\r\n\t\t-- should be real\r\n\t\tlocal real = string.match( num,\"^(%-*[%d%.][%-%+%*%^%d%./Ee]*)$\" )\r\n\t\tif real then\r\n\t\t\treal = loadstring( \"return tonumber(\"..real..\")\" )\r\n\t\t\tif real then\r\n\t\t\t\treturn setmetatable( { real(),0 }, complex_meta )\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "if type( num ) == \"table\" then\r\n\t\t-- check for a complex number\r\n\t\tif getmetatable( num ) == complex_meta then\r\n\t\t\treturn num\r\n\t\tend\r\n\t\tlocal real,imag = tonumber( num[1] ),tonumber( num[2] )\r\n\t\tif real and imag then\r\n\t\t\treturn setmetatable( { real,imag }, complex_meta )\r\n\t\tend\r\n\t\treturn\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "if getmetatable( num ) == complex_meta then\r\n\t\t\treturn num\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "local real,imag = tonumber( num[1] ),tonumber( num[2] )",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "if real and imag then\r\n\t\t\treturn setmetatable( { real,imag }, complex_meta )\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "local isnum = tonumber( num )",
    "type": "statement:localassign"
  }, {
    "id": 11,
    "text": "if isnum then\r\n\t\treturn setmetatable( { isnum,0 }, complex_meta )\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 12,
    "text": "if type( num ) == \"string\" then\r\n\t\t-- check for real and complex\r\n\t\t-- number chars [%-%+%*%^%d%./Ee]\r\n\t\tlocal real,sign,imag = string.match( num, \"^([%-%+%*%^%d%./Ee]*%d)([%+%-])([%-%+%*%^%d%./Ee]*)i$\" )\r\n\t\tif real then\r\n\t\t\tif string.lower(string.sub(real,1,1)) == \"e\"\r\n\t\t\tor string.lower(string.sub(imag,1,1)) == \"e\" then\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\t\t\tif imag == \"\" then\r\n\t\t\t\tif sign == \"+\" then\r\n\t\t\t\t\timag = _retone\r\n\t\t\t\telse\r\n\t\t\t\t\timag = _retminusone\r\n\t\t\t\tend\r\n\t\t\telseif sign == \"+\" then\r\n\t\t\t\timag = loadstring(\"return tonumber(\"..imag..\")\")\r\n\t\t\telse\r\n\t\t\t\timag = loadstring(\"return tonumber(\"..sign..imag..\")\")\r\n\t\t\tend\r\n\t\t\treal = loadstring(\"return tonumber(\"..real..\")\")\r\n\t\t\tif real and imag then\r\n\t\t\t\treturn setmetatable( { real(),imag() }, complex_meta )\r\n\t\t\tend\r\n\t\t\treturn\r\n\t\tend\r\n\t\t-- check for complex\r\n\t\tlocal imag = string.match( num,\"^([%-%+%*%^%d%./Ee]*)i$\" )\r\n\t\tif imag then\r\n\t\t\tif imag == \"\" then\r\n\t\t\t\treturn setmetatable( { 0,1 }, complex_meta )\r\n\t\t\telseif imag == \"-\" then\r\n\t\t\t\treturn setmetatable( { 0,-1 }, complex_meta )\r\n\t\t\tend\r\n\t\t\tif string.lower(string.sub(imag,1,1)) ~= \"e\" then\r\n\t\t\t\timag = loadstring(\"return tonumber(\"..imag..\")\")\r\n\t\t\t\tif imag then\r\n\t\t\t\t\treturn setmetatable( { 0,imag() }, complex_meta )\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\treturn\r\n\t\tend\r\n\t\t-- should be real\r\n\t\tlocal real = string.match( num,\"^(%-*[%d%.][%-%+%*%^%d%./Ee]*)$\" )\r\n\t\tif real then\r\n\t\t\treal = loadstring( \"return tonumber(\"..real..\")\" )\r\n\t\t\tif real then\r\n\t\t\t\treturn setmetatable( { real(),0 }, complex_meta )\r\n\t\t\tend\r\n\t\tend\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 13,
    "text": "local real,sign,imag = string.match( num, \"^([%-%+%*%^%d%./Ee]*%d)([%+%-])([%-%+%*%^%d%./Ee]*)i$\" )",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "if real then\r\n\t\t\tif string.lower(string.sub(real,1,1)) == \"e\"\r\n\t\t\tor string.lower(string.sub(imag,1,1)) == \"e\" then\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\t\t\tif imag == \"\" then\r\n\t\t\t\tif sign == \"+\" then\r\n\t\t\t\t\timag = _retone\r\n\t\t\t\telse\r\n\t\t\t\t\timag = _retminusone\r\n\t\t\t\tend\r\n\t\t\telseif sign == \"+\" then\r\n\t\t\t\timag = loadstring(\"return tonumber(\"..imag..\")\")\r\n\t\t\telse\r\n\t\t\t\timag = loadstring(\"return tonumber(\"..sign..imag..\")\")\r\n\t\t\tend\r\n\t\t\treal = loadstring(\"return tonumber(\"..real..\")\")\r\n\t\t\tif real and imag then\r\n\t\t\t\treturn setmetatable( { real(),imag() }, complex_meta )\r\n\t\t\tend\r\n\t\t\treturn\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "if string.lower(string.sub(real,1,1)) == \"e\"\r\n\t\t\tor string.lower(string.sub(imag,1,1)) == \"e\" then\r\n\t\t\t\treturn\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "if imag == \"\" then\r\n\t\t\t\tif sign == \"+\" then\r\n\t\t\t\t\timag = _retone\r\n\t\t\t\telse\r\n\t\t\t\t\timag = _retminusone\r\n\t\t\t\tend\r\n\t\t\telseif sign == \"+\" then\r\n\t\t\t\timag = loadstring(\"return tonumber(\"..imag..\")\")\r\n\t\t\telse\r\n\t\t\t\timag = loadstring(\"return tonumber(\"..sign..imag..\")\")\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "if sign == \"+\" then\r\n\t\t\t\t\timag = _retone\r\n\t\t\t\telse\r\n\t\t\t\t\timag = _retminusone\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "imag = _retone",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "imag = _retminusone",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "imag = loadstring(\"return tonumber(\"..imag..\")\")",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "imag = loadstring(\"return tonumber(\"..sign..imag..\")\")",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "real = loadstring(\"return tonumber(\"..real..\")\")",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "if real and imag then\r\n\t\t\t\treturn setmetatable( { real(),imag() }, complex_meta )\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "local imag = string.match( num,\"^([%-%+%*%^%d%./Ee]*)i$\" )",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "if imag then\r\n\t\t\tif imag == \"\" then\r\n\t\t\t\treturn setmetatable( { 0,1 }, complex_meta )\r\n\t\t\telseif imag == \"-\" then\r\n\t\t\t\treturn setmetatable( { 0,-1 }, complex_meta )\r\n\t\t\tend\r\n\t\t\tif string.lower(string.sub(imag,1,1)) ~= \"e\" then\r\n\t\t\t\timag = loadstring(\"return tonumber(\"..imag..\")\")\r\n\t\t\t\tif imag then\r\n\t\t\t\t\treturn setmetatable( { 0,imag() }, complex_meta )\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\treturn\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "if imag == \"\" then\r\n\t\t\t\treturn setmetatable( { 0,1 }, complex_meta )\r\n\t\t\telseif imag == \"-\" then\r\n\t\t\t\treturn setmetatable( { 0,-1 }, complex_meta )\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "if string.lower(string.sub(imag,1,1)) ~= \"e\" then\r\n\t\t\t\timag = loadstring(\"return tonumber(\"..imag..\")\")\r\n\t\t\t\tif imag then\r\n\t\t\t\t\treturn setmetatable( { 0,imag() }, complex_meta )\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "if imag then\r\n\t\t\t\t\treturn setmetatable( { 0,imag() }, complex_meta )\r\n\t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 29,
    "text": "local real = string.match( num,\"^(%-*[%d%.][%-%+%*%^%d%./Ee]*)$\" )",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "if real then\r\n\t\t\treal = loadstring( \"return tonumber(\"..real..\")\" )\r\n\t\t\tif real then\r\n\t\t\t\treturn setmetatable( { real(),0 }, complex_meta )\r\n\t\t\tend\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "real = loadstring( \"return tonumber(\"..real..\")\" )",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "if real then\r\n\t\t\t\treturn setmetatable( { real(),0 }, complex_meta )\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function complex.new( ... )\r\n\treturn setmetatable( { ... }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function complex.type( arg )\r\n\tif getmetatable( arg ) == complex_meta then\r\n\t\treturn \"complex\"\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "if getmetatable( arg ) == complex_meta then\r\n\t\treturn \"complex\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function complex.convpolar( radius, phi )\r\n\treturn setmetatable( { radius * math.cos( phi ), radius * math.sin( phi ) }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function complex.convpolardeg( radius, phi )\r\n\tphi = phi/180 * math.pi\r\n\treturn setmetatable( { radius * math.cos( phi ), radius * math.sin( phi ) }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 42,
    "text": "phi = phi/180 * math.pi",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function complex.tostring( cx,formatstr )\r\n\tlocal real,imag = cx[1],cx[2]\r\n\tif formatstr then\r\n\t\tif imag == 0 then\r\n\t\t\treturn string.format( formatstr, real )\r\n\t\telseif real == 0 then\r\n\t\t\treturn string.format( formatstr, imag )..\"i\"\r\n\t\telseif imag > 0 then\r\n\t\t\treturn string.format( formatstr, real )..\"+\"..string.format( formatstr, imag )..\"i\"\r\n\t\tend\r\n\t\treturn string.format( formatstr, real )..string.format( formatstr, imag )..\"i\"\r\n\tend\r\n\tif imag == 0 then\r\n\t\treturn real\r\n\telseif real == 0 then\r\n\t\treturn ((imag==1 and \"\") or (imag==-1 and \"-\") or imag)..\"i\"\r\n\telseif imag > 0 then\r\n\t\treturn real..\"+\"..(imag==1 and \"\" or imag)..\"i\"\r\n\tend\r\n\treturn real..(imag==-1 and \"-\" or imag)..\"i\"\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local real,imag = cx[1],cx[2]",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "if formatstr then\r\n\t\tif imag == 0 then\r\n\t\t\treturn string.format( formatstr, real )\r\n\t\telseif real == 0 then\r\n\t\t\treturn string.format( formatstr, imag )..\"i\"\r\n\t\telseif imag > 0 then\r\n\t\t\treturn string.format( formatstr, real )..\"+\"..string.format( formatstr, imag )..\"i\"\r\n\t\tend\r\n\t\treturn string.format( formatstr, real )..string.format( formatstr, imag )..\"i\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "if imag == 0 then\r\n\t\t\treturn string.format( formatstr, real )\r\n\t\telseif real == 0 then\r\n\t\t\treturn string.format( formatstr, imag )..\"i\"\r\n\t\telseif imag > 0 then\r\n\t\t\treturn string.format( formatstr, real )..\"+\"..string.format( formatstr, imag )..\"i\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 48,
    "text": "if imag == 0 then\r\n\t\treturn real\r\n\telseif real == 0 then\r\n\t\treturn ((imag==1 and \"\") or (imag==-1 and \"-\") or imag)..\"i\"\r\n\telseif imag > 0 then\r\n\t\treturn real..\"+\"..(imag==1 and \"\" or imag)..\"i\"\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function complex.print( ... )\r\n\tprint( complex.tostring( ... ) )\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "print( complex.tostring( ... ) )",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 53,
    "text": "function complex.polar( cx )\r\n\treturn math.sqrt( cx[1]^2 + cx[2]^2 ), math.atan2( cx[2], cx[1] )\r\nend",
    "type": "function"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function complex.polardeg( cx )\r\n\treturn math.sqrt( cx[1]^2 + cx[2]^2 ), math.atan2( cx[2], cx[1] ) / math.pi * 180\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function complex.norm2( cx )\r\n\treturn cx[1]^2 + cx[2]^2\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function complex.abs( cx )\r\n\treturn math.sqrt( cx[1]^2 + cx[2]^2 )\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 61,
    "text": "function complex.get( cx )\r\n\treturn cx[1],cx[2]\r\nend",
    "type": "function"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function complex.set( cx,real,imag )\r\n\tcx[1],cx[2] = real,imag\r\nend",
    "type": "function"
  }, {
    "id": 64,
    "text": "cx[1],cx[2] = real,imag",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function complex.is( cx,real,imag )\r\n\tif cx[1] == real and cx[2] == imag then\r\n\t\treturn true\r\n\tend\r\n\treturn false\r\nend",
    "type": "function"
  }, {
    "id": 67,
    "text": "if cx[1] == real and cx[2] == imag then\r\n\t\treturn true\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function complex.copy( cx )\r\n\treturn setmetatable( { cx[1],cx[2] }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function complex.add( cx1,cx2 )\r\n\treturn setmetatable( { cx1[1]+cx2[1], cx1[2]+cx2[2] }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function complex.sub( cx1,cx2 )\r\n\treturn setmetatable( { cx1[1]-cx2[1], cx1[2]-cx2[2] }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function complex.mul( cx1,cx2 )\r\n\treturn setmetatable( { cx1[1]*cx2[1] - cx1[2]*cx2[2],cx1[1]*cx2[2] + cx1[2]*cx2[1] }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function complex.mulnum( cx,num )\r\n\treturn setmetatable( { cx[1]*num,cx[2]*num }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function complex.div( cx1,cx2 )\r\n\t-- get complex value\r\n\tlocal val = cx2[1]^2 + cx2[2]^2\r\n\t-- multiply cx1 with conjugate complex of cx2 and divide through val\r\n\treturn setmetatable( { (cx1[1]*cx2[1]+cx1[2]*cx2[2])/val,(cx1[2]*cx2[1]-cx1[1]*cx2[2])/val }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "local val = cx2[1]^2 + cx2[2]^2",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 82,
    "text": "function complex.divnum( cx,num )\r\n\treturn setmetatable( { cx[1]/num,cx[2]/num }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "function complex.pow( cx,num )\r\n\tif math.floor( num ) == num then\r\n\t\tif num < 0 then\r\n\t\t\tlocal val = cx[1]^2 + cx[2]^2\r\n\t\t\tcx = { cx[1]/val,-cx[2]/val }\r\n\t\t\tnum = -num\r\n\t\tend\r\n\t\tlocal real,imag = cx[1],cx[2]\r\n\t\tfor i = 2,num do\r\n\t\t\treal,imag = real*cx[1] - imag*cx[2],real*cx[2] + imag*cx[1]\r\n\t\tend\r\n\t\treturn setmetatable( { real,imag }, complex_meta )\r\n\tend\r\n\t-- we calculate the polar complex number now\r\n\t-- since then we have the versatility to calc any potenz of the complex number\r\n\t-- then we convert it back to a carthesic complex number, we loose precision here\r\n\tlocal length,phi = math.sqrt( cx[1]^2 + cx[2]^2 )^num, math.atan2( cx[2], cx[1] )*num\r\n\treturn setmetatable( { length * math.cos( phi ), length * math.sin( phi ) }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 85,
    "text": "if math.floor( num ) == num then\r\n\t\tif num < 0 then\r\n\t\t\tlocal val = cx[1]^2 + cx[2]^2\r\n\t\t\tcx = { cx[1]/val,-cx[2]/val }\r\n\t\t\tnum = -num\r\n\t\tend\r\n\t\tlocal real,imag = cx[1],cx[2]\r\n\t\tfor i = 2,num do\r\n\t\t\treal,imag = real*cx[1] - imag*cx[2],real*cx[2] + imag*cx[1]\r\n\t\tend\r\n\t\treturn setmetatable( { real,imag }, complex_meta )\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 86,
    "text": "if num < 0 then\r\n\t\t\tlocal val = cx[1]^2 + cx[2]^2\r\n\t\t\tcx = { cx[1]/val,-cx[2]/val }\r\n\t\t\tnum = -num\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "local val = cx[1]^2 + cx[2]^2",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "cx = { cx[1]/val,-cx[2]/val }",
    "type": "statement:assign"
  }, {
    "id": 89,
    "text": "num = -num",
    "type": "statement:assign"
  }, {
    "id": 90,
    "text": "for i = 2,num do\r\n\t\t\treal,imag = real*cx[1] - imag*cx[2],real*cx[2] + imag*cx[1]\r\n\t\tend",
    "type": "statement:numericfor"
  }, {
    "id": 91,
    "text": "real,imag = real*cx[1] - imag*cx[2],real*cx[2] + imag*cx[1]",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "local length,phi = math.sqrt( cx[1]^2 + cx[2]^2 )^num, math.atan2( cx[2], cx[1] )*num",
    "type": "statement:localassign"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function complex.sqrt( cx )\r\n\tlocal len = math.sqrt( cx[1]^2+cx[2]^2 )\r\n\tlocal sign = (cx[2]<0 and -1) or 1\r\n\treturn setmetatable( { math.sqrt((cx[1]+len)/2), sign*math.sqrt((len-cx[1])/2) }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 95,
    "text": "local len = math.sqrt( cx[1]^2+cx[2]^2 )",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "local sign = (cx[2]<0 and -1) or 1",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function complex.ln( cx )\r\n\treturn setmetatable( { math.log(math.sqrt( cx[1]^2 + cx[2]^2 )),\r\n\t\tmath.atan2( cx[2], cx[1] ) }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function complex.exp( cx )\r\n\tlocal expreal = math.exp(cx[1])\r\n\treturn setmetatable( { expreal*math.cos(cx[2]), expreal*math.sin(cx[2]) }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 101,
    "text": "local expreal = math.exp(cx[1])",
    "type": "statement:localassign"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function complex.conjugate( cx )\r\n\treturn setmetatable( { cx[1], -cx[2] }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function complex.round( cx,idp )\r\n\tlocal mult = 10^( idp or 0 )\r\n\treturn setmetatable( { math.floor( cx[1] * mult + 0.5 ) / mult,\r\n\t\tmath.floor( cx[2] * mult + 0.5 ) / mult }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "local mult = 10^( idp or 0 )",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 108,
    "text": "function( cx1,cx2 )\r\n\tlocal cx1,cx2 = complex.to( cx1 ),complex.to( cx2 )\r\n\treturn complex.add( cx1,cx2 )\r\nend",
    "type": "function"
  }, {
    "id": 109,
    "text": "local cx1,cx2 = complex.to( cx1 ),complex.to( cx2 )",
    "type": "statement:localassign"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function( cx1,cx2 )\r\n\tlocal cx1,cx2 = complex.to( cx1 ),complex.to( cx2 )\r\n\treturn complex.sub( cx1,cx2 )\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 113,
    "text": "function( cx1,cx2 )\r\n\tlocal cx1,cx2 = complex.to( cx1 ),complex.to( cx2 )\r\n\treturn complex.mul( cx1,cx2 )\r\nend",
    "type": "function"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function( cx1,cx2 )\r\n\tlocal cx1,cx2 = complex.to( cx1 ),complex.to( cx2 )\r\n\treturn complex.div( cx1,cx2 )\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function( cx,num )\r\n\tif num == \"*\" then\r\n\t\treturn complex.conjugate( cx )\r\n\tend\r\n\treturn complex.pow( cx,num )\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "if num == \"*\" then\r\n\t\treturn complex.conjugate( cx )\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 120,
    "text": "function( cx )\r\n\treturn setmetatable( { -cx[1], -cx[2] }, complex_meta )\r\nend",
    "type": "function"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "function( cx1,cx2 )\r\n\tif cx1[1] == cx2[1] and cx1[2] == cx2[2] then\r\n\t\treturn true\r\n\tend\r\n\treturn false\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "if cx1[1] == cx2[1] and cx1[2] == cx2[2] then\r\n\t\treturn true\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function( cx )\r\n\treturn tostring( complex.tostring( cx ) )\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "function( cx,cx2 )\r\n\treturn tostring(cx)..tostring(cx2)\r\nend",
    "type": "function"
  }, {
    "id": 128,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 129,
    "text": "function( ... )\r\n\tprint( complex.tostring( ... ) )\r\nend",
    "type": "function"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function( _,num ) return complex.to( num ) end",
    "type": "function"
  }, {
    "id": 132,
    "text": "",
    "type": "function container"
  }, {
    "id": 133,
    "text": "new",
    "type": "global function"
  }, {
    "id": 134,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 135,
    "text": "convpolar",
    "type": "global function"
  }, {
    "id": 136,
    "text": "polardeg",
    "type": "global function"
  }, {
    "id": 137,
    "text": "add",
    "type": "global function"
  }, {
    "id": 138,
    "text": "sqrt",
    "type": "global function"
  }, {
    "id": 139,
    "text": "convpolardeg",
    "type": "global function"
  }, {
    "id": 140,
    "text": "pow",
    "type": "global function"
  }, {
    "id": 141,
    "text": "div",
    "type": "global function"
  }, {
    "id": 142,
    "text": "set",
    "type": "global function"
  }, {
    "id": 143,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 144,
    "text": "abs",
    "type": "global function"
  }, {
    "id": 145,
    "text": "is",
    "type": "global function"
  }, {
    "id": 146,
    "text": "polar",
    "type": "global function"
  }, {
    "id": 147,
    "text": "get",
    "type": "global function"
  }, {
    "id": 148,
    "text": "copy",
    "type": "global function"
  }, {
    "id": 149,
    "text": "norm2",
    "type": "global function"
  }, {
    "id": 150,
    "text": "type",
    "type": "global function"
  }, {
    "id": 151,
    "text": "divnum",
    "type": "global function"
  }, {
    "id": 152,
    "text": "mulnum",
    "type": "global function"
  }, {
    "id": 153,
    "text": "real",
    "type": "global function"
  }, {
    "id": 154,
    "text": "format",
    "type": "global function"
  }, {
    "id": 155,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 156,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 157,
    "text": "lower",
    "type": "global function"
  }, {
    "id": 158,
    "text": "print",
    "type": "global function"
  }, {
    "id": 159,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 160,
    "text": "imag",
    "type": "global function"
  }, {
    "id": 161,
    "text": "sqrt",
    "type": "global function"
  }, {
    "id": 162,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 163,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 164,
    "text": "cos",
    "type": "global function"
  }, {
    "id": 165,
    "text": "sin",
    "type": "global function"
  }, {
    "id": 166,
    "text": "exp",
    "type": "global function"
  }, {
    "id": 167,
    "text": "log",
    "type": "global function"
  }, {
    "id": 168,
    "text": "loadstring",
    "type": "global function"
  }, {
    "id": 169,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 170,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 171,
    "text": "match",
    "type": "global function"
  }, {
    "id": 172,
    "text": "type",
    "type": "global function"
  }, {
    "id": 173,
    "text": "atan2",
    "type": "global function"
  }, {
    "id": 174,
    "text": "",
    "type": "variable container"
  }, {
    "id": 175,
    "text": "",
    "type": "require container"
  }, {
    "id": 176,
    "text": "",
    "type": "local variable"
  }, {
    "id": 177,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 178,
    "text": "",
    "type": "local variable"
  }, {
    "id": 179,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 180,
    "text": "",
    "type": "local variable"
  }, {
    "id": 181,
    "text": "",
    "type": "n/a"
  }, {
    "id": 182,
    "text": "",
    "type": "local variable"
  }, {
    "id": 183,
    "text": "",
    "type": "n/a"
  }, {
    "id": 184,
    "text": "",
    "type": "global variable"
  }, {
    "id": 185,
    "text": "",
    "type": "n/a"
  }, {
    "id": 186,
    "text": "",
    "type": "global variable"
  }, {
    "id": 187,
    "text": "",
    "type": "n/a"
  }, {
    "id": 188,
    "text": "",
    "type": "global variable"
  }, {
    "id": 189,
    "text": "",
    "type": "n/a"
  }, {
    "id": 190,
    "text": "",
    "type": "global variable"
  }, {
    "id": 191,
    "text": "",
    "type": "n/a"
  }, {
    "id": 192,
    "text": "",
    "type": "global variable"
  }, {
    "id": 193,
    "text": "",
    "type": "n/a"
  }, {
    "id": 194,
    "text": "",
    "type": "global variable"
  }, {
    "id": 195,
    "text": "",
    "type": "n/a"
  }, {
    "id": 196,
    "text": "",
    "type": "global variable"
  }, {
    "id": 197,
    "text": "",
    "type": "n/a"
  }, {
    "id": 198,
    "text": "",
    "type": "global variable"
  }, {
    "id": 199,
    "text": "",
    "type": "n/a"
  }, {
    "id": 200,
    "text": "",
    "type": "global variable"
  }, {
    "id": 201,
    "text": "",
    "type": "n/a"
  }, {
    "id": 202,
    "text": "",
    "type": "global variable"
  }, {
    "id": 203,
    "text": "",
    "type": "n/a"
  }, {
    "id": 204,
    "text": "",
    "type": "global variable"
  }, {
    "id": 205,
    "text": "",
    "type": "n/a"
  }, {
    "id": 206,
    "text": "",
    "type": "global variable"
  }, {
    "id": 207,
    "text": "",
    "type": "n/a"
  }, {
    "id": 208,
    "text": "",
    "type": "global variable"
  }, {
    "id": 209,
    "text": "",
    "type": "n/a"
  }, {
    "id": 210,
    "text": "",
    "type": "interface container"
  }, {
    "id": 211,
    "text": "",
    "type": "interface"
  }, {
    "id": 212,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "require local variable"
  } ]
}