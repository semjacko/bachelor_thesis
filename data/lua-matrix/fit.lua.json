{
  "_filename": "fit.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-matrix/samples/fit.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 3,
    "label": "has",
    "to": 6
  }, {
    "from": 3,
    "label": "has",
    "to": 7
  }, {
    "from": 3,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 12,
    "label": "has",
    "to": 21
  }, {
    "from": 12,
    "label": "has",
    "to": 22
  }, {
    "from": 12,
    "label": "has",
    "to": 10
  }, {
    "from": 12,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 13
  }, {
    "from": 24,
    "label": "has",
    "to": 14
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 17
  }, {
    "from": 24,
    "label": "has",
    "to": 18
  }, {
    "from": 24,
    "label": "has",
    "to": 19
  }, {
    "from": 24,
    "label": "has",
    "to": 20
  }, {
    "from": 24,
    "label": "has",
    "to": 21
  }, {
    "from": 24,
    "label": "has",
    "to": 22
  }, {
    "from": 24,
    "label": "has",
    "to": 10
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 28,
    "label": "has",
    "to": 10
  }, {
    "from": 28,
    "label": "has",
    "to": 33
  }, {
    "from": 12,
    "label": "calls",
    "to": 39
  }, {
    "from": 12,
    "label": "calls",
    "to": 39
  }, {
    "from": 24,
    "label": "calls",
    "to": 39
  }, {
    "from": 24,
    "label": "calls",
    "to": 39
  }, {
    "from": 3,
    "label": "calls",
    "to": 41
  }, {
    "from": 12,
    "label": "calls",
    "to": 40
  }, {
    "from": 24,
    "label": "calls",
    "to": 40
  }, {
    "from": 28,
    "label": "calls",
    "to": 46
  }, {
    "from": 28,
    "label": "calls",
    "to": 46
  }, {
    "from": 28,
    "label": "calls",
    "to": 12
  }, {
    "from": 12,
    "label": "calls",
    "to": 42
  }, {
    "from": 24,
    "label": "calls",
    "to": 42
  }, {
    "from": 28,
    "label": "calls",
    "to": 42
  }, {
    "from": 12,
    "label": "calls",
    "to": 38
  }, {
    "from": 12,
    "label": "calls",
    "to": 38
  }, {
    "from": 24,
    "label": "calls",
    "to": 38
  }, {
    "from": 24,
    "label": "calls",
    "to": 38
  }, {
    "from": 3,
    "label": "calls",
    "to": 44
  }, {
    "from": 34,
    "label": "calls",
    "to": 43
  }, {
    "from": 28,
    "label": "calls",
    "to": 45
  }, {
    "from": 12,
    "label": "calls",
    "to": 3
  }, {
    "from": 24,
    "label": "calls",
    "to": 3
  }, {
    "from": 2,
    "label": "contains",
    "to": 34
  }, {
    "from": 34,
    "label": "declares",
    "to": 3
  }, {
    "from": 34,
    "label": "declares",
    "to": 12
  }, {
    "from": 34,
    "label": "declares",
    "to": 24
  }, {
    "from": 34,
    "label": "declares",
    "to": 28
  }, {
    "from": 2,
    "label": "declares",
    "to": 35
  }, {
    "from": 2,
    "label": "declares",
    "to": 36
  }, {
    "from": 2,
    "label": "declares",
    "to": 37
  }, {
    "from": 2,
    "label": "contains",
    "to": 47
  }, {
    "from": 2,
    "label": "contains",
    "to": 48
  }, {
    "from": 47,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 48,
    "label": "initializes",
    "to": 51
  }, {
    "from": 51,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 52
  }, {
    "from": 49,
    "label": "represents",
    "to": 53
  }, {
    "from": 52,
    "label": "provides",
    "to": 53
  }, {
    "from": 54,
    "label": "requires",
    "to": 2
  }, {
    "from": 49,
    "label": "contains",
    "to": 12
  }, {
    "from": 49,
    "label": "contains",
    "to": 24
  }, {
    "from": 49,
    "label": "contains",
    "to": 28
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "matrix",
    "type": "module"
  }, {
    "id": 2,
    "text": "fit",
    "type": "module"
  }, {
    "id": 3,
    "text": "local function getresults( mtx )\r\n\tassert( #mtx+1 == #mtx[1], \"Cannot calculate Results\" )\r\n\tmtx:dogauss()\r\n\t-- tresults\r\n\tlocal cols = #mtx[1]\r\n\tlocal tres = {}\r\n\tfor i = 1,#mtx do\r\n\t\ttres[i] = mtx[i][cols]\r\n\tend\r\n\treturn unpack( tres )\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "assert( #mtx+1 == #mtx[1], \"Cannot calculate Results\" )",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "mtx:dogauss()",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "local cols = #mtx[1]",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local tres = {}",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "for i = 1,#mtx do\r\n\t\ttres[i] = mtx[i][cols]\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 9,
    "text": "tres[i] = mtx[i][cols]",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function fit.linear( x_values,y_values )\r\n\t-- x_values = { x1,x2,x3,...,xn }\r\n\t-- y_values = { y1,y2,y3,...,yn }\r\n\t\r\n\t-- values for A matrix\r\n\tlocal a_vals = {}\r\n\t-- values for Y vector\r\n\tlocal y_vals = {}\r\n\r\n\tfor i,v in ipairs( x_values ) do\r\n\t\ta_vals[i] = { 1, v }\r\n\t\ty_vals[i] = { y_values[i] }\r\n\tend\r\n\r\n\t-- create both Matrixes\r\n\tlocal A = matrix:new( a_vals )\r\n\tlocal Y = matrix:new( y_vals )\r\n\r\n\tlocal ATA = matrix.mul( matrix.transpose(A), A )\r\n\tlocal ATY = matrix.mul( matrix.transpose(A), Y )\r\n\r\n\tlocal ATAATY = matrix.concath(ATA,ATY)\r\n\r\n\treturn getresults( ATAATY )\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local a_vals = {}",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local y_vals = {}",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "for i,v in ipairs( x_values ) do\r\n\t\ta_vals[i] = { 1, v }\r\n\t\ty_vals[i] = { y_values[i] }\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 16,
    "text": "a_vals[i] = { 1, v }",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "y_vals[i] = { y_values[i] }",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "local A = matrix:new( a_vals )",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local Y = matrix:new( y_vals )",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local ATA = matrix.mul( matrix.transpose(A), A )",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "local ATY = matrix.mul( matrix.transpose(A), Y )",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "local ATAATY = matrix.concath(ATA,ATY)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function fit.parabola( x_values,y_values )\r\n\t-- x_values = { x1,x2,x3,...,xn }\r\n\t-- y_values = { y1,y2,y3,...,yn }\r\n\r\n\t-- values for A matrix\r\n\tlocal a_vals = {}\r\n\t-- values for Y vector\r\n\tlocal y_vals = {}\r\n\r\n\tfor i,v in ipairs( x_values ) do\r\n\t\ta_vals[i] = { 1, v, v*v }\r\n\t\ty_vals[i] = { y_values[i] }\r\n\tend\r\n\r\n\t-- create both Matrixes\r\n\tlocal A = matrix:new( a_vals )\r\n\tlocal Y = matrix:new( y_vals )\r\n\r\n\tlocal ATA = matrix.mul( matrix.transpose(A), A )\r\n\tlocal ATY = matrix.mul( matrix.transpose(A), Y )\r\n\r\n\tlocal ATAATY = matrix.concath(ATA,ATY)\r\n\r\n\treturn getresults( ATAATY )\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "for i,v in ipairs( x_values ) do\r\n\t\ta_vals[i] = { 1, v, v*v }\r\n\t\ty_vals[i] = { y_values[i] }\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 26,
    "text": "a_vals[i] = { 1, v, v*v }",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function fit.exponential( x_values,y_values )\r\n\t-- convert to linear problem\r\n\t-- ln(y) = ln(a) + b * ln(x)\r\n\tfor i,v in ipairs( x_values ) do\r\n\t\tx_values[i] = math.log( v )\r\n\t\ty_values[i] = math.log( y_values[i] )\r\n\tend\r\n\r\n\tlocal a,b = fit.linear( x_values,y_values )\r\n\r\n\treturn math.exp(a), b\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "for i,v in ipairs( x_values ) do\r\n\t\tx_values[i] = math.log( v )\r\n\t\ty_values[i] = math.log( y_values[i] )\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 30,
    "text": "x_values[i] = math.log( v )",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "y_values[i] = math.log( y_values[i] )",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "local a,b = fit.linear( x_values,y_values )",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "",
    "type": "function container"
  }, {
    "id": 35,
    "text": "linear",
    "type": "global function"
  }, {
    "id": 36,
    "text": "exponential",
    "type": "global function"
  }, {
    "id": 37,
    "text": "parabola",
    "type": "global function"
  }, {
    "id": 38,
    "text": "transpose",
    "type": "global function"
  }, {
    "id": 39,
    "text": "mul",
    "type": "global function"
  }, {
    "id": 40,
    "text": "concath",
    "type": "global function"
  }, {
    "id": 41,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 42,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 43,
    "text": "require",
    "type": "global function"
  }, {
    "id": 44,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 45,
    "text": "exp",
    "type": "global function"
  }, {
    "id": 46,
    "text": "log",
    "type": "global function"
  }, {
    "id": 47,
    "text": "",
    "type": "variable container"
  }, {
    "id": 48,
    "text": "",
    "type": "require container"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  }, {
    "id": 50,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 51,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 52,
    "text": "",
    "type": "interface container"
  }, {
    "id": 53,
    "text": "",
    "type": "interface"
  }, {
    "id": 54,
    "text": "",
    "type": "require local variable"
  } ]
}