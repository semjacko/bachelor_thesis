{
  "_filename": "pipe-server.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/winapi/examples/pipe-server.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 12,
    "label": "has",
    "to": 9
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 9
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 18
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 23,
    "label": "has",
    "to": 28
  }, {
    "from": 23,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "calls",
    "to": 31
  }, {
    "from": 16,
    "label": "calls",
    "to": 34
  }, {
    "from": 30,
    "label": "calls",
    "to": 35
  }, {
    "from": 16,
    "label": "calls",
    "to": 36
  }, {
    "from": 30,
    "label": "calls",
    "to": 16
  }, {
    "from": 2,
    "label": "calls",
    "to": 33
  }, {
    "from": 30,
    "label": "calls",
    "to": 37
  }, {
    "from": 16,
    "label": "calls",
    "to": 2
  }, {
    "from": 16,
    "label": "calls",
    "to": 32
  }, {
    "from": 1,
    "label": "contains",
    "to": 30
  }, {
    "from": 30,
    "label": "declares",
    "to": 2
  }, {
    "from": 30,
    "label": "declares",
    "to": 12
  }, {
    "from": 30,
    "label": "declares",
    "to": 14
  }, {
    "from": 30,
    "label": "declares",
    "to": 16
  }, {
    "from": 30,
    "label": "declares",
    "to": 21
  }, {
    "from": 30,
    "label": "declares",
    "to": 23
  }, {
    "from": 1,
    "label": "contains",
    "to": 39
  }, {
    "from": 1,
    "label": "contains",
    "to": 40
  }, {
    "from": 39,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 39,
    "label": "initializes",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  }, {
    "from": 39,
    "label": "initializes",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 40,
    "label": "initializes",
    "to": 38
  }, {
    "from": 17,
    "label": "hasArgument",
    "to": 21
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "pipe-server",
    "type": "module"
  }, {
    "id": 2,
    "text": "function fwrap (f,co)\r\n    local obj = {}\r\n    local started\r\n    function obj:read ()\r\n        if not started then\r\n            f:read_async(co)\r\n            started = true\r\n        end\r\n        return yield()\r\n    end\r\n    function obj:write (s)\r\n        return f:write(s)\r\n    end\r\n    return obj\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local obj = {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "local started",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "function obj:read ()\r\n        if not started then\r\n            f:read_async(co)\r\n            started = true\r\n        end\r\n        return yield()\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 6,
    "text": "if not started then\r\n            f:read_async(co)\r\n            started = true\r\n        end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "f:read_async(co)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "started = true",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "function obj:write (s)\r\n        return f:write(s)\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function obj:read ()\r\n        if not started then\r\n            f:read_async(co)\r\n            started = true\r\n        end\r\n        return yield()\r\n    end",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function obj:write (s)\r\n        return f:write(s)\r\n    end",
    "type": "function"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function winapi.make_pipe_server_async(fun)\r\n    winapi.make_pipe_server(function(f)\r\n        local co = coroutine.wrap(fun)\r\n        co(fwrap(f,co))\r\n    end)\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "winapi.make_pipe_server(function(f)\r\n        local co = coroutine.wrap(fun)\r\n        co(fwrap(f,co))\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "local co = coroutine.wrap(fun)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "co(fwrap(f,co))",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function(f)\r\n        local co = coroutine.wrap(fun)\r\n        co(fwrap(f,co))\r\n    end",
    "type": "function"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function(f)\r\n    while true do\r\n        local res = f:read()\r\n        if res == 'close' then break end\r\n        f:write(res:upper())\r\n    end\r\n    print 'finis'\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "while true do\r\n        local res = f:read()\r\n        if res == 'close' then break end\r\n        f:write(res:upper())\r\n    end",
    "type": "statement:while"
  }, {
    "id": 25,
    "text": "local res = f:read()",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "if res == 'close' then break end",
    "type": "statement:if"
  }, {
    "id": 27,
    "text": "f:write(res:upper())",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "print 'finis'",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "",
    "type": "function container"
  }, {
    "id": 31,
    "text": "sleep",
    "type": "global function"
  }, {
    "id": 32,
    "text": "make_pipe_server",
    "type": "global function"
  }, {
    "id": 33,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 34,
    "text": "wrap",
    "type": "global function"
  }, {
    "id": 35,
    "text": "print",
    "type": "global function"
  }, {
    "id": 36,
    "text": "co",
    "type": "global function"
  }, {
    "id": 37,
    "text": "require",
    "type": "global function"
  }, {
    "id": 38,
    "text": "",
    "type": "global variable"
  }, {
    "id": 39,
    "text": "",
    "type": "variable container"
  }, {
    "id": 40,
    "text": "",
    "type": "require container"
  }, {
    "id": 41,
    "text": "",
    "type": "local variable"
  }, {
    "id": 42,
    "text": "",
    "type": "n/a"
  }, {
    "id": 43,
    "text": "",
    "type": "local variable"
  }, {
    "id": 44,
    "text": "",
    "type": "n/a"
  }, {
    "id": 45,
    "text": "",
    "type": "local variable"
  }, {
    "id": 46,
    "text": "",
    "type": "n/a"
  } ]
}