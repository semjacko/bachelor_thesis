{
  "_filename": "lc.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/winapi/lc.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 3
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 12
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 3
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 3
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 25,
    "label": "has",
    "to": 31
  }, {
    "from": 25,
    "label": "has",
    "to": 32
  }, {
    "from": 24,
    "label": "has",
    "to": 3
  }, {
    "from": 24,
    "label": "has",
    "to": 3
  }, {
    "from": 24,
    "label": "has",
    "to": 3
  }, {
    "from": 24,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 12
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 3
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 12
  }, {
    "from": 44,
    "label": "has",
    "to": 35
  }, {
    "from": 44,
    "label": "has",
    "to": 36
  }, {
    "from": 44,
    "label": "has",
    "to": 37
  }, {
    "from": 44,
    "label": "has",
    "to": 3
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 39,
    "label": "has",
    "to": 3
  }, {
    "from": 39,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 47,
    "label": "has",
    "to": 53
  }, {
    "from": 47,
    "label": "has",
    "to": 42
  }, {
    "from": 47,
    "label": "has",
    "to": 54
  }, {
    "from": 47,
    "label": "has",
    "to": 55
  }, {
    "from": 47,
    "label": "has",
    "to": 56
  }, {
    "from": 47,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 47,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 59,
    "label": "has",
    "to": 66
  }, {
    "from": 47,
    "label": "has",
    "to": 3
  }, {
    "from": 47,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 42
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 68,
    "label": "has",
    "to": 74
  }, {
    "from": 68,
    "label": "has",
    "to": 75
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 77,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 80
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 75,
    "label": "has",
    "to": 85
  }, {
    "from": 68,
    "label": "has",
    "to": 86
  }, {
    "from": 68,
    "label": "has",
    "to": 3
  }, {
    "from": 68,
    "label": "has",
    "to": 87
  }, {
    "from": 88,
    "label": "has",
    "to": 42
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 88,
    "label": "has",
    "to": 12
  }, {
    "from": 88,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 88,
    "label": "has",
    "to": 3
  }, {
    "from": 88,
    "label": "has",
    "to": 92
  }, {
    "from": 93,
    "label": "has",
    "to": 42
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 93,
    "label": "has",
    "to": 95
  }, {
    "from": 93,
    "label": "has",
    "to": 96
  }, {
    "from": 93,
    "label": "has",
    "to": 97
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 93,
    "label": "has",
    "to": 100
  }, {
    "from": 93,
    "label": "has",
    "to": 101
  }, {
    "from": 93,
    "label": "has",
    "to": 102
  }, {
    "from": 93,
    "label": "has",
    "to": 103
  }, {
    "from": 93,
    "label": "has",
    "to": 3
  }, {
    "from": 93,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 105,
    "label": "has",
    "to": 107
  }, {
    "from": 105,
    "label": "has",
    "to": 42
  }, {
    "from": 105,
    "label": "has",
    "to": 108
  }, {
    "from": 105,
    "label": "has",
    "to": 3
  }, {
    "from": 105,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 42
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 110,
    "label": "has",
    "to": 114
  }, {
    "from": 110,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 3
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 121,
    "label": "has",
    "to": 123
  }, {
    "from": 121,
    "label": "has",
    "to": 3
  }, {
    "from": 121,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 106
  }, {
    "from": 125,
    "label": "has",
    "to": 42
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 3
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 125,
    "label": "has",
    "to": 52
  }, {
    "from": 125,
    "label": "has",
    "to": 12
  }, {
    "from": 125,
    "label": "has",
    "to": 128
  }, {
    "from": 125,
    "label": "has",
    "to": 129
  }, {
    "from": 125,
    "label": "has",
    "to": 130
  }, {
    "from": 125,
    "label": "has",
    "to": 131
  }, {
    "from": 125,
    "label": "has",
    "to": 132
  }, {
    "from": 125,
    "label": "has",
    "to": 133
  }, {
    "from": 125,
    "label": "has",
    "to": 134
  }, {
    "from": 125,
    "label": "has",
    "to": 135
  }, {
    "from": 125,
    "label": "has",
    "to": 136
  }, {
    "from": 125,
    "label": "has",
    "to": 137
  }, {
    "from": 125,
    "label": "has",
    "to": 138
  }, {
    "from": 125,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 119
  }, {
    "from": 139,
    "label": "has",
    "to": 122
  }, {
    "from": 139,
    "label": "has",
    "to": 123
  }, {
    "from": 139,
    "label": "has",
    "to": 3
  }, {
    "from": 125,
    "label": "has",
    "to": 3
  }, {
    "from": 125,
    "label": "has",
    "to": 140
  }, {
    "from": 11,
    "label": "calls",
    "to": 145
  }, {
    "from": 16,
    "label": "calls",
    "to": 145
  }, {
    "from": 141,
    "label": "calls",
    "to": 145
  }, {
    "from": 141,
    "label": "calls",
    "to": 145
  }, {
    "from": 141,
    "label": "calls",
    "to": 145
  }, {
    "from": 141,
    "label": "calls",
    "to": 145
  }, {
    "from": 141,
    "label": "calls",
    "to": 145
  }, {
    "from": 141,
    "label": "calls",
    "to": 145
  }, {
    "from": 141,
    "label": "calls",
    "to": 145
  }, {
    "from": 141,
    "label": "calls",
    "to": 145
  }, {
    "from": 141,
    "label": "calls",
    "to": 2
  }, {
    "from": 141,
    "label": "calls",
    "to": 2
  }, {
    "from": 141,
    "label": "calls",
    "to": 2
  }, {
    "from": 141,
    "label": "calls",
    "to": 2
  }, {
    "from": 141,
    "label": "calls",
    "to": 156
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 144
  }, {
    "from": 141,
    "label": "calls",
    "to": 149
  }, {
    "from": 141,
    "label": "calls",
    "to": 5
  }, {
    "from": 141,
    "label": "calls",
    "to": 5
  }, {
    "from": 141,
    "label": "calls",
    "to": 150
  }, {
    "from": 141,
    "label": "calls",
    "to": 150
  }, {
    "from": 141,
    "label": "calls",
    "to": 150
  }, {
    "from": 11,
    "label": "calls",
    "to": 147
  }, {
    "from": 16,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 147
  }, {
    "from": 141,
    "label": "calls",
    "to": 151
  }, {
    "from": 141,
    "label": "calls",
    "to": 143
  }, {
    "from": 141,
    "label": "calls",
    "to": 143
  }, {
    "from": 141,
    "label": "calls",
    "to": 11
  }, {
    "from": 141,
    "label": "calls",
    "to": 11
  }, {
    "from": 141,
    "label": "calls",
    "to": 16
  }, {
    "from": 5,
    "label": "calls",
    "to": 152
  }, {
    "from": 141,
    "label": "calls",
    "to": 153
  }, {
    "from": 141,
    "label": "calls",
    "to": 148
  }, {
    "from": 141,
    "label": "calls",
    "to": 154
  }, {
    "from": 141,
    "label": "calls",
    "to": 155
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 146
  }, {
    "from": 141,
    "label": "calls",
    "to": 157
  }, {
    "from": 1,
    "label": "contains",
    "to": 141
  }, {
    "from": 141,
    "label": "declares",
    "to": 2
  }, {
    "from": 141,
    "label": "declares",
    "to": 5
  }, {
    "from": 141,
    "label": "declares",
    "to": 11
  }, {
    "from": 141,
    "label": "declares",
    "to": 16
  }, {
    "from": 141,
    "label": "declares",
    "to": 20
  }, {
    "from": 141,
    "label": "declares",
    "to": 24
  }, {
    "from": 141,
    "label": "declares",
    "to": 34
  }, {
    "from": 141,
    "label": "declares",
    "to": 39
  }, {
    "from": 141,
    "label": "declares",
    "to": 47
  }, {
    "from": 141,
    "label": "declares",
    "to": 68
  }, {
    "from": 141,
    "label": "declares",
    "to": 88
  }, {
    "from": 141,
    "label": "declares",
    "to": 93
  }, {
    "from": 141,
    "label": "declares",
    "to": 105
  }, {
    "from": 141,
    "label": "declares",
    "to": 110
  }, {
    "from": 141,
    "label": "declares",
    "to": 116
  }, {
    "from": 141,
    "label": "declares",
    "to": 118
  }, {
    "from": 141,
    "label": "declares",
    "to": 121
  }, {
    "from": 141,
    "label": "declares",
    "to": 125
  }, {
    "from": 1,
    "label": "contains",
    "to": 158
  }, {
    "from": 1,
    "label": "contains",
    "to": 159
  }, {
    "from": 158,
    "label": "initializes",
    "to": 160
  }, {
    "from": 160,
    "label": "assigns",
    "to": 161
  }, {
    "from": 158,
    "label": "initializes",
    "to": 162
  }, {
    "from": 162,
    "label": "assigns",
    "to": 163
  }, {
    "from": 158,
    "label": "initializes",
    "to": 164
  }, {
    "from": 164,
    "label": "assigns",
    "to": 165
  }, {
    "from": 158,
    "label": "initializes",
    "to": 166
  }, {
    "from": 166,
    "label": "assigns",
    "to": 167
  }, {
    "from": 158,
    "label": "initializes",
    "to": 168
  }, {
    "from": 168,
    "label": "assigns",
    "to": 169
  }, {
    "from": 158,
    "label": "initializes",
    "to": 170
  }, {
    "from": 158,
    "label": "initializes",
    "to": 171
  }, {
    "from": 158,
    "label": "initializes",
    "to": 172
  }, {
    "from": 172,
    "label": "assigns",
    "to": 173
  }, {
    "from": 158,
    "label": "initializes",
    "to": 174
  }, {
    "from": 174,
    "label": "assigns",
    "to": 175
  }, {
    "from": 158,
    "label": "initializes",
    "to": 176
  }, {
    "from": 176,
    "label": "assigns",
    "to": 177
  }, {
    "from": 158,
    "label": "initializes",
    "to": 178
  }, {
    "from": 178,
    "label": "assigns",
    "to": 179
  }, {
    "from": 158,
    "label": "initializes",
    "to": 180
  }, {
    "from": 180,
    "label": "assigns",
    "to": 181
  }, {
    "from": 158,
    "label": "initializes",
    "to": 182
  }, {
    "from": 182,
    "label": "assigns",
    "to": 183
  }, {
    "from": 158,
    "label": "initializes",
    "to": 184
  }, {
    "from": 159,
    "label": "initializes",
    "to": 185
  }, {
    "from": 185,
    "label": "requires",
    "to": 142
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 34
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 118
  }, {
    "from": 139,
    "label": "hasArgument",
    "to": 121
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "lc",
    "type": "module"
  }, {
    "id": 2,
    "text": "function dollar_subst(s,tbl)\r\n  return (s:gsub('%$%((%a+)%)',tbl))\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 5,
    "text": "local function push_brace_stack (newv)\r\n    newv = newv or {}\r\n    newv.lev = 0\r\n    push(bstack,btop)\r\n    btop = newv\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "newv = newv or {}",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "newv.lev = 0",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "push(bstack,btop)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "btop = newv",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function register_functions (names,cnames)\r\n    local out = {}\r\n    for i = 1,#names do\r\n        append(out,('   {\"%s\",l_%s},'):format(names[i],cnames[i]))\r\n    end\r\n    return table.concat(out,'\\n')\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local out = {}",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "for i = 1,#names do\r\n        append(out,('   {\"%s\",l_%s},'):format(names[i],cnames[i]))\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 14,
    "text": "append(out,('   {\"%s\",l_%s},'):format(names[i],cnames[i]))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "local function finalizers (names)\r\n    local out = {}\r\n    for i = 1,#names do\r\n        append(out,names[i]..\"(L);\")\r\n    end\r\n    return table.concat(out,'\\n')\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "for i = 1,#names do\r\n        append(out,names[i]..\"(L);\")\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 18,
    "text": "append(out,names[i]..\"(L);\")",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function()\r\n    if btop.lev then\r\n        btop.lev = btop.lev + 1\r\n    end\r\n    return nil,true --> pass-through macro\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "if btop.lev then\r\n        btop.lev = btop.lev + 1\r\n    end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "btop.lev = btop.lev + 1",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function(get,put)\r\n    if not btop.lev then\r\n        return nil,true\r\n    elseif btop.lev == 0 then\r\n        local res\r\n        if btop.handler then res = btop.handler(get,put) end\r\n        if not res then res = put:space() '}' end\r\n        btop = pop(bstack)\r\n        return res\r\n    else\r\n        btop.lev = btop.lev - 1\r\n        return nil,true --> pass-through macro\r\n    end\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "if not btop.lev then\r\n        return nil,true\r\n    elseif btop.lev == 0 then\r\n        local res\r\n        if btop.handler then res = btop.handler(get,put) end\r\n        if not res then res = put:space() '}' end\r\n        btop = pop(bstack)\r\n        return res\r\n    else\r\n        btop.lev = btop.lev - 1\r\n        return nil,true --> pass-through macro\r\n    end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "local res",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "if btop.handler then res = btop.handler(get,put) end",
    "type": "statement:if"
  }, {
    "id": 28,
    "text": "res = btop.handler(get,put)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "if not res then res = put:space() '}' end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "res = put:space() '}'",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "btop = pop(bstack)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "btop.lev = btop.lev - 1",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function()\r\n        local out = {}\r\n        local funs = register_functions(btop.names,btop.cnames)\r\n        local final = finalizers(btop.finalizers)\r\n        append(out,dollar_subst(finis, {\r\n            cname = cname,\r\n            name = name,\r\n            funs = funs,\r\n            finalizers = final\r\n        }))\r\n        return table.concat(out,'\\n')\r\n    end",
    "type": "function"
  }, {
    "id": 35,
    "text": "local funs = register_functions(btop.names,btop.cnames)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "local final = finalizers(btop.finalizers)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "append(out,dollar_subst(finis, {\r\n            cname = cname,\r\n            name = name,\r\n            funs = funs,\r\n            finalizers = final\r\n        }))",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function(get)\r\n    local name = get:string()\r\n    local cname = name:gsub('%.','_')\r\n    get:expecting '{'\r\n    local out = preamble .. typedefs\r\n    push_brace_stack{\r\n      name = name, cname = cname,\r\n      names = {}, cnames = {}, finalizers = {},\r\n      handler = function()\r\n        local out = {}\r\n        local funs = register_functions(btop.names,btop.cnames)\r\n        local final = finalizers(btop.finalizers)\r\n        append(out,dollar_subst(finis, {\r\n            cname = cname,\r\n            name = name,\r\n            funs = funs,\r\n            finalizers = final\r\n        }))\r\n        return table.concat(out,'\\n')\r\n    end }\r\n    module = btop\r\n    return out\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local name = get:string()",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "local cname = name:gsub('%.','_')",
    "type": "statement:localassign"
  }, {
    "id": 42,
    "text": "get:expecting '{'",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "local out = preamble .. typedefs",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "push_brace_stack{\r\n      name = name, cname = cname,\r\n      names = {}, cnames = {}, finalizers = {},\r\n      handler = function()\r\n        local out = {}\r\n        local funs = register_functions(btop.names,btop.cnames)\r\n        local final = finalizers(btop.finalizers)\r\n        append(out,dollar_subst(finis, {\r\n            cname = cname,\r\n            name = name,\r\n            funs = funs,\r\n            finalizers = final\r\n        }))\r\n        return table.concat(out,'\\n')\r\n    end }",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "module = btop",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function(get)\r\n    local fname = get:name()\r\n    local cname = (btop.ns and btop.ns..'_' or '')..fname\r\n    append(btop.names,fname)\r\n    append(btop.cnames,cname)\r\n    get:expecting '('\r\n    local args = get:list():strip_spaces()\r\n    get:expecting '{'\r\n    local t,space = get()\r\n    indent = space:gsub('^%s*[\\n\\r]',''):gsub('%s$','')\r\n    local out = {\"static int l_\"..cname..\"(lua_State *L) {\"}\r\n    if btop.massage_arg then\r\n        btop.massage_arg(args)\r\n    end\r\n    for i,arg in ipairs(args) do\r\n        local mac = arg[1][2]..'_init'\r\n        if arg[3] and arg[3][1] == '=' then\r\n            mac = mac .. 'o'\r\n            i = i .. ',' .. arg[4][2]\r\n        end\r\n        if not arg[2] then M.error(\"parameter must be TYPE NAME [= VALUE]\") end\r\n        append(out,indent..mac..'('..arg[2][2]..','..i..');')\r\n    end\r\n    --append(out,space)\r\n    return table.concat(out,'\\n')..space\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "local fname = get:name()",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local cname = (btop.ns and btop.ns..'_' or '')..fname",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "append(btop.names,fname)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "append(btop.cnames,cname)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "get:expecting '('",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "local args = get:list():strip_spaces()",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "local t,space = get()",
    "type": "statement:localassign"
  }, {
    "id": 55,
    "text": "indent = space:gsub('^%s*[\\n\\r]',''):gsub('%s$','')",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "local out = {\"static int l_\"..cname..\"(lua_State *L) {\"}",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "if btop.massage_arg then\r\n        btop.massage_arg(args)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "btop.massage_arg(args)",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "for i,arg in ipairs(args) do\r\n        local mac = arg[1][2]..'_init'\r\n        if arg[3] and arg[3][1] == '=' then\r\n            mac = mac .. 'o'\r\n            i = i .. ',' .. arg[4][2]\r\n        end\r\n        if not arg[2] then M.error(\"parameter must be TYPE NAME [= VALUE]\") end\r\n        append(out,indent..mac..'('..arg[2][2]..','..i..');')\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 60,
    "text": "local mac = arg[1][2]..'_init'",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "if arg[3] and arg[3][1] == '=' then\r\n            mac = mac .. 'o'\r\n            i = i .. ',' .. arg[4][2]\r\n        end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "mac = mac .. 'o'",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "i = i .. ',' .. arg[4][2]",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "if not arg[2] then M.error(\"parameter must be TYPE NAME [= VALUE]\") end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "M.error(\"parameter must be TYPE NAME [= VALUE]\")",
    "type": "statement:functioncall"
  }, {
    "id": 66,
    "text": "append(out,indent..mac..'('..arg[2][2]..','..i..');')",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "function(get,put)\r\n    get:expecting '{'\r\n    local consts = get:list '}' :strip_spaces()\r\n    --for k,v in pairs(btop) do io.stderr:write(k,'=',tostring(v),'\\n') end\r\n    -- os.exit()\r\n    local fname = 'set_'..btop.cname..'_constants'\r\n    local out = { 'static void '..fname..'(lua_State *L) {'}\r\n    if not btop.finalizers then M.error(\"not inside a module\") end\r\n    append(btop.finalizers,fname)\r\n    for _,c in ipairs(consts) do\r\n        local type,value,name\r\n        if #c == 1 then -- a simple int constant: CONST\r\n            name = c:pick(1)\r\n            type = 'Int'\r\n            value = name\r\n        else -- Type CONST [ = VALUE ]\r\n            type = c:pick(1)\r\n            name = c:pick(2)\r\n            if #c == 2 then\r\n                value = name\r\n            else\r\n                value = c:pick(4)\r\n            end\r\n        end\r\n        append(out,('%s_set(\"%s\",%s);'):format(type,name,value ))\r\n    end\r\n    append(out,'}')\r\n    return table.concat(out,'\\n')\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "local consts = get:list '}' :strip_spaces()",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "local fname = 'set_'..btop.cname..'_constants'",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local out = { 'static void '..fname..'(lua_State *L) {'}",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "if not btop.finalizers then M.error(\"not inside a module\") end",
    "type": "statement:if"
  }, {
    "id": 73,
    "text": "M.error(\"not inside a module\")",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "append(btop.finalizers,fname)",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "for _,c in ipairs(consts) do\r\n        local type,value,name\r\n        if #c == 1 then -- a simple int constant: CONST\r\n            name = c:pick(1)\r\n            type = 'Int'\r\n            value = name\r\n        else -- Type CONST [ = VALUE ]\r\n            type = c:pick(1)\r\n            name = c:pick(2)\r\n            if #c == 2 then\r\n                value = name\r\n            else\r\n                value = c:pick(4)\r\n            end\r\n        end\r\n        append(out,('%s_set(\"%s\",%s);'):format(type,name,value ))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 76,
    "text": "local type,value,name",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "if #c == 1 then -- a simple int constant: CONST\r\n            name = c:pick(1)\r\n            type = 'Int'\r\n            value = name\r\n        else -- Type CONST [ = VALUE ]\r\n            type = c:pick(1)\r\n            name = c:pick(2)\r\n            if #c == 2 then\r\n                value = name\r\n            else\r\n                value = c:pick(4)\r\n            end\r\n        end",
    "type": "statement:if"
  }, {
    "id": 78,
    "text": "name = c:pick(1)",
    "type": "statement:assign"
  }, {
    "id": 79,
    "text": "type = 'Int'",
    "type": "statement:assign"
  }, {
    "id": 80,
    "text": "value = name",
    "type": "statement:assign"
  }, {
    "id": 81,
    "text": "type = c:pick(1)",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "name = c:pick(2)",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "if #c == 2 then\r\n                value = name\r\n            else\r\n                value = c:pick(4)\r\n            end",
    "type": "statement:if"
  }, {
    "id": 84,
    "text": "value = c:pick(4)",
    "type": "statement:assign"
  }, {
    "id": 85,
    "text": "append(out,('%s_set(\"%s\",%s);'):format(type,name,value ))",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "append(out,'}')",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 88,
    "text": "function(get)\r\n    get:expecting '{'\r\n    local asses = get:list '}' :strip_spaces()\r\n    local out = {}\r\n    for _,c in ipairs(asses) do\r\n        append(out,('%s_set(\"%s\",%s);\\n'):format(c:pick(1),c:pick(2),c:pick(4)) )\r\n    end\r\n    return table.concat(out,'\\n')\r\nend",
    "type": "function"
  }, {
    "id": 89,
    "text": "local asses = get:list '}' :strip_spaces()",
    "type": "statement:localassign"
  }, {
    "id": 90,
    "text": "for _,c in ipairs(asses) do\r\n        append(out,('%s_set(\"%s\",%s);\\n'):format(c:pick(1),c:pick(2),c:pick(4)) )\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 91,
    "text": "append(out,('%s_set(\"%s\",%s);\\n'):format(c:pick(1),c:pick(2),c:pick(4)) )",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "function(get)\r\n    get:expecting '{'\r\n    local block = tostring(get:upto '}')\r\n    local code_name = 'lua_code_block'\r\n    local out = {'static const char *'.. code_name .. ' = \"\"\\\\'}\r\n    for line in block:gmatch('([^\\r\\n]+)') do\r\n        line = line:gsub('\\\\','\\\\\\\\'):gsub('\"','\\\\\"')\r\n        append(out,'  \"'..line..'\\\\n\"\\\\')\r\n    end\r\n    append(out,';')\r\n    append(out,load_lua)\r\n    out = table.concat(out,'\\n')\r\n    append(module.finalizers,'load_lua_code')\r\n    return out\r\nend",
    "type": "function"
  }, {
    "id": 94,
    "text": "local block = tostring(get:upto '}')",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "local code_name = 'lua_code_block'",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "local out = {'static const char *'.. code_name .. ' = \"\"\\\\'}",
    "type": "statement:localassign"
  }, {
    "id": 97,
    "text": "for line in block:gmatch('([^\\r\\n]+)') do\r\n        line = line:gsub('\\\\','\\\\\\\\'):gsub('\"','\\\\\"')\r\n        append(out,'  \"'..line..'\\\\n\"\\\\')\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 98,
    "text": "line = line:gsub('\\\\','\\\\\\\\'):gsub('\"','\\\\\"')",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "append(out,'  \"'..line..'\\\\n\"\\\\')",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "append(out,';')",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "append(out,load_lua)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "out = table.concat(out,'\\n')",
    "type": "statement:assign"
  }, {
    "id": 103,
    "text": "append(module.finalizers,'load_lua_code')",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function(get)\r\n    local name = get:name()\r\n    append(module.finalizers,name)\r\n    get:expecting '{'\r\n    local body = tostring(get:upto '}')\r\n    return ('int %s(lua_State *L) {\\n%s}\\n'):format(name,body)\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "local name = get:name()",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "append(module.finalizers,name)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "local body = tostring(get:upto '}')",
    "type": "statement:localassign"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function(get)\r\n    get:expecting '{'\r\n    local body = get:upto '}'\r\n    local f = io.open(M.filename..'.lua','w')\r\n    f:write(tostring(body))\r\n    f:close()\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "local body = get:upto '}'",
    "type": "statement:localassign"
  }, {
    "id": 112,
    "text": "local f = io.open(M.filename..'.lua','w')",
    "type": "statement:localassign"
  }, {
    "id": 113,
    "text": "f:write(tostring(body))",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "function(t,v)\r\n        return t == 'iden' and v == 'constructor'\r\n    end",
    "type": "function"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function(args)\r\n        table.insert(args,1,pp)\r\n      end",
    "type": "function"
  }, {
    "id": 119,
    "text": "table.insert(args,1,pp)",
    "type": "statement:functioncall"
  }, {
    "id": 120,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 121,
    "text": "function(get,put)\r\n        append(module.finalizers,name..\"_register\")\r\n        local methods = register_functions(btop.names,btop.cnames)\r\n        return dollar_subst(end_klass,{methods=methods,klass=name,fargs=f_args,aargs=a_args})\r\n      end",
    "type": "function"
  }, {
    "id": 122,
    "text": "append(module.finalizers,name..\"_register\")",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "local methods = register_functions(btop.names,btop.cnames)",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function(get)\r\n    local name = get:name()\r\n    get:expecting '{'\r\n    local fields = get:upto (function(t,v)\r\n        return t == 'iden' and v == 'constructor'\r\n    end)\r\n    fields = tostring(fields):gsub('%s+$','\\n')\r\n    get:expecting '('\r\n    local out = {}\r\n    local args = get:list()\r\n    local f_args = args:strip_spaces()\r\n    local a_args = f_args:pick(2)\r\n    f_args = table.concat(args:__tostring(),',')\r\n    a_args = table.concat(a_args,',')\r\n    local subst = {klass=name,fields=fields,fargs=f_args,aargs=a_args }\r\n    local proto = dollar_subst(klass_ctor,subst)\r\n    subst.ctor = proto\r\n    append(out,dollar_subst(begin_klass,subst))\r\n    append(out,proto)\r\n    local pp = {{'iden',name},{'iden','this'}}\r\n    push_brace_stack{\r\n      names = {}, cnames = {}, ns = name, cname = name,\r\n      massage_arg = function(args)\r\n        table.insert(args,1,pp)\r\n      end,\r\n      handler = function(get,put)\r\n        append(module.finalizers,name..\"_register\")\r\n        local methods = register_functions(btop.names,btop.cnames)\r\n        return dollar_subst(end_klass,{methods=methods,klass=name,fargs=f_args,aargs=a_args})\r\n      end\r\n    }\r\n    return table.concat(out,'\\n')\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "local fields = get:upto (function(t,v)\r\n        return t == 'iden' and v == 'constructor'\r\n    end)",
    "type": "statement:localassign"
  }, {
    "id": 127,
    "text": "fields = tostring(fields):gsub('%s+$','\\n')",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "local args = get:list()",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "local f_args = args:strip_spaces()",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "local a_args = f_args:pick(2)",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "f_args = table.concat(args:__tostring(),',')",
    "type": "statement:assign"
  }, {
    "id": 132,
    "text": "a_args = table.concat(a_args,',')",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "local subst = {klass=name,fields=fields,fargs=f_args,aargs=a_args }",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "local proto = dollar_subst(klass_ctor,subst)",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "subst.ctor = proto",
    "type": "statement:assign"
  }, {
    "id": 136,
    "text": "append(out,dollar_subst(begin_klass,subst))",
    "type": "statement:functioncall"
  }, {
    "id": 137,
    "text": "append(out,proto)",
    "type": "statement:functioncall"
  }, {
    "id": 138,
    "text": "local pp = {{'iden',name},{'iden','this'}}",
    "type": "statement:localassign"
  }, {
    "id": 139,
    "text": "push_brace_stack{\r\n      names = {}, cnames = {}, ns = name, cname = name,\r\n      massage_arg = function(args)\r\n        table.insert(args,1,pp)\r\n      end,\r\n      handler = function(get,put)\r\n        append(module.finalizers,name..\"_register\")\r\n        local methods = register_functions(btop.names,btop.cnames)\r\n        return dollar_subst(end_klass,{methods=methods,klass=name,fargs=f_args,aargs=a_args})\r\n      end\r\n    }",
    "type": "statement:functioncall"
  }, {
    "id": 140,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 141,
    "text": "",
    "type": "function container"
  }, {
    "id": 142,
    "text": "macro",
    "type": "module"
  }, {
    "id": 143,
    "text": "error",
    "type": "global function"
  }, {
    "id": 144,
    "text": "define",
    "type": "global function"
  }, {
    "id": 145,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 146,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 147,
    "text": "append",
    "type": "global function"
  }, {
    "id": 148,
    "text": "open",
    "type": "global function"
  }, {
    "id": 149,
    "text": "pop",
    "type": "global function"
  }, {
    "id": 150,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 151,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 152,
    "text": "push",
    "type": "global function"
  }, {
    "id": 153,
    "text": "massage_arg",
    "type": "global function"
  }, {
    "id": 154,
    "text": "handler",
    "type": "global function"
  }, {
    "id": 155,
    "text": "require",
    "type": "global function"
  }, {
    "id": 156,
    "text": "putspace",
    "type": "global function"
  }, {
    "id": 157,
    "text": "get",
    "type": "global function"
  }, {
    "id": 158,
    "text": "",
    "type": "variable container"
  }, {
    "id": 159,
    "text": "",
    "type": "require container"
  }, {
    "id": 160,
    "text": "",
    "type": "local variable"
  }, {
    "id": 161,
    "text": "",
    "type": "n/a"
  }, {
    "id": 162,
    "text": "",
    "type": "local variable"
  }, {
    "id": 163,
    "text": "",
    "type": "n/a"
  }, {
    "id": 164,
    "text": "",
    "type": "local variable"
  }, {
    "id": 165,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 166,
    "text": "",
    "type": "local variable"
  }, {
    "id": 167,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 168,
    "text": "",
    "type": "local variable"
  }, {
    "id": 169,
    "text": "",
    "type": "n/a"
  }, {
    "id": 170,
    "text": "",
    "type": "local variable"
  }, {
    "id": 171,
    "text": "",
    "type": "local variable"
  }, {
    "id": 172,
    "text": "",
    "type": "local variable"
  }, {
    "id": 173,
    "text": "",
    "type": "string"
  }, {
    "id": 174,
    "text": "",
    "type": "local variable"
  }, {
    "id": 175,
    "text": "",
    "type": "string"
  }, {
    "id": 176,
    "text": "",
    "type": "local variable"
  }, {
    "id": 177,
    "text": "",
    "type": "string"
  }, {
    "id": 178,
    "text": "",
    "type": "local variable"
  }, {
    "id": 179,
    "text": "",
    "type": "string"
  }, {
    "id": 180,
    "text": "",
    "type": "local variable"
  }, {
    "id": 181,
    "text": "",
    "type": "string"
  }, {
    "id": 182,
    "text": "",
    "type": "local variable"
  }, {
    "id": 183,
    "text": "",
    "type": "string"
  }, {
    "id": 184,
    "text": "",
    "type": "global variable"
  }, {
    "id": 185,
    "text": "",
    "type": "require local variable"
  } ]
}