{
  "_filename": "util.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/getdoc/src/getdoc/util.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 4,
    "label": "calls",
    "to": 76
  }, {
    "from": 4,
    "label": "calls",
    "to": 76
  }, {
    "from": 4,
    "label": "calls",
    "to": 76
  }, {
    "from": 4,
    "label": "calls",
    "to": 76
  }, {
    "from": 4,
    "label": "calls",
    "to": 76
  }, {
    "from": 4,
    "label": "calls",
    "to": 76
  }, {
    "from": 4,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 5
  }, {
    "from": 2,
    "label": "calls",
    "to": 5
  }, {
    "from": 3,
    "label": "calls",
    "to": 50
  }, {
    "from": 3,
    "label": "calls",
    "to": 50
  }, {
    "from": 3,
    "label": "calls",
    "to": 50
  }, {
    "from": 2,
    "label": "calls",
    "to": 14
  }, {
    "from": 2,
    "label": "calls",
    "to": 14
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 12
  }, {
    "from": 5,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 14,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 14,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 30
  }, {
    "from": 22,
    "label": "has",
    "to": 31
  }, {
    "from": 22,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 36,
    "label": "has",
    "to": 39
  }, {
    "from": 36,
    "label": "has",
    "to": 40
  }, {
    "from": 36,
    "label": "has",
    "to": 41
  }, {
    "from": 22,
    "label": "has",
    "to": 42
  }, {
    "from": 22,
    "label": "has",
    "to": 43
  }, {
    "from": 22,
    "label": "has",
    "to": 44
  }, {
    "from": 22,
    "label": "has",
    "to": 45
  }, {
    "from": 22,
    "label": "has",
    "to": 46
  }, {
    "from": 21,
    "label": "has",
    "to": 47
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 12
  }, {
    "from": 14,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 61,
    "label": "has",
    "to": 65
  }, {
    "from": 61,
    "label": "has",
    "to": 66
  }, {
    "from": 58,
    "label": "has",
    "to": 67
  }, {
    "from": 58,
    "label": "has",
    "to": 68
  }, {
    "from": 55,
    "label": "has",
    "to": 69
  }, {
    "from": 55,
    "label": "has",
    "to": 70
  }, {
    "from": 55,
    "label": "has",
    "to": 71
  }, {
    "from": 55,
    "label": "has",
    "to": 72
  }, {
    "from": 55,
    "label": "has",
    "to": 73
  }, {
    "from": 50,
    "label": "has",
    "to": 74
  }, {
    "from": 50,
    "label": "has",
    "to": 12
  }, {
    "from": 50,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 12
  }, {
    "from": 76,
    "label": "has",
    "to": 12
  }, {
    "from": 76,
    "label": "has",
    "to": 12
  }, {
    "from": 76,
    "label": "has",
    "to": 12
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "calls",
    "to": 97
  }, {
    "from": 81,
    "label": "calls",
    "to": 97
  }, {
    "from": 81,
    "label": "calls",
    "to": 97
  }, {
    "from": 81,
    "label": "calls",
    "to": 97
  }, {
    "from": 81,
    "label": "calls",
    "to": 97
  }, {
    "from": 14,
    "label": "calls",
    "to": 93
  }, {
    "from": 5,
    "label": "calls",
    "to": 83
  }, {
    "from": 14,
    "label": "calls",
    "to": 91
  }, {
    "from": 14,
    "label": "calls",
    "to": 91
  }, {
    "from": 50,
    "label": "calls",
    "to": 91
  }, {
    "from": 50,
    "label": "calls",
    "to": 91
  }, {
    "from": 50,
    "label": "calls",
    "to": 91
  }, {
    "from": 50,
    "label": "calls",
    "to": 91
  }, {
    "from": 14,
    "label": "calls",
    "to": 85
  }, {
    "from": 5,
    "label": "calls",
    "to": 90
  }, {
    "from": 14,
    "label": "calls",
    "to": 14
  }, {
    "from": 14,
    "label": "calls",
    "to": 95
  }, {
    "from": 14,
    "label": "calls",
    "to": 87
  }, {
    "from": 81,
    "label": "calls",
    "to": 94
  }, {
    "from": 76,
    "label": "calls",
    "to": 88
  }, {
    "from": 14,
    "label": "calls",
    "to": 92
  }, {
    "from": 50,
    "label": "calls",
    "to": 92
  }, {
    "from": 50,
    "label": "calls",
    "to": 92
  }, {
    "from": 76,
    "label": "calls",
    "to": 92
  }, {
    "from": 50,
    "label": "calls",
    "to": 50
  }, {
    "from": 50,
    "label": "calls",
    "to": 50
  }, {
    "from": 14,
    "label": "calls",
    "to": 98
  }, {
    "from": 14,
    "label": "calls",
    "to": 96
  }, {
    "from": 1,
    "label": "contains",
    "to": 81
  }, {
    "from": 81,
    "label": "declares",
    "to": 5
  }, {
    "from": 81,
    "label": "declares",
    "to": 14
  }, {
    "from": 81,
    "label": "declares",
    "to": 50
  }, {
    "from": 81,
    "label": "declares",
    "to": 76
  }, {
    "from": 99,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 100
  }, {
    "from": 1,
    "label": "contains",
    "to": 101
  }, {
    "from": 100,
    "label": "initializes",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 100,
    "label": "initializes",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 100,
    "label": "initializes",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 100,
    "label": "initializes",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 100,
    "label": "initializes",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 100,
    "label": "initializes",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 100,
    "label": "initializes",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 100,
    "label": "initializes",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  }, {
    "from": 100,
    "label": "initializes",
    "to": 118
  }, {
    "from": 118,
    "label": "assigns",
    "to": 119
  }, {
    "from": 100,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 100,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "assigns",
    "to": 123
  }, {
    "from": 101,
    "label": "initializes",
    "to": 124
  }, {
    "from": 124,
    "label": "requires",
    "to": 89
  }, {
    "from": 101,
    "label": "initializes",
    "to": 125
  }, {
    "from": 125,
    "label": "requires",
    "to": 126
  }, {
    "from": 101,
    "label": "initializes",
    "to": 127
  }, {
    "from": 127,
    "label": "requires",
    "to": 82
  }, {
    "from": 101,
    "label": "initializes",
    "to": 128
  }, {
    "from": 128,
    "label": "requires",
    "to": 86
  }, {
    "from": 101,
    "label": "initializes",
    "to": 129
  }, {
    "from": 129,
    "label": "requires",
    "to": 84
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "util",
    "type": "module"
  }, {
    "id": 2,
    "text": "function createTableStructure(path)\r\n\tlocal root = {}\r\n\r\n\tif (string.find(path, \"%.lua\") ~= nil) then\r\n\r\n\t    root[path] = gdu.createTableOfComments(gdu.getAstFromFile(path))\r\n\r\n\telse\r\n\t    for file in lfs.dir(path) do\r\n\t        if file ~= \".\" and file ~= \"..\" then\r\n\t            local f = path..'/'..file\r\n\t            local attr = lfs.attributes (f)\r\n\t            assert (type(attr) == \"table\")\r\n\t            if attr.mode == \"directory\" then\r\n\t                root[f] = createTableStructure (f)\r\n\t            else\r\n\t            \tif string.find(file, \"%.lua\") ~= nil then\r\n\t                \troot[f] = gdu.createTableOfComments(gdu.getAstFromFile(f), file)\r\n\t            \tend\r\n\t            end\r\n\t        end\r\n\t    end\r\n\tend\r\n    return root\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "function createFileStructure(path, address)\r\n\r\n\tif (create == true) then\r\n\t\tif address ~= nil then\r\n\r\n\t\t\tlfs.mkdir(address .. \"/_getdoc\")\r\n\t\t\taddress = address .. \"/_getdoc\"\r\n\t\telse\r\n\t\t\tlfs.mkdir(\"_getdoc\")\r\n\t\t\taddress = lfs.currentdir() .. \"/_getdoc\"\r\n\r\n\t\tend\r\n\r\n\t \tif(string.find(path, \"%.lua\") ~= nil) then\r\n\t\t\tlocal file = string.match(path, \"%/%a+%.lua\")\r\n\t\t    local ast = createTableStructure(path)\r\n\r\n\t\t\taddress = address .. file\r\n\t\t\tfile = io.open(address, \"w\")\r\n\t\t\tfile:write(gdu.generateReturnTable(ast))\r\n\t\t\tfile:close()\r\n\t\t\treturn\r\n\t\tend\r\n\tend\r\n\t    for file in lfs.dir(path) do\r\n\t        if file ~= \".\" and file ~= \"..\" then\r\n\r\n\t            local f = path..'/'..file\r\n\t            local attr = lfs.attributes (f)\r\n\r\n\t            assert (type(attr) == \"table\")\r\n\t            if attr.mode == \"directory\" then\r\n\t\t\t\t\tlocal dir_address = address .. \"/dir_\" .. file .. \".lua\"\r\n\t\t\t\t\tlocal dir_ast = createTableStructure(f)\r\n\t \t\t\t\tlocal dir_file = io.open(dir_address, \"w\")\r\n\t\t\t\t\tdir_file:write(gdu.generateReturnTable(dir_ast,file))\r\n\t\t\t\t\tdir_file:close()\r\n\r\n\t\t\t\t\taddress = address .. \"/\" ..file\r\n\t\t\t\t\tlfs.mkdir(address)\r\n\t \t\t\t\tcreate = false\r\n\r\n\t                createFileStructure (f, address)\r\n\t                address = address .. \"/..\"\r\n\t            else\r\n\t               \tif string.find(file, \"%.lua\") ~= nil then\t\t\t--matching all *.lua files\r\n\t            \t\tlocal add = address .. \"/\" .. file\r\n\t            \t\tlocal path2 = path\r\n\t            \t\tpath = path .. \"/\" .. file\r\n\t            \t\tlocal ast = createTableStructure(path)\r\n\t            \t\tpath = path2\r\n\r\n\t            \t\tfile = io.open(add, \"w\")\r\n\t\t\t\t\t\tfile:write(gdu.generateReturnTable(ast,nil))\r\n\t\t\t\t\t\tfile:close()\r\n\t            \tend\r\n\t            end\r\n\t        end\r\n\t    end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function getdocRequire(req, getdoc_path)\r\n\tlocal path = {}\r\n\tlocal final_path = \"\"\r\n\tlocal final_req = \"_getdoc.\"\r\n\tlocal f\r\n\tlocal pp = package.path\r\n\r\n\tfor part in string.gmatch(req, \"([^.]+)\") do\r\n\t\ttable.insert(path,part)\r\n\tend\r\n\r\n\tif gdu.searchFile(getdoc_path) == \"directory\" then\r\n\t\tfinal_path = getdoc_path .. \"/\"\r\n\telseif gdu.searchFile(lfs.currentdir() .. \"/_getdoc\") == \"directory\" then\r\n\t\tfinal_path = lfs.currentdir() .. \"/_getdoc/\"\r\n\telseif gdu.searchFile(lfs.currentdir() .. \"/../_getdoc\") == \"directory\" then\r\n\t\tfinal_path = lfs.currentdir() .. \"/../_getdoc/\"\r\n\telseif gdu.searchFile(lfs.currentdir() .. \"/../lib/lua/_getdoc\") == \"directory\" then\r\n\t\tfinal_path = lfs.currentdir() .. \"/../lib/lua/_getdoc/\"\r\n\telseif gdu.searchFile(lfs.currentdir() .. \"/../share/_getdoc\") == \"directory\" then\r\n\t\tfinal_path = lfs.currentdir() .. \"/../share/_getdoc/\"\r\n\telse\r\n\t\treturn\r\n\tend\r\n\r\n\tlocal i = 1\r\n\r\n\twhile i <= table.getn(path) do\r\n\r\n\t\tif gdu.searchFile(final_path .. \"/\" .. path[i]) == \"directory\" then\r\n\t\t\tfinal_path = final_path .. path[i] .. \"/\"\r\n\t\t\tfinal_req = final_req .. path[i] .. \".\"\r\n\t\telseif (gdu.searchFile(final_path .. \"/\" .. path[i] ..\".lua\")) == \"file\" then\r\n\t\t\tfinal_req = final_req .. path[i]\r\n\t\t\tfinal_path = final_path .. \"/\" .. path[i] ..\".lua\"\r\n\r\n\t\t\tpackage.path = package.path .. \";\" .. final_path\r\n\r\n\t\t\tf = require(final_req)\r\n\t\t\tbreak\r\n\t\telse\r\n\t\t\treturn\r\n\t\tend\r\n\t\ti = i + 1\r\n\tend\r\n\r\n\twhile i <= table.getn(path) do\r\n\t\ti = i + 1\r\n\r\n\t\tfor k,v in pairs(f) do\r\n\t\t\tif k == path[i] then\r\n\t\t\t\tf = v\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\r\n\tpackage.path = pp\r\n\treturn f\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function getAstFromFile(filepath)\r\n\tlocal f, text\r\n\tlocal ast\r\n\r\n\tf = io.input(filepath)\r\n\ttext = f:read(\"*a\")\r\n\tf:close()\r\n\r\n\tast = m.processText(text)\r\n\r\n\treturn ast\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local f, text",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local ast",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "f = io.input(filepath)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "text = f:read(\"*a\")",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "ast = m.processText(text)",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function createTableOfComments(ast)\r\n\tlocal comment=nil\r\n\tlocal func_name=nil\r\n\r\n\tif (only == true) then\r\n\t\tfor k,v in pairs(func_table) do\r\n\t\t\tfunc_table[k] = nil\r\n\t\tend\r\n\t\tonly = false\r\n\tend\r\n\r\n\r\n\tif type(ast.data) == \"table\"  then\r\n\r\n\t\tif(ast.key==\"LocalFunction\" or ast.key==\"GlobalFunction\")then\r\n\r\n\t\t\tlocal info = {}\r\n\t\t\tinfo.type = \"function\"\r\n\t\t\tlocal param = {}\r\n   \t\t\tlocal var = {}\r\n   \t\t\tlocal ret = {}\r\n   \t\t\tlocal descr = \"\"\r\n   \t\t\tlocal fname = \"\"\r\n\r\n\t\t\tfunc_name = ast.name\r\n\t\t\tcomment = mu.getComment(ast)\r\n\r\n\t\t\tif (comment) then\r\n\t\t\t\tfor line in string.gmatch(comment, \"[^\\n]+\") do\r\n\t   \t\t\t\tlocal parsed = comments.Parse(line,\"luadoc\")\r\n\r\n\r\n\t   \t\t\t\tif parsed ~= nil then\r\n\t\t \t\t\t\tif parsed.type == \"name\" then\r\n\t\t \t\t\t\t\tfname = parsed.name\r\n\t\t \t\t\t\telseif parsed.type == \"param\" then\r\n\t\t \t\t\t\t\tvar[parsed.name] = parsed.text\r\n\r\n\t\t \t\t\t\telseif parsed.type == \"return\" then\r\n\t\t \t\t\t\t\tlocal r = string.match(parsed.text,\"[^%s]*\")\r\n\t\t \t\t\t\t\tret[r] = string.sub(parsed.text,string.len(r)+1)\r\n\t\t \t\t\t\telseif parsed.type == \"descr\" then\r\n\t\t \t\t\t\t\tdescr = descr .. parsed.text\r\n\t\t \t\t\t\tend\r\n\t\t \t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tinfo.parameters = var\r\n\t\t\tinfo.returns = ret\r\n\t\t\tinfo.description = descr\r\n\t\t\tinfo.name = fname\r\n\t\t\tfunc_table[func_name] = info\r\n\t\t\treturn\r\n\t\tend\r\n\r\n\t\tfor k,v in pairs(ast.data) do\r\n\r\n\t\t\tcreateTableOfComments(v)\r\n\r\n\t\tend\r\n\t\treturn func_table\r\n\tend\r\nend",
    "type": "function"
  }, {
    "id": 15,
    "text": "local comment=nil",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local func_name=nil",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if (only == true) then\r\n\t\tfor k,v in pairs(func_table) do\r\n\t\t\tfunc_table[k] = nil\r\n\t\tend\r\n\t\tonly = false\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "for k,v in pairs(func_table) do\r\n\t\t\tfunc_table[k] = nil\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 19,
    "text": "func_table[k] = nil",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "only = false",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "if type(ast.data) == \"table\"  then\r\n\r\n\t\tif(ast.key==\"LocalFunction\" or ast.key==\"GlobalFunction\")then\r\n\r\n\t\t\tlocal info = {}\r\n\t\t\tinfo.type = \"function\"\r\n\t\t\tlocal param = {}\r\n   \t\t\tlocal var = {}\r\n   \t\t\tlocal ret = {}\r\n   \t\t\tlocal descr = \"\"\r\n   \t\t\tlocal fname = \"\"\r\n\r\n\t\t\tfunc_name = ast.name\r\n\t\t\tcomment = mu.getComment(ast)\r\n\r\n\t\t\tif (comment) then\r\n\t\t\t\tfor line in string.gmatch(comment, \"[^\\n]+\") do\r\n\t   \t\t\t\tlocal parsed = comments.Parse(line,\"luadoc\")\r\n\r\n\r\n\t   \t\t\t\tif parsed ~= nil then\r\n\t\t \t\t\t\tif parsed.type == \"name\" then\r\n\t\t \t\t\t\t\tfname = parsed.name\r\n\t\t \t\t\t\telseif parsed.type == \"param\" then\r\n\t\t \t\t\t\t\tvar[parsed.name] = parsed.text\r\n\r\n\t\t \t\t\t\telseif parsed.type == \"return\" then\r\n\t\t \t\t\t\t\tlocal r = string.match(parsed.text,\"[^%s]*\")\r\n\t\t \t\t\t\t\tret[r] = string.sub(parsed.text,string.len(r)+1)\r\n\t\t \t\t\t\telseif parsed.type == \"descr\" then\r\n\t\t \t\t\t\t\tdescr = descr .. parsed.text\r\n\t\t \t\t\t\tend\r\n\t\t \t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tinfo.parameters = var\r\n\t\t\tinfo.returns = ret\r\n\t\t\tinfo.description = descr\r\n\t\t\tinfo.name = fname\r\n\t\t\tfunc_table[func_name] = info\r\n\t\t\treturn\r\n\t\tend\r\n\r\n\t\tfor k,v in pairs(ast.data) do\r\n\r\n\t\t\tcreateTableOfComments(v)\r\n\r\n\t\tend\r\n\t\treturn func_table\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "if(ast.key==\"LocalFunction\" or ast.key==\"GlobalFunction\")then\r\n\r\n\t\t\tlocal info = {}\r\n\t\t\tinfo.type = \"function\"\r\n\t\t\tlocal param = {}\r\n   \t\t\tlocal var = {}\r\n   \t\t\tlocal ret = {}\r\n   \t\t\tlocal descr = \"\"\r\n   \t\t\tlocal fname = \"\"\r\n\r\n\t\t\tfunc_name = ast.name\r\n\t\t\tcomment = mu.getComment(ast)\r\n\r\n\t\t\tif (comment) then\r\n\t\t\t\tfor line in string.gmatch(comment, \"[^\\n]+\") do\r\n\t   \t\t\t\tlocal parsed = comments.Parse(line,\"luadoc\")\r\n\r\n\r\n\t   \t\t\t\tif parsed ~= nil then\r\n\t\t \t\t\t\tif parsed.type == \"name\" then\r\n\t\t \t\t\t\t\tfname = parsed.name\r\n\t\t \t\t\t\telseif parsed.type == \"param\" then\r\n\t\t \t\t\t\t\tvar[parsed.name] = parsed.text\r\n\r\n\t\t \t\t\t\telseif parsed.type == \"return\" then\r\n\t\t \t\t\t\t\tlocal r = string.match(parsed.text,\"[^%s]*\")\r\n\t\t \t\t\t\t\tret[r] = string.sub(parsed.text,string.len(r)+1)\r\n\t\t \t\t\t\telseif parsed.type == \"descr\" then\r\n\t\t \t\t\t\t\tdescr = descr .. parsed.text\r\n\t\t \t\t\t\tend\r\n\t\t \t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\t\tinfo.parameters = var\r\n\t\t\tinfo.returns = ret\r\n\t\t\tinfo.description = descr\r\n\t\t\tinfo.name = fname\r\n\t\t\tfunc_table[func_name] = info\r\n\t\t\treturn\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 23,
    "text": "local info = {}",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "info.type = \"function\"",
    "type": "statement:assign"
  }, {
    "id": 25,
    "text": "local param = {}",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local var = {}",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local ret = {}",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local descr = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local fname = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "func_name = ast.name",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "comment = mu.getComment(ast)",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "if (comment) then\r\n\t\t\t\tfor line in string.gmatch(comment, \"[^\\n]+\") do\r\n\t   \t\t\t\tlocal parsed = comments.Parse(line,\"luadoc\")\r\n\r\n\r\n\t   \t\t\t\tif parsed ~= nil then\r\n\t\t \t\t\t\tif parsed.type == \"name\" then\r\n\t\t \t\t\t\t\tfname = parsed.name\r\n\t\t \t\t\t\telseif parsed.type == \"param\" then\r\n\t\t \t\t\t\t\tvar[parsed.name] = parsed.text\r\n\r\n\t\t \t\t\t\telseif parsed.type == \"return\" then\r\n\t\t \t\t\t\t\tlocal r = string.match(parsed.text,\"[^%s]*\")\r\n\t\t \t\t\t\t\tret[r] = string.sub(parsed.text,string.len(r)+1)\r\n\t\t \t\t\t\telseif parsed.type == \"descr\" then\r\n\t\t \t\t\t\t\tdescr = descr .. parsed.text\r\n\t\t \t\t\t\tend\r\n\t\t \t\t\tend\r\n\t\t\t\tend\r\n\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "for line in string.gmatch(comment, \"[^\\n]+\") do\r\n\t   \t\t\t\tlocal parsed = comments.Parse(line,\"luadoc\")\r\n\r\n\r\n\t   \t\t\t\tif parsed ~= nil then\r\n\t\t \t\t\t\tif parsed.type == \"name\" then\r\n\t\t \t\t\t\t\tfname = parsed.name\r\n\t\t \t\t\t\telseif parsed.type == \"param\" then\r\n\t\t \t\t\t\t\tvar[parsed.name] = parsed.text\r\n\r\n\t\t \t\t\t\telseif parsed.type == \"return\" then\r\n\t\t \t\t\t\t\tlocal r = string.match(parsed.text,\"[^%s]*\")\r\n\t\t \t\t\t\t\tret[r] = string.sub(parsed.text,string.len(r)+1)\r\n\t\t \t\t\t\telseif parsed.type == \"descr\" then\r\n\t\t \t\t\t\t\tdescr = descr .. parsed.text\r\n\t\t \t\t\t\tend\r\n\t\t \t\t\tend\r\n\t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 34,
    "text": "local parsed = comments.Parse(line,\"luadoc\")",
    "type": "statement:localassign"
  }, {
    "id": 35,
    "text": "if parsed ~= nil then\r\n\t\t \t\t\t\tif parsed.type == \"name\" then\r\n\t\t \t\t\t\t\tfname = parsed.name\r\n\t\t \t\t\t\telseif parsed.type == \"param\" then\r\n\t\t \t\t\t\t\tvar[parsed.name] = parsed.text\r\n\r\n\t\t \t\t\t\telseif parsed.type == \"return\" then\r\n\t\t \t\t\t\t\tlocal r = string.match(parsed.text,\"[^%s]*\")\r\n\t\t \t\t\t\t\tret[r] = string.sub(parsed.text,string.len(r)+1)\r\n\t\t \t\t\t\telseif parsed.type == \"descr\" then\r\n\t\t \t\t\t\t\tdescr = descr .. parsed.text\r\n\t\t \t\t\t\tend\r\n\t\t \t\t\tend",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "if parsed.type == \"name\" then\r\n\t\t \t\t\t\t\tfname = parsed.name\r\n\t\t \t\t\t\telseif parsed.type == \"param\" then\r\n\t\t \t\t\t\t\tvar[parsed.name] = parsed.text\r\n\r\n\t\t \t\t\t\telseif parsed.type == \"return\" then\r\n\t\t \t\t\t\t\tlocal r = string.match(parsed.text,\"[^%s]*\")\r\n\t\t \t\t\t\t\tret[r] = string.sub(parsed.text,string.len(r)+1)\r\n\t\t \t\t\t\telseif parsed.type == \"descr\" then\r\n\t\t \t\t\t\t\tdescr = descr .. parsed.text\r\n\t\t \t\t\t\tend",
    "type": "statement:if"
  }, {
    "id": 37,
    "text": "fname = parsed.name",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "var[parsed.name] = parsed.text",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "local r = string.match(parsed.text,\"[^%s]*\")",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "ret[r] = string.sub(parsed.text,string.len(r)+1)",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "descr = descr .. parsed.text",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "info.parameters = var",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "info.returns = ret",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "info.description = descr",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "info.name = fname",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "func_table[func_name] = info",
    "type": "statement:assign"
  }, {
    "id": 47,
    "text": "for k,v in pairs(ast.data) do\r\n\r\n\t\t\tcreateTableOfComments(v)\r\n\r\n\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 48,
    "text": "createTableOfComments(v)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function generateReturnTable(ast, dir)\r\n\r\n\tif dir ~= nil then\r\n\r\n\t\tret_table = 'return \\n{ ' .. dir .. ' = { \\n'\r\n\telse\r\n\t\tret_table = 'return \\n{ '\r\n\tend\r\n\r\n\tfor k,v in pairs(ast) do\r\n\r\n\t\tif v.type == \"function\" then\r\n\r\n\t\t\tret_table = ret_table .. '\\t' .. k .. ' = { \\n'\r\n\r\n\t\t    for a,b in pairs(v) do\r\n\r\n\t\t    \tif type(b) == \"table\" then\r\n\r\n\t\t    \t\tret_table = ret_table .. '\\t\\t' .. a .. ' = { \\n'\r\n\r\n\t\t    \t\tfor c,d in pairs(b) do\r\n\t\t    \t\t\tif type(d) == \"table\" then\r\n\r\n\t\t    \t\t\t\tret_table = ret_table .. '\\t\\t\\t' .. c .. ' = { ' ..  '\\n'\r\n\r\n\t\t    \t\t\t\tfor e,f in pairs(d) do\r\n\t\t    \t\t\t\t\tret_table = ret_table .. '\\t\\t\\t\\t' .. e .. \" = [[\" .. f .. \"]],\\n\"\r\n\t\t    \t\t\t\tend\r\n\t\t    \t\t\t\tret_table = ret_table .. '\\t\\t\\t}, \\n'\r\n\r\n\t\t    \t\t\telse ret_table = ret_table .. '\\t\\t\\t' .. c .. \" = [[\" .. d .. \"]],\\n\"\r\n\r\n\t\t    \t\t\tend\r\n\r\n\t\t    \t\tend\r\n\t\t    \t\tret_table = ret_table ..'\\t\\t}, \\n'\r\n\t\t    \telse\r\n\t\t    \t\tret_table = ret_table .. '\\t\\t' .. a .. \" = [[\" .. b .. \"]],\\n\"\r\n\t\t    \tend\r\n\r\n\t\t    end\r\n\t\t    ret_table = ret_table .. '\\t}, \\n'\r\n\r\n\t\telseif dir ~= nil then\r\n\t\t\tgenerateReturnTable(v,dir)\r\n\t\t\tret_table = ret_table ..'\\t} \\n}'\r\n\t\t\telse generateReturnTable(v,nil)\r\n\r\n\r\n\t\t    ret_table = ret_table ..'} \\n'\r\n\t\tend\r\n\tend\r\n\r\n\tonly = true\r\n\treturn ret_table\r\nend",
    "type": "function"
  }, {
    "id": 51,
    "text": "if dir ~= nil then\r\n\r\n\t\tret_table = 'return \\n{ ' .. dir .. ' = { \\n'\r\n\telse\r\n\t\tret_table = 'return \\n{ '\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "ret_table = 'return \\n{ ' .. dir .. ' = { \\n'",
    "type": "statement:assign"
  }, {
    "id": 53,
    "text": "ret_table = 'return \\n{ '",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "for k,v in pairs(ast) do\r\n\r\n\t\tif v.type == \"function\" then\r\n\r\n\t\t\tret_table = ret_table .. '\\t' .. k .. ' = { \\n'\r\n\r\n\t\t    for a,b in pairs(v) do\r\n\r\n\t\t    \tif type(b) == \"table\" then\r\n\r\n\t\t    \t\tret_table = ret_table .. '\\t\\t' .. a .. ' = { \\n'\r\n\r\n\t\t    \t\tfor c,d in pairs(b) do\r\n\t\t    \t\t\tif type(d) == \"table\" then\r\n\r\n\t\t    \t\t\t\tret_table = ret_table .. '\\t\\t\\t' .. c .. ' = { ' ..  '\\n'\r\n\r\n\t\t    \t\t\t\tfor e,f in pairs(d) do\r\n\t\t    \t\t\t\t\tret_table = ret_table .. '\\t\\t\\t\\t' .. e .. \" = [[\" .. f .. \"]],\\n\"\r\n\t\t    \t\t\t\tend\r\n\t\t    \t\t\t\tret_table = ret_table .. '\\t\\t\\t}, \\n'\r\n\r\n\t\t    \t\t\telse ret_table = ret_table .. '\\t\\t\\t' .. c .. \" = [[\" .. d .. \"]],\\n\"\r\n\r\n\t\t    \t\t\tend\r\n\r\n\t\t    \t\tend\r\n\t\t    \t\tret_table = ret_table ..'\\t\\t}, \\n'\r\n\t\t    \telse\r\n\t\t    \t\tret_table = ret_table .. '\\t\\t' .. a .. \" = [[\" .. b .. \"]],\\n\"\r\n\t\t    \tend\r\n\r\n\t\t    end\r\n\t\t    ret_table = ret_table .. '\\t}, \\n'\r\n\r\n\t\telseif dir ~= nil then\r\n\t\t\tgenerateReturnTable(v,dir)\r\n\t\t\tret_table = ret_table ..'\\t} \\n}'\r\n\t\t\telse generateReturnTable(v,nil)\r\n\r\n\r\n\t\t    ret_table = ret_table ..'} \\n'\r\n\t\tend\r\n\tend",
    "type": "statement:genericfor"
  }, {
    "id": 55,
    "text": "if v.type == \"function\" then\r\n\r\n\t\t\tret_table = ret_table .. '\\t' .. k .. ' = { \\n'\r\n\r\n\t\t    for a,b in pairs(v) do\r\n\r\n\t\t    \tif type(b) == \"table\" then\r\n\r\n\t\t    \t\tret_table = ret_table .. '\\t\\t' .. a .. ' = { \\n'\r\n\r\n\t\t    \t\tfor c,d in pairs(b) do\r\n\t\t    \t\t\tif type(d) == \"table\" then\r\n\r\n\t\t    \t\t\t\tret_table = ret_table .. '\\t\\t\\t' .. c .. ' = { ' ..  '\\n'\r\n\r\n\t\t    \t\t\t\tfor e,f in pairs(d) do\r\n\t\t    \t\t\t\t\tret_table = ret_table .. '\\t\\t\\t\\t' .. e .. \" = [[\" .. f .. \"]],\\n\"\r\n\t\t    \t\t\t\tend\r\n\t\t    \t\t\t\tret_table = ret_table .. '\\t\\t\\t}, \\n'\r\n\r\n\t\t    \t\t\telse ret_table = ret_table .. '\\t\\t\\t' .. c .. \" = [[\" .. d .. \"]],\\n\"\r\n\r\n\t\t    \t\t\tend\r\n\r\n\t\t    \t\tend\r\n\t\t    \t\tret_table = ret_table ..'\\t\\t}, \\n'\r\n\t\t    \telse\r\n\t\t    \t\tret_table = ret_table .. '\\t\\t' .. a .. \" = [[\" .. b .. \"]],\\n\"\r\n\t\t    \tend\r\n\r\n\t\t    end\r\n\t\t    ret_table = ret_table .. '\\t}, \\n'\r\n\r\n\t\telseif dir ~= nil then\r\n\t\t\tgenerateReturnTable(v,dir)\r\n\t\t\tret_table = ret_table ..'\\t} \\n}'\r\n\t\t\telse generateReturnTable(v,nil)\r\n\r\n\r\n\t\t    ret_table = ret_table ..'} \\n'\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 56,
    "text": "ret_table = ret_table .. '\\t' .. k .. ' = { \\n'",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "for a,b in pairs(v) do\r\n\r\n\t\t    \tif type(b) == \"table\" then\r\n\r\n\t\t    \t\tret_table = ret_table .. '\\t\\t' .. a .. ' = { \\n'\r\n\r\n\t\t    \t\tfor c,d in pairs(b) do\r\n\t\t    \t\t\tif type(d) == \"table\" then\r\n\r\n\t\t    \t\t\t\tret_table = ret_table .. '\\t\\t\\t' .. c .. ' = { ' ..  '\\n'\r\n\r\n\t\t    \t\t\t\tfor e,f in pairs(d) do\r\n\t\t    \t\t\t\t\tret_table = ret_table .. '\\t\\t\\t\\t' .. e .. \" = [[\" .. f .. \"]],\\n\"\r\n\t\t    \t\t\t\tend\r\n\t\t    \t\t\t\tret_table = ret_table .. '\\t\\t\\t}, \\n'\r\n\r\n\t\t    \t\t\telse ret_table = ret_table .. '\\t\\t\\t' .. c .. \" = [[\" .. d .. \"]],\\n\"\r\n\r\n\t\t    \t\t\tend\r\n\r\n\t\t    \t\tend\r\n\t\t    \t\tret_table = ret_table ..'\\t\\t}, \\n'\r\n\t\t    \telse\r\n\t\t    \t\tret_table = ret_table .. '\\t\\t' .. a .. \" = [[\" .. b .. \"]],\\n\"\r\n\t\t    \tend\r\n\r\n\t\t    end",
    "type": "statement:genericfor"
  }, {
    "id": 58,
    "text": "if type(b) == \"table\" then\r\n\r\n\t\t    \t\tret_table = ret_table .. '\\t\\t' .. a .. ' = { \\n'\r\n\r\n\t\t    \t\tfor c,d in pairs(b) do\r\n\t\t    \t\t\tif type(d) == \"table\" then\r\n\r\n\t\t    \t\t\t\tret_table = ret_table .. '\\t\\t\\t' .. c .. ' = { ' ..  '\\n'\r\n\r\n\t\t    \t\t\t\tfor e,f in pairs(d) do\r\n\t\t    \t\t\t\t\tret_table = ret_table .. '\\t\\t\\t\\t' .. e .. \" = [[\" .. f .. \"]],\\n\"\r\n\t\t    \t\t\t\tend\r\n\t\t    \t\t\t\tret_table = ret_table .. '\\t\\t\\t}, \\n'\r\n\r\n\t\t    \t\t\telse ret_table = ret_table .. '\\t\\t\\t' .. c .. \" = [[\" .. d .. \"]],\\n\"\r\n\r\n\t\t    \t\t\tend\r\n\r\n\t\t    \t\tend\r\n\t\t    \t\tret_table = ret_table ..'\\t\\t}, \\n'\r\n\t\t    \telse\r\n\t\t    \t\tret_table = ret_table .. '\\t\\t' .. a .. \" = [[\" .. b .. \"]],\\n\"\r\n\t\t    \tend",
    "type": "statement:if"
  }, {
    "id": 59,
    "text": "ret_table = ret_table .. '\\t\\t' .. a .. ' = { \\n'",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "for c,d in pairs(b) do\r\n\t\t    \t\t\tif type(d) == \"table\" then\r\n\r\n\t\t    \t\t\t\tret_table = ret_table .. '\\t\\t\\t' .. c .. ' = { ' ..  '\\n'\r\n\r\n\t\t    \t\t\t\tfor e,f in pairs(d) do\r\n\t\t    \t\t\t\t\tret_table = ret_table .. '\\t\\t\\t\\t' .. e .. \" = [[\" .. f .. \"]],\\n\"\r\n\t\t    \t\t\t\tend\r\n\t\t    \t\t\t\tret_table = ret_table .. '\\t\\t\\t}, \\n'\r\n\r\n\t\t    \t\t\telse ret_table = ret_table .. '\\t\\t\\t' .. c .. \" = [[\" .. d .. \"]],\\n\"\r\n\r\n\t\t    \t\t\tend\r\n\r\n\t\t    \t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 61,
    "text": "if type(d) == \"table\" then\r\n\r\n\t\t    \t\t\t\tret_table = ret_table .. '\\t\\t\\t' .. c .. ' = { ' ..  '\\n'\r\n\r\n\t\t    \t\t\t\tfor e,f in pairs(d) do\r\n\t\t    \t\t\t\t\tret_table = ret_table .. '\\t\\t\\t\\t' .. e .. \" = [[\" .. f .. \"]],\\n\"\r\n\t\t    \t\t\t\tend\r\n\t\t    \t\t\t\tret_table = ret_table .. '\\t\\t\\t}, \\n'\r\n\r\n\t\t    \t\t\telse ret_table = ret_table .. '\\t\\t\\t' .. c .. \" = [[\" .. d .. \"]],\\n\"\r\n\r\n\t\t    \t\t\tend",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "ret_table = ret_table .. '\\t\\t\\t' .. c .. ' = { ' ..  '\\n'",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "for e,f in pairs(d) do\r\n\t\t    \t\t\t\t\tret_table = ret_table .. '\\t\\t\\t\\t' .. e .. \" = [[\" .. f .. \"]],\\n\"\r\n\t\t    \t\t\t\tend",
    "type": "statement:genericfor"
  }, {
    "id": 64,
    "text": "ret_table = ret_table .. '\\t\\t\\t\\t' .. e .. \" = [[\" .. f .. \"]],\\n\"",
    "type": "statement:assign"
  }, {
    "id": 65,
    "text": "ret_table = ret_table .. '\\t\\t\\t}, \\n'",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "ret_table = ret_table .. '\\t\\t\\t' .. c .. \" = [[\" .. d .. \"]],\\n\"",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "ret_table = ret_table ..'\\t\\t}, \\n'",
    "type": "statement:assign"
  }, {
    "id": 68,
    "text": "ret_table = ret_table .. '\\t\\t' .. a .. \" = [[\" .. b .. \"]],\\n\"",
    "type": "statement:assign"
  }, {
    "id": 69,
    "text": "ret_table = ret_table .. '\\t}, \\n'",
    "type": "statement:assign"
  }, {
    "id": 70,
    "text": "generateReturnTable(v,dir)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "ret_table = ret_table ..'\\t} \\n}'",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "generateReturnTable(v,nil)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "ret_table = ret_table ..'} \\n'",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "only = true",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function searchFile(path)\r\n\tlocal attr = lfs.attributes (path)\r\n\tif type(attr) == \"table\" then\r\n\r\n\t\tif (attr.mode == \"directory\") then\r\n\t\t\treturn \"directory\"\r\n\t\telseif (attr.mode == \"file\") then\r\n\t\t\treturn \"file\"\r\n\t\tend\r\n\telse\r\n\t\treturn nil\r\n\tend\r\n\treturn nil\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "local attr = lfs.attributes (path)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "if type(attr) == \"table\" then\r\n\r\n\t\tif (attr.mode == \"directory\") then\r\n\t\t\treturn \"directory\"\r\n\t\telseif (attr.mode == \"file\") then\r\n\t\t\treturn \"file\"\r\n\t\tend\r\n\telse\r\n\t\treturn nil\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 79,
    "text": "if (attr.mode == \"directory\") then\r\n\t\t\treturn \"directory\"\r\n\t\telseif (attr.mode == \"file\") then\r\n\t\t\treturn \"file\"\r\n\t\tend",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "",
    "type": "function container"
  }, {
    "id": 82,
    "text": "io",
    "type": "module"
  }, {
    "id": 83,
    "text": "input",
    "type": "global function"
  }, {
    "id": 84,
    "text": "lfs",
    "type": "module"
  }, {
    "id": 85,
    "text": "getComment",
    "type": "global function"
  }, {
    "id": 86,
    "text": "comments",
    "type": "module"
  }, {
    "id": 87,
    "text": "Parse",
    "type": "global function"
  }, {
    "id": 88,
    "text": "attributes",
    "type": "global function"
  }, {
    "id": 89,
    "text": "metrics",
    "type": "module"
  }, {
    "id": 90,
    "text": "processText",
    "type": "global function"
  }, {
    "id": 91,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 92,
    "text": "type",
    "type": "global function"
  }, {
    "id": 93,
    "text": "len",
    "type": "global function"
  }, {
    "id": 94,
    "text": "module",
    "type": "global function"
  }, {
    "id": 95,
    "text": "match",
    "type": "global function"
  }, {
    "id": 96,
    "text": "gmatch",
    "type": "global function"
  }, {
    "id": 97,
    "text": "require",
    "type": "global function"
  }, {
    "id": 98,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "variable container"
  }, {
    "id": 101,
    "text": "",
    "type": "require container"
  }, {
    "id": 102,
    "text": "",
    "type": "local variable"
  }, {
    "id": 103,
    "text": "",
    "type": "n/a"
  }, {
    "id": 104,
    "text": "",
    "type": "local variable"
  }, {
    "id": 105,
    "text": "",
    "type": "n/a"
  }, {
    "id": 106,
    "text": "",
    "type": "local variable"
  }, {
    "id": 107,
    "text": "",
    "type": "n/a"
  }, {
    "id": 108,
    "text": "",
    "type": "local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "n/a"
  }, {
    "id": 110,
    "text": "",
    "type": "local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "n/a"
  }, {
    "id": 112,
    "text": "",
    "type": "local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "n/a"
  }, {
    "id": 114,
    "text": "",
    "type": "local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 116,
    "text": "",
    "type": "local variable"
  }, {
    "id": 117,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 118,
    "text": "",
    "type": "local variable"
  }, {
    "id": 119,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 120,
    "text": "",
    "type": "local variable"
  }, {
    "id": 121,
    "text": "",
    "type": "string"
  }, {
    "id": 122,
    "text": "",
    "type": "local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "boolean"
  }, {
    "id": 124,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 125,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 126,
    "text": "utils",
    "type": "module"
  }, {
    "id": 127,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 128,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 129,
    "text": "",
    "type": "require local variable"
  } ]
}