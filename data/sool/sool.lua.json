{
  "_filename": "sool.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/sool/sool.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 8,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 8,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 17
  }, {
    "from": 22,
    "label": "has",
    "to": 18
  }, {
    "from": 22,
    "label": "has",
    "to": 6
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 6
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 6
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 6
  }, {
    "from": 28,
    "label": "has",
    "to": 9
  }, {
    "from": 28,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 28,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 28,
    "label": "has",
    "to": 15
  }, {
    "from": 28,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 28,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 6
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 6
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 36,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 41
  }, {
    "from": 36,
    "label": "has",
    "to": 6
  }, {
    "from": 36,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 6
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 9
  }, {
    "from": 48,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 48,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 48,
    "label": "has",
    "to": 15
  }, {
    "from": 48,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 6
  }, {
    "from": 48,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 48,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 6
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 9
  }, {
    "from": 52,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 52,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 6
  }, {
    "from": 52,
    "label": "has",
    "to": 15
  }, {
    "from": 52,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 6
  }, {
    "from": 52,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 8,
    "label": "calls",
    "to": 56
  }, {
    "from": 22,
    "label": "calls",
    "to": 56
  }, {
    "from": 28,
    "label": "calls",
    "to": 56
  }, {
    "from": 54,
    "label": "calls",
    "to": 57
  }, {
    "from": 8,
    "label": "calls",
    "to": 55
  }, {
    "from": 28,
    "label": "calls",
    "to": 55
  }, {
    "from": 36,
    "label": "calls",
    "to": 55
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 28,
    "label": "calls",
    "to": 2
  }, {
    "from": 36,
    "label": "calls",
    "to": 36
  }, {
    "from": 36,
    "label": "calls",
    "to": 58
  }, {
    "from": 1,
    "label": "contains",
    "to": 54
  }, {
    "from": 54,
    "label": "declares",
    "to": 2
  }, {
    "from": 54,
    "label": "declares",
    "to": 8
  }, {
    "from": 54,
    "label": "declares",
    "to": 22
  }, {
    "from": 54,
    "label": "declares",
    "to": 24
  }, {
    "from": 54,
    "label": "declares",
    "to": 26
  }, {
    "from": 54,
    "label": "declares",
    "to": 28
  }, {
    "from": 54,
    "label": "declares",
    "to": 30
  }, {
    "from": 54,
    "label": "declares",
    "to": 32
  }, {
    "from": 54,
    "label": "declares",
    "to": 34
  }, {
    "from": 54,
    "label": "declares",
    "to": 36
  }, {
    "from": 54,
    "label": "declares",
    "to": 46
  }, {
    "from": 54,
    "label": "declares",
    "to": 48
  }, {
    "from": 54,
    "label": "declares",
    "to": 50
  }, {
    "from": 54,
    "label": "declares",
    "to": 52
  }, {
    "from": 1,
    "label": "contains",
    "to": 59
  }, {
    "from": 1,
    "label": "contains",
    "to": 60
  }, {
    "from": 59,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 59,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "assigns",
    "to": 64
  }, {
    "from": 59,
    "label": "initializes",
    "to": 65
  }, {
    "from": 65,
    "label": "assigns",
    "to": 66
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 46
  }, {
    "from": 14,
    "label": "hasArgument",
    "to": 50
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "sool",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function searchMethod (method, classList)\r\n  for i = 1, #classList do\r\n    local methodFound = classList[i][method]\r\n    if (methodFound) then \r\n      return methodFound\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "for i = 1, #classList do\r\n    local methodFound = classList[i][method]\r\n    if (methodFound) then \r\n      return methodFound\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 4,
    "text": "local methodFound = classList[i][method]",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if (methodFound) then \r\n      return methodFound\r\n    end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function class(superclasses)\r\n  return function(newClass)\r\n    local fixedSuperclassList\r\n  \r\n    if ((type(superclasses) == \"table\") and superclasses.class) then\r\n      fixedSuperclassList = {superclasses}\r\n    elseif (not superclasses) then\r\n      fixedSuperclassList = {}\r\n    else \r\n      fixedSuperclassList = superclasses\r\n    end\r\n  \r\n    setmetatable(newClass, {__index = function (t, method)\r\n      return searchMethod(method, fixedSuperclassList)\r\n    end})\r\n\r\n    newClass.__index = newClass\r\n\r\n\t--- Creates a new instance of the class. \r\n\t-- @name [class]:create\r\n\t-- @usage <pre class='example'>\r\n\t--        --Class constructor<br>\r\n\t--        function new(attribute1)\r\n\t--          <dir>\r\n\t--          local object = _M:create()<br>\r\n\t--          object.attribute1 = attribute1 --Attribute defined on constructor<br>\r\n\t--          object.attribute2 = \"SOME_VALUE\" --Default value for attribute<br>\r\n\t--          return object\r\n\t--          </dir>\r\n\t--        end\r\n    --        </pre>\r\n\r\n    function newClass:create()\r\n      local newInstance = {}\r\n      setmetatable(newInstance, newClass)\r\n      return newInstance\r\n    end\r\n\r\n\r\n\t--- Returns the class of the instance. \r\n\t-- @name [object]:class\r\n\t-- @usage <pre class='example'>\r\n\t--        print (sool.isA(object1:class(), Class1)\r\n    --        </pre>\r\n    -- @return the class of the instance.\r\n\r\n    function newClass:class()\r\n      return newClass\r\n    end\r\n\r\n    --- Returns the superclasses of the instance in a table.\r\n\t-- @name [object]:superclasses\r\n\t-- @usage <pre class='example'>\r\n\t--        local superclasses = object1:superclasses()<br>\r\n\t--        for i, v in ipairs(superclasses) do\r\n\t--          <dir>\r\n    --          -- do something with each class v\r\n\t--          </dir>\r\n\t--        end\r\n    --        </pre>\r\n    -- @return the superclasses of the instance in a table.\r\n    function newClass:superclasses()\r\n      return fixedSuperclassList\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local fixedSuperclassList",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "if ((type(superclasses) == \"table\") and superclasses.class) then\r\n      fixedSuperclassList = {superclasses}\r\n    elseif (not superclasses) then\r\n      fixedSuperclassList = {}\r\n    else \r\n      fixedSuperclassList = superclasses\r\n    end",
    "type": "statement:if"
  }, {
    "id": 11,
    "text": "fixedSuperclassList = {superclasses}",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "fixedSuperclassList = {}",
    "type": "statement:assign"
  }, {
    "id": 13,
    "text": "fixedSuperclassList = superclasses",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "setmetatable(newClass, {__index = function (t, method)\r\n      return searchMethod(method, fixedSuperclassList)\r\n    end})",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "newClass.__index = newClass",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "function newClass:create()\r\n      local newInstance = {}\r\n      setmetatable(newInstance, newClass)\r\n      return newInstance\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 17,
    "text": "local newInstance = {}",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "setmetatable(newInstance, newClass)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "function newClass:class()\r\n      return newClass\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 20,
    "text": "function newClass:superclasses()\r\n      return fixedSuperclassList\r\n    end",
    "type": "statement:globalfunction"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function newClass:create()\r\n      local newInstance = {}\r\n      setmetatable(newInstance, newClass)\r\n      return newInstance\r\n    end",
    "type": "function"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function newClass:class()\r\n      return newClass\r\n    end",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function newClass:superclasses()\r\n      return fixedSuperclassList\r\n    end",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function staticClass(superclasses)\r\n  return function(newClass)\r\n    local fixedSuperclassList\r\n  \r\n    if ((type(superclasses) == \"table\") and superclasses.class) then\r\n      fixedSuperclassList = {superclasses}\r\n    elseif (not superclasses) then\r\n      fixedSuperclassList = {}\r\n    else \r\n      fixedSuperclassList = superclasses\r\n    end\r\n  \r\n    setmetatable(newClass, {__index = function (t, method)\r\n      return searchMethod(method, fixedSuperclassList)\r\n    end})\r\n\r\n    newClass.__index = newClass\r\n\r\n\t--- Returns the static class itself. \r\n\t-- @name [staticClass]:class\r\n\t-- @usage <pre class='example'>\r\n\t--        print (sool.isA(staticClass1:class(), SomeOtherClass)\r\n    --        </pre>\r\n    -- @return the static class itself.\r\n    function newClass:class()\r\n      return newClass\r\n    end\r\n\r\n    --- Returns the superclasses of the static class in a table.\r\n\t-- @name [staticClass]:superclasses\r\n\t-- @usage <pre class='example'>\r\n\t--        local superclasses = object1:superclasses()<br>\r\n\t--        for i, v in ipairs(superclasses) do\r\n\t--          <dir>\r\n    --          -- do something with each class v\r\n\t--          </dir>\r\n\t--        end\r\n    --        </pre>\r\n    -- @return the superclasses of the static class in a table.\r\n    function newClass:superclasses()\r\n      return fixedSuperclassList\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function newClass:class()\r\n      return newClass\r\n    end",
    "type": "function"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function newClass:superclasses()\r\n      return fixedSuperclassList\r\n    end",
    "type": "function"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "function package()\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function isA(objectOrClass, superclass)\r\n  local retVal = false\r\n  \r\n  if ((type(objectOrClass) == \"table\") and objectOrClass.class) then\r\n    local currClass = objectOrClass:class()\r\n    if (currClass == superclass) then\r\n      retVal = true\r\n    else\r\n      local superclasses = currClass:superclass()\r\n      for _, currsuperclass in ipairs(superclasses) do\r\n        if (isA(currSuperclass, superclass)) then\r\n          retVal = true\r\n          break\r\n        end\r\n      end    \r\n    end    \r\n  end  \r\n  return retVal\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "local retVal = false",
    "type": "statement:localassign"
  }, {
    "id": 38,
    "text": "if ((type(objectOrClass) == \"table\") and objectOrClass.class) then\r\n    local currClass = objectOrClass:class()\r\n    if (currClass == superclass) then\r\n      retVal = true\r\n    else\r\n      local superclasses = currClass:superclass()\r\n      for _, currsuperclass in ipairs(superclasses) do\r\n        if (isA(currSuperclass, superclass)) then\r\n          retVal = true\r\n          break\r\n        end\r\n      end    \r\n    end    \r\n  end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "local currClass = objectOrClass:class()",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "if (currClass == superclass) then\r\n      retVal = true\r\n    else\r\n      local superclasses = currClass:superclass()\r\n      for _, currsuperclass in ipairs(superclasses) do\r\n        if (isA(currSuperclass, superclass)) then\r\n          retVal = true\r\n          break\r\n        end\r\n      end    \r\n    end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "retVal = true",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "local superclasses = currClass:superclass()",
    "type": "statement:localassign"
  }, {
    "id": 43,
    "text": "for _, currsuperclass in ipairs(superclasses) do\r\n        if (isA(currSuperclass, superclass)) then\r\n          retVal = true\r\n          break\r\n        end\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 44,
    "text": "if (isA(currSuperclass, superclass)) then\r\n          retVal = true\r\n          break\r\n        end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "function (t, method)\r\n      return searchMethod(method, fixedSuperclassList)\r\n    end",
    "type": "function"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function(newClass)\r\n    local fixedSuperclassList\r\n  \r\n    if ((type(superclasses) == \"table\") and superclasses.class) then\r\n      fixedSuperclassList = {superclasses}\r\n    elseif (not superclasses) then\r\n      fixedSuperclassList = {}\r\n    else \r\n      fixedSuperclassList = superclasses\r\n    end\r\n  \r\n    setmetatable(newClass, {__index = function (t, method)\r\n      return searchMethod(method, fixedSuperclassList)\r\n    end})\r\n\r\n    newClass.__index = newClass\r\n\r\n\t--- Creates a new instance of the class. \r\n\t-- @name [class]:create\r\n\t-- @usage <pre class='example'>\r\n\t--        --Class constructor<br>\r\n\t--        function new(attribute1)\r\n\t--          <dir>\r\n\t--          local object = _M:create()<br>\r\n\t--          object.attribute1 = attribute1 --Attribute defined on constructor<br>\r\n\t--          object.attribute2 = \"SOME_VALUE\" --Default value for attribute<br>\r\n\t--          return object\r\n\t--          </dir>\r\n\t--        end\r\n    --        </pre>\r\n\r\n    function newClass:create()\r\n      local newInstance = {}\r\n      setmetatable(newInstance, newClass)\r\n      return newInstance\r\n    end\r\n\r\n\r\n\t--- Returns the class of the instance. \r\n\t-- @name [object]:class\r\n\t-- @usage <pre class='example'>\r\n\t--        print (sool.isA(object1:class(), Class1)\r\n    --        </pre>\r\n    -- @return the class of the instance.\r\n\r\n    function newClass:class()\r\n      return newClass\r\n    end\r\n\r\n    --- Returns the superclasses of the instance in a table.\r\n\t-- @name [object]:superclasses\r\n\t-- @usage <pre class='example'>\r\n\t--        local superclasses = object1:superclasses()<br>\r\n\t--        for i, v in ipairs(superclasses) do\r\n\t--          <dir>\r\n    --          -- do something with each class v\r\n\t--          </dir>\r\n\t--        end\r\n    --        </pre>\r\n    -- @return the superclasses of the instance in a table.\r\n    function newClass:superclasses()\r\n      return fixedSuperclassList\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function (t, method)\r\n      return searchMethod(method, fixedSuperclassList)\r\n    end",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function(newClass)\r\n    local fixedSuperclassList\r\n  \r\n    if ((type(superclasses) == \"table\") and superclasses.class) then\r\n      fixedSuperclassList = {superclasses}\r\n    elseif (not superclasses) then\r\n      fixedSuperclassList = {}\r\n    else \r\n      fixedSuperclassList = superclasses\r\n    end\r\n  \r\n    setmetatable(newClass, {__index = function (t, method)\r\n      return searchMethod(method, fixedSuperclassList)\r\n    end})\r\n\r\n    newClass.__index = newClass\r\n\r\n\t--- Returns the static class itself. \r\n\t-- @name [staticClass]:class\r\n\t-- @usage <pre class='example'>\r\n\t--        print (sool.isA(staticClass1:class(), SomeOtherClass)\r\n    --        </pre>\r\n    -- @return the static class itself.\r\n    function newClass:class()\r\n      return newClass\r\n    end\r\n\r\n    --- Returns the superclasses of the static class in a table.\r\n\t-- @name [staticClass]:superclasses\r\n\t-- @usage <pre class='example'>\r\n\t--        local superclasses = object1:superclasses()<br>\r\n\t--        for i, v in ipairs(superclasses) do\r\n\t--          <dir>\r\n    --          -- do something with each class v\r\n\t--          </dir>\r\n\t--        end\r\n    --        </pre>\r\n    -- @return the superclasses of the static class in a table.\r\n    function newClass:superclasses()\r\n      return fixedSuperclassList\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "",
    "type": "function container"
  }, {
    "id": 55,
    "text": "type",
    "type": "global function"
  }, {
    "id": 56,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 57,
    "text": "module",
    "type": "global function"
  }, {
    "id": 58,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 59,
    "text": "",
    "type": "variable container"
  }, {
    "id": 60,
    "text": "",
    "type": "require container"
  }, {
    "id": 61,
    "text": "",
    "type": "local variable"
  }, {
    "id": 62,
    "text": "",
    "type": "n/a"
  }, {
    "id": 63,
    "text": "",
    "type": "local variable"
  }, {
    "id": 64,
    "text": "",
    "type": "n/a"
  }, {
    "id": 65,
    "text": "",
    "type": "local variable"
  }, {
    "id": 66,
    "text": "",
    "type": "n/a"
  } ]
}