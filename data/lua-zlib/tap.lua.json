{
  "_filename": "tap.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/lua-zlib/tap.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "calls",
    "to": 16
  }, {
    "from": 14,
    "label": "calls",
    "to": 18
  }, {
    "from": 11,
    "label": "calls",
    "to": 15
  }, {
    "from": 14,
    "label": "calls",
    "to": 17
  }, {
    "from": 1,
    "label": "contains",
    "to": 14
  }, {
    "from": 14,
    "label": "declares",
    "to": 2
  }, {
    "from": 14,
    "label": "declares",
    "to": 11
  }, {
    "from": 1,
    "label": "contains",
    "to": 19
  }, {
    "from": 1,
    "label": "contains",
    "to": 20
  }, {
    "from": 19,
    "label": "initializes",
    "to": 21
  }, {
    "from": 21,
    "label": "assigns",
    "to": 22
  }, {
    "from": 19,
    "label": "initializes",
    "to": 23
  }, {
    "from": 23,
    "label": "assigns",
    "to": 24
  }, {
    "from": 20,
    "label": "initializes",
    "to": 25
  }, {
    "from": 25,
    "label": "requires",
    "to": 26
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "tap",
    "type": "module"
  }, {
    "id": 2,
    "text": "function ok(assert_true, desc)\r\n   local msg = ( assert_true and \"ok \" or \"not ok \" ) .. counter\r\n   if ( not assert_true ) then\r\n      failed = true\r\n   end\r\n   if ( desc ) then\r\n      msg = msg .. \" - \" .. desc\r\n   end\r\n   print(msg)\r\n   counter = counter + 1\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local msg = ( assert_true and \"ok \" or \"not ok \" ) .. counter",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if ( not assert_true ) then\r\n      failed = true\r\n   end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "failed = true",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "if ( desc ) then\r\n      msg = msg .. \" - \" .. desc\r\n   end",
    "type": "statement:if"
  }, {
    "id": 7,
    "text": "msg = msg .. \" - \" .. desc",
    "type": "statement:assign"
  }, {
    "id": 8,
    "text": "print(msg)",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "counter = counter + 1",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function exit()\r\n   os.exit(failed and 1 or 0)\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "os.exit(failed and 1 or 0)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "",
    "type": "function container"
  }, {
    "id": 15,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 16,
    "text": "print",
    "type": "global function"
  }, {
    "id": 17,
    "text": "module",
    "type": "global function"
  }, {
    "id": 18,
    "text": "require",
    "type": "global function"
  }, {
    "id": 19,
    "text": "",
    "type": "variable container"
  }, {
    "id": 20,
    "text": "",
    "type": "require container"
  }, {
    "id": 21,
    "text": "",
    "type": "local variable"
  }, {
    "id": 22,
    "text": "",
    "type": "number"
  }, {
    "id": 23,
    "text": "",
    "type": "local variable"
  }, {
    "id": 24,
    "text": "",
    "type": "boolean"
  }, {
    "id": 25,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 26,
    "text": "(os)",
    "type": "module"
  } ]
}