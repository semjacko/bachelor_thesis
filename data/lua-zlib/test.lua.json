{
  "_filename": "test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lua-zlib/test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 2,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 2,
    "label": "has",
    "to": 11
  }, {
    "from": 2,
    "label": "has",
    "to": 12
  }, {
    "from": 2,
    "label": "has",
    "to": 13
  }, {
    "from": 2,
    "label": "has",
    "to": 14
  }, {
    "from": 2,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 22,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 29,
    "label": "has",
    "to": 35
  }, {
    "from": 29,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 37,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 38
  }, {
    "from": 43,
    "label": "has",
    "to": 39
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 43,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 43,
    "label": "has",
    "to": 49
  }, {
    "from": 43,
    "label": "has",
    "to": 50
  }, {
    "from": 43,
    "label": "has",
    "to": 51
  }, {
    "from": 52,
    "label": "has",
    "to": 53
  }, {
    "from": 52,
    "label": "has",
    "to": 54
  }, {
    "from": 52,
    "label": "has",
    "to": 55
  }, {
    "from": 52,
    "label": "has",
    "to": 56
  }, {
    "from": 52,
    "label": "has",
    "to": 57
  }, {
    "from": 52,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 59,
    "label": "has",
    "to": 66
  }, {
    "from": 59,
    "label": "has",
    "to": 55
  }, {
    "from": 59,
    "label": "has",
    "to": 56
  }, {
    "from": 59,
    "label": "has",
    "to": 67
  }, {
    "from": 59,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 69,
    "label": "has",
    "to": 73
  }, {
    "from": 69,
    "label": "has",
    "to": 74
  }, {
    "from": 69,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 76,
    "label": "has",
    "to": 80
  }, {
    "from": 76,
    "label": "has",
    "to": 81
  }, {
    "from": 76,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 83,
    "label": "has",
    "to": 85
  }, {
    "from": 83,
    "label": "has",
    "to": 86
  }, {
    "from": 83,
    "label": "has",
    "to": 87
  }, {
    "from": 83,
    "label": "has",
    "to": 88
  }, {
    "from": 83,
    "label": "has",
    "to": 89
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 89,
    "label": "has",
    "to": 94
  }, {
    "from": 89,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 95,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 95,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 95,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 89,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 89,
    "label": "has",
    "to": 106
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 83,
    "label": "has",
    "to": 108
  }, {
    "from": 83,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 70
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 110,
    "label": "has",
    "to": 112
  }, {
    "from": 110,
    "label": "has",
    "to": 113
  }, {
    "from": 113,
    "label": "has",
    "to": 114
  }, {
    "from": 110,
    "label": "has",
    "to": 115
  }, {
    "from": 110,
    "label": "has",
    "to": 116
  }, {
    "from": 110,
    "label": "has",
    "to": 117
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 118,
    "label": "has",
    "to": 121
  }, {
    "from": 118,
    "label": "has",
    "to": 122
  }, {
    "from": 118,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 79
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 126,
    "label": "has",
    "to": 114
  }, {
    "from": 126,
    "label": "has",
    "to": 127
  }, {
    "from": 2,
    "label": "calls",
    "to": 118
  }, {
    "from": 16,
    "label": "calls",
    "to": 137
  }, {
    "from": 16,
    "label": "calls",
    "to": 137
  }, {
    "from": 22,
    "label": "calls",
    "to": 137
  }, {
    "from": 29,
    "label": "calls",
    "to": 138
  }, {
    "from": 52,
    "label": "calls",
    "to": 138
  }, {
    "from": 52,
    "label": "calls",
    "to": 138
  }, {
    "from": 76,
    "label": "calls",
    "to": 146
  }, {
    "from": 110,
    "label": "calls",
    "to": 146
  }, {
    "from": 22,
    "label": "calls",
    "to": 141
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 128,
    "label": "calls",
    "to": 142
  }, {
    "from": 83,
    "label": "calls",
    "to": 142
  }, {
    "from": 76,
    "label": "calls",
    "to": 144
  }, {
    "from": 110,
    "label": "calls",
    "to": 144
  }, {
    "from": 2,
    "label": "calls",
    "to": 29
  }, {
    "from": 22,
    "label": "calls",
    "to": 132
  }, {
    "from": 69,
    "label": "calls",
    "to": 150
  }, {
    "from": 69,
    "label": "calls",
    "to": 150
  }, {
    "from": 69,
    "label": "calls",
    "to": 150
  }, {
    "from": 76,
    "label": "calls",
    "to": 150
  }, {
    "from": 110,
    "label": "calls",
    "to": 150
  }, {
    "from": 110,
    "label": "calls",
    "to": 150
  }, {
    "from": 110,
    "label": "calls",
    "to": 150
  }, {
    "from": 43,
    "label": "calls",
    "to": 135
  }, {
    "from": 29,
    "label": "calls",
    "to": 132
  }, {
    "from": 37,
    "label": "calls",
    "to": 132
  }, {
    "from": 43,
    "label": "calls",
    "to": 132
  }, {
    "from": 52,
    "label": "calls",
    "to": 132
  }, {
    "from": 52,
    "label": "calls",
    "to": 132
  }, {
    "from": 59,
    "label": "calls",
    "to": 132
  }, {
    "from": 69,
    "label": "calls",
    "to": 132
  }, {
    "from": 83,
    "label": "calls",
    "to": 132
  }, {
    "from": 110,
    "label": "calls",
    "to": 132
  }, {
    "from": 16,
    "label": "calls",
    "to": 134
  }, {
    "from": 16,
    "label": "calls",
    "to": 134
  }, {
    "from": 22,
    "label": "calls",
    "to": 134
  }, {
    "from": 2,
    "label": "calls",
    "to": 22
  }, {
    "from": 118,
    "label": "calls",
    "to": 130
  }, {
    "from": 83,
    "label": "calls",
    "to": 140
  }, {
    "from": 128,
    "label": "calls",
    "to": 2
  }, {
    "from": 2,
    "label": "calls",
    "to": 16
  }, {
    "from": 16,
    "label": "calls",
    "to": 133
  }, {
    "from": 37,
    "label": "calls",
    "to": 133
  }, {
    "from": 43,
    "label": "calls",
    "to": 133
  }, {
    "from": 52,
    "label": "calls",
    "to": 133
  }, {
    "from": 52,
    "label": "calls",
    "to": 133
  }, {
    "from": 59,
    "label": "calls",
    "to": 133
  }, {
    "from": 69,
    "label": "calls",
    "to": 133
  }, {
    "from": 76,
    "label": "calls",
    "to": 133
  }, {
    "from": 83,
    "label": "calls",
    "to": 133
  }, {
    "from": 110,
    "label": "calls",
    "to": 133
  }, {
    "from": 83,
    "label": "calls",
    "to": 139
  }, {
    "from": 83,
    "label": "calls",
    "to": 139
  }, {
    "from": 83,
    "label": "calls",
    "to": 139
  }, {
    "from": 83,
    "label": "calls",
    "to": 139
  }, {
    "from": 16,
    "label": "calls",
    "to": 149
  }, {
    "from": 29,
    "label": "calls",
    "to": 149
  }, {
    "from": 29,
    "label": "calls",
    "to": 149
  }, {
    "from": 29,
    "label": "calls",
    "to": 149
  }, {
    "from": 29,
    "label": "calls",
    "to": 149
  }, {
    "from": 43,
    "label": "calls",
    "to": 149
  }, {
    "from": 52,
    "label": "calls",
    "to": 149
  }, {
    "from": 52,
    "label": "calls",
    "to": 149
  }, {
    "from": 59,
    "label": "calls",
    "to": 149
  }, {
    "from": 69,
    "label": "calls",
    "to": 149
  }, {
    "from": 76,
    "label": "calls",
    "to": 149
  }, {
    "from": 76,
    "label": "calls",
    "to": 149
  }, {
    "from": 83,
    "label": "calls",
    "to": 149
  }, {
    "from": 110,
    "label": "calls",
    "to": 149
  }, {
    "from": 118,
    "label": "calls",
    "to": 149
  }, {
    "from": 118,
    "label": "calls",
    "to": 149
  }, {
    "from": 118,
    "label": "calls",
    "to": 149
  }, {
    "from": 2,
    "label": "calls",
    "to": 76
  }, {
    "from": 2,
    "label": "calls",
    "to": 52
  }, {
    "from": 43,
    "label": "calls",
    "to": 131
  }, {
    "from": 59,
    "label": "calls",
    "to": 131
  }, {
    "from": 83,
    "label": "calls",
    "to": 131
  }, {
    "from": 83,
    "label": "calls",
    "to": 131
  }, {
    "from": 43,
    "label": "calls",
    "to": 129
  }, {
    "from": 83,
    "label": "calls",
    "to": 129
  }, {
    "from": 83,
    "label": "calls",
    "to": 129
  }, {
    "from": 2,
    "label": "calls",
    "to": 69
  }, {
    "from": 83,
    "label": "calls",
    "to": 145
  }, {
    "from": 22,
    "label": "calls",
    "to": 133
  }, {
    "from": 22,
    "label": "calls",
    "to": 143
  }, {
    "from": 2,
    "label": "calls",
    "to": 43
  }, {
    "from": 2,
    "label": "calls",
    "to": 83
  }, {
    "from": 59,
    "label": "calls",
    "to": 136
  }, {
    "from": 76,
    "label": "calls",
    "to": 136
  }, {
    "from": 110,
    "label": "calls",
    "to": 136
  }, {
    "from": 118,
    "label": "calls",
    "to": 147
  }, {
    "from": 118,
    "label": "calls",
    "to": 147
  }, {
    "from": 128,
    "label": "calls",
    "to": 148
  }, {
    "from": 128,
    "label": "calls",
    "to": 148
  }, {
    "from": 128,
    "label": "calls",
    "to": 148
  }, {
    "from": 128,
    "label": "calls",
    "to": 148
  }, {
    "from": 2,
    "label": "calls",
    "to": 59
  }, {
    "from": 2,
    "label": "calls",
    "to": 110
  }, {
    "from": 1,
    "label": "contains",
    "to": 128
  }, {
    "from": 128,
    "label": "declares",
    "to": 2
  }, {
    "from": 128,
    "label": "declares",
    "to": 16
  }, {
    "from": 128,
    "label": "declares",
    "to": 22
  }, {
    "from": 128,
    "label": "declares",
    "to": 29
  }, {
    "from": 128,
    "label": "declares",
    "to": 37
  }, {
    "from": 128,
    "label": "declares",
    "to": 43
  }, {
    "from": 128,
    "label": "declares",
    "to": 52
  }, {
    "from": 128,
    "label": "declares",
    "to": 59
  }, {
    "from": 128,
    "label": "declares",
    "to": 69
  }, {
    "from": 128,
    "label": "declares",
    "to": 76
  }, {
    "from": 128,
    "label": "declares",
    "to": 83
  }, {
    "from": 128,
    "label": "declares",
    "to": 110
  }, {
    "from": 128,
    "label": "declares",
    "to": 118
  }, {
    "from": 128,
    "label": "declares",
    "to": 124
  }, {
    "from": 128,
    "label": "declares",
    "to": 126
  }, {
    "from": 1,
    "label": "contains",
    "to": 151
  }, {
    "from": 1,
    "label": "contains",
    "to": 152
  }, {
    "from": 151,
    "label": "initializes",
    "to": 153
  }, {
    "from": 153,
    "label": "assigns",
    "to": 154
  }, {
    "from": 151,
    "label": "initializes",
    "to": 155
  }, {
    "from": 151,
    "label": "initializes",
    "to": 156
  }, {
    "from": 156,
    "label": "assigns",
    "to": 157
  }, {
    "from": 151,
    "label": "initializes",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 151,
    "label": "initializes",
    "to": 160
  }, {
    "from": 160,
    "label": "assigns",
    "to": 161
  }, {
    "from": 152,
    "label": "initializes",
    "to": 162
  }, {
    "from": 162,
    "label": "requires",
    "to": 163
  }, {
    "from": 152,
    "label": "initializes",
    "to": 164
  }, {
    "from": 164,
    "label": "requires",
    "to": 165
  }, {
    "from": 152,
    "label": "initializes",
    "to": 166
  }, {
    "from": 166,
    "label": "requires",
    "to": 167
  }, {
    "from": 152,
    "label": "initializes",
    "to": 168
  }, {
    "from": 168,
    "label": "requires",
    "to": 169
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test",
    "type": "module"
  }, {
    "id": 2,
    "text": "function main()\r\n   test_stats()\r\n   test_buff_err()\r\n   test_small_inputs()\r\n   test_basic()\r\n   test_large()\r\n   test_no_input()\r\n   test_invalid_input()\r\n   test_streaming()\r\n   test_illegal_state()\r\n   test_version()\r\n   test_tom_macwright()\r\n   test_amnon_david()\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "test_stats()",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "test_buff_err()",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "test_small_inputs()",
    "type": "statement:functioncall"
  }, {
    "id": 6,
    "text": "test_basic()",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "test_large()",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "test_no_input()",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "test_invalid_input()",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "test_streaming()",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "test_illegal_state()",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "test_version()",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "test_tom_macwright()",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "test_amnon_david()",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function test_tom_macwright()\r\n    local deflated =\r\n        assert(io.open(src_dir.. \"/tom_macwright.gz\")):read(\"*a\")\r\n\r\n    local inflated = lz.inflate()(deflated)\r\n\r\n    local expected_inflated =\r\n        assert(io.open(src_dir.. \"/tom_macwright.out\")):read(\"*a\")\r\n\r\n    ok(expected_inflated == inflated, \"Tom MacWright Test\")\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local deflated =\r\n        assert(io.open(src_dir.. \"/tom_macwright.gz\")):read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local inflated = lz.inflate()(deflated)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local expected_inflated =\r\n        assert(io.open(src_dir.. \"/tom_macwright.out\")):read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "ok(expected_inflated == inflated, \"Tom MacWright Test\")",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function test_amnon_david()\r\n    local body = assert(io.open(src_dir..\"/amnon_david.gz\")):read(\"*a\")\r\n\r\n    local inflate = zlib.inflate()\r\n    local inflated, eof, bytes_in, bytes_out = inflate(body)\r\n\r\n    local deflate = zlib.deflate()\r\n    local deflated, eof, bytes_in, bytes_out = deflate(inflated, \"full\")\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local body = assert(io.open(src_dir..\"/amnon_david.gz\")):read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "local inflate = zlib.inflate()",
    "type": "statement:localassign"
  }, {
    "id": 25,
    "text": "local inflated, eof, bytes_in, bytes_out = inflate(body)",
    "type": "statement:localassign"
  }, {
    "id": 26,
    "text": "local deflate = zlib.deflate()",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local deflated, eof, bytes_in, bytes_out = deflate(inflated, \"full\")",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function test_stats()\r\n   local string = (\"one\"):rep(20)\r\n   local deflated, eof, bin, bout = lz.deflate()(string, 'finish')\r\n   ok(eof == true, \"eof is true (\" .. tostring(eof) .. \")\");\r\n   ok(bin > bout, \"bytes in is greater than bytes out?\")\r\n   ok(#deflated == bout, \"bytes out is the same size as deflated string length\")\r\n   ok(#string == bin, \"bytes in is the same size as the input string length\")\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "local string = (\"one\"):rep(20)",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "local deflated, eof, bin, bout = lz.deflate()(string, 'finish')",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "ok(eof == true, \"eof is true (\" .. tostring(eof) .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "ok(bin > bout, \"bytes in is greater than bytes out?\")",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "ok(#deflated == bout, \"bytes out is the same size as deflated string length\")",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "ok(#string == bin, \"bytes in is the same size as the input string length\")",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function test_buff_err()\r\n   local text = (\"X\"):rep(lz._TEST_BUFSIZ);\r\n\r\n   local deflated = lz.deflate()(text, 'finish')\r\n\r\n   for i=1,#deflated do\r\n      lz.inflate()(deflated:sub(1,i))\r\n   end\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "local text = (\"X\"):rep(lz._TEST_BUFSIZ)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "local deflated = lz.deflate()(text, 'finish')",
    "type": "statement:localassign"
  }, {
    "id": 40,
    "text": "for i=1,#deflated do\r\n      lz.inflate()(deflated:sub(1,i))\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 41,
    "text": "lz.inflate()(deflated:sub(1,i))",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function test_small_inputs()\r\n   local text = (\"X\"):rep(lz._TEST_BUFSIZ);\r\n\r\n   local deflated = lz.deflate()(text, 'finish')\r\n\r\n   local inflated = {}\r\n   local inflator = lz.inflate()\r\n   for i=1,#deflated do\r\n      local part = inflator(deflated:sub(i,i))\r\n      table.insert(inflated, part)\r\n   end\r\n   inflated = table.concat(inflated)\r\n   ok(inflated == text, \"Expected \" .. #text .. \" Xs got \" .. #inflated)\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "local inflated = {}",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local inflator = lz.inflate()",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "for i=1,#deflated do\r\n      local part = inflator(deflated:sub(i,i))\r\n      table.insert(inflated, part)\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 47,
    "text": "local part = inflator(deflated:sub(i,i))",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "table.insert(inflated, part)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "inflated = table.concat(inflated)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "ok(inflated == text, \"Expected \" .. #text .. \" Xs got \" .. #inflated)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 52,
    "text": "function test_basic()\r\n    local test_string = \"abcdefghijklmnopqrstuv\"\r\n\r\n    ok(lz.inflate()(lz.deflate()(), \"finish\") == \"\")\r\n\r\n    -- Input to deflate is same as output to inflate:\r\n    local deflated = lz.deflate()(test_string, \"finish\")\r\n    local inflated = lz.inflate()(deflated, \"finish\")\r\n\r\n    ok(test_string == inflated, \"'\" .. tostring(test_string) .. \"' == '\" .. tostring(inflated) .. \"'\")\r\nend",
    "type": "function"
  }, {
    "id": 53,
    "text": "local test_string = \"abcdefghijklmnopqrstuv\"",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "ok(lz.inflate()(lz.deflate()(), \"finish\") == \"\")",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "local deflated = lz.deflate()(test_string, \"finish\")",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "local inflated = lz.inflate()(deflated, \"finish\")",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "ok(test_string == inflated, \"'\" .. tostring(test_string) .. \"' == '\" .. tostring(inflated) .. \"'\")",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function test_large()\r\n   -- Try a larger string:\r\n   local numbers = \"\"\r\n   for i=1, 100 do numbers = numbers .. string.format(\"%3d\", i) end\r\n   local numbers_table = {}\r\n   for i=1, 10000 do numbers_table[i] = numbers end\r\n   local test_string = table.concat(numbers_table, \"\\n\")\r\n\r\n   local deflated = lz.deflate()(test_string, \"finish\")\r\n   local inflated = lz.inflate()(deflated, \"finish\")\r\n   ok(test_string == inflated, \"large string\")\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "local numbers = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 61,
    "text": "for i=1, 100 do numbers = numbers .. string.format(\"%3d\", i) end",
    "type": "statement:numericfor"
  }, {
    "id": 62,
    "text": "numbers = numbers .. string.format(\"%3d\", i)",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "local numbers_table = {}",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "for i=1, 10000 do numbers_table[i] = numbers end",
    "type": "statement:numericfor"
  }, {
    "id": 65,
    "text": "numbers_table[i] = numbers",
    "type": "statement:assign"
  }, {
    "id": 66,
    "text": "local test_string = table.concat(numbers_table, \"\\n\")",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "ok(test_string == inflated, \"large string\")",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function test_no_input()\r\n   local stream = lz.deflate()\r\n   local deflated = stream(\"\")\r\n   deflated = deflated .. stream(\"\")\r\n   deflated = deflated .. stream(nil, \"finish\")\r\n   ok(\"\" == lz.inflate()(deflated, \"finish\"), \"empty string\")\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "local stream = lz.deflate()",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local deflated = stream(\"\")",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "deflated = deflated .. stream(\"\")",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "deflated = deflated .. stream(nil, \"finish\")",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "ok(\"\" == lz.inflate()(deflated, \"finish\"), \"empty string\")",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function test_invalid_input()\r\n   local stream = lz.inflate()\r\n   local isok, err = pcall(\r\n      function()\r\n         stream(\"bad input\")\r\n      end)\r\n   ok(not isok)\r\n   ok(string.find(err, \"^InvalidInput\"),\r\n      string.format(\"InvalidInput error (%s)\", err))\r\nend",
    "type": "function"
  }, {
    "id": 77,
    "text": "local stream = lz.inflate()",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local isok, err = pcall(\r\n      function()\r\n         stream(\"bad input\")\r\n      end)",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "stream(\"bad input\")",
    "type": "statement:functioncall"
  }, {
    "id": 80,
    "text": "ok(not isok)",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "ok(string.find(err, \"^InvalidInput\"),\r\n      string.format(\"InvalidInput error (%s)\", err))",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function test_streaming()\r\n   local shrink     = lz.deflate(lz.BEST_COMPRESSION)\r\n   local enlarge    = lz.inflate()\r\n   local expected   = {}\r\n   local got        = {} \r\n   local chant      = \"Isn't He great, isn't He wonderful?\\n\"\r\n   for i=1,100 do\r\n      if ( i == 100 ) then\r\n         chant = nil\r\n         print \"EOF round\"\r\n      end\r\n      local shrink_part, shrink_eof   = shrink(chant)\r\n      local enlarge_part, enlarge_eof = enlarge(shrink_part)\r\n      if ( i == 100 ) then\r\n         if not shrink_eof  then error(\"expected eof after shrinking flush\") end\r\n         if not enlarge_eof then error(\"expected eof after enlarging\") end\r\n      else\r\n         if shrink_eof  then error(\"unexpected eof after shrinking\") end\r\n         if enlarge_eof then error(\"unexpected eof after enlarging\") end\r\n      end\r\n      if enlarge_part then table.insert(got, enlarge_part) end\r\n      if chant        then table.insert(expected, chant) end\r\n   end\r\n   ok(table.concat(got) == table.concat(expected), \"streaming works\")\r\nend",
    "type": "function"
  }, {
    "id": 84,
    "text": "local shrink     = lz.deflate(lz.BEST_COMPRESSION)",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "local enlarge    = lz.inflate()",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "local expected   = {}",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "local got        = {}",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "local chant      = \"Isn't He great, isn't He wonderful?\\n\"",
    "type": "statement:localassign"
  }, {
    "id": 89,
    "text": "for i=1,100 do\r\n      if ( i == 100 ) then\r\n         chant = nil\r\n         print \"EOF round\"\r\n      end\r\n      local shrink_part, shrink_eof   = shrink(chant)\r\n      local enlarge_part, enlarge_eof = enlarge(shrink_part)\r\n      if ( i == 100 ) then\r\n         if not shrink_eof  then error(\"expected eof after shrinking flush\") end\r\n         if not enlarge_eof then error(\"expected eof after enlarging\") end\r\n      else\r\n         if shrink_eof  then error(\"unexpected eof after shrinking\") end\r\n         if enlarge_eof then error(\"unexpected eof after enlarging\") end\r\n      end\r\n      if enlarge_part then table.insert(got, enlarge_part) end\r\n      if chant        then table.insert(expected, chant) end\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 90,
    "text": "if ( i == 100 ) then\r\n         chant = nil\r\n         print \"EOF round\"\r\n      end",
    "type": "statement:if"
  }, {
    "id": 91,
    "text": "chant = nil",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "print \"EOF round\"",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "local shrink_part, shrink_eof   = shrink(chant)",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "local enlarge_part, enlarge_eof = enlarge(shrink_part)",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "if ( i == 100 ) then\r\n         if not shrink_eof  then error(\"expected eof after shrinking flush\") end\r\n         if not enlarge_eof then error(\"expected eof after enlarging\") end\r\n      else\r\n         if shrink_eof  then error(\"unexpected eof after shrinking\") end\r\n         if enlarge_eof then error(\"unexpected eof after enlarging\") end\r\n      end",
    "type": "statement:if"
  }, {
    "id": 96,
    "text": "if not shrink_eof  then error(\"expected eof after shrinking flush\") end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "error(\"expected eof after shrinking flush\")",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "if not enlarge_eof then error(\"expected eof after enlarging\") end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "error(\"expected eof after enlarging\")",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "if shrink_eof  then error(\"unexpected eof after shrinking\") end",
    "type": "statement:if"
  }, {
    "id": 101,
    "text": "error(\"unexpected eof after shrinking\")",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "if enlarge_eof then error(\"unexpected eof after enlarging\") end",
    "type": "statement:if"
  }, {
    "id": 103,
    "text": "error(\"unexpected eof after enlarging\")",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "if enlarge_part then table.insert(got, enlarge_part) end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "table.insert(got, enlarge_part)",
    "type": "statement:functioncall"
  }, {
    "id": 106,
    "text": "if chant        then table.insert(expected, chant) end",
    "type": "statement:if"
  }, {
    "id": 107,
    "text": "table.insert(expected, chant)",
    "type": "statement:functioncall"
  }, {
    "id": 108,
    "text": "ok(table.concat(got) == table.concat(expected), \"streaming works\")",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function test_illegal_state()\r\n   local stream = lz.deflate()\r\n   stream(\"abc\")\r\n   stream() -- eof/close\r\n\r\n   local _, emsg = pcall(\r\n      function()\r\n         stream(\"printing on 'closed' handle\")\r\n      end)\r\n   ok(string.find(emsg, \"^IllegalState\"),\r\n      string.format(\"IllegalState error (%s)\", emsg))\r\n   \r\n   local enlarge = lz.inflate()\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "stream(\"abc\")",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "stream()",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "local _, emsg = pcall(\r\n      function()\r\n         stream(\"printing on 'closed' handle\")\r\n      end)",
    "type": "statement:localassign"
  }, {
    "id": 114,
    "text": "stream(\"printing on 'closed' handle\")",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "ok(string.find(emsg, \"^IllegalState\"),\r\n      string.format(\"IllegalState error (%s)\", emsg))",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "local enlarge = lz.inflate()",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 118,
    "text": "function test_version()\r\n   local major, minor, patch = lz.version()\r\n   ok(1 == major, \"major version 1 == \" .. major);\r\n   ok(type(minor) == \"number\", \"minor version is number (\" .. minor .. \")\")\r\n   ok(type(patch) == \"number\", \"patch version is number (\" .. patch .. \")\")\r\nend",
    "type": "function"
  }, {
    "id": 119,
    "text": "local major, minor, patch = lz.version()",
    "type": "statement:localassign"
  }, {
    "id": 120,
    "text": "ok(1 == major, \"major version 1 == \" .. major)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "ok(type(minor) == \"number\", \"minor version is number (\" .. minor .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "ok(type(patch) == \"number\", \"patch version is number (\" .. patch .. \")\")",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function()\r\n         stream(\"bad input\")\r\n      end",
    "type": "function"
  }, {
    "id": 125,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 126,
    "text": "function()\r\n         stream(\"printing on 'closed' handle\")\r\n      end",
    "type": "function"
  }, {
    "id": 127,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 128,
    "text": "",
    "type": "function container"
  }, {
    "id": 129,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 130,
    "text": "version",
    "type": "global function"
  }, {
    "id": 131,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 132,
    "text": "deflate",
    "type": "global function"
  }, {
    "id": 133,
    "text": "inflate",
    "type": "global function"
  }, {
    "id": 134,
    "text": "open",
    "type": "global function"
  }, {
    "id": 135,
    "text": "inflator",
    "type": "global function"
  }, {
    "id": 136,
    "text": "format",
    "type": "global function"
  }, {
    "id": 137,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 138,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 139,
    "text": "error",
    "type": "global function"
  }, {
    "id": 140,
    "text": "shrink",
    "type": "global function"
  }, {
    "id": 141,
    "text": "inflate",
    "type": "global function"
  }, {
    "id": 142,
    "text": "print",
    "type": "global function"
  }, {
    "id": 143,
    "text": "deflate",
    "type": "global function"
  }, {
    "id": 144,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 145,
    "text": "enlarge",
    "type": "global function"
  }, {
    "id": 146,
    "text": "find",
    "type": "global function"
  }, {
    "id": 147,
    "text": "type",
    "type": "global function"
  }, {
    "id": 148,
    "text": "require",
    "type": "global function"
  }, {
    "id": 149,
    "text": "ok",
    "type": "global function"
  }, {
    "id": 150,
    "text": "stream",
    "type": "global function"
  }, {
    "id": 151,
    "text": "",
    "type": "variable container"
  }, {
    "id": 152,
    "text": "",
    "type": "require container"
  }, {
    "id": 153,
    "text": "",
    "type": "local variable"
  }, {
    "id": 154,
    "text": "",
    "type": "symbol"
  }, {
    "id": 155,
    "text": "",
    "type": "local variable"
  }, {
    "id": 156,
    "text": "",
    "type": "local variable"
  }, {
    "id": 157,
    "text": "",
    "type": "n/a"
  }, {
    "id": 158,
    "text": "",
    "type": "global variable"
  }, {
    "id": 159,
    "text": "",
    "type": "n/a"
  }, {
    "id": 160,
    "text": "",
    "type": "global variable"
  }, {
    "id": 161,
    "text": "",
    "type": "n/a"
  }, {
    "id": 162,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 163,
    "text": "(tap)",
    "type": "module"
  }, {
    "id": 164,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 165,
    "text": "(zlib)",
    "type": "module"
  }, {
    "id": 166,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 167,
    "text": "(table)",
    "type": "module"
  }, {
    "id": 168,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 169,
    "text": "(io)",
    "type": "module"
  } ]
}