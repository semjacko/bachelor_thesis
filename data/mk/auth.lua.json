{
  "_filename": "auth.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/mk/src/mk/auth.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 12,
    "label": "calls",
    "to": 66
  }, {
    "from": 12,
    "label": "calls",
    "to": 68
  }, {
    "from": 12,
    "label": "calls",
    "to": 68
  }, {
    "from": 12,
    "label": "calls",
    "to": 66
  }, {
    "from": 12,
    "label": "calls",
    "to": 78
  }, {
    "from": 12,
    "label": "calls",
    "to": 78
  }, {
    "from": 12,
    "label": "calls",
    "to": 78
  }, {
    "from": 12,
    "label": "calls",
    "to": 78
  }, {
    "from": 12,
    "label": "calls",
    "to": 78
  }, {
    "from": 1,
    "label": "contains",
    "to": 12
  }, {
    "from": 12,
    "label": "declares",
    "to": 3
  }, {
    "from": 12,
    "label": "declares",
    "to": 4
  }, {
    "from": 12,
    "label": "declares",
    "to": 5
  }, {
    "from": 12,
    "label": "declares",
    "to": 6
  }, {
    "from": 12,
    "label": "declares",
    "to": 7
  }, {
    "from": 12,
    "label": "declares",
    "to": 8
  }, {
    "from": 12,
    "label": "declares",
    "to": 9
  }, {
    "from": 12,
    "label": "declares",
    "to": 10
  }, {
    "from": 12,
    "label": "declares",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 14
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 17
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 14
  }, {
    "from": 21,
    "label": "has",
    "to": 14
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 14
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 32,
    "label": "has",
    "to": 14
  }, {
    "from": 32,
    "label": "has",
    "to": 14
  }, {
    "from": 32,
    "label": "has",
    "to": 14
  }, {
    "from": 32,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 14
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 39,
    "label": "has",
    "to": 14
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 14
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 45,
    "label": "has",
    "to": 48
  }, {
    "from": 45,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 45,
    "label": "has",
    "to": 51
  }, {
    "from": 45,
    "label": "has",
    "to": 52
  }, {
    "from": 45,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 14
  }, {
    "from": 53,
    "label": "has",
    "to": 14
  }, {
    "from": 45,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 30
  }, {
    "from": 45,
    "label": "has",
    "to": 14
  }, {
    "from": 45,
    "label": "has",
    "to": 14
  }, {
    "from": 45,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 60,
    "label": "has",
    "to": 14
  }, {
    "from": 60,
    "label": "has",
    "to": 14
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 40
  }, {
    "from": 62,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 62,
    "label": "has",
    "to": 14
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 46
  }, {
    "from": 64,
    "label": "has",
    "to": 47
  }, {
    "from": 64,
    "label": "has",
    "to": 48
  }, {
    "from": 64,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 64,
    "label": "has",
    "to": 51
  }, {
    "from": 64,
    "label": "has",
    "to": 52
  }, {
    "from": 64,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 54
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 53,
    "label": "has",
    "to": 14
  }, {
    "from": 53,
    "label": "has",
    "to": 14
  }, {
    "from": 64,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 30
  }, {
    "from": 64,
    "label": "has",
    "to": 14
  }, {
    "from": 64,
    "label": "has",
    "to": 14
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 16,
    "label": "calls",
    "to": 76
  }, {
    "from": 21,
    "label": "calls",
    "to": 76
  }, {
    "from": 32,
    "label": "calls",
    "to": 76
  }, {
    "from": 45,
    "label": "calls",
    "to": 76
  }, {
    "from": 45,
    "label": "calls",
    "to": 72
  }, {
    "from": 45,
    "label": "calls",
    "to": 66
  }, {
    "from": 28,
    "label": "calls",
    "to": 66
  }, {
    "from": 45,
    "label": "calls",
    "to": 66
  }, {
    "from": 16,
    "label": "calls",
    "to": 68
  }, {
    "from": 21,
    "label": "calls",
    "to": 68
  }, {
    "from": 26,
    "label": "calls",
    "to": 68
  }, {
    "from": 32,
    "label": "calls",
    "to": 68
  }, {
    "from": 12,
    "label": "calls",
    "to": 78
  }, {
    "from": 12,
    "label": "calls",
    "to": 78
  }, {
    "from": 12,
    "label": "calls",
    "to": 78
  }, {
    "from": 12,
    "label": "calls",
    "to": 78
  }, {
    "from": 12,
    "label": "calls",
    "to": 78
  }, {
    "from": 32,
    "label": "calls",
    "to": 74
  }, {
    "from": 13,
    "label": "calls",
    "to": 77
  }, {
    "from": 39,
    "label": "calls",
    "to": 71
  }, {
    "from": 45,
    "label": "calls",
    "to": 60
  }, {
    "from": 45,
    "label": "calls",
    "to": 60
  }, {
    "from": 16,
    "label": "calls",
    "to": 73
  }, {
    "from": 45,
    "label": "calls",
    "to": 73
  }, {
    "from": 21,
    "label": "calls",
    "to": 75
  }, {
    "from": 32,
    "label": "calls",
    "to": 70
  }, {
    "from": 45,
    "label": "calls",
    "to": 70
  }, {
    "from": 39,
    "label": "calls",
    "to": 79
  }, {
    "from": 12,
    "label": "declares",
    "to": 13
  }, {
    "from": 12,
    "label": "declares",
    "to": 16
  }, {
    "from": 12,
    "label": "declares",
    "to": 21
  }, {
    "from": 12,
    "label": "declares",
    "to": 26
  }, {
    "from": 12,
    "label": "declares",
    "to": 28
  }, {
    "from": 12,
    "label": "declares",
    "to": 32
  }, {
    "from": 12,
    "label": "declares",
    "to": 39
  }, {
    "from": 12,
    "label": "declares",
    "to": 45
  }, {
    "from": 12,
    "label": "declares",
    "to": 60
  }, {
    "from": 12,
    "label": "declares",
    "to": 62
  }, {
    "from": 12,
    "label": "declares",
    "to": 64
  }, {
    "from": 1,
    "label": "contains",
    "to": 80
  }, {
    "from": 1,
    "label": "contains",
    "to": 81
  }, {
    "from": 81,
    "label": "initializes",
    "to": 82
  }, {
    "from": 81,
    "label": "initializes",
    "to": 83
  }, {
    "from": 81,
    "label": "initializes",
    "to": 84
  }, {
    "from": 81,
    "label": "initializes",
    "to": 86
  }, {
    "from": 81,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 89
  }, {
    "from": 1,
    "label": "contains",
    "to": 90
  }, {
    "from": 89,
    "label": "initializes",
    "to": 91
  }, {
    "from": 91,
    "label": "assigns",
    "to": 92
  }, {
    "from": 89,
    "label": "initializes",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 89,
    "label": "initializes",
    "to": 95
  }, {
    "from": 95,
    "label": "assigns",
    "to": 96
  }, {
    "from": 90,
    "label": "initializes",
    "to": 97
  }, {
    "from": 97,
    "label": "requires",
    "to": 67
  }, {
    "from": 90,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "requires",
    "to": 69
  }, {
    "from": 90,
    "label": "initializes",
    "to": 99
  }, {
    "from": 99,
    "label": "requires",
    "to": 85
  }, {
    "from": 90,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "requires",
    "to": 87
  }, {
    "from": 90,
    "label": "initializes",
    "to": 101
  }, {
    "from": 101,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 102
  }, {
    "from": 91,
    "label": "represents",
    "to": 103
  }, {
    "from": 102,
    "label": "provides",
    "to": 103
  }, {
    "from": 104,
    "label": "requires",
    "to": 1
  }, {
    "from": 91,
    "label": "contains",
    "to": 13
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "auth",
    "type": "module"
  }, {
    "id": 2,
    "text": "util",
    "type": "module"
  }, {
    "id": 3,
    "text": "function hello.login(user, pass)\r\n  if users[user] == pass then\r\n    return user\r\n  elseif users[user] then\r\n    return nil, \"invalid password\"\r\n  else\r\n    return nil, \"user not found\"\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function hello.index(req, res)\r\n  res:write(hello.render_index(req, res))\r\n  return res:finish()\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function hello.say(wsapi_env, params)\r\n  local req, res = request.new(wsapi_env, { mk_app = hello }), response.new()\r\n  res:write(hello.render_say(req, res, params.name))\r\n  return res:finish()\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function hello.logoff(wsapi_env)\r\n  local req, res = request.new(wsapi_env, { mk_app = hello }), response.new()\r\n  hello.auth:logoff(res.headers)\r\n  return res:redirect(req:link_index())\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function hello.render_layout(inner_html)\r\n  return string.format([[\r\n      <html>\r\n        <head><title>Hello</title></head>\r\n        <body>%s</body>\r\n      </html>\r\n    ]], inner_html)\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function hello.render_login(req, res)\r\n  if req:empty(req.env.MK_AUTH_USER) then\r\n    return string.format([[\r\n      <form method=\"post\" action=\"%s\">\r\n      <p>User: <input type = \"text\" name = \"username\"/></p>\r\n      <p>Password: <input type = \"password\"  name = \"password\"/></p>\r\n      <input type = \"hidden\" name = \"success\" value = \"%s\"/>\r\n      <input type = \"hidden\" name = \"failure\" value = \"%s\"/>\r\n      <input type = \"submit\"/>\r\n      </form>\r\n    ]], req:link_login(), req:link_index(), req:link_index())\r\n  else\r\n    return string.format([[<p><a href=\"%s\">Logoff</a>]], req:link_logoff())\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function hello.render_hello(req, res)\r\n  local user = (req:empty(req.env.MK_AUTH_USER) and \"World\") or req.env.MK_AUTH_USER\r\n  return string.format([[\r\n      <p><a href=\"%s\">Link 1</a></p>\r\n      <p><a href=\"%s\">Link 2</a></p>\r\n      <p>Hello %s!</p>\r\n    ]], req:link_say({ greeting = \"Hi\" }, { name = \"Foo\" }),\r\n        req:link_songs(), user) .. hello.render_login(req, res)\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function hello.render_index(req, res)\r\n  return hello.render_layout(hello.render_hello(req, res))\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function hello.render_say(req, res, name)\r\n  return hello.render_layout(hello.render_hello(req, res) .. \r\n\t\t\t\tstring.format([[<p>%s %s!</p>]], req.params.greeting or \"Hello \", name))\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "",
    "type": "function container"
  }, {
    "id": 13,
    "text": "function auth.new(params)\r\n  return setmetatable({ login_function = params.login,\r\n                        login_salt = params.login_salt, \r\n                        session_salt = params.session_salt,\r\n                        expiration = params.expiration or 3600,\r\n                        cookie_name = params.cookie or \"mk_auth_user\"}, methods)\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function methods:token(user, expiration)\r\n  local expiration = expiration or (os.time() + self.expiration)\r\n  local message = \"exp=\" .. expiration .. \"&data=\" .. json.encode(user)\r\n  message = message .. \"&digest=\" .. crypto.hmac.digest(\"sha1\", message, self.session_salt)\r\n  return message\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "local expiration = expiration or (os.time() + self.expiration)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local message = \"exp=\" .. expiration .. \"&data=\" .. json.encode(user)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "message = message .. \"&digest=\" .. crypto.hmac.digest(\"sha1\", message, self.session_salt)",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function methods:login(username, password, expiration)\r\n  local expiration = expiration or (os.time() + self.expiration)\r\n  local salted_password = crypto.hmac.digest(\"sha1\", password, self.login_salt)\r\n  local user, message = self.login_function(username, salted_password)\r\n  if user then\r\n    return user, self:token(user, expiration)\r\n  end\r\n  return user, message\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local salted_password = crypto.hmac.digest(\"sha1\", password, self.login_salt)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local user, message = self.login_function(username, salted_password)",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if user then\r\n    return user, self:token(user, expiration)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function methods:salt_password(password)\r\n  return crypto.hmac.digest(\"sha1\", password, self.login_salt)\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function methods:logoff(headers)\r\n  local res = response.new(nil, headers)\r\n  res:delete_cookie(self.cookie_name)\r\nend",
    "type": "function"
  }, {
    "id": 29,
    "text": "local res = response.new(nil, headers)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "res:delete_cookie(self.cookie_name)",
    "type": "statement:functioncall"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function methods:authenticate(message)\r\n  local message, digest = message:match(\"^(.-)&digest=(.*)$\")\r\n  if message and digest == crypto.hmac.digest(\"sha1\", message, self.session_salt) then\r\n    local exp, data = message:match(\"^exp=(.-)&data=(.+)$\")\r\n    local expiration, user = tonumber(exp), json.decode(data)\r\n    if os.time() < expiration then\r\n      return user\r\n    else\r\n      return nil, \"login expired\"\r\n    end\r\n  end\r\n  return nil, \"invalid login\"\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local message, digest = message:match(\"^(.-)&digest=(.*)$\")",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "if message and digest == crypto.hmac.digest(\"sha1\", message, self.session_salt) then\r\n    local exp, data = message:match(\"^exp=(.-)&data=(.+)$\")\r\n    local expiration, user = tonumber(exp), json.decode(data)\r\n    if os.time() < expiration then\r\n      return user\r\n    else\r\n      return nil, \"login expired\"\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "local exp, data = message:match(\"^exp=(.-)&data=(.+)$\")",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "local expiration, user = tonumber(exp), json.decode(data)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "if os.time() < expiration then\r\n      return user\r\n    else\r\n      return nil, \"login expired\"\r\n    end",
    "type": "statement:if"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function methods:filter(wsapi_app)\r\n  return function (wsapi_env, ...)\r\n           local message = (\";\" .. (wsapi_env.HTTP_COOKIE or \"\")\r\n                          .. \";\"):match(\";%s*\" .. self.cookie_name .. \"=(.-)%s*;\")\r\n           if message then\r\n             message = util.url_decode(message) \r\n             wsapi_env.MK_AUTH_USER, wsapi_env.MK_AUTH_ERROR = self:authenticate(message)\r\n           end\r\n           return wsapi_app(wsapi_env, ...)\r\n         end\r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "local message = (\";\" .. (wsapi_env.HTTP_COOKIE or \"\")\r\n                          .. \";\"):match(\";%s*\" .. self.cookie_name .. \"=(.-)%s*;\")",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "if message then\r\n             message = util.url_decode(message) \r\n             wsapi_env.MK_AUTH_USER, wsapi_env.MK_AUTH_ERROR = self:authenticate(message)\r\n           end",
    "type": "statement:if"
  }, {
    "id": 42,
    "text": "message = util.url_decode(message)",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "wsapi_env.MK_AUTH_USER, wsapi_env.MK_AUTH_ERROR = self:authenticate(message)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function methods:provider()\r\n  return function (wsapi_env)\r\n           local req = request.new(wsapi_env)\r\n           local res = response.new()\r\n           local data = req.POST.json and json.decode(req.POST.json)\r\n           if not data then\r\n             data = { username = req.POST.username, \r\n                      password = req.POST.password,\r\n                      persistent = req.POST.persistent,\r\n                      success = req.POST.success, failure = req.POST.failure }\r\n           end\r\n           local expires = (data.persistent and (os.time() + self.expiration)) or nil\r\n           local user, message = self:login(data.username, data.password)\r\n\t   local redirect_or_json = function (url)\r\n\t\t\t\t      if url then\r\n\t\t\t\t\treturn res:redirect(url)\r\n\t\t\t\t      else\r\n\t\t\t\t\tres:content_type(\"application/json\")\r\n\t\t\t\t\tres:write(json.encode{ user = user, \r\n\t\t\t\t\t\t\t       message = message,\r\n\t\t\t\t\t\t\t       expires = expires })\r\n\t\t\t\t\treturn res:finish()\r\n\t\t\t\t      end\r\n\t\t\t\t    end\r\n           if user then\r\n             res:set_cookie(self.cookie_name, { value = message, expires = expires })\r\n\t     return redirect_or_json(data.success)\r\n           else\r\n             res:delete_cookie(self.cookie_name)\r\n\t     return redirect_or_json(data.failure and data.failure .. \"?message=\" .. util.url_encode(message))\r\n           end\r\n         end\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "local req = request.new(wsapi_env)",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local res = response.new()",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local data = req.POST.json and json.decode(req.POST.json)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "if not data then\r\n             data = { username = req.POST.username, \r\n                      password = req.POST.password,\r\n                      persistent = req.POST.persistent,\r\n                      success = req.POST.success, failure = req.POST.failure }\r\n           end",
    "type": "statement:if"
  }, {
    "id": 50,
    "text": "data = { username = req.POST.username, \r\n                      password = req.POST.password,\r\n                      persistent = req.POST.persistent,\r\n                      success = req.POST.success, failure = req.POST.failure }",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "local expires = (data.persistent and (os.time() + self.expiration)) or nil",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local user, message = self:login(data.username, data.password)",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "local redirect_or_json = function (url)\r\n\t\t\t\t      if url then\r\n\t\t\t\t\treturn res:redirect(url)\r\n\t\t\t\t      else\r\n\t\t\t\t\tres:content_type(\"application/json\")\r\n\t\t\t\t\tres:write(json.encode{ user = user, \r\n\t\t\t\t\t\t\t       message = message,\r\n\t\t\t\t\t\t\t       expires = expires })\r\n\t\t\t\t\treturn res:finish()\r\n\t\t\t\t      end\r\n\t\t\t\t    end",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "if url then\r\n\t\t\t\t\treturn res:redirect(url)\r\n\t\t\t\t      else\r\n\t\t\t\t\tres:content_type(\"application/json\")\r\n\t\t\t\t\tres:write(json.encode{ user = user, \r\n\t\t\t\t\t\t\t       message = message,\r\n\t\t\t\t\t\t\t       expires = expires })\r\n\t\t\t\t\treturn res:finish()\r\n\t\t\t\t      end",
    "type": "statement:if"
  }, {
    "id": 55,
    "text": "res:content_type(\"application/json\")",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "res:write(json.encode{ user = user, \r\n\t\t\t\t\t\t\t       message = message,\r\n\t\t\t\t\t\t\t       expires = expires })",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "if user then\r\n             res:set_cookie(self.cookie_name, { value = message, expires = expires })\r\n\t     return redirect_or_json(data.success)\r\n           else\r\n             res:delete_cookie(self.cookie_name)\r\n\t     return redirect_or_json(data.failure and data.failure .. \"?message=\" .. util.url_encode(message))\r\n           end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "res:set_cookie(self.cookie_name, { value = message, expires = expires })",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function (url)\r\n\t\t\t\t      if url then\r\n\t\t\t\t\treturn res:redirect(url)\r\n\t\t\t\t      else\r\n\t\t\t\t\tres:content_type(\"application/json\")\r\n\t\t\t\t\tres:write(json.encode{ user = user, \r\n\t\t\t\t\t\t\t       message = message,\r\n\t\t\t\t\t\t\t       expires = expires })\r\n\t\t\t\t\treturn res:finish()\r\n\t\t\t\t      end\r\n\t\t\t\t    end",
    "type": "function"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function (wsapi_env, ...)\r\n           local message = (\";\" .. (wsapi_env.HTTP_COOKIE or \"\")\r\n                          .. \";\"):match(\";%s*\" .. self.cookie_name .. \"=(.-)%s*;\")\r\n           if message then\r\n             message = util.url_decode(message) \r\n             wsapi_env.MK_AUTH_USER, wsapi_env.MK_AUTH_ERROR = self:authenticate(message)\r\n           end\r\n           return wsapi_app(wsapi_env, ...)\r\n         end",
    "type": "function"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function (wsapi_env)\r\n           local req = request.new(wsapi_env)\r\n           local res = response.new()\r\n           local data = req.POST.json and json.decode(req.POST.json)\r\n           if not data then\r\n             data = { username = req.POST.username, \r\n                      password = req.POST.password,\r\n                      persistent = req.POST.persistent,\r\n                      success = req.POST.success, failure = req.POST.failure }\r\n           end\r\n           local expires = (data.persistent and (os.time() + self.expiration)) or nil\r\n           local user, message = self:login(data.username, data.password)\r\n\t   local redirect_or_json = function (url)\r\n\t\t\t\t      if url then\r\n\t\t\t\t\treturn res:redirect(url)\r\n\t\t\t\t      else\r\n\t\t\t\t\tres:content_type(\"application/json\")\r\n\t\t\t\t\tres:write(json.encode{ user = user, \r\n\t\t\t\t\t\t\t       message = message,\r\n\t\t\t\t\t\t\t       expires = expires })\r\n\t\t\t\t\treturn res:finish()\r\n\t\t\t\t      end\r\n\t\t\t\t    end\r\n           if user then\r\n             res:set_cookie(self.cookie_name, { value = message, expires = expires })\r\n\t     return redirect_or_json(data.success)\r\n           else\r\n             res:delete_cookie(self.cookie_name)\r\n\t     return redirect_or_json(data.failure and data.failure .. \"?message=\" .. util.url_encode(message))\r\n           end\r\n         end",
    "type": "function"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "new",
    "type": "global function"
  }, {
    "id": 67,
    "text": "crypto",
    "type": "module"
  }, {
    "id": 68,
    "text": "hmac.digest",
    "type": "global function"
  }, {
    "id": 69,
    "text": "json",
    "type": "module"
  }, {
    "id": 70,
    "text": "decode",
    "type": "global function"
  }, {
    "id": 71,
    "text": "url_decode",
    "type": "global function"
  }, {
    "id": 72,
    "text": "url_encode",
    "type": "global function"
  }, {
    "id": 73,
    "text": "encode",
    "type": "global function"
  }, {
    "id": 74,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 75,
    "text": "login_function",
    "type": "global function"
  }, {
    "id": 76,
    "text": "time",
    "type": "global function"
  }, {
    "id": 77,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 78,
    "text": "require",
    "type": "global function"
  }, {
    "id": 79,
    "text": "wsapi_app",
    "type": "global function"
  }, {
    "id": 80,
    "text": "",
    "type": "variable container"
  }, {
    "id": 81,
    "text": "",
    "type": "require container"
  }, {
    "id": 82,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 85,
    "text": "request",
    "type": "module"
  }, {
    "id": 86,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 87,
    "text": "response",
    "type": "module"
  }, {
    "id": 88,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "variable container"
  }, {
    "id": 90,
    "text": "",
    "type": "require container"
  }, {
    "id": 91,
    "text": "",
    "type": "local variable"
  }, {
    "id": 92,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 93,
    "text": "",
    "type": "local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 95,
    "text": "",
    "type": "global variable"
  }, {
    "id": 96,
    "text": "",
    "type": "n/a"
  }, {
    "id": 97,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 102,
    "text": "",
    "type": "interface container"
  }, {
    "id": 103,
    "text": "",
    "type": "interface"
  }, {
    "id": 104,
    "text": "",
    "type": "require local variable"
  } ]
}