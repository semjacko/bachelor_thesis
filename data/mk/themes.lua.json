{
  "_filename": "themes.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/mk/src/mk/themes.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 12
  }, {
    "from": 3,
    "label": "has",
    "to": 10
  }, {
    "from": 3,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 7
  }, {
    "from": 14,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 14,
    "label": "has",
    "to": 10
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 20
  }, {
    "from": 16,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 10
  }, {
    "from": 16,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 29,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 25,
    "label": "has",
    "to": 10
  }, {
    "from": 25,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 6
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 36,
    "label": "has",
    "to": 11
  }, {
    "from": 36,
    "label": "has",
    "to": 10
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "calls",
    "to": 42
  }, {
    "from": 3,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 45
  }, {
    "from": 16,
    "label": "calls",
    "to": 45
  }, {
    "from": 25,
    "label": "calls",
    "to": 45
  }, {
    "from": 25,
    "label": "calls",
    "to": 45
  }, {
    "from": 3,
    "label": "calls",
    "to": 43
  }, {
    "from": 16,
    "label": "calls",
    "to": 40
  }, {
    "from": 3,
    "label": "calls",
    "to": 41
  }, {
    "from": 38,
    "label": "calls",
    "to": 46
  }, {
    "from": 3,
    "label": "calls",
    "to": 44
  }, {
    "from": 25,
    "label": "calls",
    "to": 39
  }, {
    "from": 1,
    "label": "contains",
    "to": 38
  }, {
    "from": 38,
    "label": "declares",
    "to": 3
  }, {
    "from": 38,
    "label": "declares",
    "to": 14
  }, {
    "from": 38,
    "label": "declares",
    "to": 16
  }, {
    "from": 38,
    "label": "declares",
    "to": 25
  }, {
    "from": 38,
    "label": "declares",
    "to": 36
  }, {
    "from": 47,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 48
  }, {
    "from": 1,
    "label": "contains",
    "to": 49
  }, {
    "from": 48,
    "label": "initializes",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 48,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 48,
    "label": "initializes",
    "to": 54
  }, {
    "from": 48,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 48,
    "label": "initializes",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 48,
    "label": "initializes",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 48,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 49,
    "label": "initializes",
    "to": 63
  }, {
    "from": 63,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 64
  }, {
    "from": 50,
    "label": "represents",
    "to": 65
  }, {
    "from": 64,
    "label": "provides",
    "to": 65
  }, {
    "from": 50,
    "label": "contains",
    "to": 25
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "themes",
    "type": "module"
  }, {
    "id": 2,
    "text": "util",
    "type": "module"
  }, {
    "id": 3,
    "text": "function template_methods:render(req, res, env)\r\n  local blocks = self.theme.blocks\r\n  local areas = setmetatable({}, { __index = function (t, name)\r\n                                               local area = function (args, has_block)\r\n                                                              local out = {}\r\n                                                              for _, block in ipairs(self.theme.areas[name]) do\r\n                                                                out[#out+1] = blocks[block](req, res, env, block)\r\n                                                              end\r\n                                                              return table.concat(out)\r\n                                                            end\r\n                                               t[name] = area\r\n                                               return area\r\n                                             end })\r\n  local env = setmetatable({ areas = areas }, { __index = env })\r\n  return self.tmpl:render(req, res, env)\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local blocks = self.theme.blocks",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "local areas = setmetatable({}, { __index = function (t, name)\r\n                                               local area = function (args, has_block)\r\n                                                              local out = {}\r\n                                                              for _, block in ipairs(self.theme.areas[name]) do\r\n                                                                out[#out+1] = blocks[block](req, res, env, block)\r\n                                                              end\r\n                                                              return table.concat(out)\r\n                                                            end\r\n                                               t[name] = area\r\n                                               return area\r\n                                             end })",
    "type": "statement:localassign"
  }, {
    "id": 6,
    "text": "local area = function (args, has_block)\r\n                                                              local out = {}\r\n                                                              for _, block in ipairs(self.theme.areas[name]) do\r\n                                                                out[#out+1] = blocks[block](req, res, env, block)\r\n                                                              end\r\n                                                              return table.concat(out)\r\n                                                            end",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local out = {}",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "for _, block in ipairs(self.theme.areas[name]) do\r\n                                                                out[#out+1] = blocks[block](req, res, env, block)\r\n                                                              end",
    "type": "statement:genericfor"
  }, {
    "id": 9,
    "text": "out[#out+1] = blocks[block](req, res, env, block)",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 11,
    "text": "t[name] = area",
    "type": "statement:assign"
  }, {
    "id": 12,
    "text": "local env = setmetatable({ areas = areas }, { __index = env })",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function (args, has_block)\r\n                                                              local out = {}\r\n                                                              for _, block in ipairs(self.theme.areas[name]) do\r\n                                                                out[#out+1] = blocks[block](req, res, env, block)\r\n                                                              end\r\n                                                              return table.concat(out)\r\n                                                            end",
    "type": "function"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function methods:load(name, engine)\r\n  engine = engine or self.engine\r\n  local cached = self.cache[name]\r\n  if cached then\r\n    return cached\r\n  end\r\n  local tmpl, err = engine.load(self.path ..  \"/\" .. name)\r\n  if tmpl then\r\n    local template = setmetatable({ theme = self, tmpl = tmpl }, template_methods)\r\n    self.cache[name] = template\r\n    return template\r\n  else\r\n    return tmpl, err\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "engine = engine or self.engine",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "local cached = self.cache[name]",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if cached then\r\n    return cached\r\n  end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "local tmpl, err = engine.load(self.path ..  \"/\" .. name)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "if tmpl then\r\n    local template = setmetatable({ theme = self, tmpl = tmpl }, template_methods)\r\n    self.cache[name] = template\r\n    return template\r\n  else\r\n    return tmpl, err\r\n  end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "local template = setmetatable({ theme = self, tmpl = tmpl }, template_methods)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "self.cache[name] = template",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function themes.new(args)\r\n  local blocks, name, path, theme, engine =\r\n    args.blocks, args.name, args.path, args.config, args.engine\r\n  local theme_path = (path or \"\") .. \"/\" .. name\r\n  local theme, err = theme or util.loadin(theme_path .. \"/config.lua\")\r\n  if theme then\r\n    theme.blocks = blocks\r\n    theme.name = name\r\n    theme.path = theme_path\r\n    theme.engine = engine or template\r\n    theme.cache = setmetatable({}, { __mode = \"v\" })\r\n    return setmetatable(theme, methods)\r\n  else\r\n    return nil, err\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "local blocks, name, path, theme, engine =\r\n    args.blocks, args.name, args.path, args.config, args.engine",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local theme_path = (path or \"\") .. \"/\" .. name",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local theme, err = theme or util.loadin(theme_path .. \"/config.lua\")",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "if theme then\r\n    theme.blocks = blocks\r\n    theme.name = name\r\n    theme.path = theme_path\r\n    theme.engine = engine or template\r\n    theme.cache = setmetatable({}, { __mode = \"v\" })\r\n    return setmetatable(theme, methods)\r\n  else\r\n    return nil, err\r\n  end",
    "type": "statement:if"
  }, {
    "id": 30,
    "text": "theme.blocks = blocks",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "theme.name = name",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "theme.path = theme_path",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "theme.engine = engine or template",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "theme.cache = setmetatable({}, { __mode = \"v\" })",
    "type": "statement:assign"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function (t, name)\r\n                                               local area = function (args, has_block)\r\n                                                              local out = {}\r\n                                                              for _, block in ipairs(self.theme.areas[name]) do\r\n                                                                out[#out+1] = blocks[block](req, res, env, block)\r\n                                                              end\r\n                                                              return table.concat(out)\r\n                                                            end\r\n                                               t[name] = area\r\n                                               return area\r\n                                             end",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "",
    "type": "function container"
  }, {
    "id": 39,
    "text": "loadin",
    "type": "global function"
  }, {
    "id": 40,
    "text": "load",
    "type": "global function"
  }, {
    "id": 41,
    "text": "blocks[block]",
    "type": "global function"
  }, {
    "id": 42,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 43,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 44,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 45,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 46,
    "text": "require",
    "type": "global function"
  }, {
    "id": 47,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 48,
    "text": "",
    "type": "variable container"
  }, {
    "id": 49,
    "text": "",
    "type": "require container"
  }, {
    "id": 50,
    "text": "",
    "type": "local variable"
  }, {
    "id": 51,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 52,
    "text": "",
    "type": "local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "n/a"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 57,
    "text": "",
    "type": "local variable"
  }, {
    "id": 58,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 59,
    "text": "",
    "type": "global variable"
  }, {
    "id": 60,
    "text": "",
    "type": "n/a"
  }, {
    "id": 61,
    "text": "",
    "type": "global variable"
  }, {
    "id": 62,
    "text": "",
    "type": "n/a"
  }, {
    "id": 63,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 64,
    "text": "",
    "type": "interface container"
  }, {
    "id": 65,
    "text": "",
    "type": "interface"
  } ]
}