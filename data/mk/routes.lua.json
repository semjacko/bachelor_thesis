{
  "_filename": "routes.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/mk/src/mk/routes.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 15
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 15
  }, {
    "from": 25,
    "label": "has",
    "to": 23
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 15
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 30,
    "label": "has",
    "to": 15
  }, {
    "from": 30,
    "label": "has",
    "to": 15
  }, {
    "from": 30,
    "label": "has",
    "to": 15
  }, {
    "from": 30,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 37,
    "label": "has",
    "to": 15
  }, {
    "from": 37,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 15
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 44,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 48
  }, {
    "from": 44,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 15
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 55
  }, {
    "from": 55,
    "label": "has",
    "to": 15
  }, {
    "from": 50,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 56
  }, {
    "from": 50,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 58,
    "label": "has",
    "to": 15
  }, {
    "from": 57,
    "label": "has",
    "to": 54
  }, {
    "from": 50,
    "label": "has",
    "to": 59
  }, {
    "from": 44,
    "label": "has",
    "to": 60
  }, {
    "from": 44,
    "label": "has",
    "to": 15
  }, {
    "from": 44,
    "label": "has",
    "to": 15
  }, {
    "from": 44,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 62,
    "label": "has",
    "to": 15
  }, {
    "from": 62,
    "label": "has",
    "to": 64
  }, {
    "from": 62,
    "label": "has",
    "to": 65
  }, {
    "from": 62,
    "label": "has",
    "to": 15
  }, {
    "from": 62,
    "label": "has",
    "to": 15
  }, {
    "from": 62,
    "label": "has",
    "to": 15
  }, {
    "from": 62,
    "label": "has",
    "to": 66
  }, {
    "from": 67,
    "label": "has",
    "to": 23
  }, {
    "from": 67,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 23
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 71,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 71,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 71,
    "label": "has",
    "to": 72
  }, {
    "from": 73,
    "label": "has",
    "to": 15
  }, {
    "from": 74,
    "label": "has",
    "to": 15
  }, {
    "from": 75,
    "label": "has",
    "to": 15
  }, {
    "from": 76,
    "label": "has",
    "to": 64
  }, {
    "from": 76,
    "label": "has",
    "to": 65
  }, {
    "from": 76,
    "label": "has",
    "to": 15
  }, {
    "from": 76,
    "label": "has",
    "to": 15
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 15
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 80,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "calls",
    "to": 91
  }, {
    "from": 17,
    "label": "calls",
    "to": 91
  }, {
    "from": 81,
    "label": "calls",
    "to": 86
  }, {
    "from": 44,
    "label": "calls",
    "to": 94
  }, {
    "from": 44,
    "label": "calls",
    "to": 94
  }, {
    "from": 44,
    "label": "calls",
    "to": 94
  }, {
    "from": 81,
    "label": "calls",
    "to": 88
  }, {
    "from": 81,
    "label": "calls",
    "to": 88
  }, {
    "from": 81,
    "label": "calls",
    "to": 88
  }, {
    "from": 81,
    "label": "calls",
    "to": 88
  }, {
    "from": 81,
    "label": "calls",
    "to": 88
  }, {
    "from": 81,
    "label": "calls",
    "to": 88
  }, {
    "from": 81,
    "label": "calls",
    "to": 88
  }, {
    "from": 81,
    "label": "calls",
    "to": 88
  }, {
    "from": 81,
    "label": "calls",
    "to": 88
  }, {
    "from": 30,
    "label": "calls",
    "to": 88
  }, {
    "from": 30,
    "label": "calls",
    "to": 88
  }, {
    "from": 30,
    "label": "calls",
    "to": 88
  }, {
    "from": 30,
    "label": "calls",
    "to": 88
  }, {
    "from": 30,
    "label": "calls",
    "to": 88
  }, {
    "from": 30,
    "label": "calls",
    "to": 88
  }, {
    "from": 81,
    "label": "calls",
    "to": 88
  }, {
    "from": 81,
    "label": "calls",
    "to": 88
  }, {
    "from": 81,
    "label": "calls",
    "to": 88
  }, {
    "from": 81,
    "label": "calls",
    "to": 88
  }, {
    "from": 81,
    "label": "calls",
    "to": 88
  }, {
    "from": 44,
    "label": "calls",
    "to": 92
  }, {
    "from": 81,
    "label": "calls",
    "to": 84
  }, {
    "from": 81,
    "label": "calls",
    "to": 84
  }, {
    "from": 81,
    "label": "calls",
    "to": 84
  }, {
    "from": 81,
    "label": "calls",
    "to": 84
  }, {
    "from": 81,
    "label": "calls",
    "to": 84
  }, {
    "from": 81,
    "label": "calls",
    "to": 84
  }, {
    "from": 81,
    "label": "calls",
    "to": 84
  }, {
    "from": 81,
    "label": "calls",
    "to": 85
  }, {
    "from": 81,
    "label": "calls",
    "to": 85
  }, {
    "from": 30,
    "label": "calls",
    "to": 85
  }, {
    "from": 81,
    "label": "calls",
    "to": 83
  }, {
    "from": 81,
    "label": "calls",
    "to": 83
  }, {
    "from": 44,
    "label": "calls",
    "to": 89
  }, {
    "from": 81,
    "label": "calls",
    "to": 87
  }, {
    "from": 30,
    "label": "calls",
    "to": 87
  }, {
    "from": 81,
    "label": "calls",
    "to": 97
  }, {
    "from": 81,
    "label": "calls",
    "to": 97
  }, {
    "from": 81,
    "label": "calls",
    "to": 97
  }, {
    "from": 81,
    "label": "calls",
    "to": 98
  }, {
    "from": 81,
    "label": "calls",
    "to": 98
  }, {
    "from": 30,
    "label": "calls",
    "to": 98
  }, {
    "from": 81,
    "label": "calls",
    "to": 62
  }, {
    "from": 62,
    "label": "calls",
    "to": 95
  }, {
    "from": 81,
    "label": "calls",
    "to": 95
  }, {
    "from": 81,
    "label": "calls",
    "to": 17
  }, {
    "from": 62,
    "label": "calls",
    "to": 44
  }, {
    "from": 30,
    "label": "calls",
    "to": 96
  }, {
    "from": 37,
    "label": "calls",
    "to": 96
  }, {
    "from": 44,
    "label": "calls",
    "to": 90
  }, {
    "from": 44,
    "label": "calls",
    "to": 90
  }, {
    "from": 44,
    "label": "calls",
    "to": 90
  }, {
    "from": 81,
    "label": "calls",
    "to": 12
  }, {
    "from": 44,
    "label": "calls",
    "to": 93
  }, {
    "from": 1,
    "label": "contains",
    "to": 81
  }, {
    "from": 81,
    "label": "declares",
    "to": 12
  }, {
    "from": 81,
    "label": "declares",
    "to": 17
  }, {
    "from": 81,
    "label": "declares",
    "to": 21
  }, {
    "from": 81,
    "label": "declares",
    "to": 25
  }, {
    "from": 81,
    "label": "declares",
    "to": 28
  }, {
    "from": 81,
    "label": "declares",
    "to": 30
  }, {
    "from": 81,
    "label": "declares",
    "to": 37
  }, {
    "from": 81,
    "label": "declares",
    "to": 42
  }, {
    "from": 81,
    "label": "declares",
    "to": 44
  }, {
    "from": 81,
    "label": "declares",
    "to": 62
  }, {
    "from": 81,
    "label": "declares",
    "to": 67
  }, {
    "from": 81,
    "label": "declares",
    "to": 69
  }, {
    "from": 81,
    "label": "declares",
    "to": 71
  }, {
    "from": 81,
    "label": "declares",
    "to": 73
  }, {
    "from": 81,
    "label": "declares",
    "to": 74
  }, {
    "from": 81,
    "label": "declares",
    "to": 75
  }, {
    "from": 81,
    "label": "declares",
    "to": 76
  }, {
    "from": 81,
    "label": "declares",
    "to": 78
  }, {
    "from": 81,
    "label": "declares",
    "to": 80
  }, {
    "from": 1,
    "label": "contains",
    "to": 101
  }, {
    "from": 1,
    "label": "contains",
    "to": 102
  }, {
    "from": 101,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 101,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 101,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 101,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 101,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 101,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 101,
    "label": "initializes",
    "to": 115
  }, {
    "from": 101,
    "label": "initializes",
    "to": 116
  }, {
    "from": 101,
    "label": "initializes",
    "to": 117
  }, {
    "from": 101,
    "label": "initializes",
    "to": 118
  }, {
    "from": 102,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "requires",
    "to": 82
  }, {
    "from": 102,
    "label": "initializes",
    "to": 120
  }, {
    "from": 120,
    "label": "requires",
    "to": 121
  }, {
    "from": 102,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "requires",
    "to": 2
  }, {
    "from": 1,
    "label": "provides",
    "to": 123
  }, {
    "from": 95,
    "label": "represents",
    "to": 124
  }, {
    "from": 123,
    "label": "provides",
    "to": 124
  }, {
    "from": 125,
    "label": "requires",
    "to": 1
  }, {
    "from": 126,
    "label": "requires",
    "to": 1
  }, {
    "from": 103,
    "label": "contains",
    "to": 3
  }, {
    "from": 103,
    "label": "contains",
    "to": 4
  }, {
    "from": 103,
    "label": "contains",
    "to": 5
  }, {
    "from": 103,
    "label": "contains",
    "to": 6
  }, {
    "from": 103,
    "label": "contains",
    "to": 7
  }, {
    "from": 103,
    "label": "contains",
    "to": 8
  }, {
    "from": 103,
    "label": "contains",
    "to": 9
  }, {
    "from": 103,
    "label": "contains",
    "to": 10
  }, {
    "from": 103,
    "label": "contains",
    "to": 11
  }, {
    "from": 99,
    "label": "contains",
    "to": 62
  }, {
    "from": 100,
    "label": "contains",
    "to": 62
  }, {
    "from": 103,
    "label": "contains",
    "to": 62
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "routes",
    "type": "module"
  }, {
    "id": 2,
    "text": "util",
    "type": "module"
  }, {
    "id": 3,
    "text": "function _M.methods:get(key)\r\n  if not self.base_path then\r\n    return unpack(self.values[key] or {})\r\n  else\r\n    local filename = pathinfo_to_file(self, key)\r\n    local mtime = lfs.attributes(filename, \"mtime\")\r\n    if mtime and lfs.attributes(filename .. \".delete_guard\", \"mtime\") then\r\n      return filename, mtime\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "function _M.methods:set(key, value, mtime, ext)\r\n  mtime = mtime or os.time()\r\n  ext = ext or \"html\"\r\n  if not self.base_path then\r\n    self.values[key] = { value, mtime, ext }\r\n  else\r\n    local tmpname = os.tmpname()\r\n    if lfs.attributes(tmpname, \"mtime\") then\r\n      os.remove(tmpname)\r\n    end\r\n    local tmpfile = pathinfo_to_file(self, tmpname)\r\n    local filename = pathinfo_to_file(self, key)\r\n    if util.writefile(tmpfile, value) then\r\n      util.writefile(filename .. \".delete_guard\", \"1\")\r\n      if os.rename(tmpfile, filename) then\r\n\tlfs.touch(filename, mtime)\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function _M.methods:etag(key, mtime)\r\n  if not self.base_path then\r\n    return string.format('\"%s\"', md5.sumhexa(mtime .. key))\r\n  else\r\n    return string.format('\"%s\"', md5.sumhexa(mtime .. pathinfo_to_file(self, key)))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function _M.methods:wrap(f)\r\n  return function (wsapi_env, ...)\r\n\t   local key = wsapi_env.PATH_INFO\r\n\t   local value, mtime, ext = self:get(key)\r\n\t   if value then\r\n\t     if ext then\r\n\t       local etag = self:etag(key, mtime)\r\n\t       if wsapi_env.HTTP_IF_NONE_MATCH == etag then\r\n\t\t return 304, { [\"Content-Length\"] = 0 }, function () end\r\n\t       end\r\n\t       local sent\r\n\t       return 200, { [\"Content-Type\"] = mk.mime_types[ext],\r\n\t\t\t     [\"Content-Length\"] = #value,\r\n\t\t\t     [\"ETag\"] = etag }, function ()\r\n\t\t\t\t\t\t  if not sent then\r\n\t\t\t\t\t\t    sent = true\r\n\t\t\t\t\t\t    return value\r\n\t\t\t\t\t\t  end\r\n\t\t\t\t\t\tend\r\n\t     else\r\n\t       return self.mk_app:serve_file(wsapi_env, value)\r\n\t     end\r\n\t   else\r\n\t     local status, headers, res = f(wsapi_env, ...)\r\n\t     if status == 200 or tostring(status):match(\"^200\") then\r\n\t       local mtime = os.time()\r\n\t       local etag = self:etag(key, mtime)\r\n\t       headers[\"ETag\"] = etag\r\n\t       local ext = mk.mime_extensions[headers[\"Content-Type\"] or \"text/html\"]\r\n\t       local body = {}\r\n\t       return status, headers, function ()\r\n\t\t\t\t\t local s = res()\r\n\t\t\t\t\t if s then\r\n\t\t\t\t\t   body[#body+1] = s\r\n\t\t\t\t\t   return s\r\n\t\t\t\t\t else\r\n\t\t\t\t\t   self:set(key, table.concat(body), mtime, ext)\r\n\t\t\t\t\t end\r\n\t\t\t\t       end\r\n\t     else\r\n\t       return status, headers, res\r\n\t     end\r\n\t   end\r\n\t end\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function _M.methods:invalidate(...)\r\n  for _, key in ipairs{...} do\r\n    if not self.base_path then\r\n      self.values[key] = nil\r\n    else\r\n      local filename = pathinfo_to_file(self, key)\r\n      if lfs.attributes(filename .. \".delete_guard\", \"mtime\") then\r\n\tos.remove(filename)\r\n\tos.remove(filename .. \".delete_guard\")\r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function _M.methods:nuke()\r\n  if not self.base_path then \r\n    self.values = {}\r\n  else\r\n    local path\r\n    if self.base_path:sub(1, 1) == \"/\" then\r\n      path = self.base_path\r\n    else\r\n      path = self.mk_app.app_path .. \"/\" .. self.base_path\r\n    end\r\n    for file in lfs.dir(path) do\r\n      if file ~= \".\" and file ~= \"..\" then \r\n\tlocal filename = path .. \"/\" .. file\r\n\tif lfs.attributes(filename .. \".delete_guard\", \"mtime\") then\r\n\t  os.remove(filename)\r\n\t  os.remove(filename .. \".delete_guard\")\r\n\tend \r\n      end\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "function _M.new(mk_app, base_path)\r\n  local values\r\n  if not base_path then\r\n    values = {}\r\n  else\r\n    lfs = require \"lfs\"\r\n  end\r\n  local cache = { mk_app = mk_app, values = values, \r\n\t\t  base_path = base_path }\r\n  setmetatable(cache, _M.methods)\r\n  return cache\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "function _M.form(args)\r\n  local id, url = args.id, args.url\r\n  cosmo.yield(form_preamble{ id = id, url = url, [\"if\"] = cosmo.cif }, true)\r\n  local fields, buttons = {}, {}\r\n  env = {\r\n    flash = function(args)\r\n\t      local attrs = {}\r\n\t      for k, v in pairs(args) do attrs[#attrs+1] = { name = k, value = v } end\r\n\t      return cosmo.fill(form_flash, { attrs = attrs })\r\n\t    end,\r\n    flash_for = function(args)\r\n\t\t  local attrs = {}\r\n\t\t  local field = args.field\r\n\t\t  args.field = nil\r\n\t\t  for k, v in pairs(args) do attrs[#attrs+1] = { name = k, value = v } end\r\n\t\t  return cosmo.fill(field_flash, { name = field, attrs = attrs })\r\n\t\tend,\r\n    button = function (args)\r\n\t       local attrs = {}\r\n\t       if args.attrs then\r\n\t\t for k, v in pairs(args.attrs) do\r\n\t\t   attrs[#attrs+1] = { name = k, value = v }\r\n\t\t end\r\n\t\t args.attrs = nil\r\n\t       end\r\n\t       buttons[#buttons+1] = make_button(args, _M.actions[args.action]) \r\n\t       return button_control{ name = args.id, label = args.label, disabled = args.disabled,\r\n\t\t\t\t      attrs = attrs }\r\n\t     end\r\n  }\r\n  for name, control in pairs(_M.controls) do\r\n    env[name] = function (args)\r\n\t\t  fields[#fields+1] = make_field(args, control.type)\r\n\t\t  return make_control(control.template, args, control.defaults)\r\n\t\tend\r\n  end\r\n  env.widgets = env\r\n  cosmo.yield(env)\r\n  cosmo.yield(form_postamble{ id = id, url = url, concat = cosmo.concat, buttons = buttons, \r\n\t\t\t      fields = fields, [\"if\"] = cosmo.cif, obj = args.obj, hidden = args.hidden,\r\n\t\t\t      json = function (args) return json.encode(args[1]) end }, true)\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "function _M.dependency(dep)\r\n  return function (args)\r\n\t   local control = (args and args[1]) or \"forms\"\r\n\t   if control == \"all\" or control == \"forms\" then\r\n\t     for _, file in ipairs(_M.dependencies[dep]) do\r\n\t       cosmo.yield{ control = \"forms\", [dep] = file }\r\n\t     end\r\n\t     if control == \"all\" then\r\n\t       for name, control in pairs(_M.controls) do\r\n\t\t if control[dep] then\r\n\t\t   for _, file in ipairs(control[dep]) do\r\n\t\t     cosmo.yield{ control = name, [dep] = file }\r\n\t\t   end\r\n\t\t end\r\n\t       end\r\n\t     end\r\n\t   else\r\n\t     local files = _M.controls[control][dep] or {}\r\n\t     for _, file in ipairs(files) do\r\n\t       cosmo.yield{ control = control, [dep] = file }\r\n\t     end\r\n\t   end\r\n\t end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local function foldr(t, f, acc)\r\n   for i = #t, 1, -1 do\r\n      acc = f(t[i], acc)\r\n   end\r\n   return acc\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "for i = #t, 1, -1 do\r\n      acc = f(t[i], acc)\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 14,
    "text": "acc = f(t[i], acc)",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function foldl(t, f, acc)\r\n   for i = 1, #t do\r\n      acc = f(acc, t[i])\r\n   end\r\n   return acc\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "for i = 1, #t do\r\n      acc = f(acc, t[i])\r\n   end",
    "type": "statement:numericfor"
  }, {
    "id": 19,
    "text": "acc = f(acc, t[i])",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function (prefix, name, dot)\r\n\t\t   local extra = { inner = (lpeg.P(1) - lpeg.S(\"/\" .. (dot or \"\")))^1,\r\n\t\t\t\t   close = lpeg.P\"/\" + lpeg.P(dot or -1) + lpeg.P(-1) }\r\n\t\t   return { cap = lpeg.Carg(1) * re.compile([[ [/%.] {%inner+} &(%close) ]], extra) / \r\n\t\t\tfunction (params, item, delim)\r\n\t\t\t  params[name] = wsapi.util.url_decode(item)\r\n\t\t\tend,\r\n\t\t      clean = re.compile([[ [/%.] %inner &(%close) ]], extra),\r\n\t\t      tag = \"param\", name = name, prefix = prefix }\r\n\t\t end",
    "type": "function"
  }, {
    "id": 22,
    "text": "local extra = { inner = (lpeg.P(1) - lpeg.S(\"/\" .. (dot or \"\")))^1,\r\n\t\t\t\t   close = lpeg.P\"/\" + lpeg.P(dot or -1) + lpeg.P(-1) }",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "params[name] = wsapi.util.url_decode(item)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function (prefix, name, dot)\r\n\t\t       local extra = { inner = (lpeg.P(1) - lpeg.S(\"/\" .. (dot or \"\")))^1,\r\n\t\t\t\t       close = lpeg.P\"/\" + lpeg.P(dot or -1) + lpeg.P(-1) }\r\n\t\t       return { cap = (lpeg.Carg(1) * re.compile([[ [/%.] {%inner+} &(%close) ]], extra) / \r\n\t\t\t\t   function (params, item, delim)\r\n\t\t\t\t     params[name] = wsapi.util.url_decode(item)\r\n\t\t\t\t   end)^-1,\r\n\t\t\t      clean = re.compile([[ [/%.] %inner &(%close) ]], extra)^-1,\r\n\t\t\t      tag = \"opt\", name = name, prefix = prefix }\r\n\t\t     end",
    "type": "function"
  }, {
    "id": 26,
    "text": "local extra = { inner = (lpeg.P(1) - lpeg.S(\"/\" .. (dot or \"\")))^1,\r\n\t\t\t\t       close = lpeg.P\"/\" + lpeg.P(dot or -1) + lpeg.P(-1) }",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function (prefix)\r\n\t\t    return { cap = \"*\", tag = \"splat\", prefix = prefix }\r\n\t\t  end",
    "type": "function"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function fold_caps(cap, acc)\r\n  if type(cap) == \"string\" then\r\n    return { cap = lpeg.P(cap) * acc.cap, clean = lpeg.P(cap) * acc.clean }\r\n  elseif cap.cap == \"*\" then\r\n    return { cap = (lpeg.Carg(1) * (lpeg.P(cap.prefix) * lpeg.C((lpeg.P(1) - acc.clean)^0))^-1 / \r\n\t\tfunction (params, splat)\r\n\t\t  if not params.splat then params.splat = {} end\r\n\t\t  if splat and splat ~= \"\" then\r\n\t\t    params.splat[#params.splat+1] = wsapi.util.url_decode(splat)\r\n\t\t  end\r\n\t\tend) * acc.cap,\r\n\t   clean = (lpeg.P(cap.prefix) * (lpeg.P(1) - acc.clean)^0)^-1 * acc.clean }\r\n  else\r\n    return { cap = cap.cap * acc.cap, clean = cap.clean * acc.clean }\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "if type(cap) == \"string\" then\r\n    return { cap = lpeg.P(cap) * acc.cap, clean = lpeg.P(cap) * acc.clean }\r\n  elseif cap.cap == \"*\" then\r\n    return { cap = (lpeg.Carg(1) * (lpeg.P(cap.prefix) * lpeg.C((lpeg.P(1) - acc.clean)^0))^-1 / \r\n\t\tfunction (params, splat)\r\n\t\t  if not params.splat then params.splat = {} end\r\n\t\t  if splat and splat ~= \"\" then\r\n\t\t    params.splat[#params.splat+1] = wsapi.util.url_decode(splat)\r\n\t\t  end\r\n\t\tend) * acc.cap,\r\n\t   clean = (lpeg.P(cap.prefix) * (lpeg.P(1) - acc.clean)^0)^-1 * acc.clean }\r\n  else\r\n    return { cap = cap.cap * acc.cap, clean = cap.clean * acc.clean }\r\n  end",
    "type": "statement:if"
  }, {
    "id": 32,
    "text": "if not params.splat then params.splat = {} end",
    "type": "statement:if"
  }, {
    "id": 33,
    "text": "params.splat = {}",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "if splat and splat ~= \"\" then\r\n\t\t    params.splat[#params.splat+1] = wsapi.util.url_decode(splat)\r\n\t\t  end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "params.splat[#params.splat+1] = wsapi.util.url_decode(splat)",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "local function fold_parts(parts, cap)\r\n  if type(cap) == \"string\" then\r\n    parts[#parts+1] = { tag = \"text\", text = cap }\r\n  else\r\n    parts[#parts+1] = { tag = cap.tag, prefix = cap.prefix, name = cap.name }\r\n  end\r\n  return parts\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "if type(cap) == \"string\" then\r\n    parts[#parts+1] = { tag = \"text\", text = cap }\r\n  else\r\n    parts[#parts+1] = { tag = cap.tag, prefix = cap.prefix, name = cap.name }\r\n  end",
    "type": "statement:if"
  }, {
    "id": 39,
    "text": "parts[#parts+1] = { tag = \"text\", text = cap }",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "parts[#parts+1] = { tag = cap.tag, prefix = cap.prefix, name = cap.name }",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function (caps)\r\n\t\t  return foldr(caps, fold_caps, { cap = lpeg.P(\"/\")^-1 * lpeg.P(-1), clean = lpeg.P(\"/\")^-1 * lpeg.P(-1) }),\r\n\t\t         foldl(caps, fold_parts, {})\r\n\t\tend",
    "type": "function"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "local function build(parts, params)\r\n  local res = {}\r\n  local i = 1\r\n  params = params or {}\r\n  params.splat = params.splat or {}\r\n  for _, part in ipairs(parts) do\r\n    if part.tag == \"param\" then\r\n      if not params[part.name] then\r\n\terror(\"route parameter \" .. part.name .. \" does not exist\")\r\n      end\r\n      local s = string.gsub (params[part.name], \"([^%.@]+)\",\r\n\t\t\t     function (s) return wsapi.util.url_encode(s) end)\r\n      res[#res+1] = part.prefix .. s\r\n    elseif part.tag == \"splat\" then\r\n      local s = string.gsub (params.splat[i] or \"\", \"([^/%.@]+)\",\r\n\t\t\t     function (s) return wsapi.util.url_encode(s) end)\r\n      res[#res+1] = part.prefix .. s\r\n      i = i + 1\r\n    elseif part.tag == \"opt\" then\r\n      if params and params[part.name] then\r\n\tlocal s = string.gsub (params[part.name], \"([^%.@]+)\",\r\n\t\t\t       function (s) return wsapi.util.url_encode(s) end)\r\n\tres[#res+1] = part.prefix .. s\r\n      end\r\n    else\r\n      res[#res+1] = part.text\r\n    end\r\n  end\r\n  if #res > 0 then return table.concat(res) else return \"/\" end\r\nend",
    "type": "function"
  }, {
    "id": 45,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local i = 1",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "params = params or {}",
    "type": "statement:assign"
  }, {
    "id": 48,
    "text": "params.splat = params.splat or {}",
    "type": "statement:assign"
  }, {
    "id": 49,
    "text": "for _, part in ipairs(parts) do\r\n    if part.tag == \"param\" then\r\n      if not params[part.name] then\r\n\terror(\"route parameter \" .. part.name .. \" does not exist\")\r\n      end\r\n      local s = string.gsub (params[part.name], \"([^%.@]+)\",\r\n\t\t\t     function (s) return wsapi.util.url_encode(s) end)\r\n      res[#res+1] = part.prefix .. s\r\n    elseif part.tag == \"splat\" then\r\n      local s = string.gsub (params.splat[i] or \"\", \"([^/%.@]+)\",\r\n\t\t\t     function (s) return wsapi.util.url_encode(s) end)\r\n      res[#res+1] = part.prefix .. s\r\n      i = i + 1\r\n    elseif part.tag == \"opt\" then\r\n      if params and params[part.name] then\r\n\tlocal s = string.gsub (params[part.name], \"([^%.@]+)\",\r\n\t\t\t       function (s) return wsapi.util.url_encode(s) end)\r\n\tres[#res+1] = part.prefix .. s\r\n      end\r\n    else\r\n      res[#res+1] = part.text\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 50,
    "text": "if part.tag == \"param\" then\r\n      if not params[part.name] then\r\n\terror(\"route parameter \" .. part.name .. \" does not exist\")\r\n      end\r\n      local s = string.gsub (params[part.name], \"([^%.@]+)\",\r\n\t\t\t     function (s) return wsapi.util.url_encode(s) end)\r\n      res[#res+1] = part.prefix .. s\r\n    elseif part.tag == \"splat\" then\r\n      local s = string.gsub (params.splat[i] or \"\", \"([^/%.@]+)\",\r\n\t\t\t     function (s) return wsapi.util.url_encode(s) end)\r\n      res[#res+1] = part.prefix .. s\r\n      i = i + 1\r\n    elseif part.tag == \"opt\" then\r\n      if params and params[part.name] then\r\n\tlocal s = string.gsub (params[part.name], \"([^%.@]+)\",\r\n\t\t\t       function (s) return wsapi.util.url_encode(s) end)\r\n\tres[#res+1] = part.prefix .. s\r\n      end\r\n    else\r\n      res[#res+1] = part.text\r\n    end",
    "type": "statement:if"
  }, {
    "id": 51,
    "text": "if not params[part.name] then\r\n\terror(\"route parameter \" .. part.name .. \" does not exist\")\r\n      end",
    "type": "statement:if"
  }, {
    "id": 52,
    "text": "error(\"route parameter \" .. part.name .. \" does not exist\")",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "local s = string.gsub (params[part.name], \"([^%.@]+)\",\r\n\t\t\t     function (s) return wsapi.util.url_encode(s) end)",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "res[#res+1] = part.prefix .. s",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "local s = string.gsub (params.splat[i] or \"\", \"([^/%.@]+)\",\r\n\t\t\t     function (s) return wsapi.util.url_encode(s) end)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "i = i + 1",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "if params and params[part.name] then\r\n\tlocal s = string.gsub (params[part.name], \"([^%.@]+)\",\r\n\t\t\t       function (s) return wsapi.util.url_encode(s) end)\r\n\tres[#res+1] = part.prefix .. s\r\n      end",
    "type": "statement:if"
  }, {
    "id": 58,
    "text": "local s = string.gsub (params[part.name], \"([^%.@]+)\",\r\n\t\t\t       function (s) return wsapi.util.url_encode(s) end)",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "res[#res+1] = part.text",
    "type": "statement:assign"
  }, {
    "id": 60,
    "text": "if #res > 0 then return table.concat(res) else return \"/\" end",
    "type": "statement:if"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function _M.R(path)\r\n   local p, b = route:match(path)\r\n   return setmetatable({ parser = p.cap, parts = b },\r\n\t\t       { __index = { \r\n\t\t\t   match = function (t, s)\r\n\t\t\t\t     local params = {}\r\n\t\t\t\t     if t.parser:match(s, 1, params) then\r\n\t\t\t\t       return params\r\n\t\t\t\t     else\r\n\t\t\t\t       return nil\r\n\t\t\t\t     end\r\n\t\t\t\t   end,\r\n\t\t\t   build = function (t, params)\r\n\t\t\t\t     return build(t.parts, params)\r\n\t\t\t\t   end\r\n\t\t       } })\r\nend",
    "type": "function"
  }, {
    "id": 63,
    "text": "local p, b = route:match(path)",
    "type": "statement:localassign"
  }, {
    "id": 64,
    "text": "local params = {}",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "if t.parser:match(s, 1, params) then\r\n\t\t\t\t       return params\r\n\t\t\t\t     else\r\n\t\t\t\t       return nil\r\n\t\t\t\t     end",
    "type": "statement:if"
  }, {
    "id": 66,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 67,
    "text": "function (params, item, delim)\r\n\t\t\t  params[name] = wsapi.util.url_decode(item)\r\n\t\t\tend",
    "type": "function"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function (params, item, delim)\r\n\t\t\t\t     params[name] = wsapi.util.url_decode(item)\r\n\t\t\t\t   end",
    "type": "function"
  }, {
    "id": 70,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 71,
    "text": "function (params, splat)\r\n\t\t  if not params.splat then params.splat = {} end\r\n\t\t  if splat and splat ~= \"\" then\r\n\t\t    params.splat[#params.splat+1] = wsapi.util.url_decode(splat)\r\n\t\t  end\r\n\t\tend",
    "type": "function"
  }, {
    "id": 72,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 73,
    "text": "function (s) return wsapi.util.url_encode(s) end",
    "type": "function"
  }, {
    "id": 74,
    "text": "function (s) return wsapi.util.url_encode(s) end",
    "type": "function"
  }, {
    "id": 75,
    "text": "function (s) return wsapi.util.url_encode(s) end",
    "type": "function"
  }, {
    "id": 76,
    "text": "function (t, s)\r\n\t\t\t\t     local params = {}\r\n\t\t\t\t     if t.parser:match(s, 1, params) then\r\n\t\t\t\t       return params\r\n\t\t\t\t     else\r\n\t\t\t\t       return nil\r\n\t\t\t\t     end\r\n\t\t\t\t   end",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function (t, params)\r\n\t\t\t\t     return build(t.parts, params)\r\n\t\t\t\t   end",
    "type": "function"
  }, {
    "id": 79,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 80,
    "text": "function (_, path) return _M.R(path) end",
    "type": "function"
  }, {
    "id": 81,
    "text": "",
    "type": "function container"
  }, {
    "id": 82,
    "text": "lpeg",
    "type": "module"
  }, {
    "id": 83,
    "text": "S",
    "type": "global function"
  }, {
    "id": 84,
    "text": "compile",
    "type": "global function"
  }, {
    "id": 85,
    "text": "Carg",
    "type": "global function"
  }, {
    "id": 86,
    "text": "Ct",
    "type": "global function"
  }, {
    "id": 87,
    "text": "C",
    "type": "global function"
  }, {
    "id": 88,
    "text": "P",
    "type": "global function"
  }, {
    "id": 89,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 90,
    "text": "gsub",
    "type": "global function"
  }, {
    "id": 91,
    "text": "f",
    "type": "global function"
  }, {
    "id": 92,
    "text": "error",
    "type": "global function"
  }, {
    "id": 93,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 94,
    "text": "wsapi.util.url_encode",
    "type": "global function"
  }, {
    "id": 95,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 96,
    "text": "type",
    "type": "global function"
  }, {
    "id": 97,
    "text": "require",
    "type": "global function"
  }, {
    "id": 98,
    "text": "wsapi.util.url_decode",
    "type": "global function"
  }, {
    "id": 99,
    "text": "",
    "type": "local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "variable container"
  }, {
    "id": 102,
    "text": "",
    "type": "require container"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "n/a"
  }, {
    "id": 113,
    "text": "",
    "type": "local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "n/a"
  }, {
    "id": 115,
    "text": "",
    "type": "global variable"
  }, {
    "id": 116,
    "text": "",
    "type": "global variable"
  }, {
    "id": 117,
    "text": "",
    "type": "global variable"
  }, {
    "id": 118,
    "text": "",
    "type": "global variable"
  }, {
    "id": 119,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 120,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 121,
    "text": "re",
    "type": "module"
  }, {
    "id": 122,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "interface container"
  }, {
    "id": 124,
    "text": "",
    "type": "interface"
  }, {
    "id": 125,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 126,
    "text": "",
    "type": "require local variable"
  } ]
}