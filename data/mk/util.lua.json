{
  "_filename": "util.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/mk/src/mk/util.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 13,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 15
  }, {
    "from": 17,
    "label": "has",
    "to": 9
  }, {
    "from": 17,
    "label": "has",
    "to": 9
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 24,
    "label": "has",
    "to": 29
  }, {
    "from": 24,
    "label": "has",
    "to": 30
  }, {
    "from": 22,
    "label": "has",
    "to": 9
  }, {
    "from": 22,
    "label": "has",
    "to": 31
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 32,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 32,
    "label": "has",
    "to": 9
  }, {
    "from": 32,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 43,
    "label": "has",
    "to": 48
  }, {
    "from": 43,
    "label": "has",
    "to": 49
  }, {
    "from": 39,
    "label": "has",
    "to": 9
  }, {
    "from": 39,
    "label": "has",
    "to": 9
  }, {
    "from": 39,
    "label": "has",
    "to": 9
  }, {
    "from": 39,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 53,
    "label": "has",
    "to": 9
  }, {
    "from": 53,
    "label": "has",
    "to": 9
  }, {
    "from": 53,
    "label": "has",
    "to": 9
  }, {
    "from": 51,
    "label": "has",
    "to": 9
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 55,
    "label": "has",
    "to": 57
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 57,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 57,
    "label": "has",
    "to": 9
  }, {
    "from": 55,
    "label": "has",
    "to": 62
  }, {
    "from": 55,
    "label": "has",
    "to": 63
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 9
  }, {
    "from": 63,
    "label": "has",
    "to": 9
  }, {
    "from": 55,
    "label": "has",
    "to": 67
  }, {
    "from": 55,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 69,
    "label": "has",
    "to": 72
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 73,
    "label": "has",
    "to": 74
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 69,
    "label": "has",
    "to": 9
  }, {
    "from": 69,
    "label": "has",
    "to": 76
  }, {
    "from": 77,
    "label": "has",
    "to": 70
  }, {
    "from": 77,
    "label": "has",
    "to": 71
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 9
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 83,
    "label": "has",
    "to": 9
  }, {
    "from": 83,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 9
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 87,
    "label": "has",
    "to": 9
  }, {
    "from": 87,
    "label": "has",
    "to": 9
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 58
  }, {
    "from": 89,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 89,
    "label": "has",
    "to": 9
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 91,
    "label": "has",
    "to": 64
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 91,
    "label": "has",
    "to": 9
  }, {
    "from": 91,
    "label": "has",
    "to": 9
  }, {
    "from": 91,
    "label": "has",
    "to": 92
  }, {
    "from": 22,
    "label": "calls",
    "to": 103
  }, {
    "from": 32,
    "label": "calls",
    "to": 103
  }, {
    "from": 39,
    "label": "calls",
    "to": 103
  }, {
    "from": 22,
    "label": "calls",
    "to": 98
  }, {
    "from": 39,
    "label": "calls",
    "to": 98
  }, {
    "from": 69,
    "label": "calls",
    "to": 98
  }, {
    "from": 11,
    "label": "calls",
    "to": 102
  }, {
    "from": 17,
    "label": "calls",
    "to": 102
  }, {
    "from": 2,
    "label": "calls",
    "to": 99
  }, {
    "from": 32,
    "label": "calls",
    "to": 96
  }, {
    "from": 77,
    "label": "calls",
    "to": 96
  }, {
    "from": 55,
    "label": "calls",
    "to": 51
  }, {
    "from": 55,
    "label": "calls",
    "to": 51
  }, {
    "from": 39,
    "label": "calls",
    "to": 104
  }, {
    "from": 22,
    "label": "calls",
    "to": 94
  }, {
    "from": 39,
    "label": "calls",
    "to": 94
  }, {
    "from": 55,
    "label": "calls",
    "to": 101
  }, {
    "from": 55,
    "label": "calls",
    "to": 100
  }, {
    "from": 2,
    "label": "calls",
    "to": 95
  }, {
    "from": 51,
    "label": "calls",
    "to": 105
  }, {
    "from": 55,
    "label": "calls",
    "to": 105
  }, {
    "from": 22,
    "label": "calls",
    "to": 22
  }, {
    "from": 22,
    "label": "calls",
    "to": 22
  }, {
    "from": 69,
    "label": "calls",
    "to": 106
  }, {
    "from": 77,
    "label": "calls",
    "to": 106
  }, {
    "from": 22,
    "label": "calls",
    "to": 107
  }, {
    "from": 22,
    "label": "calls",
    "to": 107
  }, {
    "from": 32,
    "label": "calls",
    "to": 107
  }, {
    "from": 39,
    "label": "calls",
    "to": 107
  }, {
    "from": 39,
    "label": "calls",
    "to": 107
  }, {
    "from": 2,
    "label": "calls",
    "to": 97
  }, {
    "from": 55,
    "label": "calls",
    "to": 97
  }, {
    "from": 32,
    "label": "calls",
    "to": 32
  }, {
    "from": 39,
    "label": "calls",
    "to": 32
  }, {
    "from": 51,
    "label": "calls",
    "to": 39
  }, {
    "from": 51,
    "label": "calls",
    "to": 39
  }, {
    "from": 1,
    "label": "contains",
    "to": 93
  }, {
    "from": 93,
    "label": "declares",
    "to": 2
  }, {
    "from": 93,
    "label": "declares",
    "to": 11
  }, {
    "from": 93,
    "label": "declares",
    "to": 17
  }, {
    "from": 93,
    "label": "declares",
    "to": 22
  }, {
    "from": 93,
    "label": "declares",
    "to": 32
  }, {
    "from": 93,
    "label": "declares",
    "to": 39
  }, {
    "from": 93,
    "label": "declares",
    "to": 51
  }, {
    "from": 93,
    "label": "declares",
    "to": 55
  }, {
    "from": 93,
    "label": "declares",
    "to": 69
  }, {
    "from": 93,
    "label": "declares",
    "to": 77
  }, {
    "from": 93,
    "label": "declares",
    "to": 83
  }, {
    "from": 93,
    "label": "declares",
    "to": 85
  }, {
    "from": 93,
    "label": "declares",
    "to": 87
  }, {
    "from": 93,
    "label": "declares",
    "to": 89
  }, {
    "from": 93,
    "label": "declares",
    "to": 91
  }, {
    "from": 108,
    "label": "requires",
    "to": 1
  }, {
    "from": 109,
    "label": "requires",
    "to": 1
  }, {
    "from": 110,
    "label": "requires",
    "to": 1
  }, {
    "from": 111,
    "label": "requires",
    "to": 1
  }, {
    "from": 112,
    "label": "requires",
    "to": 1
  }, {
    "from": 113,
    "label": "requires",
    "to": 1
  }, {
    "from": 114,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 115
  }, {
    "from": 1,
    "label": "contains",
    "to": 116
  }, {
    "from": 115,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 1,
    "label": "provides",
    "to": 119
  }, {
    "from": 117,
    "label": "represents",
    "to": 120
  }, {
    "from": 119,
    "label": "provides",
    "to": 120
  }, {
    "from": 121,
    "label": "requires",
    "to": 1
  }, {
    "from": 122,
    "label": "requires",
    "to": 1
  }, {
    "from": 123,
    "label": "requires",
    "to": 1
  }, {
    "from": 124,
    "label": "requires",
    "to": 1
  }, {
    "from": 117,
    "label": "contains",
    "to": 2
  }, {
    "from": 117,
    "label": "contains",
    "to": 11
  }, {
    "from": 117,
    "label": "contains",
    "to": 17
  }, {
    "from": 117,
    "label": "contains",
    "to": 22
  }, {
    "from": 117,
    "label": "contains",
    "to": 32
  }, {
    "from": 117,
    "label": "contains",
    "to": 39
  }, {
    "from": 117,
    "label": "contains",
    "to": 51
  }, {
    "from": 117,
    "label": "contains",
    "to": 55
  }, {
    "from": 117,
    "label": "contains",
    "to": 69
  }, {
    "from": 117,
    "label": "contains",
    "to": 77
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 83
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 85
  }, {
    "from": 53,
    "label": "hasArgument",
    "to": 87
  }, {
    "from": 63,
    "label": "hasArgument",
    "to": 91
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "util",
    "type": "module"
  }, {
    "id": 2,
    "text": "function util.loadin(file, env)\r\n  env = env or {}\r\n  local f, err = loadfile(file)\r\n  if not f then\r\n    return nil, err\r\n  else\r\n    setfenv(f, env)\r\n    local ok, err = pcall(f)\r\n    if ok then\r\n      return env\r\n    else\r\n      return nil, err\r\n    end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "env = env or {}",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "local f, err = loadfile(file)",
    "type": "statement:localassign"
  }, {
    "id": 5,
    "text": "if not f then\r\n    return nil, err\r\n  else\r\n    setfenv(f, env)\r\n    local ok, err = pcall(f)\r\n    if ok then\r\n      return env\r\n    else\r\n      return nil, err\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "setfenv(f, env)",
    "type": "statement:functioncall"
  }, {
    "id": 7,
    "text": "local ok, err = pcall(f)",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "if ok then\r\n      return env\r\n    else\r\n      return nil, err\r\n    end",
    "type": "statement:if"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "function util.readfile(filename)\r\n  local file, err = io.open(filename, \"rb\")\r\n  if file then\r\n    local str = file:read(\"*a\")\r\n    file:close()\r\n    return str\r\n  else\r\n    return nil, err\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "local file, err = io.open(filename, \"rb\")",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "if file then\r\n    local str = file:read(\"*a\")\r\n    file:close()\r\n    return str\r\n  else\r\n    return nil, err\r\n  end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "local str = file:read(\"*a\")",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "file:close()",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function util.writefile(filename, contents)\r\n  local file, err = io.open(filename, \"wb\")\r\n  if file then\r\n    file:write(contents)\r\n    file:close()\r\n    return true\r\n  else\r\n    return nil, err\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "local file, err = io.open(filename, \"wb\")",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "if file then\r\n    file:write(contents)\r\n    file:close()\r\n    return true\r\n  else\r\n    return nil, err\r\n  end",
    "type": "statement:if"
  }, {
    "id": 20,
    "text": "file:write(contents)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function util.tostring(o)\r\n  local out = {}\r\n  if type(o) == \"table\" then\r\n    out[#out+1] = \"{ \"\r\n    for k, v in pairs(o) do\r\n      out[#out+1] = \"[\" .. util.tostring(k) .. \"] = \" .. util.tostring(v) .. \", \"\r\n    end\r\n    out[#out+1] = \"}\"\r\n  elseif type(o) == \"string\" then\r\n    out[#out+1] = o:format(\"%q\")\r\n  else\r\n    out[#out+1] = tostring(o)\r\n  end\r\n  return table.concat(out)\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local out = {}",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if type(o) == \"table\" then\r\n    out[#out+1] = \"{ \"\r\n    for k, v in pairs(o) do\r\n      out[#out+1] = \"[\" .. util.tostring(k) .. \"] = \" .. util.tostring(v) .. \", \"\r\n    end\r\n    out[#out+1] = \"}\"\r\n  elseif type(o) == \"string\" then\r\n    out[#out+1] = o:format(\"%q\")\r\n  else\r\n    out[#out+1] = tostring(o)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "out[#out+1] = \"{ \"",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "for k, v in pairs(o) do\r\n      out[#out+1] = \"[\" .. util.tostring(k) .. \"] = \" .. util.tostring(v) .. \", \"\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 27,
    "text": "out[#out+1] = \"[\" .. util.tostring(k) .. \"] = \" .. util.tostring(v) .. \", \"",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "out[#out+1] = \"}\"",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "out[#out+1] = o:format(\"%q\")",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "out[#out+1] = tostring(o)",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 32,
    "text": "function util.flatten(t)\r\n   local res = {}\r\n   for _, item in ipairs(t) do\r\n      if type(item) == \"table\" then\r\n\t res[#res + 1] = util.flatten(item)\r\n      else\r\n\t res[#res + 1] = item\r\n      end\r\n   end\r\n   return table.concat(res)\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "local res = {}",
    "type": "statement:localassign"
  }, {
    "id": 34,
    "text": "for _, item in ipairs(t) do\r\n      if type(item) == \"table\" then\r\n\t res[#res + 1] = util.flatten(item)\r\n      else\r\n\t res[#res + 1] = item\r\n      end\r\n   end",
    "type": "statement:genericfor"
  }, {
    "id": 35,
    "text": "if type(item) == \"table\" then\r\n\t res[#res + 1] = util.flatten(item)\r\n      else\r\n\t res[#res + 1] = item\r\n      end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "res[#res + 1] = util.flatten(item)",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "res[#res + 1] = item",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function util.maketag(name, data, class)\r\n  if class then class = ' class=\"' .. class .. '\"' else class = \"\" end\r\n  if not data then\r\n    return \"<\" .. name .. class .. \"/>\"\r\n  elseif type(data) == \"string\" then\r\n    return \"<\" .. name .. class .. \">\" .. data ..\r\n      \"</\" .. name .. \">\"\r\n  else\r\n    local attrs = {}\r\n    for k, v in pairs(data) do\r\n      if type(k) == \"string\" then\r\n        table.insert(attrs, k .. '=\"' .. tostring(v) .. '\"')\r\n      end\r\n    end\r\n    local open_tag = \"<\" .. name .. class .. \" \" ..\r\n      table.concat(attrs, \" \") .. \">\"\r\n    local close_tag = \"</\" .. name .. \">\"\r\n    return open_tag .. util.flatten(data) .. close_tag       \r\n  end      \r\nend",
    "type": "function"
  }, {
    "id": 40,
    "text": "if class then class = ' class=\"' .. class .. '\"' else class = \"\" end",
    "type": "statement:if"
  }, {
    "id": 41,
    "text": "class = ' class=\"' .. class .. '\"'",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "class = \"\"",
    "type": "statement:assign"
  }, {
    "id": 43,
    "text": "if not data then\r\n    return \"<\" .. name .. class .. \"/>\"\r\n  elseif type(data) == \"string\" then\r\n    return \"<\" .. name .. class .. \">\" .. data ..\r\n      \"</\" .. name .. \">\"\r\n  else\r\n    local attrs = {}\r\n    for k, v in pairs(data) do\r\n      if type(k) == \"string\" then\r\n        table.insert(attrs, k .. '=\"' .. tostring(v) .. '\"')\r\n      end\r\n    end\r\n    local open_tag = \"<\" .. name .. class .. \" \" ..\r\n      table.concat(attrs, \" \") .. \">\"\r\n    local close_tag = \"</\" .. name .. \">\"\r\n    return open_tag .. util.flatten(data) .. close_tag       \r\n  end",
    "type": "statement:if"
  }, {
    "id": 44,
    "text": "local attrs = {}",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "for k, v in pairs(data) do\r\n      if type(k) == \"string\" then\r\n        table.insert(attrs, k .. '=\"' .. tostring(v) .. '\"')\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 46,
    "text": "if type(k) == \"string\" then\r\n        table.insert(attrs, k .. '=\"' .. tostring(v) .. '\"')\r\n      end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "table.insert(attrs, k .. '=\"' .. tostring(v) .. '\"')",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "local open_tag = \"<\" .. name .. class .. \" \" ..\r\n      table.concat(attrs, \" \") .. \">\"",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local close_tag = \"</\" .. name .. \">\"",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function util.newtag(name)\r\n  local tag = {}\r\n  setmetatable(tag, {\r\n                 __call = function (_, data)\r\n                            return util.maketag(name, data)\r\n                          end,\r\n                 __index = function(_, class)\r\n                             return function (data)\r\n                                      return util.maketag(name, data, class)\r\n                                    end\r\n                           end\r\n               })\r\n  return tag\r\nend",
    "type": "function"
  }, {
    "id": 52,
    "text": "local tag = {}",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "setmetatable(tag, {\r\n                 __call = function (_, data)\r\n                            return util.maketag(name, data)\r\n                          end,\r\n                 __index = function(_, class)\r\n                             return function (data)\r\n                                      return util.maketag(name, data, class)\r\n                                    end\r\n                           end\r\n               })",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "function util.htmlify(func)\r\n  local tags = {}\r\n  local env = { H = function (name)\r\n\t\t      local tag = tags[name]\r\n\t\t      if not tag then\r\n\t\t\ttag = util.newtag(name)\r\n\t\t\ttags[name] = tag\r\n\t\t      end\r\n\t\t      return tag\r\n\t\t    end\r\n\t      }\r\n  local old_env = getfenv(func)\r\n  setmetatable(env, { __index = function (env, name)\r\n\t\t\t\t  if old_env[name] then\r\n\t\t\t\t    return old_env[name]\r\n\t\t\t\t  else\r\n\t\t\t\t    local tag = util.newtag(name)\r\n\t\t\t\t    rawset(env, name, tag)\r\n\t\t\t\t    return tag\r\n\t\t\t\t  end\r\n\t\t\t\tend })\r\n  setfenv(func, env)\r\nend",
    "type": "function"
  }, {
    "id": 56,
    "text": "local tags = {}",
    "type": "statement:localassign"
  }, {
    "id": 57,
    "text": "local env = { H = function (name)\r\n\t\t      local tag = tags[name]\r\n\t\t      if not tag then\r\n\t\t\ttag = util.newtag(name)\r\n\t\t\ttags[name] = tag\r\n\t\t      end\r\n\t\t      return tag\r\n\t\t    end\r\n\t      }",
    "type": "statement:localassign"
  }, {
    "id": 58,
    "text": "local tag = tags[name]",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if not tag then\r\n\t\t\ttag = util.newtag(name)\r\n\t\t\ttags[name] = tag\r\n\t\t      end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "tag = util.newtag(name)",
    "type": "statement:assign"
  }, {
    "id": 61,
    "text": "tags[name] = tag",
    "type": "statement:assign"
  }, {
    "id": 62,
    "text": "local old_env = getfenv(func)",
    "type": "statement:localassign"
  }, {
    "id": 63,
    "text": "setmetatable(env, { __index = function (env, name)\r\n\t\t\t\t  if old_env[name] then\r\n\t\t\t\t    return old_env[name]\r\n\t\t\t\t  else\r\n\t\t\t\t    local tag = util.newtag(name)\r\n\t\t\t\t    rawset(env, name, tag)\r\n\t\t\t\t    return tag\r\n\t\t\t\t  end\r\n\t\t\t\tend })",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "if old_env[name] then\r\n\t\t\t\t    return old_env[name]\r\n\t\t\t\t  else\r\n\t\t\t\t    local tag = util.newtag(name)\r\n\t\t\t\t    rawset(env, name, tag)\r\n\t\t\t\t    return tag\r\n\t\t\t\t  end",
    "type": "statement:if"
  }, {
    "id": 65,
    "text": "local tag = util.newtag(name)",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "rawset(env, name, tag)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "setfenv(func, env)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function util.merge(...)\r\n  local t = {}\r\n  local ts = { ... }\r\n  for i = 1, select('#', ...) do\r\n    if ts[i] then\r\n      for k, v in pairs(ts[i]) do\r\n\tt[k] = v\r\n      end\r\n    end\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 70,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 71,
    "text": "local ts = { ... }",
    "type": "statement:localassign"
  }, {
    "id": 72,
    "text": "for i = 1, select('#', ...) do\r\n    if ts[i] then\r\n      for k, v in pairs(ts[i]) do\r\n\tt[k] = v\r\n      end\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 73,
    "text": "if ts[i] then\r\n      for k, v in pairs(ts[i]) do\r\n\tt[k] = v\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 74,
    "text": "for k, v in pairs(ts[i]) do\r\n\tt[k] = v\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 75,
    "text": "t[k] = v",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 77,
    "text": "function util.concat(...)\r\n  local t = {}\r\n  local ts = { ... }\r\n  for i = 1, select('#', ...) do\r\n    if ts[i] then\r\n      for k, v in ipairs(ts[i]) do\r\n\tt[#t+1] = v\r\n      end\r\n    end\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 78,
    "text": "for i = 1, select('#', ...) do\r\n    if ts[i] then\r\n      for k, v in ipairs(ts[i]) do\r\n\tt[#t+1] = v\r\n      end\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 79,
    "text": "if ts[i] then\r\n      for k, v in ipairs(ts[i]) do\r\n\tt[#t+1] = v\r\n      end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 80,
    "text": "for k, v in ipairs(ts[i]) do\r\n\tt[#t+1] = v\r\n      end",
    "type": "statement:genericfor"
  }, {
    "id": 81,
    "text": "t[#t+1] = v",
    "type": "statement:assign"
  }, {
    "id": 82,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 83,
    "text": "function (_, data)\r\n                            return util.maketag(name, data)\r\n                          end",
    "type": "function"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function (data)\r\n                                      return util.maketag(name, data, class)\r\n                                    end",
    "type": "function"
  }, {
    "id": 86,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 87,
    "text": "function(_, class)\r\n                             return function (data)\r\n                                      return util.maketag(name, data, class)\r\n                                    end\r\n                           end",
    "type": "function"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function (name)\r\n\t\t      local tag = tags[name]\r\n\t\t      if not tag then\r\n\t\t\ttag = util.newtag(name)\r\n\t\t\ttags[name] = tag\r\n\t\t      end\r\n\t\t      return tag\r\n\t\t    end",
    "type": "function"
  }, {
    "id": 90,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 91,
    "text": "function (env, name)\r\n\t\t\t\t  if old_env[name] then\r\n\t\t\t\t    return old_env[name]\r\n\t\t\t\t  else\r\n\t\t\t\t    local tag = util.newtag(name)\r\n\t\t\t\t    rawset(env, name, tag)\r\n\t\t\t\t    return tag\r\n\t\t\t\t  end\r\n\t\t\t\tend",
    "type": "function"
  }, {
    "id": 92,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 93,
    "text": "",
    "type": "function container"
  }, {
    "id": 94,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 95,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 96,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 97,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 98,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 99,
    "text": "loadfile",
    "type": "global function"
  }, {
    "id": 100,
    "text": "getfenv",
    "type": "global function"
  }, {
    "id": 101,
    "text": "rawset",
    "type": "global function"
  }, {
    "id": 102,
    "text": "open",
    "type": "global function"
  }, {
    "id": 103,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 104,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 105,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 106,
    "text": "select",
    "type": "global function"
  }, {
    "id": 107,
    "text": "type",
    "type": "global function"
  }, {
    "id": 108,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 109,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 111,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 113,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 115,
    "text": "",
    "type": "variable container"
  }, {
    "id": 116,
    "text": "",
    "type": "require container"
  }, {
    "id": 117,
    "text": "",
    "type": "local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 119,
    "text": "",
    "type": "interface container"
  }, {
    "id": 120,
    "text": "",
    "type": "interface"
  }, {
    "id": 121,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 122,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 123,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 124,
    "text": "",
    "type": "require local variable"
  } ]
}