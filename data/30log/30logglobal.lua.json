{
  "_filename": "30logglobal.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/30log/30logglobal.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 9
  }, {
    "from": 2,
    "label": "has",
    "to": 10
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 11,
    "label": "has",
    "to": 14
  }, {
    "from": 11,
    "label": "has",
    "to": 15
  }, {
    "from": 11,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 11,
    "label": "has",
    "to": 9
  }, {
    "from": 11,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 21,
    "label": "has",
    "to": 9
  }, {
    "from": 21,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 9
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 9
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 28
  }, {
    "from": 38,
    "label": "has",
    "to": 9
  }, {
    "from": 35,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 40,
    "label": "has",
    "to": 30
  }, {
    "from": 40,
    "label": "has",
    "to": 31
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 40,
    "label": "has",
    "to": 9
  }, {
    "from": 35,
    "label": "has",
    "to": 9
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 9
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 9
  }, {
    "from": 43,
    "label": "has",
    "to": 9
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 11,
    "label": "calls",
    "to": 47
  }, {
    "from": 46,
    "label": "calls",
    "to": 47
  }, {
    "from": 2,
    "label": "calls",
    "to": 51
  }, {
    "from": 11,
    "label": "calls",
    "to": 48
  }, {
    "from": 21,
    "label": "calls",
    "to": 48
  }, {
    "from": 46,
    "label": "calls",
    "to": 48
  }, {
    "from": 11,
    "label": "calls",
    "to": 49
  }, {
    "from": 11,
    "label": "calls",
    "to": 53
  }, {
    "from": 21,
    "label": "calls",
    "to": 53
  }, {
    "from": 46,
    "label": "calls",
    "to": 53
  }, {
    "from": 46,
    "label": "calls",
    "to": 50
  }, {
    "from": 46,
    "label": "calls",
    "to": 50
  }, {
    "from": 2,
    "label": "calls",
    "to": 2
  }, {
    "from": 11,
    "label": "calls",
    "to": 2
  }, {
    "from": 11,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 21,
    "label": "calls",
    "to": 2
  }, {
    "from": 46,
    "label": "calls",
    "to": 2
  }, {
    "from": 46,
    "label": "calls",
    "to": 2
  }, {
    "from": 46,
    "label": "calls",
    "to": 52
  }, {
    "from": 46,
    "label": "calls",
    "to": 52
  }, {
    "from": 2,
    "label": "calls",
    "to": 54
  }, {
    "from": 2,
    "label": "calls",
    "to": 54
  }, {
    "from": 11,
    "label": "calls",
    "to": 54
  }, {
    "from": 1,
    "label": "contains",
    "to": 46
  }, {
    "from": 46,
    "label": "declares",
    "to": 2
  }, {
    "from": 46,
    "label": "declares",
    "to": 11
  }, {
    "from": 46,
    "label": "declares",
    "to": 21
  }, {
    "from": 46,
    "label": "declares",
    "to": 27
  }, {
    "from": 46,
    "label": "declares",
    "to": 29
  }, {
    "from": 46,
    "label": "declares",
    "to": 35
  }, {
    "from": 46,
    "label": "declares",
    "to": 42
  }, {
    "from": 46,
    "label": "declares",
    "to": 43
  }, {
    "from": 1,
    "label": "contains",
    "to": 56
  }, {
    "from": 1,
    "label": "contains",
    "to": 57
  }, {
    "from": 56,
    "label": "initializes",
    "to": 58
  }, {
    "from": 58,
    "label": "assigns",
    "to": 59
  }, {
    "from": 56,
    "label": "initializes",
    "to": 60
  }, {
    "from": 60,
    "label": "assigns",
    "to": 61
  }, {
    "from": 56,
    "label": "initializes",
    "to": 62
  }, {
    "from": 62,
    "label": "assigns",
    "to": 63
  }, {
    "from": 56,
    "label": "initializes",
    "to": 64
  }, {
    "from": 64,
    "label": "assigns",
    "to": 65
  }, {
    "from": 56,
    "label": "initializes",
    "to": 66
  }, {
    "from": 56,
    "label": "initializes",
    "to": 67
  }, {
    "from": 56,
    "label": "initializes",
    "to": 68
  }, {
    "from": 56,
    "label": "initializes",
    "to": 69
  }, {
    "from": 69,
    "label": "assigns",
    "to": 70
  }, {
    "from": 56,
    "label": "initializes",
    "to": 71
  }, {
    "from": 71,
    "label": "assigns",
    "to": 72
  }, {
    "from": 1,
    "label": "provides",
    "to": 73
  }, {
    "from": 55,
    "label": "represents",
    "to": 74
  }, {
    "from": 73,
    "label": "provides",
    "to": 74
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "30logglobal",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function deep_copy(t, dest, aType)\r\n  local t, r = t or {}, dest or {}\r\n  for k,v in pairs(t) do\r\n    if aType and type(v)==aType then r[k] = v elseif not aType then\r\n      if type(v) == 'table' and k ~= \"__index\" then r[k] = deep_copy(v) else r[k] = v end\r\n    end\r\n  end; return r\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local t, r = t or {}, dest or {}",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "for k,v in pairs(t) do\r\n    if aType and type(v)==aType then r[k] = v elseif not aType then\r\n      if type(v) == 'table' and k ~= \"__index\" then r[k] = deep_copy(v) else r[k] = v end\r\n    end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 5,
    "text": "if aType and type(v)==aType then r[k] = v elseif not aType then\r\n      if type(v) == 'table' and k ~= \"__index\" then r[k] = deep_copy(v) else r[k] = v end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 6,
    "text": "r[k] = v",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "if type(v) == 'table' and k ~= \"__index\" then r[k] = deep_copy(v) else r[k] = v end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "r[k] = deep_copy(v)",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 10,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 11,
    "text": "local function instantiate(self,...)\r\n  assert(_classes[self],'new() should be called from a class.')\r\n  local instance = deep_copy(self) ; _instances[instance] = tostring(instance); setmetatable(instance,self)\r\n  if self.__init then if type(self.__init) == 'table' then deep_copy(self.__init, instance) else self.__init(instance, ...) end; end;\r\n  return instance\r\nend",
    "type": "function"
  }, {
    "id": 12,
    "text": "assert(_classes[self],'new() should be called from a class.')",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "local instance = deep_copy(self)",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "_instances[instance] = tostring(instance)",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "setmetatable(instance,self)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "if self.__init then if type(self.__init) == 'table' then deep_copy(self.__init, instance) else self.__init(instance, ...) end; end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "if type(self.__init) == 'table' then deep_copy(self.__init, instance) else self.__init(instance, ...) end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "deep_copy(self.__init, instance)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "self.__init(instance, ...)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function extends(self,extra_params)\r\n  local heir = {}; _classes[heir] = tostring(heir); deep_copy(extra_params, deep_copy(self, heir));\r\n  heir.__index, heir.super = heir, self; return setmetatable(heir,self)\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local heir = {}",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "_classes[heir] = tostring(heir)",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "deep_copy(extra_params, deep_copy(self, heir))",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "heir.__index, heir.super = heir, self",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function(self,include) assert(_classes[self], 'Mixins can only be used on classes.'); return deep_copy(include, self, 'function') end",
    "type": "function"
  }, {
    "id": 28,
    "text": "assert(_classes[self], 'Mixins can only be used on classes.')",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "function(self, kind) local super; while true do super = getmetatable(super or self) ; if super == kind or super == nil then break end ; end; \r\n  return kind and (super == kind) end",
    "type": "function"
  }, {
    "id": 30,
    "text": "local super",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "while true do super = getmetatable(super or self) ; if super == kind or super == nil then break end ; end",
    "type": "statement:while"
  }, {
    "id": 32,
    "text": "super = getmetatable(super or self)",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "if super == kind or super == nil then break end",
    "type": "statement:if"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function(attr)\r\n  local c = deep_copy(attr) ; _classes[c] = tostring(c);\r\n  c.include = function(self,include) assert(_classes[self], 'Mixins can only be used on classes.'); return deep_copy(include, self, 'function') end\r\n  c.new, c.extends, c.__index, c.__call, c.__tostring = instantiate, extends, c, baseMt.__call, baseMt.__tostring;\r\n  c.is = function(self, kind) local super; while true do super = getmetatable(super or self) ; if super == kind or super == nil then break end ; end; \r\n  return kind and (super == kind) end; return setmetatable(c,baseMt)\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "local c = deep_copy(attr)",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "_classes[c] = tostring(c)",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "c.include = function(self,include) assert(_classes[self], 'Mixins can only be used on classes.'); return deep_copy(include, self, 'function') end",
    "type": "statement:assign"
  }, {
    "id": 39,
    "text": "c.new, c.extends, c.__index, c.__call, c.__tostring = instantiate, extends, c, baseMt.__call, baseMt.__tostring",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "c.is = function(self, kind) local super; while true do super = getmetatable(super or self) ; if super == kind or super == nil then break end ; end; \r\n  return kind and (super == kind) end",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function (self,...) return self:new(...) end",
    "type": "function"
  }, {
    "id": 43,
    "text": "function(self,...)\r\n  if _instances[self] then return ('object(of %s):<%s>'):format((rawget(getmetatable(self),'__name') or '?'), _instances[self]) end\r\n  return _classes[self] and ('class(%s):<%s>'):format((rawget(self,'__name') or '?'),_classes[self]) or self\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "if _instances[self] then return ('object(of %s):<%s>'):format((rawget(getmetatable(self),'__name') or '?'), _instances[self]) end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "",
    "type": "function container"
  }, {
    "id": 47,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 48,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 49,
    "text": "__init",
    "type": "global function"
  }, {
    "id": 50,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 51,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 52,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 53,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 54,
    "text": "type",
    "type": "global function"
  }, {
    "id": 55,
    "text": "",
    "type": "global variable"
  }, {
    "id": 56,
    "text": "",
    "type": "variable container"
  }, {
    "id": 57,
    "text": "",
    "type": "require container"
  }, {
    "id": 58,
    "text": "",
    "type": "local variable"
  }, {
    "id": 59,
    "text": "",
    "type": "n/a"
  }, {
    "id": 60,
    "text": "",
    "type": "local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "n/a"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "n/a"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "n/a"
  }, {
    "id": 66,
    "text": "",
    "type": "local variable"
  }, {
    "id": 67,
    "text": "",
    "type": "local variable"
  }, {
    "id": 68,
    "text": "",
    "type": "local variable"
  }, {
    "id": 69,
    "text": "",
    "type": "global variable"
  }, {
    "id": 70,
    "text": "",
    "type": "n/a"
  }, {
    "id": 71,
    "text": "",
    "type": "global variable"
  }, {
    "id": 72,
    "text": "",
    "type": "n/a"
  }, {
    "id": 73,
    "text": "",
    "type": "interface container"
  }, {
    "id": 74,
    "text": "",
    "type": "interface"
  } ]
}