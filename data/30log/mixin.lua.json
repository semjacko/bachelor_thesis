{
  "_filename": "mixin.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/30log/specs/mixin.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 6,
    "label": "has",
    "to": 15
  }, {
    "from": 6,
    "label": "has",
    "to": 16
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 8
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 13
  }, {
    "from": 20,
    "label": "has",
    "to": 14
  }, {
    "from": 20,
    "label": "has",
    "to": 15
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 8
  }, {
    "from": 28,
    "label": "has",
    "to": 12
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 28,
    "label": "has",
    "to": 31
  }, {
    "from": 28,
    "label": "has",
    "to": 32
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 7
  }, {
    "from": 34,
    "label": "has",
    "to": 8
  }, {
    "from": 34,
    "label": "has",
    "to": 9
  }, {
    "from": 34,
    "label": "has",
    "to": 10
  }, {
    "from": 34,
    "label": "has",
    "to": 11
  }, {
    "from": 34,
    "label": "has",
    "to": 12
  }, {
    "from": 34,
    "label": "has",
    "to": 13
  }, {
    "from": 34,
    "label": "has",
    "to": 14
  }, {
    "from": 34,
    "label": "has",
    "to": 15
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 21
  }, {
    "from": 35,
    "label": "has",
    "to": 22
  }, {
    "from": 35,
    "label": "has",
    "to": 23
  }, {
    "from": 35,
    "label": "has",
    "to": 8
  }, {
    "from": 35,
    "label": "has",
    "to": 24
  }, {
    "from": 35,
    "label": "has",
    "to": 13
  }, {
    "from": 35,
    "label": "has",
    "to": 14
  }, {
    "from": 35,
    "label": "has",
    "to": 15
  }, {
    "from": 33,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 29
  }, {
    "from": 29,
    "label": "has",
    "to": 27
  }, {
    "from": 36,
    "label": "has",
    "to": 8
  }, {
    "from": 36,
    "label": "has",
    "to": 12
  }, {
    "from": 36,
    "label": "has",
    "to": 30
  }, {
    "from": 36,
    "label": "has",
    "to": 31
  }, {
    "from": 33,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "calls",
    "to": 40
  }, {
    "from": 38,
    "label": "calls",
    "to": 46
  }, {
    "from": 38,
    "label": "calls",
    "to": 46
  }, {
    "from": 38,
    "label": "calls",
    "to": 46
  }, {
    "from": 38,
    "label": "calls",
    "to": 45
  }, {
    "from": 38,
    "label": "calls",
    "to": 41
  }, {
    "from": 38,
    "label": "calls",
    "to": 41
  }, {
    "from": 38,
    "label": "calls",
    "to": 41
  }, {
    "from": 38,
    "label": "calls",
    "to": 44
  }, {
    "from": 38,
    "label": "calls",
    "to": 44
  }, {
    "from": 38,
    "label": "calls",
    "to": 44
  }, {
    "from": 38,
    "label": "calls",
    "to": 44
  }, {
    "from": 38,
    "label": "calls",
    "to": 44
  }, {
    "from": 38,
    "label": "calls",
    "to": 44
  }, {
    "from": 38,
    "label": "calls",
    "to": 39
  }, {
    "from": 38,
    "label": "calls",
    "to": 39
  }, {
    "from": 38,
    "label": "calls",
    "to": 39
  }, {
    "from": 38,
    "label": "calls",
    "to": 43
  }, {
    "from": 38,
    "label": "calls",
    "to": 43
  }, {
    "from": 38,
    "label": "calls",
    "to": 43
  }, {
    "from": 38,
    "label": "calls",
    "to": 43
  }, {
    "from": 38,
    "label": "calls",
    "to": 43
  }, {
    "from": 38,
    "label": "calls",
    "to": 43
  }, {
    "from": 38,
    "label": "calls",
    "to": 43
  }, {
    "from": 38,
    "label": "calls",
    "to": 42
  }, {
    "from": 2,
    "label": "contains",
    "to": 38
  }, {
    "from": 38,
    "label": "declares",
    "to": 3
  }, {
    "from": 38,
    "label": "declares",
    "to": 4
  }, {
    "from": 38,
    "label": "declares",
    "to": 5
  }, {
    "from": 38,
    "label": "declares",
    "to": 6
  }, {
    "from": 38,
    "label": "declares",
    "to": 17
  }, {
    "from": 38,
    "label": "declares",
    "to": 18
  }, {
    "from": 38,
    "label": "declares",
    "to": 19
  }, {
    "from": 38,
    "label": "declares",
    "to": 20
  }, {
    "from": 38,
    "label": "declares",
    "to": 26
  }, {
    "from": 38,
    "label": "declares",
    "to": 28
  }, {
    "from": 38,
    "label": "declares",
    "to": 33
  }, {
    "from": 2,
    "label": "contains",
    "to": 47
  }, {
    "from": 2,
    "label": "contains",
    "to": 48
  }, {
    "from": 48,
    "label": "initializes",
    "to": 49
  }, {
    "from": 49,
    "label": "requires",
    "to": 1
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 18
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 19
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 4
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 18
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 19
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 26
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 28
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "30log",
    "type": "module"
  }, {
    "id": 2,
    "text": "mixin",
    "type": "module"
  }, {
    "id": 3,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 4,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 5,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 6,
    "text": "function()\r\n    local mixin = { \r\n      foo = function() end,\r\n      bar = function() end,\r\n      baz = function() end\r\n    }\r\n    \r\n    local theClass = Class()\r\n    \r\n    assert_nil(theClass.foo)\r\n    assert_nil(theClass.bar)\r\n    assert_nil(theClass.baz)\r\n    \r\n    theClass:include(mixin)\r\n    \r\n    assert_equal(type(theClass.foo), 'function')\r\n    assert_equal(type(theClass.bar), 'function')\r\n    assert_equal(type(theClass.baz), 'function')  \r\n  \r\n  end",
    "type": "function"
  }, {
    "id": 7,
    "text": "local mixin = { \r\n      foo = function() end,\r\n      bar = function() end,\r\n      baz = function() end\r\n    }",
    "type": "statement:localassign"
  }, {
    "id": 8,
    "text": "local theClass = Class()",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "assert_nil(theClass.foo)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "assert_nil(theClass.bar)",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert_nil(theClass.baz)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "theClass:include(mixin)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "assert_equal(type(theClass.foo), 'function')",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "assert_equal(type(theClass.bar), 'function')",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert_equal(type(theClass.baz), 'function')",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 18,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 19,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 20,
    "text": "function()\r\n    local mixinA = {foo = function() end}\r\n    local mixinB = {bar = function() end}\r\n    local mixinC = {baz = function() end}\r\n    \r\n    local theClass = Class()      \r\n    theClass:include(mixinA):include(mixinB):include(mixinC)\r\n    \r\n    assert_equal(type(theClass.foo), 'function')\r\n    assert_equal(type(theClass.bar), 'function')\r\n    assert_equal(type(theClass.baz), 'function')  \r\n  \r\n  end",
    "type": "function"
  }, {
    "id": 21,
    "text": "local mixinA = {foo = function() end}",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "local mixinB = {bar = function() end}",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "local mixinC = {baz = function() end}",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "theClass:include(mixinA):include(mixinB):include(mixinC)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function(self) return self end",
    "type": "function"
  }, {
    "id": 27,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 28,
    "text": "function()\r\n    local mixin = {foo = function(self) return self end}\r\n    local theClass = Class()      \r\n    theClass:include(mixin)\r\n    local instance = theClass()\r\n    assert_equal(instance:foo(), instance)  \r\n  end",
    "type": "function"
  }, {
    "id": 29,
    "text": "local mixin = {foo = function(self) return self end}",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local instance = theClass()",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "assert_equal(instance:foo(), instance)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 33,
    "text": "function()\r\n\r\n  test('are set of functions that can be imported into a class', function()\r\n    local mixin = { \r\n      foo = function() end,\r\n      bar = function() end,\r\n      baz = function() end\r\n    }\r\n    \r\n    local theClass = Class()\r\n    \r\n    assert_nil(theClass.foo)\r\n    assert_nil(theClass.bar)\r\n    assert_nil(theClass.baz)\r\n    \r\n    theClass:include(mixin)\r\n    \r\n    assert_equal(type(theClass.foo), 'function')\r\n    assert_equal(type(theClass.bar), 'function')\r\n    assert_equal(type(theClass.baz), 'function')  \r\n  \r\n  end)\r\n  \r\n  test('can be chained', function()\r\n    local mixinA = {foo = function() end}\r\n    local mixinB = {bar = function() end}\r\n    local mixinC = {baz = function() end}\r\n    \r\n    local theClass = Class()      \r\n    theClass:include(mixinA):include(mixinB):include(mixinC)\r\n    \r\n    assert_equal(type(theClass.foo), 'function')\r\n    assert_equal(type(theClass.bar), 'function')\r\n    assert_equal(type(theClass.baz), 'function')  \r\n  \r\n  end)    \r\n  \r\n  test('objects can use methods from mixins as class methods', function()\r\n    local mixin = {foo = function(self) return self end}\r\n    local theClass = Class()      \r\n    theClass:include(mixin)\r\n    local instance = theClass()\r\n    assert_equal(instance:foo(), instance)  \r\n  end)\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "test('are set of functions that can be imported into a class', function()\r\n    local mixin = { \r\n      foo = function() end,\r\n      bar = function() end,\r\n      baz = function() end\r\n    }\r\n    \r\n    local theClass = Class()\r\n    \r\n    assert_nil(theClass.foo)\r\n    assert_nil(theClass.bar)\r\n    assert_nil(theClass.baz)\r\n    \r\n    theClass:include(mixin)\r\n    \r\n    assert_equal(type(theClass.foo), 'function')\r\n    assert_equal(type(theClass.bar), 'function')\r\n    assert_equal(type(theClass.baz), 'function')  \r\n  \r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "test('can be chained', function()\r\n    local mixinA = {foo = function() end}\r\n    local mixinB = {bar = function() end}\r\n    local mixinC = {baz = function() end}\r\n    \r\n    local theClass = Class()      \r\n    theClass:include(mixinA):include(mixinB):include(mixinC)\r\n    \r\n    assert_equal(type(theClass.foo), 'function')\r\n    assert_equal(type(theClass.bar), 'function')\r\n    assert_equal(type(theClass.baz), 'function')  \r\n  \r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "test('objects can use methods from mixins as class methods', function()\r\n    local mixin = {foo = function(self) return self end}\r\n    local theClass = Class()      \r\n    theClass:include(mixin)\r\n    local instance = theClass()\r\n    assert_equal(instance:foo(), instance)  \r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "",
    "type": "function container"
  }, {
    "id": 39,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 40,
    "text": "context",
    "type": "global function"
  }, {
    "id": 41,
    "text": "Class",
    "type": "global function"
  }, {
    "id": 42,
    "text": "theClass",
    "type": "global function"
  }, {
    "id": 43,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 44,
    "text": "type",
    "type": "global function"
  }, {
    "id": 45,
    "text": "require",
    "type": "global function"
  }, {
    "id": 46,
    "text": "test",
    "type": "global function"
  }, {
    "id": 47,
    "text": "",
    "type": "variable container"
  }, {
    "id": 48,
    "text": "",
    "type": "require container"
  }, {
    "id": 49,
    "text": "",
    "type": "require local variable"
  } ]
}