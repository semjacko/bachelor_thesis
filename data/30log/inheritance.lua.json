{
  "_filename": "inheritance.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/30log/specs/inheritance.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 9,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 16,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 27,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 28
  }, {
    "from": 38,
    "label": "has",
    "to": 29
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 32
  }, {
    "from": 39,
    "label": "has",
    "to": 33
  }, {
    "from": 39,
    "label": "has",
    "to": 34
  }, {
    "from": 39,
    "label": "has",
    "to": 35
  }, {
    "from": 37,
    "label": "has",
    "to": 40
  }, {
    "from": 41,
    "label": "has",
    "to": 28
  }, {
    "from": 41,
    "label": "has",
    "to": 42
  }, {
    "from": 41,
    "label": "has",
    "to": 43
  }, {
    "from": 44,
    "label": "has",
    "to": 28
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 44,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 28
  }, {
    "from": 48,
    "label": "has",
    "to": 42
  }, {
    "from": 47,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 28
  }, {
    "from": 49,
    "label": "has",
    "to": 45
  }, {
    "from": 47,
    "label": "has",
    "to": 50
  }, {
    "from": 51,
    "label": "has",
    "to": 28
  }, {
    "from": 51,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 53
  }, {
    "from": 51,
    "label": "has",
    "to": 54
  }, {
    "from": 51,
    "label": "has",
    "to": 55
  }, {
    "from": 51,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 28
  }, {
    "from": 57,
    "label": "has",
    "to": 34
  }, {
    "from": 57,
    "label": "has",
    "to": 35
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 28
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 59,
    "label": "has",
    "to": 62
  }, {
    "from": 59,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 28
  }, {
    "from": 65,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 70,
    "label": "has",
    "to": 28
  }, {
    "from": 70,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 70,
    "label": "has",
    "to": 71
  }, {
    "from": 70,
    "label": "has",
    "to": 72
  }, {
    "from": 70,
    "label": "has",
    "to": 73
  }, {
    "from": 70,
    "label": "has",
    "to": 74
  }, {
    "from": 77,
    "label": "has",
    "to": 78
  }, {
    "from": 77,
    "label": "has",
    "to": 79
  }, {
    "from": 77,
    "label": "has",
    "to": 80
  }, {
    "from": 77,
    "label": "has",
    "to": 81
  }, {
    "from": 77,
    "label": "has",
    "to": 82
  }, {
    "from": 77,
    "label": "has",
    "to": 83
  }, {
    "from": 77,
    "label": "has",
    "to": 84
  }, {
    "from": 77,
    "label": "has",
    "to": 85
  }, {
    "from": 77,
    "label": "has",
    "to": 86
  }, {
    "from": 77,
    "label": "has",
    "to": 87
  }, {
    "from": 77,
    "label": "has",
    "to": 88
  }, {
    "from": 89,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 28
  }, {
    "from": 90,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 90,
    "label": "has",
    "to": 52
  }, {
    "from": 90,
    "label": "has",
    "to": 53
  }, {
    "from": 90,
    "label": "has",
    "to": 54
  }, {
    "from": 90,
    "label": "has",
    "to": 55
  }, {
    "from": 89,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 28
  }, {
    "from": 91,
    "label": "has",
    "to": 34
  }, {
    "from": 91,
    "label": "has",
    "to": 35
  }, {
    "from": 89,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 28
  }, {
    "from": 92,
    "label": "has",
    "to": 60
  }, {
    "from": 92,
    "label": "has",
    "to": 61
  }, {
    "from": 92,
    "label": "has",
    "to": 62
  }, {
    "from": 92,
    "label": "has",
    "to": 63
  }, {
    "from": 89,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 28
  }, {
    "from": 93,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 93,
    "label": "has",
    "to": 66
  }, {
    "from": 93,
    "label": "has",
    "to": 67
  }, {
    "from": 93,
    "label": "has",
    "to": 68
  }, {
    "from": 89,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 28
  }, {
    "from": 94,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 94,
    "label": "has",
    "to": 71
  }, {
    "from": 94,
    "label": "has",
    "to": 72
  }, {
    "from": 94,
    "label": "has",
    "to": 73
  }, {
    "from": 89,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 78
  }, {
    "from": 95,
    "label": "has",
    "to": 79
  }, {
    "from": 95,
    "label": "has",
    "to": 80
  }, {
    "from": 95,
    "label": "has",
    "to": 81
  }, {
    "from": 95,
    "label": "has",
    "to": 82
  }, {
    "from": 95,
    "label": "has",
    "to": 83
  }, {
    "from": 95,
    "label": "has",
    "to": 84
  }, {
    "from": 95,
    "label": "has",
    "to": 85
  }, {
    "from": 95,
    "label": "has",
    "to": 86
  }, {
    "from": 95,
    "label": "has",
    "to": 87
  }, {
    "from": 89,
    "label": "has",
    "to": 96
  }, {
    "from": 97,
    "label": "has",
    "to": 98
  }, {
    "from": 97,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 97,
    "label": "has",
    "to": 99
  }, {
    "from": 97,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 97,
    "label": "has",
    "to": 100
  }, {
    "from": 97,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 97,
    "label": "has",
    "to": 101
  }, {
    "from": 97,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 97,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 103,
    "label": "has",
    "to": 105
  }, {
    "from": 103,
    "label": "has",
    "to": 106
  }, {
    "from": 103,
    "label": "has",
    "to": 107
  }, {
    "from": 103,
    "label": "has",
    "to": 108
  }, {
    "from": 103,
    "label": "has",
    "to": 109
  }, {
    "from": 103,
    "label": "has",
    "to": 110
  }, {
    "from": 103,
    "label": "has",
    "to": 111
  }, {
    "from": 103,
    "label": "has",
    "to": 112
  }, {
    "from": 103,
    "label": "has",
    "to": 113
  }, {
    "from": 103,
    "label": "has",
    "to": 114
  }, {
    "from": 103,
    "label": "has",
    "to": 115
  }, {
    "from": 103,
    "label": "has",
    "to": 116
  }, {
    "from": 103,
    "label": "has",
    "to": 117
  }, {
    "from": 103,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 98
  }, {
    "from": 121,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 121,
    "label": "has",
    "to": 99
  }, {
    "from": 121,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 121,
    "label": "has",
    "to": 100
  }, {
    "from": 121,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 121,
    "label": "has",
    "to": 101
  }, {
    "from": 121,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 104
  }, {
    "from": 122,
    "label": "has",
    "to": 105
  }, {
    "from": 122,
    "label": "has",
    "to": 106
  }, {
    "from": 122,
    "label": "has",
    "to": 107
  }, {
    "from": 122,
    "label": "has",
    "to": 108
  }, {
    "from": 122,
    "label": "has",
    "to": 109
  }, {
    "from": 122,
    "label": "has",
    "to": 110
  }, {
    "from": 122,
    "label": "has",
    "to": 111
  }, {
    "from": 122,
    "label": "has",
    "to": 112
  }, {
    "from": 122,
    "label": "has",
    "to": 113
  }, {
    "from": 122,
    "label": "has",
    "to": 114
  }, {
    "from": 122,
    "label": "has",
    "to": 115
  }, {
    "from": 122,
    "label": "has",
    "to": 116
  }, {
    "from": 122,
    "label": "has",
    "to": 117
  }, {
    "from": 119,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 126,
    "label": "has",
    "to": 25
  }, {
    "from": 126,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 124,
    "label": "has",
    "to": 127
  }, {
    "from": 127,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 28
  }, {
    "from": 38,
    "label": "has",
    "to": 29
  }, {
    "from": 127,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 32
  }, {
    "from": 39,
    "label": "has",
    "to": 33
  }, {
    "from": 39,
    "label": "has",
    "to": 34
  }, {
    "from": 39,
    "label": "has",
    "to": 35
  }, {
    "from": 124,
    "label": "has",
    "to": 128
  }, {
    "from": 128,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 28
  }, {
    "from": 48,
    "label": "has",
    "to": 42
  }, {
    "from": 128,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 28
  }, {
    "from": 49,
    "label": "has",
    "to": 45
  }, {
    "from": 124,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 90
  }, {
    "from": 90,
    "label": "has",
    "to": 28
  }, {
    "from": 90,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 90,
    "label": "has",
    "to": 52
  }, {
    "from": 90,
    "label": "has",
    "to": 53
  }, {
    "from": 90,
    "label": "has",
    "to": 54
  }, {
    "from": 90,
    "label": "has",
    "to": 55
  }, {
    "from": 129,
    "label": "has",
    "to": 91
  }, {
    "from": 91,
    "label": "has",
    "to": 28
  }, {
    "from": 91,
    "label": "has",
    "to": 34
  }, {
    "from": 91,
    "label": "has",
    "to": 35
  }, {
    "from": 129,
    "label": "has",
    "to": 92
  }, {
    "from": 92,
    "label": "has",
    "to": 28
  }, {
    "from": 92,
    "label": "has",
    "to": 60
  }, {
    "from": 92,
    "label": "has",
    "to": 61
  }, {
    "from": 92,
    "label": "has",
    "to": 62
  }, {
    "from": 92,
    "label": "has",
    "to": 63
  }, {
    "from": 129,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 28
  }, {
    "from": 93,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 93,
    "label": "has",
    "to": 66
  }, {
    "from": 93,
    "label": "has",
    "to": 67
  }, {
    "from": 93,
    "label": "has",
    "to": 68
  }, {
    "from": 129,
    "label": "has",
    "to": 94
  }, {
    "from": 94,
    "label": "has",
    "to": 28
  }, {
    "from": 94,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 94,
    "label": "has",
    "to": 71
  }, {
    "from": 94,
    "label": "has",
    "to": 72
  }, {
    "from": 94,
    "label": "has",
    "to": 73
  }, {
    "from": 129,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 78
  }, {
    "from": 95,
    "label": "has",
    "to": 79
  }, {
    "from": 95,
    "label": "has",
    "to": 80
  }, {
    "from": 95,
    "label": "has",
    "to": 81
  }, {
    "from": 95,
    "label": "has",
    "to": 82
  }, {
    "from": 95,
    "label": "has",
    "to": 83
  }, {
    "from": 95,
    "label": "has",
    "to": 84
  }, {
    "from": 95,
    "label": "has",
    "to": 85
  }, {
    "from": 95,
    "label": "has",
    "to": 86
  }, {
    "from": 95,
    "label": "has",
    "to": 87
  }, {
    "from": 124,
    "label": "has",
    "to": 130
  }, {
    "from": 130,
    "label": "has",
    "to": 120
  }, {
    "from": 130,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 98
  }, {
    "from": 121,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 121,
    "label": "has",
    "to": 99
  }, {
    "from": 121,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 121,
    "label": "has",
    "to": 100
  }, {
    "from": 121,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 121,
    "label": "has",
    "to": 101
  }, {
    "from": 121,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 130,
    "label": "has",
    "to": 122
  }, {
    "from": 122,
    "label": "has",
    "to": 104
  }, {
    "from": 122,
    "label": "has",
    "to": 105
  }, {
    "from": 122,
    "label": "has",
    "to": 106
  }, {
    "from": 122,
    "label": "has",
    "to": 107
  }, {
    "from": 122,
    "label": "has",
    "to": 108
  }, {
    "from": 122,
    "label": "has",
    "to": 109
  }, {
    "from": 122,
    "label": "has",
    "to": 110
  }, {
    "from": 122,
    "label": "has",
    "to": 111
  }, {
    "from": 122,
    "label": "has",
    "to": 112
  }, {
    "from": 122,
    "label": "has",
    "to": 113
  }, {
    "from": 122,
    "label": "has",
    "to": 114
  }, {
    "from": 122,
    "label": "has",
    "to": 115
  }, {
    "from": 122,
    "label": "has",
    "to": 116
  }, {
    "from": 122,
    "label": "has",
    "to": 117
  }, {
    "from": 124,
    "label": "has",
    "to": 131
  }, {
    "from": 132,
    "label": "calls",
    "to": 133
  }, {
    "from": 12,
    "label": "calls",
    "to": 142
  }, {
    "from": 132,
    "label": "calls",
    "to": 134
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 146
  }, {
    "from": 132,
    "label": "calls",
    "to": 138
  }, {
    "from": 132,
    "label": "calls",
    "to": 138
  }, {
    "from": 132,
    "label": "calls",
    "to": 138
  }, {
    "from": 132,
    "label": "calls",
    "to": 138
  }, {
    "from": 132,
    "label": "calls",
    "to": 138
  }, {
    "from": 132,
    "label": "calls",
    "to": 139
  }, {
    "from": 132,
    "label": "calls",
    "to": 139
  }, {
    "from": 132,
    "label": "calls",
    "to": 139
  }, {
    "from": 132,
    "label": "calls",
    "to": 135
  }, {
    "from": 16,
    "label": "calls",
    "to": 143
  }, {
    "from": 20,
    "label": "calls",
    "to": 144
  }, {
    "from": 132,
    "label": "calls",
    "to": 145
  }, {
    "from": 132,
    "label": "calls",
    "to": 136
  }, {
    "from": 132,
    "label": "calls",
    "to": 136
  }, {
    "from": 132,
    "label": "calls",
    "to": 151
  }, {
    "from": 132,
    "label": "calls",
    "to": 151
  }, {
    "from": 132,
    "label": "calls",
    "to": 151
  }, {
    "from": 132,
    "label": "calls",
    "to": 151
  }, {
    "from": 132,
    "label": "calls",
    "to": 151
  }, {
    "from": 132,
    "label": "calls",
    "to": 151
  }, {
    "from": 132,
    "label": "calls",
    "to": 151
  }, {
    "from": 132,
    "label": "calls",
    "to": 151
  }, {
    "from": 132,
    "label": "calls",
    "to": 151
  }, {
    "from": 132,
    "label": "calls",
    "to": 151
  }, {
    "from": 132,
    "label": "calls",
    "to": 151
  }, {
    "from": 132,
    "label": "calls",
    "to": 149
  }, {
    "from": 132,
    "label": "calls",
    "to": 140
  }, {
    "from": 132,
    "label": "calls",
    "to": 147
  }, {
    "from": 132,
    "label": "calls",
    "to": 148
  }, {
    "from": 132,
    "label": "calls",
    "to": 148
  }, {
    "from": 132,
    "label": "calls",
    "to": 148
  }, {
    "from": 132,
    "label": "calls",
    "to": 148
  }, {
    "from": 132,
    "label": "calls",
    "to": 148
  }, {
    "from": 132,
    "label": "calls",
    "to": 148
  }, {
    "from": 132,
    "label": "calls",
    "to": 141
  }, {
    "from": 132,
    "label": "calls",
    "to": 141
  }, {
    "from": 132,
    "label": "calls",
    "to": 150
  }, {
    "from": 132,
    "label": "calls",
    "to": 137
  }, {
    "from": 2,
    "label": "contains",
    "to": 132
  }, {
    "from": 132,
    "label": "declares",
    "to": 3
  }, {
    "from": 132,
    "label": "declares",
    "to": 5
  }, {
    "from": 132,
    "label": "declares",
    "to": 7
  }, {
    "from": 132,
    "label": "declares",
    "to": 8
  }, {
    "from": 132,
    "label": "declares",
    "to": 9
  }, {
    "from": 132,
    "label": "declares",
    "to": 12
  }, {
    "from": 132,
    "label": "declares",
    "to": 16
  }, {
    "from": 132,
    "label": "declares",
    "to": 20
  }, {
    "from": 132,
    "label": "declares",
    "to": 24
  }, {
    "from": 132,
    "label": "declares",
    "to": 27
  }, {
    "from": 132,
    "label": "declares",
    "to": 31
  }, {
    "from": 132,
    "label": "declares",
    "to": 37
  }, {
    "from": 132,
    "label": "declares",
    "to": 41
  }, {
    "from": 132,
    "label": "declares",
    "to": 44
  }, {
    "from": 132,
    "label": "declares",
    "to": 47
  }, {
    "from": 132,
    "label": "declares",
    "to": 51
  }, {
    "from": 132,
    "label": "declares",
    "to": 57
  }, {
    "from": 132,
    "label": "declares",
    "to": 59
  }, {
    "from": 132,
    "label": "declares",
    "to": 65
  }, {
    "from": 132,
    "label": "declares",
    "to": 70
  }, {
    "from": 132,
    "label": "declares",
    "to": 75
  }, {
    "from": 132,
    "label": "declares",
    "to": 76
  }, {
    "from": 132,
    "label": "declares",
    "to": 77
  }, {
    "from": 132,
    "label": "declares",
    "to": 89
  }, {
    "from": 132,
    "label": "declares",
    "to": 97
  }, {
    "from": 132,
    "label": "declares",
    "to": 103
  }, {
    "from": 132,
    "label": "declares",
    "to": 119
  }, {
    "from": 132,
    "label": "declares",
    "to": 124
  }, {
    "from": 2,
    "label": "contains",
    "to": 152
  }, {
    "from": 2,
    "label": "contains",
    "to": 153
  }, {
    "from": 153,
    "label": "initializes",
    "to": 154
  }, {
    "from": 154,
    "label": "requires",
    "to": 1
  }, {
    "from": 38,
    "label": "hasArgument",
    "to": 27
  }, {
    "from": 39,
    "label": "hasArgument",
    "to": 31
  }, {
    "from": 48,
    "label": "hasArgument",
    "to": 41
  }, {
    "from": 49,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 90,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 91,
    "label": "hasArgument",
    "to": 57
  }, {
    "from": 92,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 93,
    "label": "hasArgument",
    "to": 65
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 94,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 76
  }, {
    "from": 121,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 121,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 121,
    "label": "hasArgument",
    "to": 16
  }, {
    "from": 121,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 121,
    "label": "hasArgument",
    "to": 97
  }, {
    "from": 122,
    "label": "hasArgument",
    "to": 103
  }, {
    "from": 126,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 126,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 27
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 31
  }, {
    "from": 127,
    "label": "hasArgument",
    "to": 37
  }, {
    "from": 128,
    "label": "hasArgument",
    "to": 41
  }, {
    "from": 128,
    "label": "hasArgument",
    "to": 44
  }, {
    "from": 128,
    "label": "hasArgument",
    "to": 47
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 8
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 51
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 57
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 59
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 65
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 70
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 77
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 89
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 75
  }, {
    "from": 129,
    "label": "hasArgument",
    "to": 76
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 12
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 16
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 20
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 97
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 103
  }, {
    "from": 130,
    "label": "hasArgument",
    "to": 119
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "30log",
    "type": "module"
  }, {
    "id": 2,
    "text": "inheritance",
    "type": "module"
  }, {
    "id": 3,
    "text": "function Window:setSize(w,h) self.width, self.height = w,h end",
    "type": "function"
  }, {
    "id": 4,
    "text": "self.width, self.height = w,h",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "function Frame:setSize(size) self.width, self.height = size,size end",
    "type": "function"
  }, {
    "id": 6,
    "text": "self.width, self.height = size,size",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "function Frame:setSize(size) self.width, self.height = size,size end",
    "type": "function"
  }, {
    "id": 8,
    "text": "function Frame:setSize(size) self.width, self.height = size,size end",
    "type": "function"
  }, {
    "id": 9,
    "text": "function A:__init(a)\r\n        self.a = a\r\n      end",
    "type": "function"
  }, {
    "id": 10,
    "text": "self.a = a",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function B:__init(a, b)\r\n        B.super.__init(self, a)\r\n        self.b = b\r\n      end",
    "type": "function"
  }, {
    "id": 13,
    "text": "B.super.__init(self, a)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "self.b = b",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function C:__init(a, b, c)\r\n        C.super.__init(self, a, b)\r\n        self.c = c\r\n      end",
    "type": "function"
  }, {
    "id": 17,
    "text": "C.super.__init(self, a, b)",
    "type": "statement:functioncall"
  }, {
    "id": 18,
    "text": "self.c = c",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function D:__init(a, b, c, d)\r\n        D.super.__init(self, a, b, c)\r\n        self.d = d\r\n      end",
    "type": "function"
  }, {
    "id": 21,
    "text": "D.super.__init(self, a, b, c)",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "self.d = d",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function()\r\n    Window = Class { width = 100, height = 100 }\r\n    function Window:setSize(w,h) self.width, self.height = w,h end\r\n  end",
    "type": "function"
  }, {
    "id": 25,
    "text": "Window = Class { width = 100, height = 100 }",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function()\r\n      local Frame = Window:extends()\r\n      assert_equal(type(Frame),'table')\r\n    end",
    "type": "function"
  }, {
    "id": 28,
    "text": "local Frame = Window:extends()",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "assert_equal(type(Frame),'table')",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function()\r\n      local Frame = Window:extends {ID = 1}\r\n      assert_equal(Frame.ID,1)\r\n      assert_equal(Frame.width,100)\r\n      assert_equal(Frame.height,100)\r\n    end",
    "type": "function"
  }, {
    "id": 32,
    "text": "local Frame = Window:extends {ID = 1}",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "assert_equal(Frame.ID,1)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "assert_equal(Frame.width,100)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "assert_equal(Frame.height,100)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function()\r\n  \r\n    test('Via \"extends()\" method',function()\r\n      local Frame = Window:extends()\r\n      assert_equal(type(Frame),'table')\r\n    end)\r\n  \r\n    test('With extra-arguments passed to method \"extends()\" as a table',function()\r\n      local Frame = Window:extends {ID = 1}\r\n      assert_equal(Frame.ID,1)\r\n      assert_equal(Frame.width,100)\r\n      assert_equal(Frame.height,100)\r\n    end)\r\n    \r\n  end",
    "type": "function"
  }, {
    "id": 38,
    "text": "test('Via \"extends()\" method',function()\r\n      local Frame = Window:extends()\r\n      assert_equal(type(Frame),'table')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "test('With extra-arguments passed to method \"extends()\" as a table',function()\r\n      local Frame = Window:extends {ID = 1}\r\n      assert_equal(Frame.ID,1)\r\n      assert_equal(Frame.width,100)\r\n      assert_equal(Frame.height,100)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 40,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 41,
    "text": "function()\r\n      local Frame = Window:extends()\r\n      assert_equal(Frame.super,Window)\r\n    end",
    "type": "function"
  }, {
    "id": 42,
    "text": "assert_equal(Frame.super,Window)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 44,
    "text": "function()\r\n      local Frame = Window:extends()\r\n      assert_equal(getmetatable(Frame),Window)  \r\n    end",
    "type": "function"
  }, {
    "id": 45,
    "text": "assert_equal(getmetatable(Frame),Window)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "function()\r\n  \r\n    test('Via its \"super\" key',function()\r\n      local Frame = Window:extends()\r\n      assert_equal(Frame.super,Window)\r\n    end)\r\n    \r\n    test('Via \"getmetatable()\" function',function()\r\n      local Frame = Window:extends()\r\n      assert_equal(getmetatable(Frame),Window)  \r\n    end)    \r\n    \r\n  end",
    "type": "function"
  }, {
    "id": 48,
    "text": "test('Via its \"super\" key',function()\r\n      local Frame = Window:extends()\r\n      assert_equal(Frame.super,Window)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 49,
    "text": "test('Via \"getmetatable()\" function',function()\r\n      local Frame = Window:extends()\r\n      assert_equal(getmetatable(Frame),Window)  \r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 51,
    "text": "function()\r\n      local Frame = Window:extends()\r\n      function Frame:setSize(size) self.width, self.height = size,size end\r\n      local app = Frame()\r\n      local app2 = Frame:new()\r\n      assert_equal(type(app),'table')  \r\n      assert_equal(type(app2),'table')\r\n    end",
    "type": "function"
  }, {
    "id": 52,
    "text": "local app = Frame()",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "local app2 = Frame:new()",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "assert_equal(type(app),'table')",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "assert_equal(type(app2),'table')",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function()\r\n      local Frame = Window:extends()\r\n      assert_equal(Frame.width,100)  \r\n      assert_equal(Frame.height,100)  \r\n    end",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function()\r\n      local Frame = Window:extends()\r\n      Frame:setSize(15,15)\r\n      assert_equal(type(Frame.setSize),'function')  \r\n      assert_equal(Frame.width,15)  \r\n      assert_equal(Frame.height,15)  \r\n    end",
    "type": "function"
  }, {
    "id": 60,
    "text": "Frame:setSize(15,15)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "assert_equal(type(Frame.setSize),'function')",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "assert_equal(Frame.width,15)",
    "type": "statement:functioncall"
  }, {
    "id": 63,
    "text": "assert_equal(Frame.height,15)",
    "type": "statement:functioncall"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function()\r\n      local Frame = Window:extends()\r\n      function Frame:setSize(size) self.width, self.height = size,size end\r\n      Frame:setSize(30)\r\n      assert_equal(Frame.width,30)  \r\n      assert_equal(Frame.height,30) \r\n    end",
    "type": "function"
  }, {
    "id": 66,
    "text": "Frame:setSize(30)",
    "type": "statement:functioncall"
  }, {
    "id": 67,
    "text": "assert_equal(Frame.width,30)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "assert_equal(Frame.height,30)",
    "type": "statement:functioncall"
  }, {
    "id": 69,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 70,
    "text": "function()\r\n      local Frame = Window:extends()\r\n      function Frame:setSize(size) self.width, self.height = size,size end\r\n      Frame.super.setSize(Frame,50,55)\r\n      assert_equal(Frame.width,50)  \r\n      assert_equal(Frame.height,55) \r\n    end",
    "type": "function"
  }, {
    "id": 71,
    "text": "Frame.super.setSize(Frame,50,55)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert_equal(Frame.width,50)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "assert_equal(Frame.height,55)",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 76,
    "text": "function() end",
    "type": "function"
  }, {
    "id": 77,
    "text": "function()\r\n      local class = Class {__name = 'class', x = 10, z = 'a', f = function() end}\r\n      local subclass = class:extends {__name = 'subclass', z = 'b', k = {}, f = function() end}\r\n      assert_equal(subclass.__name, 'subclass')\r\n      assert_equal(subclass.z, 'b')\r\n      assert_equal(type(subclass.k), 'table')\r\n      assert_nil(class.k)\r\n      assert_equal(subclass.x, 10)\r\n      assert_equal(type(subclass.f), 'function')\r\n      assert_not_equal(subclass.f, class.f)\r\n      assert_equal(getmetatable(subclass), class)\r\n    end",
    "type": "function"
  }, {
    "id": 78,
    "text": "local class = Class {__name = 'class', x = 10, z = 'a', f = function() end}",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "local subclass = class:extends {__name = 'subclass', z = 'b', k = {}, f = function() end}",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "assert_equal(subclass.__name, 'subclass')",
    "type": "statement:functioncall"
  }, {
    "id": 81,
    "text": "assert_equal(subclass.z, 'b')",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "assert_equal(type(subclass.k), 'table')",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "assert_nil(class.k)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "assert_equal(subclass.x, 10)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "assert_equal(type(subclass.f), 'function')",
    "type": "statement:functioncall"
  }, {
    "id": 86,
    "text": "assert_not_equal(subclass.f, class.f)",
    "type": "statement:functioncall"
  }, {
    "id": 87,
    "text": "assert_equal(getmetatable(subclass), class)",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 89,
    "text": "function()\r\n  \r\n    test('can instantiate objects',function()\r\n      local Frame = Window:extends()\r\n      function Frame:setSize(size) self.width, self.height = size,size end\r\n      local app = Frame()\r\n      local app2 = Frame:new()\r\n      assert_equal(type(app),'table')  \r\n      assert_equal(type(app2),'table')\r\n    end)  \r\n    \r\n    test('shares its superclass attributes',function()\r\n      local Frame = Window:extends()\r\n      assert_equal(Frame.width,100)  \r\n      assert_equal(Frame.height,100)  \r\n    end)\r\n    \r\n    test('shares its superclass methods',function()\r\n      local Frame = Window:extends()\r\n      Frame:setSize(15,15)\r\n      assert_equal(type(Frame.setSize),'function')  \r\n      assert_equal(Frame.width,15)  \r\n      assert_equal(Frame.height,15)  \r\n    end)\r\n    \r\n    test('can reimplement its superclass methods',function()\r\n      local Frame = Window:extends()\r\n      function Frame:setSize(size) self.width, self.height = size,size end\r\n      Frame:setSize(30)\r\n      assert_equal(Frame.width,30)  \r\n      assert_equal(Frame.height,30) \r\n    end)\r\n  \r\n    test('Yet, it still has access to the original superclass method',function()\r\n      local Frame = Window:extends()\r\n      function Frame:setSize(size) self.width, self.height = size,size end\r\n      Frame.super.setSize(Frame,50,55)\r\n      assert_equal(Frame.width,50)  \r\n      assert_equal(Frame.height,55) \r\n    end)     \r\n    \r\n    test('its members should also differ from the superclass members if overriden', function()\r\n      local class = Class {__name = 'class', x = 10, z = 'a', f = function() end}\r\n      local subclass = class:extends {__name = 'subclass', z = 'b', k = {}, f = function() end}\r\n      assert_equal(subclass.__name, 'subclass')\r\n      assert_equal(subclass.z, 'b')\r\n      assert_equal(type(subclass.k), 'table')\r\n      assert_nil(class.k)\r\n      assert_equal(subclass.x, 10)\r\n      assert_equal(type(subclass.f), 'function')\r\n      assert_not_equal(subclass.f, class.f)\r\n      assert_equal(getmetatable(subclass), class)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 90,
    "text": "test('can instantiate objects',function()\r\n      local Frame = Window:extends()\r\n      function Frame:setSize(size) self.width, self.height = size,size end\r\n      local app = Frame()\r\n      local app2 = Frame:new()\r\n      assert_equal(type(app),'table')  \r\n      assert_equal(type(app2),'table')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "test('shares its superclass attributes',function()\r\n      local Frame = Window:extends()\r\n      assert_equal(Frame.width,100)  \r\n      assert_equal(Frame.height,100)  \r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 92,
    "text": "test('shares its superclass methods',function()\r\n      local Frame = Window:extends()\r\n      Frame:setSize(15,15)\r\n      assert_equal(type(Frame.setSize),'function')  \r\n      assert_equal(Frame.width,15)  \r\n      assert_equal(Frame.height,15)  \r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "test('can reimplement its superclass methods',function()\r\n      local Frame = Window:extends()\r\n      function Frame:setSize(size) self.width, self.height = size,size end\r\n      Frame:setSize(30)\r\n      assert_equal(Frame.width,30)  \r\n      assert_equal(Frame.height,30) \r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 94,
    "text": "test('Yet, it still has access to the original superclass method',function()\r\n      local Frame = Window:extends()\r\n      function Frame:setSize(size) self.width, self.height = size,size end\r\n      Frame.super.setSize(Frame,50,55)\r\n      assert_equal(Frame.width,50)  \r\n      assert_equal(Frame.height,55) \r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 95,
    "text": "test('its members should also differ from the superclass members if overriden', function()\r\n      local class = Class {__name = 'class', x = 10, z = 'a', f = function() end}\r\n      local subclass = class:extends {__name = 'subclass', z = 'b', k = {}, f = function() end}\r\n      assert_equal(subclass.__name, 'subclass')\r\n      assert_equal(subclass.z, 'b')\r\n      assert_equal(type(subclass.k), 'table')\r\n      assert_nil(class.k)\r\n      assert_equal(subclass.x, 10)\r\n      assert_equal(type(subclass.f), 'function')\r\n      assert_not_equal(subclass.f, class.f)\r\n      assert_equal(getmetatable(subclass), class)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 97,
    "text": "function()\r\n      A = Class()\r\n      function A:__init(a)\r\n        self.a = a\r\n      end\r\n      B = A:extends()\r\n      function B:__init(a, b)\r\n        B.super.__init(self, a)\r\n        self.b = b\r\n      end\r\n      C = B:extends()\r\n      function C:__init(a, b, c)\r\n        C.super.__init(self, a, b)\r\n        self.c = c\r\n      end\r\n      D = C:extends()\r\n      function D:__init(a, b, c, d)\r\n        D.super.__init(self, a, b, c)\r\n        self.d = d\r\n      end\r\n    end",
    "type": "function"
  }, {
    "id": 98,
    "text": "A = Class()",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "B = A:extends()",
    "type": "statement:assign"
  }, {
    "id": 100,
    "text": "C = B:extends()",
    "type": "statement:assign"
  }, {
    "id": 101,
    "text": "D = C:extends()",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function()\r\n      local a = A(1)\r\n      local b = B(1,2)\r\n      local c = C(1,2,3)\r\n      local d = D(1,2,3,4)\r\n      assert_equal(a.a,1)\r\n      assert_equal(b.a,1)\r\n      assert_equal(b.b,2)\r\n      assert_equal(c.a,1)\r\n      assert_equal(c.b,2)\r\n      assert_equal(c.c,3)\r\n      assert_equal(d.a,1)\r\n      assert_equal(d.b,2)\r\n      assert_equal(d.c,3)\r\n      assert_equal(d.d,4)\r\n    end",
    "type": "function"
  }, {
    "id": 104,
    "text": "local a = A(1)",
    "type": "statement:localassign"
  }, {
    "id": 105,
    "text": "local b = B(1,2)",
    "type": "statement:localassign"
  }, {
    "id": 106,
    "text": "local c = C(1,2,3)",
    "type": "statement:localassign"
  }, {
    "id": 107,
    "text": "local d = D(1,2,3,4)",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "assert_equal(a.a,1)",
    "type": "statement:functioncall"
  }, {
    "id": 109,
    "text": "assert_equal(b.a,1)",
    "type": "statement:functioncall"
  }, {
    "id": 110,
    "text": "assert_equal(b.b,2)",
    "type": "statement:functioncall"
  }, {
    "id": 111,
    "text": "assert_equal(c.a,1)",
    "type": "statement:functioncall"
  }, {
    "id": 112,
    "text": "assert_equal(c.b,2)",
    "type": "statement:functioncall"
  }, {
    "id": 113,
    "text": "assert_equal(c.c,3)",
    "type": "statement:functioncall"
  }, {
    "id": 114,
    "text": "assert_equal(d.a,1)",
    "type": "statement:functioncall"
  }, {
    "id": 115,
    "text": "assert_equal(d.b,2)",
    "type": "statement:functioncall"
  }, {
    "id": 116,
    "text": "assert_equal(d.c,3)",
    "type": "statement:functioncall"
  }, {
    "id": 117,
    "text": "assert_equal(d.d,4)",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function()\r\n    local A, B, C, D\r\n    before(function()\r\n      A = Class()\r\n      function A:__init(a)\r\n        self.a = a\r\n      end\r\n      B = A:extends()\r\n      function B:__init(a, b)\r\n        B.super.__init(self, a)\r\n        self.b = b\r\n      end\r\n      C = B:extends()\r\n      function C:__init(a, b, c)\r\n        C.super.__init(self, a, b)\r\n        self.c = c\r\n      end\r\n      D = C:extends()\r\n      function D:__init(a, b, c, d)\r\n        D.super.__init(self, a, b, c)\r\n        self.d = d\r\n      end\r\n    end)\r\n      \r\n    test('__init() class constructor can chain', function()\r\n      local a = A(1)\r\n      local b = B(1,2)\r\n      local c = C(1,2,3)\r\n      local d = D(1,2,3,4)\r\n      assert_equal(a.a,1)\r\n      assert_equal(b.a,1)\r\n      assert_equal(b.b,2)\r\n      assert_equal(c.a,1)\r\n      assert_equal(c.b,2)\r\n      assert_equal(c.c,3)\r\n      assert_equal(d.a,1)\r\n      assert_equal(d.b,2)\r\n      assert_equal(d.c,3)\r\n      assert_equal(d.d,4)\r\n    end)\r\n    \r\n  end",
    "type": "function"
  }, {
    "id": 120,
    "text": "local A, B, C, D",
    "type": "statement:localassign"
  }, {
    "id": 121,
    "text": "before(function()\r\n      A = Class()\r\n      function A:__init(a)\r\n        self.a = a\r\n      end\r\n      B = A:extends()\r\n      function B:__init(a, b)\r\n        B.super.__init(self, a)\r\n        self.b = b\r\n      end\r\n      C = B:extends()\r\n      function C:__init(a, b, c)\r\n        C.super.__init(self, a, b)\r\n        self.c = c\r\n      end\r\n      D = C:extends()\r\n      function D:__init(a, b, c, d)\r\n        D.super.__init(self, a, b, c)\r\n        self.d = d\r\n      end\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 122,
    "text": "test('__init() class constructor can chain', function()\r\n      local a = A(1)\r\n      local b = B(1,2)\r\n      local c = C(1,2,3)\r\n      local d = D(1,2,3,4)\r\n      assert_equal(a.a,1)\r\n      assert_equal(b.a,1)\r\n      assert_equal(b.b,2)\r\n      assert_equal(c.a,1)\r\n      assert_equal(c.b,2)\r\n      assert_equal(c.c,3)\r\n      assert_equal(d.a,1)\r\n      assert_equal(d.b,2)\r\n      assert_equal(d.c,3)\r\n      assert_equal(d.d,4)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function()\r\n  local Window\r\n    \r\n  before(function()\r\n    Window = Class { width = 100, height = 100 }\r\n    function Window:setSize(w,h) self.width, self.height = w,h end\r\n  end)\r\n  \r\n  context('Class can be derived from a superclass',function()\r\n  \r\n    test('Via \"extends()\" method',function()\r\n      local Frame = Window:extends()\r\n      assert_equal(type(Frame),'table')\r\n    end)\r\n  \r\n    test('With extra-arguments passed to method \"extends()\" as a table',function()\r\n      local Frame = Window:extends {ID = 1}\r\n      assert_equal(Frame.ID,1)\r\n      assert_equal(Frame.width,100)\r\n      assert_equal(Frame.height,100)\r\n    end)\r\n    \r\n  end)\r\n  \r\n  context('A derived class still points to its superclass',function()\r\n  \r\n    test('Via its \"super\" key',function()\r\n      local Frame = Window:extends()\r\n      assert_equal(Frame.super,Window)\r\n    end)\r\n    \r\n    test('Via \"getmetatable()\" function',function()\r\n      local Frame = Window:extends()\r\n      assert_equal(getmetatable(Frame),Window)  \r\n    end)    \r\n    \r\n  end)\r\n  \r\n  context('A derived class',function()\r\n  \r\n    test('can instantiate objects',function()\r\n      local Frame = Window:extends()\r\n      function Frame:setSize(size) self.width, self.height = size,size end\r\n      local app = Frame()\r\n      local app2 = Frame:new()\r\n      assert_equal(type(app),'table')  \r\n      assert_equal(type(app2),'table')\r\n    end)  \r\n    \r\n    test('shares its superclass attributes',function()\r\n      local Frame = Window:extends()\r\n      assert_equal(Frame.width,100)  \r\n      assert_equal(Frame.height,100)  \r\n    end)\r\n    \r\n    test('shares its superclass methods',function()\r\n      local Frame = Window:extends()\r\n      Frame:setSize(15,15)\r\n      assert_equal(type(Frame.setSize),'function')  \r\n      assert_equal(Frame.width,15)  \r\n      assert_equal(Frame.height,15)  \r\n    end)\r\n    \r\n    test('can reimplement its superclass methods',function()\r\n      local Frame = Window:extends()\r\n      function Frame:setSize(size) self.width, self.height = size,size end\r\n      Frame:setSize(30)\r\n      assert_equal(Frame.width,30)  \r\n      assert_equal(Frame.height,30) \r\n    end)\r\n  \r\n    test('Yet, it still has access to the original superclass method',function()\r\n      local Frame = Window:extends()\r\n      function Frame:setSize(size) self.width, self.height = size,size end\r\n      Frame.super.setSize(Frame,50,55)\r\n      assert_equal(Frame.width,50)  \r\n      assert_equal(Frame.height,55) \r\n    end)     \r\n    \r\n    test('its members should also differ from the superclass members if overriden', function()\r\n      local class = Class {__name = 'class', x = 10, z = 'a', f = function() end}\r\n      local subclass = class:extends {__name = 'subclass', z = 'b', k = {}, f = function() end}\r\n      assert_equal(subclass.__name, 'subclass')\r\n      assert_equal(subclass.z, 'b')\r\n      assert_equal(type(subclass.k), 'table')\r\n      assert_nil(class.k)\r\n      assert_equal(subclass.x, 10)\r\n      assert_equal(type(subclass.f), 'function')\r\n      assert_not_equal(subclass.f, class.f)\r\n      assert_equal(getmetatable(subclass), class)\r\n    end)\r\n  end)\r\n  \r\n  context('In a single inheritance model', function()\r\n    local A, B, C, D\r\n    before(function()\r\n      A = Class()\r\n      function A:__init(a)\r\n        self.a = a\r\n      end\r\n      B = A:extends()\r\n      function B:__init(a, b)\r\n        B.super.__init(self, a)\r\n        self.b = b\r\n      end\r\n      C = B:extends()\r\n      function C:__init(a, b, c)\r\n        C.super.__init(self, a, b)\r\n        self.c = c\r\n      end\r\n      D = C:extends()\r\n      function D:__init(a, b, c, d)\r\n        D.super.__init(self, a, b, c)\r\n        self.d = d\r\n      end\r\n    end)\r\n      \r\n    test('__init() class constructor can chain', function()\r\n      local a = A(1)\r\n      local b = B(1,2)\r\n      local c = C(1,2,3)\r\n      local d = D(1,2,3,4)\r\n      assert_equal(a.a,1)\r\n      assert_equal(b.a,1)\r\n      assert_equal(b.b,2)\r\n      assert_equal(c.a,1)\r\n      assert_equal(c.b,2)\r\n      assert_equal(c.c,3)\r\n      assert_equal(d.a,1)\r\n      assert_equal(d.b,2)\r\n      assert_equal(d.c,3)\r\n      assert_equal(d.d,4)\r\n    end)\r\n    \r\n  end)\r\n  \r\n end",
    "type": "function"
  }, {
    "id": 125,
    "text": "local Window",
    "type": "statement:localassign"
  }, {
    "id": 126,
    "text": "before(function()\r\n    Window = Class { width = 100, height = 100 }\r\n    function Window:setSize(w,h) self.width, self.height = w,h end\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 127,
    "text": "context('Class can be derived from a superclass',function()\r\n  \r\n    test('Via \"extends()\" method',function()\r\n      local Frame = Window:extends()\r\n      assert_equal(type(Frame),'table')\r\n    end)\r\n  \r\n    test('With extra-arguments passed to method \"extends()\" as a table',function()\r\n      local Frame = Window:extends {ID = 1}\r\n      assert_equal(Frame.ID,1)\r\n      assert_equal(Frame.width,100)\r\n      assert_equal(Frame.height,100)\r\n    end)\r\n    \r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 128,
    "text": "context('A derived class still points to its superclass',function()\r\n  \r\n    test('Via its \"super\" key',function()\r\n      local Frame = Window:extends()\r\n      assert_equal(Frame.super,Window)\r\n    end)\r\n    \r\n    test('Via \"getmetatable()\" function',function()\r\n      local Frame = Window:extends()\r\n      assert_equal(getmetatable(Frame),Window)  \r\n    end)    \r\n    \r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 129,
    "text": "context('A derived class',function()\r\n  \r\n    test('can instantiate objects',function()\r\n      local Frame = Window:extends()\r\n      function Frame:setSize(size) self.width, self.height = size,size end\r\n      local app = Frame()\r\n      local app2 = Frame:new()\r\n      assert_equal(type(app),'table')  \r\n      assert_equal(type(app2),'table')\r\n    end)  \r\n    \r\n    test('shares its superclass attributes',function()\r\n      local Frame = Window:extends()\r\n      assert_equal(Frame.width,100)  \r\n      assert_equal(Frame.height,100)  \r\n    end)\r\n    \r\n    test('shares its superclass methods',function()\r\n      local Frame = Window:extends()\r\n      Frame:setSize(15,15)\r\n      assert_equal(type(Frame.setSize),'function')  \r\n      assert_equal(Frame.width,15)  \r\n      assert_equal(Frame.height,15)  \r\n    end)\r\n    \r\n    test('can reimplement its superclass methods',function()\r\n      local Frame = Window:extends()\r\n      function Frame:setSize(size) self.width, self.height = size,size end\r\n      Frame:setSize(30)\r\n      assert_equal(Frame.width,30)  \r\n      assert_equal(Frame.height,30) \r\n    end)\r\n  \r\n    test('Yet, it still has access to the original superclass method',function()\r\n      local Frame = Window:extends()\r\n      function Frame:setSize(size) self.width, self.height = size,size end\r\n      Frame.super.setSize(Frame,50,55)\r\n      assert_equal(Frame.width,50)  \r\n      assert_equal(Frame.height,55) \r\n    end)     \r\n    \r\n    test('its members should also differ from the superclass members if overriden', function()\r\n      local class = Class {__name = 'class', x = 10, z = 'a', f = function() end}\r\n      local subclass = class:extends {__name = 'subclass', z = 'b', k = {}, f = function() end}\r\n      assert_equal(subclass.__name, 'subclass')\r\n      assert_equal(subclass.z, 'b')\r\n      assert_equal(type(subclass.k), 'table')\r\n      assert_nil(class.k)\r\n      assert_equal(subclass.x, 10)\r\n      assert_equal(type(subclass.f), 'function')\r\n      assert_not_equal(subclass.f, class.f)\r\n      assert_equal(getmetatable(subclass), class)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 130,
    "text": "context('In a single inheritance model', function()\r\n    local A, B, C, D\r\n    before(function()\r\n      A = Class()\r\n      function A:__init(a)\r\n        self.a = a\r\n      end\r\n      B = A:extends()\r\n      function B:__init(a, b)\r\n        B.super.__init(self, a)\r\n        self.b = b\r\n      end\r\n      C = B:extends()\r\n      function C:__init(a, b, c)\r\n        C.super.__init(self, a, b)\r\n        self.c = c\r\n      end\r\n      D = C:extends()\r\n      function D:__init(a, b, c, d)\r\n        D.super.__init(self, a, b, c)\r\n        self.d = d\r\n      end\r\n    end)\r\n      \r\n    test('__init() class constructor can chain', function()\r\n      local a = A(1)\r\n      local b = B(1,2)\r\n      local c = C(1,2,3)\r\n      local d = D(1,2,3,4)\r\n      assert_equal(a.a,1)\r\n      assert_equal(b.a,1)\r\n      assert_equal(b.b,2)\r\n      assert_equal(c.a,1)\r\n      assert_equal(c.b,2)\r\n      assert_equal(c.c,3)\r\n      assert_equal(d.a,1)\r\n      assert_equal(d.b,2)\r\n      assert_equal(d.c,3)\r\n      assert_equal(d.d,4)\r\n    end)\r\n    \r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 132,
    "text": "",
    "type": "function container"
  }, {
    "id": 133,
    "text": "B",
    "type": "global function"
  }, {
    "id": 134,
    "text": "D",
    "type": "global function"
  }, {
    "id": 135,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 136,
    "text": "before",
    "type": "global function"
  }, {
    "id": 137,
    "text": "Frame",
    "type": "global function"
  }, {
    "id": 138,
    "text": "context",
    "type": "global function"
  }, {
    "id": 139,
    "text": "Class",
    "type": "global function"
  }, {
    "id": 140,
    "text": "assert_not_equal",
    "type": "global function"
  }, {
    "id": 141,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 142,
    "text": "B.super.__init",
    "type": "global function"
  }, {
    "id": 143,
    "text": "C.super.__init",
    "type": "global function"
  }, {
    "id": 144,
    "text": "D.super.__init",
    "type": "global function"
  }, {
    "id": 145,
    "text": "A",
    "type": "global function"
  }, {
    "id": 146,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 147,
    "text": "Frame.super.setSize",
    "type": "global function"
  }, {
    "id": 148,
    "text": "type",
    "type": "global function"
  }, {
    "id": 149,
    "text": "require",
    "type": "global function"
  }, {
    "id": 150,
    "text": "C",
    "type": "global function"
  }, {
    "id": 151,
    "text": "test",
    "type": "global function"
  }, {
    "id": 152,
    "text": "",
    "type": "variable container"
  }, {
    "id": 153,
    "text": "",
    "type": "require container"
  }, {
    "id": 154,
    "text": "",
    "type": "require local variable"
  } ]
}