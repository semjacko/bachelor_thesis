{
  "_filename": "instantiation.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/30log/specs/instantiation.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 9,
    "label": "has",
    "to": 4
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 11,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 31
  }, {
    "from": 35,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 35,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 35,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 19
  }, {
    "from": 41,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 39,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 22
  }, {
    "from": 39,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 25
  }, {
    "from": 39,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 28
  }, {
    "from": 39,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 31
  }, {
    "from": 45,
    "label": "has",
    "to": 32
  }, {
    "from": 45,
    "label": "has",
    "to": 33
  }, {
    "from": 39,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 31
  }, {
    "from": 46,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 46,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 46,
    "label": "has",
    "to": 36
  }, {
    "from": 46,
    "label": "has",
    "to": 37
  }, {
    "from": 39,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 19
  }, {
    "from": 48,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 48,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 50,
    "label": "has",
    "to": 51
  }, {
    "from": 50,
    "label": "has",
    "to": 52
  }, {
    "from": 50,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 40
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 19
  }, {
    "from": 59,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 59,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 58,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 51
  }, {
    "from": 60,
    "label": "has",
    "to": 52
  }, {
    "from": 58,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 55
  }, {
    "from": 61,
    "label": "has",
    "to": 56
  }, {
    "from": 58,
    "label": "has",
    "to": 62
  }, {
    "from": 63,
    "label": "has",
    "to": 64
  }, {
    "from": 63,
    "label": "has",
    "to": 65
  }, {
    "from": 63,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 63,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 63,
    "label": "has",
    "to": 66
  }, {
    "from": 63,
    "label": "has",
    "to": 67
  }, {
    "from": 63,
    "label": "has",
    "to": 68
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 64
  }, {
    "from": 70,
    "label": "has",
    "to": 65
  }, {
    "from": 70,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 70,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 70,
    "label": "has",
    "to": 66
  }, {
    "from": 70,
    "label": "has",
    "to": 67
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 72,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 76,
    "label": "has",
    "to": 52
  }, {
    "from": 76,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 55
  }, {
    "from": 79,
    "label": "has",
    "to": 52
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 81,
    "label": "has",
    "to": 40
  }, {
    "from": 81,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 73
  }, {
    "from": 82,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 82,
    "label": "has",
    "to": 74
  }, {
    "from": 81,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 77
  }, {
    "from": 83,
    "label": "has",
    "to": 52
  }, {
    "from": 81,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 55
  }, {
    "from": 84,
    "label": "has",
    "to": 52
  }, {
    "from": 81,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 86,
    "label": "has",
    "to": 89
  }, {
    "from": 90,
    "label": "has",
    "to": 87
  }, {
    "from": 90,
    "label": "has",
    "to": 91
  }, {
    "from": 90,
    "label": "has",
    "to": 92
  }, {
    "from": 90,
    "label": "has",
    "to": 93
  }, {
    "from": 94,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 87
  }, {
    "from": 95,
    "label": "has",
    "to": 88
  }, {
    "from": 94,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 87
  }, {
    "from": 96,
    "label": "has",
    "to": 91
  }, {
    "from": 96,
    "label": "has",
    "to": 92
  }, {
    "from": 94,
    "label": "has",
    "to": 97
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 99,
    "label": "has",
    "to": 40
  }, {
    "from": 99,
    "label": "has",
    "to": 41
  }, {
    "from": 41,
    "label": "has",
    "to": 19
  }, {
    "from": 41,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 99,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 22
  }, {
    "from": 99,
    "label": "has",
    "to": 43
  }, {
    "from": 43,
    "label": "has",
    "to": 25
  }, {
    "from": 99,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 28
  }, {
    "from": 99,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 31
  }, {
    "from": 45,
    "label": "has",
    "to": 32
  }, {
    "from": 45,
    "label": "has",
    "to": 33
  }, {
    "from": 99,
    "label": "has",
    "to": 46
  }, {
    "from": 46,
    "label": "has",
    "to": 31
  }, {
    "from": 46,
    "label": "has",
    "to": 5
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 46,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 46,
    "label": "has",
    "to": 36
  }, {
    "from": 46,
    "label": "has",
    "to": 37
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 100,
    "label": "has",
    "to": 40
  }, {
    "from": 100,
    "label": "has",
    "to": 59
  }, {
    "from": 59,
    "label": "has",
    "to": 19
  }, {
    "from": 59,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 59,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 4
  }, {
    "from": 100,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 51
  }, {
    "from": 60,
    "label": "has",
    "to": 52
  }, {
    "from": 100,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 55
  }, {
    "from": 61,
    "label": "has",
    "to": 56
  }, {
    "from": 98,
    "label": "has",
    "to": 101
  }, {
    "from": 101,
    "label": "has",
    "to": 70
  }, {
    "from": 70,
    "label": "has",
    "to": 64
  }, {
    "from": 70,
    "label": "has",
    "to": 65
  }, {
    "from": 70,
    "label": "has",
    "to": 11
  }, {
    "from": 11,
    "label": "has",
    "to": 12
  }, {
    "from": 70,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 70,
    "label": "has",
    "to": 66
  }, {
    "from": 70,
    "label": "has",
    "to": 67
  }, {
    "from": 98,
    "label": "has",
    "to": 102
  }, {
    "from": 102,
    "label": "has",
    "to": 40
  }, {
    "from": 102,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 73
  }, {
    "from": 82,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 82,
    "label": "has",
    "to": 74
  }, {
    "from": 102,
    "label": "has",
    "to": 83
  }, {
    "from": 83,
    "label": "has",
    "to": 77
  }, {
    "from": 83,
    "label": "has",
    "to": 52
  }, {
    "from": 102,
    "label": "has",
    "to": 84
  }, {
    "from": 84,
    "label": "has",
    "to": 55
  }, {
    "from": 84,
    "label": "has",
    "to": 52
  }, {
    "from": 98,
    "label": "has",
    "to": 103
  }, {
    "from": 103,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 87
  }, {
    "from": 95,
    "label": "has",
    "to": 88
  }, {
    "from": 103,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 87
  }, {
    "from": 96,
    "label": "has",
    "to": 91
  }, {
    "from": 96,
    "label": "has",
    "to": 92
  }, {
    "from": 98,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "calls",
    "to": 109
  }, {
    "from": 105,
    "label": "calls",
    "to": 115
  }, {
    "from": 105,
    "label": "calls",
    "to": 106
  }, {
    "from": 105,
    "label": "calls",
    "to": 106
  }, {
    "from": 105,
    "label": "calls",
    "to": 107
  }, {
    "from": 105,
    "label": "calls",
    "to": 107
  }, {
    "from": 105,
    "label": "calls",
    "to": 107
  }, {
    "from": 105,
    "label": "calls",
    "to": 119
  }, {
    "from": 105,
    "label": "calls",
    "to": 119
  }, {
    "from": 105,
    "label": "calls",
    "to": 119
  }, {
    "from": 105,
    "label": "calls",
    "to": 119
  }, {
    "from": 105,
    "label": "calls",
    "to": 119
  }, {
    "from": 105,
    "label": "calls",
    "to": 119
  }, {
    "from": 105,
    "label": "calls",
    "to": 119
  }, {
    "from": 105,
    "label": "calls",
    "to": 119
  }, {
    "from": 105,
    "label": "calls",
    "to": 119
  }, {
    "from": 105,
    "label": "calls",
    "to": 119
  }, {
    "from": 105,
    "label": "calls",
    "to": 119
  }, {
    "from": 105,
    "label": "calls",
    "to": 119
  }, {
    "from": 105,
    "label": "calls",
    "to": 111
  }, {
    "from": 105,
    "label": "calls",
    "to": 111
  }, {
    "from": 105,
    "label": "calls",
    "to": 111
  }, {
    "from": 105,
    "label": "calls",
    "to": 111
  }, {
    "from": 105,
    "label": "calls",
    "to": 111
  }, {
    "from": 105,
    "label": "calls",
    "to": 111
  }, {
    "from": 7,
    "label": "calls",
    "to": 112
  }, {
    "from": 105,
    "label": "calls",
    "to": 118
  }, {
    "from": 105,
    "label": "calls",
    "to": 113
  }, {
    "from": 105,
    "label": "calls",
    "to": 113
  }, {
    "from": 105,
    "label": "calls",
    "to": 113
  }, {
    "from": 105,
    "label": "calls",
    "to": 113
  }, {
    "from": 105,
    "label": "calls",
    "to": 113
  }, {
    "from": 105,
    "label": "calls",
    "to": 113
  }, {
    "from": 105,
    "label": "calls",
    "to": 114
  }, {
    "from": 105,
    "label": "calls",
    "to": 114
  }, {
    "from": 105,
    "label": "calls",
    "to": 114
  }, {
    "from": 105,
    "label": "calls",
    "to": 114
  }, {
    "from": 105,
    "label": "calls",
    "to": 114
  }, {
    "from": 105,
    "label": "calls",
    "to": 114
  }, {
    "from": 105,
    "label": "calls",
    "to": 117
  }, {
    "from": 105,
    "label": "calls",
    "to": 117
  }, {
    "from": 105,
    "label": "calls",
    "to": 108
  }, {
    "from": 105,
    "label": "calls",
    "to": 108
  }, {
    "from": 105,
    "label": "calls",
    "to": 116
  }, {
    "from": 105,
    "label": "calls",
    "to": 116
  }, {
    "from": 105,
    "label": "calls",
    "to": 116
  }, {
    "from": 105,
    "label": "calls",
    "to": 116
  }, {
    "from": 105,
    "label": "calls",
    "to": 116
  }, {
    "from": 105,
    "label": "calls",
    "to": 116
  }, {
    "from": 105,
    "label": "calls",
    "to": 116
  }, {
    "from": 105,
    "label": "calls",
    "to": 116
  }, {
    "from": 105,
    "label": "calls",
    "to": 116
  }, {
    "from": 105,
    "label": "calls",
    "to": 116
  }, {
    "from": 105,
    "label": "calls",
    "to": 110
  }, {
    "from": 105,
    "label": "calls",
    "to": 110
  }, {
    "from": 2,
    "label": "contains",
    "to": 105
  }, {
    "from": 105,
    "label": "declares",
    "to": 3
  }, {
    "from": 105,
    "label": "declares",
    "to": 5
  }, {
    "from": 105,
    "label": "declares",
    "to": 7
  }, {
    "from": 105,
    "label": "declares",
    "to": 9
  }, {
    "from": 105,
    "label": "declares",
    "to": 10
  }, {
    "from": 105,
    "label": "declares",
    "to": 11
  }, {
    "from": 105,
    "label": "declares",
    "to": 14
  }, {
    "from": 105,
    "label": "declares",
    "to": 17
  }, {
    "from": 105,
    "label": "declares",
    "to": 18
  }, {
    "from": 105,
    "label": "declares",
    "to": 21
  }, {
    "from": 105,
    "label": "declares",
    "to": 24
  }, {
    "from": 105,
    "label": "declares",
    "to": 27
  }, {
    "from": 105,
    "label": "declares",
    "to": 30
  }, {
    "from": 105,
    "label": "declares",
    "to": 35
  }, {
    "from": 105,
    "label": "declares",
    "to": 39
  }, {
    "from": 105,
    "label": "declares",
    "to": 48
  }, {
    "from": 105,
    "label": "declares",
    "to": 50
  }, {
    "from": 105,
    "label": "declares",
    "to": 54
  }, {
    "from": 105,
    "label": "declares",
    "to": 58
  }, {
    "from": 105,
    "label": "declares",
    "to": 63
  }, {
    "from": 105,
    "label": "declares",
    "to": 69
  }, {
    "from": 105,
    "label": "declares",
    "to": 72
  }, {
    "from": 105,
    "label": "declares",
    "to": 76
  }, {
    "from": 105,
    "label": "declares",
    "to": 79
  }, {
    "from": 105,
    "label": "declares",
    "to": 81
  }, {
    "from": 105,
    "label": "declares",
    "to": 86
  }, {
    "from": 105,
    "label": "declares",
    "to": 90
  }, {
    "from": 105,
    "label": "declares",
    "to": 94
  }, {
    "from": 105,
    "label": "declares",
    "to": 98
  }, {
    "from": 2,
    "label": "contains",
    "to": 120
  }, {
    "from": 2,
    "label": "contains",
    "to": 121
  }, {
    "from": 121,
    "label": "initializes",
    "to": 122
  }, {
    "from": 122,
    "label": "requires",
    "to": 1
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 41,
    "label": "hasArgument",
    "to": 18
  }, {
    "from": 42,
    "label": "hasArgument",
    "to": 21
  }, {
    "from": 43,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 44,
    "label": "hasArgument",
    "to": 27
  }, {
    "from": 45,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 46,
    "label": "hasArgument",
    "to": 35
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 10
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 59,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 60,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 61,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 70,
    "label": "hasArgument",
    "to": 63
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 82,
    "label": "hasArgument",
    "to": 72
  }, {
    "from": 83,
    "label": "hasArgument",
    "to": 76
  }, {
    "from": 84,
    "label": "hasArgument",
    "to": 79
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 86
  }, {
    "from": 96,
    "label": "hasArgument",
    "to": 90
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 5
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 7
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 18
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 21
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 24
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 27
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 30
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 35
  }, {
    "from": 99,
    "label": "hasArgument",
    "to": 39
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 10
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 48
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 100,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 11
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 14
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 63
  }, {
    "from": 101,
    "label": "hasArgument",
    "to": 69
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 3
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 9
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 72
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 76
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 79
  }, {
    "from": 102,
    "label": "hasArgument",
    "to": 81
  }, {
    "from": 103,
    "label": "hasArgument",
    "to": 86
  }, {
    "from": 103,
    "label": "hasArgument",
    "to": 90
  }, {
    "from": 103,
    "label": "hasArgument",
    "to": 94
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "30log",
    "type": "module"
  }, {
    "id": 2,
    "text": "instantiation",
    "type": "module"
  }, {
    "id": 3,
    "text": "function Window:setSize(size) self.size = size end",
    "type": "function"
  }, {
    "id": 4,
    "text": "self.size = size",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "local function should_err() local win_new = win:new() end",
    "type": "function"
  }, {
    "id": 6,
    "text": "local win_new = win:new()",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "local function should_err2() local win_new = win() end",
    "type": "function"
  }, {
    "id": 8,
    "text": "local win_new = win()",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "function Window:setSize(size) self.size = size end",
    "type": "function"
  }, {
    "id": 10,
    "text": "function Window:__init(size) self.size = size end",
    "type": "function"
  }, {
    "id": 11,
    "text": "function foo:__init(bool)\r\n        self:set_upvalue(bool)\r\n      end",
    "type": "function"
  }, {
    "id": 12,
    "text": "self:set_upvalue(bool)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function foo:set_upvalue(bool)\r\n        upvalue = bool\r\n      end",
    "type": "function"
  }, {
    "id": 15,
    "text": "upvalue = bool",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function Window:setSize(size) self.size = size end",
    "type": "function"
  }, {
    "id": 18,
    "text": "function()\r\n      Window = Class {size = 100}\r\n      function Window:setSize(size) self.size = size end\r\n    end",
    "type": "function"
  }, {
    "id": 19,
    "text": "Window = Class {size = 100}",
    "type": "statement:assign"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function()\r\n      assert_equal(type(Window:new()),'table')\r\n    end",
    "type": "function"
  }, {
    "id": 22,
    "text": "assert_equal(type(Window:new()),'table')",
    "type": "statement:functioncall"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function()\r\n      assert_equal(type(Window()),'table')\r\n    end",
    "type": "function"
  }, {
    "id": 25,
    "text": "assert_equal(type(Window()),'table')",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "function()\r\n      assert_equal((Window()).size,100)\r\n    end",
    "type": "function"
  }, {
    "id": 28,
    "text": "assert_equal((Window()).size,100)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function()\r\n      local win = Window()\r\n      win:setSize(10)\r\n      assert_equal(win.size,10)\r\n    end",
    "type": "function"
  }, {
    "id": 31,
    "text": "local win = Window()",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "win:setSize(10)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assert_equal(win.size,10)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function()\r\n      local win = Window()\r\n      local function should_err() local win_new = win:new() end\r\n      local function should_err2() local win_new = win() end\r\n      assert_error(should_err)\r\n      assert_error(should_err2)\r\n    end",
    "type": "function"
  }, {
    "id": 36,
    "text": "assert_error(should_err)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "assert_error(should_err2)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "function()\r\n    local Window\r\n    \r\n    before(function()\r\n      Window = Class {size = 100}\r\n      function Window:setSize(size) self.size = size end\r\n    end)\r\n    \r\n    test('new objects can be created via Class:new()',function()\r\n      assert_equal(type(Window:new()),'table')\r\n    end)\r\n    \r\n    test('new objects can be created calling the class as a function',function()\r\n      assert_equal(type(Window()),'table')\r\n    end)\r\n    \r\n    test('new objects share their class attributes',function()\r\n      assert_equal((Window()).size,100)\r\n    end)\r\n    \r\n    test('new objects share their class methods',function()\r\n      local win = Window()\r\n      win:setSize(10)\r\n      assert_equal(win.size,10)\r\n    end)    \r\n  \r\n    test('Objects cannot call new()', function()\r\n      local win = Window()\r\n      local function should_err() local win_new = win:new() end\r\n      local function should_err2() local win_new = win() end\r\n      assert_error(should_err)\r\n      assert_error(should_err2)\r\n    end)\r\n  end",
    "type": "function"
  }, {
    "id": 40,
    "text": "local Window",
    "type": "statement:localassign"
  }, {
    "id": 41,
    "text": "before(function()\r\n      Window = Class {size = 100}\r\n      function Window:setSize(size) self.size = size end\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 42,
    "text": "test('new objects can be created via Class:new()',function()\r\n      assert_equal(type(Window:new()),'table')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "test('new objects can be created calling the class as a function',function()\r\n      assert_equal(type(Window()),'table')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "test('new objects share their class attributes',function()\r\n      assert_equal((Window()).size,100)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "test('new objects share their class methods',function()\r\n      local win = Window()\r\n      win:setSize(10)\r\n      assert_equal(win.size,10)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 46,
    "text": "test('Objects cannot call new()', function()\r\n      local win = Window()\r\n      local function should_err() local win_new = win:new() end\r\n      local function should_err2() local win_new = win() end\r\n      assert_error(should_err)\r\n      assert_error(should_err2)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "function()\r\n      Window = Class {size = 100}\r\n      function Window:setSize(size) self.size = size end\r\n      function Window:__init(size) self.size = size end\r\n    end",
    "type": "function"
  }, {
    "id": 49,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 50,
    "text": "function()\r\n      local window = Window:new(25)\r\n      assert_equal(window.size,25)\r\n    end",
    "type": "function"
  }, {
    "id": 51,
    "text": "local window = Window:new(25)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "assert_equal(window.size,25)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function()\r\n      local window = Window(90)\r\n      assert_equal(window.size,90)\r\n    end",
    "type": "function"
  }, {
    "id": 55,
    "text": "local window = Window(90)",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "assert_equal(window.size,90)",
    "type": "statement:functioncall"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function()\r\n    local Window\r\n    \r\n    before(function()\r\n      Window = Class {size = 100}\r\n      function Window:setSize(size) self.size = size end\r\n      function Window:__init(size) self.size = size end\r\n    end)\r\n    \r\n    test('Overrides instantiation scheme with Class:new()',function()\r\n      local window = Window:new(25)\r\n      assert_equal(window.size,25)\r\n    end)\r\n    \r\n    test('Overrides instantiation scheme with Class()',function()\r\n      local window = Window(90)\r\n      assert_equal(window.size,90)\r\n    end)      \r\n    \r\n  end",
    "type": "function"
  }, {
    "id": 59,
    "text": "before(function()\r\n      Window = Class {size = 100}\r\n      function Window:setSize(size) self.size = size end\r\n      function Window:__init(size) self.size = size end\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 60,
    "text": "test('Overrides instantiation scheme with Class:new()',function()\r\n      local window = Window:new(25)\r\n      assert_equal(window.size,25)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "test('Overrides instantiation scheme with Class()',function()\r\n      local window = Window(90)\r\n      assert_equal(window.size,90)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 62,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 63,
    "text": "function()\r\n      local upvalue = false\r\n      local foo = Class()\r\n\r\n      function foo:__init(bool)\r\n        self:set_upvalue(bool)\r\n      end\r\n\r\n      function foo:set_upvalue(bool)\r\n        upvalue = bool\r\n      end\r\n\r\n      local foo_obj = foo(true)\r\n      assert_true(upvalue)\r\n    end",
    "type": "function"
  }, {
    "id": 64,
    "text": "local upvalue = false",
    "type": "statement:localassign"
  }, {
    "id": 65,
    "text": "local foo = Class()",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local foo_obj = foo(true)",
    "type": "statement:localassign"
  }, {
    "id": 67,
    "text": "assert_true(upvalue)",
    "type": "statement:functioncall"
  }, {
    "id": 68,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 69,
    "text": "function()\r\n    \r\n    test('class methods are callable', function()\r\n      local upvalue = false\r\n      local foo = Class()\r\n\r\n      function foo:__init(bool)\r\n        self:set_upvalue(bool)\r\n      end\r\n\r\n      function foo:set_upvalue(bool)\r\n        upvalue = bool\r\n      end\r\n\r\n      local foo_obj = foo(true)\r\n      assert_true(upvalue)\r\n    end)\r\n    \r\n  end",
    "type": "function"
  }, {
    "id": 70,
    "text": "test('class methods are callable', function()\r\n      local upvalue = false\r\n      local foo = Class()\r\n\r\n      function foo:__init(bool)\r\n        self:set_upvalue(bool)\r\n      end\r\n\r\n      function foo:set_upvalue(bool)\r\n        upvalue = bool\r\n      end\r\n\r\n      local foo_obj = foo(true)\r\n      assert_true(upvalue)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "function()\r\n      Window = Class()\r\n      function Window:setSize(size) self.size = size end\r\n      Window.__init = {size = 25}\r\n    end",
    "type": "function"
  }, {
    "id": 73,
    "text": "Window = Class()",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "Window.__init = {size = 25}",
    "type": "statement:assign"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "function()\r\n      local window = Window:new(100)\r\n      assert_equal(window.size,25)\r\n    end",
    "type": "function"
  }, {
    "id": 77,
    "text": "local window = Window:new(100)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function()\r\n      local window = Window(90)\r\n      assert_equal(window.size,25)\r\n    end",
    "type": "function"
  }, {
    "id": 80,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 81,
    "text": "function()\r\n    local Window\r\n    \r\n    before(function()\r\n      Window = Class()\r\n      function Window:setSize(size) self.size = size end\r\n      Window.__init = {size = 25}\r\n    end)\r\n    \r\n    test('Overrides instantiation scheme with Class:new()',function()\r\n      local window = Window:new(100)\r\n      assert_equal(window.size,25)\r\n    end)\r\n    \r\n    test('Overrides instantiation scheme with Class()',function()\r\n      local window = Window(90)\r\n      assert_equal(window.size,25)\r\n    end)      \r\n    \r\n  end",
    "type": "function"
  }, {
    "id": 82,
    "text": "before(function()\r\n      Window = Class()\r\n      function Window:setSize(size) self.size = size end\r\n      Window.__init = {size = 25}\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "test('Overrides instantiation scheme with Class:new()',function()\r\n      local window = Window:new(100)\r\n      assert_equal(window.size,25)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 84,
    "text": "test('Overrides instantiation scheme with Class()',function()\r\n      local window = Window(90)\r\n      assert_equal(window.size,25)\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "function()\r\n      local myClass = Class()\r\n      assert_equal(tostring(myClass()):match('(.+):<.+>$'), 'object(of ?)')\r\n    end",
    "type": "function"
  }, {
    "id": 87,
    "text": "local myClass = Class()",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "assert_equal(tostring(myClass()):match('(.+):<.+>$'), 'object(of ?)')",
    "type": "statement:functioncall"
  }, {
    "id": 89,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 90,
    "text": "function()\r\n      local myClass = Class()\r\n      myClass.__name = 'aClass'\r\n      assert_equal(tostring(myClass()):match('(.+):<.+>$'), 'object(of aClass)')\r\n    end",
    "type": "function"
  }, {
    "id": 91,
    "text": "myClass.__name = 'aClass'",
    "type": "statement:assign"
  }, {
    "id": 92,
    "text": "assert_equal(tostring(myClass()):match('(.+):<.+>$'), 'object(of aClass)')",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 94,
    "text": "function()\r\n  \r\n    test('objects from unnammed classes can be stringified', function()\r\n      local myClass = Class()\r\n      assert_equal(tostring(myClass()):match('(.+):<.+>$'), 'object(of ?)')\r\n    end)\r\n\r\n    test('objects from named classes can be stringified', function()\r\n      local myClass = Class()\r\n      myClass.__name = 'aClass'\r\n      assert_equal(tostring(myClass()):match('(.+):<.+>$'), 'object(of aClass)')\r\n    end)    \r\n    \r\n  end",
    "type": "function"
  }, {
    "id": 95,
    "text": "test('objects from unnammed classes can be stringified', function()\r\n      local myClass = Class()\r\n      assert_equal(tostring(myClass()):match('(.+):<.+>$'), 'object(of ?)')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "test('objects from named classes can be stringified', function()\r\n      local myClass = Class()\r\n      myClass.__name = 'aClass'\r\n      assert_equal(tostring(myClass()):match('(.+):<.+>$'), 'object(of aClass)')\r\n    end)",
    "type": "statement:functioncall"
  }, {
    "id": 97,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 98,
    "text": "function()\r\n\r\n  context('When a class is created', function()\r\n    local Window\r\n    \r\n    before(function()\r\n      Window = Class {size = 100}\r\n      function Window:setSize(size) self.size = size end\r\n    end)\r\n    \r\n    test('new objects can be created via Class:new()',function()\r\n      assert_equal(type(Window:new()),'table')\r\n    end)\r\n    \r\n    test('new objects can be created calling the class as a function',function()\r\n      assert_equal(type(Window()),'table')\r\n    end)\r\n    \r\n    test('new objects share their class attributes',function()\r\n      assert_equal((Window()).size,100)\r\n    end)\r\n    \r\n    test('new objects share their class methods',function()\r\n      local win = Window()\r\n      win:setSize(10)\r\n      assert_equal(win.size,10)\r\n    end)    \r\n  \r\n    test('Objects cannot call new()', function()\r\n      local win = Window()\r\n      local function should_err() local win_new = win:new() end\r\n      local function should_err2() local win_new = win() end\r\n      assert_error(should_err)\r\n      assert_error(should_err2)\r\n    end)\r\n  end)\r\n\r\n  context('Providing an __init() method to classes',function()\r\n    local Window\r\n    \r\n    before(function()\r\n      Window = Class {size = 100}\r\n      function Window:setSize(size) self.size = size end\r\n      function Window:__init(size) self.size = size end\r\n    end)\r\n    \r\n    test('Overrides instantiation scheme with Class:new()',function()\r\n      local window = Window:new(25)\r\n      assert_equal(window.size,25)\r\n    end)\r\n    \r\n    test('Overrides instantiation scheme with Class()',function()\r\n      local window = Window(90)\r\n      assert_equal(window.size,90)\r\n    end)      \r\n    \r\n  end)\r\n  \r\n  context('Through the initializer', function()\r\n    \r\n    test('class methods are callable', function()\r\n      local upvalue = false\r\n      local foo = Class()\r\n\r\n      function foo:__init(bool)\r\n        self:set_upvalue(bool)\r\n      end\r\n\r\n      function foo:set_upvalue(bool)\r\n        upvalue = bool\r\n      end\r\n\r\n      local foo_obj = foo(true)\r\n      assert_true(upvalue)\r\n    end)\r\n    \r\n  end)\r\n\r\n  context('.__init can also be a table of named args for static instantiation',function()\r\n    local Window\r\n    \r\n    before(function()\r\n      Window = Class()\r\n      function Window:setSize(size) self.size = size end\r\n      Window.__init = {size = 25}\r\n    end)\r\n    \r\n    test('Overrides instantiation scheme with Class:new()',function()\r\n      local window = Window:new(100)\r\n      assert_equal(window.size,25)\r\n    end)\r\n    \r\n    test('Overrides instantiation scheme with Class()',function()\r\n      local window = Window(90)\r\n      assert_equal(window.size,25)\r\n    end)      \r\n    \r\n  end)\r\n  \r\n  context('tostring', function()\r\n  \r\n    test('objects from unnammed classes can be stringified', function()\r\n      local myClass = Class()\r\n      assert_equal(tostring(myClass()):match('(.+):<.+>$'), 'object(of ?)')\r\n    end)\r\n\r\n    test('objects from named classes can be stringified', function()\r\n      local myClass = Class()\r\n      myClass.__name = 'aClass'\r\n      assert_equal(tostring(myClass()):match('(.+):<.+>$'), 'object(of aClass)')\r\n    end)    \r\n    \r\n  end)\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 99,
    "text": "context('When a class is created', function()\r\n    local Window\r\n    \r\n    before(function()\r\n      Window = Class {size = 100}\r\n      function Window:setSize(size) self.size = size end\r\n    end)\r\n    \r\n    test('new objects can be created via Class:new()',function()\r\n      assert_equal(type(Window:new()),'table')\r\n    end)\r\n    \r\n    test('new objects can be created calling the class as a function',function()\r\n      assert_equal(type(Window()),'table')\r\n    end)\r\n    \r\n    test('new objects share their class attributes',function()\r\n      assert_equal((Window()).size,100)\r\n    end)\r\n    \r\n    test('new objects share their class methods',function()\r\n      local win = Window()\r\n      win:setSize(10)\r\n      assert_equal(win.size,10)\r\n    end)    \r\n  \r\n    test('Objects cannot call new()', function()\r\n      local win = Window()\r\n      local function should_err() local win_new = win:new() end\r\n      local function should_err2() local win_new = win() end\r\n      assert_error(should_err)\r\n      assert_error(should_err2)\r\n    end)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "context('Providing an __init() method to classes',function()\r\n    local Window\r\n    \r\n    before(function()\r\n      Window = Class {size = 100}\r\n      function Window:setSize(size) self.size = size end\r\n      function Window:__init(size) self.size = size end\r\n    end)\r\n    \r\n    test('Overrides instantiation scheme with Class:new()',function()\r\n      local window = Window:new(25)\r\n      assert_equal(window.size,25)\r\n    end)\r\n    \r\n    test('Overrides instantiation scheme with Class()',function()\r\n      local window = Window(90)\r\n      assert_equal(window.size,90)\r\n    end)      \r\n    \r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "context('Through the initializer', function()\r\n    \r\n    test('class methods are callable', function()\r\n      local upvalue = false\r\n      local foo = Class()\r\n\r\n      function foo:__init(bool)\r\n        self:set_upvalue(bool)\r\n      end\r\n\r\n      function foo:set_upvalue(bool)\r\n        upvalue = bool\r\n      end\r\n\r\n      local foo_obj = foo(true)\r\n      assert_true(upvalue)\r\n    end)\r\n    \r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 102,
    "text": "context('.__init can also be a table of named args for static instantiation',function()\r\n    local Window\r\n    \r\n    before(function()\r\n      Window = Class()\r\n      function Window:setSize(size) self.size = size end\r\n      Window.__init = {size = 25}\r\n    end)\r\n    \r\n    test('Overrides instantiation scheme with Class:new()',function()\r\n      local window = Window:new(100)\r\n      assert_equal(window.size,25)\r\n    end)\r\n    \r\n    test('Overrides instantiation scheme with Class()',function()\r\n      local window = Window(90)\r\n      assert_equal(window.size,25)\r\n    end)      \r\n    \r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 103,
    "text": "context('tostring', function()\r\n  \r\n    test('objects from unnammed classes can be stringified', function()\r\n      local myClass = Class()\r\n      assert_equal(tostring(myClass()):match('(.+):<.+>$'), 'object(of ?)')\r\n    end)\r\n\r\n    test('objects from named classes can be stringified', function()\r\n      local myClass = Class()\r\n      myClass.__name = 'aClass'\r\n      assert_equal(tostring(myClass()):match('(.+):<.+>$'), 'object(of aClass)')\r\n    end)    \r\n    \r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "",
    "type": "function container"
  }, {
    "id": 106,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 107,
    "text": "before",
    "type": "global function"
  }, {
    "id": 108,
    "text": "assert_error",
    "type": "global function"
  }, {
    "id": 109,
    "text": "foo",
    "type": "global function"
  }, {
    "id": 110,
    "text": "myClass",
    "type": "global function"
  }, {
    "id": 111,
    "text": "context",
    "type": "global function"
  }, {
    "id": 112,
    "text": "win",
    "type": "global function"
  }, {
    "id": 113,
    "text": "Class",
    "type": "global function"
  }, {
    "id": 114,
    "text": "Window",
    "type": "global function"
  }, {
    "id": 115,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 116,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 117,
    "text": "type",
    "type": "global function"
  }, {
    "id": 118,
    "text": "require",
    "type": "global function"
  }, {
    "id": 119,
    "text": "test",
    "type": "global function"
  }, {
    "id": 120,
    "text": "",
    "type": "variable container"
  }, {
    "id": 121,
    "text": "",
    "type": "require container"
  }, {
    "id": 122,
    "text": "",
    "type": "require local variable"
  } ]
}