{
  "_filename": "init.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/say/src/init.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 4,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 20
  }, {
    "from": 15,
    "label": "has",
    "to": 21
  }, {
    "from": 15,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 15,
    "label": "has",
    "to": 19
  }, {
    "from": 15,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 19
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "calls",
    "to": 31
  }, {
    "from": 27,
    "label": "calls",
    "to": 28
  }, {
    "from": 27,
    "label": "calls",
    "to": 29
  }, {
    "from": 27,
    "label": "calls",
    "to": 30
  }, {
    "from": 27,
    "label": "calls",
    "to": 30
  }, {
    "from": 27,
    "label": "calls",
    "to": 32
  }, {
    "from": 1,
    "label": "contains",
    "to": 27
  }, {
    "from": 27,
    "label": "declares",
    "to": 2
  }, {
    "from": 27,
    "label": "declares",
    "to": 7
  }, {
    "from": 27,
    "label": "declares",
    "to": 12
  }, {
    "from": 27,
    "label": "declares",
    "to": 15
  }, {
    "from": 27,
    "label": "declares",
    "to": 25
  }, {
    "from": 1,
    "label": "contains",
    "to": 33
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 33,
    "label": "initializes",
    "to": 35
  }, {
    "from": 35,
    "label": "assigns",
    "to": 36
  }, {
    "from": 33,
    "label": "initializes",
    "to": 37
  }, {
    "from": 37,
    "label": "assigns",
    "to": 38
  }, {
    "from": 33,
    "label": "initializes",
    "to": 39
  }, {
    "from": 33,
    "label": "initializes",
    "to": 40
  }, {
    "from": 33,
    "label": "initializes",
    "to": 41
  }, {
    "from": 41,
    "label": "assigns",
    "to": 42
  }, {
    "from": 42,
    "label": "assigns",
    "to": 43
  }, {
    "from": 43,
    "label": "assigns",
    "to": 44
  }, {
    "from": 42,
    "label": "assigns",
    "to": 45
  }, {
    "from": 45,
    "label": "assigns",
    "to": 46
  }, {
    "from": 42,
    "label": "assigns",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 42,
    "label": "assigns",
    "to": 49
  }, {
    "from": 49,
    "label": "assigns",
    "to": 50
  }, {
    "from": 42,
    "label": "assigns",
    "to": 51
  }, {
    "from": 51,
    "label": "assigns",
    "to": 52
  }, {
    "from": 42,
    "label": "assigns",
    "to": 53
  }, {
    "from": 53,
    "label": "assigns",
    "to": 54
  }, {
    "from": 33,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 56,
    "label": "assigns",
    "to": 57
  }, {
    "from": 57,
    "label": "assigns",
    "to": 58
  }, {
    "from": 56,
    "label": "assigns",
    "to": 59
  }, {
    "from": 59,
    "label": "assigns",
    "to": 60
  }, {
    "from": 33,
    "label": "initializes",
    "to": 61
  }, {
    "from": 61,
    "label": "assigns",
    "to": 62
  }, {
    "from": 1,
    "label": "provides",
    "to": 63
  }, {
    "from": 31,
    "label": "represents",
    "to": 64
  }, {
    "from": 63,
    "label": "provides",
    "to": 64
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 50
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 52
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 54
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 58
  }, {
    "from": 23,
    "label": "hasArgument",
    "to": 60
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "init",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(self, namespace)\r\n    current_namespace = namespace\r\n    if not registry[current_namespace] then\r\n      registry[current_namespace] = {}\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "current_namespace = namespace",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "if not registry[current_namespace] then\r\n      registry[current_namespace] = {}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "registry[current_namespace] = {}",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function(self, namespace)\r\n    fallback_namespace = namespace\r\n    if not registry[fallback_namespace] then\r\n      registry[fallback_namespace] = {}\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 8,
    "text": "fallback_namespace = namespace",
    "type": "statement:assign"
  }, {
    "id": 9,
    "text": "if not registry[fallback_namespace] then\r\n      registry[fallback_namespace] = {}\r\n    end",
    "type": "statement:if"
  }, {
    "id": 10,
    "text": "registry[fallback_namespace] = {}",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function(self, key, value)\r\n    registry[current_namespace][key] = value\r\n  end",
    "type": "function"
  }, {
    "id": 13,
    "text": "registry[current_namespace][key] = value",
    "type": "statement:assign"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function(self, key, vars)\r\n    vars = vars or {}\r\n\r\n    local str = registry[current_namespace][key] or registry[fallback_namespace][key]\r\n\r\n    if str == nil then\r\n      return nil\r\n    end\r\n    str = tostring(str)\r\n    local strings = {}\r\n\r\n    for i,v in ipairs(vars) do\r\n      table.insert(strings, tostring(v))\r\n    end\r\n\r\n    return #strings > 0 and str:format(unpack(strings)) or str\r\n  end",
    "type": "function"
  }, {
    "id": 16,
    "text": "vars = vars or {}",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "local str = registry[current_namespace][key] or registry[fallback_namespace][key]",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "if str == nil then\r\n      return nil\r\n    end",
    "type": "statement:if"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "str = tostring(str)",
    "type": "statement:assign"
  }, {
    "id": 21,
    "text": "local strings = {}",
    "type": "statement:localassign"
  }, {
    "id": 22,
    "text": "for i,v in ipairs(vars) do\r\n      table.insert(strings, tostring(v))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 23,
    "text": "table.insert(strings, tostring(v))",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "function(self, key)\r\n    return registry[key]\r\n  end",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "",
    "type": "function container"
  }, {
    "id": 28,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 29,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 30,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 31,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 32,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 33,
    "text": "",
    "type": "variable container"
  }, {
    "id": 34,
    "text": "",
    "type": "require container"
  }, {
    "id": 35,
    "text": "",
    "type": "local variable"
  }, {
    "id": 36,
    "text": "",
    "type": "n/a"
  }, {
    "id": 37,
    "text": "",
    "type": "local variable"
  }, {
    "id": 38,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 39,
    "text": "",
    "type": "local variable"
  }, {
    "id": 40,
    "text": "",
    "type": "local variable"
  }, {
    "id": 41,
    "text": "",
    "type": "local variable"
  }, {
    "id": 42,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 43,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 44,
    "text": "",
    "type": "string"
  }, {
    "id": 45,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 46,
    "text": "",
    "type": "string"
  }, {
    "id": 47,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 48,
    "text": "",
    "type": "string"
  }, {
    "id": 49,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 50,
    "text": "",
    "type": "function"
  }, {
    "id": 51,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 52,
    "text": "",
    "type": "function"
  }, {
    "id": 53,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 54,
    "text": "",
    "type": "function"
  }, {
    "id": 55,
    "text": "",
    "type": "local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 57,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 58,
    "text": "",
    "type": "function"
  }, {
    "id": 59,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 60,
    "text": "",
    "type": "function"
  }, {
    "id": 61,
    "text": "",
    "type": "global variable"
  }, {
    "id": 62,
    "text": "",
    "type": "n/a"
  }, {
    "id": 63,
    "text": "",
    "type": "interface container"
  }, {
    "id": 64,
    "text": "",
    "type": "interface"
  } ]
}