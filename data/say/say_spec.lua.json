{
  "_filename": "say_spec.lua",
  "_isShebang": false,
  "_isSpec": true,
  "_isTest": false,
  "_path": "modules/say/spec/say_spec.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 7
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 10,
    "label": "has",
    "to": 14
  }, {
    "from": 10,
    "label": "has",
    "to": 15
  }, {
    "from": 10,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 17,
    "label": "has",
    "to": 19
  }, {
    "from": 17,
    "label": "has",
    "to": 20
  }, {
    "from": 17,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 7
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 22,
    "label": "has",
    "to": 25
  }, {
    "from": 22,
    "label": "has",
    "to": 26
  }, {
    "from": 22,
    "label": "has",
    "to": 11
  }, {
    "from": 22,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "has",
    "to": 29
  }, {
    "from": 28,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 3
  }, {
    "from": 32,
    "label": "has",
    "to": 4
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 7
  }, {
    "from": 33,
    "label": "has",
    "to": 8
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 7
  }, {
    "from": 34,
    "label": "has",
    "to": 11
  }, {
    "from": 34,
    "label": "has",
    "to": 12
  }, {
    "from": 34,
    "label": "has",
    "to": 13
  }, {
    "from": 34,
    "label": "has",
    "to": 14
  }, {
    "from": 34,
    "label": "has",
    "to": 15
  }, {
    "from": 31,
    "label": "has",
    "to": 35
  }, {
    "from": 35,
    "label": "has",
    "to": 18
  }, {
    "from": 35,
    "label": "has",
    "to": 19
  }, {
    "from": 35,
    "label": "has",
    "to": 20
  }, {
    "from": 31,
    "label": "has",
    "to": 36
  }, {
    "from": 36,
    "label": "has",
    "to": 23
  }, {
    "from": 36,
    "label": "has",
    "to": 7
  }, {
    "from": 36,
    "label": "has",
    "to": 24
  }, {
    "from": 36,
    "label": "has",
    "to": 25
  }, {
    "from": 36,
    "label": "has",
    "to": 26
  }, {
    "from": 36,
    "label": "has",
    "to": 11
  }, {
    "from": 31,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 29
  }, {
    "from": 31,
    "label": "has",
    "to": 38
  }, {
    "from": 39,
    "label": "calls",
    "to": 46
  }, {
    "from": 39,
    "label": "calls",
    "to": 46
  }, {
    "from": 39,
    "label": "calls",
    "to": 46
  }, {
    "from": 39,
    "label": "calls",
    "to": 46
  }, {
    "from": 39,
    "label": "calls",
    "to": 46
  }, {
    "from": 39,
    "label": "calls",
    "to": 43
  }, {
    "from": 39,
    "label": "calls",
    "to": 43
  }, {
    "from": 39,
    "label": "calls",
    "to": 43
  }, {
    "from": 39,
    "label": "calls",
    "to": 43
  }, {
    "from": 39,
    "label": "calls",
    "to": 43
  }, {
    "from": 39,
    "label": "calls",
    "to": 43
  }, {
    "from": 39,
    "label": "calls",
    "to": 43
  }, {
    "from": 39,
    "label": "calls",
    "to": 40
  }, {
    "from": 39,
    "label": "calls",
    "to": 40
  }, {
    "from": 39,
    "label": "calls",
    "to": 40
  }, {
    "from": 39,
    "label": "calls",
    "to": 40
  }, {
    "from": 39,
    "label": "calls",
    "to": 40
  }, {
    "from": 39,
    "label": "calls",
    "to": 40
  }, {
    "from": 39,
    "label": "calls",
    "to": 40
  }, {
    "from": 39,
    "label": "calls",
    "to": 40
  }, {
    "from": 39,
    "label": "calls",
    "to": 45
  }, {
    "from": 39,
    "label": "calls",
    "to": 44
  }, {
    "from": 39,
    "label": "calls",
    "to": 41
  }, {
    "from": 39,
    "label": "calls",
    "to": 42
  }, {
    "from": 1,
    "label": "contains",
    "to": 39
  }, {
    "from": 39,
    "label": "declares",
    "to": 2
  }, {
    "from": 39,
    "label": "declares",
    "to": 6
  }, {
    "from": 39,
    "label": "declares",
    "to": 10
  }, {
    "from": 39,
    "label": "declares",
    "to": 17
  }, {
    "from": 39,
    "label": "declares",
    "to": 22
  }, {
    "from": 39,
    "label": "declares",
    "to": 28
  }, {
    "from": 39,
    "label": "declares",
    "to": 31
  }, {
    "from": 1,
    "label": "contains",
    "to": 47
  }, {
    "from": 1,
    "label": "contains",
    "to": 48
  }, {
    "from": 47,
    "label": "initializes",
    "to": 49
  }, {
    "from": 32,
    "label": "hasArgument",
    "to": 2
  }, {
    "from": 33,
    "label": "hasArgument",
    "to": 6
  }, {
    "from": 34,
    "label": "hasArgument",
    "to": 10
  }, {
    "from": 35,
    "label": "hasArgument",
    "to": 17
  }, {
    "from": 36,
    "label": "hasArgument",
    "to": 22
  }, {
    "from": 37,
    "label": "hasArgument",
    "to": 28
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "say_spec",
    "type": "module"
  }, {
    "id": 2,
    "text": "function()\r\n    package.loaded['say'] = false -- busted uses it, must force to reload\r\n    s = require('init')   -- devcode is in /src/init.lua not in /src/say/init.lua\r\n  end",
    "type": "function"
  }, {
    "id": 3,
    "text": "package.loaded['say'] = false",
    "type": "statement:assign"
  }, {
    "id": 4,
    "text": "s = require('init')",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function()\r\n    s:set('herp', 'derp')\r\n    assert(s._registry.en.herp == 'derp')\r\n  end",
    "type": "function"
  }, {
    "id": 7,
    "text": "s:set('herp', 'derp')",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "assert(s._registry.en.herp == 'derp')",
    "type": "statement:functioncall"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function()\r\n    s:set('herp', 'derp')\r\n    assert(s('herp') == 'derp')\r\n\r\n    s:set('herp', '%s')\r\n    assert(s('herp', {'test'}) == 'test')\r\n\r\n    s:set('herp', '%s%s')\r\n    assert(s('herp', {'test', 'test'}) == 'testtest')\r\n  end",
    "type": "function"
  }, {
    "id": 11,
    "text": "assert(s('herp') == 'derp')",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "s:set('herp', '%s')",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "assert(s('herp', {'test'}) == 'test')",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "s:set('herp', '%s%s')",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "assert(s('herp', {'test', 'test'}) == 'testtest')",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "function()\r\n    s:set('substitute_test', 'boolean = %s, number = %s, string = \"%s\", table = %s')\r\n    local atable = {}\r\n    assert(s('substitute_test', {true, 100, 'some text', atable}) == 'boolean = true, number = 100, string = \"some text\", table = ' .. tostring(atable))\r\n  end",
    "type": "function"
  }, {
    "id": 18,
    "text": "s:set('substitute_test', 'boolean = %s, number = %s, string = \"%s\", table = %s')",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "local atable = {}",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "assert(s('substitute_test', {true, 100, 'some text', atable}) == 'boolean = true, number = 100, string = \"some text\", table = ' .. tostring(atable))",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function()\r\n    s:set_namespace('en')\r\n    s:set('herp', 'derp')\r\n    s:set_namespace('not-en')\r\n    s:set('not-herp', 'not-derp')\r\n\r\n    assert(s('not-herp') == 'not-derp')    \r\n    assert(s('herp') == 'derp')\r\n  end",
    "type": "function"
  }, {
    "id": 23,
    "text": "s:set_namespace('en')",
    "type": "statement:functioncall"
  }, {
    "id": 24,
    "text": "s:set_namespace('not-en')",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "s:set('not-herp', 'not-derp')",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "assert(s('not-herp') == 'not-derp')",
    "type": "statement:functioncall"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "function()\r\n    assert(s('this does not exist') == nil)\r\n  end",
    "type": "function"
  }, {
    "id": 29,
    "text": "assert(s('this does not exist') == nil)",
    "type": "statement:functioncall"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function()\r\n  setup(function()\r\n    package.loaded['say'] = false -- busted uses it, must force to reload\r\n    s = require('init')   -- devcode is in /src/init.lua not in /src/say/init.lua\r\n  end)\r\n  \r\n  it(\"tests the set function metamethod\", function()\r\n    s:set('herp', 'derp')\r\n    assert(s._registry.en.herp == 'derp')\r\n  end)\r\n\r\n  it(\"tests the __call metamethod\", function()\r\n    s:set('herp', 'derp')\r\n    assert(s('herp') == 'derp')\r\n\r\n    s:set('herp', '%s')\r\n    assert(s('herp', {'test'}) == 'test')\r\n\r\n    s:set('herp', '%s%s')\r\n    assert(s('herp', {'test', 'test'}) == 'testtest')\r\n  end)\r\n\r\n  it(\"tests the substitution of variable types; boolean, number, string and table\", function()\r\n    s:set('substitute_test', 'boolean = %s, number = %s, string = \"%s\", table = %s')\r\n    local atable = {}\r\n    assert(s('substitute_test', {true, 100, 'some text', atable}) == 'boolean = true, number = 100, string = \"some text\", table = ' .. tostring(atable))\r\n  end)\r\n\r\n  it(\"tests the set_fallback method\", function()\r\n    s:set_namespace('en')\r\n    s:set('herp', 'derp')\r\n    s:set_namespace('not-en')\r\n    s:set('not-herp', 'not-derp')\r\n\r\n    assert(s('not-herp') == 'not-derp')    \r\n    assert(s('herp') == 'derp')\r\n  end)\r\n\r\n  it(\"tests missing elements returns nil\", function()\r\n    assert(s('this does not exist') == nil)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "setup(function()\r\n    package.loaded['say'] = false -- busted uses it, must force to reload\r\n    s = require('init')   -- devcode is in /src/init.lua not in /src/say/init.lua\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "it(\"tests the set function metamethod\", function()\r\n    s:set('herp', 'derp')\r\n    assert(s._registry.en.herp == 'derp')\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "it(\"tests the __call metamethod\", function()\r\n    s:set('herp', 'derp')\r\n    assert(s('herp') == 'derp')\r\n\r\n    s:set('herp', '%s')\r\n    assert(s('herp', {'test'}) == 'test')\r\n\r\n    s:set('herp', '%s%s')\r\n    assert(s('herp', {'test', 'test'}) == 'testtest')\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "it(\"tests the substitution of variable types; boolean, number, string and table\", function()\r\n    s:set('substitute_test', 'boolean = %s, number = %s, string = \"%s\", table = %s')\r\n    local atable = {}\r\n    assert(s('substitute_test', {true, 100, 'some text', atable}) == 'boolean = true, number = 100, string = \"some text\", table = ' .. tostring(atable))\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "it(\"tests the set_fallback method\", function()\r\n    s:set_namespace('en')\r\n    s:set('herp', 'derp')\r\n    s:set_namespace('not-en')\r\n    s:set('not-herp', 'not-derp')\r\n\r\n    assert(s('not-herp') == 'not-derp')    \r\n    assert(s('herp') == 'derp')\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "it(\"tests missing elements returns nil\", function()\r\n    assert(s('this does not exist') == nil)\r\n  end)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 39,
    "text": "",
    "type": "function container"
  }, {
    "id": 40,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 41,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 42,
    "text": "setup",
    "type": "global function"
  }, {
    "id": 43,
    "text": "s",
    "type": "global function"
  }, {
    "id": 44,
    "text": "require",
    "type": "global function"
  }, {
    "id": 45,
    "text": "describe",
    "type": "global function"
  }, {
    "id": 46,
    "text": "it",
    "type": "global function"
  }, {
    "id": 47,
    "text": "",
    "type": "variable container"
  }, {
    "id": 48,
    "text": "",
    "type": "require container"
  }, {
    "id": 49,
    "text": "",
    "type": "local variable"
  } ]
}