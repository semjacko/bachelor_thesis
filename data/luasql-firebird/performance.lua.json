{
  "_filename": "performance.lua",
  "_isShebang": true,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/luasql-firebird/tests/performance.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 3,
    "label": "has",
    "to": 4
  }, {
    "from": 3,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 2,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 8,
    "label": "has",
    "to": 10
  }, {
    "from": 8,
    "label": "has",
    "to": 11
  }, {
    "from": 8,
    "label": "has",
    "to": 12
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 8,
    "label": "has",
    "to": 6
  }, {
    "from": 8,
    "label": "has",
    "to": 15
  }, {
    "from": 16,
    "label": "has",
    "to": 6
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 6
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 6
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "calls",
    "to": 23
  }, {
    "from": 22,
    "label": "calls",
    "to": 24
  }, {
    "from": 2,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 30
  }, {
    "from": 22,
    "label": "calls",
    "to": 26
  }, {
    "from": 22,
    "label": "calls",
    "to": 26
  }, {
    "from": 22,
    "label": "calls",
    "to": 26
  }, {
    "from": 22,
    "label": "calls",
    "to": 26
  }, {
    "from": 22,
    "label": "calls",
    "to": 26
  }, {
    "from": 22,
    "label": "calls",
    "to": 26
  }, {
    "from": 22,
    "label": "calls",
    "to": 26
  }, {
    "from": 2,
    "label": "calls",
    "to": 25
  }, {
    "from": 2,
    "label": "calls",
    "to": 25
  }, {
    "from": 22,
    "label": "calls",
    "to": 29
  }, {
    "from": 8,
    "label": "calls",
    "to": 27
  }, {
    "from": 8,
    "label": "calls",
    "to": 33
  }, {
    "from": 22,
    "label": "calls",
    "to": 8
  }, {
    "from": 22,
    "label": "calls",
    "to": 8
  }, {
    "from": 22,
    "label": "calls",
    "to": 8
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 2
  }, {
    "from": 8,
    "label": "calls",
    "to": 32
  }, {
    "from": 8,
    "label": "calls",
    "to": 32
  }, {
    "from": 22,
    "label": "calls",
    "to": 32
  }, {
    "from": 22,
    "label": "calls",
    "to": 32
  }, {
    "from": 22,
    "label": "calls",
    "to": 32
  }, {
    "from": 8,
    "label": "calls",
    "to": 34
  }, {
    "from": 22,
    "label": "calls",
    "to": 31
  }, {
    "from": 22,
    "label": "calls",
    "to": 28
  }, {
    "from": 22,
    "label": "calls",
    "to": 28
  }, {
    "from": 22,
    "label": "calls",
    "to": 28
  }, {
    "from": 22,
    "label": "calls",
    "to": 28
  }, {
    "from": 22,
    "label": "calls",
    "to": 28
  }, {
    "from": 22,
    "label": "calls",
    "to": 28
  }, {
    "from": 22,
    "label": "calls",
    "to": 28
  }, {
    "from": 22,
    "label": "calls",
    "to": 28
  }, {
    "from": 22,
    "label": "calls",
    "to": 28
  }, {
    "from": 22,
    "label": "calls",
    "to": 28
  }, {
    "from": 1,
    "label": "contains",
    "to": 22
  }, {
    "from": 22,
    "label": "declares",
    "to": 2
  }, {
    "from": 22,
    "label": "declares",
    "to": 8
  }, {
    "from": 22,
    "label": "declares",
    "to": 16
  }, {
    "from": 22,
    "label": "declares",
    "to": 18
  }, {
    "from": 22,
    "label": "declares",
    "to": 20
  }, {
    "from": 1,
    "label": "contains",
    "to": 36
  }, {
    "from": 1,
    "label": "contains",
    "to": 37
  }, {
    "from": 37,
    "label": "initializes",
    "to": 35
  }, {
    "from": 35,
    "label": "requires",
    "to": 38
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "performance",
    "type": "module"
  }, {
    "id": 2,
    "text": "function assert2 (expected, value, msg)\r\n\tif not msg then\r\n\t\tmsg = ''\r\n\telse\r\n\t\tmsg = msg..'\\n'\r\n\tend\r\n\treturn assert (value == expected,\r\n\t\tmsg..\"wrong value ([\"..tostring(value)..\"] instead of \"..\r\n\t\ttostring(expected)..\")\")\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "if not msg then\r\n\t\tmsg = ''\r\n\telse\r\n\t\tmsg = msg..'\\n'\r\n\tend",
    "type": "statement:if"
  }, {
    "id": 4,
    "text": "msg = ''",
    "type": "statement:assign"
  }, {
    "id": 5,
    "text": "msg = msg..'\\n'",
    "type": "statement:assign"
  }, {
    "id": 6,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function test_object (obj, objmethods)\r\n\t-- checking object type.\r\n\tassert2 (\"userdata\", type(obj), \"incorrect object type\")\r\n\t-- trying to get metatable.\r\n\tassert2 (\"LuaSQL: you're not allowed to get this metatable\",\r\n\t\tgetmetatable(obj), \"error permitting access to object's metatable\")\r\n\t-- trying to set metatable.\r\n\tassert2 (false, pcall (setmetatable, ENV, {}))\r\n\t-- checking existence of object's methods.\r\n\tfor i = 1, table.getn (objmethods) do\r\n\t\tlocal method = objmethods[i]\r\n\t\tassert2 (\"function\", type(obj[method]))\r\n\tend\r\n\treturn obj\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "assert2 (\"userdata\", type(obj), \"incorrect object type\")",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "assert2 (\"LuaSQL: you're not allowed to get this metatable\",\r\n\t\tgetmetatable(obj), \"error permitting access to object's metatable\")",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "assert2 (false, pcall (setmetatable, ENV, {}))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "for i = 1, table.getn (objmethods) do\r\n\t\tlocal method = objmethods[i]\r\n\t\tassert2 (\"function\", type(obj[method]))\r\n\tend",
    "type": "statement:numericfor"
  }, {
    "id": 13,
    "text": "local method = objmethods[i]",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "assert2 (\"function\", type(obj[method]))",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 16,
    "text": "function (obj)\r\n\treturn test_object (obj, { \"close\", \"connect\", })\r\nend",
    "type": "function"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function (obj)\r\n\treturn test_object (obj, { \"close\", \"commit\", \"execute\", \"rollback\", \"setautocommit\", })\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function (obj)\r\n\treturn test_object (obj, { \"close\", \"fetch\", \"getcolnames\", \"getcoltypes\", })\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "",
    "type": "function container"
  }, {
    "id": 23,
    "text": "format",
    "type": "global function"
  }, {
    "id": 24,
    "text": "exit",
    "type": "global function"
  }, {
    "id": 25,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 26,
    "text": "print",
    "type": "global function"
  }, {
    "id": 27,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 28,
    "text": "clock",
    "type": "global function"
  }, {
    "id": 29,
    "text": "luasql[driver]",
    "type": "global function"
  }, {
    "id": 30,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 31,
    "text": "require",
    "type": "global function"
  }, {
    "id": 32,
    "text": "type",
    "type": "global function"
  }, {
    "id": 33,
    "text": "getn",
    "type": "global function"
  }, {
    "id": 34,
    "text": "getmetatable",
    "type": "global function"
  }, {
    "id": 35,
    "text": "",
    "type": "global variable"
  }, {
    "id": 36,
    "text": "",
    "type": "variable container"
  }, {
    "id": 37,
    "text": "",
    "type": "require container"
  }, {
    "id": 38,
    "text": "(arg[1])",
    "type": "module"
  } ]
}