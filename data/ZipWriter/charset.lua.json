{
  "_filename": "charset.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/ZipWriter/lua/ZipWriter/charset.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 3
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 8,
    "label": "has",
    "to": 3
  }, {
    "from": 8,
    "label": "has",
    "to": 9
  }, {
    "from": 10,
    "label": "has",
    "to": 3
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 3
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 14,
    "label": "has",
    "to": 3
  }, {
    "from": 14,
    "label": "has",
    "to": 19
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 20,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 15
  }, {
    "from": 22,
    "label": "has",
    "to": 16
  }, {
    "from": 16,
    "label": "has",
    "to": 17
  }, {
    "from": 16,
    "label": "has",
    "to": 18
  }, {
    "from": 22,
    "label": "has",
    "to": 3
  }, {
    "from": 20,
    "label": "has",
    "to": 3
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 24,
    "label": "has",
    "to": 3
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 3
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 28,
    "label": "calls",
    "to": 36
  }, {
    "from": 28,
    "label": "calls",
    "to": 4
  }, {
    "from": 28,
    "label": "calls",
    "to": 38
  }, {
    "from": 28,
    "label": "calls",
    "to": 38
  }, {
    "from": 28,
    "label": "calls",
    "to": 39
  }, {
    "from": 12,
    "label": "calls",
    "to": 37
  }, {
    "from": 1,
    "label": "contains",
    "to": 28
  }, {
    "from": 28,
    "label": "declares",
    "to": 2
  }, {
    "from": 28,
    "label": "declares",
    "to": 4
  }, {
    "from": 28,
    "label": "declares",
    "to": 5
  }, {
    "from": 28,
    "label": "declares",
    "to": 8
  }, {
    "from": 28,
    "label": "declares",
    "to": 10
  }, {
    "from": 28,
    "label": "declares",
    "to": 12
  }, {
    "from": 28,
    "label": "declares",
    "to": 14
  }, {
    "from": 28,
    "label": "declares",
    "to": 20
  }, {
    "from": 28,
    "label": "declares",
    "to": 24
  }, {
    "from": 28,
    "label": "declares",
    "to": 26
  }, {
    "from": 1,
    "label": "contains",
    "to": 40
  }, {
    "from": 1,
    "label": "contains",
    "to": 41
  }, {
    "from": 40,
    "label": "initializes",
    "to": 42
  }, {
    "from": 42,
    "label": "assigns",
    "to": 43
  }, {
    "from": 40,
    "label": "initializes",
    "to": 44
  }, {
    "from": 44,
    "label": "assigns",
    "to": 45
  }, {
    "from": 40,
    "label": "initializes",
    "to": 46
  }, {
    "from": 46,
    "label": "assigns",
    "to": 47
  }, {
    "from": 47,
    "label": "assigns",
    "to": 48
  }, {
    "from": 48,
    "label": "assigns",
    "to": 49
  }, {
    "from": 47,
    "label": "assigns",
    "to": 50
  }, {
    "from": 50,
    "label": "assigns",
    "to": 51
  }, {
    "from": 40,
    "label": "initializes",
    "to": 52
  }, {
    "from": 52,
    "label": "assigns",
    "to": 53
  }, {
    "from": 40,
    "label": "initializes",
    "to": 54
  }, {
    "from": 40,
    "label": "initializes",
    "to": 55
  }, {
    "from": 55,
    "label": "assigns",
    "to": 56
  }, {
    "from": 1,
    "label": "provides",
    "to": 57
  }, {
    "from": 55,
    "label": "represents",
    "to": 58
  }, {
    "from": 57,
    "label": "provides",
    "to": 58
  }, {
    "from": 60,
    "label": "requires",
    "to": 1
  }, {
    "from": 55,
    "label": "represents",
    "to": 61
  }, {
    "from": 55,
    "label": "represents",
    "to": 63
  }, {
    "from": 55,
    "label": "represents",
    "to": 65
  }, {
    "from": 55,
    "label": "contains",
    "to": 8
  }, {
    "from": 59,
    "label": "contains",
    "to": 8
  }, {
    "from": 62,
    "label": "contains",
    "to": 8
  }, {
    "from": 64,
    "label": "contains",
    "to": 8
  }, {
    "from": 55,
    "label": "contains",
    "to": 10
  }, {
    "from": 59,
    "label": "contains",
    "to": 10
  }, {
    "from": 62,
    "label": "contains",
    "to": 10
  }, {
    "from": 64,
    "label": "contains",
    "to": 10
  }, {
    "from": 55,
    "label": "contains",
    "to": 12
  }, {
    "from": 59,
    "label": "contains",
    "to": 12
  }, {
    "from": 62,
    "label": "contains",
    "to": 12
  }, {
    "from": 64,
    "label": "contains",
    "to": 12
  }, {
    "from": 55,
    "label": "contains",
    "to": 29
  }, {
    "from": 55,
    "label": "contains",
    "to": 30
  }, {
    "from": 55,
    "label": "contains",
    "to": 31
  }, {
    "from": 55,
    "label": "contains",
    "to": 32
  }, {
    "from": 55,
    "label": "contains",
    "to": 33
  }, {
    "from": 55,
    "label": "contains",
    "to": 34
  }, {
    "from": 55,
    "label": "contains",
    "to": 35
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "charset",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function pass_thrue(str) return str end",
    "type": "function"
  }, {
    "id": 3,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 4,
    "text": "local function make_iconv(to,from) end",
    "type": "function"
  }, {
    "id": 5,
    "text": "function (to,from)\r\n    local c = iconv.new(to,from)\r\n    return c and function(str)\r\n      return c:iconv(str)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 6,
    "text": "local c = iconv.new(to,from)",
    "type": "statement:localassign"
  }, {
    "id": 7,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 8,
    "text": "function M.pass_thrue_only()\r\n  return not iconv\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 10,
    "text": "function M.supported(to, from)\r\n  return M[to][from] ~= pass_thrue\r\nend",
    "type": "function"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function M.convert(to, from, str)\r\n  return M[to][from](str)\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 14,
    "text": "function(self,from)\r\n    from = from:lower()\r\n    if from == to then\r\n      self[from] = pass_thrue\r\n    else\r\n      self[from] = make_iconv(to,from) or pass_thrue\r\n    end\r\n    return self[from];\r\n  end",
    "type": "function"
  }, {
    "id": 15,
    "text": "from = from:lower()",
    "type": "statement:assign"
  }, {
    "id": 16,
    "text": "if from == to then\r\n      self[from] = pass_thrue\r\n    else\r\n      self[from] = make_iconv(to,from) or pass_thrue\r\n    end",
    "type": "statement:if"
  }, {
    "id": 17,
    "text": "self[from] = pass_thrue",
    "type": "statement:assign"
  }, {
    "id": 18,
    "text": "self[from] = make_iconv(to,from) or pass_thrue",
    "type": "statement:assign"
  }, {
    "id": 19,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 20,
    "text": "function(self, to)\r\n  to = to:lower()\r\n  self[to] = setmeta({},{__index = function(self,from)\r\n    from = from:lower()\r\n    if from == to then\r\n      self[from] = pass_thrue\r\n    else\r\n      self[from] = make_iconv(to,from) or pass_thrue\r\n    end\r\n    return self[from];\r\n  end})\r\n  return self[to]\r\nend",
    "type": "function"
  }, {
    "id": 21,
    "text": "to = to:lower()",
    "type": "statement:assign"
  }, {
    "id": 22,
    "text": "self[to] = setmeta({},{__index = function(self,from)\r\n    from = from:lower()\r\n    if from == to then\r\n      self[from] = pass_thrue\r\n    else\r\n      self[from] = make_iconv(to,from) or pass_thrue\r\n    end\r\n    return self[from];\r\n  end})",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 24,
    "text": "function(self, to, from)\r\n  return self[to][from]\r\nend",
    "type": "function"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function(str)\r\n      return c:iconv(str)\r\n    end",
    "type": "function"
  }, {
    "id": 27,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 28,
    "text": "",
    "type": "function container"
  }, {
    "id": 29,
    "text": "function M.GetLocalCPCode()\r\n  return LOCAL_CP or DEFAULT_CP\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "function M.GetLocalCPName()\r\n  return WINDOWS_CODE_PAGES[ LOCAL_CP or DEFAULT_CP ]\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "function M.new(...)\r\n  local t = ZipWriter:new(...)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "function M.co_writer(fn)\r\n  local reciver, err = coroutine.create(function ()\r\n    local reader = function ()\r\n      return coroutine.yield(true)\r\n    end\r\n    fn(reader)\r\n  end)\r\n  if not reciver then return nil, err end\r\n  local ok, err = coroutine.resume(reciver)\r\n  if not ok then return nil, err end\r\n\r\n  local function writer(chunk)\r\n    return coroutine.resume(reciver, chunk)\r\n  end\r\n\r\n  return writer\r\nend",
    "type": "function"
  }, {
    "id": 33,
    "text": "function M.co_reader(fn)\r\n  local sender, err = coroutine.create(function ()\r\n    local writer = function (chunk)\r\n      return coroutine.yield(chunk)\r\n    end\r\n    fn(writer)\r\n  end)\r\n  if not sender then return nil, err end\r\n\r\n  local function reader()\r\n    local ok, data = coroutine.resume(sender, true)\r\n    if ok then return data end\r\n    return nil, data\r\n  end\r\n\r\n  return reader\r\nend",
    "type": "function"
  }, {
    "id": 34,
    "text": "function M.sink(stream, fname, desc)\r\n  return M.co_writer(function(reader)\r\n    stream:write(fname, desc, reader)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 35,
    "text": "function M.source(stream, files)\r\n  return M.co_reader(function(writer)\r\n    stream:open_writer(writer)\r\n    for _, file in ipairs(files) do\r\n      local fname, fpath, desc = file[1],file[2],file[3]\r\n      fname, fpath = fname or fpath, fpath or fname\r\n      desc = desc or {isfile=true}\r\n      if desc.isfile then\r\n        local fh = assert(io.open(fpath,'rb'))\r\n        stream:write(fname, desc, function()\r\n          local chunk, err = fh:read()\r\n          if not chunk then fh:close() fh = nil end\r\n          return chunk, err\r\n        end)\r\n      else\r\n        stream:write(fname, desc)\r\n      end\r\n    end\r\n    stream:close()\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 37,
    "text": "M[to][from]",
    "type": "global function"
  }, {
    "id": 38,
    "text": "setmeta",
    "type": "global function"
  }, {
    "id": 39,
    "text": "new",
    "type": "global function"
  }, {
    "id": 40,
    "text": "",
    "type": "variable container"
  }, {
    "id": 41,
    "text": "",
    "type": "require container"
  }, {
    "id": 42,
    "text": "",
    "type": "local variable"
  }, {
    "id": 43,
    "text": "",
    "type": "n/a"
  }, {
    "id": 44,
    "text": "",
    "type": "local variable"
  }, {
    "id": 45,
    "text": "",
    "type": "n/a"
  }, {
    "id": 46,
    "text": "",
    "type": "local variable"
  }, {
    "id": 47,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 48,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 49,
    "text": "",
    "type": "function"
  }, {
    "id": 50,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 51,
    "text": "",
    "type": "function"
  }, {
    "id": 52,
    "text": "",
    "type": "local variable"
  }, {
    "id": 53,
    "text": "",
    "type": "n/a"
  }, {
    "id": 54,
    "text": "",
    "type": "local variable"
  }, {
    "id": 55,
    "text": "",
    "type": "local variable"
  }, {
    "id": 56,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 57,
    "text": "",
    "type": "interface container"
  }, {
    "id": 58,
    "text": "",
    "type": "interface"
  }, {
    "id": 59,
    "text": "",
    "type": "local variable"
  }, {
    "id": 60,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 61,
    "text": "",
    "type": "interface"
  }, {
    "id": 62,
    "text": "",
    "type": "local variable"
  }, {
    "id": 63,
    "text": "",
    "type": "interface"
  }, {
    "id": 64,
    "text": "",
    "type": "local variable"
  }, {
    "id": 65,
    "text": "",
    "type": "interface"
  } ]
}