{
  "_filename": "aes.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/ZipWriter/lua/ZipWriter/encrypt/aes.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 8
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 13,
    "label": "has",
    "to": 5
  }, {
    "from": 13,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 5
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 5
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 24
  }, {
    "from": 24,
    "label": "has",
    "to": 25
  }, {
    "from": 24,
    "label": "has",
    "to": 26
  }, {
    "from": 24,
    "label": "has",
    "to": 27
  }, {
    "from": 24,
    "label": "has",
    "to": 28
  }, {
    "from": 22,
    "label": "has",
    "to": 20
  }, {
    "from": 22,
    "label": "has",
    "to": 29
  }, {
    "from": 22,
    "label": "has",
    "to": 30
  }, {
    "from": 22,
    "label": "has",
    "to": 31
  }, {
    "from": 22,
    "label": "has",
    "to": 32
  }, {
    "from": 22,
    "label": "has",
    "to": 33
  }, {
    "from": 22,
    "label": "has",
    "to": 34
  }, {
    "from": 22,
    "label": "has",
    "to": 5
  }, {
    "from": 22,
    "label": "has",
    "to": 35
  }, {
    "from": 36,
    "label": "has",
    "to": 5
  }, {
    "from": 36,
    "label": "has",
    "to": 37
  }, {
    "from": 38,
    "label": "has",
    "to": 5
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 5
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 42,
    "label": "has",
    "to": 44
  }, {
    "from": 42,
    "label": "has",
    "to": 45
  }, {
    "from": 42,
    "label": "has",
    "to": 46
  }, {
    "from": 42,
    "label": "has",
    "to": 47
  }, {
    "from": 42,
    "label": "has",
    "to": 48
  }, {
    "from": 42,
    "label": "has",
    "to": 49
  }, {
    "from": 42,
    "label": "has",
    "to": 50
  }, {
    "from": 42,
    "label": "has",
    "to": 51
  }, {
    "from": 42,
    "label": "has",
    "to": 5
  }, {
    "from": 42,
    "label": "has",
    "to": 5
  }, {
    "from": 42,
    "label": "has",
    "to": 52
  }, {
    "from": 42,
    "label": "has",
    "to": 53
  }, {
    "from": 42,
    "label": "has",
    "to": 54
  }, {
    "from": 42,
    "label": "has",
    "to": 55
  }, {
    "from": 42,
    "label": "has",
    "to": 5
  }, {
    "from": 42,
    "label": "has",
    "to": 56
  }, {
    "from": 57,
    "label": "has",
    "to": 5
  }, {
    "from": 57,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 59,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 5
  }, {
    "from": 63,
    "label": "has",
    "to": 52
  }, {
    "from": 64,
    "label": "has",
    "to": 53
  }, {
    "from": 64,
    "label": "has",
    "to": 54
  }, {
    "from": 64,
    "label": "has",
    "to": 55
  }, {
    "from": 64,
    "label": "has",
    "to": 5
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "calls",
    "to": 69
  }, {
    "from": 66,
    "label": "calls",
    "to": 69
  }, {
    "from": 66,
    "label": "calls",
    "to": 70
  }, {
    "from": 17,
    "label": "calls",
    "to": 70
  }, {
    "from": 19,
    "label": "calls",
    "to": 70
  }, {
    "from": 19,
    "label": "calls",
    "to": 70
  }, {
    "from": 42,
    "label": "calls",
    "to": 70
  }, {
    "from": 66,
    "label": "calls",
    "to": 73
  }, {
    "from": 66,
    "label": "calls",
    "to": 71
  }, {
    "from": 66,
    "label": "calls",
    "to": 76
  }, {
    "from": 42,
    "label": "calls",
    "to": 78
  }, {
    "from": 66,
    "label": "calls",
    "to": 2
  }, {
    "from": 66,
    "label": "calls",
    "to": 2
  }, {
    "from": 66,
    "label": "calls",
    "to": 2
  }, {
    "from": 66,
    "label": "calls",
    "to": 2
  }, {
    "from": 66,
    "label": "calls",
    "to": 74
  }, {
    "from": 66,
    "label": "calls",
    "to": 79
  }, {
    "from": 66,
    "label": "calls",
    "to": 79
  }, {
    "from": 2,
    "label": "calls",
    "to": 72
  }, {
    "from": 19,
    "label": "calls",
    "to": 80
  }, {
    "from": 19,
    "label": "calls",
    "to": 80
  }, {
    "from": 66,
    "label": "calls",
    "to": 67
  }, {
    "from": 66,
    "label": "calls",
    "to": 67
  }, {
    "from": 42,
    "label": "calls",
    "to": 7
  }, {
    "from": 19,
    "label": "calls",
    "to": 77
  }, {
    "from": 42,
    "label": "calls",
    "to": 17
  }, {
    "from": 66,
    "label": "calls",
    "to": 68
  }, {
    "from": 66,
    "label": "calls",
    "to": 68
  }, {
    "from": 59,
    "label": "calls",
    "to": 75
  }, {
    "from": 1,
    "label": "contains",
    "to": 66
  }, {
    "from": 66,
    "label": "declares",
    "to": 2
  }, {
    "from": 66,
    "label": "declares",
    "to": 7
  }, {
    "from": 66,
    "label": "declares",
    "to": 13
  }, {
    "from": 66,
    "label": "declares",
    "to": 17
  }, {
    "from": 66,
    "label": "declares",
    "to": 19
  }, {
    "from": 66,
    "label": "declares",
    "to": 22
  }, {
    "from": 66,
    "label": "declares",
    "to": 36
  }, {
    "from": 66,
    "label": "declares",
    "to": 38
  }, {
    "from": 66,
    "label": "declares",
    "to": 40
  }, {
    "from": 66,
    "label": "declares",
    "to": 42
  }, {
    "from": 66,
    "label": "declares",
    "to": 57
  }, {
    "from": 66,
    "label": "declares",
    "to": 59
  }, {
    "from": 66,
    "label": "declares",
    "to": 62
  }, {
    "from": 66,
    "label": "declares",
    "to": 63
  }, {
    "from": 66,
    "label": "declares",
    "to": 64
  }, {
    "from": 1,
    "label": "contains",
    "to": 81
  }, {
    "from": 1,
    "label": "contains",
    "to": 82
  }, {
    "from": 81,
    "label": "initializes",
    "to": 83
  }, {
    "from": 83,
    "label": "assigns",
    "to": 84
  }, {
    "from": 81,
    "label": "initializes",
    "to": 85
  }, {
    "from": 81,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 87,
    "label": "assigns",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 87,
    "label": "assigns",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 81,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 93,
    "label": "assigns",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 93,
    "label": "assigns",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 93,
    "label": "assigns",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 81,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 101,
    "label": "assigns",
    "to": 103
  }, {
    "from": 101,
    "label": "assigns",
    "to": 104
  }, {
    "from": 81,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 81,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 108,
    "label": "assigns",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 108,
    "label": "assigns",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 81,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 81,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "assigns",
    "to": 118
  }, {
    "from": 81,
    "label": "initializes",
    "to": 119
  }, {
    "from": 119,
    "label": "assigns",
    "to": 120
  }, {
    "from": 81,
    "label": "initializes",
    "to": 121
  }, {
    "from": 121,
    "label": "assigns",
    "to": 122
  }, {
    "from": 1,
    "label": "provides",
    "to": 123
  }, {
    "from": 115,
    "label": "represents",
    "to": 124
  }, {
    "from": 123,
    "label": "provides",
    "to": 124
  }, {
    "from": 115,
    "label": "contains",
    "to": 57
  }, {
    "from": 115,
    "label": "contains",
    "to": 59
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "aes",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function prequire(m) \r\n  local ok, err = pcall(require, m) \r\n  if not ok then return nil, err end\r\n  return err\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local ok, err = pcall(require, m)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "function (n)\r\n      local t = {}\r\n      local r = random.new(os.time())\r\n      for i = 1, n do table.insert(t, string.char(r(255))) end\r\n      return table.concat(t)\r\n    end",
    "type": "function"
  }, {
    "id": 8,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "local r = random.new(os.time())",
    "type": "statement:localassign"
  }, {
    "id": 10,
    "text": "for i = 1, n do table.insert(t, string.char(r(255))) end",
    "type": "statement:numericfor"
  }, {
    "id": 11,
    "text": "table.insert(t, string.char(r(255)))",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 13,
    "text": "function (n)\r\n    local t = {}\r\n    for i = 1, n do table.insert(t, string.char(random(256)-1)) end\r\n    return table.concat(t)\r\n  end",
    "type": "function"
  }, {
    "id": 14,
    "text": "for i = 1, n do table.insert(t, string.char(random(256)-1)) end",
    "type": "statement:numericfor"
  }, {
    "id": 15,
    "text": "table.insert(t, string.char(random(256)-1))",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function slat_length(mode)\r\n  return assert(SLAT_LENGTH[mode])\r\nend",
    "type": "function"
  }, {
    "id": 18,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 19,
    "text": "function AesEncrypt:new()\r\n  local o = setmetatable({}, self)\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "local o = setmetatable({}, self)",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 22,
    "text": "function AesEncrypt:new(password, mode)\r\n  local salt, version\r\n  if type(password) == 'table' then\r\n    version  = password.version\r\n    salt     = password.salt\r\n    mode     = password.mode\r\n    password = password.password\r\n  end\r\n\r\n  local o = setmetatable({}, self)\r\n  o._mode     = mode    or AES_MODE.AES256\r\n  o._version  = version or AES_VERSION.AE2\r\n  o._password = password\r\n  o._salt     = salt\r\n\r\n  assert( ZIP_AES_MODES[o._mode] )\r\n  assert( (o._version == AES_VERSION.AE1) or (o._version == AES_VERSION.AE2) )\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 23,
    "text": "local salt, version",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "if type(password) == 'table' then\r\n    version  = password.version\r\n    salt     = password.salt\r\n    mode     = password.mode\r\n    password = password.password\r\n  end",
    "type": "statement:if"
  }, {
    "id": 25,
    "text": "version  = password.version",
    "type": "statement:assign"
  }, {
    "id": 26,
    "text": "salt     = password.salt",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "mode     = password.mode",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "password = password.password",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "o._mode     = mode    or AES_MODE.AES256",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "o._version  = version or AES_VERSION.AE2",
    "type": "statement:assign"
  }, {
    "id": 31,
    "text": "o._password = password",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "o._salt     = salt",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "assert( ZIP_AES_MODES[o._mode] )",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "assert( (o._version == AES_VERSION.AE1) or (o._version == AES_VERSION.AE2) )",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 36,
    "text": "function AesEncrypt:type()\r\n  return 'aes'\r\nend",
    "type": "function"
  }, {
    "id": 37,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 38,
    "text": "function AesEncrypt:version()\r\n  return self._version\r\nend",
    "type": "function"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function AesEncrypt:mode()\r\n  return self._mode\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function AesEncrypt:stream(stream, fileDesc)\r\n  -- output stream format:\r\n  -- <SALT><Password verification value><Encrypted data><Authentication code>\r\n\r\n  local mode = self:mode()\r\n  local pwd  = assert(self._password or fileDesc.password, 'no password')\r\n  local salt = fileDesc.salt or self._salt or rand_bytes(slat_length(mode))\r\n\r\n  local fenc  = AesFileEncrypt.new()\r\n  fenc:set_writer(stream)\r\n  local pwd_ver salt, pwd_ver = fenc:open(mode, pwd, salt)\r\n\r\n  stream:write(salt) stream:write(pwd_ver)\r\n  return {\r\n    seekable = function() return false end;\r\n\r\n    write    = function(self, chunk) fenc:encrypt(chunk) end;\r\n\r\n    close    = function(self)\r\n      local mac = fenc:close()\r\n      stream:write(mac)\r\n      fenc:destroy()\r\n      return stream:close()\r\n    end;\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 43,
    "text": "local mode = self:mode()",
    "type": "statement:localassign"
  }, {
    "id": 44,
    "text": "local pwd  = assert(self._password or fileDesc.password, 'no password')",
    "type": "statement:localassign"
  }, {
    "id": 45,
    "text": "local salt = fileDesc.salt or self._salt or rand_bytes(slat_length(mode))",
    "type": "statement:localassign"
  }, {
    "id": 46,
    "text": "local fenc  = AesFileEncrypt.new()",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "fenc:set_writer(stream)",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "local pwd_ver",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "salt, pwd_ver = fenc:open(mode, pwd, salt)",
    "type": "statement:assign"
  }, {
    "id": 50,
    "text": "stream:write(salt)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "stream:write(pwd_ver)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "fenc:encrypt(chunk)",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "local mac = fenc:close()",
    "type": "statement:localassign"
  }, {
    "id": 54,
    "text": "stream:write(mac)",
    "type": "statement:functioncall"
  }, {
    "id": 55,
    "text": "fenc:destroy()",
    "type": "statement:functioncall"
  }, {
    "id": 56,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 57,
    "text": "function _M.new(...)\r\n  return AesEncrypt:new(...)\r\nend",
    "type": "function"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "function _M.self_test()\r\n  AesFileEncrypt.self_test()\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "AesFileEncrypt.self_test()",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function() return false end",
    "type": "function"
  }, {
    "id": 63,
    "text": "function(self, chunk) fenc:encrypt(chunk) end",
    "type": "function"
  }, {
    "id": 64,
    "text": "function(self)\r\n      local mac = fenc:close()\r\n      stream:write(mac)\r\n      fenc:destroy()\r\n      return stream:close()\r\n    end",
    "type": "function"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "",
    "type": "function container"
  }, {
    "id": 67,
    "text": "char",
    "type": "global function"
  }, {
    "id": 68,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 69,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 70,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 71,
    "text": "r",
    "type": "global function"
  }, {
    "id": 72,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 73,
    "text": "new",
    "type": "global function"
  }, {
    "id": 74,
    "text": "random",
    "type": "global function"
  }, {
    "id": 75,
    "text": "self_test",
    "type": "global function"
  }, {
    "id": 76,
    "text": "randomseed",
    "type": "global function"
  }, {
    "id": 77,
    "text": "type",
    "type": "global function"
  }, {
    "id": 78,
    "text": "new",
    "type": "global function"
  }, {
    "id": 79,
    "text": "time",
    "type": "global function"
  }, {
    "id": 80,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 81,
    "text": "",
    "type": "variable container"
  }, {
    "id": 82,
    "text": "",
    "type": "require container"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "n/a"
  }, {
    "id": 85,
    "text": "",
    "type": "local variable"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 88,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 89,
    "text": "",
    "type": "number"
  }, {
    "id": 90,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 91,
    "text": "",
    "type": "number"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 94,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 95,
    "text": "",
    "type": "number"
  }, {
    "id": 96,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 97,
    "text": "",
    "type": "number"
  }, {
    "id": 98,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 99,
    "text": "",
    "type": "number"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 102,
    "text": "",
    "type": "number"
  }, {
    "id": 103,
    "text": "",
    "type": "number"
  }, {
    "id": 104,
    "text": "",
    "type": "number"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 109,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 110,
    "text": "",
    "type": "number"
  }, {
    "id": 111,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 112,
    "text": "",
    "type": "number"
  }, {
    "id": 113,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 114,
    "text": "",
    "type": "number"
  }, {
    "id": 115,
    "text": "",
    "type": "local variable"
  }, {
    "id": 116,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 117,
    "text": "",
    "type": "global variable"
  }, {
    "id": 118,
    "text": "",
    "type": "n/a"
  }, {
    "id": 119,
    "text": "",
    "type": "global variable"
  }, {
    "id": 120,
    "text": "",
    "type": "n/a"
  }, {
    "id": 121,
    "text": "",
    "type": "global variable"
  }, {
    "id": 122,
    "text": "",
    "type": "n/a"
  }, {
    "id": 123,
    "text": "",
    "type": "interface container"
  }, {
    "id": 124,
    "text": "",
    "type": "interface"
  } ]
}