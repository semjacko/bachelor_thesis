{
  "_filename": "test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/ZipWriter/test/test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 5,
    "label": "has",
    "to": 6
  }, {
    "from": 5,
    "label": "has",
    "to": 7
  }, {
    "from": 5,
    "label": "has",
    "to": 8
  }, {
    "from": 5,
    "label": "has",
    "to": 9
  }, {
    "from": 5,
    "label": "has",
    "to": 10
  }, {
    "from": 5,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 19
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 19
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 30,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 30,
    "label": "has",
    "to": 35
  }, {
    "from": 30,
    "label": "has",
    "to": 36
  }, {
    "from": 30,
    "label": "has",
    "to": 37
  }, {
    "from": 30,
    "label": "has",
    "to": 38
  }, {
    "from": 30,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 46,
    "label": "has",
    "to": 19
  }, {
    "from": 46,
    "label": "has",
    "to": 47
  }, {
    "from": 46,
    "label": "has",
    "to": 48
  }, {
    "from": 46,
    "label": "has",
    "to": 49
  }, {
    "from": 46,
    "label": "has",
    "to": 50
  }, {
    "from": 46,
    "label": "has",
    "to": 51
  }, {
    "from": 46,
    "label": "has",
    "to": 52
  }, {
    "from": 46,
    "label": "has",
    "to": 53
  }, {
    "from": 46,
    "label": "has",
    "to": 54
  }, {
    "from": 55,
    "label": "has",
    "to": 19
  }, {
    "from": 55,
    "label": "has",
    "to": 47
  }, {
    "from": 55,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 19
  }, {
    "from": 56,
    "label": "has",
    "to": 19
  }, {
    "from": 55,
    "label": "has",
    "to": 48
  }, {
    "from": 55,
    "label": "has",
    "to": 49
  }, {
    "from": 55,
    "label": "has",
    "to": 60
  }, {
    "from": 55,
    "label": "has",
    "to": 51
  }, {
    "from": 55,
    "label": "has",
    "to": 52
  }, {
    "from": 55,
    "label": "has",
    "to": 53
  }, {
    "from": 55,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 57
  }, {
    "from": 62,
    "label": "has",
    "to": 58
  }, {
    "from": 62,
    "label": "has",
    "to": 59
  }, {
    "from": 62,
    "label": "has",
    "to": 19
  }, {
    "from": 62,
    "label": "has",
    "to": 19
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 47
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 64,
    "label": "has",
    "to": 49
  }, {
    "from": 64,
    "label": "has",
    "to": 66
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 66,
    "label": "has",
    "to": 68
  }, {
    "from": 66,
    "label": "has",
    "to": 19
  }, {
    "from": 66,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 66,
    "label": "has",
    "to": 19
  }, {
    "from": 66,
    "label": "has",
    "to": 72
  }, {
    "from": 64,
    "label": "has",
    "to": 73
  }, {
    "from": 64,
    "label": "has",
    "to": 74
  }, {
    "from": 64,
    "label": "has",
    "to": 75
  }, {
    "from": 76,
    "label": "has",
    "to": 67
  }, {
    "from": 76,
    "label": "has",
    "to": 68
  }, {
    "from": 76,
    "label": "has",
    "to": 19
  }, {
    "from": 76,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 76,
    "label": "has",
    "to": 19
  }, {
    "from": 76,
    "label": "has",
    "to": 72
  }, {
    "from": 76,
    "label": "has",
    "to": 77
  }, {
    "from": 78,
    "label": "has",
    "to": 47
  }, {
    "from": 78,
    "label": "has",
    "to": 65
  }, {
    "from": 78,
    "label": "has",
    "to": 49
  }, {
    "from": 78,
    "label": "has",
    "to": 79
  }, {
    "from": 78,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 19
  }, {
    "from": 78,
    "label": "has",
    "to": 81
  }, {
    "from": 78,
    "label": "has",
    "to": 82
  }, {
    "from": 78,
    "label": "has",
    "to": 74
  }, {
    "from": 78,
    "label": "has",
    "to": 83
  }, {
    "from": 84,
    "label": "has",
    "to": 19
  }, {
    "from": 84,
    "label": "has",
    "to": 85
  }, {
    "from": 86,
    "label": "has",
    "to": 19
  }, {
    "from": 86,
    "label": "has",
    "to": 47
  }, {
    "from": 86,
    "label": "has",
    "to": 48
  }, {
    "from": 86,
    "label": "has",
    "to": 49
  }, {
    "from": 86,
    "label": "has",
    "to": 87
  }, {
    "from": 86,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 86,
    "label": "has",
    "to": 90
  }, {
    "from": 86,
    "label": "has",
    "to": 51
  }, {
    "from": 86,
    "label": "has",
    "to": 52
  }, {
    "from": 86,
    "label": "has",
    "to": 53
  }, {
    "from": 86,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 19
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 19
  }, {
    "from": 56,
    "label": "has",
    "to": 19
  }, {
    "from": 92,
    "label": "has",
    "to": 48
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 92,
    "label": "has",
    "to": 49
  }, {
    "from": 92,
    "label": "has",
    "to": 60
  }, {
    "from": 92,
    "label": "has",
    "to": 51
  }, {
    "from": 92,
    "label": "has",
    "to": 100
  }, {
    "from": 92,
    "label": "has",
    "to": 101
  }, {
    "from": 92,
    "label": "has",
    "to": 53
  }, {
    "from": 92,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 57
  }, {
    "from": 103,
    "label": "has",
    "to": 58
  }, {
    "from": 103,
    "label": "has",
    "to": 59
  }, {
    "from": 103,
    "label": "has",
    "to": 19
  }, {
    "from": 103,
    "label": "has",
    "to": 19
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 105,
    "label": "has",
    "to": 41
  }, {
    "from": 105,
    "label": "has",
    "to": 106
  }, {
    "from": 107,
    "label": "has",
    "to": 44
  }, {
    "from": 107,
    "label": "has",
    "to": 108
  }, {
    "from": 109,
    "label": "has",
    "to": 19
  }, {
    "from": 109,
    "label": "has",
    "to": 47
  }, {
    "from": 109,
    "label": "has",
    "to": 110
  }, {
    "from": 109,
    "label": "has",
    "to": 49
  }, {
    "from": 109,
    "label": "has",
    "to": 50
  }, {
    "from": 109,
    "label": "has",
    "to": 51
  }, {
    "from": 109,
    "label": "has",
    "to": 52
  }, {
    "from": 109,
    "label": "has",
    "to": 53
  }, {
    "from": 109,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 41
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 44
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 116,
    "label": "has",
    "to": 19
  }, {
    "from": 116,
    "label": "has",
    "to": 47
  }, {
    "from": 116,
    "label": "has",
    "to": 117
  }, {
    "from": 116,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 116,
    "label": "has",
    "to": 50
  }, {
    "from": 116,
    "label": "has",
    "to": 51
  }, {
    "from": 116,
    "label": "has",
    "to": 52
  }, {
    "from": 116,
    "label": "has",
    "to": 53
  }, {
    "from": 116,
    "label": "has",
    "to": 121
  }, {
    "from": 122,
    "label": "has",
    "to": 41
  }, {
    "from": 122,
    "label": "has",
    "to": 123
  }, {
    "from": 124,
    "label": "has",
    "to": 44
  }, {
    "from": 124,
    "label": "has",
    "to": 125
  }, {
    "from": 124,
    "label": "has",
    "to": 126
  }, {
    "from": 127,
    "label": "has",
    "to": 19
  }, {
    "from": 127,
    "label": "has",
    "to": 47
  }, {
    "from": 127,
    "label": "has",
    "to": 128
  }, {
    "from": 127,
    "label": "has",
    "to": 49
  }, {
    "from": 127,
    "label": "has",
    "to": 50
  }, {
    "from": 127,
    "label": "has",
    "to": 51
  }, {
    "from": 127,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 52
  }, {
    "from": 129,
    "label": "has",
    "to": 53
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 127,
    "label": "has",
    "to": 132
  }, {
    "from": 133,
    "label": "has",
    "to": 134
  }, {
    "from": 133,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 47
  }, {
    "from": 136,
    "label": "has",
    "to": 48
  }, {
    "from": 136,
    "label": "has",
    "to": 49
  }, {
    "from": 136,
    "label": "has",
    "to": 50
  }, {
    "from": 136,
    "label": "has",
    "to": 51
  }, {
    "from": 136,
    "label": "has",
    "to": 52
  }, {
    "from": 136,
    "label": "has",
    "to": 53
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 47
  }, {
    "from": 138,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 19
  }, {
    "from": 56,
    "label": "has",
    "to": 19
  }, {
    "from": 138,
    "label": "has",
    "to": 48
  }, {
    "from": 138,
    "label": "has",
    "to": 49
  }, {
    "from": 138,
    "label": "has",
    "to": 60
  }, {
    "from": 138,
    "label": "has",
    "to": 51
  }, {
    "from": 138,
    "label": "has",
    "to": 52
  }, {
    "from": 138,
    "label": "has",
    "to": 53
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 140,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 69,
    "label": "has",
    "to": 71
  }, {
    "from": 140,
    "label": "has",
    "to": 19
  }, {
    "from": 140,
    "label": "has",
    "to": 72
  }, {
    "from": 140,
    "label": "has",
    "to": 141
  }, {
    "from": 142,
    "label": "has",
    "to": 47
  }, {
    "from": 142,
    "label": "has",
    "to": 48
  }, {
    "from": 142,
    "label": "has",
    "to": 49
  }, {
    "from": 142,
    "label": "has",
    "to": 87
  }, {
    "from": 142,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 142,
    "label": "has",
    "to": 90
  }, {
    "from": 142,
    "label": "has",
    "to": 51
  }, {
    "from": 142,
    "label": "has",
    "to": 52
  }, {
    "from": 142,
    "label": "has",
    "to": 53
  }, {
    "from": 142,
    "label": "has",
    "to": 143
  }, {
    "from": 144,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 144,
    "label": "has",
    "to": 145
  }, {
    "from": 146,
    "label": "has",
    "to": 93
  }, {
    "from": 146,
    "label": "has",
    "to": 56
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 56,
    "label": "has",
    "to": 58
  }, {
    "from": 56,
    "label": "has",
    "to": 59
  }, {
    "from": 56,
    "label": "has",
    "to": 19
  }, {
    "from": 56,
    "label": "has",
    "to": 19
  }, {
    "from": 146,
    "label": "has",
    "to": 48
  }, {
    "from": 146,
    "label": "has",
    "to": 94
  }, {
    "from": 146,
    "label": "has",
    "to": 95
  }, {
    "from": 95,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 96,
    "label": "has",
    "to": 98
  }, {
    "from": 96,
    "label": "has",
    "to": 99
  }, {
    "from": 146,
    "label": "has",
    "to": 49
  }, {
    "from": 146,
    "label": "has",
    "to": 60
  }, {
    "from": 146,
    "label": "has",
    "to": 51
  }, {
    "from": 146,
    "label": "has",
    "to": 100
  }, {
    "from": 146,
    "label": "has",
    "to": 101
  }, {
    "from": 146,
    "label": "has",
    "to": 53
  }, {
    "from": 146,
    "label": "has",
    "to": 147
  }, {
    "from": 148,
    "label": "has",
    "to": 47
  }, {
    "from": 148,
    "label": "has",
    "to": 110
  }, {
    "from": 148,
    "label": "has",
    "to": 49
  }, {
    "from": 148,
    "label": "has",
    "to": 50
  }, {
    "from": 148,
    "label": "has",
    "to": 51
  }, {
    "from": 148,
    "label": "has",
    "to": 52
  }, {
    "from": 148,
    "label": "has",
    "to": 53
  }, {
    "from": 148,
    "label": "has",
    "to": 149
  }, {
    "from": 150,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 151,
    "label": "has",
    "to": 47
  }, {
    "from": 151,
    "label": "has",
    "to": 117
  }, {
    "from": 151,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 151,
    "label": "has",
    "to": 50
  }, {
    "from": 151,
    "label": "has",
    "to": 51
  }, {
    "from": 151,
    "label": "has",
    "to": 52
  }, {
    "from": 151,
    "label": "has",
    "to": 53
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 47
  }, {
    "from": 153,
    "label": "has",
    "to": 128
  }, {
    "from": 153,
    "label": "has",
    "to": 49
  }, {
    "from": 153,
    "label": "has",
    "to": 50
  }, {
    "from": 153,
    "label": "has",
    "to": 51
  }, {
    "from": 153,
    "label": "has",
    "to": 129
  }, {
    "from": 129,
    "label": "has",
    "to": 52
  }, {
    "from": 129,
    "label": "has",
    "to": 53
  }, {
    "from": 129,
    "label": "has",
    "to": 130
  }, {
    "from": 129,
    "label": "has",
    "to": 131
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 46,
    "label": "calls",
    "to": 166
  }, {
    "from": 30,
    "label": "calls",
    "to": 167
  }, {
    "from": 5,
    "label": "calls",
    "to": 168
  }, {
    "from": 12,
    "label": "calls",
    "to": 168
  }, {
    "from": 12,
    "label": "calls",
    "to": 168
  }, {
    "from": 46,
    "label": "calls",
    "to": 168
  }, {
    "from": 30,
    "label": "calls",
    "to": 169
  }, {
    "from": 30,
    "label": "calls",
    "to": 183
  }, {
    "from": 30,
    "label": "calls",
    "to": 183
  }, {
    "from": 30,
    "label": "calls",
    "to": 183
  }, {
    "from": 30,
    "label": "calls",
    "to": 183
  }, {
    "from": 30,
    "label": "calls",
    "to": 183
  }, {
    "from": 30,
    "label": "calls",
    "to": 183
  }, {
    "from": 46,
    "label": "calls",
    "to": 183
  }, {
    "from": 46,
    "label": "calls",
    "to": 183
  }, {
    "from": 76,
    "label": "calls",
    "to": 183
  }, {
    "from": 64,
    "label": "calls",
    "to": 183
  }, {
    "from": 78,
    "label": "calls",
    "to": 183
  }, {
    "from": 78,
    "label": "calls",
    "to": 183
  }, {
    "from": 46,
    "label": "calls",
    "to": 183
  }, {
    "from": 46,
    "label": "calls",
    "to": 183
  }, {
    "from": 46,
    "label": "calls",
    "to": 183
  }, {
    "from": 46,
    "label": "calls",
    "to": 183
  }, {
    "from": 46,
    "label": "calls",
    "to": 183
  }, {
    "from": 76,
    "label": "calls",
    "to": 175
  }, {
    "from": 78,
    "label": "calls",
    "to": 175
  }, {
    "from": 155,
    "label": "calls",
    "to": 176
  }, {
    "from": 46,
    "label": "calls",
    "to": 177
  }, {
    "from": 46,
    "label": "calls",
    "to": 177
  }, {
    "from": 5,
    "label": "calls",
    "to": 171
  }, {
    "from": 12,
    "label": "calls",
    "to": 171
  }, {
    "from": 46,
    "label": "calls",
    "to": 182
  }, {
    "from": 155,
    "label": "calls",
    "to": 172
  }, {
    "from": 21,
    "label": "calls",
    "to": 172
  }, {
    "from": 25,
    "label": "calls",
    "to": 158
  }, {
    "from": 155,
    "label": "calls",
    "to": 181
  }, {
    "from": 155,
    "label": "calls",
    "to": 181
  }, {
    "from": 155,
    "label": "calls",
    "to": 181
  }, {
    "from": 155,
    "label": "calls",
    "to": 181
  }, {
    "from": 155,
    "label": "calls",
    "to": 181
  }, {
    "from": 155,
    "label": "calls",
    "to": 181
  }, {
    "from": 155,
    "label": "calls",
    "to": 181
  }, {
    "from": 155,
    "label": "calls",
    "to": 181
  }, {
    "from": 155,
    "label": "calls",
    "to": 181
  }, {
    "from": 155,
    "label": "calls",
    "to": 181
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 155,
    "label": "calls",
    "to": 46
  }, {
    "from": 64,
    "label": "calls",
    "to": 76
  }, {
    "from": 12,
    "label": "calls",
    "to": 162
  }, {
    "from": 46,
    "label": "calls",
    "to": 162
  }, {
    "from": 46,
    "label": "calls",
    "to": 162
  }, {
    "from": 46,
    "label": "calls",
    "to": 162
  }, {
    "from": 46,
    "label": "calls",
    "to": 162
  }, {
    "from": 46,
    "label": "calls",
    "to": 162
  }, {
    "from": 46,
    "label": "calls",
    "to": 162
  }, {
    "from": 46,
    "label": "calls",
    "to": 162
  }, {
    "from": 64,
    "label": "calls",
    "to": 180
  }, {
    "from": 46,
    "label": "calls",
    "to": 180
  }, {
    "from": 46,
    "label": "calls",
    "to": 180
  }, {
    "from": 5,
    "label": "calls",
    "to": 184
  }, {
    "from": 12,
    "label": "calls",
    "to": 184
  }, {
    "from": 155,
    "label": "calls",
    "to": 173
  }, {
    "from": 155,
    "label": "calls",
    "to": 173
  }, {
    "from": 30,
    "label": "calls",
    "to": 173
  }, {
    "from": 46,
    "label": "calls",
    "to": 62
  }, {
    "from": 46,
    "label": "calls",
    "to": 185
  }, {
    "from": 46,
    "label": "calls",
    "to": 164
  }, {
    "from": 46,
    "label": "calls",
    "to": 164
  }, {
    "from": 5,
    "label": "calls",
    "to": 165
  }, {
    "from": 12,
    "label": "calls",
    "to": 165
  }, {
    "from": 46,
    "label": "calls",
    "to": 174
  }, {
    "from": 155,
    "label": "calls",
    "to": 21
  }, {
    "from": 155,
    "label": "calls",
    "to": 21
  }, {
    "from": 46,
    "label": "calls",
    "to": 160
  }, {
    "from": 133,
    "label": "calls",
    "to": 179
  }, {
    "from": 46,
    "label": "calls",
    "to": 4
  }, {
    "from": 46,
    "label": "calls",
    "to": 4
  }, {
    "from": 64,
    "label": "calls",
    "to": 4
  }, {
    "from": 78,
    "label": "calls",
    "to": 4
  }, {
    "from": 46,
    "label": "calls",
    "to": 4
  }, {
    "from": 46,
    "label": "calls",
    "to": 4
  }, {
    "from": 46,
    "label": "calls",
    "to": 4
  }, {
    "from": 46,
    "label": "calls",
    "to": 4
  }, {
    "from": 46,
    "label": "calls",
    "to": 4
  }, {
    "from": 46,
    "label": "calls",
    "to": 159
  }, {
    "from": 46,
    "label": "calls",
    "to": 163
  }, {
    "from": 43,
    "label": "calls",
    "to": 178
  }, {
    "from": 46,
    "label": "calls",
    "to": 25
  }, {
    "from": 155,
    "label": "calls",
    "to": 186
  }, {
    "from": 155,
    "label": "calls",
    "to": 186
  }, {
    "from": 155,
    "label": "calls",
    "to": 187
  }, {
    "from": 155,
    "label": "calls",
    "to": 187
  }, {
    "from": 155,
    "label": "calls",
    "to": 187
  }, {
    "from": 155,
    "label": "calls",
    "to": 187
  }, {
    "from": 155,
    "label": "calls",
    "to": 187
  }, {
    "from": 46,
    "label": "calls",
    "to": 170
  }, {
    "from": 46,
    "label": "calls",
    "to": 170
  }, {
    "from": 46,
    "label": "calls",
    "to": 170
  }, {
    "from": 46,
    "label": "calls",
    "to": 170
  }, {
    "from": 46,
    "label": "calls",
    "to": 170
  }, {
    "from": 46,
    "label": "calls",
    "to": 170
  }, {
    "from": 46,
    "label": "calls",
    "to": 170
  }, {
    "from": 155,
    "label": "calls",
    "to": 157
  }, {
    "from": 2,
    "label": "contains",
    "to": 155
  }, {
    "from": 155,
    "label": "declares",
    "to": 5
  }, {
    "from": 155,
    "label": "declares",
    "to": 12
  }, {
    "from": 155,
    "label": "declares",
    "to": 21
  }, {
    "from": 155,
    "label": "declares",
    "to": 25
  }, {
    "from": 155,
    "label": "declares",
    "to": 30
  }, {
    "from": 155,
    "label": "declares",
    "to": 40
  }, {
    "from": 155,
    "label": "declares",
    "to": 43
  }, {
    "from": 155,
    "label": "declares",
    "to": 46
  }, {
    "from": 155,
    "label": "declares",
    "to": 55
  }, {
    "from": 155,
    "label": "declares",
    "to": 62
  }, {
    "from": 155,
    "label": "declares",
    "to": 64
  }, {
    "from": 155,
    "label": "declares",
    "to": 76
  }, {
    "from": 155,
    "label": "declares",
    "to": 78
  }, {
    "from": 155,
    "label": "declares",
    "to": 84
  }, {
    "from": 155,
    "label": "declares",
    "to": 86
  }, {
    "from": 155,
    "label": "declares",
    "to": 92
  }, {
    "from": 155,
    "label": "declares",
    "to": 103
  }, {
    "from": 155,
    "label": "declares",
    "to": 105
  }, {
    "from": 155,
    "label": "declares",
    "to": 107
  }, {
    "from": 155,
    "label": "declares",
    "to": 109
  }, {
    "from": 155,
    "label": "declares",
    "to": 112
  }, {
    "from": 155,
    "label": "declares",
    "to": 114
  }, {
    "from": 155,
    "label": "declares",
    "to": 116
  }, {
    "from": 155,
    "label": "declares",
    "to": 122
  }, {
    "from": 155,
    "label": "declares",
    "to": 124
  }, {
    "from": 155,
    "label": "declares",
    "to": 127
  }, {
    "from": 155,
    "label": "declares",
    "to": 133
  }, {
    "from": 155,
    "label": "declares",
    "to": 136
  }, {
    "from": 155,
    "label": "declares",
    "to": 138
  }, {
    "from": 155,
    "label": "declares",
    "to": 140
  }, {
    "from": 155,
    "label": "declares",
    "to": 142
  }, {
    "from": 155,
    "label": "declares",
    "to": 144
  }, {
    "from": 155,
    "label": "declares",
    "to": 146
  }, {
    "from": 155,
    "label": "declares",
    "to": 148
  }, {
    "from": 155,
    "label": "declares",
    "to": 150
  }, {
    "from": 155,
    "label": "declares",
    "to": 151
  }, {
    "from": 155,
    "label": "declares",
    "to": 153
  }, {
    "from": 2,
    "label": "contains",
    "to": 188
  }, {
    "from": 2,
    "label": "contains",
    "to": 189
  }, {
    "from": 188,
    "label": "initializes",
    "to": 190
  }, {
    "from": 190,
    "label": "assigns",
    "to": 191
  }, {
    "from": 188,
    "label": "initializes",
    "to": 192
  }, {
    "from": 192,
    "label": "assigns",
    "to": 193
  }, {
    "from": 188,
    "label": "initializes",
    "to": 194
  }, {
    "from": 194,
    "label": "assigns",
    "to": 195
  }, {
    "from": 188,
    "label": "initializes",
    "to": 196
  }, {
    "from": 196,
    "label": "assigns",
    "to": 197
  }, {
    "from": 188,
    "label": "initializes",
    "to": 198
  }, {
    "from": 198,
    "label": "assigns",
    "to": 199
  }, {
    "from": 188,
    "label": "initializes",
    "to": 200
  }, {
    "from": 200,
    "label": "assigns",
    "to": 201
  }, {
    "from": 188,
    "label": "initializes",
    "to": 202
  }, {
    "from": 202,
    "label": "assigns",
    "to": 203
  }, {
    "from": 203,
    "label": "assigns",
    "to": 204
  }, {
    "from": 204,
    "label": "assigns",
    "to": 205
  }, {
    "from": 203,
    "label": "assigns",
    "to": 206
  }, {
    "from": 206,
    "label": "assigns",
    "to": 207
  }, {
    "from": 203,
    "label": "assigns",
    "to": 208
  }, {
    "from": 208,
    "label": "assigns",
    "to": 209
  }, {
    "from": 203,
    "label": "assigns",
    "to": 210
  }, {
    "from": 210,
    "label": "assigns",
    "to": 211
  }, {
    "from": 188,
    "label": "initializes",
    "to": 212
  }, {
    "from": 212,
    "label": "assigns",
    "to": 213
  }, {
    "from": 188,
    "label": "initializes",
    "to": 214
  }, {
    "from": 214,
    "label": "assigns",
    "to": 215
  }, {
    "from": 215,
    "label": "assigns",
    "to": 216
  }, {
    "from": 216,
    "label": "assigns",
    "to": 217
  }, {
    "from": 215,
    "label": "assigns",
    "to": 218
  }, {
    "from": 218,
    "label": "assigns",
    "to": 219
  }, {
    "from": 215,
    "label": "assigns",
    "to": 220
  }, {
    "from": 220,
    "label": "assigns",
    "to": 221
  }, {
    "from": 215,
    "label": "assigns",
    "to": 222
  }, {
    "from": 222,
    "label": "assigns",
    "to": 223
  }, {
    "from": 215,
    "label": "assigns",
    "to": 224
  }, {
    "from": 224,
    "label": "assigns",
    "to": 225
  }, {
    "from": 215,
    "label": "assigns",
    "to": 226
  }, {
    "from": 226,
    "label": "assigns",
    "to": 227
  }, {
    "from": 188,
    "label": "initializes",
    "to": 228
  }, {
    "from": 188,
    "label": "initializes",
    "to": 229
  }, {
    "from": 229,
    "label": "assigns",
    "to": 230
  }, {
    "from": 188,
    "label": "initializes",
    "to": 231
  }, {
    "from": 231,
    "label": "assigns",
    "to": 232
  }, {
    "from": 188,
    "label": "initializes",
    "to": 233
  }, {
    "from": 233,
    "label": "assigns",
    "to": 234
  }, {
    "from": 188,
    "label": "initializes",
    "to": 235
  }, {
    "from": 235,
    "label": "assigns",
    "to": 236
  }, {
    "from": 188,
    "label": "initializes",
    "to": 237
  }, {
    "from": 237,
    "label": "assigns",
    "to": 238
  }, {
    "from": 188,
    "label": "initializes",
    "to": 239
  }, {
    "from": 239,
    "label": "assigns",
    "to": 240
  }, {
    "from": 188,
    "label": "initializes",
    "to": 241
  }, {
    "from": 241,
    "label": "assigns",
    "to": 242
  }, {
    "from": 188,
    "label": "initializes",
    "to": 243
  }, {
    "from": 243,
    "label": "assigns",
    "to": 244
  }, {
    "from": 188,
    "label": "initializes",
    "to": 245
  }, {
    "from": 245,
    "label": "assigns",
    "to": 246
  }, {
    "from": 188,
    "label": "initializes",
    "to": 247
  }, {
    "from": 247,
    "label": "assigns",
    "to": 248
  }, {
    "from": 188,
    "label": "initializes",
    "to": 249
  }, {
    "from": 249,
    "label": "assigns",
    "to": 250
  }, {
    "from": 189,
    "label": "initializes",
    "to": 251
  }, {
    "from": 251,
    "label": "requires",
    "to": 161
  }, {
    "from": 189,
    "label": "initializes",
    "to": 252
  }, {
    "from": 252,
    "label": "requires",
    "to": 1
  }, {
    "from": 189,
    "label": "initializes",
    "to": 253
  }, {
    "from": 253,
    "label": "requires",
    "to": 3
  }, {
    "from": 189,
    "label": "initializes",
    "to": 254
  }, {
    "from": 254,
    "label": "requires",
    "to": 156
  }, {
    "from": 189,
    "label": "initializes",
    "to": 255
  }, {
    "from": 255,
    "label": "requires",
    "to": 3
  }, {
    "from": 192,
    "label": "represents",
    "to": 256
  }, {
    "from": 194,
    "label": "represents",
    "to": 257
  }, {
    "from": 196,
    "label": "represents",
    "to": 258
  }, {
    "from": 200,
    "label": "represents",
    "to": 259
  }, {
    "from": 198,
    "label": "represents",
    "to": 260
  }, {
    "from": 95,
    "label": "hasArgument",
    "to": 144
  }, {
    "from": 118,
    "label": "hasArgument",
    "to": 150
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "ZipWriter",
    "type": "module"
  }, {
    "id": 2,
    "text": "test",
    "type": "module"
  }, {
    "id": 3,
    "text": "utils",
    "type": "module"
  }, {
    "id": 4,
    "text": "function()\r\n    return AesFileEncrypt:new()\r\n  end",
    "type": "function"
  }, {
    "id": 5,
    "text": "function DUMP(lvl, res)\r\n  res = base64.decode(res)\r\n  print(#res)\r\n  local out = assert(io.open(lvl, \"wb\"))\r\n  out:write(res)\r\n  out:close()\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "res = base64.decode(res)",
    "type": "statement:assign"
  }, {
    "id": 7,
    "text": "print(#res)",
    "type": "statement:functioncall"
  }, {
    "id": 8,
    "text": "local out = assert(io.open(lvl, \"wb\"))",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "out:write(res)",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "out:close()",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "function LOAD(fname)\r\n  local f = assert(io.open(fname, \"rb\"))\r\n  local res = f:read(\"*all\")\r\n  f:close()\r\n  print( #res )\r\n  local enc = base64.encode(res)\r\n  assert(res == base64.decode(enc))\r\n  return enc\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local f = assert(io.open(fname, \"rb\"))",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local res = f:read(\"*all\")",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "f:close()",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "print( #res )",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "local enc = base64.encode(res)",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "assert(res == base64.decode(enc))",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "local function prequire(m)\r\n  local ok, err = pcall(require, m) \r\n  if not ok then return nil, err end\r\n  return err\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "local ok, err = pcall(require, m)",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function H(t, b, e)\r\n  local str = ''\r\n  for i = b or 1, e or #t do str = str .. (string.char(t[i])) end\r\n  return str\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "local str = ''",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "for i = b or 1, e or #t do str = str .. (string.char(t[i])) end",
    "type": "statement:numericfor"
  }, {
    "id": 28,
    "text": "str = str .. (string.char(t[i]))",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "function test_date()\r\n  local t = assert_table(os.date(\"*t\", fileDesc.mtime))\r\n  assert_equal(2012, t.year  )\r\n  assert_equal(09,   t.month )\r\n  assert_equal(19,   t.day   )\r\n  assert_equal(01,   t.min   )\r\n  assert_equal(41,   t.sec   )\r\n  assert_false(t.isdst)\r\n  assert_equal(14,   t.hour  )\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "local t = assert_table(os.date(\"*t\", fileDesc.mtime))",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "assert_equal(2012, t.year  )",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "assert_equal(09,   t.month )",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "assert_equal(19,   t.day   )",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "assert_equal(01,   t.min   )",
    "type": "statement:functioncall"
  }, {
    "id": 36,
    "text": "assert_equal(41,   t.sec   )",
    "type": "statement:functioncall"
  }, {
    "id": 37,
    "text": "assert_false(t.isdst)",
    "type": "statement:functioncall"
  }, {
    "id": 38,
    "text": "assert_equal(14,   t.hour  )",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function setup()\r\n  fileDesc.data = DATA\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "fileDesc.data = DATA",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function teardown()\r\n  fileDesc.data = nil\r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "fileDesc.data = nil",
    "type": "statement:assign"
  }, {
    "id": 45,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 46,
    "text": "local function Make(lvl) return function()\r\n  local out = Stream:new()\r\n\r\n  local writer = ZipWriter.new{\r\n    utf8 = false;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl]\r\n  }\r\n  writer:open_stream(out)\r\n  writer:write('test.txt', fileDesc)\r\n  writer:close()\r\n\r\n  local res = base64.encode( tostring(out) )\r\n  assert_equal( ETALON[ lvl:upper() ], res )\r\nend end",
    "type": "function"
  }, {
    "id": 47,
    "text": "local out = Stream:new()",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local writer = ZipWriter.new{\r\n    utf8 = false;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl]\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "writer:open_stream(out)",
    "type": "statement:functioncall"
  }, {
    "id": 50,
    "text": "writer:write('test.txt', fileDesc)",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "writer:close()",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "local res = base64.encode( tostring(out) )",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "assert_equal( ETALON[ lvl:upper() ], res )",
    "type": "statement:functioncall"
  }, {
    "id": 54,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 55,
    "text": "local function Make(lvl) return function()\r\n  local out = Stream:new()\r\n  -- local out    = io.open(\".\\\\out.zip\", \"wb\")\r\n  \r\n  local function reader(i)\r\n    i = i or 1\r\n    local chunk = string.sub(DATA, i, i + 10)\r\n    if chunk == '' then return end\r\n    return chunk, i + #chunk\r\n  end\r\n\r\n  local writer = ZipWriter.new{\r\n    utf8 = false;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl]\r\n  }\r\n  writer:open_stream(out)\r\n  writer:write('test.txt', fileDesc, reader)\r\n  writer:close()\r\n\r\n  local res = base64.encode( tostring(out) )\r\n  assert_equal( ETALON[ lvl:upper() ], res )\r\nend end",
    "type": "function"
  }, {
    "id": 56,
    "text": "local function reader(i)\r\n    i = i or 1\r\n    local chunk = string.sub(DATA, i, i + 10)\r\n    if chunk == '' then return end\r\n    return chunk, i + #chunk\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 57,
    "text": "i = i or 1",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "local chunk = string.sub(DATA, i, i + 10)",
    "type": "statement:localassign"
  }, {
    "id": 59,
    "text": "if chunk == '' then return end",
    "type": "statement:if"
  }, {
    "id": 60,
    "text": "writer:write('test.txt', fileDesc, reader)",
    "type": "statement:functioncall"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "local function reader(i)\r\n    i = i or 1\r\n    local chunk = string.sub(DATA, i, i + 10)\r\n    if chunk == '' then return end\r\n    return chunk, i + #chunk\r\n  end",
    "type": "function"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function test_context()\r\n  local out = Stream:new()\r\n  local writer = ZipWriter.new()\r\n  writer:open_stream(out)\r\n\r\n  local function make_reader()\r\n    local ctx = {}\r\n    local i = 0\r\n    return function(o)\r\n      if i == 0 then\r\n        i = 1\r\n        assert_nil(o)\r\n        return \"data\", ctx\r\n      end\r\n      assert_equal(ctx, o)\r\n    end\r\n  end\r\n\r\n  assert_true(writer:write('test.txt', fileDesc, make_reader()))\r\n  assert_equal(1, writer:close())\r\nend",
    "type": "function"
  }, {
    "id": 65,
    "text": "local writer = ZipWriter.new()",
    "type": "statement:localassign"
  }, {
    "id": 66,
    "text": "local function make_reader()\r\n    local ctx = {}\r\n    local i = 0\r\n    return function(o)\r\n      if i == 0 then\r\n        i = 1\r\n        assert_nil(o)\r\n        return \"data\", ctx\r\n      end\r\n      assert_equal(ctx, o)\r\n    end\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 67,
    "text": "local ctx = {}",
    "type": "statement:localassign"
  }, {
    "id": 68,
    "text": "local i = 0",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "if i == 0 then\r\n        i = 1\r\n        assert_nil(o)\r\n        return \"data\", ctx\r\n      end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "i = 1",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "assert_nil(o)",
    "type": "statement:functioncall"
  }, {
    "id": 72,
    "text": "assert_equal(ctx, o)",
    "type": "statement:functioncall"
  }, {
    "id": 73,
    "text": "assert_true(writer:write('test.txt', fileDesc, make_reader()))",
    "type": "statement:functioncall"
  }, {
    "id": 74,
    "text": "assert_equal(1, writer:close())",
    "type": "statement:functioncall"
  }, {
    "id": 75,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 76,
    "text": "local function make_reader()\r\n    local ctx = {}\r\n    local i = 0\r\n    return function(o)\r\n      if i == 0 then\r\n        i = 1\r\n        assert_nil(o)\r\n        return \"data\", ctx\r\n      end\r\n      assert_equal(ctx, o)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 77,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 78,
    "text": "function test_error()\r\n  local out = Stream:new()\r\n  local writer = ZipWriter.new()\r\n  writer:open_stream(out)\r\n\r\n  local ERR = {}\r\n\r\n  local function reader()\r\n    return nil, ERR\r\n  end\r\n\r\n  local ok, err = assert_nil(writer:write('test.txt', fileDesc, reader))\r\n  assert_equal(ERR, err)\r\n  assert_equal(1, writer:close())\r\nend",
    "type": "function"
  }, {
    "id": 79,
    "text": "local ERR = {}",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "local function reader()\r\n    return nil, ERR\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 81,
    "text": "local ok, err = assert_nil(writer:write('test.txt', fileDesc, reader))",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "assert_equal(ERR, err)",
    "type": "statement:functioncall"
  }, {
    "id": 83,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 84,
    "text": "local function reader()\r\n    return nil, ERR\r\n  end",
    "type": "function"
  }, {
    "id": 85,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 86,
    "text": "local function Make(lvl) return function()\r\n  local out = Stream:new()\r\n\r\n  local writer = ZipWriter.new{\r\n    utf8 = false;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl]\r\n  }\r\n  writer:open_stream(out)\r\n\r\n  local sink = ZipWriter.sink(writer, 'test.txt', fileDesc)\r\n  for i = 1, #DATA do sink(DATA:sub(i,i)) end\r\n  sink()\r\n  writer:close()\r\n  \r\n  local res = base64.encode( tostring(out) )\r\n  assert_equal( ETALON[ lvl:upper() ], res )\r\nend end",
    "type": "function"
  }, {
    "id": 87,
    "text": "local sink = ZipWriter.sink(writer, 'test.txt', fileDesc)",
    "type": "statement:localassign"
  }, {
    "id": 88,
    "text": "for i = 1, #DATA do sink(DATA:sub(i,i)) end",
    "type": "statement:numericfor"
  }, {
    "id": 89,
    "text": "sink(DATA:sub(i,i))",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "sink()",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "local function Make(lvl) return function()\r\n  local data = fileDesc.data\r\n  local function reader(i)\r\n    i = i or 1\r\n    local chunk = string.sub(DATA, i, i + 10)\r\n    if chunk == '' then return end\r\n    return chunk, i + #chunk\r\n  end\r\n\r\n  local writer = ZipWriter.new{\r\n    utf8 = false;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl]\r\n  }\r\n  local RES = {}\r\n  writer:open_writer(assert(ZipWriter.co_writer(function(reader) \r\n    while(true)do\r\n      local chunk = reader()\r\n      if not chunk then break end\r\n      table.insert(RES,chunk)\r\n    end\r\n  end)))\r\n\r\n  writer:open_stream(out)\r\n  writer:write('test.txt', fileDesc, reader)\r\n  writer:close()\r\n\r\n  local res = table.concat(RES)\r\n\r\n  res = base64.encode( res )\r\n  assert_equal( ETALON[ lvl:upper() ], res )\r\nend end",
    "type": "function"
  }, {
    "id": 93,
    "text": "local data = fileDesc.data",
    "type": "statement:localassign"
  }, {
    "id": 94,
    "text": "local RES = {}",
    "type": "statement:localassign"
  }, {
    "id": 95,
    "text": "writer:open_writer(assert(ZipWriter.co_writer(function(reader) \r\n    while(true)do\r\n      local chunk = reader()\r\n      if not chunk then break end\r\n      table.insert(RES,chunk)\r\n    end\r\n  end)))",
    "type": "statement:functioncall"
  }, {
    "id": 96,
    "text": "while(true)do\r\n      local chunk = reader()\r\n      if not chunk then break end\r\n      table.insert(RES,chunk)\r\n    end",
    "type": "statement:while"
  }, {
    "id": 97,
    "text": "local chunk = reader()",
    "type": "statement:localassign"
  }, {
    "id": 98,
    "text": "if not chunk then break end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "table.insert(RES,chunk)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "local res = table.concat(RES)",
    "type": "statement:localassign"
  }, {
    "id": 101,
    "text": "res = base64.encode( res )",
    "type": "statement:assign"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "local function reader(i)\r\n    i = i or 1\r\n    local chunk = string.sub(DATA, i, i + 10)\r\n    if chunk == '' then return end\r\n    return chunk, i + #chunk\r\n  end",
    "type": "function"
  }, {
    "id": 104,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 105,
    "text": "function setup()\r\n  fileDesc.data = DATA\r\nend",
    "type": "function"
  }, {
    "id": 106,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 107,
    "text": "function teardown()\r\n  fileDesc.data = nil\r\nend",
    "type": "function"
  }, {
    "id": 108,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 109,
    "text": "local function Make(lvl) return function()\r\n  local out = Stream:new()\r\n\r\n  local writer = ZipWriter.new{\r\n    utf8 = false;\r\n    zip64 = true;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl]\r\n  }\r\n  writer:open_stream(out)\r\n  writer:write('test.txt', fileDesc)\r\n  writer:close()\r\n\r\n  local res = base64.encode( tostring(out) )\r\n  assert_equal( ETALON[ lvl:upper() ], res )\r\nend end",
    "type": "function"
  }, {
    "id": 110,
    "text": "local writer = ZipWriter.new{\r\n    utf8 = false;\r\n    zip64 = true;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl]\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function setup()\r\n  fileDesc.data = DATA\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function teardown()\r\n  fileDesc.data = nil\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 116,
    "text": "local function Make(lvl) return function()\r\n  local out = Stream:new()\r\n\r\n  local writer = ZipWriter.new{\r\n    utf8  = false;\r\n    zip64 = true;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl]\r\n  }\r\n  writer:open_writer(function(data) if data then out:write(data) end end)\r\n  writer:write('test.txt', fileDesc)\r\n  writer:close()\r\n\r\n  local res = base64.encode( tostring(out) )\r\n  assert_equal( ETALON[ lvl:upper() ], res )\r\nend end",
    "type": "function"
  }, {
    "id": 117,
    "text": "local writer = ZipWriter.new{\r\n    utf8  = false;\r\n    zip64 = true;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl]\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 118,
    "text": "writer:open_writer(function(data) if data then out:write(data) end end)",
    "type": "statement:functioncall"
  }, {
    "id": 119,
    "text": "if data then out:write(data) end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "out:write(data)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 122,
    "text": "function setup()\r\n  fileDesc.data = DATA\r\nend",
    "type": "function"
  }, {
    "id": 123,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 124,
    "text": "function teardown()\r\n  fileDesc.data = nil\r\n  os.remove(fname)\r\nend",
    "type": "function"
  }, {
    "id": 125,
    "text": "os.remove(fname)",
    "type": "statement:functioncall"
  }, {
    "id": 126,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 127,
    "text": "local function Make(lvl) return function()\r\n  local out = Stream:new()\r\n\r\n  local writer = ZipWriter.new{\r\n    utf8 = false;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl];\r\n    encrypt = AesEncrypt.new{\r\n      mode     = AesEncrypt.MODE.AES256;\r\n      version  = AesEncrypt.VERSION.AE2;\r\n      password = '123456';\r\n      salt     = H{0x04, 0xF9, 0x4A, 0xFB, 0x60, 0xAF, 0x47, 0x44, 0xD4, 0xDB, 0x9B, 0x3A, 0xE7, 0x23, 0x3E, 0xC6};  -- optional\r\n    }\r\n  }\r\n  writer:open_stream(out)\r\n  writer:write('test.txt', fileDesc)\r\n  writer:close()\r\n\r\n  if DELTA == 0 and ETALON[ lvl:upper() ] then\r\n    local res = base64.encode( tostring(out) )\r\n    assert_equal( ETALON[ lvl:upper() ], res )\r\n  else\r\n    assert_true(write_file(fname, tostring(out)))\r\n    assert_true(test_zip(fname, '123456'))\r\n  end\r\nend end",
    "type": "function"
  }, {
    "id": 128,
    "text": "local writer = ZipWriter.new{\r\n    utf8 = false;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl];\r\n    encrypt = AesEncrypt.new{\r\n      mode     = AesEncrypt.MODE.AES256;\r\n      version  = AesEncrypt.VERSION.AE2;\r\n      password = '123456';\r\n      salt     = H{0x04, 0xF9, 0x4A, 0xFB, 0x60, 0xAF, 0x47, 0x44, 0xD4, 0xDB, 0x9B, 0x3A, 0xE7, 0x23, 0x3E, 0xC6};  -- optional\r\n    }\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "if DELTA == 0 and ETALON[ lvl:upper() ] then\r\n    local res = base64.encode( tostring(out) )\r\n    assert_equal( ETALON[ lvl:upper() ], res )\r\n  else\r\n    assert_true(write_file(fname, tostring(out)))\r\n    assert_true(test_zip(fname, '123456'))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 130,
    "text": "assert_true(write_file(fname, tostring(out)))",
    "type": "statement:functioncall"
  }, {
    "id": 131,
    "text": "assert_true(test_zip(fname, '123456'))",
    "type": "statement:functioncall"
  }, {
    "id": 132,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 133,
    "text": "function test()\r\n  AesEncrypt.self_test()\r\nend",
    "type": "function"
  }, {
    "id": 134,
    "text": "AesEncrypt.self_test()",
    "type": "statement:functioncall"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function()\r\n  local out = Stream:new()\r\n\r\n  local writer = ZipWriter.new{\r\n    utf8 = false;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl]\r\n  }\r\n  writer:open_stream(out)\r\n  writer:write('test.txt', fileDesc)\r\n  writer:close()\r\n\r\n  local res = base64.encode( tostring(out) )\r\n  assert_equal( ETALON[ lvl:upper() ], res )\r\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function()\r\n  local out = Stream:new()\r\n  -- local out    = io.open(\".\\\\out.zip\", \"wb\")\r\n  \r\n  local function reader(i)\r\n    i = i or 1\r\n    local chunk = string.sub(DATA, i, i + 10)\r\n    if chunk == '' then return end\r\n    return chunk, i + #chunk\r\n  end\r\n\r\n  local writer = ZipWriter.new{\r\n    utf8 = false;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl]\r\n  }\r\n  writer:open_stream(out)\r\n  writer:write('test.txt', fileDesc, reader)\r\n  writer:close()\r\n\r\n  local res = base64.encode( tostring(out) )\r\n  assert_equal( ETALON[ lvl:upper() ], res )\r\nend",
    "type": "function"
  }, {
    "id": 139,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 140,
    "text": "function(o)\r\n      if i == 0 then\r\n        i = 1\r\n        assert_nil(o)\r\n        return \"data\", ctx\r\n      end\r\n      assert_equal(ctx, o)\r\n    end",
    "type": "function"
  }, {
    "id": 141,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 142,
    "text": "function()\r\n  local out = Stream:new()\r\n\r\n  local writer = ZipWriter.new{\r\n    utf8 = false;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl]\r\n  }\r\n  writer:open_stream(out)\r\n\r\n  local sink = ZipWriter.sink(writer, 'test.txt', fileDesc)\r\n  for i = 1, #DATA do sink(DATA:sub(i,i)) end\r\n  sink()\r\n  writer:close()\r\n  \r\n  local res = base64.encode( tostring(out) )\r\n  assert_equal( ETALON[ lvl:upper() ], res )\r\nend",
    "type": "function"
  }, {
    "id": 143,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 144,
    "text": "function(reader) \r\n    while(true)do\r\n      local chunk = reader()\r\n      if not chunk then break end\r\n      table.insert(RES,chunk)\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 145,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 146,
    "text": "function()\r\n  local data = fileDesc.data\r\n  local function reader(i)\r\n    i = i or 1\r\n    local chunk = string.sub(DATA, i, i + 10)\r\n    if chunk == '' then return end\r\n    return chunk, i + #chunk\r\n  end\r\n\r\n  local writer = ZipWriter.new{\r\n    utf8 = false;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl]\r\n  }\r\n  local RES = {}\r\n  writer:open_writer(assert(ZipWriter.co_writer(function(reader) \r\n    while(true)do\r\n      local chunk = reader()\r\n      if not chunk then break end\r\n      table.insert(RES,chunk)\r\n    end\r\n  end)))\r\n\r\n  writer:open_stream(out)\r\n  writer:write('test.txt', fileDesc, reader)\r\n  writer:close()\r\n\r\n  local res = table.concat(RES)\r\n\r\n  res = base64.encode( res )\r\n  assert_equal( ETALON[ lvl:upper() ], res )\r\nend",
    "type": "function"
  }, {
    "id": 147,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 148,
    "text": "function()\r\n  local out = Stream:new()\r\n\r\n  local writer = ZipWriter.new{\r\n    utf8 = false;\r\n    zip64 = true;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl]\r\n  }\r\n  writer:open_stream(out)\r\n  writer:write('test.txt', fileDesc)\r\n  writer:close()\r\n\r\n  local res = base64.encode( tostring(out) )\r\n  assert_equal( ETALON[ lvl:upper() ], res )\r\nend",
    "type": "function"
  }, {
    "id": 149,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 150,
    "text": "function(data) if data then out:write(data) end end",
    "type": "function"
  }, {
    "id": 151,
    "text": "function()\r\n  local out = Stream:new()\r\n\r\n  local writer = ZipWriter.new{\r\n    utf8  = false;\r\n    zip64 = true;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl]\r\n  }\r\n  writer:open_writer(function(data) if data then out:write(data) end end)\r\n  writer:write('test.txt', fileDesc)\r\n  writer:close()\r\n\r\n  local res = base64.encode( tostring(out) )\r\n  assert_equal( ETALON[ lvl:upper() ], res )\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function()\r\n  local out = Stream:new()\r\n\r\n  local writer = ZipWriter.new{\r\n    utf8 = false;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl];\r\n    encrypt = AesEncrypt.new{\r\n      mode     = AesEncrypt.MODE.AES256;\r\n      version  = AesEncrypt.VERSION.AE2;\r\n      password = '123456';\r\n      salt     = H{0x04, 0xF9, 0x4A, 0xFB, 0x60, 0xAF, 0x47, 0x44, 0xD4, 0xDB, 0x9B, 0x3A, 0xE7, 0x23, 0x3E, 0xC6};  -- optional\r\n    }\r\n  }\r\n  writer:open_stream(out)\r\n  writer:write('test.txt', fileDesc)\r\n  writer:close()\r\n\r\n  if DELTA == 0 and ETALON[ lvl:upper() ] then\r\n    local res = base64.encode( tostring(out) )\r\n    assert_equal( ETALON[ lvl:upper() ], res )\r\n  else\r\n    assert_true(write_file(fname, tostring(out)))\r\n    assert_true(test_zip(fname, '123456'))\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "",
    "type": "function container"
  }, {
    "id": 156,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 157,
    "text": "run",
    "type": "global function"
  }, {
    "id": 158,
    "text": "char",
    "type": "global function"
  }, {
    "id": 159,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 160,
    "text": "co_writer",
    "type": "global function"
  }, {
    "id": 161,
    "text": "base64",
    "type": "module"
  }, {
    "id": 162,
    "text": "encode",
    "type": "global function"
  }, {
    "id": 163,
    "text": "sink",
    "type": "global function"
  }, {
    "id": 164,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 165,
    "text": "decode",
    "type": "global function"
  }, {
    "id": 166,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 167,
    "text": "assert_table",
    "type": "global function"
  }, {
    "id": 168,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 169,
    "text": "assert_false",
    "type": "global function"
  }, {
    "id": 170,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 171,
    "text": "print",
    "type": "global function"
  }, {
    "id": 172,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 173,
    "text": "date",
    "type": "global function"
  }, {
    "id": 174,
    "text": "write_file",
    "type": "global function"
  }, {
    "id": 175,
    "text": "assert_nil",
    "type": "global function"
  }, {
    "id": 176,
    "text": "difftime",
    "type": "global function"
  }, {
    "id": 177,
    "text": "sink",
    "type": "global function"
  }, {
    "id": 178,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 179,
    "text": "self_test",
    "type": "global function"
  }, {
    "id": 180,
    "text": "assert_true",
    "type": "global function"
  }, {
    "id": 181,
    "text": "TEST_CASE",
    "type": "global function"
  }, {
    "id": 182,
    "text": "new",
    "type": "global function"
  }, {
    "id": 183,
    "text": "assert_equal",
    "type": "global function"
  }, {
    "id": 184,
    "text": "open",
    "type": "global function"
  }, {
    "id": 185,
    "text": "test_zip",
    "type": "global function"
  }, {
    "id": 186,
    "text": "time",
    "type": "global function"
  }, {
    "id": 187,
    "text": "require",
    "type": "global function"
  }, {
    "id": 188,
    "text": "",
    "type": "variable container"
  }, {
    "id": 189,
    "text": "",
    "type": "require container"
  }, {
    "id": 190,
    "text": "",
    "type": "local variable"
  }, {
    "id": 191,
    "text": "",
    "type": "unop"
  }, {
    "id": 192,
    "text": "",
    "type": "local variable"
  }, {
    "id": 193,
    "text": "",
    "type": "n/a"
  }, {
    "id": 194,
    "text": "",
    "type": "local variable"
  }, {
    "id": 195,
    "text": "",
    "type": "n/a"
  }, {
    "id": 196,
    "text": "",
    "type": "local variable"
  }, {
    "id": 197,
    "text": "",
    "type": "n/a"
  }, {
    "id": 198,
    "text": "",
    "type": "local variable"
  }, {
    "id": 199,
    "text": "",
    "type": "n/a"
  }, {
    "id": 200,
    "text": "",
    "type": "local variable"
  }, {
    "id": 201,
    "text": "",
    "type": "n/a"
  }, {
    "id": 202,
    "text": "",
    "type": "local variable"
  }, {
    "id": 203,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 204,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 205,
    "text": "",
    "type": "string"
  }, {
    "id": 206,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 207,
    "text": "",
    "type": "string"
  }, {
    "id": 208,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 209,
    "text": "",
    "type": "string"
  }, {
    "id": 210,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 211,
    "text": "",
    "type": "string"
  }, {
    "id": 212,
    "text": "",
    "type": "local variable"
  }, {
    "id": 213,
    "text": "",
    "type": "string"
  }, {
    "id": 214,
    "text": "",
    "type": "local variable"
  }, {
    "id": 215,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 216,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 217,
    "text": "",
    "type": "boolean"
  }, {
    "id": 218,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 219,
    "text": "",
    "type": "boolean"
  }, {
    "id": 220,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 221,
    "text": "",
    "type": "boolean"
  }, {
    "id": 222,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 223,
    "text": "",
    "type": "number"
  }, {
    "id": 224,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 225,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 226,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 227,
    "text": "",
    "type": "string"
  }, {
    "id": 228,
    "text": "",
    "type": "local variable"
  }, {
    "id": 229,
    "text": "",
    "type": "local variable"
  }, {
    "id": 230,
    "text": "",
    "type": "n/a"
  }, {
    "id": 231,
    "text": "",
    "type": "local variable"
  }, {
    "id": 232,
    "text": "",
    "type": "n/a"
  }, {
    "id": 233,
    "text": "",
    "type": "local variable"
  }, {
    "id": 234,
    "text": "",
    "type": "n/a"
  }, {
    "id": 235,
    "text": "",
    "type": "local variable"
  }, {
    "id": 236,
    "text": "",
    "type": "n/a"
  }, {
    "id": 237,
    "text": "",
    "type": "local variable"
  }, {
    "id": 238,
    "text": "",
    "type": "n/a"
  }, {
    "id": 239,
    "text": "",
    "type": "local variable"
  }, {
    "id": 240,
    "text": "",
    "type": "n/a"
  }, {
    "id": 241,
    "text": "",
    "type": "local variable"
  }, {
    "id": 242,
    "text": "",
    "type": "n/a"
  }, {
    "id": 243,
    "text": "",
    "type": "local variable"
  }, {
    "id": 244,
    "text": "",
    "type": "n/a"
  }, {
    "id": 245,
    "text": "",
    "type": "local variable"
  }, {
    "id": 246,
    "text": "",
    "type": "n/a"
  }, {
    "id": 247,
    "text": "",
    "type": "local variable"
  }, {
    "id": 248,
    "text": "",
    "type": "n/a"
  }, {
    "id": 249,
    "text": "",
    "type": "global variable"
  }, {
    "id": 250,
    "text": "",
    "type": "n/a"
  }, {
    "id": 251,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 252,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 253,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 254,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 255,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 256,
    "text": "",
    "type": "interface"
  }, {
    "id": 257,
    "text": "",
    "type": "interface"
  }, {
    "id": 258,
    "text": "",
    "type": "interface"
  }, {
    "id": 259,
    "text": "",
    "type": "interface"
  }, {
    "id": 260,
    "text": "",
    "type": "interface"
  } ]
}