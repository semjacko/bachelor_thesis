{
  "_filename": "utils.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/ZipWriter/test/utils.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 9,
    "label": "calls",
    "to": 2
  }, {
    "from": 9,
    "label": "calls",
    "to": 2
  }, {
    "from": 9,
    "label": "calls",
    "to": 78
  }, {
    "from": 9,
    "label": "calls",
    "to": 78
  }, {
    "from": 9,
    "label": "calls",
    "to": 70
  }, {
    "from": 1,
    "label": "contains",
    "to": 9
  }, {
    "from": 9,
    "label": "declares",
    "to": 2
  }, {
    "from": 9,
    "label": "declares",
    "to": 3
  }, {
    "from": 9,
    "label": "declares",
    "to": 4
  }, {
    "from": 9,
    "label": "declares",
    "to": 5
  }, {
    "from": 9,
    "label": "declares",
    "to": 6
  }, {
    "from": 9,
    "label": "declares",
    "to": 7
  }, {
    "from": 9,
    "label": "declares",
    "to": 8
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 14,
    "label": "has",
    "to": 15
  }, {
    "from": 14,
    "label": "has",
    "to": 16
  }, {
    "from": 13,
    "label": "has",
    "to": 11
  }, {
    "from": 13,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 11
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 21,
    "label": "has",
    "to": 11
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 23,
    "label": "has",
    "to": 25
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 28
  }, {
    "from": 26,
    "label": "has",
    "to": 29
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 26,
    "label": "has",
    "to": 11
  }, {
    "from": 26,
    "label": "has",
    "to": 30
  }, {
    "from": 31,
    "label": "has",
    "to": 27
  }, {
    "from": 31,
    "label": "has",
    "to": 32
  }, {
    "from": 31,
    "label": "has",
    "to": 33
  }, {
    "from": 31,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 38
  }, {
    "from": 31,
    "label": "has",
    "to": 39
  }, {
    "from": 39,
    "label": "has",
    "to": 40
  }, {
    "from": 39,
    "label": "has",
    "to": 41
  }, {
    "from": 31,
    "label": "has",
    "to": 27
  }, {
    "from": 31,
    "label": "has",
    "to": 11
  }, {
    "from": 31,
    "label": "has",
    "to": 42
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 45,
    "label": "has",
    "to": 11
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 47,
    "label": "has",
    "to": 48
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 48,
    "label": "has",
    "to": 50
  }, {
    "from": 47,
    "label": "has",
    "to": 51
  }, {
    "from": 47,
    "label": "has",
    "to": 52
  }, {
    "from": 47,
    "label": "has",
    "to": 11
  }, {
    "from": 47,
    "label": "has",
    "to": 11
  }, {
    "from": 47,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 54,
    "label": "has",
    "to": 56
  }, {
    "from": 54,
    "label": "has",
    "to": 11
  }, {
    "from": 54,
    "label": "has",
    "to": 57
  }, {
    "from": 54,
    "label": "has",
    "to": 58
  }, {
    "from": 54,
    "label": "has",
    "to": 11
  }, {
    "from": 54,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 60,
    "label": "has",
    "to": 62
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 60,
    "label": "has",
    "to": 11
  }, {
    "from": 60,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 12
  }, {
    "from": 9,
    "label": "calls",
    "to": 67
  }, {
    "from": 60,
    "label": "calls",
    "to": 47
  }, {
    "from": 18,
    "label": "calls",
    "to": 70
  }, {
    "from": 9,
    "label": "calls",
    "to": 70
  }, {
    "from": 9,
    "label": "calls",
    "to": 70
  }, {
    "from": 9,
    "label": "calls",
    "to": 70
  }, {
    "from": 23,
    "label": "calls",
    "to": 70
  }, {
    "from": 9,
    "label": "calls",
    "to": 70
  }, {
    "from": 9,
    "label": "calls",
    "to": 70
  }, {
    "from": 9,
    "label": "calls",
    "to": 70
  }, {
    "from": 9,
    "label": "calls",
    "to": 70
  }, {
    "from": 9,
    "label": "calls",
    "to": 70
  }, {
    "from": 9,
    "label": "calls",
    "to": 70
  }, {
    "from": 9,
    "label": "calls",
    "to": 18
  }, {
    "from": 9,
    "label": "calls",
    "to": 18
  }, {
    "from": 9,
    "label": "calls",
    "to": 18
  }, {
    "from": 26,
    "label": "calls",
    "to": 18
  }, {
    "from": 31,
    "label": "calls",
    "to": 71
  }, {
    "from": 9,
    "label": "calls",
    "to": 71
  }, {
    "from": 9,
    "label": "calls",
    "to": 72
  }, {
    "from": 31,
    "label": "calls",
    "to": 76
  }, {
    "from": 21,
    "label": "calls",
    "to": 77
  }, {
    "from": 9,
    "label": "calls",
    "to": 68
  }, {
    "from": 47,
    "label": "calls",
    "to": 73
  }, {
    "from": 9,
    "label": "calls",
    "to": 78
  }, {
    "from": 9,
    "label": "calls",
    "to": 74
  }, {
    "from": 18,
    "label": "calls",
    "to": 69
  }, {
    "from": 18,
    "label": "calls",
    "to": 69
  }, {
    "from": 54,
    "label": "calls",
    "to": 75
  }, {
    "from": 9,
    "label": "declares",
    "to": 10
  }, {
    "from": 9,
    "label": "declares",
    "to": 13
  }, {
    "from": 9,
    "label": "declares",
    "to": 18
  }, {
    "from": 9,
    "label": "declares",
    "to": 21
  }, {
    "from": 9,
    "label": "declares",
    "to": 23
  }, {
    "from": 9,
    "label": "declares",
    "to": 26
  }, {
    "from": 9,
    "label": "declares",
    "to": 31
  }, {
    "from": 9,
    "label": "declares",
    "to": 43
  }, {
    "from": 9,
    "label": "declares",
    "to": 45
  }, {
    "from": 9,
    "label": "declares",
    "to": 47
  }, {
    "from": 9,
    "label": "declares",
    "to": 54
  }, {
    "from": 9,
    "label": "declares",
    "to": 60
  }, {
    "from": 9,
    "label": "declares",
    "to": 65
  }, {
    "from": 1,
    "label": "contains",
    "to": 79
  }, {
    "from": 1,
    "label": "contains",
    "to": 80
  }, {
    "from": 79,
    "label": "initializes",
    "to": 81
  }, {
    "from": 79,
    "label": "initializes",
    "to": 82
  }, {
    "from": 79,
    "label": "initializes",
    "to": 83
  }, {
    "from": 79,
    "label": "initializes",
    "to": 84
  }, {
    "from": 79,
    "label": "initializes",
    "to": 85
  }, {
    "from": 79,
    "label": "initializes",
    "to": 86
  }, {
    "from": 79,
    "label": "initializes",
    "to": 87
  }, {
    "from": 79,
    "label": "initializes",
    "to": 88
  }, {
    "from": 79,
    "label": "initializes",
    "to": 89
  }, {
    "from": 80,
    "label": "initializes",
    "to": 90
  }, {
    "from": 1,
    "label": "provides",
    "to": 91
  }, {
    "from": 91,
    "label": "provides",
    "to": 92
  }, {
    "from": 93,
    "label": "requires",
    "to": 1
  }, {
    "from": 99,
    "label": "requires",
    "to": 1
  }, {
    "from": 100,
    "label": "requires",
    "to": 1
  }, {
    "from": 1,
    "label": "contains",
    "to": 101
  }, {
    "from": 1,
    "label": "contains",
    "to": 102
  }, {
    "from": 101,
    "label": "initializes",
    "to": 103
  }, {
    "from": 103,
    "label": "assigns",
    "to": 104
  }, {
    "from": 101,
    "label": "initializes",
    "to": 105
  }, {
    "from": 105,
    "label": "assigns",
    "to": 106
  }, {
    "from": 101,
    "label": "initializes",
    "to": 107
  }, {
    "from": 107,
    "label": "assigns",
    "to": 108
  }, {
    "from": 101,
    "label": "initializes",
    "to": 109
  }, {
    "from": 109,
    "label": "assigns",
    "to": 110
  }, {
    "from": 101,
    "label": "initializes",
    "to": 111
  }, {
    "from": 111,
    "label": "assigns",
    "to": 112
  }, {
    "from": 101,
    "label": "initializes",
    "to": 113
  }, {
    "from": 113,
    "label": "assigns",
    "to": 114
  }, {
    "from": 101,
    "label": "initializes",
    "to": 115
  }, {
    "from": 115,
    "label": "assigns",
    "to": 116
  }, {
    "from": 102,
    "label": "initializes",
    "to": 117
  }, {
    "from": 117,
    "label": "requires",
    "to": 66
  }, {
    "from": 1,
    "label": "provides",
    "to": 118
  }, {
    "from": 94,
    "label": "represents",
    "to": 119
  }, {
    "from": 118,
    "label": "provides",
    "to": 119
  }, {
    "from": 95,
    "label": "represents",
    "to": 120
  }, {
    "from": 118,
    "label": "provides",
    "to": 120
  }, {
    "from": 96,
    "label": "represents",
    "to": 121
  }, {
    "from": 118,
    "label": "provides",
    "to": 121
  }, {
    "from": 98,
    "label": "represents",
    "to": 122
  }, {
    "from": 118,
    "label": "provides",
    "to": 122
  }, {
    "from": 97,
    "label": "represents",
    "to": 123
  }, {
    "from": 118,
    "label": "provides",
    "to": 123
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "utils",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function prequire(m) \r\n  local ok, err = pcall(require, m) \r\n  if not ok then return nil, err end\r\n  return err\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local function lshift(v, n)\r\n  return math.floor(v * (2 ^ n))\r\nend",
    "type": "function"
  }, {
    "id": 4,
    "text": "local function rshift(v, n)\r\n  return math.floor(v / (2 ^ n))\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "local function locale2dos(str)\r\n  return DEFAULT_CP_CONV('cp866', DEFAULT_LOCAL_CP, str)\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "local function locale2utf8(str)\r\n  return DEFAULT_CP_CONV('utf-8', DEFAULT_LOCAL_CP, str)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "local function time2dos(file_ts)\r\n  local t = os.date(\"*t\", file_ts)\r\n\r\n  return bit.bor(\r\n    bit.lshift(t.year-1980, 25),\r\n    bit.lshift(t.month,     21),\r\n    bit.lshift(t.day,       16),\r\n    bit.lshift(t.hour,      11),\r\n    bit.lshift(t.min,        5),\r\n    bit.rshift(t.sec+2,      1) -- 7z \r\n  )\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local function time2filetime(file_ts)\r\n  file_ts = 10000000 * (file_ts + 11644473600)\r\n  local high = rshift(file_ts,32)\r\n  local low  = file_ts - lshift(high, 32)\r\n  return {low, high}\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "",
    "type": "function container"
  }, {
    "id": 10,
    "text": "function (msg) return function() lunit.fail(\"#SKIP: \" .. msg) end end",
    "type": "function"
  }, {
    "id": 11,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 12,
    "text": "lunit.fail(\"#SKIP: \" .. msg)",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "function (name)\r\n  if not IS_LUA52 then\r\n    module(name, package.seeall, lunit.testcase)\r\n    setfenv(2, _M)\r\n  else\r\n    return lunit.module(name, 'seeall')\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 14,
    "text": "if not IS_LUA52 then\r\n    module(name, package.seeall, lunit.testcase)\r\n    setfenv(2, _M)\r\n  else\r\n    return lunit.module(name, 'seeall')\r\n  end",
    "type": "statement:if"
  }, {
    "id": 15,
    "text": "module(name, package.seeall, lunit.testcase)",
    "type": "statement:functioncall"
  }, {
    "id": 16,
    "text": "setfenv(2, _M)",
    "type": "statement:functioncall"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "local function str_replace(str, pos, sub)\r\n  assert((pos > 0) and (pos <= (#str + 1)))\r\n  return string.sub(str, 1, pos-1) .. sub .. string.sub(str, pos+#sub)\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "assert((pos > 0) and (pos <= (#str + 1)))",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 21,
    "text": "function Stream:new()\r\n  return setmetatable({\r\n    _pos  = 0;\r\n    _data = \"\";\r\n  }, self)\r\nend",
    "type": "function"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "function Stream:_validate()\r\n  assert((self._pos >= 0) and (self._pos <= (#self._data)))\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "assert((self._pos >= 0) and (self._pos <= (#self._data)))",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 26,
    "text": "function Stream:write(str)\r\n  self:_validate()\r\n  self._data = str_replace(self._data, self._pos+1, str)\r\n  self._pos = self._pos + #str\r\n  self:_validate()\r\n  return #str\r\nend",
    "type": "function"
  }, {
    "id": 27,
    "text": "self:_validate()",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "self._data = str_replace(self._data, self._pos+1, str)",
    "type": "statement:assign"
  }, {
    "id": 29,
    "text": "self._pos = self._pos + #str",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 31,
    "text": "function Stream:seek(whence, offset)\r\n  self:_validate()\r\n\r\n  offset = offset or 0\r\n  whence = whence or \"cur\"\r\n\r\n  if     whence == \"set\" then self._pos = offset\r\n  elseif whence == \"cur\" then self._pos = self._pos + offset\r\n  elseif whence == \"end\" then self._pos = #self._data + offset\r\n  else error(\"Unknow parametr whence: \" .. tostring(whence)) end\r\n\r\n  if self._pos < 0 then self._pos = 0 \r\n  elseif self._pos >= #self._data then \r\n    self._data = self._data .. ('\\0'):rep(#self._data - self._pos)\r\n  end\r\n  \r\n  self:_validate()\r\n  return self._pos\r\nend",
    "type": "function"
  }, {
    "id": 32,
    "text": "offset = offset or 0",
    "type": "statement:assign"
  }, {
    "id": 33,
    "text": "whence = whence or \"cur\"",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "if     whence == \"set\" then self._pos = offset\r\n  elseif whence == \"cur\" then self._pos = self._pos + offset\r\n  elseif whence == \"end\" then self._pos = #self._data + offset\r\n  else error(\"Unknow parametr whence: \" .. tostring(whence)) end",
    "type": "statement:if"
  }, {
    "id": 35,
    "text": "self._pos = offset",
    "type": "statement:assign"
  }, {
    "id": 36,
    "text": "self._pos = self._pos + offset",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "self._pos = #self._data + offset",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "error(\"Unknow parametr whence: \" .. tostring(whence))",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "if self._pos < 0 then self._pos = 0 \r\n  elseif self._pos >= #self._data then \r\n    self._data = self._data .. ('\\0'):rep(#self._data - self._pos)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 40,
    "text": "self._pos = 0",
    "type": "statement:assign"
  }, {
    "id": 41,
    "text": "self._data = self._data .. ('\\0'):rep(#self._data - self._pos)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 43,
    "text": "function Stream:close()\r\n  \r\nend",
    "type": "function"
  }, {
    "id": 44,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 45,
    "text": "function Stream:__tostring()\r\n  return self._data\r\nend",
    "type": "function"
  }, {
    "id": 46,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 47,
    "text": "local function execute (cmd,quiet)\r\n  if quiet then\r\n    local null = \" > \"..(IS_WINDOWS and 'NUL' or '/dev/null')..\" 2>&1\"\r\n    cmd = cmd .. null\r\n  end\r\n  local res1,res2,res2 = os.execute(cmd)\r\n  if not IS_LUA52 then\r\n    return res1==0, res1\r\n  else\r\n    return not not res1, res2\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 48,
    "text": "if quiet then\r\n    local null = \" > \"..(IS_WINDOWS and 'NUL' or '/dev/null')..\" 2>&1\"\r\n    cmd = cmd .. null\r\n  end",
    "type": "statement:if"
  }, {
    "id": 49,
    "text": "local null = \" > \"..(IS_WINDOWS and 'NUL' or '/dev/null')..\" 2>&1\"",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "cmd = cmd .. null",
    "type": "statement:assign"
  }, {
    "id": 51,
    "text": "local res1,res2,res2 = os.execute(cmd)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "if not IS_LUA52 then\r\n    return res1==0, res1\r\n  else\r\n    return not not res1, res2\r\n  end",
    "type": "statement:if"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "local function write_file(fname, data)\r\n  local h, e = io.open(fname, 'w+b')\r\n  if not h then return nil, e end\r\n  h:write(data)\r\n  h:close()\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 55,
    "text": "local h, e = io.open(fname, 'w+b')",
    "type": "statement:localassign"
  }, {
    "id": 56,
    "text": "if not h then return nil, e end",
    "type": "statement:if"
  }, {
    "id": 57,
    "text": "h:write(data)",
    "type": "statement:functioncall"
  }, {
    "id": 58,
    "text": "h:close()",
    "type": "statement:functioncall"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "local function test_zip(fname, pwd)\r\n  local cmd = \"7z t \"\r\n  if pwd then cmd = cmd .. \" -p\" .. pwd .. \" \" end\r\n  return execute(cmd .. fname, true)\r\nend",
    "type": "function"
  }, {
    "id": 61,
    "text": "local cmd = \"7z t \"",
    "type": "statement:localassign"
  }, {
    "id": 62,
    "text": "if pwd then cmd = cmd .. \" -p\" .. pwd .. \" \" end",
    "type": "statement:if"
  }, {
    "id": 63,
    "text": "cmd = cmd .. \" -p\" .. pwd .. \" \"",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "function() lunit.fail(\"#SKIP: \" .. msg) end",
    "type": "function"
  }, {
    "id": 66,
    "text": "lunit",
    "type": "module"
  }, {
    "id": 67,
    "text": "fail",
    "type": "global function"
  }, {
    "id": 68,
    "text": "module",
    "type": "global function"
  }, {
    "id": 69,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 70,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 71,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 72,
    "text": "module",
    "type": "global function"
  }, {
    "id": 73,
    "text": "execute",
    "type": "global function"
  }, {
    "id": 74,
    "text": "setfenv",
    "type": "global function"
  }, {
    "id": 75,
    "text": "open",
    "type": "global function"
  }, {
    "id": 76,
    "text": "error",
    "type": "global function"
  }, {
    "id": 77,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 78,
    "text": "require",
    "type": "global function"
  }, {
    "id": 79,
    "text": "",
    "type": "variable container"
  }, {
    "id": 80,
    "text": "",
    "type": "require container"
  }, {
    "id": 81,
    "text": "",
    "type": "local variable"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "local variable"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "global variable"
  }, {
    "id": 86,
    "text": "",
    "type": "global variable"
  }, {
    "id": 87,
    "text": "",
    "type": "global variable"
  }, {
    "id": 88,
    "text": "",
    "type": "global variable"
  }, {
    "id": 89,
    "text": "",
    "type": "global variable"
  }, {
    "id": 90,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "interface container"
  }, {
    "id": 92,
    "text": "",
    "type": "interface"
  }, {
    "id": 93,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "local variable"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "local variable"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 100,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "variable container"
  }, {
    "id": 102,
    "text": "",
    "type": "require container"
  }, {
    "id": 103,
    "text": "",
    "type": "local variable"
  }, {
    "id": 104,
    "text": "",
    "type": "n/a"
  }, {
    "id": 105,
    "text": "",
    "type": "local variable"
  }, {
    "id": 106,
    "text": "",
    "type": "n/a"
  }, {
    "id": 107,
    "text": "",
    "type": "local variable"
  }, {
    "id": 108,
    "text": "",
    "type": "n/a"
  }, {
    "id": 109,
    "text": "",
    "type": "local variable"
  }, {
    "id": 110,
    "text": "",
    "type": "n/a"
  }, {
    "id": 111,
    "text": "",
    "type": "local variable"
  }, {
    "id": 112,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 113,
    "text": "",
    "type": "local variable"
  }, {
    "id": 114,
    "text": "",
    "type": "n/a"
  }, {
    "id": 115,
    "text": "",
    "type": "global variable"
  }, {
    "id": 116,
    "text": "",
    "type": "n/a"
  }, {
    "id": 117,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 118,
    "text": "",
    "type": "interface container"
  }, {
    "id": 119,
    "text": "",
    "type": "interface"
  }, {
    "id": 120,
    "text": "",
    "type": "interface"
  }, {
    "id": 121,
    "text": "",
    "type": "interface"
  }, {
    "id": 122,
    "text": "",
    "type": "interface"
  }, {
    "id": 123,
    "text": "",
    "type": "interface"
  } ]
}