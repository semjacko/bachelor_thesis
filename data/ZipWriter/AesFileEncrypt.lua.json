{
  "_filename": "AesFileEncrypt.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/ZipWriter/lua/ZipWriter/encrypt/aes/AesFileEncrypt.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 2,
    "label": "has",
    "to": 6
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 7,
    "label": "has",
    "to": 5
  }, {
    "from": 7,
    "label": "has",
    "to": 11
  }, {
    "from": 12,
    "label": "has",
    "to": 13
  }, {
    "from": 12,
    "label": "has",
    "to": 14
  }, {
    "from": 12,
    "label": "has",
    "to": 15
  }, {
    "from": 12,
    "label": "has",
    "to": 16
  }, {
    "from": 12,
    "label": "has",
    "to": 17
  }, {
    "from": 12,
    "label": "has",
    "to": 18
  }, {
    "from": 12,
    "label": "has",
    "to": 19
  }, {
    "from": 12,
    "label": "has",
    "to": 20
  }, {
    "from": 20,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 20,
    "label": "has",
    "to": 23
  }, {
    "from": 20,
    "label": "has",
    "to": 24
  }, {
    "from": 20,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 26,
    "label": "has",
    "to": 27
  }, {
    "from": 25,
    "label": "has",
    "to": 28
  }, {
    "from": 25,
    "label": "has",
    "to": 29
  }, {
    "from": 25,
    "label": "has",
    "to": 30
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 25,
    "label": "has",
    "to": 32
  }, {
    "from": 20,
    "label": "has",
    "to": 33
  }, {
    "from": 33,
    "label": "has",
    "to": 34
  }, {
    "from": 33,
    "label": "has",
    "to": 35
  }, {
    "from": 12,
    "label": "has",
    "to": 5
  }, {
    "from": 12,
    "label": "has",
    "to": 5
  }, {
    "from": 12,
    "label": "has",
    "to": 36
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 5
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 40,
    "label": "has",
    "to": 41
  }, {
    "from": 40,
    "label": "has",
    "to": 42
  }, {
    "from": 40,
    "label": "has",
    "to": 43
  }, {
    "from": 40,
    "label": "has",
    "to": 44
  }, {
    "from": 40,
    "label": "has",
    "to": 45
  }, {
    "from": 40,
    "label": "has",
    "to": 46
  }, {
    "from": 40,
    "label": "has",
    "to": 47
  }, {
    "from": 40,
    "label": "has",
    "to": 48
  }, {
    "from": 40,
    "label": "has",
    "to": 49
  }, {
    "from": 40,
    "label": "has",
    "to": 50
  }, {
    "from": 40,
    "label": "has",
    "to": 51
  }, {
    "from": 40,
    "label": "has",
    "to": 52
  }, {
    "from": 40,
    "label": "has",
    "to": 53
  }, {
    "from": 40,
    "label": "has",
    "to": 54
  }, {
    "from": 40,
    "label": "has",
    "to": 55
  }, {
    "from": 40,
    "label": "has",
    "to": 56
  }, {
    "from": 40,
    "label": "has",
    "to": 57
  }, {
    "from": 40,
    "label": "has",
    "to": 5
  }, {
    "from": 40,
    "label": "has",
    "to": 58
  }, {
    "from": 59,
    "label": "has",
    "to": 60
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 61,
    "label": "has",
    "to": 62
  }, {
    "from": 61,
    "label": "has",
    "to": 63
  }, {
    "from": 59,
    "label": "has",
    "to": 5
  }, {
    "from": 59,
    "label": "has",
    "to": 64
  }, {
    "from": 65,
    "label": "has",
    "to": 5
  }, {
    "from": 65,
    "label": "has",
    "to": 66
  }, {
    "from": 65,
    "label": "has",
    "to": 67
  }, {
    "from": 65,
    "label": "has",
    "to": 5
  }, {
    "from": 65,
    "label": "has",
    "to": 68
  }, {
    "from": 65,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 65,
    "label": "has",
    "to": 5
  }, {
    "from": 65,
    "label": "has",
    "to": 71
  }, {
    "from": 72,
    "label": "has",
    "to": 73
  }, {
    "from": 72,
    "label": "has",
    "to": 5
  }, {
    "from": 72,
    "label": "has",
    "to": 66
  }, {
    "from": 72,
    "label": "has",
    "to": 67
  }, {
    "from": 72,
    "label": "has",
    "to": 5
  }, {
    "from": 72,
    "label": "has",
    "to": 68
  }, {
    "from": 72,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 72,
    "label": "has",
    "to": 5
  }, {
    "from": 72,
    "label": "has",
    "to": 74
  }, {
    "from": 75,
    "label": "has",
    "to": 76
  }, {
    "from": 75,
    "label": "has",
    "to": 77
  }, {
    "from": 75,
    "label": "has",
    "to": 78
  }, {
    "from": 75,
    "label": "has",
    "to": 79
  }, {
    "from": 75,
    "label": "has",
    "to": 80
  }, {
    "from": 75,
    "label": "has",
    "to": 81
  }, {
    "from": 75,
    "label": "has",
    "to": 82
  }, {
    "from": 82,
    "label": "has",
    "to": 83
  }, {
    "from": 75,
    "label": "has",
    "to": 84
  }, {
    "from": 75,
    "label": "has",
    "to": 85
  }, {
    "from": 75,
    "label": "has",
    "to": 86
  }, {
    "from": 75,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 90
  }, {
    "from": 87,
    "label": "has",
    "to": 91
  }, {
    "from": 87,
    "label": "has",
    "to": 92
  }, {
    "from": 87,
    "label": "has",
    "to": 93
  }, {
    "from": 93,
    "label": "has",
    "to": 94
  }, {
    "from": 87,
    "label": "has",
    "to": 95
  }, {
    "from": 87,
    "label": "has",
    "to": 96
  }, {
    "from": 96,
    "label": "has",
    "to": 97
  }, {
    "from": 87,
    "label": "has",
    "to": 98
  }, {
    "from": 98,
    "label": "has",
    "to": 99
  }, {
    "from": 98,
    "label": "has",
    "to": 100
  }, {
    "from": 75,
    "label": "has",
    "to": 101
  }, {
    "from": 75,
    "label": "has",
    "to": 5
  }, {
    "from": 75,
    "label": "has",
    "to": 102
  }, {
    "from": 103,
    "label": "has",
    "to": 104
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 104,
    "label": "has",
    "to": 106
  }, {
    "from": 103,
    "label": "has",
    "to": 107
  }, {
    "from": 103,
    "label": "has",
    "to": 108
  }, {
    "from": 108,
    "label": "has",
    "to": 109
  }, {
    "from": 103,
    "label": "has",
    "to": 5
  }, {
    "from": 103,
    "label": "has",
    "to": 110
  }, {
    "from": 111,
    "label": "has",
    "to": 112
  }, {
    "from": 111,
    "label": "has",
    "to": 5
  }, {
    "from": 111,
    "label": "has",
    "to": 113
  }, {
    "from": 114,
    "label": "has",
    "to": 115
  }, {
    "from": 114,
    "label": "has",
    "to": 5
  }, {
    "from": 114,
    "label": "has",
    "to": 116
  }, {
    "from": 117,
    "label": "has",
    "to": 118
  }, {
    "from": 118,
    "label": "has",
    "to": 119
  }, {
    "from": 119,
    "label": "has",
    "to": 105
  }, {
    "from": 118,
    "label": "has",
    "to": 120
  }, {
    "from": 117,
    "label": "has",
    "to": 106
  }, {
    "from": 117,
    "label": "has",
    "to": 121
  }, {
    "from": 121,
    "label": "has",
    "to": 122
  }, {
    "from": 117,
    "label": "has",
    "to": 123
  }, {
    "from": 117,
    "label": "has",
    "to": 124
  }, {
    "from": 117,
    "label": "has",
    "to": 125
  }, {
    "from": 117,
    "label": "has",
    "to": 126
  }, {
    "from": 117,
    "label": "has",
    "to": 127
  }, {
    "from": 117,
    "label": "has",
    "to": 128
  }, {
    "from": 117,
    "label": "has",
    "to": 129
  }, {
    "from": 117,
    "label": "has",
    "to": 5
  }, {
    "from": 117,
    "label": "has",
    "to": 130
  }, {
    "from": 131,
    "label": "has",
    "to": 132
  }, {
    "from": 131,
    "label": "has",
    "to": 133
  }, {
    "from": 134,
    "label": "has",
    "to": 5
  }, {
    "from": 134,
    "label": "has",
    "to": 135
  }, {
    "from": 136,
    "label": "has",
    "to": 5
  }, {
    "from": 136,
    "label": "has",
    "to": 137
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 139,
    "label": "has",
    "to": 141
  }, {
    "from": 141,
    "label": "has",
    "to": 142
  }, {
    "from": 142,
    "label": "has",
    "to": 5
  }, {
    "from": 141,
    "label": "has",
    "to": 143
  }, {
    "from": 139,
    "label": "has",
    "to": 144
  }, {
    "from": 139,
    "label": "has",
    "to": 145
  }, {
    "from": 145,
    "label": "has",
    "to": 5
  }, {
    "from": 138,
    "label": "has",
    "to": 5
  }, {
    "from": 138,
    "label": "has",
    "to": 146
  }, {
    "from": 147,
    "label": "has",
    "to": 5
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 149,
    "label": "has",
    "to": 5
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 151,
    "label": "has",
    "to": 5
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 153,
    "label": "has",
    "to": 5
  }, {
    "from": 153,
    "label": "has",
    "to": 154
  }, {
    "from": 155,
    "label": "has",
    "to": 5
  }, {
    "from": 155,
    "label": "has",
    "to": 156
  }, {
    "from": 157,
    "label": "has",
    "to": 158
  }, {
    "from": 157,
    "label": "has",
    "to": 159
  }, {
    "from": 157,
    "label": "has",
    "to": 160
  }, {
    "from": 157,
    "label": "has",
    "to": 161
  }, {
    "from": 157,
    "label": "has",
    "to": 162
  }, {
    "from": 157,
    "label": "has",
    "to": 163
  }, {
    "from": 157,
    "label": "has",
    "to": 164
  }, {
    "from": 157,
    "label": "has",
    "to": 165
  }, {
    "from": 166,
    "label": "has",
    "to": 167
  }, {
    "from": 166,
    "label": "has",
    "to": 168
  }, {
    "from": 166,
    "label": "has",
    "to": 169
  }, {
    "from": 166,
    "label": "has",
    "to": 170
  }, {
    "from": 166,
    "label": "has",
    "to": 171
  }, {
    "from": 166,
    "label": "has",
    "to": 172
  }, {
    "from": 166,
    "label": "has",
    "to": 173
  }, {
    "from": 166,
    "label": "has",
    "to": 174
  }, {
    "from": 166,
    "label": "has",
    "to": 175
  }, {
    "from": 166,
    "label": "has",
    "to": 176
  }, {
    "from": 166,
    "label": "has",
    "to": 177
  }, {
    "from": 166,
    "label": "has",
    "to": 178
  }, {
    "from": 166,
    "label": "has",
    "to": 179
  }, {
    "from": 166,
    "label": "has",
    "to": 180
  }, {
    "from": 166,
    "label": "has",
    "to": 181
  }, {
    "from": 166,
    "label": "has",
    "to": 182
  }, {
    "from": 183,
    "label": "has",
    "to": 184
  }, {
    "from": 183,
    "label": "has",
    "to": 185
  }, {
    "from": 183,
    "label": "has",
    "to": 186
  }, {
    "from": 187,
    "label": "has",
    "to": 66
  }, {
    "from": 187,
    "label": "has",
    "to": 67
  }, {
    "from": 187,
    "label": "has",
    "to": 5
  }, {
    "from": 187,
    "label": "has",
    "to": 68
  }, {
    "from": 187,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 187,
    "label": "has",
    "to": 5
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 189,
    "label": "has",
    "to": 66
  }, {
    "from": 189,
    "label": "has",
    "to": 67
  }, {
    "from": 189,
    "label": "has",
    "to": 5
  }, {
    "from": 189,
    "label": "has",
    "to": 68
  }, {
    "from": 189,
    "label": "has",
    "to": 69
  }, {
    "from": 69,
    "label": "has",
    "to": 70
  }, {
    "from": 189,
    "label": "has",
    "to": 5
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 191,
    "label": "has",
    "to": 5
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 40,
    "label": "calls",
    "to": 199
  }, {
    "from": 75,
    "label": "calls",
    "to": 211
  }, {
    "from": 166,
    "label": "calls",
    "to": 211
  }, {
    "from": 138,
    "label": "calls",
    "to": 216
  }, {
    "from": 193,
    "label": "calls",
    "to": 212
  }, {
    "from": 40,
    "label": "calls",
    "to": 212
  }, {
    "from": 40,
    "label": "calls",
    "to": 212
  }, {
    "from": 40,
    "label": "calls",
    "to": 212
  }, {
    "from": 75,
    "label": "calls",
    "to": 212
  }, {
    "from": 75,
    "label": "calls",
    "to": 212
  }, {
    "from": 75,
    "label": "calls",
    "to": 212
  }, {
    "from": 75,
    "label": "calls",
    "to": 212
  }, {
    "from": 75,
    "label": "calls",
    "to": 212
  }, {
    "from": 138,
    "label": "calls",
    "to": 212
  }, {
    "from": 157,
    "label": "calls",
    "to": 212
  }, {
    "from": 166,
    "label": "calls",
    "to": 212
  }, {
    "from": 166,
    "label": "calls",
    "to": 212
  }, {
    "from": 12,
    "label": "calls",
    "to": 204
  }, {
    "from": 103,
    "label": "calls",
    "to": 204
  }, {
    "from": 193,
    "label": "calls",
    "to": 226
  }, {
    "from": 193,
    "label": "calls",
    "to": 226
  }, {
    "from": 193,
    "label": "calls",
    "to": 226
  }, {
    "from": 193,
    "label": "calls",
    "to": 226
  }, {
    "from": 40,
    "label": "calls",
    "to": 12
  }, {
    "from": 157,
    "label": "calls",
    "to": 12
  }, {
    "from": 75,
    "label": "calls",
    "to": 59
  }, {
    "from": 12,
    "label": "calls",
    "to": 213
  }, {
    "from": 138,
    "label": "calls",
    "to": 220
  }, {
    "from": 183,
    "label": "calls",
    "to": 157
  }, {
    "from": 12,
    "label": "calls",
    "to": 219
  }, {
    "from": 12,
    "label": "calls",
    "to": 219
  }, {
    "from": 12,
    "label": "calls",
    "to": 219
  }, {
    "from": 72,
    "label": "calls",
    "to": 209
  }, {
    "from": 103,
    "label": "calls",
    "to": 209
  }, {
    "from": 75,
    "label": "calls",
    "to": 223
  }, {
    "from": 75,
    "label": "calls",
    "to": 222
  }, {
    "from": 138,
    "label": "calls",
    "to": 222
  }, {
    "from": 7,
    "label": "calls",
    "to": 202
  }, {
    "from": 12,
    "label": "calls",
    "to": 214
  }, {
    "from": 12,
    "label": "calls",
    "to": 214
  }, {
    "from": 59,
    "label": "calls",
    "to": 214
  }, {
    "from": 40,
    "label": "calls",
    "to": 7
  }, {
    "from": 40,
    "label": "calls",
    "to": 7
  }, {
    "from": 40,
    "label": "calls",
    "to": 7
  }, {
    "from": 75,
    "label": "calls",
    "to": 7
  }, {
    "from": 75,
    "label": "calls",
    "to": 7
  }, {
    "from": 153,
    "label": "calls",
    "to": 7
  }, {
    "from": 157,
    "label": "calls",
    "to": 7
  }, {
    "from": 157,
    "label": "calls",
    "to": 7
  }, {
    "from": 157,
    "label": "calls",
    "to": 7
  }, {
    "from": 166,
    "label": "calls",
    "to": 7
  }, {
    "from": 12,
    "label": "calls",
    "to": 206
  }, {
    "from": 75,
    "label": "calls",
    "to": 206
  }, {
    "from": 157,
    "label": "calls",
    "to": 207
  }, {
    "from": 193,
    "label": "calls",
    "to": 2
  }, {
    "from": 193,
    "label": "calls",
    "to": 2
  }, {
    "from": 75,
    "label": "calls",
    "to": 72
  }, {
    "from": 2,
    "label": "calls",
    "to": 215
  }, {
    "from": 37,
    "label": "calls",
    "to": 224
  }, {
    "from": 75,
    "label": "calls",
    "to": 210
  }, {
    "from": 12,
    "label": "calls",
    "to": 225
  }, {
    "from": 166,
    "label": "calls",
    "to": 200
  }, {
    "from": 166,
    "label": "calls",
    "to": 200
  }, {
    "from": 166,
    "label": "calls",
    "to": 200
  }, {
    "from": 166,
    "label": "calls",
    "to": 200
  }, {
    "from": 12,
    "label": "calls",
    "to": 208
  }, {
    "from": 40,
    "label": "calls",
    "to": 208
  }, {
    "from": 183,
    "label": "calls",
    "to": 166
  }, {
    "from": 12,
    "label": "calls",
    "to": 217
  }, {
    "from": 75,
    "label": "calls",
    "to": 217
  }, {
    "from": 75,
    "label": "calls",
    "to": 217
  }, {
    "from": 1,
    "label": "contains",
    "to": 193
  }, {
    "from": 193,
    "label": "declares",
    "to": 2
  }, {
    "from": 193,
    "label": "declares",
    "to": 7
  }, {
    "from": 193,
    "label": "declares",
    "to": 12
  }, {
    "from": 193,
    "label": "declares",
    "to": 37
  }, {
    "from": 193,
    "label": "declares",
    "to": 40
  }, {
    "from": 193,
    "label": "declares",
    "to": 59
  }, {
    "from": 193,
    "label": "declares",
    "to": 65
  }, {
    "from": 193,
    "label": "declares",
    "to": 72
  }, {
    "from": 193,
    "label": "declares",
    "to": 75
  }, {
    "from": 193,
    "label": "declares",
    "to": 103
  }, {
    "from": 193,
    "label": "declares",
    "to": 111
  }, {
    "from": 193,
    "label": "declares",
    "to": 114
  }, {
    "from": 193,
    "label": "declares",
    "to": 117
  }, {
    "from": 193,
    "label": "declares",
    "to": 131
  }, {
    "from": 193,
    "label": "declares",
    "to": 134
  }, {
    "from": 193,
    "label": "declares",
    "to": 136
  }, {
    "from": 193,
    "label": "declares",
    "to": 138
  }, {
    "from": 193,
    "label": "declares",
    "to": 147
  }, {
    "from": 193,
    "label": "declares",
    "to": 149
  }, {
    "from": 193,
    "label": "declares",
    "to": 151
  }, {
    "from": 193,
    "label": "declares",
    "to": 153
  }, {
    "from": 193,
    "label": "declares",
    "to": 155
  }, {
    "from": 193,
    "label": "declares",
    "to": 157
  }, {
    "from": 193,
    "label": "declares",
    "to": 166
  }, {
    "from": 193,
    "label": "declares",
    "to": 183
  }, {
    "from": 193,
    "label": "declares",
    "to": 187
  }, {
    "from": 193,
    "label": "declares",
    "to": 189
  }, {
    "from": 193,
    "label": "declares",
    "to": 191
  }, {
    "from": 194,
    "label": "calls",
    "to": 191
  }, {
    "from": 194,
    "label": "calls",
    "to": 191
  }, {
    "from": 195,
    "label": "calls",
    "to": 191
  }, {
    "from": 196,
    "label": "calls",
    "to": 191
  }, {
    "from": 194,
    "label": "calls",
    "to": 191
  }, {
    "from": 194,
    "label": "calls",
    "to": 191
  }, {
    "from": 194,
    "label": "calls",
    "to": 191
  }, {
    "from": 194,
    "label": "calls",
    "to": 191
  }, {
    "from": 194,
    "label": "calls",
    "to": 191
  }, {
    "from": 197,
    "label": "calls",
    "to": 191
  }, {
    "from": 1,
    "label": "declares",
    "to": 218
  }, {
    "from": 1,
    "label": "declares",
    "to": 221
  }, {
    "from": 1,
    "label": "contains",
    "to": 227
  }, {
    "from": 1,
    "label": "contains",
    "to": 228
  }, {
    "from": 227,
    "label": "initializes",
    "to": 229
  }, {
    "from": 229,
    "label": "assigns",
    "to": 230
  }, {
    "from": 227,
    "label": "initializes",
    "to": 231
  }, {
    "from": 231,
    "label": "assigns",
    "to": 232
  }, {
    "from": 227,
    "label": "initializes",
    "to": 233
  }, {
    "from": 233,
    "label": "assigns",
    "to": 234
  }, {
    "from": 227,
    "label": "initializes",
    "to": 235
  }, {
    "from": 235,
    "label": "assigns",
    "to": 236
  }, {
    "from": 227,
    "label": "initializes",
    "to": 237
  }, {
    "from": 237,
    "label": "assigns",
    "to": 238
  }, {
    "from": 227,
    "label": "initializes",
    "to": 239
  }, {
    "from": 239,
    "label": "assigns",
    "to": 240
  }, {
    "from": 227,
    "label": "initializes",
    "to": 241
  }, {
    "from": 241,
    "label": "assigns",
    "to": 242
  }, {
    "from": 242,
    "label": "assigns",
    "to": 243
  }, {
    "from": 243,
    "label": "assigns",
    "to": 244
  }, {
    "from": 242,
    "label": "assigns",
    "to": 245
  }, {
    "from": 245,
    "label": "assigns",
    "to": 246
  }, {
    "from": 242,
    "label": "assigns",
    "to": 247
  }, {
    "from": 247,
    "label": "assigns",
    "to": 248
  }, {
    "from": 227,
    "label": "initializes",
    "to": 249
  }, {
    "from": 249,
    "label": "assigns",
    "to": 250
  }, {
    "from": 227,
    "label": "initializes",
    "to": 251
  }, {
    "from": 251,
    "label": "assigns",
    "to": 252
  }, {
    "from": 228,
    "label": "initializes",
    "to": 253
  }, {
    "from": 253,
    "label": "requires",
    "to": 198
  }, {
    "from": 228,
    "label": "initializes",
    "to": 254
  }, {
    "from": 254,
    "label": "requires",
    "to": 201
  }, {
    "from": 228,
    "label": "initializes",
    "to": 255
  }, {
    "from": 255,
    "label": "requires",
    "to": 203
  }, {
    "from": 228,
    "label": "initializes",
    "to": 256
  }, {
    "from": 256,
    "label": "requires",
    "to": 205
  }, {
    "from": 1,
    "label": "provides",
    "to": 257
  }, {
    "from": 257,
    "label": "provides",
    "to": 258
  }, {
    "from": 249,
    "label": "represents",
    "to": 259
  }, {
    "from": 257,
    "label": "provides",
    "to": 259
  }, {
    "from": 249,
    "label": "contains",
    "to": 183
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "AesFileEncrypt",
    "type": "module"
  }, {
    "id": 2,
    "text": "local function prequire(m) \r\n  local ok, err = pcall(require, m) \r\n  if not ok then return nil, err end\r\n  return err\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local ok, err = pcall(require, m)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 5,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 6,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 7,
    "text": "local function H(t, b, e)\r\n  local str = ''\r\n  for i = b or 1, e or #t do\r\n    str = str .. (string.char(t[i]))\r\n  end\r\n  return str\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "local str = ''",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "for i = b or 1, e or #t do\r\n    str = str .. (string.char(t[i]))\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 10,
    "text": "str = str .. (string.char(t[i]))",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 12,
    "text": "local function derive_key(pwd, salt, iter, key_len)\r\n  local sbyte   = string.byte\r\n  local schar   = string.char\r\n  local bxor    = bit.bxor\r\n\r\n  local key = {}\r\n  local uu, u2, ux = {}, {}, {}\r\n  local n_blk = math.floor(1 + (key_len - 1) / SHA1_DIGEST_SIZE)\r\n  local c3 = crypto.hmac.new('sha1', pwd)\r\n\r\n  for i = 1, n_blk do\r\n    for j = 1, SHA1_DIGEST_SIZE do ux[j], uu[j] = 0 end\r\n    uu[1], uu[2], uu[3], uu[4] = bit.rshift(i, 24), bit.rshift(i, 16), bit.rshift(i,  8), i\r\n\r\n    c3:update(salt)\r\n    for j = 1, iter do \r\n      for _, b in ipairs(uu) do c3:update(schar(b)) end\r\n      local str = c3:final(nil, true)\r\n\r\n      -- assert(#str == 20)\r\n      uu[1],  uu[2],  uu[3],  uu[4], uu[5],  uu[6],  uu[7],  uu[8], uu[9],  uu[10],\r\n      uu[11], uu[12], uu[13], uu[14], uu[15], uu[16], uu[17], uu[18], uu[19], uu[20]\r\n      = sbyte(str, 1, SHA1_DIGEST_SIZE)\r\n\r\n      for k = 1, #uu do ux[k] = bxor( ux[k], uu[k] ) end\r\n      c3:reset()\r\n    end\r\n\r\n    for _, b in ipairs(ux) do\r\n      table.insert(key, b)\r\n      if #key >= key_len then\r\n        return key\r\n      end\r\n    end\r\n  end\r\n  return key\r\nend",
    "type": "function"
  }, {
    "id": 13,
    "text": "local sbyte   = string.byte",
    "type": "statement:localassign"
  }, {
    "id": 14,
    "text": "local schar   = string.char",
    "type": "statement:localassign"
  }, {
    "id": 15,
    "text": "local bxor    = bit.bxor",
    "type": "statement:localassign"
  }, {
    "id": 16,
    "text": "local key = {}",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "local uu, u2, ux = {}, {}, {}",
    "type": "statement:localassign"
  }, {
    "id": 18,
    "text": "local n_blk = math.floor(1 + (key_len - 1) / SHA1_DIGEST_SIZE)",
    "type": "statement:localassign"
  }, {
    "id": 19,
    "text": "local c3 = crypto.hmac.new('sha1', pwd)",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "for i = 1, n_blk do\r\n    for j = 1, SHA1_DIGEST_SIZE do ux[j], uu[j] = 0 end\r\n    uu[1], uu[2], uu[3], uu[4] = bit.rshift(i, 24), bit.rshift(i, 16), bit.rshift(i,  8), i\r\n\r\n    c3:update(salt)\r\n    for j = 1, iter do \r\n      for _, b in ipairs(uu) do c3:update(schar(b)) end\r\n      local str = c3:final(nil, true)\r\n\r\n      -- assert(#str == 20)\r\n      uu[1],  uu[2],  uu[3],  uu[4], uu[5],  uu[6],  uu[7],  uu[8], uu[9],  uu[10],\r\n      uu[11], uu[12], uu[13], uu[14], uu[15], uu[16], uu[17], uu[18], uu[19], uu[20]\r\n      = sbyte(str, 1, SHA1_DIGEST_SIZE)\r\n\r\n      for k = 1, #uu do ux[k] = bxor( ux[k], uu[k] ) end\r\n      c3:reset()\r\n    end\r\n\r\n    for _, b in ipairs(ux) do\r\n      table.insert(key, b)\r\n      if #key >= key_len then\r\n        return key\r\n      end\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 21,
    "text": "for j = 1, SHA1_DIGEST_SIZE do ux[j], uu[j] = 0 end",
    "type": "statement:numericfor"
  }, {
    "id": 22,
    "text": "ux[j], uu[j] = 0",
    "type": "statement:assign"
  }, {
    "id": 23,
    "text": "uu[1], uu[2], uu[3], uu[4] = bit.rshift(i, 24), bit.rshift(i, 16), bit.rshift(i,  8), i",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "c3:update(salt)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "for j = 1, iter do \r\n      for _, b in ipairs(uu) do c3:update(schar(b)) end\r\n      local str = c3:final(nil, true)\r\n\r\n      -- assert(#str == 20)\r\n      uu[1],  uu[2],  uu[3],  uu[4], uu[5],  uu[6],  uu[7],  uu[8], uu[9],  uu[10],\r\n      uu[11], uu[12], uu[13], uu[14], uu[15], uu[16], uu[17], uu[18], uu[19], uu[20]\r\n      = sbyte(str, 1, SHA1_DIGEST_SIZE)\r\n\r\n      for k = 1, #uu do ux[k] = bxor( ux[k], uu[k] ) end\r\n      c3:reset()\r\n    end",
    "type": "statement:numericfor"
  }, {
    "id": 26,
    "text": "for _, b in ipairs(uu) do c3:update(schar(b)) end",
    "type": "statement:genericfor"
  }, {
    "id": 27,
    "text": "c3:update(schar(b))",
    "type": "statement:functioncall"
  }, {
    "id": 28,
    "text": "local str = c3:final(nil, true)",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "uu[1],  uu[2],  uu[3],  uu[4], uu[5],  uu[6],  uu[7],  uu[8], uu[9],  uu[10],\r\n      uu[11], uu[12], uu[13], uu[14], uu[15], uu[16], uu[17], uu[18], uu[19], uu[20]\r\n      = sbyte(str, 1, SHA1_DIGEST_SIZE)",
    "type": "statement:assign"
  }, {
    "id": 30,
    "text": "for k = 1, #uu do ux[k] = bxor( ux[k], uu[k] ) end",
    "type": "statement:numericfor"
  }, {
    "id": 31,
    "text": "ux[k] = bxor( ux[k], uu[k] )",
    "type": "statement:assign"
  }, {
    "id": 32,
    "text": "c3:reset()",
    "type": "statement:functioncall"
  }, {
    "id": 33,
    "text": "for _, b in ipairs(ux) do\r\n      table.insert(key, b)\r\n      if #key >= key_len then\r\n        return key\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 34,
    "text": "table.insert(key, b)",
    "type": "statement:functioncall"
  }, {
    "id": 35,
    "text": "if #key >= key_len then\r\n        return key\r\n      end",
    "type": "statement:if"
  }, {
    "id": 36,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 37,
    "text": "function AesFileEncrypt:new(block_size)\r\n  local o = setmetatable({\r\n    private_ = {\r\n      block_size = block_size or BLOCK_SIZE;\r\n      encrypt    = true;\r\n    }\r\n  }, self)\r\n  return o\r\nend",
    "type": "function"
  }, {
    "id": 38,
    "text": "local o = setmetatable({\r\n    private_ = {\r\n      block_size = block_size or BLOCK_SIZE;\r\n      encrypt    = true;\r\n    }\r\n  }, self)",
    "type": "statement:localassign"
  }, {
    "id": 39,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 40,
    "text": "function AesFileEncrypt:open(mode, pwd, salt)\r\n  self.private_.mode = assert(AES_MODES[mode], 'unknown mode: ' .. mode)\r\n\r\n  assert(not self.private_.salt, \"alrady opened\")\r\n  salt = salt or crypto.rand.bytes(self.private_.mode.salt)\r\n  assert(#salt == self.private_.mode.salt, 'Expected: ' .. self.private_.mode.salt .. ' got: ' .. #salt )\r\n  self.private_.salt = salt\r\n  local key_len = self.private_.mode.key\r\n\r\n  local key = derive_key(pwd, salt, KEYING_ITERATIONS, 2 * key_len + PWD_VER_LENGTH)\r\n\r\n  local aes_key = H(key, 1, key_len)\r\n  local mac_key = H(key, 1 + key_len,  2 * key_len)\r\n  local pwd_ver = H(key, 1 + 2 * key_len, 2 * key_len + PWD_VER_LENGTH)\r\n\r\n  local mac     = crypto.hmac.new('sha1', mac_key)\r\n  local nonce   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}\r\n  \r\n  self.private_.mac     = mac\r\n  self.private_.nonce   = nonce\r\n  self.private_.aes_key = aes_key\r\n  self.private_.mac_key = mac_key\r\n  self.private_.pwd_ver = pwd_ver\r\n\r\n  return salt, pwd_ver\r\nend",
    "type": "function"
  }, {
    "id": 41,
    "text": "self.private_.mode = assert(AES_MODES[mode], 'unknown mode: ' .. mode)",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "assert(not self.private_.salt, \"alrady opened\")",
    "type": "statement:functioncall"
  }, {
    "id": 43,
    "text": "salt = salt or crypto.rand.bytes(self.private_.mode.salt)",
    "type": "statement:assign"
  }, {
    "id": 44,
    "text": "assert(#salt == self.private_.mode.salt, 'Expected: ' .. self.private_.mode.salt .. ' got: ' .. #salt )",
    "type": "statement:functioncall"
  }, {
    "id": 45,
    "text": "self.private_.salt = salt",
    "type": "statement:assign"
  }, {
    "id": 46,
    "text": "local key_len = self.private_.mode.key",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "local key = derive_key(pwd, salt, KEYING_ITERATIONS, 2 * key_len + PWD_VER_LENGTH)",
    "type": "statement:localassign"
  }, {
    "id": 48,
    "text": "local aes_key = H(key, 1, key_len)",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "local mac_key = H(key, 1 + key_len,  2 * key_len)",
    "type": "statement:localassign"
  }, {
    "id": 50,
    "text": "local pwd_ver = H(key, 1 + 2 * key_len, 2 * key_len + PWD_VER_LENGTH)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "local mac     = crypto.hmac.new('sha1', mac_key)",
    "type": "statement:localassign"
  }, {
    "id": 52,
    "text": "local nonce   = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}",
    "type": "statement:localassign"
  }, {
    "id": 53,
    "text": "self.private_.mac     = mac",
    "type": "statement:assign"
  }, {
    "id": 54,
    "text": "self.private_.nonce   = nonce",
    "type": "statement:assign"
  }, {
    "id": 55,
    "text": "self.private_.aes_key = aes_key",
    "type": "statement:assign"
  }, {
    "id": 56,
    "text": "self.private_.mac_key = mac_key",
    "type": "statement:assign"
  }, {
    "id": 57,
    "text": "self.private_.pwd_ver = pwd_ver",
    "type": "statement:assign"
  }, {
    "id": 58,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 59,
    "text": "local function inc_nonce(nonce)\r\n  for k, v in ipairs(nonce) do\r\n    if v == 255 then nonce[k] = 0\r\n    else nonce[k] = v + 1 return end\r\n  end\r\nend",
    "type": "function"
  }, {
    "id": 60,
    "text": "for k, v in ipairs(nonce) do\r\n    if v == 255 then nonce[k] = 0\r\n    else nonce[k] = v + 1 return end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 61,
    "text": "if v == 255 then nonce[k] = 0\r\n    else nonce[k] = v + 1 return end",
    "type": "statement:if"
  }, {
    "id": 62,
    "text": "nonce[k] = 0",
    "type": "statement:assign"
  }, {
    "id": 63,
    "text": "nonce[k] = v + 1",
    "type": "statement:assign"
  }, {
    "id": 64,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 65,
    "text": "local function ichunks(len, chunk_size)\r\n  return function(_, b)\r\n    b = b + chunk_size\r\n    if b > len then return nil end\r\n    local e = b + chunk_size - 1\r\n    if e > len then e = len end\r\n    return b, e\r\n  end, nil, -chunk_size + 1\r\nend",
    "type": "function"
  }, {
    "id": 66,
    "text": "b = b + chunk_size",
    "type": "statement:assign"
  }, {
    "id": 67,
    "text": "if b > len then return nil end",
    "type": "statement:if"
  }, {
    "id": 68,
    "text": "local e = b + chunk_size - 1",
    "type": "statement:localassign"
  }, {
    "id": 69,
    "text": "if e > len then e = len end",
    "type": "statement:if"
  }, {
    "id": 70,
    "text": "e = len",
    "type": "statement:assign"
  }, {
    "id": 71,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 72,
    "text": "local function chunks(msg, chunk_size, len)\r\n  len = len or #msg\r\n  return function(_, b)\r\n    b = b + chunk_size\r\n    if b > len then return nil end\r\n    local e = b + chunk_size - 1\r\n    if e > len then e = len end\r\n    return b, (string.sub(msg, b, e))\r\n  end, nil, -chunk_size + 1\r\nend",
    "type": "function"
  }, {
    "id": 73,
    "text": "len = len or #msg",
    "type": "statement:assign"
  }, {
    "id": 74,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 75,
    "text": "function AesFileEncrypt:update_impl(encrypt, msg, len)\r\n  local chunk_size = assert(self.private_.block_size)\r\n  local nonce      = assert(self.private_.nonce)\r\n  local aes_key    = assert(self.private_.aes_key)\r\n  local mac        = assert(self.private_.mac)\r\n  local writer     = self.private_.writer\r\n  local data if not writer then data = {} end\r\n\r\n  local buf        = {}\r\n  local sbyte      = string.byte\r\n  local aes_name   = self.private_.mode.name .. '-cbc'\r\n\r\n  for b, chunk in chunks(msg, chunk_size, len) do\r\n    if not encrypt then mac:update(chunk) end\r\n    inc_nonce(nonce)\r\n    local tmp = crypto.encrypt(aes_name, H(nonce), aes_key)\r\n    assert(#tmp >= chunk_size)\r\n    for i = 1, #chunk do buf[i] = bit.bxor( sbyte(chunk, i), sbyte(tmp, i) ) end\r\n    local enc = H(buf)\r\n    if encrypt then mac:update(enc) end\r\n    if writer then writer(enc) else table.insert(data, enc) end\r\n  end\r\n  if not writer then return table.concat(data) end\r\nend",
    "type": "function"
  }, {
    "id": 76,
    "text": "local chunk_size = assert(self.private_.block_size)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "local nonce      = assert(self.private_.nonce)",
    "type": "statement:localassign"
  }, {
    "id": 78,
    "text": "local aes_key    = assert(self.private_.aes_key)",
    "type": "statement:localassign"
  }, {
    "id": 79,
    "text": "local mac        = assert(self.private_.mac)",
    "type": "statement:localassign"
  }, {
    "id": 80,
    "text": "local writer     = self.private_.writer",
    "type": "statement:localassign"
  }, {
    "id": 81,
    "text": "local data",
    "type": "statement:localassign"
  }, {
    "id": 82,
    "text": "if not writer then data = {} end",
    "type": "statement:if"
  }, {
    "id": 83,
    "text": "data = {}",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "local buf        = {}",
    "type": "statement:localassign"
  }, {
    "id": 85,
    "text": "local sbyte      = string.byte",
    "type": "statement:localassign"
  }, {
    "id": 86,
    "text": "local aes_name   = self.private_.mode.name .. '-cbc'",
    "type": "statement:localassign"
  }, {
    "id": 87,
    "text": "for b, chunk in chunks(msg, chunk_size, len) do\r\n    if not encrypt then mac:update(chunk) end\r\n    inc_nonce(nonce)\r\n    local tmp = crypto.encrypt(aes_name, H(nonce), aes_key)\r\n    assert(#tmp >= chunk_size)\r\n    for i = 1, #chunk do buf[i] = bit.bxor( sbyte(chunk, i), sbyte(tmp, i) ) end\r\n    local enc = H(buf)\r\n    if encrypt then mac:update(enc) end\r\n    if writer then writer(enc) else table.insert(data, enc) end\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 88,
    "text": "if not encrypt then mac:update(chunk) end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "mac:update(chunk)",
    "type": "statement:functioncall"
  }, {
    "id": 90,
    "text": "inc_nonce(nonce)",
    "type": "statement:functioncall"
  }, {
    "id": 91,
    "text": "local tmp = crypto.encrypt(aes_name, H(nonce), aes_key)",
    "type": "statement:localassign"
  }, {
    "id": 92,
    "text": "assert(#tmp >= chunk_size)",
    "type": "statement:functioncall"
  }, {
    "id": 93,
    "text": "for i = 1, #chunk do buf[i] = bit.bxor( sbyte(chunk, i), sbyte(tmp, i) ) end",
    "type": "statement:numericfor"
  }, {
    "id": 94,
    "text": "buf[i] = bit.bxor( sbyte(chunk, i), sbyte(tmp, i) )",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "local enc = H(buf)",
    "type": "statement:localassign"
  }, {
    "id": 96,
    "text": "if encrypt then mac:update(enc) end",
    "type": "statement:if"
  }, {
    "id": 97,
    "text": "mac:update(enc)",
    "type": "statement:functioncall"
  }, {
    "id": 98,
    "text": "if writer then writer(enc) else table.insert(data, enc) end",
    "type": "statement:if"
  }, {
    "id": 99,
    "text": "writer(enc)",
    "type": "statement:functioncall"
  }, {
    "id": 100,
    "text": "table.insert(data, enc)",
    "type": "statement:functioncall"
  }, {
    "id": 101,
    "text": "if not writer then return table.concat(data) end",
    "type": "statement:if"
  }, {
    "id": 102,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 103,
    "text": "function AesFileEncrypt:update_(msg)\r\n  if self.private_.tail then\r\n    msg = self.private_.tail .. msg\r\n    self.private_.tail = nil\r\n  end\r\n\r\n  local len = math.floor(#msg / self.private_.block_size) * self.private_.block_size\r\n\r\n  if len < #msg then self.private_.tail = string.sub(msg, len + 1) end\r\n\r\n  return self:update_impl(self.private_.encrypt, msg, len)\r\nend",
    "type": "function"
  }, {
    "id": 104,
    "text": "if self.private_.tail then\r\n    msg = self.private_.tail .. msg\r\n    self.private_.tail = nil\r\n  end",
    "type": "statement:if"
  }, {
    "id": 105,
    "text": "msg = self.private_.tail .. msg",
    "type": "statement:assign"
  }, {
    "id": 106,
    "text": "self.private_.tail = nil",
    "type": "statement:assign"
  }, {
    "id": 107,
    "text": "local len = math.floor(#msg / self.private_.block_size) * self.private_.block_size",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "if len < #msg then self.private_.tail = string.sub(msg, len + 1) end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "self.private_.tail = string.sub(msg, len + 1)",
    "type": "statement:assign"
  }, {
    "id": 110,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 111,
    "text": "function AesFileEncrypt:encrypt(msg)\r\n  self.private_.encrypt = true\r\n  return self:update_(msg)\r\nend",
    "type": "function"
  }, {
    "id": 112,
    "text": "self.private_.encrypt = true",
    "type": "statement:assign"
  }, {
    "id": 113,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 114,
    "text": "function AesFileEncrypt:decrypt(msg)\r\n  self.private_.encrypt = false\r\n  return self:update_(msg)\r\nend",
    "type": "function"
  }, {
    "id": 115,
    "text": "self.private_.encrypt = false",
    "type": "statement:assign"
  }, {
    "id": 116,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 117,
    "text": "function AesFileEncrypt:close(msg)\r\n  if msg then\r\n    if self.private_.tail then \r\n      msg = self.private_.tail .. msg\r\n    end\r\n  else\r\n    msg = self.private_.tail\r\n  end\r\n  self.private_.tail = nil\r\n\r\n  if msg then msg = self:update_impl(self.private_.encrypt, msg, #msg) end\r\n\r\n  local mac  = self.private_.mac:final(nil, true)\r\n\r\n  self.private_.salt    = nil\r\n  self.private_.mac     = nil\r\n  self.private_.nonce   = nil\r\n  self.private_.aes_key = nil\r\n  self.private_.mac_key = nil\r\n  self.private_.pwd_ver = nil\r\n\r\n  return mac:sub(1, self.private_.mode.mac), msg\r\nend",
    "type": "function"
  }, {
    "id": 118,
    "text": "if msg then\r\n    if self.private_.tail then \r\n      msg = self.private_.tail .. msg\r\n    end\r\n  else\r\n    msg = self.private_.tail\r\n  end",
    "type": "statement:if"
  }, {
    "id": 119,
    "text": "if self.private_.tail then \r\n      msg = self.private_.tail .. msg\r\n    end",
    "type": "statement:if"
  }, {
    "id": 120,
    "text": "msg = self.private_.tail",
    "type": "statement:assign"
  }, {
    "id": 121,
    "text": "if msg then msg = self:update_impl(self.private_.encrypt, msg, #msg) end",
    "type": "statement:if"
  }, {
    "id": 122,
    "text": "msg = self:update_impl(self.private_.encrypt, msg, #msg)",
    "type": "statement:assign"
  }, {
    "id": 123,
    "text": "local mac  = self.private_.mac:final(nil, true)",
    "type": "statement:localassign"
  }, {
    "id": 124,
    "text": "self.private_.salt    = nil",
    "type": "statement:assign"
  }, {
    "id": 125,
    "text": "self.private_.mac     = nil",
    "type": "statement:assign"
  }, {
    "id": 126,
    "text": "self.private_.nonce   = nil",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "self.private_.aes_key = nil",
    "type": "statement:assign"
  }, {
    "id": 128,
    "text": "self.private_.mac_key = nil",
    "type": "statement:assign"
  }, {
    "id": 129,
    "text": "self.private_.pwd_ver = nil",
    "type": "statement:assign"
  }, {
    "id": 130,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 131,
    "text": "function AesFileEncrypt:destroy()\r\n  self.private_.block_size = nil\r\nend",
    "type": "function"
  }, {
    "id": 132,
    "text": "self.private_.block_size = nil",
    "type": "statement:assign"
  }, {
    "id": 133,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 134,
    "text": "function AesFileEncrypt:opened()\r\n  return not not self.private_.aes_key\r\nend",
    "type": "function"
  }, {
    "id": 135,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 136,
    "text": "function AesFileEncrypt:destroyed()\r\n  return not not self.private_.block_size\r\nend",
    "type": "function"
  }, {
    "id": 137,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 138,
    "text": "function AesFileEncrypt:set_writer(writer, ctx)\r\n  if writer == nil then\r\n    self.private_.writer = nil\r\n  elseif type(writer) == 'function' then\r\n    if ctx ~= nil then\r\n      self.private_.writer = function(...)\r\n        return writer(ctx, ...)\r\n      end\r\n    else\r\n      self.private_.writer = writer\r\n    end\r\n  else\r\n    local write = assert(writer.write)\r\n    self.private_.writer = function(...)\r\n      return write(writer, ...)\r\n    end\r\n  end\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 139,
    "text": "if writer == nil then\r\n    self.private_.writer = nil\r\n  elseif type(writer) == 'function' then\r\n    if ctx ~= nil then\r\n      self.private_.writer = function(...)\r\n        return writer(ctx, ...)\r\n      end\r\n    else\r\n      self.private_.writer = writer\r\n    end\r\n  else\r\n    local write = assert(writer.write)\r\n    self.private_.writer = function(...)\r\n      return write(writer, ...)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "self.private_.writer = nil",
    "type": "statement:assign"
  }, {
    "id": 141,
    "text": "if ctx ~= nil then\r\n      self.private_.writer = function(...)\r\n        return writer(ctx, ...)\r\n      end\r\n    else\r\n      self.private_.writer = writer\r\n    end",
    "type": "statement:if"
  }, {
    "id": 142,
    "text": "self.private_.writer = function(...)\r\n        return writer(ctx, ...)\r\n      end",
    "type": "statement:assign"
  }, {
    "id": 143,
    "text": "self.private_.writer = writer",
    "type": "statement:assign"
  }, {
    "id": 144,
    "text": "local write = assert(writer.write)",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "self.private_.writer = function(...)\r\n      return write(writer, ...)\r\n    end",
    "type": "statement:assign"
  }, {
    "id": 146,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 147,
    "text": "function(...)\r\n        return writer(ctx, ...)\r\n      end",
    "type": "function"
  }, {
    "id": 148,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 149,
    "text": "function(...)\r\n      return write(writer, ...)\r\n    end",
    "type": "function"
  }, {
    "id": 150,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 151,
    "text": "function AesFileEncrypt:get_writer()\r\n  return self.private_.writer\r\nend",
    "type": "function"
  }, {
    "id": 152,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 153,
    "text": "function AesFileEncrypt:iv()\r\n  return H(self.private_.nonce)\r\nend",
    "type": "function"
  }, {
    "id": 154,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 155,
    "text": "function AesFileEncrypt:key()\r\n  return self.private_.aes_key\r\nend",
    "type": "function"
  }, {
    "id": 156,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 157,
    "text": "local function test_derive_key()\r\n  local pwd  = string.rep(\"1234567890\", 5)\r\n  local salt = H{0xbe,0xda,0x8e,0x77,0x4b,0x16,0x8f,0xfb,0xa8,0xaf,0xf3,0x4f,0x2d,0x4e,0xfe,0xd0}\r\n  local iter = KEYING_ITERATIONS\r\n  local key_len = 2 * 32 + PWD_VER_LENGTH\r\n  local etalon = {55, 74, 210, 155, 79, 239, 111, 112, 82, 186, 90, 155, \r\n    224, 195, 16, 86, 32, 162, 64, 248, 69, 143, 236, 80, 91, 243, 244,\r\n    23, 63, 102, 65, 87, 33, 19, 240, 36, 236, 133, 57, 18, 60, 126, 75,\r\n    201, 248, 211, 41, 218, 97, 17, 122, 236, 162, 141, 80, 207, 168, 15,\r\n    148, 170, 132, 145, 126, 11, 153, 63\r\n  }\r\n\r\n  local key = derive_key(pwd, salt, iter, key_len)\r\n  assert(H(key) == H(etalon))\r\nend",
    "type": "function"
  }, {
    "id": 158,
    "text": "local pwd  = string.rep(\"1234567890\", 5)",
    "type": "statement:localassign"
  }, {
    "id": 159,
    "text": "local salt = H{0xbe,0xda,0x8e,0x77,0x4b,0x16,0x8f,0xfb,0xa8,0xaf,0xf3,0x4f,0x2d,0x4e,0xfe,0xd0}",
    "type": "statement:localassign"
  }, {
    "id": 160,
    "text": "local iter = KEYING_ITERATIONS",
    "type": "statement:localassign"
  }, {
    "id": 161,
    "text": "local key_len = 2 * 32 + PWD_VER_LENGTH",
    "type": "statement:localassign"
  }, {
    "id": 162,
    "text": "local etalon = {55, 74, 210, 155, 79, 239, 111, 112, 82, 186, 90, 155, \r\n    224, 195, 16, 86, 32, 162, 64, 248, 69, 143, 236, 80, 91, 243, 244,\r\n    23, 63, 102, 65, 87, 33, 19, 240, 36, 236, 133, 57, 18, 60, 126, 75,\r\n    201, 248, 211, 41, 218, 97, 17, 122, 236, 162, 141, 80, 207, 168, 15,\r\n    148, 170, 132, 145, 126, 11, 153, 63\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 163,
    "text": "local key = derive_key(pwd, salt, iter, key_len)",
    "type": "statement:localassign"
  }, {
    "id": 164,
    "text": "assert(H(key) == H(etalon))",
    "type": "statement:functioncall"
  }, {
    "id": 165,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 166,
    "text": "local function test_AesFileEncrypt()\r\n  local pwd    = \"123456\"\r\n  local salt   = H{0x5D,0x9F,0xF9,0xAE,0xE6,0xC5,0xC9,0x19,0x42,0x46,0x88,0x3E,0x06,0x9D,0x1A,0xA6}\r\n  local pver   = \"9aa9\"\r\n  local data   = \"11111111111111111111\\r\\n22222222222222222222\"\r\n  local mac    = \"eb048021e72f5e2a7db3\"\r\n  local etalon = \"91aa63f0cb2b92479f89c32eb6b875b8c7d487aa7a8cb3705a5d8d276d6a2e8fc7cad94cc28ed0ad123e\"\r\n\r\n  local fenc = AesFileEncrypt:new()\r\n\r\n  local edata = {}\r\n  fenc:set_writer(table.insert, edata)\r\n\r\n  local salt, pwd_ver = fenc:open(3, pwd, salt)\r\n  fenc:encrypt(data)\r\n  local mac_ = fenc:close()\r\n  edata = table.concat(edata)\r\n  assert(mac == crypto.hex(mac_), 'Expected: `' .. mac ..'` got: `' .. crypto.hex(mac_) .. '`')\r\n  assert(etalon == crypto.hex(edata), 'Expected: `' .. etalon ..'` got: `' .. crypto.hex(edata) .. '`')\r\nend",
    "type": "function"
  }, {
    "id": 167,
    "text": "local pwd    = \"123456\"",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "local salt   = H{0x5D,0x9F,0xF9,0xAE,0xE6,0xC5,0xC9,0x19,0x42,0x46,0x88,0x3E,0x06,0x9D,0x1A,0xA6}",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "local pver   = \"9aa9\"",
    "type": "statement:localassign"
  }, {
    "id": 170,
    "text": "local data   = \"11111111111111111111\\r\\n22222222222222222222\"",
    "type": "statement:localassign"
  }, {
    "id": 171,
    "text": "local mac    = \"eb048021e72f5e2a7db3\"",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "local etalon = \"91aa63f0cb2b92479f89c32eb6b875b8c7d487aa7a8cb3705a5d8d276d6a2e8fc7cad94cc28ed0ad123e\"",
    "type": "statement:localassign"
  }, {
    "id": 173,
    "text": "local fenc = AesFileEncrypt:new()",
    "type": "statement:localassign"
  }, {
    "id": 174,
    "text": "local edata = {}",
    "type": "statement:localassign"
  }, {
    "id": 175,
    "text": "fenc:set_writer(table.insert, edata)",
    "type": "statement:functioncall"
  }, {
    "id": 176,
    "text": "local salt, pwd_ver = fenc:open(3, pwd, salt)",
    "type": "statement:localassign"
  }, {
    "id": 177,
    "text": "fenc:encrypt(data)",
    "type": "statement:functioncall"
  }, {
    "id": 178,
    "text": "local mac_ = fenc:close()",
    "type": "statement:localassign"
  }, {
    "id": 179,
    "text": "edata = table.concat(edata)",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "assert(mac == crypto.hex(mac_), 'Expected: `' .. mac ..'` got: `' .. crypto.hex(mac_) .. '`')",
    "type": "statement:functioncall"
  }, {
    "id": 181,
    "text": "assert(etalon == crypto.hex(edata), 'Expected: `' .. etalon ..'` got: `' .. crypto.hex(edata) .. '`')",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 183,
    "text": "function AesFileEncrypt.self_test()\r\n  test_derive_key()\r\n  test_AesFileEncrypt()\r\nend",
    "type": "function"
  }, {
    "id": 184,
    "text": "test_derive_key()",
    "type": "statement:functioncall"
  }, {
    "id": 185,
    "text": "test_AesFileEncrypt()",
    "type": "statement:functioncall"
  }, {
    "id": 186,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 187,
    "text": "function(_, b)\r\n    b = b + chunk_size\r\n    if b > len then return nil end\r\n    local e = b + chunk_size - 1\r\n    if e > len then e = len end\r\n    return b, e\r\n  end",
    "type": "function"
  }, {
    "id": 188,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 189,
    "text": "function(_, b)\r\n    b = b + chunk_size\r\n    if b > len then return nil end\r\n    local e = b + chunk_size - 1\r\n    if e > len then e = len end\r\n    return b, (string.sub(msg, b, e))\r\n  end",
    "type": "function"
  }, {
    "id": 190,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 191,
    "text": "function()\r\n    return AesFileEncrypt:new()\r\n  end",
    "type": "function"
  }, {
    "id": 192,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 193,
    "text": "",
    "type": "function container"
  }, {
    "id": 194,
    "text": "local function Make(lvl) return function()\r\n  local out = Stream:new()\r\n\r\n  local writer = ZipWriter.new{\r\n    utf8 = false;\r\n    level = ZipWriter.COMPRESSION_LEVEL[lvl]\r\n  }\r\n  writer:open_stream(out)\r\n  writer:write('test.txt', fileDesc)\r\n  writer:close()\r\n\r\n  local res = base64.encode( tostring(out) )\r\n  assert_equal( ETALON[ lvl:upper() ], res )\r\nend end",
    "type": "function"
  }, {
    "id": 195,
    "text": "function test_context()\r\n  local out = Stream:new()\r\n  local writer = ZipWriter.new()\r\n  writer:open_stream(out)\r\n\r\n  local function make_reader()\r\n    local ctx = {}\r\n    local i = 0\r\n    return function(o)\r\n      if i == 0 then\r\n        i = 1\r\n        assert_nil(o)\r\n        return \"data\", ctx\r\n      end\r\n      assert_equal(ctx, o)\r\n    end\r\n  end\r\n\r\n  assert_true(writer:write('test.txt', fileDesc, make_reader()))\r\n  assert_equal(1, writer:close())\r\nend",
    "type": "function"
  }, {
    "id": 196,
    "text": "function test_error()\r\n  local out = Stream:new()\r\n  local writer = ZipWriter.new()\r\n  writer:open_stream(out)\r\n\r\n  local ERR = {}\r\n\r\n  local function reader()\r\n    return nil, ERR\r\n  end\r\n\r\n  local ok, err = assert_nil(writer:write('test.txt', fileDesc, reader))\r\n  assert_equal(ERR, err)\r\n  assert_equal(1, writer:close())\r\nend",
    "type": "function"
  }, {
    "id": 197,
    "text": "",
    "type": "function container"
  }, {
    "id": 198,
    "text": "crypto",
    "type": "module"
  }, {
    "id": 199,
    "text": "rand.bytes",
    "type": "global function"
  }, {
    "id": 200,
    "text": "hex",
    "type": "global function"
  }, {
    "id": 201,
    "text": "string",
    "type": "module"
  }, {
    "id": 202,
    "text": "char",
    "type": "global function"
  }, {
    "id": 203,
    "text": "math",
    "type": "module"
  }, {
    "id": 204,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 205,
    "text": "table",
    "type": "module"
  }, {
    "id": 206,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 207,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 208,
    "text": "hmac.new",
    "type": "global function"
  }, {
    "id": 209,
    "text": "sub",
    "type": "global function"
  }, {
    "id": 210,
    "text": "encrypt",
    "type": "global function"
  }, {
    "id": 211,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 212,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 213,
    "text": "schar",
    "type": "global function"
  }, {
    "id": 214,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 215,
    "text": "pcall",
    "type": "global function"
  }, {
    "id": 216,
    "text": "write",
    "type": "global function"
  }, {
    "id": 217,
    "text": "sbyte",
    "type": "global function"
  }, {
    "id": 218,
    "text": "self_test",
    "type": "global function"
  }, {
    "id": 219,
    "text": "rshift",
    "type": "global function"
  }, {
    "id": 220,
    "text": "type",
    "type": "global function"
  }, {
    "id": 221,
    "text": "new",
    "type": "global function"
  }, {
    "id": 222,
    "text": "writer",
    "type": "global function"
  }, {
    "id": 223,
    "text": "bxor",
    "type": "global function"
  }, {
    "id": 224,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 225,
    "text": "bxor",
    "type": "global function"
  }, {
    "id": 226,
    "text": "require",
    "type": "global function"
  }, {
    "id": 227,
    "text": "",
    "type": "variable container"
  }, {
    "id": 228,
    "text": "",
    "type": "require container"
  }, {
    "id": 229,
    "text": "",
    "type": "local variable"
  }, {
    "id": 230,
    "text": "",
    "type": "n/a"
  }, {
    "id": 231,
    "text": "",
    "type": "local variable"
  }, {
    "id": 232,
    "text": "",
    "type": "number"
  }, {
    "id": 233,
    "text": "",
    "type": "local variable"
  }, {
    "id": 234,
    "text": "",
    "type": "number"
  }, {
    "id": 235,
    "text": "",
    "type": "local variable"
  }, {
    "id": 236,
    "text": "",
    "type": "number"
  }, {
    "id": 237,
    "text": "",
    "type": "local variable"
  }, {
    "id": 238,
    "text": "",
    "type": "number"
  }, {
    "id": 239,
    "text": "",
    "type": "local variable"
  }, {
    "id": 240,
    "text": "",
    "type": "number"
  }, {
    "id": 241,
    "text": "",
    "type": "local variable"
  }, {
    "id": 242,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 243,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 244,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 245,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 246,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 247,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 248,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 249,
    "text": "",
    "type": "local variable"
  }, {
    "id": 250,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 251,
    "text": "",
    "type": "global variable"
  }, {
    "id": 252,
    "text": "",
    "type": "n/a"
  }, {
    "id": 253,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 254,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 255,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 256,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 257,
    "text": "",
    "type": "interface container"
  }, {
    "id": 258,
    "text": "",
    "type": "interface"
  }, {
    "id": 259,
    "text": "",
    "type": "interface"
  } ]
}