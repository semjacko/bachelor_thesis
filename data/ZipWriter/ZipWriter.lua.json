{
  "_filename": "ZipWriter.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/ZipWriter/lua/ZipWriter.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 2
  }, {
    "from": 9,
    "label": "has",
    "to": 10
  }, {
    "from": 10,
    "label": "has",
    "to": 11
  }, {
    "from": 10,
    "label": "has",
    "to": 12
  }, {
    "from": 10,
    "label": "has",
    "to": 13
  }, {
    "from": 13,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 14
  }, {
    "from": 9,
    "label": "has",
    "to": 16
  }, {
    "from": 17,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 20
  }, {
    "from": 19,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 21
  }, {
    "from": 19,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 18
  }, {
    "from": 19,
    "label": "has",
    "to": 22
  }, {
    "from": 23,
    "label": "has",
    "to": 18
  }, {
    "from": 23,
    "label": "has",
    "to": 24
  }, {
    "from": 25,
    "label": "has",
    "to": 18
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 27,
    "label": "has",
    "to": 18
  }, {
    "from": 27,
    "label": "has",
    "to": 28
  }, {
    "from": 27,
    "label": "has",
    "to": 18
  }, {
    "from": 27,
    "label": "has",
    "to": 18
  }, {
    "from": 27,
    "label": "has",
    "to": 18
  }, {
    "from": 27,
    "label": "has",
    "to": 18
  }, {
    "from": 27,
    "label": "has",
    "to": 29
  }, {
    "from": 30,
    "label": "has",
    "to": 31
  }, {
    "from": 30,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 34
  }, {
    "from": 34,
    "label": "has",
    "to": 35
  }, {
    "from": 34,
    "label": "has",
    "to": 36
  }, {
    "from": 34,
    "label": "has",
    "to": 37
  }, {
    "from": 34,
    "label": "has",
    "to": 33
  }, {
    "from": 30,
    "label": "has",
    "to": 38
  }, {
    "from": 38,
    "label": "has",
    "to": 39
  }, {
    "from": 38,
    "label": "has",
    "to": 40
  }, {
    "from": 30,
    "label": "has",
    "to": 41
  }, {
    "from": 30,
    "label": "has",
    "to": 42
  }, {
    "from": 42,
    "label": "has",
    "to": 43
  }, {
    "from": 30,
    "label": "has",
    "to": 44
  }, {
    "from": 44,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 44,
    "label": "has",
    "to": 18
  }, {
    "from": 30,
    "label": "has",
    "to": 48
  }, {
    "from": 30,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 30,
    "label": "has",
    "to": 51
  }, {
    "from": 51,
    "label": "has",
    "to": 52
  }, {
    "from": 51,
    "label": "has",
    "to": 18
  }, {
    "from": 30,
    "label": "has",
    "to": 18
  }, {
    "from": 30,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 33
  }, {
    "from": 54,
    "label": "has",
    "to": 55
  }, {
    "from": 56,
    "label": "has",
    "to": 35
  }, {
    "from": 56,
    "label": "has",
    "to": 36
  }, {
    "from": 56,
    "label": "has",
    "to": 37
  }, {
    "from": 56,
    "label": "has",
    "to": 33
  }, {
    "from": 56,
    "label": "has",
    "to": 57
  }, {
    "from": 58,
    "label": "has",
    "to": 39
  }, {
    "from": 58,
    "label": "has",
    "to": 40
  }, {
    "from": 58,
    "label": "has",
    "to": 59
  }, {
    "from": 60,
    "label": "has",
    "to": 43
  }, {
    "from": 60,
    "label": "has",
    "to": 61
  }, {
    "from": 62,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 45,
    "label": "has",
    "to": 47
  }, {
    "from": 62,
    "label": "has",
    "to": 18
  }, {
    "from": 62,
    "label": "has",
    "to": 63
  }, {
    "from": 64,
    "label": "has",
    "to": 50
  }, {
    "from": 64,
    "label": "has",
    "to": 65
  }, {
    "from": 66,
    "label": "has",
    "to": 52
  }, {
    "from": 66,
    "label": "has",
    "to": 18
  }, {
    "from": 66,
    "label": "has",
    "to": 67
  }, {
    "from": 68,
    "label": "has",
    "to": 69
  }, {
    "from": 68,
    "label": "has",
    "to": 18
  }, {
    "from": 68,
    "label": "has",
    "to": 70
  }, {
    "from": 68,
    "label": "has",
    "to": 71
  }, {
    "from": 68,
    "label": "has",
    "to": 72
  }, {
    "from": 68,
    "label": "has",
    "to": 18
  }, {
    "from": 68,
    "label": "has",
    "to": 18
  }, {
    "from": 68,
    "label": "has",
    "to": 18
  }, {
    "from": 68,
    "label": "has",
    "to": 73
  }, {
    "from": 74,
    "label": "has",
    "to": 75
  }, {
    "from": 74,
    "label": "has",
    "to": 76
  }, {
    "from": 74,
    "label": "has",
    "to": 77
  }, {
    "from": 74,
    "label": "has",
    "to": 18
  }, {
    "from": 74,
    "label": "has",
    "to": 78
  }, {
    "from": 79,
    "label": "has",
    "to": 80
  }, {
    "from": 80,
    "label": "has",
    "to": 81
  }, {
    "from": 80,
    "label": "has",
    "to": 82
  }, {
    "from": 79,
    "label": "has",
    "to": 83
  }, {
    "from": 79,
    "label": "has",
    "to": 84
  }, {
    "from": 85,
    "label": "has",
    "to": 86
  }, {
    "from": 85,
    "label": "has",
    "to": 18
  }, {
    "from": 85,
    "label": "has",
    "to": 87
  }, {
    "from": 87,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 87,
    "label": "has",
    "to": 18
  }, {
    "from": 87,
    "label": "has",
    "to": 18
  }, {
    "from": 87,
    "label": "has",
    "to": 18
  }, {
    "from": 87,
    "label": "has",
    "to": 18
  }, {
    "from": 85,
    "label": "has",
    "to": 90
  }, {
    "from": 85,
    "label": "has",
    "to": 18
  }, {
    "from": 85,
    "label": "has",
    "to": 91
  }, {
    "from": 92,
    "label": "has",
    "to": 93
  }, {
    "from": 92,
    "label": "has",
    "to": 18
  }, {
    "from": 92,
    "label": "has",
    "to": 94
  }, {
    "from": 92,
    "label": "has",
    "to": 95
  }, {
    "from": 92,
    "label": "has",
    "to": 96
  }, {
    "from": 92,
    "label": "has",
    "to": 97
  }, {
    "from": 92,
    "label": "has",
    "to": 98
  }, {
    "from": 92,
    "label": "has",
    "to": 18
  }, {
    "from": 92,
    "label": "has",
    "to": 99
  }, {
    "from": 100,
    "label": "has",
    "to": 18
  }, {
    "from": 100,
    "label": "has",
    "to": 101
  }, {
    "from": 102,
    "label": "has",
    "to": 18
  }, {
    "from": 102,
    "label": "has",
    "to": 103
  }, {
    "from": 104,
    "label": "has",
    "to": 18
  }, {
    "from": 104,
    "label": "has",
    "to": 105
  }, {
    "from": 106,
    "label": "has",
    "to": 107
  }, {
    "from": 106,
    "label": "has",
    "to": 108
  }, {
    "from": 106,
    "label": "has",
    "to": 18
  }, {
    "from": 106,
    "label": "has",
    "to": 18
  }, {
    "from": 106,
    "label": "has",
    "to": 109
  }, {
    "from": 110,
    "label": "has",
    "to": 18
  }, {
    "from": 110,
    "label": "has",
    "to": 111
  }, {
    "from": 112,
    "label": "has",
    "to": 113
  }, {
    "from": 112,
    "label": "has",
    "to": 18
  }, {
    "from": 112,
    "label": "has",
    "to": 114
  }, {
    "from": 115,
    "label": "has",
    "to": 116
  }, {
    "from": 115,
    "label": "has",
    "to": 117
  }, {
    "from": 115,
    "label": "has",
    "to": 18
  }, {
    "from": 115,
    "label": "has",
    "to": 118
  }, {
    "from": 119,
    "label": "has",
    "to": 120
  }, {
    "from": 119,
    "label": "has",
    "to": 121
  }, {
    "from": 119,
    "label": "has",
    "to": 122
  }, {
    "from": 123,
    "label": "has",
    "to": 18
  }, {
    "from": 123,
    "label": "has",
    "to": 124
  }, {
    "from": 125,
    "label": "has",
    "to": 126
  }, {
    "from": 125,
    "label": "has",
    "to": 127
  }, {
    "from": 125,
    "label": "has",
    "to": 128
  }, {
    "from": 125,
    "label": "has",
    "to": 129
  }, {
    "from": 125,
    "label": "has",
    "to": 130
  }, {
    "from": 125,
    "label": "has",
    "to": 131
  }, {
    "from": 125,
    "label": "has",
    "to": 132
  }, {
    "from": 125,
    "label": "has",
    "to": 133
  }, {
    "from": 125,
    "label": "has",
    "to": 134
  }, {
    "from": 125,
    "label": "has",
    "to": 135
  }, {
    "from": 125,
    "label": "has",
    "to": 136
  }, {
    "from": 125,
    "label": "has",
    "to": 137
  }, {
    "from": 125,
    "label": "has",
    "to": 138
  }, {
    "from": 138,
    "label": "has",
    "to": 139
  }, {
    "from": 139,
    "label": "has",
    "to": 140
  }, {
    "from": 138,
    "label": "has",
    "to": 141
  }, {
    "from": 125,
    "label": "has",
    "to": 142
  }, {
    "from": 125,
    "label": "has",
    "to": 143
  }, {
    "from": 125,
    "label": "has",
    "to": 144
  }, {
    "from": 125,
    "label": "has",
    "to": 145
  }, {
    "from": 125,
    "label": "has",
    "to": 146
  }, {
    "from": 125,
    "label": "has",
    "to": 147
  }, {
    "from": 147,
    "label": "has",
    "to": 148
  }, {
    "from": 125,
    "label": "has",
    "to": 149
  }, {
    "from": 149,
    "label": "has",
    "to": 150
  }, {
    "from": 149,
    "label": "has",
    "to": 151
  }, {
    "from": 151,
    "label": "has",
    "to": 152
  }, {
    "from": 125,
    "label": "has",
    "to": 153
  }, {
    "from": 125,
    "label": "has",
    "to": 154
  }, {
    "from": 154,
    "label": "has",
    "to": 155
  }, {
    "from": 154,
    "label": "has",
    "to": 156
  }, {
    "from": 125,
    "label": "has",
    "to": 157
  }, {
    "from": 125,
    "label": "has",
    "to": 158
  }, {
    "from": 158,
    "label": "has",
    "to": 159
  }, {
    "from": 158,
    "label": "has",
    "to": 160
  }, {
    "from": 125,
    "label": "has",
    "to": 161
  }, {
    "from": 125,
    "label": "has",
    "to": 162
  }, {
    "from": 125,
    "label": "has",
    "to": 163
  }, {
    "from": 163,
    "label": "has",
    "to": 164
  }, {
    "from": 163,
    "label": "has",
    "to": 165
  }, {
    "from": 165,
    "label": "has",
    "to": 166
  }, {
    "from": 125,
    "label": "has",
    "to": 167
  }, {
    "from": 125,
    "label": "has",
    "to": 168
  }, {
    "from": 125,
    "label": "has",
    "to": 169
  }, {
    "from": 125,
    "label": "has",
    "to": 170
  }, {
    "from": 170,
    "label": "has",
    "to": 171
  }, {
    "from": 170,
    "label": "has",
    "to": 172
  }, {
    "from": 170,
    "label": "has",
    "to": 173
  }, {
    "from": 170,
    "label": "has",
    "to": 174
  }, {
    "from": 125,
    "label": "has",
    "to": 175
  }, {
    "from": 125,
    "label": "has",
    "to": 176
  }, {
    "from": 176,
    "label": "has",
    "to": 177
  }, {
    "from": 176,
    "label": "has",
    "to": 178
  }, {
    "from": 176,
    "label": "has",
    "to": 179
  }, {
    "from": 176,
    "label": "has",
    "to": 180
  }, {
    "from": 125,
    "label": "has",
    "to": 181
  }, {
    "from": 125,
    "label": "has",
    "to": 182
  }, {
    "from": 182,
    "label": "has",
    "to": 183
  }, {
    "from": 125,
    "label": "has",
    "to": 184
  }, {
    "from": 125,
    "label": "has",
    "to": 185
  }, {
    "from": 125,
    "label": "has",
    "to": 186
  }, {
    "from": 125,
    "label": "has",
    "to": 187
  }, {
    "from": 187,
    "label": "has",
    "to": 188
  }, {
    "from": 187,
    "label": "has",
    "to": 189
  }, {
    "from": 189,
    "label": "has",
    "to": 190
  }, {
    "from": 187,
    "label": "has",
    "to": 191
  }, {
    "from": 191,
    "label": "has",
    "to": 192
  }, {
    "from": 191,
    "label": "has",
    "to": 193
  }, {
    "from": 191,
    "label": "has",
    "to": 194
  }, {
    "from": 191,
    "label": "has",
    "to": 195
  }, {
    "from": 191,
    "label": "has",
    "to": 196
  }, {
    "from": 196,
    "label": "has",
    "to": 197
  }, {
    "from": 196,
    "label": "has",
    "to": 198
  }, {
    "from": 196,
    "label": "has",
    "to": 199
  }, {
    "from": 196,
    "label": "has",
    "to": 200
  }, {
    "from": 196,
    "label": "has",
    "to": 201
  }, {
    "from": 201,
    "label": "has",
    "to": 202
  }, {
    "from": 201,
    "label": "has",
    "to": 203
  }, {
    "from": 201,
    "label": "has",
    "to": 204
  }, {
    "from": 196,
    "label": "has",
    "to": 205
  }, {
    "from": 196,
    "label": "has",
    "to": 203
  }, {
    "from": 191,
    "label": "has",
    "to": 206
  }, {
    "from": 191,
    "label": "has",
    "to": 207
  }, {
    "from": 207,
    "label": "has",
    "to": 208
  }, {
    "from": 207,
    "label": "has",
    "to": 205
  }, {
    "from": 191,
    "label": "has",
    "to": 209
  }, {
    "from": 191,
    "label": "has",
    "to": 210
  }, {
    "from": 210,
    "label": "has",
    "to": 211
  }, {
    "from": 210,
    "label": "has",
    "to": 212
  }, {
    "from": 210,
    "label": "has",
    "to": 71
  }, {
    "from": 210,
    "label": "has",
    "to": 213
  }, {
    "from": 191,
    "label": "has",
    "to": 214
  }, {
    "from": 187,
    "label": "has",
    "to": 215
  }, {
    "from": 187,
    "label": "has",
    "to": 216
  }, {
    "from": 216,
    "label": "has",
    "to": 217
  }, {
    "from": 216,
    "label": "has",
    "to": 218
  }, {
    "from": 218,
    "label": "has",
    "to": 219
  }, {
    "from": 187,
    "label": "has",
    "to": 220
  }, {
    "from": 220,
    "label": "has",
    "to": 221
  }, {
    "from": 220,
    "label": "has",
    "to": 222
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 222,
    "label": "has",
    "to": 224
  }, {
    "from": 222,
    "label": "has",
    "to": 225
  }, {
    "from": 222,
    "label": "has",
    "to": 226
  }, {
    "from": 222,
    "label": "has",
    "to": 223
  }, {
    "from": 222,
    "label": "has",
    "to": 227
  }, {
    "from": 220,
    "label": "has",
    "to": 228
  }, {
    "from": 220,
    "label": "has",
    "to": 229
  }, {
    "from": 125,
    "label": "has",
    "to": 230
  }, {
    "from": 230,
    "label": "has",
    "to": 231
  }, {
    "from": 230,
    "label": "has",
    "to": 232
  }, {
    "from": 232,
    "label": "has",
    "to": 233
  }, {
    "from": 232,
    "label": "has",
    "to": 234
  }, {
    "from": 232,
    "label": "has",
    "to": 235
  }, {
    "from": 232,
    "label": "has",
    "to": 236
  }, {
    "from": 125,
    "label": "has",
    "to": 237
  }, {
    "from": 237,
    "label": "has",
    "to": 238
  }, {
    "from": 237,
    "label": "has",
    "to": 239
  }, {
    "from": 237,
    "label": "has",
    "to": 179
  }, {
    "from": 237,
    "label": "has",
    "to": 180
  }, {
    "from": 125,
    "label": "has",
    "to": 240
  }, {
    "from": 125,
    "label": "has",
    "to": 241
  }, {
    "from": 125,
    "label": "has",
    "to": 242
  }, {
    "from": 125,
    "label": "has",
    "to": 18
  }, {
    "from": 125,
    "label": "has",
    "to": 18
  }, {
    "from": 125,
    "label": "has",
    "to": 243
  }, {
    "from": 244,
    "label": "has",
    "to": 245
  }, {
    "from": 244,
    "label": "has",
    "to": 246
  }, {
    "from": 244,
    "label": "has",
    "to": 247
  }, {
    "from": 244,
    "label": "has",
    "to": 248
  }, {
    "from": 244,
    "label": "has",
    "to": 249
  }, {
    "from": 244,
    "label": "has",
    "to": 250
  }, {
    "from": 250,
    "label": "has",
    "to": 251
  }, {
    "from": 244,
    "label": "has",
    "to": 252
  }, {
    "from": 244,
    "label": "has",
    "to": 253
  }, {
    "from": 244,
    "label": "has",
    "to": 254
  }, {
    "from": 254,
    "label": "has",
    "to": 255
  }, {
    "from": 254,
    "label": "has",
    "to": 256
  }, {
    "from": 254,
    "label": "has",
    "to": 257
  }, {
    "from": 254,
    "label": "has",
    "to": 258
  }, {
    "from": 254,
    "label": "has",
    "to": 259
  }, {
    "from": 244,
    "label": "has",
    "to": 260
  }, {
    "from": 244,
    "label": "has",
    "to": 261
  }, {
    "from": 244,
    "label": "has",
    "to": 18
  }, {
    "from": 244,
    "label": "has",
    "to": 262
  }, {
    "from": 263,
    "label": "has",
    "to": 264
  }, {
    "from": 263,
    "label": "has",
    "to": 18
  }, {
    "from": 263,
    "label": "has",
    "to": 265
  }, {
    "from": 266,
    "label": "has",
    "to": 267
  }, {
    "from": 267,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 18
  }, {
    "from": 267,
    "label": "has",
    "to": 269
  }, {
    "from": 266,
    "label": "has",
    "to": 270
  }, {
    "from": 266,
    "label": "has",
    "to": 18
  }, {
    "from": 266,
    "label": "has",
    "to": 271
  }, {
    "from": 266,
    "label": "has",
    "to": 272
  }, {
    "from": 266,
    "label": "has",
    "to": 18
  }, {
    "from": 266,
    "label": "has",
    "to": 273
  }, {
    "from": 273,
    "label": "has",
    "to": 18
  }, {
    "from": 266,
    "label": "has",
    "to": 18
  }, {
    "from": 266,
    "label": "has",
    "to": 274
  }, {
    "from": 275,
    "label": "has",
    "to": 18
  }, {
    "from": 275,
    "label": "has",
    "to": 276
  }, {
    "from": 277,
    "label": "has",
    "to": 18
  }, {
    "from": 277,
    "label": "has",
    "to": 278
  }, {
    "from": 279,
    "label": "has",
    "to": 280
  }, {
    "from": 280,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 18
  }, {
    "from": 280,
    "label": "has",
    "to": 282
  }, {
    "from": 279,
    "label": "has",
    "to": 283
  }, {
    "from": 279,
    "label": "has",
    "to": 18
  }, {
    "from": 279,
    "label": "has",
    "to": 284
  }, {
    "from": 284,
    "label": "has",
    "to": 285
  }, {
    "from": 284,
    "label": "has",
    "to": 286
  }, {
    "from": 284,
    "label": "has",
    "to": 18
  }, {
    "from": 284,
    "label": "has",
    "to": 18
  }, {
    "from": 279,
    "label": "has",
    "to": 18
  }, {
    "from": 279,
    "label": "has",
    "to": 287
  }, {
    "from": 288,
    "label": "has",
    "to": 18
  }, {
    "from": 288,
    "label": "has",
    "to": 289
  }, {
    "from": 290,
    "label": "has",
    "to": 285
  }, {
    "from": 290,
    "label": "has",
    "to": 286
  }, {
    "from": 290,
    "label": "has",
    "to": 18
  }, {
    "from": 290,
    "label": "has",
    "to": 18
  }, {
    "from": 290,
    "label": "has",
    "to": 291
  }, {
    "from": 292,
    "label": "has",
    "to": 18
  }, {
    "from": 292,
    "label": "has",
    "to": 293
  }, {
    "from": 292,
    "label": "has",
    "to": 294
  }, {
    "from": 295,
    "label": "has",
    "to": 18
  }, {
    "from": 295,
    "label": "has",
    "to": 296
  }, {
    "from": 295,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 297,
    "label": "has",
    "to": 299
  }, {
    "from": 297,
    "label": "has",
    "to": 300
  }, {
    "from": 297,
    "label": "has",
    "to": 301
  }, {
    "from": 301,
    "label": "has",
    "to": 302
  }, {
    "from": 301,
    "label": "has",
    "to": 303
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 303,
    "label": "has",
    "to": 305
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 305,
    "label": "has",
    "to": 307
  }, {
    "from": 303,
    "label": "has",
    "to": 18
  }, {
    "from": 301,
    "label": "has",
    "to": 308
  }, {
    "from": 295,
    "label": "has",
    "to": 309
  }, {
    "from": 295,
    "label": "has",
    "to": 310
  }, {
    "from": 311,
    "label": "has",
    "to": 28
  }, {
    "from": 311,
    "label": "has",
    "to": 312
  }, {
    "from": 313,
    "label": "has",
    "to": 18
  }, {
    "from": 313,
    "label": "has",
    "to": 314
  }, {
    "from": 315,
    "label": "has",
    "to": 18
  }, {
    "from": 315,
    "label": "has",
    "to": 316
  }, {
    "from": 317,
    "label": "has",
    "to": 18
  }, {
    "from": 317,
    "label": "has",
    "to": 318
  }, {
    "from": 319,
    "label": "has",
    "to": 18
  }, {
    "from": 319,
    "label": "has",
    "to": 320
  }, {
    "from": 321,
    "label": "has",
    "to": 70
  }, {
    "from": 321,
    "label": "has",
    "to": 71
  }, {
    "from": 321,
    "label": "has",
    "to": 322
  }, {
    "from": 323,
    "label": "has",
    "to": 72
  }, {
    "from": 323,
    "label": "has",
    "to": 18
  }, {
    "from": 323,
    "label": "has",
    "to": 324
  }, {
    "from": 325,
    "label": "has",
    "to": 18
  }, {
    "from": 325,
    "label": "has",
    "to": 326
  }, {
    "from": 327,
    "label": "has",
    "to": 18
  }, {
    "from": 327,
    "label": "has",
    "to": 328
  }, {
    "from": 329,
    "label": "has",
    "to": 88
  }, {
    "from": 88,
    "label": "has",
    "to": 89
  }, {
    "from": 329,
    "label": "has",
    "to": 18
  }, {
    "from": 329,
    "label": "has",
    "to": 18
  }, {
    "from": 329,
    "label": "has",
    "to": 18
  }, {
    "from": 329,
    "label": "has",
    "to": 330
  }, {
    "from": 331,
    "label": "has",
    "to": 18
  }, {
    "from": 332,
    "label": "has",
    "to": 18
  }, {
    "from": 332,
    "label": "has",
    "to": 333
  }, {
    "from": 334,
    "label": "has",
    "to": 268
  }, {
    "from": 268,
    "label": "has",
    "to": 18
  }, {
    "from": 334,
    "label": "has",
    "to": 269
  }, {
    "from": 334,
    "label": "has",
    "to": 335
  }, {
    "from": 336,
    "label": "has",
    "to": 281
  }, {
    "from": 281,
    "label": "has",
    "to": 18
  }, {
    "from": 336,
    "label": "has",
    "to": 282
  }, {
    "from": 336,
    "label": "has",
    "to": 337
  }, {
    "from": 338,
    "label": "has",
    "to": 293
  }, {
    "from": 338,
    "label": "has",
    "to": 339
  }, {
    "from": 340,
    "label": "has",
    "to": 304
  }, {
    "from": 340,
    "label": "has",
    "to": 305
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 305,
    "label": "has",
    "to": 307
  }, {
    "from": 340,
    "label": "has",
    "to": 18
  }, {
    "from": 340,
    "label": "has",
    "to": 341
  }, {
    "from": 342,
    "label": "has",
    "to": 296
  }, {
    "from": 342,
    "label": "has",
    "to": 297
  }, {
    "from": 297,
    "label": "has",
    "to": 298
  }, {
    "from": 297,
    "label": "has",
    "to": 299
  }, {
    "from": 297,
    "label": "has",
    "to": 300
  }, {
    "from": 297,
    "label": "has",
    "to": 301
  }, {
    "from": 301,
    "label": "has",
    "to": 302
  }, {
    "from": 301,
    "label": "has",
    "to": 303
  }, {
    "from": 303,
    "label": "has",
    "to": 304
  }, {
    "from": 303,
    "label": "has",
    "to": 305
  }, {
    "from": 305,
    "label": "has",
    "to": 306
  }, {
    "from": 305,
    "label": "has",
    "to": 307
  }, {
    "from": 303,
    "label": "has",
    "to": 18
  }, {
    "from": 301,
    "label": "has",
    "to": 308
  }, {
    "from": 342,
    "label": "has",
    "to": 309
  }, {
    "from": 342,
    "label": "has",
    "to": 343
  }, {
    "from": 9,
    "label": "calls",
    "to": 373
  }, {
    "from": 266,
    "label": "calls",
    "to": 364
  }, {
    "from": 279,
    "label": "calls",
    "to": 364
  }, {
    "from": 125,
    "label": "calls",
    "to": 25
  }, {
    "from": 125,
    "label": "calls",
    "to": 25
  }, {
    "from": 266,
    "label": "calls",
    "to": 354
  }, {
    "from": 277,
    "label": "calls",
    "to": 354
  }, {
    "from": 275,
    "label": "calls",
    "to": 354
  }, {
    "from": 344,
    "label": "calls",
    "to": 355
  }, {
    "from": 17,
    "label": "calls",
    "to": 356
  }, {
    "from": 344,
    "label": "calls",
    "to": 377
  }, {
    "from": 266,
    "label": "calls",
    "to": 357
  }, {
    "from": 279,
    "label": "calls",
    "to": 357
  }, {
    "from": 244,
    "label": "calls",
    "to": 358
  }, {
    "from": 295,
    "label": "calls",
    "to": 358
  }, {
    "from": 23,
    "label": "calls",
    "to": 352
  }, {
    "from": 125,
    "label": "calls",
    "to": 352
  }, {
    "from": 125,
    "label": "calls",
    "to": 352
  }, {
    "from": 125,
    "label": "calls",
    "to": 27
  }, {
    "from": 344,
    "label": "calls",
    "to": 365
  }, {
    "from": 344,
    "label": "calls",
    "to": 365
  }, {
    "from": 125,
    "label": "calls",
    "to": 19
  }, {
    "from": 125,
    "label": "calls",
    "to": 348
  }, {
    "from": 125,
    "label": "calls",
    "to": 348
  }, {
    "from": 125,
    "label": "calls",
    "to": 348
  }, {
    "from": 30,
    "label": "calls",
    "to": 349
  }, {
    "from": 125,
    "label": "calls",
    "to": 366
  }, {
    "from": 125,
    "label": "calls",
    "to": 68
  }, {
    "from": 266,
    "label": "calls",
    "to": 361
  }, {
    "from": 279,
    "label": "calls",
    "to": 361
  }, {
    "from": 295,
    "label": "calls",
    "to": 368
  }, {
    "from": 125,
    "label": "calls",
    "to": 369
  }, {
    "from": 106,
    "label": "calls",
    "to": 371
  }, {
    "from": 125,
    "label": "calls",
    "to": 351
  }, {
    "from": 344,
    "label": "calls",
    "to": 375
  }, {
    "from": 344,
    "label": "calls",
    "to": 375
  }, {
    "from": 344,
    "label": "calls",
    "to": 375
  }, {
    "from": 344,
    "label": "calls",
    "to": 375
  }, {
    "from": 344,
    "label": "calls",
    "to": 375
  }, {
    "from": 344,
    "label": "calls",
    "to": 375
  }, {
    "from": 344,
    "label": "calls",
    "to": 375
  }, {
    "from": 344,
    "label": "calls",
    "to": 375
  }, {
    "from": 344,
    "label": "calls",
    "to": 375
  }, {
    "from": 344,
    "label": "calls",
    "to": 375
  }, {
    "from": 125,
    "label": "calls",
    "to": 375
  }, {
    "from": 125,
    "label": "calls",
    "to": 375
  }, {
    "from": 125,
    "label": "calls",
    "to": 375
  }, {
    "from": 125,
    "label": "calls",
    "to": 375
  }, {
    "from": 125,
    "label": "calls",
    "to": 380
  }, {
    "from": 125,
    "label": "calls",
    "to": 380
  }, {
    "from": 125,
    "label": "calls",
    "to": 380
  }, {
    "from": 125,
    "label": "calls",
    "to": 275
  }, {
    "from": 125,
    "label": "calls",
    "to": 275
  }, {
    "from": 295,
    "label": "calls",
    "to": 279
  }, {
    "from": 19,
    "label": "calls",
    "to": 374
  }, {
    "from": 25,
    "label": "calls",
    "to": 359
  }, {
    "from": 123,
    "label": "calls",
    "to": 359
  }, {
    "from": 125,
    "label": "calls",
    "to": 359
  }, {
    "from": 125,
    "label": "calls",
    "to": 359
  }, {
    "from": 9,
    "label": "calls",
    "to": 372
  }, {
    "from": 125,
    "label": "calls",
    "to": 30
  }, {
    "from": 125,
    "label": "calls",
    "to": 30
  }, {
    "from": 74,
    "label": "calls",
    "to": 376
  }, {
    "from": 344,
    "label": "calls",
    "to": 376
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 344,
    "label": "calls",
    "to": 363
  }, {
    "from": 68,
    "label": "calls",
    "to": 345
  }, {
    "from": 125,
    "label": "calls",
    "to": 345
  }, {
    "from": 125,
    "label": "calls",
    "to": 370
  }, {
    "from": 344,
    "label": "calls",
    "to": 370
  }, {
    "from": 19,
    "label": "calls",
    "to": 360
  }, {
    "from": 19,
    "label": "calls",
    "to": 360
  }, {
    "from": 344,
    "label": "calls",
    "to": 360
  }, {
    "from": 125,
    "label": "calls",
    "to": 360
  }, {
    "from": 125,
    "label": "calls",
    "to": 360
  }, {
    "from": 125,
    "label": "calls",
    "to": 360
  }, {
    "from": 125,
    "label": "calls",
    "to": 360
  }, {
    "from": 292,
    "label": "calls",
    "to": 266
  }, {
    "from": 25,
    "label": "calls",
    "to": 23
  }, {
    "from": 125,
    "label": "calls",
    "to": 23
  }, {
    "from": 125,
    "label": "calls",
    "to": 23
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 17
  }, {
    "from": 344,
    "label": "calls",
    "to": 353
  }, {
    "from": 344,
    "label": "calls",
    "to": 353
  }, {
    "from": 344,
    "label": "calls",
    "to": 353
  }, {
    "from": 344,
    "label": "calls",
    "to": 353
  }, {
    "from": 344,
    "label": "calls",
    "to": 353
  }, {
    "from": 344,
    "label": "calls",
    "to": 353
  }, {
    "from": 344,
    "label": "calls",
    "to": 353
  }, {
    "from": 344,
    "label": "calls",
    "to": 353
  }, {
    "from": 344,
    "label": "calls",
    "to": 353
  }, {
    "from": 344,
    "label": "calls",
    "to": 353
  }, {
    "from": 344,
    "label": "calls",
    "to": 353
  }, {
    "from": 27,
    "label": "calls",
    "to": 353
  }, {
    "from": 30,
    "label": "calls",
    "to": 353
  }, {
    "from": 30,
    "label": "calls",
    "to": 353
  }, {
    "from": 30,
    "label": "calls",
    "to": 353
  }, {
    "from": 30,
    "label": "calls",
    "to": 353
  }, {
    "from": 30,
    "label": "calls",
    "to": 353
  }, {
    "from": 79,
    "label": "calls",
    "to": 353
  }, {
    "from": 115,
    "label": "calls",
    "to": 353
  }, {
    "from": 125,
    "label": "calls",
    "to": 353
  }, {
    "from": 125,
    "label": "calls",
    "to": 353
  }, {
    "from": 125,
    "label": "calls",
    "to": 353
  }, {
    "from": 125,
    "label": "calls",
    "to": 353
  }, {
    "from": 125,
    "label": "calls",
    "to": 353
  }, {
    "from": 125,
    "label": "calls",
    "to": 353
  }, {
    "from": 125,
    "label": "calls",
    "to": 353
  }, {
    "from": 344,
    "label": "calls",
    "to": 353
  }, {
    "from": 344,
    "label": "calls",
    "to": 353
  }, {
    "from": 344,
    "label": "calls",
    "to": 353
  }, {
    "from": 344,
    "label": "calls",
    "to": 353
  }, {
    "from": 295,
    "label": "calls",
    "to": 353
  }, {
    "from": 119,
    "label": "calls",
    "to": 367
  }, {
    "from": 244,
    "label": "calls",
    "to": 367
  }, {
    "from": 19,
    "label": "calls",
    "to": 378
  }, {
    "from": 344,
    "label": "calls",
    "to": 379
  }, {
    "from": 344,
    "label": "calls",
    "to": 379
  }, {
    "from": 344,
    "label": "calls",
    "to": 379
  }, {
    "from": 344,
    "label": "calls",
    "to": 381
  }, {
    "from": 9,
    "label": "calls",
    "to": 362
  }, {
    "from": 2,
    "label": "contains",
    "to": 344
  }, {
    "from": 344,
    "label": "declares",
    "to": 9
  }, {
    "from": 344,
    "label": "declares",
    "to": 17
  }, {
    "from": 344,
    "label": "declares",
    "to": 19
  }, {
    "from": 344,
    "label": "declares",
    "to": 23
  }, {
    "from": 344,
    "label": "declares",
    "to": 25
  }, {
    "from": 344,
    "label": "declares",
    "to": 27
  }, {
    "from": 344,
    "label": "declares",
    "to": 30
  }, {
    "from": 344,
    "label": "declares",
    "to": 54
  }, {
    "from": 344,
    "label": "declares",
    "to": 56
  }, {
    "from": 344,
    "label": "declares",
    "to": 58
  }, {
    "from": 344,
    "label": "declares",
    "to": 60
  }, {
    "from": 344,
    "label": "declares",
    "to": 62
  }, {
    "from": 344,
    "label": "declares",
    "to": 64
  }, {
    "from": 344,
    "label": "declares",
    "to": 66
  }, {
    "from": 344,
    "label": "declares",
    "to": 68
  }, {
    "from": 344,
    "label": "declares",
    "to": 74
  }, {
    "from": 344,
    "label": "declares",
    "to": 79
  }, {
    "from": 344,
    "label": "declares",
    "to": 85
  }, {
    "from": 344,
    "label": "declares",
    "to": 92
  }, {
    "from": 344,
    "label": "declares",
    "to": 100
  }, {
    "from": 344,
    "label": "declares",
    "to": 102
  }, {
    "from": 344,
    "label": "declares",
    "to": 104
  }, {
    "from": 344,
    "label": "declares",
    "to": 106
  }, {
    "from": 344,
    "label": "declares",
    "to": 110
  }, {
    "from": 344,
    "label": "declares",
    "to": 112
  }, {
    "from": 344,
    "label": "declares",
    "to": 115
  }, {
    "from": 344,
    "label": "declares",
    "to": 119
  }, {
    "from": 344,
    "label": "declares",
    "to": 123
  }, {
    "from": 344,
    "label": "declares",
    "to": 125
  }, {
    "from": 344,
    "label": "declares",
    "to": 244
  }, {
    "from": 344,
    "label": "declares",
    "to": 263
  }, {
    "from": 344,
    "label": "declares",
    "to": 266
  }, {
    "from": 344,
    "label": "declares",
    "to": 275
  }, {
    "from": 344,
    "label": "declares",
    "to": 277
  }, {
    "from": 344,
    "label": "declares",
    "to": 279
  }, {
    "from": 344,
    "label": "declares",
    "to": 288
  }, {
    "from": 344,
    "label": "declares",
    "to": 290
  }, {
    "from": 344,
    "label": "declares",
    "to": 292
  }, {
    "from": 344,
    "label": "declares",
    "to": 295
  }, {
    "from": 344,
    "label": "declares",
    "to": 311
  }, {
    "from": 344,
    "label": "declares",
    "to": 313
  }, {
    "from": 344,
    "label": "declares",
    "to": 315
  }, {
    "from": 344,
    "label": "declares",
    "to": 317
  }, {
    "from": 344,
    "label": "declares",
    "to": 319
  }, {
    "from": 344,
    "label": "declares",
    "to": 321
  }, {
    "from": 344,
    "label": "declares",
    "to": 323
  }, {
    "from": 344,
    "label": "declares",
    "to": 325
  }, {
    "from": 344,
    "label": "declares",
    "to": 327
  }, {
    "from": 344,
    "label": "declares",
    "to": 329
  }, {
    "from": 344,
    "label": "declares",
    "to": 331
  }, {
    "from": 344,
    "label": "declares",
    "to": 332
  }, {
    "from": 344,
    "label": "declares",
    "to": 334
  }, {
    "from": 344,
    "label": "declares",
    "to": 336
  }, {
    "from": 344,
    "label": "declares",
    "to": 338
  }, {
    "from": 344,
    "label": "declares",
    "to": 340
  }, {
    "from": 344,
    "label": "declares",
    "to": 342
  }, {
    "from": 2,
    "label": "declares",
    "to": 346
  }, {
    "from": 2,
    "label": "declares",
    "to": 350
  }, {
    "from": 2,
    "label": "contains",
    "to": 385
  }, {
    "from": 2,
    "label": "contains",
    "to": 386
  }, {
    "from": 385,
    "label": "initializes",
    "to": 387
  }, {
    "from": 387,
    "label": "assigns",
    "to": 388
  }, {
    "from": 385,
    "label": "initializes",
    "to": 389
  }, {
    "from": 389,
    "label": "assigns",
    "to": 390
  }, {
    "from": 385,
    "label": "initializes",
    "to": 391
  }, {
    "from": 391,
    "label": "assigns",
    "to": 392
  }, {
    "from": 385,
    "label": "initializes",
    "to": 393
  }, {
    "from": 393,
    "label": "assigns",
    "to": 394
  }, {
    "from": 385,
    "label": "initializes",
    "to": 395
  }, {
    "from": 395,
    "label": "assigns",
    "to": 396
  }, {
    "from": 385,
    "label": "initializes",
    "to": 397
  }, {
    "from": 397,
    "label": "assigns",
    "to": 398
  }, {
    "from": 385,
    "label": "initializes",
    "to": 399
  }, {
    "from": 399,
    "label": "assigns",
    "to": 400
  }, {
    "from": 385,
    "label": "initializes",
    "to": 401
  }, {
    "from": 401,
    "label": "assigns",
    "to": 402
  }, {
    "from": 385,
    "label": "initializes",
    "to": 403
  }, {
    "from": 403,
    "label": "assigns",
    "to": 404
  }, {
    "from": 385,
    "label": "initializes",
    "to": 405
  }, {
    "from": 405,
    "label": "assigns",
    "to": 406
  }, {
    "from": 385,
    "label": "initializes",
    "to": 407
  }, {
    "from": 407,
    "label": "assigns",
    "to": 408
  }, {
    "from": 385,
    "label": "initializes",
    "to": 409
  }, {
    "from": 409,
    "label": "assigns",
    "to": 410
  }, {
    "from": 385,
    "label": "initializes",
    "to": 411
  }, {
    "from": 411,
    "label": "assigns",
    "to": 412
  }, {
    "from": 385,
    "label": "initializes",
    "to": 413
  }, {
    "from": 413,
    "label": "assigns",
    "to": 414
  }, {
    "from": 385,
    "label": "initializes",
    "to": 415
  }, {
    "from": 415,
    "label": "assigns",
    "to": 416
  }, {
    "from": 385,
    "label": "initializes",
    "to": 417
  }, {
    "from": 417,
    "label": "assigns",
    "to": 418
  }, {
    "from": 385,
    "label": "initializes",
    "to": 419
  }, {
    "from": 419,
    "label": "assigns",
    "to": 420
  }, {
    "from": 385,
    "label": "initializes",
    "to": 421
  }, {
    "from": 421,
    "label": "assigns",
    "to": 422
  }, {
    "from": 385,
    "label": "initializes",
    "to": 423
  }, {
    "from": 423,
    "label": "assigns",
    "to": 424
  }, {
    "from": 385,
    "label": "initializes",
    "to": 425
  }, {
    "from": 425,
    "label": "assigns",
    "to": 426
  }, {
    "from": 385,
    "label": "initializes",
    "to": 427
  }, {
    "from": 427,
    "label": "assigns",
    "to": 428
  }, {
    "from": 385,
    "label": "initializes",
    "to": 429
  }, {
    "from": 429,
    "label": "assigns",
    "to": 430
  }, {
    "from": 385,
    "label": "initializes",
    "to": 431
  }, {
    "from": 431,
    "label": "assigns",
    "to": 432
  }, {
    "from": 385,
    "label": "initializes",
    "to": 433
  }, {
    "from": 433,
    "label": "assigns",
    "to": 434
  }, {
    "from": 385,
    "label": "initializes",
    "to": 435
  }, {
    "from": 435,
    "label": "assigns",
    "to": 436
  }, {
    "from": 385,
    "label": "initializes",
    "to": 437
  }, {
    "from": 437,
    "label": "assigns",
    "to": 438
  }, {
    "from": 385,
    "label": "initializes",
    "to": 439
  }, {
    "from": 439,
    "label": "assigns",
    "to": 440
  }, {
    "from": 385,
    "label": "initializes",
    "to": 441
  }, {
    "from": 441,
    "label": "assigns",
    "to": 442
  }, {
    "from": 385,
    "label": "initializes",
    "to": 443
  }, {
    "from": 443,
    "label": "assigns",
    "to": 444
  }, {
    "from": 385,
    "label": "initializes",
    "to": 445
  }, {
    "from": 445,
    "label": "assigns",
    "to": 446
  }, {
    "from": 385,
    "label": "initializes",
    "to": 447
  }, {
    "from": 447,
    "label": "assigns",
    "to": 448
  }, {
    "from": 385,
    "label": "initializes",
    "to": 449
  }, {
    "from": 449,
    "label": "assigns",
    "to": 450
  }, {
    "from": 385,
    "label": "initializes",
    "to": 451
  }, {
    "from": 451,
    "label": "assigns",
    "to": 452
  }, {
    "from": 452,
    "label": "assigns",
    "to": 453
  }, {
    "from": 453,
    "label": "assigns",
    "to": 454
  }, {
    "from": 452,
    "label": "assigns",
    "to": 455
  }, {
    "from": 452,
    "label": "assigns",
    "to": 456
  }, {
    "from": 452,
    "label": "assigns",
    "to": 457
  }, {
    "from": 452,
    "label": "assigns",
    "to": 458
  }, {
    "from": 452,
    "label": "assigns",
    "to": 459
  }, {
    "from": 452,
    "label": "assigns",
    "to": 460
  }, {
    "from": 452,
    "label": "assigns",
    "to": 461
  }, {
    "from": 452,
    "label": "assigns",
    "to": 462
  }, {
    "from": 452,
    "label": "assigns",
    "to": 463
  }, {
    "from": 452,
    "label": "assigns",
    "to": 464
  }, {
    "from": 452,
    "label": "assigns",
    "to": 465
  }, {
    "from": 452,
    "label": "assigns",
    "to": 466
  }, {
    "from": 385,
    "label": "initializes",
    "to": 467
  }, {
    "from": 467,
    "label": "assigns",
    "to": 468
  }, {
    "from": 468,
    "label": "assigns",
    "to": 469
  }, {
    "from": 469,
    "label": "assigns",
    "to": 470
  }, {
    "from": 468,
    "label": "assigns",
    "to": 471
  }, {
    "from": 471,
    "label": "assigns",
    "to": 472
  }, {
    "from": 468,
    "label": "assigns",
    "to": 473
  }, {
    "from": 473,
    "label": "assigns",
    "to": 474
  }, {
    "from": 468,
    "label": "assigns",
    "to": 475
  }, {
    "from": 475,
    "label": "assigns",
    "to": 476
  }, {
    "from": 468,
    "label": "assigns",
    "to": 477
  }, {
    "from": 477,
    "label": "assigns",
    "to": 478
  }, {
    "from": 468,
    "label": "assigns",
    "to": 479
  }, {
    "from": 479,
    "label": "assigns",
    "to": 480
  }, {
    "from": 468,
    "label": "assigns",
    "to": 481
  }, {
    "from": 481,
    "label": "assigns",
    "to": 482
  }, {
    "from": 385,
    "label": "initializes",
    "to": 483
  }, {
    "from": 483,
    "label": "assigns",
    "to": 484
  }, {
    "from": 484,
    "label": "assigns",
    "to": 485
  }, {
    "from": 485,
    "label": "assigns",
    "to": 486
  }, {
    "from": 484,
    "label": "assigns",
    "to": 487
  }, {
    "from": 487,
    "label": "assigns",
    "to": 488
  }, {
    "from": 484,
    "label": "assigns",
    "to": 489
  }, {
    "from": 489,
    "label": "assigns",
    "to": 490
  }, {
    "from": 484,
    "label": "assigns",
    "to": 491
  }, {
    "from": 491,
    "label": "assigns",
    "to": 492
  }, {
    "from": 484,
    "label": "assigns",
    "to": 493
  }, {
    "from": 493,
    "label": "assigns",
    "to": 494
  }, {
    "from": 484,
    "label": "assigns",
    "to": 495
  }, {
    "from": 495,
    "label": "assigns",
    "to": 496
  }, {
    "from": 385,
    "label": "initializes",
    "to": 497
  }, {
    "from": 497,
    "label": "assigns",
    "to": 498
  }, {
    "from": 498,
    "label": "assigns",
    "to": 499
  }, {
    "from": 499,
    "label": "assigns",
    "to": 500
  }, {
    "from": 498,
    "label": "assigns",
    "to": 501
  }, {
    "from": 501,
    "label": "assigns",
    "to": 502
  }, {
    "from": 498,
    "label": "assigns",
    "to": 503
  }, {
    "from": 503,
    "label": "assigns",
    "to": 504
  }, {
    "from": 385,
    "label": "initializes",
    "to": 505
  }, {
    "from": 505,
    "label": "assigns",
    "to": 506
  }, {
    "from": 506,
    "label": "assigns",
    "to": 507
  }, {
    "from": 507,
    "label": "assigns",
    "to": 508
  }, {
    "from": 506,
    "label": "assigns",
    "to": 509
  }, {
    "from": 509,
    "label": "assigns",
    "to": 510
  }, {
    "from": 506,
    "label": "assigns",
    "to": 511
  }, {
    "from": 511,
    "label": "assigns",
    "to": 512
  }, {
    "from": 506,
    "label": "assigns",
    "to": 513
  }, {
    "from": 513,
    "label": "assigns",
    "to": 514
  }, {
    "from": 506,
    "label": "assigns",
    "to": 515
  }, {
    "from": 515,
    "label": "assigns",
    "to": 516
  }, {
    "from": 506,
    "label": "assigns",
    "to": 517
  }, {
    "from": 517,
    "label": "assigns",
    "to": 518
  }, {
    "from": 506,
    "label": "assigns",
    "to": 519
  }, {
    "from": 519,
    "label": "assigns",
    "to": 520
  }, {
    "from": 506,
    "label": "assigns",
    "to": 521
  }, {
    "from": 521,
    "label": "assigns",
    "to": 522
  }, {
    "from": 506,
    "label": "assigns",
    "to": 523
  }, {
    "from": 523,
    "label": "assigns",
    "to": 524
  }, {
    "from": 506,
    "label": "assigns",
    "to": 525
  }, {
    "from": 525,
    "label": "assigns",
    "to": 526
  }, {
    "from": 506,
    "label": "assigns",
    "to": 527
  }, {
    "from": 527,
    "label": "assigns",
    "to": 528
  }, {
    "from": 506,
    "label": "assigns",
    "to": 529
  }, {
    "from": 529,
    "label": "assigns",
    "to": 530
  }, {
    "from": 506,
    "label": "assigns",
    "to": 531
  }, {
    "from": 531,
    "label": "assigns",
    "to": 532
  }, {
    "from": 506,
    "label": "assigns",
    "to": 533
  }, {
    "from": 533,
    "label": "assigns",
    "to": 534
  }, {
    "from": 506,
    "label": "assigns",
    "to": 535
  }, {
    "from": 535,
    "label": "assigns",
    "to": 536
  }, {
    "from": 506,
    "label": "assigns",
    "to": 537
  }, {
    "from": 537,
    "label": "assigns",
    "to": 538
  }, {
    "from": 506,
    "label": "assigns",
    "to": 539
  }, {
    "from": 539,
    "label": "assigns",
    "to": 540
  }, {
    "from": 506,
    "label": "assigns",
    "to": 541
  }, {
    "from": 541,
    "label": "assigns",
    "to": 542
  }, {
    "from": 506,
    "label": "assigns",
    "to": 543
  }, {
    "from": 543,
    "label": "assigns",
    "to": 544
  }, {
    "from": 506,
    "label": "assigns",
    "to": 545
  }, {
    "from": 545,
    "label": "assigns",
    "to": 546
  }, {
    "from": 506,
    "label": "assigns",
    "to": 547
  }, {
    "from": 547,
    "label": "assigns",
    "to": 548
  }, {
    "from": 506,
    "label": "assigns",
    "to": 549
  }, {
    "from": 549,
    "label": "assigns",
    "to": 550
  }, {
    "from": 506,
    "label": "assigns",
    "to": 551
  }, {
    "from": 551,
    "label": "assigns",
    "to": 552
  }, {
    "from": 506,
    "label": "assigns",
    "to": 553
  }, {
    "from": 553,
    "label": "assigns",
    "to": 554
  }, {
    "from": 385,
    "label": "initializes",
    "to": 555
  }, {
    "from": 555,
    "label": "assigns",
    "to": 556
  }, {
    "from": 556,
    "label": "assigns",
    "to": 557
  }, {
    "from": 557,
    "label": "assigns",
    "to": 558
  }, {
    "from": 556,
    "label": "assigns",
    "to": 559
  }, {
    "from": 559,
    "label": "assigns",
    "to": 560
  }, {
    "from": 556,
    "label": "assigns",
    "to": 561
  }, {
    "from": 561,
    "label": "assigns",
    "to": 562
  }, {
    "from": 556,
    "label": "assigns",
    "to": 563
  }, {
    "from": 563,
    "label": "assigns",
    "to": 564
  }, {
    "from": 556,
    "label": "assigns",
    "to": 565
  }, {
    "from": 565,
    "label": "assigns",
    "to": 566
  }, {
    "from": 556,
    "label": "assigns",
    "to": 567
  }, {
    "from": 567,
    "label": "assigns",
    "to": 568
  }, {
    "from": 556,
    "label": "assigns",
    "to": 569
  }, {
    "from": 569,
    "label": "assigns",
    "to": 570
  }, {
    "from": 385,
    "label": "initializes",
    "to": 571
  }, {
    "from": 571,
    "label": "assigns",
    "to": 572
  }, {
    "from": 572,
    "label": "assigns",
    "to": 573
  }, {
    "from": 573,
    "label": "assigns",
    "to": 574
  }, {
    "from": 572,
    "label": "assigns",
    "to": 575
  }, {
    "from": 575,
    "label": "assigns",
    "to": 576
  }, {
    "from": 572,
    "label": "assigns",
    "to": 577
  }, {
    "from": 577,
    "label": "assigns",
    "to": 578
  }, {
    "from": 572,
    "label": "assigns",
    "to": 579
  }, {
    "from": 579,
    "label": "assigns",
    "to": 580
  }, {
    "from": 385,
    "label": "initializes",
    "to": 581
  }, {
    "from": 581,
    "label": "assigns",
    "to": 582
  }, {
    "from": 582,
    "label": "assigns",
    "to": 583
  }, {
    "from": 583,
    "label": "assigns",
    "to": 584
  }, {
    "from": 582,
    "label": "assigns",
    "to": 585
  }, {
    "from": 585,
    "label": "assigns",
    "to": 586
  }, {
    "from": 582,
    "label": "assigns",
    "to": 587
  }, {
    "from": 587,
    "label": "assigns",
    "to": 588
  }, {
    "from": 582,
    "label": "assigns",
    "to": 589
  }, {
    "from": 589,
    "label": "assigns",
    "to": 590
  }, {
    "from": 582,
    "label": "assigns",
    "to": 591
  }, {
    "from": 591,
    "label": "assigns",
    "to": 592
  }, {
    "from": 582,
    "label": "assigns",
    "to": 593
  }, {
    "from": 593,
    "label": "assigns",
    "to": 594
  }, {
    "from": 582,
    "label": "assigns",
    "to": 595
  }, {
    "from": 595,
    "label": "assigns",
    "to": 596
  }, {
    "from": 582,
    "label": "assigns",
    "to": 597
  }, {
    "from": 597,
    "label": "assigns",
    "to": 598
  }, {
    "from": 582,
    "label": "assigns",
    "to": 599
  }, {
    "from": 599,
    "label": "assigns",
    "to": 600
  }, {
    "from": 385,
    "label": "initializes",
    "to": 601
  }, {
    "from": 601,
    "label": "assigns",
    "to": 602
  }, {
    "from": 385,
    "label": "initializes",
    "to": 603
  }, {
    "from": 603,
    "label": "assigns",
    "to": 604
  }, {
    "from": 385,
    "label": "initializes",
    "to": 605
  }, {
    "from": 605,
    "label": "assigns",
    "to": 606
  }, {
    "from": 385,
    "label": "initializes",
    "to": 607
  }, {
    "from": 607,
    "label": "assigns",
    "to": 608
  }, {
    "from": 608,
    "label": "assigns",
    "to": 609
  }, {
    "from": 609,
    "label": "assigns",
    "to": 610
  }, {
    "from": 608,
    "label": "assigns",
    "to": 611
  }, {
    "from": 611,
    "label": "assigns",
    "to": 612
  }, {
    "from": 385,
    "label": "initializes",
    "to": 613
  }, {
    "from": 613,
    "label": "assigns",
    "to": 614
  }, {
    "from": 614,
    "label": "assigns",
    "to": 615
  }, {
    "from": 615,
    "label": "assigns",
    "to": 616
  }, {
    "from": 614,
    "label": "assigns",
    "to": 617
  }, {
    "from": 617,
    "label": "assigns",
    "to": 618
  }, {
    "from": 614,
    "label": "assigns",
    "to": 619
  }, {
    "from": 619,
    "label": "assigns",
    "to": 620
  }, {
    "from": 385,
    "label": "initializes",
    "to": 621
  }, {
    "from": 621,
    "label": "assigns",
    "to": 622
  }, {
    "from": 622,
    "label": "assigns",
    "to": 623
  }, {
    "from": 623,
    "label": "assigns",
    "to": 624
  }, {
    "from": 622,
    "label": "assigns",
    "to": 625
  }, {
    "from": 625,
    "label": "assigns",
    "to": 626
  }, {
    "from": 622,
    "label": "assigns",
    "to": 627
  }, {
    "from": 627,
    "label": "assigns",
    "to": 628
  }, {
    "from": 622,
    "label": "assigns",
    "to": 629
  }, {
    "from": 629,
    "label": "assigns",
    "to": 630
  }, {
    "from": 622,
    "label": "assigns",
    "to": 631
  }, {
    "from": 631,
    "label": "assigns",
    "to": 632
  }, {
    "from": 622,
    "label": "assigns",
    "to": 633
  }, {
    "from": 633,
    "label": "assigns",
    "to": 634
  }, {
    "from": 622,
    "label": "assigns",
    "to": 635
  }, {
    "from": 635,
    "label": "assigns",
    "to": 636
  }, {
    "from": 622,
    "label": "assigns",
    "to": 637
  }, {
    "from": 637,
    "label": "assigns",
    "to": 638
  }, {
    "from": 622,
    "label": "assigns",
    "to": 639
  }, {
    "from": 639,
    "label": "assigns",
    "to": 640
  }, {
    "from": 622,
    "label": "assigns",
    "to": 641
  }, {
    "from": 641,
    "label": "assigns",
    "to": 642
  }, {
    "from": 622,
    "label": "assigns",
    "to": 643
  }, {
    "from": 643,
    "label": "assigns",
    "to": 644
  }, {
    "from": 622,
    "label": "assigns",
    "to": 645
  }, {
    "from": 645,
    "label": "assigns",
    "to": 646
  }, {
    "from": 622,
    "label": "assigns",
    "to": 647
  }, {
    "from": 647,
    "label": "assigns",
    "to": 648
  }, {
    "from": 622,
    "label": "assigns",
    "to": 649
  }, {
    "from": 649,
    "label": "assigns",
    "to": 650
  }, {
    "from": 622,
    "label": "assigns",
    "to": 651
  }, {
    "from": 651,
    "label": "assigns",
    "to": 652
  }, {
    "from": 622,
    "label": "assigns",
    "to": 653
  }, {
    "from": 653,
    "label": "assigns",
    "to": 654
  }, {
    "from": 622,
    "label": "assigns",
    "to": 655
  }, {
    "from": 655,
    "label": "assigns",
    "to": 656
  }, {
    "from": 622,
    "label": "assigns",
    "to": 657
  }, {
    "from": 657,
    "label": "assigns",
    "to": 658
  }, {
    "from": 622,
    "label": "assigns",
    "to": 659
  }, {
    "from": 659,
    "label": "assigns",
    "to": 660
  }, {
    "from": 622,
    "label": "assigns",
    "to": 661
  }, {
    "from": 661,
    "label": "assigns",
    "to": 662
  }, {
    "from": 622,
    "label": "assigns",
    "to": 663
  }, {
    "from": 663,
    "label": "assigns",
    "to": 664
  }, {
    "from": 622,
    "label": "assigns",
    "to": 665
  }, {
    "from": 665,
    "label": "assigns",
    "to": 666
  }, {
    "from": 622,
    "label": "assigns",
    "to": 667
  }, {
    "from": 667,
    "label": "assigns",
    "to": 668
  }, {
    "from": 385,
    "label": "initializes",
    "to": 669
  }, {
    "from": 669,
    "label": "assigns",
    "to": 670
  }, {
    "from": 670,
    "label": "assigns",
    "to": 671
  }, {
    "from": 671,
    "label": "assigns",
    "to": 672
  }, {
    "from": 670,
    "label": "assigns",
    "to": 673
  }, {
    "from": 673,
    "label": "assigns",
    "to": 674
  }, {
    "from": 670,
    "label": "assigns",
    "to": 675
  }, {
    "from": 675,
    "label": "assigns",
    "to": 676
  }, {
    "from": 670,
    "label": "assigns",
    "to": 677
  }, {
    "from": 677,
    "label": "assigns",
    "to": 678
  }, {
    "from": 670,
    "label": "assigns",
    "to": 679
  }, {
    "from": 679,
    "label": "assigns",
    "to": 680
  }, {
    "from": 670,
    "label": "assigns",
    "to": 681
  }, {
    "from": 681,
    "label": "assigns",
    "to": 682
  }, {
    "from": 670,
    "label": "assigns",
    "to": 683
  }, {
    "from": 683,
    "label": "assigns",
    "to": 684
  }, {
    "from": 385,
    "label": "initializes",
    "to": 685
  }, {
    "from": 685,
    "label": "assigns",
    "to": 686
  }, {
    "from": 385,
    "label": "initializes",
    "to": 687
  }, {
    "from": 687,
    "label": "assigns",
    "to": 688
  }, {
    "from": 385,
    "label": "initializes",
    "to": 689
  }, {
    "from": 689,
    "label": "assigns",
    "to": 690
  }, {
    "from": 385,
    "label": "initializes",
    "to": 691
  }, {
    "from": 691,
    "label": "assigns",
    "to": 692
  }, {
    "from": 385,
    "label": "initializes",
    "to": 693
  }, {
    "from": 693,
    "label": "assigns",
    "to": 694
  }, {
    "from": 385,
    "label": "initializes",
    "to": 695
  }, {
    "from": 695,
    "label": "assigns",
    "to": 696
  }, {
    "from": 385,
    "label": "initializes",
    "to": 697
  }, {
    "from": 697,
    "label": "assigns",
    "to": 698
  }, {
    "from": 385,
    "label": "initializes",
    "to": 699
  }, {
    "from": 699,
    "label": "assigns",
    "to": 700
  }, {
    "from": 385,
    "label": "initializes",
    "to": 701
  }, {
    "from": 701,
    "label": "assigns",
    "to": 702
  }, {
    "from": 385,
    "label": "initializes",
    "to": 703
  }, {
    "from": 703,
    "label": "assigns",
    "to": 704
  }, {
    "from": 385,
    "label": "initializes",
    "to": 705
  }, {
    "from": 705,
    "label": "assigns",
    "to": 706
  }, {
    "from": 386,
    "label": "initializes",
    "to": 707
  }, {
    "from": 707,
    "label": "requires",
    "to": 347
  }, {
    "from": 386,
    "label": "initializes",
    "to": 708
  }, {
    "from": 708,
    "label": "requires",
    "to": 3
  }, {
    "from": 386,
    "label": "initializes",
    "to": 709
  }, {
    "from": 709,
    "label": "requires",
    "to": 1
  }, {
    "from": 2,
    "label": "provides",
    "to": 710
  }, {
    "from": 382,
    "label": "represents",
    "to": 711
  }, {
    "from": 710,
    "label": "provides",
    "to": 711
  }, {
    "from": 712,
    "label": "requires",
    "to": 2
  }, {
    "from": 713,
    "label": "requires",
    "to": 2
  }, {
    "from": 697,
    "label": "contains",
    "to": 4
  }, {
    "from": 697,
    "label": "contains",
    "to": 5
  }, {
    "from": 697,
    "label": "contains",
    "to": 6
  }, {
    "from": 697,
    "label": "contains",
    "to": 7
  }, {
    "from": 697,
    "label": "contains",
    "to": 8
  }, {
    "from": 382,
    "label": "contains",
    "to": 263
  }, {
    "from": 383,
    "label": "contains",
    "to": 263
  }, {
    "from": 384,
    "label": "contains",
    "to": 263
  }, {
    "from": 697,
    "label": "contains",
    "to": 263
  }, {
    "from": 382,
    "label": "contains",
    "to": 266
  }, {
    "from": 383,
    "label": "contains",
    "to": 266
  }, {
    "from": 384,
    "label": "contains",
    "to": 266
  }, {
    "from": 697,
    "label": "contains",
    "to": 266
  }, {
    "from": 382,
    "label": "contains",
    "to": 279
  }, {
    "from": 383,
    "label": "contains",
    "to": 279
  }, {
    "from": 384,
    "label": "contains",
    "to": 279
  }, {
    "from": 697,
    "label": "contains",
    "to": 279
  }, {
    "from": 382,
    "label": "contains",
    "to": 292
  }, {
    "from": 383,
    "label": "contains",
    "to": 292
  }, {
    "from": 384,
    "label": "contains",
    "to": 292
  }, {
    "from": 697,
    "label": "contains",
    "to": 292
  }, {
    "from": 382,
    "label": "contains",
    "to": 295
  }, {
    "from": 383,
    "label": "contains",
    "to": 295
  }, {
    "from": 384,
    "label": "contains",
    "to": 295
  }, {
    "from": 697,
    "label": "contains",
    "to": 295
  }, {
    "from": 87,
    "label": "hasArgument",
    "to": 329
  }, {
    "from": 87,
    "label": "hasArgument",
    "to": 331
  }, {
    "from": 303,
    "label": "hasArgument",
    "to": 340
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "binary_converter",
    "type": "module"
  }, {
    "id": 2,
    "text": "ZipWriter",
    "type": "module"
  }, {
    "id": 3,
    "text": "utils",
    "type": "module"
  }, {
    "id": 4,
    "text": "function M.pass_thrue_only()\r\n  return not iconv\r\nend",
    "type": "function"
  }, {
    "id": 5,
    "text": "function M.supported(to, from)\r\n  return M[to][from] ~= pass_thrue\r\nend",
    "type": "function"
  }, {
    "id": 6,
    "text": "function M.convert(to, from, str)\r\n  return M[to][from](str)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "function M.GetLocalCPCode()\r\n  return LOCAL_CP or DEFAULT_CP\r\nend",
    "type": "function"
  }, {
    "id": 8,
    "text": "function M.GetLocalCPName()\r\n  return WINDOWS_CODE_PAGES[ LOCAL_CP or DEFAULT_CP ]\r\nend",
    "type": "function"
  }, {
    "id": 9,
    "text": "local function dump_byte(data, n)\r\n  for i = 1, n do \r\n    local n = sc.unpack(sc.uint8_t, data, i)\r\n    stdout:write(fmt(\"0x%.2X \", n))\r\n    if i == 16 then stdout:write('\\n') end\r\n  end\r\n  if math.mod(n, 16) ~= 0 then stdout:write('\\n') end\r\nend",
    "type": "function"
  }, {
    "id": 10,
    "text": "for i = 1, n do \r\n    local n = sc.unpack(sc.uint8_t, data, i)\r\n    stdout:write(fmt(\"0x%.2X \", n))\r\n    if i == 16 then stdout:write('\\n') end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 11,
    "text": "local n = sc.unpack(sc.uint8_t, data, i)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "stdout:write(fmt(\"0x%.2X \", n))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "if i == 16 then stdout:write('\\n') end",
    "type": "statement:if"
  }, {
    "id": 14,
    "text": "stdout:write('\\n')",
    "type": "statement:functioncall"
  }, {
    "id": 15,
    "text": "if math.mod(n, 16) ~= 0 then stdout:write('\\n') end",
    "type": "statement:if"
  }, {
    "id": 16,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 17,
    "text": "local function o(n) return tonumber(n, 8) end",
    "type": "function"
  }, {
    "id": 18,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 19,
    "text": "local function orflags(n, t)\r\n  if not t then return n end\r\n\r\n  if type(t) == 'table' then\r\n    return bit.bor(n, unpack(t))\r\n  end\r\n\r\n  return bit.bor(n, t)\r\nend",
    "type": "function"
  }, {
    "id": 20,
    "text": "if not t then return n end",
    "type": "statement:if"
  }, {
    "id": 21,
    "text": "if type(t) == 'table' then\r\n    return bit.bor(n, unpack(t))\r\n  end",
    "type": "statement:if"
  }, {
    "id": 22,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 23,
    "text": "local function zip_make_extra(HID, data)\r\n  return stream_converter.pack(STRUCT_CDH_EXTRA_RECORD, HID, #data, data)\r\nend",
    "type": "function"
  }, {
    "id": 24,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 25,
    "text": "local function zip_extra_pack(HID, struct, ...)\r\n  return zip_make_extra(HID, struct_pack(struct, ...))\r\nend",
    "type": "function"
  }, {
    "id": 26,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 27,
    "text": "local function ZipWriter_as_stream(stream)\r\n  -- @todo use class instead closures\r\n  return {\r\n    stream = stream;\r\n    pos    = assert(stream:get_pos());\r\n\r\n    write = function(self, chunk)\r\n      self.stream:write_(chunk)\r\n    end;\r\n\r\n    seekable = function(self)\r\n      return self.stream:seekable()\r\n    end;\r\n\r\n    get_pos = function(self)\r\n      return self.stream:get_pos()\r\n    end;\r\n\r\n    set_pos = function(self, pos)\r\n      return self.stream:set_pos(pos)\r\n    end;\r\n\r\n    close  = function(self)\r\n      return self.stream:get_pos() - self.pos\r\n    end;\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 28,
    "text": "self.stream:write_(chunk)",
    "type": "statement:functioncall"
  }, {
    "id": 29,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 30,
    "text": "local function zip_stream(stream, level, method)\r\n\r\n  local writer = {\r\n    stream   = stream;\r\n    last_4b  = \"\";\r\n  }\r\n\r\n  function writer:write_block_seekable (cd)\r\n    self.stream:write(cd)\r\n  end\r\n\r\n  function writer:write_block_no_seekable (cd)\r\n    local s = cd:sub(-4)\r\n    cd = self.last_4b .. cd:sub(1,-5)\r\n    self.last_4b = s\r\n\r\n    self.stream:write(cd)\r\n  end\r\n\r\n  function writer:write_first_block(cd)\r\n    self.write_block = assert(self.stream:seekable() and self.write_block_seekable or self.write_block_no_seekable)\r\n    self:write_block(cd:sub(3))\r\n  end\r\n\r\n  writer.write_block = writer.write_first_block\r\n\r\n  function writer:write(cd)\r\n    self:write_block(cd)\r\n  end\r\n\r\n  function writer:close()\r\n    if self.stream:seekable() then\r\n      local pos = assert(self.stream:get_pos())\r\n      assert(self.stream:set_pos(pos-4))\r\n    end\r\n    return self.stream:close()\r\n  end\r\n\r\n  local zstream = {\r\n    zd = assert(zlib.deflate(writer, level, method))\r\n  }\r\n  \r\n  function zstream:write(chunk)\r\n    assert(self.zd:write(chunk))\r\n  end\r\n\r\n  function zstream:close()\r\n    self.zd:close()\r\n    return writer:close()\r\n  end\r\n\r\n  return zstream\r\nend",
    "type": "function"
  }, {
    "id": 31,
    "text": "local writer = {\r\n    stream   = stream;\r\n    last_4b  = \"\";\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "function writer:write_block_seekable (cd)\r\n    self.stream:write(cd)\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 33,
    "text": "self.stream:write(cd)",
    "type": "statement:functioncall"
  }, {
    "id": 34,
    "text": "function writer:write_block_no_seekable (cd)\r\n    local s = cd:sub(-4)\r\n    cd = self.last_4b .. cd:sub(1,-5)\r\n    self.last_4b = s\r\n\r\n    self.stream:write(cd)\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 35,
    "text": "local s = cd:sub(-4)",
    "type": "statement:localassign"
  }, {
    "id": 36,
    "text": "cd = self.last_4b .. cd:sub(1,-5)",
    "type": "statement:assign"
  }, {
    "id": 37,
    "text": "self.last_4b = s",
    "type": "statement:assign"
  }, {
    "id": 38,
    "text": "function writer:write_first_block(cd)\r\n    self.write_block = assert(self.stream:seekable() and self.write_block_seekable or self.write_block_no_seekable)\r\n    self:write_block(cd:sub(3))\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 39,
    "text": "self.write_block = assert(self.stream:seekable() and self.write_block_seekable or self.write_block_no_seekable)",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "self:write_block(cd:sub(3))",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "writer.write_block = writer.write_first_block",
    "type": "statement:assign"
  }, {
    "id": 42,
    "text": "function writer:write(cd)\r\n    self:write_block(cd)\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 43,
    "text": "self:write_block(cd)",
    "type": "statement:functioncall"
  }, {
    "id": 44,
    "text": "function writer:close()\r\n    if self.stream:seekable() then\r\n      local pos = assert(self.stream:get_pos())\r\n      assert(self.stream:set_pos(pos-4))\r\n    end\r\n    return self.stream:close()\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 45,
    "text": "if self.stream:seekable() then\r\n      local pos = assert(self.stream:get_pos())\r\n      assert(self.stream:set_pos(pos-4))\r\n    end",
    "type": "statement:if"
  }, {
    "id": 46,
    "text": "local pos = assert(self.stream:get_pos())",
    "type": "statement:localassign"
  }, {
    "id": 47,
    "text": "assert(self.stream:set_pos(pos-4))",
    "type": "statement:functioncall"
  }, {
    "id": 48,
    "text": "local zstream = {\r\n    zd = assert(zlib.deflate(writer, level, method))\r\n  }",
    "type": "statement:localassign"
  }, {
    "id": 49,
    "text": "function zstream:write(chunk)\r\n    assert(self.zd:write(chunk))\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 50,
    "text": "assert(self.zd:write(chunk))",
    "type": "statement:functioncall"
  }, {
    "id": 51,
    "text": "function zstream:close()\r\n    self.zd:close()\r\n    return writer:close()\r\n  end",
    "type": "statement:globalfunction"
  }, {
    "id": 52,
    "text": "self.zd:close()",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function writer:write_block_seekable (cd)\r\n    self.stream:write(cd)\r\n  end",
    "type": "function"
  }, {
    "id": 55,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 56,
    "text": "function writer:write_block_no_seekable (cd)\r\n    local s = cd:sub(-4)\r\n    cd = self.last_4b .. cd:sub(1,-5)\r\n    self.last_4b = s\r\n\r\n    self.stream:write(cd)\r\n  end",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 58,
    "text": "function writer:write_first_block(cd)\r\n    self.write_block = assert(self.stream:seekable() and self.write_block_seekable or self.write_block_no_seekable)\r\n    self:write_block(cd:sub(3))\r\n  end",
    "type": "function"
  }, {
    "id": 59,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 60,
    "text": "function writer:write(cd)\r\n    self:write_block(cd)\r\n  end",
    "type": "function"
  }, {
    "id": 61,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 62,
    "text": "function writer:close()\r\n    if self.stream:seekable() then\r\n      local pos = assert(self.stream:get_pos())\r\n      assert(self.stream:set_pos(pos-4))\r\n    end\r\n    return self.stream:close()\r\n  end",
    "type": "function"
  }, {
    "id": 63,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 64,
    "text": "function zstream:write(chunk)\r\n    assert(self.zd:write(chunk))\r\n  end",
    "type": "function"
  }, {
    "id": 65,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 66,
    "text": "function zstream:close()\r\n    self.zd:close()\r\n    return writer:close()\r\n  end",
    "type": "function"
  }, {
    "id": 67,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 68,
    "text": "local function table_stream(dst)\r\n  local size = 0\r\n  return {\r\n    write = function(self, chunk)\r\n      table.insert(dst, chunk)\r\n      size = size + #chunk\r\n    end;\r\n\r\n    close = function(self)\r\n      dst = nil\r\n      return size\r\n    end;\r\n\r\n    seekable = function()\r\n      return false\r\n    end;\r\n    \r\n    get_pos = function()\r\n      return size;\r\n    end;\r\n  }\r\nend",
    "type": "function"
  }, {
    "id": 69,
    "text": "local size = 0",
    "type": "statement:localassign"
  }, {
    "id": 70,
    "text": "table.insert(dst, chunk)",
    "type": "statement:functioncall"
  }, {
    "id": 71,
    "text": "size = size + #chunk",
    "type": "statement:assign"
  }, {
    "id": 72,
    "text": "dst = nil",
    "type": "statement:assign"
  }, {
    "id": 73,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 74,
    "text": "function ZipWriter:new(options)\r\n  options = options or {}\r\n\r\n  local t = setmetatable({\r\n    private_ = {\r\n      use_utf8  = options.utf8;\r\n      use_zip64 = options.zip64;\r\n      encrypt   = options.encrypt;\r\n    }\r\n  }, self)\r\n  t:set_level(options.level)\r\n\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 75,
    "text": "options = options or {}",
    "type": "statement:assign"
  }, {
    "id": 76,
    "text": "local t = setmetatable({\r\n    private_ = {\r\n      use_utf8  = options.utf8;\r\n      use_zip64 = options.zip64;\r\n      encrypt   = options.encrypt;\r\n    }\r\n  }, self)",
    "type": "statement:localassign"
  }, {
    "id": 77,
    "text": "t:set_level(options.level)",
    "type": "statement:functioncall"
  }, {
    "id": 78,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 79,
    "text": "function ZipWriter:set_level(lvl)\r\n  if lvl then assert(lvl.value and lvl.flag and lvl.method, \"Invalid compression level value\")\r\n  else lvl = ZIP_COMPRESSION_LEVEL.DEFAULT_COMPRESSION end\r\n  self.private_.level = lvl\r\nend",
    "type": "function"
  }, {
    "id": 80,
    "text": "if lvl then assert(lvl.value and lvl.flag and lvl.method, \"Invalid compression level value\")\r\n  else lvl = ZIP_COMPRESSION_LEVEL.DEFAULT_COMPRESSION end",
    "type": "statement:if"
  }, {
    "id": 81,
    "text": "assert(lvl.value and lvl.flag and lvl.method, \"Invalid compression level value\")",
    "type": "statement:functioncall"
  }, {
    "id": 82,
    "text": "lvl = ZIP_COMPRESSION_LEVEL.DEFAULT_COMPRESSION",
    "type": "statement:assign"
  }, {
    "id": 83,
    "text": "self.private_.level = lvl",
    "type": "statement:assign"
  }, {
    "id": 84,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 85,
    "text": "function ZipWriter:open_stream(stream, autoclose)\r\n  if self.private_.stream == stream then return self end\r\n  self:open_writer(\r\n    function(chunk) \r\n      if not chunk then \r\n        if autoclose then return stream:close() end\r\n        return true\r\n      end\r\n      return stream:write(chunk)\r\n    end,\r\n    stream.seek and function(...) return stream:seek(...) end or nil\r\n  )\r\n  self.private_.stream = stream \r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 86,
    "text": "if self.private_.stream == stream then return self end",
    "type": "statement:if"
  }, {
    "id": 87,
    "text": "self:open_writer(\r\n    function(chunk) \r\n      if not chunk then \r\n        if autoclose then return stream:close() end\r\n        return true\r\n      end\r\n      return stream:write(chunk)\r\n    end,\r\n    stream.seek and function(...) return stream:seek(...) end or nil\r\n  )",
    "type": "statement:functioncall"
  }, {
    "id": 88,
    "text": "if not chunk then \r\n        if autoclose then return stream:close() end\r\n        return true\r\n      end",
    "type": "statement:if"
  }, {
    "id": 89,
    "text": "if autoclose then return stream:close() end",
    "type": "statement:if"
  }, {
    "id": 90,
    "text": "self.private_.stream = stream",
    "type": "statement:assign"
  }, {
    "id": 91,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 92,
    "text": "function ZipWriter:open_writer(writer, seek)\r\n  if self.private_.writer == writer then return self end\r\n  self.private_.seek      = seek\r\n  self.private_.writer    = writer\r\n  self.private_.headers   = {}; -- we can not transfer data from old stream\r\n  self.private_.begin_pos = self:seek(\"cur\", 0) or 0\r\n  self.private_.pos       = self.private_.begin_pos\r\n  return self\r\nend",
    "type": "function"
  }, {
    "id": 93,
    "text": "if self.private_.writer == writer then return self end",
    "type": "statement:if"
  }, {
    "id": 94,
    "text": "self.private_.seek      = seek",
    "type": "statement:assign"
  }, {
    "id": 95,
    "text": "self.private_.writer    = writer",
    "type": "statement:assign"
  }, {
    "id": 96,
    "text": "self.private_.headers   = {}",
    "type": "statement:assign"
  }, {
    "id": 97,
    "text": "self.private_.begin_pos = self:seek(\"cur\", 0) or 0",
    "type": "statement:assign"
  }, {
    "id": 98,
    "text": "self.private_.pos       = self.private_.begin_pos",
    "type": "statement:assign"
  }, {
    "id": 99,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 100,
    "text": "function ZipWriter:str2utf8(str)\r\n  return (self.private_.use_utf8 and toutf8 or todos)(str)\r\nend",
    "type": "function"
  }, {
    "id": 101,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 102,
    "text": "function ZipWriter:use_utf8()\r\n  return self.private_.use_utf8\r\nend",
    "type": "function"
  }, {
    "id": 103,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 104,
    "text": "function ZipWriter:use_zip64()\r\n  return self.private_.use_zip64\r\nend",
    "type": "function"
  }, {
    "id": 105,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 106,
    "text": "function ZipWriter:seek(...)\r\n  local seek = self.private_.seek\r\n  if not seek then return nil, \"not supported\" end\r\n  return seek(...)\r\nend",
    "type": "function"
  }, {
    "id": 107,
    "text": "local seek = self.private_.seek",
    "type": "statement:localassign"
  }, {
    "id": 108,
    "text": "if not seek then return nil, \"not supported\" end",
    "type": "statement:if"
  }, {
    "id": 109,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 110,
    "text": "function ZipWriter:seekable()\r\n  return self:seek('cur', 0) and true\r\nend",
    "type": "function"
  }, {
    "id": 111,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 112,
    "text": "function ZipWriter:set_pos(pos)\r\n  self.private_.pos = pos\r\n  return self:seek(\"set\", pos)\r\nend",
    "type": "function"
  }, {
    "id": 113,
    "text": "self.private_.pos = pos",
    "type": "statement:assign"
  }, {
    "id": 114,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 115,
    "text": "function ZipWriter:get_pos()\r\n  local pos = self:seek(\"cur\", 0)\r\n  assert((pos == nil) or (pos == self.private_.pos))\r\n  return pos or self.private_.pos\r\nend",
    "type": "function"
  }, {
    "id": 116,
    "text": "local pos = self:seek(\"cur\", 0)",
    "type": "statement:localassign"
  }, {
    "id": 117,
    "text": "assert((pos == nil) or (pos == self.private_.pos))",
    "type": "statement:functioncall"
  }, {
    "id": 118,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 119,
    "text": "function ZipWriter:write_(str)\r\n  self.private_.writer(str)\r\n  self.private_.pos = self.private_.pos + #str\r\nend",
    "type": "function"
  }, {
    "id": 120,
    "text": "self.private_.writer(str)",
    "type": "statement:functioncall"
  }, {
    "id": 121,
    "text": "self.private_.pos = self.private_.pos + #str",
    "type": "statement:assign"
  }, {
    "id": 122,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 123,
    "text": "function ZipWriter:write_fmt_(...)\r\n  return self:write_(struct_pack(...))\r\nend",
    "type": "function"
  }, {
    "id": 124,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 125,
    "text": "function ZipWriter:write(\r\n  fileName, fileDesc,\r\n  reader, comment\r\n)\r\n  comment = comment or \"\"\r\n\r\n  local utfpath    = self:str2utf8(fileName)\r\n  local utfcomment = self:str2utf8(comment)\r\n\r\n  local flags      = self:use_utf8() and ZIP_FLAGS.UTF8 or 0\r\n  local level      = self.private_.level\r\n  local method     = level.method\r\n\r\n  local cdextra    = \"\" -- to central directory\r\n  local extra      = \"\"\r\n  local crc        = zlib.crc32()\r\n  local seekable   = self:seekable()\r\n\r\n  local encrypt    = fileDesc.encrypt or self.private_.encrypt\r\n\r\n  local use_aes  = false\r\n  if encrypt then\r\n    if encrypt:type() ~= 'aes' then error('unsupported encrypt method: ' .. encrypt:type()) end\r\n    use_aes = true\r\n  end\r\n  local AES_MODE = use_aes and encrypt:mode()\r\n  local AES_VER  = use_aes and encrypt:version()\r\n\r\n  local fileDesc_mtime = time2dos(fileDesc.mtime)\r\n  local inattrib = fileDesc.istext and 1 or 0 -- internal file attributes\r\n  local version  = fileDesc.ver_extr or ZIP_VERSION_EXTRACT[\"2.0\"]\r\n\r\n  if method == ZIP_COMPRESSION_METHOD.STORE then  -- winrar 3.93 do this\r\n    inattrib = 0\r\n  end\r\n\r\n  if use_aes then\r\n    version = ZIP_VERSION_EXTRACT[\"5.1\"] -- @encrypt 7z do this\r\n  else\r\n    if method == ZIP_COMPRESSION_METHOD.STORE and fileDesc.isfile then  -- winrar 3.93 and 7z do this\r\n      version = ZIP_VERSION_EXTRACT[\"1.0\"]\r\n    end\r\n  end\r\n\r\n  local ver_made \r\n  if use_aes then\r\n    ver_made = ZIP_VERSION_EXTRACT[\"6.3\"] -- @encrypt 7z do this\r\n  else \r\n    ver_made = ZIP_VERSION_EXTRACT[\"2.0\"]\r\n  end\r\n\r\n  local platform_made = fileDesc.platform\r\n  if not platform_made then\r\n    platform_made = IS_WINDOWS and 'fat32' or 'unix'\r\n  elseif platform_made:lower() == 'windows' then\r\n    platform_made = 'fat32' -- for compatability\r\n  end\r\n  platform_made = ZIP_VERSION_MADE[platform_made:upper()] or ZIP_VERSION_MADE.UNIX\r\n\r\n  ver_made = bit.bor( ver_made, platform_made )\r\n\r\n  if fileDesc.isfile then\r\n    flags = bit.bor(flags, level.flag)\r\n    if not seekable then\r\n      flags = bit.bor(flags, ZIP_FLAGS.CRC_IN_DESCRIPTOR)\r\n    end\r\n  end\r\n\r\n  local size   = 0\r\n  local csize  = 0\r\n  local offset = self:get_pos()\r\n\r\n  if use_aes then\r\n    local e = zip_extra_pack(ZIP_CDH_EXTRA_ID.AES, STRUCT_AES_EXTRA, \r\n      AES_VER, AES_EXTRA_SIG, AES_MODE, method)\r\n    extra   = extra   .. e\r\n    cdextra = cdextra .. e -- export to CD\r\n    flags   = bit.bor(flags, ZIP_FLAGS.ENCRYPT)\r\n  end\r\n\r\n  local offset_extra_zip64\r\n  if self:use_zip64() then\r\n    offset_extra_zip64 = #extra + 4 -- position in extra field (skeep HeaderID and FieldSize)\r\n    extra = extra .. zip_extra_pack(ZIP_CDH_EXTRA_ID.ZIP64, STRUCT_ZIP64_EXTRA, \r\n      size, csize, offset - self.private_.begin_pos, 0\r\n    )\r\n    size   = 0xFFFFFFFF\r\n    csize  = 0xFFFFFFFF\r\n  end\r\n\r\n  self:write_fmt_(STRUCT_LOCAL_FILE_HEADER,\r\n    ZIP_SIG.LFH, version, flags, \r\n    use_aes and ZIP_COMPRESSION_METHOD.AES or method,\r\n    fileDesc_mtime, crc,\r\n    csize, size, #utfpath, #extra,\r\n    utfpath, extra\r\n  )\r\n\r\n  if self:use_zip64() then\r\n    -- position in stream\r\n    offset_extra_zip64 = (self:get_pos() - #extra) + offset_extra_zip64\r\n  end\r\n\r\n  size   = 0\r\n  csize  = 0\r\n\r\n  local reader_error -- error from reader (e.g. access error to file)\r\n  if fileDesc.isfile then\r\n    -- create stream for file data\r\n    local stream = ZipWriter_as_stream(self)\r\n    if use_aes then stream = encrypt:stream(stream, fileDesc) end\r\n\r\n    if fileDesc.data then \r\n      local data = fileDesc.data\r\n      size = #data\r\n      crc = zlib.crc32(crc, data)\r\n\r\n      local cdata\r\n      if method == ZIP_COMPRESSION_METHOD.DEFLATE then\r\n        cdata = {}\r\n        local zstream = zip_stream(table_stream(cdata), level.value, method)\r\n        zstream:write(data)\r\n        csize = zstream:close()\r\n \r\n        -- if we can change method in LFH we can use it\r\n        if seekable and (not use_aes) and (csize > size) then\r\n          method = ZIP_COMPRESSION_METHOD.STORE\r\n          cdata = data\r\n        else cdata = table.concat(cdata) end\r\n      else \r\n        assert(method == ZIP_COMPRESSION_METHOD.STORE)\r\n        cdata = data\r\n      end\r\n\r\n      stream:write(cdata)\r\n    else -- use stream\r\n      if method == ZIP_COMPRESSION_METHOD.DEFLATE then\r\n        stream = zip_stream(stream, level.value, method)\r\n      else assert(method == ZIP_COMPRESSION_METHOD.STORE) end\r\n\r\n      local chunk, ctx = reader()\r\n      while(chunk)do\r\n        crc = zlib.crc32(correct_crc(crc), chunk)\r\n        stream:write(chunk)\r\n        size = size + #chunk\r\n        chunk, ctx = reader(ctx)\r\n      end\r\n      reader_error = ctx\r\n    end\r\n\r\n    csize = stream:close()\r\n\r\n    if use_aes then\r\n      method = ZIP_COMPRESSION_METHOD.AES\r\n      if AES_VER == AES_VERSION.AE2 then crc = 0 end\r\n    end\r\n\r\n    if seekable then -- update the header if the output is seekable\r\n      local cur_pos = assert(self:get_pos())\r\n      -- field 'method' can be changed, so we also overwrite it also\r\n\r\n      if self:use_zip64() then\r\n\r\n        assert(self:set_pos(offset + LFH_METHOD_OFFSET))\r\n        self:write_fmt_( -- begin of STRUCT_LOCAL_FILE_HEADER\r\n          STRUCT{uint16_t;uint32_t;uint32_t;},\r\n          method, fileDesc_mtime, crc\r\n        )\r\n\r\n        assert(self:set_pos(offset_extra_zip64))\r\n        self:write_fmt_(STRUCT{uint64_t;uint64_t}, size, csize)\r\n\r\n      else\r\n        assert(self:set_pos(offset + LFH_METHOD_OFFSET))\r\n        self:write_fmt_( -- begin of STRUCT_LOCAL_FILE_HEADER\r\n          STRUCT{uint16_t;uint32_t;uint32_t;uint32_t;uint32_t;},\r\n          method, fileDesc_mtime, crc, csize, size\r\n        )\r\n      end\r\n      assert(self:set_pos(cur_pos))\r\n    else\r\n      self:write_fmt_( self:use_zip64() and STRUCT_DATA_DESCRIPTOR64 or STRUCT_DATA_DESCRIPTOR,\r\n        ZIP_SIG.DATA_DESCRIPTOR, crc, csize, size\r\n      )\r\n    end\r\n  end\r\n\r\n  if IS_WINDOWS or (fileDesc.platform and (fileDesc.platform:lower() == 'windows')) then\r\n    local m,a,c = fileDesc.mtime,fileDesc.atime,fileDesc.ctime\r\n    if time2filetime and m and a and c then\r\n      local m,a,c = time2filetime(m),time2filetime(a),time2filetime(c)\r\n      local ntfs_elem_001 = STRUCT{\r\n        uint16_t; -- tag  0x0001\r\n        uint16_t; -- size 0x0018\r\n        uint32_t;uint32_t; -- File last modification time\r\n        uint32_t;uint32_t; -- File last access time\r\n        uint32_t;uint32_t; -- File creation time\r\n      }\r\n      local ntfs_extra = zip_make_extra(ZIP_CDH_EXTRA_ID.NTFS,\r\n        stream_converter.pack(uint32_t, 0) .. -- reserved\r\n        stream_converter.pack(ntfs_elem_001, \r\n          0x0001, 0x0018, m[1],m[2],a[1],a[2],c[1],c[2]\r\n        )\r\n      )\r\n      cdextra = ntfs_extra .. cdextra\r\n    end\r\n  end\r\n\r\n  if self:use_zip64() then\r\n    local z64extra = struct_pack(STRUCT_ZIP64_EXTRA, size, csize, offset - self.private_.begin_pos, 0)\r\n    cdextra = cdextra .. zip_make_extra(ZIP_CDH_EXTRA_ID.ZIP64, z64extra)\r\n\r\n    size   = 0xFFFFFFFF\r\n    csize  = 0xFFFFFFFF\r\n  end\r\n\r\n  local cdh = struct_pack(STRUCT_CENTRAL_DIRECTORY, \r\n    ZIP_SIG.CFH,ver_made,version, flags, method,\r\n    fileDesc_mtime,crc,csize,size,\r\n    #utfpath, #cdextra, #utfcomment,\r\n    0, inattrib, orflags(0x00, fileDesc.exattrib), offset - self.private_.begin_pos, -- disk number start\r\n    utfpath, cdextra, utfcomment\r\n  )\r\n  table.insert(self.private_.headers, cdh)\r\n\r\n  if reader_error then return nil, reader_error end\r\n\r\n  return true\r\nend",
    "type": "function"
  }, {
    "id": 126,
    "text": "comment = comment or \"\"",
    "type": "statement:assign"
  }, {
    "id": 127,
    "text": "local utfpath    = self:str2utf8(fileName)",
    "type": "statement:localassign"
  }, {
    "id": 128,
    "text": "local utfcomment = self:str2utf8(comment)",
    "type": "statement:localassign"
  }, {
    "id": 129,
    "text": "local flags      = self:use_utf8() and ZIP_FLAGS.UTF8 or 0",
    "type": "statement:localassign"
  }, {
    "id": 130,
    "text": "local level      = self.private_.level",
    "type": "statement:localassign"
  }, {
    "id": 131,
    "text": "local method     = level.method",
    "type": "statement:localassign"
  }, {
    "id": 132,
    "text": "local cdextra    = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 133,
    "text": "local extra      = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 134,
    "text": "local crc        = zlib.crc32()",
    "type": "statement:localassign"
  }, {
    "id": 135,
    "text": "local seekable   = self:seekable()",
    "type": "statement:localassign"
  }, {
    "id": 136,
    "text": "local encrypt    = fileDesc.encrypt or self.private_.encrypt",
    "type": "statement:localassign"
  }, {
    "id": 137,
    "text": "local use_aes  = false",
    "type": "statement:localassign"
  }, {
    "id": 138,
    "text": "if encrypt then\r\n    if encrypt:type() ~= 'aes' then error('unsupported encrypt method: ' .. encrypt:type()) end\r\n    use_aes = true\r\n  end",
    "type": "statement:if"
  }, {
    "id": 139,
    "text": "if encrypt:type() ~= 'aes' then error('unsupported encrypt method: ' .. encrypt:type()) end",
    "type": "statement:if"
  }, {
    "id": 140,
    "text": "error('unsupported encrypt method: ' .. encrypt:type())",
    "type": "statement:functioncall"
  }, {
    "id": 141,
    "text": "use_aes = true",
    "type": "statement:assign"
  }, {
    "id": 142,
    "text": "local AES_MODE = use_aes and encrypt:mode()",
    "type": "statement:localassign"
  }, {
    "id": 143,
    "text": "local AES_VER  = use_aes and encrypt:version()",
    "type": "statement:localassign"
  }, {
    "id": 144,
    "text": "local fileDesc_mtime = time2dos(fileDesc.mtime)",
    "type": "statement:localassign"
  }, {
    "id": 145,
    "text": "local inattrib = fileDesc.istext and 1 or 0",
    "type": "statement:localassign"
  }, {
    "id": 146,
    "text": "local version  = fileDesc.ver_extr or ZIP_VERSION_EXTRACT[\"2.0\"]",
    "type": "statement:localassign"
  }, {
    "id": 147,
    "text": "if method == ZIP_COMPRESSION_METHOD.STORE then  -- winrar 3.93 do this\r\n    inattrib = 0\r\n  end",
    "type": "statement:if"
  }, {
    "id": 148,
    "text": "inattrib = 0",
    "type": "statement:assign"
  }, {
    "id": 149,
    "text": "if use_aes then\r\n    version = ZIP_VERSION_EXTRACT[\"5.1\"] -- @encrypt 7z do this\r\n  else\r\n    if method == ZIP_COMPRESSION_METHOD.STORE and fileDesc.isfile then  -- winrar 3.93 and 7z do this\r\n      version = ZIP_VERSION_EXTRACT[\"1.0\"]\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 150,
    "text": "version = ZIP_VERSION_EXTRACT[\"5.1\"]",
    "type": "statement:assign"
  }, {
    "id": 151,
    "text": "if method == ZIP_COMPRESSION_METHOD.STORE and fileDesc.isfile then  -- winrar 3.93 and 7z do this\r\n      version = ZIP_VERSION_EXTRACT[\"1.0\"]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 152,
    "text": "version = ZIP_VERSION_EXTRACT[\"1.0\"]",
    "type": "statement:assign"
  }, {
    "id": 153,
    "text": "local ver_made",
    "type": "statement:localassign"
  }, {
    "id": 154,
    "text": "if use_aes then\r\n    ver_made = ZIP_VERSION_EXTRACT[\"6.3\"] -- @encrypt 7z do this\r\n  else \r\n    ver_made = ZIP_VERSION_EXTRACT[\"2.0\"]\r\n  end",
    "type": "statement:if"
  }, {
    "id": 155,
    "text": "ver_made = ZIP_VERSION_EXTRACT[\"6.3\"]",
    "type": "statement:assign"
  }, {
    "id": 156,
    "text": "ver_made = ZIP_VERSION_EXTRACT[\"2.0\"]",
    "type": "statement:assign"
  }, {
    "id": 157,
    "text": "local platform_made = fileDesc.platform",
    "type": "statement:localassign"
  }, {
    "id": 158,
    "text": "if not platform_made then\r\n    platform_made = IS_WINDOWS and 'fat32' or 'unix'\r\n  elseif platform_made:lower() == 'windows' then\r\n    platform_made = 'fat32' -- for compatability\r\n  end",
    "type": "statement:if"
  }, {
    "id": 159,
    "text": "platform_made = IS_WINDOWS and 'fat32' or 'unix'",
    "type": "statement:assign"
  }, {
    "id": 160,
    "text": "platform_made = 'fat32'",
    "type": "statement:assign"
  }, {
    "id": 161,
    "text": "platform_made = ZIP_VERSION_MADE[platform_made:upper()] or ZIP_VERSION_MADE.UNIX",
    "type": "statement:assign"
  }, {
    "id": 162,
    "text": "ver_made = bit.bor( ver_made, platform_made )",
    "type": "statement:assign"
  }, {
    "id": 163,
    "text": "if fileDesc.isfile then\r\n    flags = bit.bor(flags, level.flag)\r\n    if not seekable then\r\n      flags = bit.bor(flags, ZIP_FLAGS.CRC_IN_DESCRIPTOR)\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 164,
    "text": "flags = bit.bor(flags, level.flag)",
    "type": "statement:assign"
  }, {
    "id": 165,
    "text": "if not seekable then\r\n      flags = bit.bor(flags, ZIP_FLAGS.CRC_IN_DESCRIPTOR)\r\n    end",
    "type": "statement:if"
  }, {
    "id": 166,
    "text": "flags = bit.bor(flags, ZIP_FLAGS.CRC_IN_DESCRIPTOR)",
    "type": "statement:assign"
  }, {
    "id": 167,
    "text": "local size   = 0",
    "type": "statement:localassign"
  }, {
    "id": 168,
    "text": "local csize  = 0",
    "type": "statement:localassign"
  }, {
    "id": 169,
    "text": "local offset = self:get_pos()",
    "type": "statement:localassign"
  }, {
    "id": 170,
    "text": "if use_aes then\r\n    local e = zip_extra_pack(ZIP_CDH_EXTRA_ID.AES, STRUCT_AES_EXTRA, \r\n      AES_VER, AES_EXTRA_SIG, AES_MODE, method)\r\n    extra   = extra   .. e\r\n    cdextra = cdextra .. e -- export to CD\r\n    flags   = bit.bor(flags, ZIP_FLAGS.ENCRYPT)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 171,
    "text": "local e = zip_extra_pack(ZIP_CDH_EXTRA_ID.AES, STRUCT_AES_EXTRA, \r\n      AES_VER, AES_EXTRA_SIG, AES_MODE, method)",
    "type": "statement:localassign"
  }, {
    "id": 172,
    "text": "extra   = extra   .. e",
    "type": "statement:assign"
  }, {
    "id": 173,
    "text": "cdextra = cdextra .. e",
    "type": "statement:assign"
  }, {
    "id": 174,
    "text": "flags   = bit.bor(flags, ZIP_FLAGS.ENCRYPT)",
    "type": "statement:assign"
  }, {
    "id": 175,
    "text": "local offset_extra_zip64",
    "type": "statement:localassign"
  }, {
    "id": 176,
    "text": "if self:use_zip64() then\r\n    offset_extra_zip64 = #extra + 4 -- position in extra field (skeep HeaderID and FieldSize)\r\n    extra = extra .. zip_extra_pack(ZIP_CDH_EXTRA_ID.ZIP64, STRUCT_ZIP64_EXTRA, \r\n      size, csize, offset - self.private_.begin_pos, 0\r\n    )\r\n    size   = 0xFFFFFFFF\r\n    csize  = 0xFFFFFFFF\r\n  end",
    "type": "statement:if"
  }, {
    "id": 177,
    "text": "offset_extra_zip64 = #extra + 4",
    "type": "statement:assign"
  }, {
    "id": 178,
    "text": "extra = extra .. zip_extra_pack(ZIP_CDH_EXTRA_ID.ZIP64, STRUCT_ZIP64_EXTRA, \r\n      size, csize, offset - self.private_.begin_pos, 0\r\n    )",
    "type": "statement:assign"
  }, {
    "id": 179,
    "text": "size   = 0xFFFFFFFF",
    "type": "statement:assign"
  }, {
    "id": 180,
    "text": "csize  = 0xFFFFFFFF",
    "type": "statement:assign"
  }, {
    "id": 181,
    "text": "self:write_fmt_(STRUCT_LOCAL_FILE_HEADER,\r\n    ZIP_SIG.LFH, version, flags, \r\n    use_aes and ZIP_COMPRESSION_METHOD.AES or method,\r\n    fileDesc_mtime, crc,\r\n    csize, size, #utfpath, #extra,\r\n    utfpath, extra\r\n  )",
    "type": "statement:functioncall"
  }, {
    "id": 182,
    "text": "if self:use_zip64() then\r\n    -- position in stream\r\n    offset_extra_zip64 = (self:get_pos() - #extra) + offset_extra_zip64\r\n  end",
    "type": "statement:if"
  }, {
    "id": 183,
    "text": "offset_extra_zip64 = (self:get_pos() - #extra) + offset_extra_zip64",
    "type": "statement:assign"
  }, {
    "id": 184,
    "text": "size   = 0",
    "type": "statement:assign"
  }, {
    "id": 185,
    "text": "csize  = 0",
    "type": "statement:assign"
  }, {
    "id": 186,
    "text": "local reader_error",
    "type": "statement:localassign"
  }, {
    "id": 187,
    "text": "if fileDesc.isfile then\r\n    -- create stream for file data\r\n    local stream = ZipWriter_as_stream(self)\r\n    if use_aes then stream = encrypt:stream(stream, fileDesc) end\r\n\r\n    if fileDesc.data then \r\n      local data = fileDesc.data\r\n      size = #data\r\n      crc = zlib.crc32(crc, data)\r\n\r\n      local cdata\r\n      if method == ZIP_COMPRESSION_METHOD.DEFLATE then\r\n        cdata = {}\r\n        local zstream = zip_stream(table_stream(cdata), level.value, method)\r\n        zstream:write(data)\r\n        csize = zstream:close()\r\n \r\n        -- if we can change method in LFH we can use it\r\n        if seekable and (not use_aes) and (csize > size) then\r\n          method = ZIP_COMPRESSION_METHOD.STORE\r\n          cdata = data\r\n        else cdata = table.concat(cdata) end\r\n      else \r\n        assert(method == ZIP_COMPRESSION_METHOD.STORE)\r\n        cdata = data\r\n      end\r\n\r\n      stream:write(cdata)\r\n    else -- use stream\r\n      if method == ZIP_COMPRESSION_METHOD.DEFLATE then\r\n        stream = zip_stream(stream, level.value, method)\r\n      else assert(method == ZIP_COMPRESSION_METHOD.STORE) end\r\n\r\n      local chunk, ctx = reader()\r\n      while(chunk)do\r\n        crc = zlib.crc32(correct_crc(crc), chunk)\r\n        stream:write(chunk)\r\n        size = size + #chunk\r\n        chunk, ctx = reader(ctx)\r\n      end\r\n      reader_error = ctx\r\n    end\r\n\r\n    csize = stream:close()\r\n\r\n    if use_aes then\r\n      method = ZIP_COMPRESSION_METHOD.AES\r\n      if AES_VER == AES_VERSION.AE2 then crc = 0 end\r\n    end\r\n\r\n    if seekable then -- update the header if the output is seekable\r\n      local cur_pos = assert(self:get_pos())\r\n      -- field 'method' can be changed, so we also overwrite it also\r\n\r\n      if self:use_zip64() then\r\n\r\n        assert(self:set_pos(offset + LFH_METHOD_OFFSET))\r\n        self:write_fmt_( -- begin of STRUCT_LOCAL_FILE_HEADER\r\n          STRUCT{uint16_t;uint32_t;uint32_t;},\r\n          method, fileDesc_mtime, crc\r\n        )\r\n\r\n        assert(self:set_pos(offset_extra_zip64))\r\n        self:write_fmt_(STRUCT{uint64_t;uint64_t}, size, csize)\r\n\r\n      else\r\n        assert(self:set_pos(offset + LFH_METHOD_OFFSET))\r\n        self:write_fmt_( -- begin of STRUCT_LOCAL_FILE_HEADER\r\n          STRUCT{uint16_t;uint32_t;uint32_t;uint32_t;uint32_t;},\r\n          method, fileDesc_mtime, crc, csize, size\r\n        )\r\n      end\r\n      assert(self:set_pos(cur_pos))\r\n    else\r\n      self:write_fmt_( self:use_zip64() and STRUCT_DATA_DESCRIPTOR64 or STRUCT_DATA_DESCRIPTOR,\r\n        ZIP_SIG.DATA_DESCRIPTOR, crc, csize, size\r\n      )\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 188,
    "text": "local stream = ZipWriter_as_stream(self)",
    "type": "statement:localassign"
  }, {
    "id": 189,
    "text": "if use_aes then stream = encrypt:stream(stream, fileDesc) end",
    "type": "statement:if"
  }, {
    "id": 190,
    "text": "stream = encrypt:stream(stream, fileDesc)",
    "type": "statement:assign"
  }, {
    "id": 191,
    "text": "if fileDesc.data then \r\n      local data = fileDesc.data\r\n      size = #data\r\n      crc = zlib.crc32(crc, data)\r\n\r\n      local cdata\r\n      if method == ZIP_COMPRESSION_METHOD.DEFLATE then\r\n        cdata = {}\r\n        local zstream = zip_stream(table_stream(cdata), level.value, method)\r\n        zstream:write(data)\r\n        csize = zstream:close()\r\n \r\n        -- if we can change method in LFH we can use it\r\n        if seekable and (not use_aes) and (csize > size) then\r\n          method = ZIP_COMPRESSION_METHOD.STORE\r\n          cdata = data\r\n        else cdata = table.concat(cdata) end\r\n      else \r\n        assert(method == ZIP_COMPRESSION_METHOD.STORE)\r\n        cdata = data\r\n      end\r\n\r\n      stream:write(cdata)\r\n    else -- use stream\r\n      if method == ZIP_COMPRESSION_METHOD.DEFLATE then\r\n        stream = zip_stream(stream, level.value, method)\r\n      else assert(method == ZIP_COMPRESSION_METHOD.STORE) end\r\n\r\n      local chunk, ctx = reader()\r\n      while(chunk)do\r\n        crc = zlib.crc32(correct_crc(crc), chunk)\r\n        stream:write(chunk)\r\n        size = size + #chunk\r\n        chunk, ctx = reader(ctx)\r\n      end\r\n      reader_error = ctx\r\n    end",
    "type": "statement:if"
  }, {
    "id": 192,
    "text": "local data = fileDesc.data",
    "type": "statement:localassign"
  }, {
    "id": 193,
    "text": "size = #data",
    "type": "statement:assign"
  }, {
    "id": 194,
    "text": "crc = zlib.crc32(crc, data)",
    "type": "statement:assign"
  }, {
    "id": 195,
    "text": "local cdata",
    "type": "statement:localassign"
  }, {
    "id": 196,
    "text": "if method == ZIP_COMPRESSION_METHOD.DEFLATE then\r\n        cdata = {}\r\n        local zstream = zip_stream(table_stream(cdata), level.value, method)\r\n        zstream:write(data)\r\n        csize = zstream:close()\r\n \r\n        -- if we can change method in LFH we can use it\r\n        if seekable and (not use_aes) and (csize > size) then\r\n          method = ZIP_COMPRESSION_METHOD.STORE\r\n          cdata = data\r\n        else cdata = table.concat(cdata) end\r\n      else \r\n        assert(method == ZIP_COMPRESSION_METHOD.STORE)\r\n        cdata = data\r\n      end",
    "type": "statement:if"
  }, {
    "id": 197,
    "text": "cdata = {}",
    "type": "statement:assign"
  }, {
    "id": 198,
    "text": "local zstream = zip_stream(table_stream(cdata), level.value, method)",
    "type": "statement:localassign"
  }, {
    "id": 199,
    "text": "zstream:write(data)",
    "type": "statement:functioncall"
  }, {
    "id": 200,
    "text": "csize = zstream:close()",
    "type": "statement:assign"
  }, {
    "id": 201,
    "text": "if seekable and (not use_aes) and (csize > size) then\r\n          method = ZIP_COMPRESSION_METHOD.STORE\r\n          cdata = data\r\n        else cdata = table.concat(cdata) end",
    "type": "statement:if"
  }, {
    "id": 202,
    "text": "method = ZIP_COMPRESSION_METHOD.STORE",
    "type": "statement:assign"
  }, {
    "id": 203,
    "text": "cdata = data",
    "type": "statement:assign"
  }, {
    "id": 204,
    "text": "cdata = table.concat(cdata)",
    "type": "statement:assign"
  }, {
    "id": 205,
    "text": "assert(method == ZIP_COMPRESSION_METHOD.STORE)",
    "type": "statement:functioncall"
  }, {
    "id": 206,
    "text": "stream:write(cdata)",
    "type": "statement:functioncall"
  }, {
    "id": 207,
    "text": "if method == ZIP_COMPRESSION_METHOD.DEFLATE then\r\n        stream = zip_stream(stream, level.value, method)\r\n      else assert(method == ZIP_COMPRESSION_METHOD.STORE) end",
    "type": "statement:if"
  }, {
    "id": 208,
    "text": "stream = zip_stream(stream, level.value, method)",
    "type": "statement:assign"
  }, {
    "id": 209,
    "text": "local chunk, ctx = reader()",
    "type": "statement:localassign"
  }, {
    "id": 210,
    "text": "while(chunk)do\r\n        crc = zlib.crc32(correct_crc(crc), chunk)\r\n        stream:write(chunk)\r\n        size = size + #chunk\r\n        chunk, ctx = reader(ctx)\r\n      end",
    "type": "statement:while"
  }, {
    "id": 211,
    "text": "crc = zlib.crc32(correct_crc(crc), chunk)",
    "type": "statement:assign"
  }, {
    "id": 212,
    "text": "stream:write(chunk)",
    "type": "statement:functioncall"
  }, {
    "id": 213,
    "text": "chunk, ctx = reader(ctx)",
    "type": "statement:assign"
  }, {
    "id": 214,
    "text": "reader_error = ctx",
    "type": "statement:assign"
  }, {
    "id": 215,
    "text": "csize = stream:close()",
    "type": "statement:assign"
  }, {
    "id": 216,
    "text": "if use_aes then\r\n      method = ZIP_COMPRESSION_METHOD.AES\r\n      if AES_VER == AES_VERSION.AE2 then crc = 0 end\r\n    end",
    "type": "statement:if"
  }, {
    "id": 217,
    "text": "method = ZIP_COMPRESSION_METHOD.AES",
    "type": "statement:assign"
  }, {
    "id": 218,
    "text": "if AES_VER == AES_VERSION.AE2 then crc = 0 end",
    "type": "statement:if"
  }, {
    "id": 219,
    "text": "crc = 0",
    "type": "statement:assign"
  }, {
    "id": 220,
    "text": "if seekable then -- update the header if the output is seekable\r\n      local cur_pos = assert(self:get_pos())\r\n      -- field 'method' can be changed, so we also overwrite it also\r\n\r\n      if self:use_zip64() then\r\n\r\n        assert(self:set_pos(offset + LFH_METHOD_OFFSET))\r\n        self:write_fmt_( -- begin of STRUCT_LOCAL_FILE_HEADER\r\n          STRUCT{uint16_t;uint32_t;uint32_t;},\r\n          method, fileDesc_mtime, crc\r\n        )\r\n\r\n        assert(self:set_pos(offset_extra_zip64))\r\n        self:write_fmt_(STRUCT{uint64_t;uint64_t}, size, csize)\r\n\r\n      else\r\n        assert(self:set_pos(offset + LFH_METHOD_OFFSET))\r\n        self:write_fmt_( -- begin of STRUCT_LOCAL_FILE_HEADER\r\n          STRUCT{uint16_t;uint32_t;uint32_t;uint32_t;uint32_t;},\r\n          method, fileDesc_mtime, crc, csize, size\r\n        )\r\n      end\r\n      assert(self:set_pos(cur_pos))\r\n    else\r\n      self:write_fmt_( self:use_zip64() and STRUCT_DATA_DESCRIPTOR64 or STRUCT_DATA_DESCRIPTOR,\r\n        ZIP_SIG.DATA_DESCRIPTOR, crc, csize, size\r\n      )\r\n    end",
    "type": "statement:if"
  }, {
    "id": 221,
    "text": "local cur_pos = assert(self:get_pos())",
    "type": "statement:localassign"
  }, {
    "id": 222,
    "text": "if self:use_zip64() then\r\n\r\n        assert(self:set_pos(offset + LFH_METHOD_OFFSET))\r\n        self:write_fmt_( -- begin of STRUCT_LOCAL_FILE_HEADER\r\n          STRUCT{uint16_t;uint32_t;uint32_t;},\r\n          method, fileDesc_mtime, crc\r\n        )\r\n\r\n        assert(self:set_pos(offset_extra_zip64))\r\n        self:write_fmt_(STRUCT{uint64_t;uint64_t}, size, csize)\r\n\r\n      else\r\n        assert(self:set_pos(offset + LFH_METHOD_OFFSET))\r\n        self:write_fmt_( -- begin of STRUCT_LOCAL_FILE_HEADER\r\n          STRUCT{uint16_t;uint32_t;uint32_t;uint32_t;uint32_t;},\r\n          method, fileDesc_mtime, crc, csize, size\r\n        )\r\n      end",
    "type": "statement:if"
  }, {
    "id": 223,
    "text": "assert(self:set_pos(offset + LFH_METHOD_OFFSET))",
    "type": "statement:functioncall"
  }, {
    "id": 224,
    "text": "self:write_fmt_( -- begin of STRUCT_LOCAL_FILE_HEADER\r\n          STRUCT{uint16_t;uint32_t;uint32_t;},\r\n          method, fileDesc_mtime, crc\r\n        )",
    "type": "statement:functioncall"
  }, {
    "id": 225,
    "text": "assert(self:set_pos(offset_extra_zip64))",
    "type": "statement:functioncall"
  }, {
    "id": 226,
    "text": "self:write_fmt_(STRUCT{uint64_t;uint64_t}, size, csize)",
    "type": "statement:functioncall"
  }, {
    "id": 227,
    "text": "self:write_fmt_( -- begin of STRUCT_LOCAL_FILE_HEADER\r\n          STRUCT{uint16_t;uint32_t;uint32_t;uint32_t;uint32_t;},\r\n          method, fileDesc_mtime, crc, csize, size\r\n        )",
    "type": "statement:functioncall"
  }, {
    "id": 228,
    "text": "assert(self:set_pos(cur_pos))",
    "type": "statement:functioncall"
  }, {
    "id": 229,
    "text": "self:write_fmt_( self:use_zip64() and STRUCT_DATA_DESCRIPTOR64 or STRUCT_DATA_DESCRIPTOR,\r\n        ZIP_SIG.DATA_DESCRIPTOR, crc, csize, size\r\n      )",
    "type": "statement:functioncall"
  }, {
    "id": 230,
    "text": "if IS_WINDOWS or (fileDesc.platform and (fileDesc.platform:lower() == 'windows')) then\r\n    local m,a,c = fileDesc.mtime,fileDesc.atime,fileDesc.ctime\r\n    if time2filetime and m and a and c then\r\n      local m,a,c = time2filetime(m),time2filetime(a),time2filetime(c)\r\n      local ntfs_elem_001 = STRUCT{\r\n        uint16_t; -- tag  0x0001\r\n        uint16_t; -- size 0x0018\r\n        uint32_t;uint32_t; -- File last modification time\r\n        uint32_t;uint32_t; -- File last access time\r\n        uint32_t;uint32_t; -- File creation time\r\n      }\r\n      local ntfs_extra = zip_make_extra(ZIP_CDH_EXTRA_ID.NTFS,\r\n        stream_converter.pack(uint32_t, 0) .. -- reserved\r\n        stream_converter.pack(ntfs_elem_001, \r\n          0x0001, 0x0018, m[1],m[2],a[1],a[2],c[1],c[2]\r\n        )\r\n      )\r\n      cdextra = ntfs_extra .. cdextra\r\n    end\r\n  end",
    "type": "statement:if"
  }, {
    "id": 231,
    "text": "local m,a,c = fileDesc.mtime,fileDesc.atime,fileDesc.ctime",
    "type": "statement:localassign"
  }, {
    "id": 232,
    "text": "if time2filetime and m and a and c then\r\n      local m,a,c = time2filetime(m),time2filetime(a),time2filetime(c)\r\n      local ntfs_elem_001 = STRUCT{\r\n        uint16_t; -- tag  0x0001\r\n        uint16_t; -- size 0x0018\r\n        uint32_t;uint32_t; -- File last modification time\r\n        uint32_t;uint32_t; -- File last access time\r\n        uint32_t;uint32_t; -- File creation time\r\n      }\r\n      local ntfs_extra = zip_make_extra(ZIP_CDH_EXTRA_ID.NTFS,\r\n        stream_converter.pack(uint32_t, 0) .. -- reserved\r\n        stream_converter.pack(ntfs_elem_001, \r\n          0x0001, 0x0018, m[1],m[2],a[1],a[2],c[1],c[2]\r\n        )\r\n      )\r\n      cdextra = ntfs_extra .. cdextra\r\n    end",
    "type": "statement:if"
  }, {
    "id": 233,
    "text": "local m,a,c = time2filetime(m),time2filetime(a),time2filetime(c)",
    "type": "statement:localassign"
  }, {
    "id": 234,
    "text": "local ntfs_elem_001 = STRUCT{\r\n        uint16_t; -- tag  0x0001\r\n        uint16_t; -- size 0x0018\r\n        uint32_t;uint32_t; -- File last modification time\r\n        uint32_t;uint32_t; -- File last access time\r\n        uint32_t;uint32_t; -- File creation time\r\n      }",
    "type": "statement:localassign"
  }, {
    "id": 235,
    "text": "local ntfs_extra = zip_make_extra(ZIP_CDH_EXTRA_ID.NTFS,\r\n        stream_converter.pack(uint32_t, 0) .. -- reserved\r\n        stream_converter.pack(ntfs_elem_001, \r\n          0x0001, 0x0018, m[1],m[2],a[1],a[2],c[1],c[2]\r\n        )\r\n      )",
    "type": "statement:localassign"
  }, {
    "id": 236,
    "text": "cdextra = ntfs_extra .. cdextra",
    "type": "statement:assign"
  }, {
    "id": 237,
    "text": "if self:use_zip64() then\r\n    local z64extra = struct_pack(STRUCT_ZIP64_EXTRA, size, csize, offset - self.private_.begin_pos, 0)\r\n    cdextra = cdextra .. zip_make_extra(ZIP_CDH_EXTRA_ID.ZIP64, z64extra)\r\n\r\n    size   = 0xFFFFFFFF\r\n    csize  = 0xFFFFFFFF\r\n  end",
    "type": "statement:if"
  }, {
    "id": 238,
    "text": "local z64extra = struct_pack(STRUCT_ZIP64_EXTRA, size, csize, offset - self.private_.begin_pos, 0)",
    "type": "statement:localassign"
  }, {
    "id": 239,
    "text": "cdextra = cdextra .. zip_make_extra(ZIP_CDH_EXTRA_ID.ZIP64, z64extra)",
    "type": "statement:assign"
  }, {
    "id": 240,
    "text": "local cdh = struct_pack(STRUCT_CENTRAL_DIRECTORY, \r\n    ZIP_SIG.CFH,ver_made,version, flags, method,\r\n    fileDesc_mtime,crc,csize,size,\r\n    #utfpath, #cdextra, #utfcomment,\r\n    0, inattrib, orflags(0x00, fileDesc.exattrib), offset - self.private_.begin_pos, -- disk number start\r\n    utfpath, cdextra, utfcomment\r\n  )",
    "type": "statement:localassign"
  }, {
    "id": 241,
    "text": "table.insert(self.private_.headers, cdh)",
    "type": "statement:functioncall"
  }, {
    "id": 242,
    "text": "if reader_error then return nil, reader_error end",
    "type": "statement:if"
  }, {
    "id": 243,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 244,
    "text": "function ZipWriter:close(comment)\r\n  local headers = self.private_.headers\r\n  local stream  = self.private_.stream\r\n  comment = self:str2utf8(comment or \"\")\r\n\r\n  local cdPos    = self:get_pos()\r\n  local cdOffset = cdPos - self.private_.begin_pos\r\n  for _, chdr in ipairs(headers) do\r\n    self:write_(chdr)\r\n  end\r\n\r\n  local cdLength = self:get_pos() - cdPos\r\n  local filenum = #headers\r\n\r\n  if self:use_zip64() then\r\n    local zip64_extra = \"\"\r\n    local zip64_eocd_size = (ZIP64_EOCD_SIZE + #zip64_extra) - 12\r\n    local zip64_eocd_offset = self:get_pos() - self.private_.begin_pos\r\n\r\n    self:write_fmt_(STRUCT_ZIP64_EOCD,\r\n      ZIP_SIG.ZIP64_EOCD, zip64_eocd_size,\r\n      ZIP_VERSION_EXTRACT[\"6.3\"], ZIP_VERSION_EXTRACT[\"6.3\"],\r\n      0,0,-- disk numbers\r\n      filenum,filenum,\r\n      cdLength,cdOffset,\r\n      zip64_extra\r\n    )\r\n    self:write_fmt_(STRUCT_ZIP64_EOCD_LOCATOR,\r\n      ZIP_SIG.ZIP64_EOCD_LOCATOR, 0, zip64_eocd_offset, 0\r\n    )\r\n  end\r\n\r\n  self:write_fmt_(STRUCT_EOCD,\r\n    ZIP_SIG.EOCD, 0, 0, -- disk numbers\r\n    filenum,filenum,cdLength,cdOffset,\r\n    #comment, comment\r\n  )\r\n\r\n  self.private_.writer()\r\n  return filenum;\r\nend",
    "type": "function"
  }, {
    "id": 245,
    "text": "local headers = self.private_.headers",
    "type": "statement:localassign"
  }, {
    "id": 246,
    "text": "local stream  = self.private_.stream",
    "type": "statement:localassign"
  }, {
    "id": 247,
    "text": "comment = self:str2utf8(comment or \"\")",
    "type": "statement:assign"
  }, {
    "id": 248,
    "text": "local cdPos    = self:get_pos()",
    "type": "statement:localassign"
  }, {
    "id": 249,
    "text": "local cdOffset = cdPos - self.private_.begin_pos",
    "type": "statement:localassign"
  }, {
    "id": 250,
    "text": "for _, chdr in ipairs(headers) do\r\n    self:write_(chdr)\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 251,
    "text": "self:write_(chdr)",
    "type": "statement:functioncall"
  }, {
    "id": 252,
    "text": "local cdLength = self:get_pos() - cdPos",
    "type": "statement:localassign"
  }, {
    "id": 253,
    "text": "local filenum = #headers",
    "type": "statement:localassign"
  }, {
    "id": 254,
    "text": "if self:use_zip64() then\r\n    local zip64_extra = \"\"\r\n    local zip64_eocd_size = (ZIP64_EOCD_SIZE + #zip64_extra) - 12\r\n    local zip64_eocd_offset = self:get_pos() - self.private_.begin_pos\r\n\r\n    self:write_fmt_(STRUCT_ZIP64_EOCD,\r\n      ZIP_SIG.ZIP64_EOCD, zip64_eocd_size,\r\n      ZIP_VERSION_EXTRACT[\"6.3\"], ZIP_VERSION_EXTRACT[\"6.3\"],\r\n      0,0,-- disk numbers\r\n      filenum,filenum,\r\n      cdLength,cdOffset,\r\n      zip64_extra\r\n    )\r\n    self:write_fmt_(STRUCT_ZIP64_EOCD_LOCATOR,\r\n      ZIP_SIG.ZIP64_EOCD_LOCATOR, 0, zip64_eocd_offset, 0\r\n    )\r\n  end",
    "type": "statement:if"
  }, {
    "id": 255,
    "text": "local zip64_extra = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 256,
    "text": "local zip64_eocd_size = (ZIP64_EOCD_SIZE + #zip64_extra) - 12",
    "type": "statement:localassign"
  }, {
    "id": 257,
    "text": "local zip64_eocd_offset = self:get_pos() - self.private_.begin_pos",
    "type": "statement:localassign"
  }, {
    "id": 258,
    "text": "self:write_fmt_(STRUCT_ZIP64_EOCD,\r\n      ZIP_SIG.ZIP64_EOCD, zip64_eocd_size,\r\n      ZIP_VERSION_EXTRACT[\"6.3\"], ZIP_VERSION_EXTRACT[\"6.3\"],\r\n      0,0,-- disk numbers\r\n      filenum,filenum,\r\n      cdLength,cdOffset,\r\n      zip64_extra\r\n    )",
    "type": "statement:functioncall"
  }, {
    "id": 259,
    "text": "self:write_fmt_(STRUCT_ZIP64_EOCD_LOCATOR,\r\n      ZIP_SIG.ZIP64_EOCD_LOCATOR, 0, zip64_eocd_offset, 0\r\n    )",
    "type": "statement:functioncall"
  }, {
    "id": 260,
    "text": "self:write_fmt_(STRUCT_EOCD,\r\n    ZIP_SIG.EOCD, 0, 0, -- disk numbers\r\n    filenum,filenum,cdLength,cdOffset,\r\n    #comment, comment\r\n  )",
    "type": "statement:functioncall"
  }, {
    "id": 261,
    "text": "self.private_.writer()",
    "type": "statement:functioncall"
  }, {
    "id": 262,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 263,
    "text": "function M.new(...)\r\n  local t = ZipWriter:new(...)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 264,
    "text": "local t = ZipWriter:new(...)",
    "type": "statement:localassign"
  }, {
    "id": 265,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 266,
    "text": "function M.co_writer(fn)\r\n  local reciver, err = coroutine.create(function ()\r\n    local reader = function ()\r\n      return coroutine.yield(true)\r\n    end\r\n    fn(reader)\r\n  end)\r\n  if not reciver then return nil, err end\r\n  local ok, err = coroutine.resume(reciver)\r\n  if not ok then return nil, err end\r\n\r\n  local function writer(chunk)\r\n    return coroutine.resume(reciver, chunk)\r\n  end\r\n\r\n  return writer\r\nend",
    "type": "function"
  }, {
    "id": 267,
    "text": "local reciver, err = coroutine.create(function ()\r\n    local reader = function ()\r\n      return coroutine.yield(true)\r\n    end\r\n    fn(reader)\r\n  end)",
    "type": "statement:localassign"
  }, {
    "id": 268,
    "text": "local reader = function ()\r\n      return coroutine.yield(true)\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 269,
    "text": "fn(reader)",
    "type": "statement:functioncall"
  }, {
    "id": 270,
    "text": "if not reciver then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 271,
    "text": "local ok, err = coroutine.resume(reciver)",
    "type": "statement:localassign"
  }, {
    "id": 272,
    "text": "if not ok then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 273,
    "text": "local function writer(chunk)\r\n    return coroutine.resume(reciver, chunk)\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 274,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 275,
    "text": "function ()\r\n      return coroutine.yield(true)\r\n    end",
    "type": "function"
  }, {
    "id": 276,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 277,
    "text": "local function writer(chunk)\r\n    return coroutine.resume(reciver, chunk)\r\n  end",
    "type": "function"
  }, {
    "id": 278,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 279,
    "text": "function M.co_reader(fn)\r\n  local sender, err = coroutine.create(function ()\r\n    local writer = function (chunk)\r\n      return coroutine.yield(chunk)\r\n    end\r\n    fn(writer)\r\n  end)\r\n  if not sender then return nil, err end\r\n\r\n  local function reader()\r\n    local ok, data = coroutine.resume(sender, true)\r\n    if ok then return data end\r\n    return nil, data\r\n  end\r\n\r\n  return reader\r\nend",
    "type": "function"
  }, {
    "id": 280,
    "text": "local sender, err = coroutine.create(function ()\r\n    local writer = function (chunk)\r\n      return coroutine.yield(chunk)\r\n    end\r\n    fn(writer)\r\n  end)",
    "type": "statement:localassign"
  }, {
    "id": 281,
    "text": "local writer = function (chunk)\r\n      return coroutine.yield(chunk)\r\n    end",
    "type": "statement:localassign"
  }, {
    "id": 282,
    "text": "fn(writer)",
    "type": "statement:functioncall"
  }, {
    "id": 283,
    "text": "if not sender then return nil, err end",
    "type": "statement:if"
  }, {
    "id": 284,
    "text": "local function reader()\r\n    local ok, data = coroutine.resume(sender, true)\r\n    if ok then return data end\r\n    return nil, data\r\n  end",
    "type": "statement:localfunction"
  }, {
    "id": 285,
    "text": "local ok, data = coroutine.resume(sender, true)",
    "type": "statement:localassign"
  }, {
    "id": 286,
    "text": "if ok then return data end",
    "type": "statement:if"
  }, {
    "id": 287,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 288,
    "text": "function (chunk)\r\n      return coroutine.yield(chunk)\r\n    end",
    "type": "function"
  }, {
    "id": 289,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 290,
    "text": "local function reader()\r\n    local ok, data = coroutine.resume(sender, true)\r\n    if ok then return data end\r\n    return nil, data\r\n  end",
    "type": "function"
  }, {
    "id": 291,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 292,
    "text": "function M.sink(stream, fname, desc)\r\n  return M.co_writer(function(reader)\r\n    stream:write(fname, desc, reader)\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 293,
    "text": "stream:write(fname, desc, reader)",
    "type": "statement:functioncall"
  }, {
    "id": 294,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 295,
    "text": "function M.source(stream, files)\r\n  return M.co_reader(function(writer)\r\n    stream:open_writer(writer)\r\n    for _, file in ipairs(files) do\r\n      local fname, fpath, desc = file[1],file[2],file[3]\r\n      fname, fpath = fname or fpath, fpath or fname\r\n      desc = desc or {isfile=true}\r\n      if desc.isfile then\r\n        local fh = assert(io.open(fpath,'rb'))\r\n        stream:write(fname, desc, function()\r\n          local chunk, err = fh:read()\r\n          if not chunk then fh:close() fh = nil end\r\n          return chunk, err\r\n        end)\r\n      else\r\n        stream:write(fname, desc)\r\n      end\r\n    end\r\n    stream:close()\r\n  end)\r\nend",
    "type": "function"
  }, {
    "id": 296,
    "text": "stream:open_writer(writer)",
    "type": "statement:functioncall"
  }, {
    "id": 297,
    "text": "for _, file in ipairs(files) do\r\n      local fname, fpath, desc = file[1],file[2],file[3]\r\n      fname, fpath = fname or fpath, fpath or fname\r\n      desc = desc or {isfile=true}\r\n      if desc.isfile then\r\n        local fh = assert(io.open(fpath,'rb'))\r\n        stream:write(fname, desc, function()\r\n          local chunk, err = fh:read()\r\n          if not chunk then fh:close() fh = nil end\r\n          return chunk, err\r\n        end)\r\n      else\r\n        stream:write(fname, desc)\r\n      end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 298,
    "text": "local fname, fpath, desc = file[1],file[2],file[3]",
    "type": "statement:localassign"
  }, {
    "id": 299,
    "text": "fname, fpath = fname or fpath, fpath or fname",
    "type": "statement:assign"
  }, {
    "id": 300,
    "text": "desc = desc or {isfile=true}",
    "type": "statement:assign"
  }, {
    "id": 301,
    "text": "if desc.isfile then\r\n        local fh = assert(io.open(fpath,'rb'))\r\n        stream:write(fname, desc, function()\r\n          local chunk, err = fh:read()\r\n          if not chunk then fh:close() fh = nil end\r\n          return chunk, err\r\n        end)\r\n      else\r\n        stream:write(fname, desc)\r\n      end",
    "type": "statement:if"
  }, {
    "id": 302,
    "text": "local fh = assert(io.open(fpath,'rb'))",
    "type": "statement:localassign"
  }, {
    "id": 303,
    "text": "stream:write(fname, desc, function()\r\n          local chunk, err = fh:read()\r\n          if not chunk then fh:close() fh = nil end\r\n          return chunk, err\r\n        end)",
    "type": "statement:functioncall"
  }, {
    "id": 304,
    "text": "local chunk, err = fh:read()",
    "type": "statement:localassign"
  }, {
    "id": 305,
    "text": "if not chunk then fh:close() fh = nil end",
    "type": "statement:if"
  }, {
    "id": 306,
    "text": "fh:close()",
    "type": "statement:functioncall"
  }, {
    "id": 307,
    "text": "fh = nil",
    "type": "statement:assign"
  }, {
    "id": 308,
    "text": "stream:write(fname, desc)",
    "type": "statement:functioncall"
  }, {
    "id": 309,
    "text": "stream:close()",
    "type": "statement:functioncall"
  }, {
    "id": 310,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 311,
    "text": "function(self, chunk)\r\n      self.stream:write_(chunk)\r\n    end",
    "type": "function"
  }, {
    "id": 312,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 313,
    "text": "function(self)\r\n      return self.stream:seekable()\r\n    end",
    "type": "function"
  }, {
    "id": 314,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 315,
    "text": "function(self)\r\n      return self.stream:get_pos()\r\n    end",
    "type": "function"
  }, {
    "id": 316,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 317,
    "text": "function(self, pos)\r\n      return self.stream:set_pos(pos)\r\n    end",
    "type": "function"
  }, {
    "id": 318,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 319,
    "text": "function(self)\r\n      return self.stream:get_pos() - self.pos\r\n    end",
    "type": "function"
  }, {
    "id": 320,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 321,
    "text": "function(self, chunk)\r\n      table.insert(dst, chunk)\r\n      size = size + #chunk\r\n    end",
    "type": "function"
  }, {
    "id": 322,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 323,
    "text": "function(self)\r\n      dst = nil\r\n      return size\r\n    end",
    "type": "function"
  }, {
    "id": 324,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 325,
    "text": "function()\r\n      return false\r\n    end",
    "type": "function"
  }, {
    "id": 326,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 327,
    "text": "function()\r\n      return size;\r\n    end",
    "type": "function"
  }, {
    "id": 328,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 329,
    "text": "function(chunk) \r\n      if not chunk then \r\n        if autoclose then return stream:close() end\r\n        return true\r\n      end\r\n      return stream:write(chunk)\r\n    end",
    "type": "function"
  }, {
    "id": 330,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 331,
    "text": "function(...) return stream:seek(...) end",
    "type": "function"
  }, {
    "id": 332,
    "text": "function(self,lvl) \r\n    return rawget(self, upper( lvl )) or \r\n      error(\"Unknown compression level \" .. tostring(lvl),0)\r\n  end",
    "type": "function"
  }, {
    "id": 333,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 334,
    "text": "function ()\r\n    local reader = function ()\r\n      return coroutine.yield(true)\r\n    end\r\n    fn(reader)\r\n  end",
    "type": "function"
  }, {
    "id": 335,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 336,
    "text": "function ()\r\n    local writer = function (chunk)\r\n      return coroutine.yield(chunk)\r\n    end\r\n    fn(writer)\r\n  end",
    "type": "function"
  }, {
    "id": 337,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 338,
    "text": "function(reader)\r\n    stream:write(fname, desc, reader)\r\n  end",
    "type": "function"
  }, {
    "id": 339,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 340,
    "text": "function()\r\n          local chunk, err = fh:read()\r\n          if not chunk then fh:close() fh = nil end\r\n          return chunk, err\r\n        end",
    "type": "function"
  }, {
    "id": 341,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 342,
    "text": "function(writer)\r\n    stream:open_writer(writer)\r\n    for _, file in ipairs(files) do\r\n      local fname, fpath, desc = file[1],file[2],file[3]\r\n      fname, fpath = fname or fpath, fpath or fname\r\n      desc = desc or {isfile=true}\r\n      if desc.isfile then\r\n        local fh = assert(io.open(fpath,'rb'))\r\n        stream:write(fname, desc, function()\r\n          local chunk, err = fh:read()\r\n          if not chunk then fh:close() fh = nil end\r\n          return chunk, err\r\n        end)\r\n      else\r\n        stream:write(fname, desc)\r\n      end\r\n    end\r\n    stream:close()\r\n  end",
    "type": "function"
  }, {
    "id": 343,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 344,
    "text": "",
    "type": "function container"
  }, {
    "id": 345,
    "text": "insert",
    "type": "global function"
  }, {
    "id": 346,
    "text": "co_writer",
    "type": "global function"
  }, {
    "id": 347,
    "text": "zlib",
    "type": "module"
  }, {
    "id": 348,
    "text": "crc32",
    "type": "global function"
  }, {
    "id": 349,
    "text": "deflate",
    "type": "global function"
  }, {
    "id": 350,
    "text": "sink",
    "type": "global function"
  }, {
    "id": 351,
    "text": "concat",
    "type": "global function"
  }, {
    "id": 352,
    "text": "pack",
    "type": "global function"
  }, {
    "id": 353,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 354,
    "text": "resume",
    "type": "global function"
  }, {
    "id": 355,
    "text": "tostring",
    "type": "global function"
  }, {
    "id": 356,
    "text": "tonumber",
    "type": "global function"
  }, {
    "id": 357,
    "text": "fn",
    "type": "global function"
  }, {
    "id": 358,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 359,
    "text": "struct_pack",
    "type": "global function"
  }, {
    "id": 360,
    "text": "bor",
    "type": "global function"
  }, {
    "id": 361,
    "text": "yield",
    "type": "global function"
  }, {
    "id": 362,
    "text": "fmt",
    "type": "global function"
  }, {
    "id": 363,
    "text": "lshift",
    "type": "global function"
  }, {
    "id": 364,
    "text": "create",
    "type": "global function"
  }, {
    "id": 365,
    "text": "byte",
    "type": "global function"
  }, {
    "id": 366,
    "text": "time2dos",
    "type": "global function"
  }, {
    "id": 367,
    "text": "self.private_.writer",
    "type": "global function"
  }, {
    "id": 368,
    "text": "open",
    "type": "global function"
  }, {
    "id": 369,
    "text": "correct_crc",
    "type": "global function"
  }, {
    "id": 370,
    "text": "error",
    "type": "global function"
  }, {
    "id": 371,
    "text": "seek",
    "type": "global function"
  }, {
    "id": 372,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 373,
    "text": "mod",
    "type": "global function"
  }, {
    "id": 374,
    "text": "type",
    "type": "global function"
  }, {
    "id": 375,
    "text": "STRUCT",
    "type": "global function"
  }, {
    "id": 376,
    "text": "setmetatable",
    "type": "global function"
  }, {
    "id": 377,
    "text": "rawget",
    "type": "global function"
  }, {
    "id": 378,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 379,
    "text": "require",
    "type": "global function"
  }, {
    "id": 380,
    "text": "time2filetime",
    "type": "global function"
  }, {
    "id": 381,
    "text": "upper",
    "type": "global function"
  }, {
    "id": 382,
    "text": "",
    "type": "local variable"
  }, {
    "id": 383,
    "text": "",
    "type": "local variable"
  }, {
    "id": 384,
    "text": "",
    "type": "local variable"
  }, {
    "id": 385,
    "text": "",
    "type": "variable container"
  }, {
    "id": 386,
    "text": "",
    "type": "require container"
  }, {
    "id": 387,
    "text": "",
    "type": "local variable"
  }, {
    "id": 388,
    "text": "",
    "type": "n/a"
  }, {
    "id": 389,
    "text": "",
    "type": "local variable"
  }, {
    "id": 390,
    "text": "",
    "type": "n/a"
  }, {
    "id": 391,
    "text": "",
    "type": "local variable"
  }, {
    "id": 392,
    "text": "",
    "type": "n/a"
  }, {
    "id": 393,
    "text": "",
    "type": "local variable"
  }, {
    "id": 394,
    "text": "",
    "type": "n/a"
  }, {
    "id": 395,
    "text": "",
    "type": "local variable"
  }, {
    "id": 396,
    "text": "",
    "type": "n/a"
  }, {
    "id": 397,
    "text": "",
    "type": "local variable"
  }, {
    "id": 398,
    "text": "",
    "type": "n/a"
  }, {
    "id": 399,
    "text": "",
    "type": "local variable"
  }, {
    "id": 400,
    "text": "",
    "type": "n/a"
  }, {
    "id": 401,
    "text": "",
    "type": "local variable"
  }, {
    "id": 402,
    "text": "",
    "type": "n/a"
  }, {
    "id": 403,
    "text": "",
    "type": "local variable"
  }, {
    "id": 404,
    "text": "",
    "type": "n/a"
  }, {
    "id": 405,
    "text": "",
    "type": "local variable"
  }, {
    "id": 406,
    "text": "",
    "type": "n/a"
  }, {
    "id": 407,
    "text": "",
    "type": "local variable"
  }, {
    "id": 408,
    "text": "",
    "type": "n/a"
  }, {
    "id": 409,
    "text": "",
    "type": "local variable"
  }, {
    "id": 410,
    "text": "",
    "type": "n/a"
  }, {
    "id": 411,
    "text": "",
    "type": "local variable"
  }, {
    "id": 412,
    "text": "",
    "type": "n/a"
  }, {
    "id": 413,
    "text": "",
    "type": "local variable"
  }, {
    "id": 414,
    "text": "",
    "type": "n/a"
  }, {
    "id": 415,
    "text": "",
    "type": "local variable"
  }, {
    "id": 416,
    "text": "",
    "type": "n/a"
  }, {
    "id": 417,
    "text": "",
    "type": "local variable"
  }, {
    "id": 418,
    "text": "",
    "type": "n/a"
  }, {
    "id": 419,
    "text": "",
    "type": "local variable"
  }, {
    "id": 420,
    "text": "",
    "type": "n/a"
  }, {
    "id": 421,
    "text": "",
    "type": "local variable"
  }, {
    "id": 422,
    "text": "",
    "type": "n/a"
  }, {
    "id": 423,
    "text": "",
    "type": "local variable"
  }, {
    "id": 424,
    "text": "",
    "type": "n/a"
  }, {
    "id": 425,
    "text": "",
    "type": "local variable"
  }, {
    "id": 426,
    "text": "",
    "type": "n/a"
  }, {
    "id": 427,
    "text": "",
    "type": "local variable"
  }, {
    "id": 428,
    "text": "",
    "type": "n/a"
  }, {
    "id": 429,
    "text": "",
    "type": "local variable"
  }, {
    "id": 430,
    "text": "",
    "type": "n/a"
  }, {
    "id": 431,
    "text": "",
    "type": "local variable"
  }, {
    "id": 432,
    "text": "",
    "type": "n/a"
  }, {
    "id": 433,
    "text": "",
    "type": "local variable"
  }, {
    "id": 434,
    "text": "",
    "type": "number"
  }, {
    "id": 435,
    "text": "",
    "type": "local variable"
  }, {
    "id": 436,
    "text": "",
    "type": "n/a"
  }, {
    "id": 437,
    "text": "",
    "type": "local variable"
  }, {
    "id": 438,
    "text": "",
    "type": "n/a"
  }, {
    "id": 439,
    "text": "",
    "type": "local variable"
  }, {
    "id": 440,
    "text": "",
    "type": "n/a"
  }, {
    "id": 441,
    "text": "",
    "type": "local variable"
  }, {
    "id": 442,
    "text": "",
    "type": "n/a"
  }, {
    "id": 443,
    "text": "",
    "type": "local variable"
  }, {
    "id": 444,
    "text": "",
    "type": "n/a"
  }, {
    "id": 445,
    "text": "",
    "type": "local variable"
  }, {
    "id": 446,
    "text": "",
    "type": "n/a"
  }, {
    "id": 447,
    "text": "",
    "type": "local variable"
  }, {
    "id": 448,
    "text": "",
    "type": "n/a"
  }, {
    "id": 449,
    "text": "",
    "type": "local variable"
  }, {
    "id": 450,
    "text": "",
    "type": "n/a"
  }, {
    "id": 451,
    "text": "",
    "type": "local variable"
  }, {
    "id": 452,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 453,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 454,
    "text": "",
    "type": "number"
  }, {
    "id": 455,
    "text": "",
    "type": "number"
  }, {
    "id": 456,
    "text": "",
    "type": "number"
  }, {
    "id": 457,
    "text": "",
    "type": "number"
  }, {
    "id": 458,
    "text": "",
    "type": "number"
  }, {
    "id": 459,
    "text": "",
    "type": "number"
  }, {
    "id": 460,
    "text": "",
    "type": "number"
  }, {
    "id": 461,
    "text": "",
    "type": "number"
  }, {
    "id": 462,
    "text": "",
    "type": "number"
  }, {
    "id": 463,
    "text": "",
    "type": "number"
  }, {
    "id": 464,
    "text": "",
    "type": "number"
  }, {
    "id": 465,
    "text": "",
    "type": "number"
  }, {
    "id": 466,
    "text": "",
    "type": "number"
  }, {
    "id": 467,
    "text": "",
    "type": "local variable"
  }, {
    "id": 468,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 469,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 470,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 471,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 472,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 473,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 474,
    "text": "",
    "type": "number"
  }, {
    "id": 475,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 476,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 477,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 478,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 479,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 480,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 481,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 482,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 483,
    "text": "",
    "type": "local variable"
  }, {
    "id": 484,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 485,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 486,
    "text": "",
    "type": "number"
  }, {
    "id": 487,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 488,
    "text": "",
    "type": "number"
  }, {
    "id": 489,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 490,
    "text": "",
    "type": "number"
  }, {
    "id": 491,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 492,
    "text": "",
    "type": "number"
  }, {
    "id": 493,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 494,
    "text": "",
    "type": "number"
  }, {
    "id": 495,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 496,
    "text": "",
    "type": "number"
  }, {
    "id": 497,
    "text": "",
    "type": "local variable"
  }, {
    "id": 498,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 499,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 500,
    "text": "",
    "type": "number"
  }, {
    "id": 501,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 502,
    "text": "",
    "type": "number"
  }, {
    "id": 503,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 504,
    "text": "",
    "type": "number"
  }, {
    "id": 505,
    "text": "",
    "type": "local variable"
  }, {
    "id": 506,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 507,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 508,
    "text": "",
    "type": "number"
  }, {
    "id": 509,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 510,
    "text": "",
    "type": "number"
  }, {
    "id": 511,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 512,
    "text": "",
    "type": "number"
  }, {
    "id": 513,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 514,
    "text": "",
    "type": "number"
  }, {
    "id": 515,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 516,
    "text": "",
    "type": "number"
  }, {
    "id": 517,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 518,
    "text": "",
    "type": "number"
  }, {
    "id": 519,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 520,
    "text": "",
    "type": "number"
  }, {
    "id": 521,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 522,
    "text": "",
    "type": "number"
  }, {
    "id": 523,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 524,
    "text": "",
    "type": "number"
  }, {
    "id": 525,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 526,
    "text": "",
    "type": "number"
  }, {
    "id": 527,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 528,
    "text": "",
    "type": "number"
  }, {
    "id": 529,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 530,
    "text": "",
    "type": "number"
  }, {
    "id": 531,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 532,
    "text": "",
    "type": "number"
  }, {
    "id": 533,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 534,
    "text": "",
    "type": "number"
  }, {
    "id": 535,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 536,
    "text": "",
    "type": "number"
  }, {
    "id": 537,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 538,
    "text": "",
    "type": "number"
  }, {
    "id": 539,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 540,
    "text": "",
    "type": "number"
  }, {
    "id": 541,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 542,
    "text": "",
    "type": "number"
  }, {
    "id": 543,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 544,
    "text": "",
    "type": "number"
  }, {
    "id": 545,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 546,
    "text": "",
    "type": "number"
  }, {
    "id": 547,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 548,
    "text": "",
    "type": "number"
  }, {
    "id": 549,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 550,
    "text": "",
    "type": "number"
  }, {
    "id": 551,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 552,
    "text": "",
    "type": "number"
  }, {
    "id": 553,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 554,
    "text": "",
    "type": "number"
  }, {
    "id": 555,
    "text": "",
    "type": "local variable"
  }, {
    "id": 556,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 557,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 558,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 559,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 560,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 561,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 562,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 563,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 564,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 565,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 566,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 567,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 568,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 569,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 570,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 571,
    "text": "",
    "type": "local variable"
  }, {
    "id": 572,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 573,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 574,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 575,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 576,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 577,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 578,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 579,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 580,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 581,
    "text": "",
    "type": "local variable"
  }, {
    "id": 582,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 583,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 584,
    "text": "",
    "type": "number"
  }, {
    "id": 585,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 586,
    "text": "",
    "type": "number"
  }, {
    "id": 587,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 588,
    "text": "",
    "type": "number"
  }, {
    "id": 589,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 590,
    "text": "",
    "type": "number"
  }, {
    "id": 591,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 592,
    "text": "",
    "type": "number"
  }, {
    "id": 593,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 594,
    "text": "",
    "type": "number"
  }, {
    "id": 595,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 596,
    "text": "",
    "type": "number"
  }, {
    "id": 597,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 598,
    "text": "",
    "type": "number"
  }, {
    "id": 599,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 600,
    "text": "",
    "type": "number"
  }, {
    "id": 601,
    "text": "",
    "type": "local variable"
  }, {
    "id": 602,
    "text": "",
    "type": "n/a"
  }, {
    "id": 603,
    "text": "",
    "type": "local variable"
  }, {
    "id": 604,
    "text": "",
    "type": "n/a"
  }, {
    "id": 605,
    "text": "",
    "type": "local variable"
  }, {
    "id": 606,
    "text": "",
    "type": "n/a"
  }, {
    "id": 607,
    "text": "",
    "type": "local variable"
  }, {
    "id": 608,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 609,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 610,
    "text": "",
    "type": "number"
  }, {
    "id": 611,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 612,
    "text": "",
    "type": "number"
  }, {
    "id": 613,
    "text": "",
    "type": "local variable"
  }, {
    "id": 614,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 615,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 616,
    "text": "",
    "type": "number"
  }, {
    "id": 617,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 618,
    "text": "",
    "type": "number"
  }, {
    "id": 619,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 620,
    "text": "",
    "type": "number"
  }, {
    "id": 621,
    "text": "",
    "type": "local variable"
  }, {
    "id": 622,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 623,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 624,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 625,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 626,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 627,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 628,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 629,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 630,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 631,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 632,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 633,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 634,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 635,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 636,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 637,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 638,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 639,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 640,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 641,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 642,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 643,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 644,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 645,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 646,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 647,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 648,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 649,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 650,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 651,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 652,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 653,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 654,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 655,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 656,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 657,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 658,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 659,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 660,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 661,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 662,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 663,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 664,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 665,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 666,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 667,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 668,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 669,
    "text": "",
    "type": "local variable"
  }, {
    "id": 670,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 671,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 672,
    "text": "",
    "type": "number"
  }, {
    "id": 673,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 674,
    "text": "",
    "type": "number"
  }, {
    "id": 675,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 676,
    "text": "",
    "type": "number"
  }, {
    "id": 677,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 678,
    "text": "",
    "type": "number"
  }, {
    "id": 679,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 680,
    "text": "",
    "type": "number"
  }, {
    "id": 681,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 682,
    "text": "",
    "type": "number"
  }, {
    "id": 683,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 684,
    "text": "",
    "type": "number"
  }, {
    "id": 685,
    "text": "",
    "type": "local variable"
  }, {
    "id": 686,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 687,
    "text": "",
    "type": "local variable"
  }, {
    "id": 688,
    "text": "",
    "type": "n/a"
  }, {
    "id": 689,
    "text": "",
    "type": "local variable"
  }, {
    "id": 690,
    "text": "",
    "type": "n/a"
  }, {
    "id": 691,
    "text": "",
    "type": "local variable"
  }, {
    "id": 692,
    "text": "",
    "type": "n/a"
  }, {
    "id": 693,
    "text": "",
    "type": "local variable"
  }, {
    "id": 694,
    "text": "",
    "type": "n/a"
  }, {
    "id": 695,
    "text": "",
    "type": "local variable"
  }, {
    "id": 696,
    "text": "",
    "type": "n/a"
  }, {
    "id": 697,
    "text": "",
    "type": "local variable"
  }, {
    "id": 698,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 699,
    "text": "",
    "type": "global variable"
  }, {
    "id": 700,
    "text": "",
    "type": "n/a"
  }, {
    "id": 701,
    "text": "",
    "type": "global variable"
  }, {
    "id": 702,
    "text": "",
    "type": "n/a"
  }, {
    "id": 703,
    "text": "",
    "type": "global variable"
  }, {
    "id": 704,
    "text": "",
    "type": "n/a"
  }, {
    "id": 705,
    "text": "",
    "type": "global variable"
  }, {
    "id": 706,
    "text": "",
    "type": "n/a"
  }, {
    "id": 707,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 708,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 709,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 710,
    "text": "",
    "type": "interface container"
  }, {
    "id": 711,
    "text": "",
    "type": "interface"
  }, {
    "id": 712,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 713,
    "text": "",
    "type": "require local variable"
  } ]
}