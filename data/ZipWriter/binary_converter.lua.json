{
  "_filename": "binary_converter.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": false,
  "_path": "modules/ZipWriter/lua/ZipWriter/binary_converter.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 7,
    "label": "has",
    "to": 8
  }, {
    "from": 7,
    "label": "has",
    "to": 9
  }, {
    "from": 7,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 4
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 11
  }, {
    "from": 15,
    "label": "has",
    "to": 4
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 18,
    "label": "has",
    "to": 19
  }, {
    "from": 18,
    "label": "has",
    "to": 20
  }, {
    "from": 18,
    "label": "has",
    "to": 21
  }, {
    "from": 21,
    "label": "has",
    "to": 22
  }, {
    "from": 21,
    "label": "has",
    "to": 23
  }, {
    "from": 21,
    "label": "has",
    "to": 24
  }, {
    "from": 21,
    "label": "has",
    "to": 25
  }, {
    "from": 25,
    "label": "has",
    "to": 26
  }, {
    "from": 25,
    "label": "has",
    "to": 27
  }, {
    "from": 18,
    "label": "has",
    "to": 4
  }, {
    "from": 18,
    "label": "has",
    "to": 28
  }, {
    "from": 29,
    "label": "has",
    "to": 30
  }, {
    "from": 29,
    "label": "has",
    "to": 4
  }, {
    "from": 29,
    "label": "has",
    "to": 16
  }, {
    "from": 29,
    "label": "has",
    "to": 31
  }, {
    "from": 29,
    "label": "has",
    "to": 32
  }, {
    "from": 32,
    "label": "has",
    "to": 33
  }, {
    "from": 29,
    "label": "has",
    "to": 4
  }, {
    "from": 29,
    "label": "has",
    "to": 34
  }, {
    "from": 35,
    "label": "has",
    "to": 36
  }, {
    "from": 35,
    "label": "has",
    "to": 37
  }, {
    "from": 37,
    "label": "has",
    "to": 38
  }, {
    "from": 37,
    "label": "has",
    "to": 39
  }, {
    "from": 35,
    "label": "has",
    "to": 40
  }, {
    "from": 35,
    "label": "has",
    "to": 4
  }, {
    "from": 35,
    "label": "has",
    "to": 41
  }, {
    "from": 42,
    "label": "has",
    "to": 4
  }, {
    "from": 43,
    "label": "has",
    "to": 44
  }, {
    "from": 43,
    "label": "has",
    "to": 4
  }, {
    "from": 43,
    "label": "has",
    "to": 45
  }, {
    "from": 45,
    "label": "has",
    "to": 46
  }, {
    "from": 43,
    "label": "has",
    "to": 4
  }, {
    "from": 43,
    "label": "has",
    "to": 4
  }, {
    "from": 43,
    "label": "has",
    "to": 47
  }, {
    "from": 48,
    "label": "has",
    "to": 49
  }, {
    "from": 49,
    "label": "has",
    "to": 50
  }, {
    "from": 49,
    "label": "has",
    "to": 51
  }, {
    "from": 49,
    "label": "has",
    "to": 52
  }, {
    "from": 48,
    "label": "has",
    "to": 53
  }, {
    "from": 54,
    "label": "has",
    "to": 4
  }, {
    "from": 55,
    "label": "has",
    "to": 4
  }, {
    "from": 56,
    "label": "has",
    "to": 4
  }, {
    "from": 57,
    "label": "calls",
    "to": 69
  }, {
    "from": 57,
    "label": "calls",
    "to": 61
  }, {
    "from": 57,
    "label": "calls",
    "to": 61
  }, {
    "from": 57,
    "label": "calls",
    "to": 61
  }, {
    "from": 57,
    "label": "calls",
    "to": 61
  }, {
    "from": 57,
    "label": "calls",
    "to": 61
  }, {
    "from": 57,
    "label": "calls",
    "to": 61
  }, {
    "from": 57,
    "label": "calls",
    "to": 61
  }, {
    "from": 48,
    "label": "calls",
    "to": 61
  }, {
    "from": 48,
    "label": "calls",
    "to": 61
  }, {
    "from": 57,
    "label": "calls",
    "to": 61
  }, {
    "from": 57,
    "label": "calls",
    "to": 61
  }, {
    "from": 57,
    "label": "calls",
    "to": 71
  }, {
    "from": 57,
    "label": "calls",
    "to": 71
  }, {
    "from": 57,
    "label": "calls",
    "to": 71
  }, {
    "from": 57,
    "label": "calls",
    "to": 59
  }, {
    "from": 57,
    "label": "calls",
    "to": 65
  }, {
    "from": 48,
    "label": "calls",
    "to": 66
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 57,
    "label": "calls",
    "to": 62
  }, {
    "from": 43,
    "label": "calls",
    "to": 63
  }, {
    "from": 48,
    "label": "calls",
    "to": 63
  }, {
    "from": 48,
    "label": "calls",
    "to": 43
  }, {
    "from": 57,
    "label": "calls",
    "to": 67
  }, {
    "from": 57,
    "label": "calls",
    "to": 67
  }, {
    "from": 57,
    "label": "calls",
    "to": 64
  }, {
    "from": 57,
    "label": "calls",
    "to": 64
  }, {
    "from": 57,
    "label": "calls",
    "to": 64
  }, {
    "from": 57,
    "label": "calls",
    "to": 64
  }, {
    "from": 57,
    "label": "calls",
    "to": 64
  }, {
    "from": 48,
    "label": "calls",
    "to": 6
  }, {
    "from": 57,
    "label": "calls",
    "to": 2
  }, {
    "from": 57,
    "label": "calls",
    "to": 60
  }, {
    "from": 57,
    "label": "calls",
    "to": 60
  }, {
    "from": 57,
    "label": "calls",
    "to": 48
  }, {
    "from": 57,
    "label": "calls",
    "to": 48
  }, {
    "from": 57,
    "label": "calls",
    "to": 70
  }, {
    "from": 57,
    "label": "calls",
    "to": 72
  }, {
    "from": 57,
    "label": "calls",
    "to": 72
  }, {
    "from": 57,
    "label": "calls",
    "to": 73
  }, {
    "from": 57,
    "label": "calls",
    "to": 73
  }, {
    "from": 57,
    "label": "calls",
    "to": 68
  }, {
    "from": 57,
    "label": "calls",
    "to": 68
  }, {
    "from": 57,
    "label": "calls",
    "to": 15
  }, {
    "from": 48,
    "label": "calls",
    "to": 15
  }, {
    "from": 1,
    "label": "contains",
    "to": 57
  }, {
    "from": 57,
    "label": "declares",
    "to": 2
  }, {
    "from": 57,
    "label": "declares",
    "to": 6
  }, {
    "from": 57,
    "label": "declares",
    "to": 15
  }, {
    "from": 57,
    "label": "declares",
    "to": 18
  }, {
    "from": 57,
    "label": "declares",
    "to": 29
  }, {
    "from": 57,
    "label": "declares",
    "to": 35
  }, {
    "from": 57,
    "label": "declares",
    "to": 42
  }, {
    "from": 57,
    "label": "declares",
    "to": 43
  }, {
    "from": 57,
    "label": "declares",
    "to": 48
  }, {
    "from": 57,
    "label": "declares",
    "to": 54
  }, {
    "from": 57,
    "label": "declares",
    "to": 55
  }, {
    "from": 57,
    "label": "declares",
    "to": 56
  }, {
    "from": 1,
    "label": "contains",
    "to": 74
  }, {
    "from": 1,
    "label": "contains",
    "to": 75
  }, {
    "from": 74,
    "label": "initializes",
    "to": 76
  }, {
    "from": 76,
    "label": "assigns",
    "to": 77
  }, {
    "from": 74,
    "label": "initializes",
    "to": 78
  }, {
    "from": 78,
    "label": "assigns",
    "to": 79
  }, {
    "from": 74,
    "label": "initializes",
    "to": 80
  }, {
    "from": 80,
    "label": "assigns",
    "to": 81
  }, {
    "from": 74,
    "label": "initializes",
    "to": 82
  }, {
    "from": 82,
    "label": "assigns",
    "to": 83
  }, {
    "from": 74,
    "label": "initializes",
    "to": 84
  }, {
    "from": 84,
    "label": "assigns",
    "to": 85
  }, {
    "from": 74,
    "label": "initializes",
    "to": 86
  }, {
    "from": 86,
    "label": "assigns",
    "to": 87
  }, {
    "from": 74,
    "label": "initializes",
    "to": 88
  }, {
    "from": 88,
    "label": "assigns",
    "to": 89
  }, {
    "from": 74,
    "label": "initializes",
    "to": 90
  }, {
    "from": 90,
    "label": "assigns",
    "to": 91
  }, {
    "from": 74,
    "label": "initializes",
    "to": 92
  }, {
    "from": 92,
    "label": "assigns",
    "to": 93
  }, {
    "from": 74,
    "label": "initializes",
    "to": 94
  }, {
    "from": 94,
    "label": "assigns",
    "to": 95
  }, {
    "from": 74,
    "label": "initializes",
    "to": 96
  }, {
    "from": 96,
    "label": "assigns",
    "to": 97
  }, {
    "from": 74,
    "label": "initializes",
    "to": 98
  }, {
    "from": 98,
    "label": "assigns",
    "to": 99
  }, {
    "from": 74,
    "label": "initializes",
    "to": 100
  }, {
    "from": 100,
    "label": "assigns",
    "to": 101
  }, {
    "from": 101,
    "label": "assigns",
    "to": 102
  }, {
    "from": 102,
    "label": "assigns",
    "to": 103
  }, {
    "from": 101,
    "label": "assigns",
    "to": 104
  }, {
    "from": 104,
    "label": "assigns",
    "to": 105
  }, {
    "from": 101,
    "label": "assigns",
    "to": 106
  }, {
    "from": 106,
    "label": "assigns",
    "to": 107
  }, {
    "from": 101,
    "label": "assigns",
    "to": 108
  }, {
    "from": 108,
    "label": "assigns",
    "to": 109
  }, {
    "from": 101,
    "label": "assigns",
    "to": 110
  }, {
    "from": 110,
    "label": "assigns",
    "to": 111
  }, {
    "from": 101,
    "label": "assigns",
    "to": 112
  }, {
    "from": 112,
    "label": "assigns",
    "to": 113
  }, {
    "from": 101,
    "label": "assigns",
    "to": 114
  }, {
    "from": 114,
    "label": "assigns",
    "to": 115
  }, {
    "from": 101,
    "label": "assigns",
    "to": 116
  }, {
    "from": 116,
    "label": "assigns",
    "to": 117
  }, {
    "from": 101,
    "label": "assigns",
    "to": 118
  }, {
    "from": 118,
    "label": "assigns",
    "to": 119
  }, {
    "from": 101,
    "label": "assigns",
    "to": 120
  }, {
    "from": 120,
    "label": "assigns",
    "to": 121
  }, {
    "from": 101,
    "label": "assigns",
    "to": 122
  }, {
    "from": 122,
    "label": "assigns",
    "to": 123
  }, {
    "from": 101,
    "label": "assigns",
    "to": 124
  }, {
    "from": 124,
    "label": "assigns",
    "to": 125
  }, {
    "from": 101,
    "label": "assigns",
    "to": 126
  }, {
    "from": 126,
    "label": "assigns",
    "to": 127
  }, {
    "from": 101,
    "label": "assigns",
    "to": 128
  }, {
    "from": 128,
    "label": "assigns",
    "to": 129
  }, {
    "from": 101,
    "label": "assigns",
    "to": 130
  }, {
    "from": 130,
    "label": "assigns",
    "to": 131
  }, {
    "from": 101,
    "label": "assigns",
    "to": 132
  }, {
    "from": 132,
    "label": "assigns",
    "to": 133
  }, {
    "from": 101,
    "label": "assigns",
    "to": 134
  }, {
    "from": 134,
    "label": "assigns",
    "to": 135
  }, {
    "from": 101,
    "label": "assigns",
    "to": 136
  }, {
    "from": 136,
    "label": "assigns",
    "to": 137
  }, {
    "from": 101,
    "label": "assigns",
    "to": 138
  }, {
    "from": 138,
    "label": "assigns",
    "to": 139
  }, {
    "from": 101,
    "label": "assigns",
    "to": 140
  }, {
    "from": 140,
    "label": "assigns",
    "to": 141
  }, {
    "from": 101,
    "label": "assigns",
    "to": 142
  }, {
    "from": 142,
    "label": "assigns",
    "to": 143
  }, {
    "from": 74,
    "label": "initializes",
    "to": 144
  }, {
    "from": 144,
    "label": "assigns",
    "to": 145
  }, {
    "from": 145,
    "label": "assigns",
    "to": 146
  }, {
    "from": 146,
    "label": "assigns",
    "to": 147
  }, {
    "from": 145,
    "label": "assigns",
    "to": 148
  }, {
    "from": 148,
    "label": "assigns",
    "to": 149
  }, {
    "from": 145,
    "label": "assigns",
    "to": 150
  }, {
    "from": 150,
    "label": "assigns",
    "to": 151
  }, {
    "from": 145,
    "label": "assigns",
    "to": 152
  }, {
    "from": 152,
    "label": "assigns",
    "to": 153
  }, {
    "from": 74,
    "label": "initializes",
    "to": 154
  }, {
    "from": 154,
    "label": "assigns",
    "to": 155
  }, {
    "from": 74,
    "label": "initializes",
    "to": 156
  }, {
    "from": 156,
    "label": "assigns",
    "to": 157
  }, {
    "from": 74,
    "label": "initializes",
    "to": 158
  }, {
    "from": 158,
    "label": "assigns",
    "to": 159
  }, {
    "from": 74,
    "label": "initializes",
    "to": 160
  }, {
    "from": 160,
    "label": "assigns",
    "to": 161
  }, {
    "from": 74,
    "label": "initializes",
    "to": 162
  }, {
    "from": 162,
    "label": "assigns",
    "to": 163
  }, {
    "from": 74,
    "label": "initializes",
    "to": 164
  }, {
    "from": 164,
    "label": "assigns",
    "to": 165
  }, {
    "from": 75,
    "label": "initializes",
    "to": 166
  }, {
    "from": 166,
    "label": "requires",
    "to": 167
  }, {
    "from": 75,
    "label": "initializes",
    "to": 168
  }, {
    "from": 168,
    "label": "requires",
    "to": 58
  }, {
    "from": 1,
    "label": "provides",
    "to": 169
  }, {
    "from": 144,
    "label": "represents",
    "to": 170
  }, {
    "from": 169,
    "label": "provides",
    "to": 170
  }, {
    "from": 171,
    "label": "requires",
    "to": 1
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "binary_converter",
    "type": "module"
  }, {
    "id": 2,
    "text": "function(...) \r\n  local a,b = math.modf(...)\r\n  return b\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "local a,b = math.modf(...)",
    "type": "statement:localassign"
  }, {
    "id": 4,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function(art, data, size)\r\n  if not size then\r\n    local elem_size = struct_size(art)\r\n    assert(0 == math_mod(#data, elem_size))\r\n    size = math.floor(#data / elem_size)\r\n  end\r\n  local fmt = string.rep(art, size)\r\n  local t = {struct_unpack(fmt,data)}\r\n  table.remove(t)\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "if not size then\r\n    local elem_size = struct_size(art)\r\n    assert(0 == math_mod(#data, elem_size))\r\n    size = math.floor(#data / elem_size)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "local elem_size = struct_size(art)",
    "type": "statement:localassign"
  }, {
    "id": 9,
    "text": "assert(0 == math_mod(#data, elem_size))",
    "type": "statement:functioncall"
  }, {
    "id": 10,
    "text": "size = math.floor(#data / elem_size)",
    "type": "statement:assign"
  }, {
    "id": 11,
    "text": "local fmt = string.rep(art, size)",
    "type": "statement:localassign"
  }, {
    "id": 12,
    "text": "local t = {struct_unpack(fmt,data)}",
    "type": "statement:localassign"
  }, {
    "id": 13,
    "text": "table.remove(t)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 15,
    "text": "function(art, data, size)\r\n  size = size or #data\r\n  local fmt = string.rep(art, size)\r\n  return struct_pack(fmt, unpack(data))\r\nend",
    "type": "function"
  }, {
    "id": 16,
    "text": "size = size or #data",
    "type": "statement:assign"
  }, {
    "id": 17,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 18,
    "text": "function(art, data, size)\r\n  local s = 1\r\n  local t = {}\r\n  for i = 1, size do\r\n    local elem = {struct_unpack(art,data,s)}\r\n    s = elem[#elem]\r\n    table.remove(elem)\r\n    if #elem > 1 then \r\n      t[i] = elem\r\n    else\r\n      t[i] = elem[1]\r\n    end\r\n  end\r\n  return t\r\nend",
    "type": "function"
  }, {
    "id": 19,
    "text": "local s = 1",
    "type": "statement:localassign"
  }, {
    "id": 20,
    "text": "local t = {}",
    "type": "statement:localassign"
  }, {
    "id": 21,
    "text": "for i = 1, size do\r\n    local elem = {struct_unpack(art,data,s)}\r\n    s = elem[#elem]\r\n    table.remove(elem)\r\n    if #elem > 1 then \r\n      t[i] = elem\r\n    else\r\n      t[i] = elem[1]\r\n    end\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 22,
    "text": "local elem = {struct_unpack(art,data,s)}",
    "type": "statement:localassign"
  }, {
    "id": 23,
    "text": "s = elem[#elem]",
    "type": "statement:assign"
  }, {
    "id": 24,
    "text": "table.remove(elem)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "if #elem > 1 then \r\n      t[i] = elem\r\n    else\r\n      t[i] = elem[1]\r\n    end",
    "type": "statement:if"
  }, {
    "id": 26,
    "text": "t[i] = elem",
    "type": "statement:assign"
  }, {
    "id": 27,
    "text": "t[i] = elem[1]",
    "type": "statement:assign"
  }, {
    "id": 28,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 29,
    "text": "function(art, data, size)\r\n  if type(data[1]) ~= 'table' then\r\n    return converter.pack_array(art, data, size)\r\n  end\r\n  size = size or #data\r\n  local s = \"\"\r\n  for i = 1, size do\r\n    s = s .. struct_pack(art, unpack(data[i]))\r\n  end\r\n  return s\r\nend",
    "type": "function"
  }, {
    "id": 30,
    "text": "if type(data[1]) ~= 'table' then\r\n    return converter.pack_array(art, data, size)\r\n  end",
    "type": "statement:if"
  }, {
    "id": 31,
    "text": "local s = \"\"",
    "type": "statement:localassign"
  }, {
    "id": 32,
    "text": "for i = 1, size do\r\n    s = s .. struct_pack(art, unpack(data[i]))\r\n  end",
    "type": "statement:numericfor"
  }, {
    "id": 33,
    "text": "s = s .. struct_pack(art, unpack(data[i]))",
    "type": "statement:assign"
  }, {
    "id": 34,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 35,
    "text": "function (t)\r\n  local len = 0\r\n  for i,v in pairs(t) do\r\n    assert(v, \"Unknown field #\" .. i)\r\n    len = len + 1;\r\n  end\r\n  assert(#t == len,\" Thera are unknown fields in struct\")\r\n  return table_concat(t) \r\nend",
    "type": "function"
  }, {
    "id": 36,
    "text": "local len = 0",
    "type": "statement:localassign"
  }, {
    "id": 37,
    "text": "for i,v in pairs(t) do\r\n    assert(v, \"Unknown field #\" .. i)\r\n    len = len + 1;\r\n  end",
    "type": "statement:genericfor"
  }, {
    "id": 38,
    "text": "assert(v, \"Unknown field #\" .. i)",
    "type": "statement:functioncall"
  }, {
    "id": 39,
    "text": "len = len + 1",
    "type": "statement:assign"
  }, {
    "id": 40,
    "text": "assert(#t == len,\" Thera are unknown fields in struct\")",
    "type": "statement:functioncall"
  }, {
    "id": 41,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 42,
    "text": "function(type_mnemo, val) return struct_pack(type_mnemo,struct_unpack(type_mnemo,val)) end",
    "type": "function"
  }, {
    "id": 43,
    "text": "local function cmp_arr(t1,t2)\r\n    if #t1 ~= #t2 then return false end\r\n    for k,v in ipairs(t1)do\r\n      if t2[k] ~= v then return false end\r\n    end\r\n    return true\r\n  end",
    "type": "function"
  }, {
    "id": 44,
    "text": "if #t1 ~= #t2 then return false end",
    "type": "statement:if"
  }, {
    "id": 45,
    "text": "for k,v in ipairs(t1)do\r\n      if t2[k] ~= v then return false end\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 46,
    "text": "if t2[k] ~= v then return false end",
    "type": "statement:if"
  }, {
    "id": 47,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 48,
    "text": "local function test(types, ar)\r\n    for _,fmt in ipairs(types) do\r\n      local data = converter.pack_array(fmt,ar)\r\n      assert(converter.struct_size(fmt) * #ar == #data)\r\n      assert(cmp_arr(ar, converter.unpack_array(fmt,data)))\r\n    end\r\n  end",
    "type": "function"
  }, {
    "id": 49,
    "text": "for _,fmt in ipairs(types) do\r\n      local data = converter.pack_array(fmt,ar)\r\n      assert(converter.struct_size(fmt) * #ar == #data)\r\n      assert(cmp_arr(ar, converter.unpack_array(fmt,data)))\r\n    end",
    "type": "statement:genericfor"
  }, {
    "id": 50,
    "text": "local data = converter.pack_array(fmt,ar)",
    "type": "statement:localassign"
  }, {
    "id": 51,
    "text": "assert(converter.struct_size(fmt) * #ar == #data)",
    "type": "statement:functioncall"
  }, {
    "id": 52,
    "text": "assert(cmp_arr(ar, converter.unpack_array(fmt,data)))",
    "type": "statement:functioncall"
  }, {
    "id": 53,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 54,
    "text": "function(val) return struct_unpack(type_mnemo,val) end",
    "type": "function"
  }, {
    "id": 55,
    "text": "function(val) return struct_pack(type_mnemo,val) end",
    "type": "function"
  }, {
    "id": 56,
    "text": "function(val) return struct_unpack(type_mnemo, struct_pack(type_mnemo,val) ) end",
    "type": "function"
  }, {
    "id": 57,
    "text": "",
    "type": "function container"
  }, {
    "id": 58,
    "text": "string",
    "type": "module"
  }, {
    "id": 59,
    "text": "floor",
    "type": "global function"
  }, {
    "id": 60,
    "text": "rep",
    "type": "global function"
  }, {
    "id": 61,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 62,
    "text": "struct_unpack",
    "type": "global function"
  }, {
    "id": 63,
    "text": "ipairs",
    "type": "global function"
  }, {
    "id": 64,
    "text": "struct_pack",
    "type": "global function"
  }, {
    "id": 65,
    "text": "table_concat",
    "type": "global function"
  }, {
    "id": 66,
    "text": "struct_size",
    "type": "global function"
  }, {
    "id": 67,
    "text": "remove",
    "type": "global function"
  }, {
    "id": 68,
    "text": "struct_size",
    "type": "global function"
  }, {
    "id": 69,
    "text": "modf",
    "type": "global function"
  }, {
    "id": 70,
    "text": "type",
    "type": "global function"
  }, {
    "id": 71,
    "text": "pairs",
    "type": "global function"
  }, {
    "id": 72,
    "text": "unpack",
    "type": "global function"
  }, {
    "id": 73,
    "text": "require",
    "type": "global function"
  }, {
    "id": 74,
    "text": "",
    "type": "variable container"
  }, {
    "id": 75,
    "text": "",
    "type": "require container"
  }, {
    "id": 76,
    "text": "",
    "type": "local variable"
  }, {
    "id": 77,
    "text": "",
    "type": "n/a"
  }, {
    "id": 78,
    "text": "",
    "type": "local variable"
  }, {
    "id": 79,
    "text": "",
    "type": "n/a"
  }, {
    "id": 80,
    "text": "",
    "type": "local variable"
  }, {
    "id": 81,
    "text": "",
    "type": "n/a"
  }, {
    "id": 82,
    "text": "",
    "type": "local variable"
  }, {
    "id": 83,
    "text": "",
    "type": "n/a"
  }, {
    "id": 84,
    "text": "",
    "type": "local variable"
  }, {
    "id": 85,
    "text": "",
    "type": "n/a"
  }, {
    "id": 86,
    "text": "",
    "type": "local variable"
  }, {
    "id": 87,
    "text": "",
    "type": "n/a"
  }, {
    "id": 88,
    "text": "",
    "type": "local variable"
  }, {
    "id": 89,
    "text": "",
    "type": "n/a"
  }, {
    "id": 90,
    "text": "",
    "type": "local variable"
  }, {
    "id": 91,
    "text": "",
    "type": "n/a"
  }, {
    "id": 92,
    "text": "",
    "type": "local variable"
  }, {
    "id": 93,
    "text": "",
    "type": "n/a"
  }, {
    "id": 94,
    "text": "",
    "type": "local variable"
  }, {
    "id": 95,
    "text": "",
    "type": "n/a"
  }, {
    "id": 96,
    "text": "",
    "type": "local variable"
  }, {
    "id": 97,
    "text": "",
    "type": "n/a"
  }, {
    "id": 98,
    "text": "",
    "type": "local variable"
  }, {
    "id": 99,
    "text": "",
    "type": "n/a"
  }, {
    "id": 100,
    "text": "",
    "type": "local variable"
  }, {
    "id": 101,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 102,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 103,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 104,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 105,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 106,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 107,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 108,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 109,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 110,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 111,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 112,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 113,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 114,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 115,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 116,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 117,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 118,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 119,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 120,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 121,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 122,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 123,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 124,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 125,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 126,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 127,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 128,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 129,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 130,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 131,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 132,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 133,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 134,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 135,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 136,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 137,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 138,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 139,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 140,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 141,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 142,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 143,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 144,
    "text": "",
    "type": "local variable"
  }, {
    "id": 145,
    "text": "",
    "type": "tableconstructor"
  }, {
    "id": 146,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 147,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 148,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 149,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 150,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 151,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 152,
    "text": "",
    "type": "table assign node"
  }, {
    "id": 153,
    "text": "",
    "type": "_prefixexp"
  }, {
    "id": 154,
    "text": "",
    "type": "global variable"
  }, {
    "id": 155,
    "text": "",
    "type": "n/a"
  }, {
    "id": 156,
    "text": "",
    "type": "global variable"
  }, {
    "id": 157,
    "text": "",
    "type": "n/a"
  }, {
    "id": 158,
    "text": "",
    "type": "global variable"
  }, {
    "id": 159,
    "text": "",
    "type": "n/a"
  }, {
    "id": 160,
    "text": "",
    "type": "global variable"
  }, {
    "id": 161,
    "text": "",
    "type": "n/a"
  }, {
    "id": 162,
    "text": "",
    "type": "global variable"
  }, {
    "id": 163,
    "text": "",
    "type": "n/a"
  }, {
    "id": 164,
    "text": "",
    "type": "global variable"
  }, {
    "id": 165,
    "text": "",
    "type": "n/a"
  }, {
    "id": 166,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 167,
    "text": "struct",
    "type": "module"
  }, {
    "id": 168,
    "text": "",
    "type": "require local variable"
  }, {
    "id": 169,
    "text": "",
    "type": "interface container"
  }, {
    "id": 170,
    "text": "",
    "type": "interface"
  }, {
    "id": 171,
    "text": "",
    "type": "require local variable"
  } ]
}