{
  "_filename": "test.lua",
  "_isShebang": false,
  "_isSpec": false,
  "_isTest": true,
  "_path": "modules/lmd5/test.lua",
  "edges": [ {
    "from": 0,
    "label": "implements",
    "to": 1
  }, {
    "from": 2,
    "label": "has",
    "to": 3
  }, {
    "from": 2,
    "label": "has",
    "to": 4
  }, {
    "from": 2,
    "label": "has",
    "to": 5
  }, {
    "from": 6,
    "label": "has",
    "to": 7
  }, {
    "from": 6,
    "label": "has",
    "to": 8
  }, {
    "from": 6,
    "label": "has",
    "to": 9
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 11
  }, {
    "from": 6,
    "label": "has",
    "to": 10
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 13
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 14
  }, {
    "from": 6,
    "label": "has",
    "to": 15
  }, {
    "from": 15,
    "label": "has",
    "to": 16
  }, {
    "from": 15,
    "label": "has",
    "to": 17
  }, {
    "from": 15,
    "label": "has",
    "to": 18
  }, {
    "from": 6,
    "label": "has",
    "to": 19
  }, {
    "from": 6,
    "label": "has",
    "to": 20
  }, {
    "from": 6,
    "label": "has",
    "to": 12
  }, {
    "from": 6,
    "label": "has",
    "to": 21
  }, {
    "from": 6,
    "label": "has",
    "to": 22
  }, {
    "from": 22,
    "label": "has",
    "to": 23
  }, {
    "from": 22,
    "label": "has",
    "to": 17
  }, {
    "from": 22,
    "label": "has",
    "to": 18
  }, {
    "from": 6,
    "label": "has",
    "to": 24
  }, {
    "from": 6,
    "label": "has",
    "to": 25
  }, {
    "from": 6,
    "label": "has",
    "to": 26
  }, {
    "from": 6,
    "label": "has",
    "to": 27
  }, {
    "from": 6,
    "label": "has",
    "to": 28
  }, {
    "from": 6,
    "label": "has",
    "to": 29
  }, {
    "from": 6,
    "label": "has",
    "to": 30
  }, {
    "from": 6,
    "label": "has",
    "to": 31
  }, {
    "from": 6,
    "label": "has",
    "to": 32
  }, {
    "from": 6,
    "label": "has",
    "to": 31
  }, {
    "from": 6,
    "label": "has",
    "to": 33
  }, {
    "from": 2,
    "label": "calls",
    "to": 37
  }, {
    "from": 6,
    "label": "calls",
    "to": 37
  }, {
    "from": 6,
    "label": "calls",
    "to": 37
  }, {
    "from": 6,
    "label": "calls",
    "to": 37
  }, {
    "from": 6,
    "label": "calls",
    "to": 37
  }, {
    "from": 6,
    "label": "calls",
    "to": 37
  }, {
    "from": 6,
    "label": "calls",
    "to": 39
  }, {
    "from": 34,
    "label": "calls",
    "to": 6
  }, {
    "from": 34,
    "label": "calls",
    "to": 6
  }, {
    "from": 34,
    "label": "calls",
    "to": 6
  }, {
    "from": 34,
    "label": "calls",
    "to": 6
  }, {
    "from": 34,
    "label": "calls",
    "to": 6
  }, {
    "from": 34,
    "label": "calls",
    "to": 6
  }, {
    "from": 34,
    "label": "calls",
    "to": 6
  }, {
    "from": 34,
    "label": "calls",
    "to": 6
  }, {
    "from": 34,
    "label": "calls",
    "to": 6
  }, {
    "from": 34,
    "label": "calls",
    "to": 6
  }, {
    "from": 6,
    "label": "calls",
    "to": 41
  }, {
    "from": 6,
    "label": "calls",
    "to": 41
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 2
  }, {
    "from": 6,
    "label": "calls",
    "to": 38
  }, {
    "from": 6,
    "label": "calls",
    "to": 40
  }, {
    "from": 6,
    "label": "calls",
    "to": 40
  }, {
    "from": 6,
    "label": "calls",
    "to": 40
  }, {
    "from": 2,
    "label": "calls",
    "to": 36
  }, {
    "from": 6,
    "label": "calls",
    "to": 36
  }, {
    "from": 6,
    "label": "calls",
    "to": 36
  }, {
    "from": 6,
    "label": "calls",
    "to": 36
  }, {
    "from": 6,
    "label": "calls",
    "to": 35
  }, {
    "from": 6,
    "label": "calls",
    "to": 35
  }, {
    "from": 6,
    "label": "calls",
    "to": 35
  }, {
    "from": 1,
    "label": "contains",
    "to": 34
  }, {
    "from": 34,
    "label": "declares",
    "to": 2
  }, {
    "from": 34,
    "label": "declares",
    "to": 6
  }, {
    "from": 1,
    "label": "contains",
    "to": 42
  }, {
    "from": 1,
    "label": "contains",
    "to": 43
  }, {
    "from": 42,
    "label": "initializes",
    "to": 44
  } ],
  "nodes": [ {
    "id": 0,
    "text": "",
    "type": "file"
  }, {
    "id": 1,
    "text": "test",
    "type": "module"
  }, {
    "id": 2,
    "text": "function report(w,s,F)\r\n print(w,s..\"  \"..F)\r\n assert(s==KNOWN)\r\nend",
    "type": "function"
  }, {
    "id": 3,
    "text": "print(w,s..\"  \"..F)",
    "type": "statement:functioncall"
  }, {
    "id": 4,
    "text": "assert(s==KNOWN)",
    "type": "statement:functioncall"
  }, {
    "id": 5,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 6,
    "text": "function test(D,known)\r\n if D==nil then return end\r\n KNOWN=known\r\n print\"\"\r\n print(D.version)\r\n print\"\"\r\n\r\n assert(io.input(F))\r\n report(\"all\",D.digest(io.read\"*a\"),F)\r\n\r\n assert(io.input(F))\r\n d=D.new()\r\n while true do\r\n  local c=io.read(1)\r\n  if c==nil then break end\r\n  d:update(c)\r\n end\r\n report(\"loop\",d:digest(),F)\r\n report(\"again\",d:digest(),F)\r\n\r\n assert(io.input(F))\r\n d:reset()\r\n while true do\r\n  local c=io.read(math.random(1,16))\r\n  if c==nil then break end\r\n  d:update(c)\r\n end\r\n report(\"reset\",d:digest(),F)\r\n\r\n report(\"known\",KNOWN,F)\r\n\r\n local A=\"hello\"\r\n local B=\"world\"\r\n local C=A..B\r\n local a=D.digest(C)\r\n local b=d:reset():update(C):digest()\r\n assert(a==b)\r\n local b=d:reset():update(A):update(B):digest()\r\n assert(a==b)\r\nend",
    "type": "function"
  }, {
    "id": 7,
    "text": "if D==nil then return end",
    "type": "statement:if"
  }, {
    "id": 8,
    "text": "return",
    "type": "statement:keyword"
  }, {
    "id": 9,
    "text": "KNOWN=known",
    "type": "statement:assign"
  }, {
    "id": 10,
    "text": "print\"\"",
    "type": "statement:functioncall"
  }, {
    "id": 11,
    "text": "print(D.version)",
    "type": "statement:functioncall"
  }, {
    "id": 12,
    "text": "assert(io.input(F))",
    "type": "statement:functioncall"
  }, {
    "id": 13,
    "text": "report(\"all\",D.digest(io.read\"*a\"),F)",
    "type": "statement:functioncall"
  }, {
    "id": 14,
    "text": "d=D.new()",
    "type": "statement:assign"
  }, {
    "id": 15,
    "text": "while true do\r\n  local c=io.read(1)\r\n  if c==nil then break end\r\n  d:update(c)\r\n end",
    "type": "statement:while"
  }, {
    "id": 16,
    "text": "local c=io.read(1)",
    "type": "statement:localassign"
  }, {
    "id": 17,
    "text": "if c==nil then break end",
    "type": "statement:if"
  }, {
    "id": 18,
    "text": "d:update(c)",
    "type": "statement:functioncall"
  }, {
    "id": 19,
    "text": "report(\"loop\",d:digest(),F)",
    "type": "statement:functioncall"
  }, {
    "id": 20,
    "text": "report(\"again\",d:digest(),F)",
    "type": "statement:functioncall"
  }, {
    "id": 21,
    "text": "d:reset()",
    "type": "statement:functioncall"
  }, {
    "id": 22,
    "text": "while true do\r\n  local c=io.read(math.random(1,16))\r\n  if c==nil then break end\r\n  d:update(c)\r\n end",
    "type": "statement:while"
  }, {
    "id": 23,
    "text": "local c=io.read(math.random(1,16))",
    "type": "statement:localassign"
  }, {
    "id": 24,
    "text": "report(\"reset\",d:digest(),F)",
    "type": "statement:functioncall"
  }, {
    "id": 25,
    "text": "report(\"known\",KNOWN,F)",
    "type": "statement:functioncall"
  }, {
    "id": 26,
    "text": "local A=\"hello\"",
    "type": "statement:localassign"
  }, {
    "id": 27,
    "text": "local B=\"world\"",
    "type": "statement:localassign"
  }, {
    "id": 28,
    "text": "local C=A..B",
    "type": "statement:localassign"
  }, {
    "id": 29,
    "text": "local a=D.digest(C)",
    "type": "statement:localassign"
  }, {
    "id": 30,
    "text": "local b=d:reset():update(C):digest()",
    "type": "statement:localassign"
  }, {
    "id": 31,
    "text": "assert(a==b)",
    "type": "statement:functioncall"
  }, {
    "id": 32,
    "text": "local b=d:reset():update(A):update(B):digest()",
    "type": "statement:localassign"
  }, {
    "id": 33,
    "text": "",
    "type": "blank lines"
  }, {
    "id": 34,
    "text": "",
    "type": "function container"
  }, {
    "id": 35,
    "text": "read",
    "type": "global function"
  }, {
    "id": 36,
    "text": "print",
    "type": "global function"
  }, {
    "id": 37,
    "text": "assert",
    "type": "global function"
  }, {
    "id": 38,
    "text": "new",
    "type": "global function"
  }, {
    "id": 39,
    "text": "random",
    "type": "global function"
  }, {
    "id": 40,
    "text": "input",
    "type": "global function"
  }, {
    "id": 41,
    "text": "digest",
    "type": "global function"
  }, {
    "id": 42,
    "text": "",
    "type": "variable container"
  }, {
    "id": 43,
    "text": "",
    "type": "require container"
  }, {
    "id": 44,
    "text": "",
    "type": "global variable"
  } ]
}