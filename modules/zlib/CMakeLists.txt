# LuaDist modified version of original CMakeLists.txt provided with zlib.
# Modified install destinations and removed versioning

project ( zlib C )
cmake_minimum_required ( VERSION 2.8 )
include ( cmake/dist.cmake )

include ( CheckTypeSize )
include ( CheckFunctionExists )
include ( CheckIncludeFile )
include ( CheckCSourceCompiles )
enable_testing ( )

check_include_file ( sys/types.h HAVE_SYS_TYPES_H )
check_include_file ( stdint.h HAVE_STDINT_H )
check_include_file ( stddef.h HAVE_STDDEF_H )

#
# Check to see if we have large file support
#
set ( CMAKE_REQUIRED_DEFINITIONS -D_LARGEFILE64_SOURCE=1 )
# We add these other definitions here because CheckTypeSize.cmake
# in CMake 2.4.x does not automatically do so and we want
# compatibility with CMake 2.4.x.
if ( HAVE_SYS_TYPES_H )
  list ( APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_SYS_TYPES_H )
endif ( )
if ( HAVE_STDINT_H )
  list ( APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_STDINT_H )
endif ( )
if ( HAVE_STDDEF_H )
  list ( APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_STDDEF_H )
endif ( )
check_type_size ( off64_t OFF64_T )
if ( HAVE_OFF64_T )
  add_definitions ( -D_LARGEFILE64_SOURCE=1 )
endif ( )
set ( CMAKE_REQUIRED_DEFINITIONS )
# clear variable

#
# Check for fseeko
#
check_function_exists ( fseeko HAVE_FSEEKO )
if ( NOT HAVE_FSEEKO )
  add_definitions ( -DNO_FSEEKO )
endif ( )

#
# Check for unistd.h
#
check_include_file ( unistd.h Z_HAVE_UNISTD_H )

#if ( MSVC )
#  set ( CMAKE_DEBUG_POSTFIX "d" )
#  add_definitions ( -D_CRT_SECURE_NO_DEPRECATE )
#  add_definitions ( -D_CRT_NONSTDC_NO_DEPRECATE )
#endif ( )

if ( NOT CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR )
  # If we're doing an out of source build and the user has a zconf.h
  # in their source tree...
  if ( EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h )
    message ( FATAL_ERROR "You must remove ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h " 
      "from the source tree. This file is included with zlib " "but CMake generates this file for you automatically " 
      "in the build directory." )
  endif ( )
endif ( )

configure_file ( ${CMAKE_CURRENT_SOURCE_DIR}/zconf.h.cmakein ${CMAKE_CURRENT_BINARY_DIR}/zconf.h 
  @ONLY )
include_directories ( ${CMAKE_CURRENT_BINARY_DIR} )

#============================================================================
# zlib
#============================================================================

set ( ZLIB_PUBLIC_HDRS ${CMAKE_CURRENT_BINARY_DIR}/zconf.h zlib.h )
set ( ZLIB_PRIVATE_HDRS crc32.h deflate.h gzguts.h inffast.h inffixed.h inflate.h 
  inftrees.h trees.h zutil.h )
set ( ZLIB_SRCS adler32.c compress.c crc32.c deflate.c gzclose.c gzlib.c gzread.c 
  gzwrite.c inflate.c infback.c inftrees.c inffast.c trees.c uncompr.c zutil.c )
if ( MINGW )
  add_definitions ( -DGCC_WINDRES )
  # for win32/zlib.rc
endif ( )

if ( MINGW OR WIN32 )
  set ( ZLIB_SRCS ${ZLIB_SRCS} win32/zlib1.rc )
endif ( )

# parse the full version number from zlib.h and include in ZLIB_FULL_VERSION
file ( READ ${CMAKE_CURRENT_SOURCE_DIR}/zlib.h _zlib_h_contents )
string ( REGEX REPLACE ".*#define[ \t]+ZLIB_VERSION[ \t]+\"([0-9A-Za-z.]+)\".*" "\\1" 
  ZLIB_FULL_VERSION ${_zlib_h_contents} )

add_library ( z ${ZLIB_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS} )
set_target_properties ( z PROPERTIES DEFINE_SYMBOL ZLIB_DLL )

if ( UNIX )
  # On unix-like platforms the library is almost always called libz
  set_target_properties ( z PROPERTIES OUTPUT_NAME z )
elseif ( BUILD_SHARED_LIBS AND WIN32 )
# Creates zlib1.dll when building shared library version
#removed:  set_target_properties(zlib PROPERTIES SUFFIX "1.dll")
endif ( )

install_library ( z )
install_header ( ${ZLIB_PUBLIC_HDRS} )
install_doc ( zlib.3 INTO man/man3 )

#============================================================================
# Example binaries
#============================================================================

include_directories ( ${CMAKE_CURRENT_SOURCE_DIR} )

add_executable ( example test/example.c )
target_link_libraries ( example z )
add_test ( example example )

add_executable ( minigzip test/minigzip.c )
target_link_libraries ( minigzip z )

if ( HAVE_OFF64_T )
  add_executable ( example64 test/example.c )
  target_link_libraries ( example64 z )
  set_target_properties ( example64 PROPERTIES COMPILE_FLAGS "-D_FILE_OFFSET_BITS=64" )
  add_test ( example64 example64 )

  add_executable ( minigzip64 test/minigzip.c )
  target_link_libraries ( minigzip64 z )
  set_target_properties ( minigzip64 PROPERTIES COMPILE_FLAGS "-D_FILE_OFFSET_BITS=64" )
endif ( )
