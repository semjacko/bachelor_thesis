-- getdoc module, by Peter Mendel, 05/2014

local m = require 'metrics'
local mu = require 'metrics.utils'
local io = require 'io'
local comments = require 'comments'
local lfs = require 'lfs'

local type, pairs, print, assert, table, string = type, pairs, print, assert, table, string

local func_table = {}
local func_commented = {}
local func_notcommented = {}
local ret_table = "return \n{ "
local only = true

module ('getdoc.util')

--- This function opens file given as argument and creates AST using
-- function processText function from metrics module
-- @name getAstFromFile
-- @param filepath - filepath to open and process file
-- @return ast - generated AST
function getAstFromFile(filepath)
	local f, text
	local ast

	f = io.input(filepath)
	text = f:read("*a")
	f:close()

	ast = m.processText(text)

	return ast
end

--- Function to create table contains names of functions and their comments
-- @name createTableOfComments
-- @param ast ast tree generated by processText function in metrics module
-- @return func_table - created table of function comments
function createTableOfComments(ast)
	local comment=nil
	local func_name=nil

	if (only == true) then
		for k,v in pairs(func_table) do
			func_table[k] = nil
		end
		only = false
	end


	if type(ast.data) == "table"  then

		if(ast.key=="LocalFunction" or ast.key=="GlobalFunction")then

			local info = {}
			info.type = "function"
			local param = {}
   			local var = {}
   			local ret = {}
   			local descr = ""
   			local fname = ""

			func_name = ast.name
			comment = mu.getComment(ast)

			if (comment) then
				for line in string.gmatch(comment, "[^\n]+") do
	   				local parsed = comments.Parse(line,"luadoc")


	   				if parsed ~= nil then
		 				if parsed.type == "name" then
		 					fname = parsed.name
		 				elseif parsed.type == "param" then
		 					var[parsed.name] = parsed.text

		 				elseif parsed.type == "return" then
		 					local r = string.match(parsed.text,"[^%s]*")
		 					ret[r] = string.sub(parsed.text,string.len(r)+1)
		 				elseif parsed.type == "descr" then
		 					descr = descr .. parsed.text
		 				end
		 			end
				end
			end
			info.parameters = var
			info.returns = ret
			info.description = descr
			info.name = fname
			func_table[func_name] = info
			return
		end

		for k,v in pairs(ast.data) do

			createTableOfComments(v)

		end
		return func_table
	end
end

--- Function to generate table of parsed comments in string format
-- @name generateReturnTable
-- @param ast ast tree of lua file
-- @param dir name of directory, if given ast tree is generated from directory
-- @return ret_table generated table
function generateReturnTable(ast, dir)

	if dir ~= nil then

		ret_table = 'return \n{ ' .. dir .. ' = { \n'
	else
		ret_table = 'return \n{ '
	end

	for k,v in pairs(ast) do

		if v.type == "function" then

			ret_table = ret_table .. '\t' .. k .. ' = { \n'

		    for a,b in pairs(v) do

		    	if type(b) == "table" then

		    		ret_table = ret_table .. '\t\t' .. a .. ' = { \n'

		    		for c,d in pairs(b) do
		    			if type(d) == "table" then

		    				ret_table = ret_table .. '\t\t\t' .. c .. ' = { ' ..  '\n'

		    				for e,f in pairs(d) do
		    					ret_table = ret_table .. '\t\t\t\t' .. e .. " = [[" .. f .. "]],\n"
		    				end
		    				ret_table = ret_table .. '\t\t\t}, \n'

		    			else ret_table = ret_table .. '\t\t\t' .. c .. " = [[" .. d .. "]],\n"

		    			end

		    		end
		    		ret_table = ret_table ..'\t\t}, \n'
		    	else
		    		ret_table = ret_table .. '\t\t' .. a .. " = [[" .. b .. "]],\n"
		    	end

		    end
		    ret_table = ret_table .. '\t}, \n'

		elseif dir ~= nil then
			generateReturnTable(v,dir)
			ret_table = ret_table ..'\t} \n}'
			else generateReturnTable(v,nil)


		    ret_table = ret_table ..'} \n'
		end
	end

	only = true
	return ret_table
end


--- Function to analyze, if given path exists and if it is directory or file
-- @name searchFile
-- @param path path to analyze
-- @return keyword "directory" or "file" if directory or file exists, nil in other case
function searchFile(path)
	local attr = lfs.attributes (path)
	if type(attr) == "table" then

		if (attr.mode == "directory") then
			return "directory"
		elseif (attr.mode == "file") then
			return "file"
		end
	else
		return nil
	end
	return nil
end
