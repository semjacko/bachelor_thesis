// ScintillaEdit.h
// Extended version of ScintillaEditBase with a method for each API
// Copyright (c) 2011 Archaeopteryx Software, Inc. d/b/a Wingware

#ifndef SCINTILLAEDIT_H
#define SCINTILLAEDIT_H

#include <QPair>

#include "ScintillaEditBase.h"
#include "ScintillaDocument.h"

#ifdef SCI_NAMESPACE
namespace Scintilla {
#endif

#ifndef EXPORT_IMPORT_API
#ifdef WIN32
#ifdef MAKING_LIBRARY
#define EXPORT_IMPORT_API __declspec(dllexport)
#else
// Defining dllimport upsets moc
#define EXPORT_IMPORT_API __declspec(dllimport)
//#define EXPORT_IMPORT_API
#endif
#else
#define EXPORT_IMPORT_API
#endif
#endif

class EXPORT_IMPORT_API ScintillaEdit : public ScintillaEditBase {
	Q_OBJECT

public:
	ScintillaEdit(QWidget *parent = 0);
	virtual ~ScintillaEdit();

	QByteArray TextReturner(int message, uptr_t wParam) const;

	QPair<int, int>find_text(int flags, const char *text, int cpMin, int cpMax);
	QByteArray get_text_range(int start, int end);
        ScintillaDocument *get_doc();
        void set_doc(ScintillaDocument *pdoc_);

	// Same as previous two methods but with Qt style names
	QPair<int, int>findText(int flags, const char *text, int cpMin, int cpMax) {
		return find_text(flags, text, cpMin, cpMax);
	}

	QByteArray textRange(int start, int end) {
		return get_text_range(start, end);
	}

/* ++Autogenerated -- start of section automatically generated from Scintilla.iface */
	void addText(int length, const char * text);
	void addStyledText(int length, const char * c);
	void insertText(int pos, const char * text);
	void clearAll();
	void deleteRange(int pos, int deleteLength);
	void clearDocumentStyle();
	int length() const;
	int charAt(int pos) const;
	int currentPos() const;
	int anchor() const;
	int styleAt(int pos) const;
	void redo();
	void setUndoCollection(bool collectUndo);
	void selectAll();
	void setSavePoint();
	bool canRedo();
	int markerLineFromHandle(int handle);
	void markerDeleteHandle(int handle);
	bool undoCollection() const;
	int viewWS() const;
	void setViewWS(int viewWS);
	int positionFromPoint(int x, int y);
	int positionFromPointClose(int x, int y);
	void gotoLine(int line);
	void gotoPos(int pos);
	void setAnchor(int posAnchor);
	QByteArray getCurLine(int length);
	int endStyled() const;
	void convertEOLs(int eolMode);
	int eOLMode() const;
	void setEOLMode(int eolMode);
	void startStyling(int pos, int mask);
	void setStyling(int length, int style);
	bool bufferedDraw() const;
	void setBufferedDraw(bool buffered);
	void setTabWidth(int tabWidth);
	int tabWidth() const;
	void setCodePage(int codePage);
	void markerDefine(int markerNumber, int markerSymbol);
	void markerSetFore(int markerNumber, int fore);
	void markerSetBack(int markerNumber, int back);
	void markerSetBackSelected(int markerNumber, int back);
	void markerEnableHighlight(bool enabled);
	int markerAdd(int line, int markerNumber);
	void markerDelete(int line, int markerNumber);
	void markerDeleteAll(int markerNumber);
	int markerGet(int line);
	int markerNext(int lineStart, int markerMask);
	int markerPrevious(int lineStart, int markerMask);
	void markerDefinePixmap(int markerNumber, const char * pixmap);
	void markerAddSet(int line, int set);
	void markerSetAlpha(int markerNumber, int alpha);
	void setMarginTypeN(int margin, int marginType);
	int marginTypeN(int margin) const;
	void setMarginWidthN(int margin, int pixelWidth);
	int marginWidthN(int margin) const;
	void setMarginMaskN(int margin, int mask);
	int marginMaskN(int margin) const;
	void setMarginSensitiveN(int margin, bool sensitive);
	bool marginSensitiveN(int margin) const;
	void setMarginCursorN(int margin, int cursor);
	int marginCursorN(int margin) const;
	void styleClearAll();
	void styleSetFore(int style, int fore);
	void styleSetBack(int style, int back);
	void styleSetBold(int style, bool bold);
	void styleSetItalic(int style, bool italic);
	void styleSetSize(int style, int sizePoints);
	void styleSetFont(int style, const char * fontName);
	void styleSetEOLFilled(int style, bool filled);
	void styleResetDefault();
	void styleSetUnderline(int style, bool underline);
	int styleFore(int style) const;
	int styleBack(int style) const;
	bool styleBold(int style) const;
	bool styleItalic(int style) const;
	int styleSize(int style) const;
	QByteArray styleGetFont(int style);
	bool styleEOLFilled(int style) const;
	bool styleUnderline(int style) const;
	int styleCase(int style) const;
	int styleCharacterSet(int style) const;
	bool styleVisible(int style) const;
	bool styleChangeable(int style) const;
	bool styleHotSpot(int style) const;
	void styleSetCase(int style, int caseForce);
	void styleSetSizeFractional(int style, int caseForce);
	int styleSizeFractional(int style) const;
	void styleSetWeight(int style, int weight);
	int styleWeight(int style) const;
	void styleSetCharacterSet(int style, int characterSet);
	void styleSetHotSpot(int style, bool hotspot);
	void setSelFore(bool useSetting, int fore);
	void setSelBack(bool useSetting, int back);
	int selAlpha() const;
	void setSelAlpha(int alpha);
	bool selEOLFilled() const;
	void setSelEOLFilled(bool filled);
	void setCaretFore(int fore);
	void assignCmdKey(int km, int msg);
	void clearCmdKey(int km);
	void clearAllCmdKeys();
	void setStylingEx(int length, const char * styles);
	void styleSetVisible(int style, bool visible);
	int caretPeriod() const;
	void setCaretPeriod(int periodMilliseconds);
	void setWordChars(const char * characters);
	void beginUndoAction();
	void endUndoAction();
	void indicSetStyle(int indic, int style);
	int indicStyle(int indic) const;
	void indicSetFore(int indic, int fore);
	int indicFore(int indic) const;
	void indicSetUnder(int indic, bool under);
	bool indicUnder(int indic) const;
	void setWhitespaceFore(bool useSetting, int fore);
	void setWhitespaceBack(bool useSetting, int back);
	void setWhitespaceSize(int size);
	int whitespaceSize() const;
	void setStyleBits(int bits);
	int styleBits() const;
	void setLineState(int line, int state);
	int lineState(int line) const;
	int maxLineState() const;
	bool caretLineVisible() const;
	void setCaretLineVisible(bool show);
	int caretLineBack() const;
	void setCaretLineBack(int back);
	void styleSetChangeable(int style, bool changeable);
	void autoCShow(int lenEntered, const char * itemList);
	void autoCCancel();
	bool autoCActive();
	int autoCPosStart();
	void autoCComplete();
	void autoCStops(const char * characterSet);
	void autoCSetSeparator(int separatorCharacter);
	int autoCSeparator() const;
	void autoCSelect(const char * text);
	void autoCSetCancelAtStart(bool cancel);
	bool autoCCancelAtStart() const;
	void autoCSetFillUps(const char * characterSet);
	void autoCSetChooseSingle(bool chooseSingle);
	bool autoCChooseSingle() const;
	void autoCSetIgnoreCase(bool ignoreCase);
	bool autoCIgnoreCase() const;
	void userListShow(int listType, const char * itemList);
	void autoCSetAutoHide(bool autoHide);
	bool autoCAutoHide() const;
	void autoCSetDropRestOfWord(bool dropRestOfWord);
	bool autoCDropRestOfWord() const;
	void registerImage(int type, const char * xpmData);
	void clearRegisteredImages();
	int autoCTypeSeparator() const;
	void autoCSetTypeSeparator(int separatorCharacter);
	void autoCSetMaxWidth(int characterCount);
	int autoCMaxWidth() const;
	void autoCSetMaxHeight(int rowCount);
	int autoCMaxHeight() const;
	void setIndent(int indentSize);
	int indent() const;
	void setUseTabs(bool useTabs);
	bool useTabs() const;
	void setLineIndentation(int line, int indentSize);
	int lineIndentation(int line) const;
	int lineIndentPosition(int line) const;
	int column(int pos) const;
	int countCharacters(int startPos, int endPos);
	void setHScrollBar(bool show);
	bool hScrollBar() const;
	void setIndentationGuides(int indentView);
	int indentationGuides() const;
	void setHighlightGuide(int column);
	int highlightGuide() const;
	int lineEndPosition(int line) const;
	int codePage() const;
	int caretFore() const;
	bool readOnly() const;
	void setCurrentPos(int pos);
	void setSelectionStart(int pos);
	int selectionStart() const;
	void setSelectionEnd(int pos);
	int selectionEnd() const;
	void setEmptySelection(int pos);
	void setPrintMagnification(int magnification);
	int printMagnification() const;
	void setPrintColourMode(int mode);
	int printColourMode() const;
	int firstVisibleLine() const;
	QByteArray getLine(int line);
	int lineCount() const;
	void setMarginLeft(int pixelWidth);
	int marginLeft() const;
	void setMarginRight(int pixelWidth);
	int marginRight() const;
	bool modify() const;
	void setSel(int start, int end);
	QByteArray getSelText();
	void hideSelection(bool normal);
	int pointXFromPosition(int pos);
	int pointYFromPosition(int pos);
	int lineFromPosition(int pos);
	int positionFromLine(int line);
	void lineScroll(int columns, int lines);
	void scrollCaret();
	void replaceSel(const char * text);
	void setReadOnly(bool readOnly);
	void null();
	bool canPaste();
	bool canUndo();
	void emptyUndoBuffer();
	void undo();
	void cut();
	void copy();
	void paste();
	void clear();
	void setText(const char * text);
	QByteArray getText(int length);
	int textLength() const;
	int directFunction() const;
	int directPointer() const;
	void setOvertype(bool overtype);
	bool overtype() const;
	void setCaretWidth(int pixelWidth);
	int caretWidth() const;
	void setTargetStart(int pos);
	int targetStart() const;
	void setTargetEnd(int pos);
	int targetEnd() const;
	int replaceTarget(int length, const char * text);
	int replaceTargetRE(int length, const char * text);
	int searchInTarget(int length, const char * text);
	void setSearchFlags(int flags);
	int searchFlags() const;
	void callTipShow(int pos, const char * definition);
	void callTipCancel();
	bool callTipActive();
	int callTipPosStart();
	void callTipSetHlt(int start, int end);
	void callTipSetBack(int back);
	void callTipSetFore(int fore);
	void callTipSetForeHlt(int fore);
	void callTipUseStyle(int tabSize);
	void callTipSetPosition(bool above);
	int visibleFromDocLine(int line);
	int docLineFromVisible(int lineDisplay);
	int wrapCount(int line);
	void setFoldLevel(int line, int level);
	int foldLevel(int line) const;
	int lastChild(int line, int level) const;
	int foldParent(int line) const;
	void showLines(int lineStart, int lineEnd);
	void hideLines(int lineStart, int lineEnd);
	bool lineVisible(int line) const;
	bool allLinesVisible() const;
	void setFoldExpanded(int line, bool expanded);
	bool foldExpanded(int line) const;
	void toggleFold(int line);
	void ensureVisible(int line);
	void setFoldFlags(int flags);
	void ensureVisibleEnforcePolicy(int line);
	void setTabIndents(bool tabIndents);
	bool tabIndents() const;
	void setBackSpaceUnIndents(bool bsUnIndents);
	bool backSpaceUnIndents() const;
	void setMouseDwellTime(int periodMilliseconds);
	int mouseDwellTime() const;
	int wordStartPosition(int pos, bool onlyWordCharacters);
	int wordEndPosition(int pos, bool onlyWordCharacters);
	void setWrapMode(int mode);
	int wrapMode() const;
	void setWrapVisualFlags(int wrapVisualFlags);
	int wrapVisualFlags() const;
	void setWrapVisualFlagsLocation(int wrapVisualFlagsLocation);
	int wrapVisualFlagsLocation() const;
	void setWrapStartIndent(int indent);
	int wrapStartIndent() const;
	void setWrapIndentMode(int mode);
	int wrapIndentMode() const;
	void setLayoutCache(int mode);
	int layoutCache() const;
	void setScrollWidth(int pixelWidth);
	int scrollWidth() const;
	void setScrollWidthTracking(bool tracking);
	bool scrollWidthTracking() const;
	int textWidth(int style, const char * text);
	void setEndAtLastLine(bool endAtLastLine);
	bool endAtLastLine() const;
	int textHeight(int line);
	void setVScrollBar(bool show);
	bool vScrollBar() const;
	void appendText(int length, const char * text);
	bool twoPhaseDraw() const;
	void setTwoPhaseDraw(bool twoPhase);
	void setFontQuality(int fontQuality);
	int fontQuality() const;
	void setFirstVisibleLine(int lineDisplay);
	void setMultiPaste(int multiPaste);
	int multiPaste() const;
	QByteArray getTag(int tagNumber);
	void targetFromSelection();
	void linesJoin();
	void linesSplit(int pixelWidth);
	void setFoldMarginColour(bool useSetting, int back);
	void setFoldMarginHiColour(bool useSetting, int fore);
	void lineDown();
	void lineDownExtend();
	void lineUp();
	void lineUpExtend();
	void charLeft();
	void charLeftExtend();
	void charRight();
	void charRightExtend();
	void wordLeft();
	void wordLeftExtend();
	void wordRight();
	void wordRightExtend();
	void home();
	void homeExtend();
	void lineEnd();
	void lineEndExtend();
	void documentStart();
	void documentStartExtend();
	void documentEnd();
	void documentEndExtend();
	void pageUp();
	void pageUpExtend();
	void pageDown();
	void pageDownExtend();
	void editToggleOvertype();
	void cancel();
	void deleteBack();
	void tab();
	void backTab();
	void newLine();
	void formFeed();
	void vCHome();
	void vCHomeExtend();
	void zoomIn();
	void zoomOut();
	void delWordLeft();
	void delWordRight();
	void delWordRightEnd();
	void lineCut();
	void lineDelete();
	void lineTranspose();
	void lineDuplicate();
	void lowerCase();
	void upperCase();
	void lineScrollDown();
	void lineScrollUp();
	void deleteBackNotLine();
	void homeDisplay();
	void homeDisplayExtend();
	void lineEndDisplay();
	void lineEndDisplayExtend();
	void homeWrap();
	void homeWrapExtend();
	void lineEndWrap();
	void lineEndWrapExtend();
	void vCHomeWrap();
	void vCHomeWrapExtend();
	void lineCopy();
	void moveCaretInsideView();
	int lineLength(int line);
	void braceHighlight(int pos1, int pos2);
	void braceHighlightIndicator(bool useBraceHighlightIndicator, int indicator);
	void braceBadLight(int pos);
	void braceBadLightIndicator(bool useBraceBadLightIndicator, int indicator);
	int braceMatch(int pos);
	bool viewEOL() const;
	void setViewEOL(bool visible);
	int docPointer() const;
	void setDocPointer(int pointer);
	void setModEventMask(int mask);
	int edgeColumn() const;
	void setEdgeColumn(int column);
	int edgeMode() const;
	void setEdgeMode(int mode);
	int edgeColour() const;
	void setEdgeColour(int edgeColour);
	void searchAnchor();
	int searchNext(int flags, const char * text);
	int searchPrev(int flags, const char * text);
	int linesOnScreen() const;
	void usePopUp(bool allowPopUp);
	bool selectionIsRectangle() const;
	void setZoom(int zoom);
	int zoom() const;
	int createDocument();
	void addRefDocument(int doc);
	void releaseDocument(int doc);
	int modEventMask() const;
	void setFocus(bool focus);
	bool focus() const;
	void setStatus(int statusCode);
	int status() const;
	void setMouseDownCaptures(bool captures);
	bool mouseDownCaptures() const;
	void setCursor(int cursorType);
	int cursor() const;
	void setControlCharSymbol(int symbol);
	int controlCharSymbol() const;
	void wordPartLeft();
	void wordPartLeftExtend();
	void wordPartRight();
	void wordPartRightExtend();
	void setVisiblePolicy(int visiblePolicy, int visibleSlop);
	void delLineLeft();
	void delLineRight();
	void setXOffset(int newOffset);
	int xOffset() const;
	void chooseCaretX();
	void grabFocus();
	void setXCaretPolicy(int caretPolicy, int caretSlop);
	void setYCaretPolicy(int caretPolicy, int caretSlop);
	void setPrintWrapMode(int mode);
	int printWrapMode() const;
	void setHotspotActiveFore(bool useSetting, int fore);
	int hotspotActiveFore() const;
	void setHotspotActiveBack(bool useSetting, int back);
	int hotspotActiveBack() const;
	void setHotspotActiveUnderline(bool underline);
	bool hotspotActiveUnderline() const;
	void setHotspotSingleLine(bool singleLine);
	bool hotspotSingleLine() const;
	void paraDown();
	void paraDownExtend();
	void paraUp();
	void paraUpExtend();
	int positionBefore(int pos);
	int positionAfter(int pos);
	void copyRange(int start, int end);
	void copyText(int length, const char * text);
	void setSelectionMode(int mode);
	int selectionMode() const;
	int getLineSelStartPosition(int line);
	int getLineSelEndPosition(int line);
	void lineDownRectExtend();
	void lineUpRectExtend();
	void charLeftRectExtend();
	void charRightRectExtend();
	void homeRectExtend();
	void vCHomeRectExtend();
	void lineEndRectExtend();
	void pageUpRectExtend();
	void pageDownRectExtend();
	void stutteredPageUp();
	void stutteredPageUpExtend();
	void stutteredPageDown();
	void stutteredPageDownExtend();
	void wordLeftEnd();
	void wordLeftEndExtend();
	void wordRightEnd();
	void wordRightEndExtend();
	void setWhitespaceChars(const char * characters);
	void setCharsDefault();
	int autoCGetCurrent();
	QByteArray autoCGetCurrentText();
	void autoCSetCaseInsensitiveBehaviour(int behaviour);
	int autoCCaseInsensitiveBehaviour() const;
	void allocate(int bytes);
	QByteArray targetAsUTF8();
	void setLengthForEncode(int bytes);
	QByteArray encodedFromUTF8(const char * utf8);
	int findColumn(int line, int column);
	int caretSticky() const;
	void setCaretSticky(int useCaretStickyBehaviour);
	void toggleCaretSticky();
	void setPasteConvertEndings(bool convert);
	bool pasteConvertEndings() const;
	void selectionDuplicate();
	void setCaretLineBackAlpha(int alpha);
	int caretLineBackAlpha() const;
	void setCaretStyle(int caretStyle);
	int caretStyle() const;
	void setIndicatorCurrent(int indicator);
	int indicatorCurrent() const;
	void setIndicatorValue(int value);
	int indicatorValue() const;
	void indicatorFillRange(int position, int fillLength);
	void indicatorClearRange(int position, int clearLength);
	int indicatorAllOnFor(int position);
	int indicatorValueAt(int indicator, int position);
	int indicatorStart(int indicator, int position);
	int indicatorEnd(int indicator, int position);
	void setPositionCache(int size);
	int positionCache() const;
	void copyAllowLine();
	int characterPointer() const;
	int rangePointer(int position, int rangeLength) const;
	int gapPosition() const;
	void setKeysUnicode(bool keysUnicode);
	bool keysUnicode() const;
	void indicSetAlpha(int indicator, int alpha);
	int indicAlpha(int indicator) const;
	void indicSetOutlineAlpha(int indicator, int alpha);
	int indicOutlineAlpha(int indicator) const;
	void setExtraAscent(int extraAscent);
	int extraAscent() const;
	void setExtraDescent(int extraDescent);
	int extraDescent() const;
	int markerSymbolDefined(int markerNumber);
	void marginSetText(int line, const char * text);
	QByteArray marginText(int line) const;
	void marginSetStyle(int line, int style);
	int marginStyle(int line) const;
	void marginSetStyles(int line, const char * styles);
	QByteArray marginStyles(int line) const;
	void marginTextClearAll();
	void marginSetStyleOffset(int style);
	int marginStyleOffset() const;
	void setMarginOptions(int marginOptions);
	int marginOptions() const;
	void annotationSetText(int line, const char * text);
	QByteArray annotationText(int line) const;
	void annotationSetStyle(int line, int style);
	int annotationStyle(int line) const;
	void annotationSetStyles(int line, const char * styles);
	QByteArray annotationStyles(int line) const;
	int annotationLines(int line) const;
	void annotationClearAll();
	void annotationSetVisible(int visible);
	int annotationVisible() const;
	void annotationSetStyleOffset(int style);
	int annotationStyleOffset() const;
	void addUndoAction(int token, int flags);
	int charPositionFromPoint(int x, int y);
	int charPositionFromPointClose(int x, int y);
	void setMultipleSelection(bool multipleSelection);
	bool multipleSelection() const;
	void setAdditionalSelectionTyping(bool additionalSelectionTyping);
	bool additionalSelectionTyping() const;
	void setAdditionalCaretsBlink(bool additionalCaretsBlink);
	bool additionalCaretsBlink() const;
	void setAdditionalCaretsVisible(bool additionalCaretsBlink);
	bool additionalCaretsVisible() const;
	int selections() const;
	void clearSelections();
	int setSelection(int caret, int anchor);
	int addSelection(int caret, int anchor);
	void setMainSelection(int selection);
	int mainSelection() const;
	void setSelectionNCaret(int selection, int pos);
	int selectionNCaret(int selection) const;
	void setSelectionNAnchor(int selection, int posAnchor);
	int selectionNAnchor(int selection) const;
	void setSelectionNCaretVirtualSpace(int selection, int space);
	int selectionNCaretVirtualSpace(int selection) const;
	void setSelectionNAnchorVirtualSpace(int selection, int space);
	int selectionNAnchorVirtualSpace(int selection) const;
	void setSelectionNStart(int selection, int pos);
	int selectionNStart(int selection) const;
	void setSelectionNEnd(int selection, int pos);
	int selectionNEnd(int selection) const;
	void setRectangularSelectionCaret(int pos);
	int rectangularSelectionCaret() const;
	void setRectangularSelectionAnchor(int posAnchor);
	int rectangularSelectionAnchor() const;
	void setRectangularSelectionCaretVirtualSpace(int space);
	int rectangularSelectionCaretVirtualSpace() const;
	void setRectangularSelectionAnchorVirtualSpace(int space);
	int rectangularSelectionAnchorVirtualSpace() const;
	void setVirtualSpaceOptions(int virtualSpaceOptions);
	int virtualSpaceOptions() const;
	void setRectangularSelectionModifier(int modifier);
	int rectangularSelectionModifier() const;
	void setAdditionalSelFore(int fore);
	void setAdditionalSelBack(int back);
	void setAdditionalSelAlpha(int alpha);
	int additionalSelAlpha() const;
	void setAdditionalCaretFore(int fore);
	int additionalCaretFore() const;
	void rotateSelection();
	void swapMainAnchorCaret();
	int changeLexerState(int start, int end);
	int contractedFoldNext(int lineStart);
	void verticalCentreCaret();
	void moveSelectedLinesUp();
	void moveSelectedLinesDown();
	void setIdentifier(int identifier);
	int identifier() const;
	void rGBAImageSetWidth(int width);
	void rGBAImageSetHeight(int height);
	void markerDefineRGBAImage(int markerNumber, const char * pixels);
	void registerRGBAImage(int type, const char * pixels);
	void scrollToStart();
	void scrollToEnd();
	void setTechnology(int technology);
	int technology() const;
	int createLoader(int bytes);
	void findIndicatorShow(int start, int end);
	void findIndicatorFlash(int start, int end);
	void findIndicatorHide();
	void startRecord();
	void stopRecord();
	void setLexer(int lexer);
	int lexer() const;
	void colourise(int start, int end);
	void setProperty(const char * key, const char * value);
	void setKeyWords(int keywordSet, const char * keyWords);
	void setLexerLanguage(const char * language);
	void loadLexerLibrary(const char * path);
	QByteArray getProperty(const char * key);
	QByteArray getPropertyExpanded(const char * key);
	int propertyInt(const char * key) const;
	int styleBitsNeeded() const;
	QByteArray lexerLanguage() const;
	int privateLexerCall(int operation, int pointer);
	QByteArray propertyNames();
	int propertyType(const char * name);
	QByteArray describeProperty(const char * name);
	QByteArray describeKeyWordSets();
/* --Autogenerated -- end of section automatically generated from Scintilla.iface */

};

#ifdef SCI_NAMESPACE
}
#endif

#endif /* SCINTILLAEDIT_H */
