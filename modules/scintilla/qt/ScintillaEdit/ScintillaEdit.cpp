// ScintillaEdit.cpp
// Extended version of ScintillaEditBase with a method for each API
// Copyright (c) 2011 Archaeopteryx Software, Inc. d/b/a Wingware

#include "ScintillaEdit.h"

ScintillaEdit::ScintillaEdit(QWidget *parent) : ScintillaEditBase(parent) {
}

ScintillaEdit::~ScintillaEdit() {
}

QByteArray ScintillaEdit::TextReturner(int message, uptr_t wParam) const {
    int length = send(message, wParam, 0);
    QByteArray ba(length, '\0');
    send(message, wParam, (sptr_t)ba.data());
    // Remove extra NULs
    if (ba.size() > 0 && ba.at(ba.size()-1) == 0)
        ba.chop(1);
    return ba;
}

QPair<int, int>ScintillaEdit::find_text(int flags, const char *text, int cpMin, int cpMax) {
    struct TextToFind ft = {{0, 0}, 0, {0, 0}};
    ft.chrg.cpMin = cpMin;
    ft.chrg.cpMax = cpMax;
    ft.chrgText.cpMin = cpMin;
    ft.chrgText.cpMax = cpMax;
    ft.lpstrText = const_cast<char *>(text);

    send(SCI_FINDTEXT, flags, (uptr_t) (&ft));

    return QPair<int,int>(ft.chrgText.cpMin, ft.chrgText.cpMax);
}

QByteArray ScintillaEdit::get_text_range(int start, int end) {
    if (start > end)
        start = end;

    int length = end-start;
    QByteArray ba(length+1, '\0');
    struct TextRange tr = {{start, end}, ba.data()};

    length = send(SCI_GETTEXTRANGE, 0, (sptr_t)&tr);
    ba.chop(1); // Remove extra NUL

    return ba;
}

ScintillaDocument *ScintillaEdit::get_doc() {
    return new ScintillaDocument(0, (void *)send(SCI_GETDOCPOINTER, 0, 0));
}

void ScintillaEdit::set_doc(ScintillaDocument *pdoc_) {
    send(SCI_SETDOCPOINTER, 0, (sptr_t)(pdoc_->pointer()));
}

/* ++Autogenerated -- start of section automatically generated from Scintilla.iface */
void ScintillaEdit::addText(int length, const char * text) {
    send(SCI_ADDTEXT, length, (sptr_t)text);
}

void ScintillaEdit::addStyledText(int length, const char * c) {
    send(SCI_ADDSTYLEDTEXT, length, (sptr_t)c);
}

void ScintillaEdit::insertText(int pos, const char * text) {
    send(SCI_INSERTTEXT, pos, (sptr_t)text);
}

void ScintillaEdit::clearAll() {
    send(SCI_CLEARALL, 0, 0);
}

void ScintillaEdit::deleteRange(int pos, int deleteLength) {
    send(SCI_DELETERANGE, pos, deleteLength);
}

void ScintillaEdit::clearDocumentStyle() {
    send(SCI_CLEARDOCUMENTSTYLE, 0, 0);
}

int ScintillaEdit::length() const {
    return send(SCI_GETLENGTH, 0, 0);
}

int ScintillaEdit::charAt(int pos) const {
    return send(SCI_GETCHARAT, pos, 0);
}

int ScintillaEdit::currentPos() const {
    return send(SCI_GETCURRENTPOS, 0, 0);
}

int ScintillaEdit::anchor() const {
    return send(SCI_GETANCHOR, 0, 0);
}

int ScintillaEdit::styleAt(int pos) const {
    return send(SCI_GETSTYLEAT, pos, 0);
}

void ScintillaEdit::redo() {
    send(SCI_REDO, 0, 0);
}

void ScintillaEdit::setUndoCollection(bool collectUndo) {
    send(SCI_SETUNDOCOLLECTION, collectUndo, 0);
}

void ScintillaEdit::selectAll() {
    send(SCI_SELECTALL, 0, 0);
}

void ScintillaEdit::setSavePoint() {
    send(SCI_SETSAVEPOINT, 0, 0);
}

bool ScintillaEdit::canRedo() {
    return send(SCI_CANREDO, 0, 0);
}

int ScintillaEdit::markerLineFromHandle(int handle) {
    return send(SCI_MARKERLINEFROMHANDLE, handle, 0);
}

void ScintillaEdit::markerDeleteHandle(int handle) {
    send(SCI_MARKERDELETEHANDLE, handle, 0);
}

bool ScintillaEdit::undoCollection() const {
    return send(SCI_GETUNDOCOLLECTION, 0, 0);
}

int ScintillaEdit::viewWS() const {
    return send(SCI_GETVIEWWS, 0, 0);
}

void ScintillaEdit::setViewWS(int viewWS) {
    send(SCI_SETVIEWWS, viewWS, 0);
}

int ScintillaEdit::positionFromPoint(int x, int y) {
    return send(SCI_POSITIONFROMPOINT, x, y);
}

int ScintillaEdit::positionFromPointClose(int x, int y) {
    return send(SCI_POSITIONFROMPOINTCLOSE, x, y);
}

void ScintillaEdit::gotoLine(int line) {
    send(SCI_GOTOLINE, line, 0);
}

void ScintillaEdit::gotoPos(int pos) {
    send(SCI_GOTOPOS, pos, 0);
}

void ScintillaEdit::setAnchor(int posAnchor) {
    send(SCI_SETANCHOR, posAnchor, 0);
}

QByteArray ScintillaEdit::getCurLine(int length) {
    return TextReturner(SCI_GETCURLINE, length);
}

int ScintillaEdit::endStyled() const {
    return send(SCI_GETENDSTYLED, 0, 0);
}

void ScintillaEdit::convertEOLs(int eolMode) {
    send(SCI_CONVERTEOLS, eolMode, 0);
}

int ScintillaEdit::eOLMode() const {
    return send(SCI_GETEOLMODE, 0, 0);
}

void ScintillaEdit::setEOLMode(int eolMode) {
    send(SCI_SETEOLMODE, eolMode, 0);
}

void ScintillaEdit::startStyling(int pos, int mask) {
    send(SCI_STARTSTYLING, pos, mask);
}

void ScintillaEdit::setStyling(int length, int style) {
    send(SCI_SETSTYLING, length, style);
}

bool ScintillaEdit::bufferedDraw() const {
    return send(SCI_GETBUFFEREDDRAW, 0, 0);
}

void ScintillaEdit::setBufferedDraw(bool buffered) {
    send(SCI_SETBUFFEREDDRAW, buffered, 0);
}

void ScintillaEdit::setTabWidth(int tabWidth) {
    send(SCI_SETTABWIDTH, tabWidth, 0);
}

int ScintillaEdit::tabWidth() const {
    return send(SCI_GETTABWIDTH, 0, 0);
}

void ScintillaEdit::setCodePage(int codePage) {
    send(SCI_SETCODEPAGE, codePage, 0);
}

void ScintillaEdit::markerDefine(int markerNumber, int markerSymbol) {
    send(SCI_MARKERDEFINE, markerNumber, markerSymbol);
}

void ScintillaEdit::markerSetFore(int markerNumber, int fore) {
    send(SCI_MARKERSETFORE, markerNumber, fore);
}

void ScintillaEdit::markerSetBack(int markerNumber, int back) {
    send(SCI_MARKERSETBACK, markerNumber, back);
}

void ScintillaEdit::markerSetBackSelected(int markerNumber, int back) {
    send(SCI_MARKERSETBACKSELECTED, markerNumber, back);
}

void ScintillaEdit::markerEnableHighlight(bool enabled) {
    send(SCI_MARKERENABLEHIGHLIGHT, enabled, 0);
}

int ScintillaEdit::markerAdd(int line, int markerNumber) {
    return send(SCI_MARKERADD, line, markerNumber);
}

void ScintillaEdit::markerDelete(int line, int markerNumber) {
    send(SCI_MARKERDELETE, line, markerNumber);
}

void ScintillaEdit::markerDeleteAll(int markerNumber) {
    send(SCI_MARKERDELETEALL, markerNumber, 0);
}

int ScintillaEdit::markerGet(int line) {
    return send(SCI_MARKERGET, line, 0);
}

int ScintillaEdit::markerNext(int lineStart, int markerMask) {
    return send(SCI_MARKERNEXT, lineStart, markerMask);
}

int ScintillaEdit::markerPrevious(int lineStart, int markerMask) {
    return send(SCI_MARKERPREVIOUS, lineStart, markerMask);
}

void ScintillaEdit::markerDefinePixmap(int markerNumber, const char * pixmap) {
    send(SCI_MARKERDEFINEPIXMAP, markerNumber, (sptr_t)pixmap);
}

void ScintillaEdit::markerAddSet(int line, int set) {
    send(SCI_MARKERADDSET, line, set);
}

void ScintillaEdit::markerSetAlpha(int markerNumber, int alpha) {
    send(SCI_MARKERSETALPHA, markerNumber, alpha);
}

void ScintillaEdit::setMarginTypeN(int margin, int marginType) {
    send(SCI_SETMARGINTYPEN, margin, marginType);
}

int ScintillaEdit::marginTypeN(int margin) const {
    return send(SCI_GETMARGINTYPEN, margin, 0);
}

void ScintillaEdit::setMarginWidthN(int margin, int pixelWidth) {
    send(SCI_SETMARGINWIDTHN, margin, pixelWidth);
}

int ScintillaEdit::marginWidthN(int margin) const {
    return send(SCI_GETMARGINWIDTHN, margin, 0);
}

void ScintillaEdit::setMarginMaskN(int margin, int mask) {
    send(SCI_SETMARGINMASKN, margin, mask);
}

int ScintillaEdit::marginMaskN(int margin) const {
    return send(SCI_GETMARGINMASKN, margin, 0);
}

void ScintillaEdit::setMarginSensitiveN(int margin, bool sensitive) {
    send(SCI_SETMARGINSENSITIVEN, margin, sensitive);
}

bool ScintillaEdit::marginSensitiveN(int margin) const {
    return send(SCI_GETMARGINSENSITIVEN, margin, 0);
}

void ScintillaEdit::setMarginCursorN(int margin, int cursor) {
    send(SCI_SETMARGINCURSORN, margin, cursor);
}

int ScintillaEdit::marginCursorN(int margin) const {
    return send(SCI_GETMARGINCURSORN, margin, 0);
}

void ScintillaEdit::styleClearAll() {
    send(SCI_STYLECLEARALL, 0, 0);
}

void ScintillaEdit::styleSetFore(int style, int fore) {
    send(SCI_STYLESETFORE, style, fore);
}

void ScintillaEdit::styleSetBack(int style, int back) {
    send(SCI_STYLESETBACK, style, back);
}

void ScintillaEdit::styleSetBold(int style, bool bold) {
    send(SCI_STYLESETBOLD, style, bold);
}

void ScintillaEdit::styleSetItalic(int style, bool italic) {
    send(SCI_STYLESETITALIC, style, italic);
}

void ScintillaEdit::styleSetSize(int style, int sizePoints) {
    send(SCI_STYLESETSIZE, style, sizePoints);
}

void ScintillaEdit::styleSetFont(int style, const char * fontName) {
    send(SCI_STYLESETFONT, style, (sptr_t)fontName);
}

void ScintillaEdit::styleSetEOLFilled(int style, bool filled) {
    send(SCI_STYLESETEOLFILLED, style, filled);
}

void ScintillaEdit::styleResetDefault() {
    send(SCI_STYLERESETDEFAULT, 0, 0);
}

void ScintillaEdit::styleSetUnderline(int style, bool underline) {
    send(SCI_STYLESETUNDERLINE, style, underline);
}

int ScintillaEdit::styleFore(int style) const {
    return send(SCI_STYLEGETFORE, style, 0);
}

int ScintillaEdit::styleBack(int style) const {
    return send(SCI_STYLEGETBACK, style, 0);
}

bool ScintillaEdit::styleBold(int style) const {
    return send(SCI_STYLEGETBOLD, style, 0);
}

bool ScintillaEdit::styleItalic(int style) const {
    return send(SCI_STYLEGETITALIC, style, 0);
}

int ScintillaEdit::styleSize(int style) const {
    return send(SCI_STYLEGETSIZE, style, 0);
}

QByteArray ScintillaEdit::styleGetFont(int style) {
    return TextReturner(SCI_STYLEGETFONT, style);
}

bool ScintillaEdit::styleEOLFilled(int style) const {
    return send(SCI_STYLEGETEOLFILLED, style, 0);
}

bool ScintillaEdit::styleUnderline(int style) const {
    return send(SCI_STYLEGETUNDERLINE, style, 0);
}

int ScintillaEdit::styleCase(int style) const {
    return send(SCI_STYLEGETCASE, style, 0);
}

int ScintillaEdit::styleCharacterSet(int style) const {
    return send(SCI_STYLEGETCHARACTERSET, style, 0);
}

bool ScintillaEdit::styleVisible(int style) const {
    return send(SCI_STYLEGETVISIBLE, style, 0);
}

bool ScintillaEdit::styleChangeable(int style) const {
    return send(SCI_STYLEGETCHANGEABLE, style, 0);
}

bool ScintillaEdit::styleHotSpot(int style) const {
    return send(SCI_STYLEGETHOTSPOT, style, 0);
}

void ScintillaEdit::styleSetCase(int style, int caseForce) {
    send(SCI_STYLESETCASE, style, caseForce);
}

void ScintillaEdit::styleSetSizeFractional(int style, int caseForce) {
    send(SCI_STYLESETSIZEFRACTIONAL, style, caseForce);
}

int ScintillaEdit::styleSizeFractional(int style) const {
    return send(SCI_STYLEGETSIZEFRACTIONAL, style, 0);
}

void ScintillaEdit::styleSetWeight(int style, int weight) {
    send(SCI_STYLESETWEIGHT, style, weight);
}

int ScintillaEdit::styleWeight(int style) const {
    return send(SCI_STYLEGETWEIGHT, style, 0);
}

void ScintillaEdit::styleSetCharacterSet(int style, int characterSet) {
    send(SCI_STYLESETCHARACTERSET, style, characterSet);
}

void ScintillaEdit::styleSetHotSpot(int style, bool hotspot) {
    send(SCI_STYLESETHOTSPOT, style, hotspot);
}

void ScintillaEdit::setSelFore(bool useSetting, int fore) {
    send(SCI_SETSELFORE, useSetting, fore);
}

void ScintillaEdit::setSelBack(bool useSetting, int back) {
    send(SCI_SETSELBACK, useSetting, back);
}

int ScintillaEdit::selAlpha() const {
    return send(SCI_GETSELALPHA, 0, 0);
}

void ScintillaEdit::setSelAlpha(int alpha) {
    send(SCI_SETSELALPHA, alpha, 0);
}

bool ScintillaEdit::selEOLFilled() const {
    return send(SCI_GETSELEOLFILLED, 0, 0);
}

void ScintillaEdit::setSelEOLFilled(bool filled) {
    send(SCI_SETSELEOLFILLED, filled, 0);
}

void ScintillaEdit::setCaretFore(int fore) {
    send(SCI_SETCARETFORE, fore, 0);
}

void ScintillaEdit::assignCmdKey(int km, int msg) {
    send(SCI_ASSIGNCMDKEY, km, msg);
}

void ScintillaEdit::clearCmdKey(int km) {
    send(SCI_CLEARCMDKEY, km, 0);
}

void ScintillaEdit::clearAllCmdKeys() {
    send(SCI_CLEARALLCMDKEYS, 0, 0);
}

void ScintillaEdit::setStylingEx(int length, const char * styles) {
    send(SCI_SETSTYLINGEX, length, (sptr_t)styles);
}

void ScintillaEdit::styleSetVisible(int style, bool visible) {
    send(SCI_STYLESETVISIBLE, style, visible);
}

int ScintillaEdit::caretPeriod() const {
    return send(SCI_GETCARETPERIOD, 0, 0);
}

void ScintillaEdit::setCaretPeriod(int periodMilliseconds) {
    send(SCI_SETCARETPERIOD, periodMilliseconds, 0);
}

void ScintillaEdit::setWordChars(const char * characters) {
    send(SCI_SETWORDCHARS, 0, (sptr_t)characters);
}

void ScintillaEdit::beginUndoAction() {
    send(SCI_BEGINUNDOACTION, 0, 0);
}

void ScintillaEdit::endUndoAction() {
    send(SCI_ENDUNDOACTION, 0, 0);
}

void ScintillaEdit::indicSetStyle(int indic, int style) {
    send(SCI_INDICSETSTYLE, indic, style);
}

int ScintillaEdit::indicStyle(int indic) const {
    return send(SCI_INDICGETSTYLE, indic, 0);
}

void ScintillaEdit::indicSetFore(int indic, int fore) {
    send(SCI_INDICSETFORE, indic, fore);
}

int ScintillaEdit::indicFore(int indic) const {
    return send(SCI_INDICGETFORE, indic, 0);
}

void ScintillaEdit::indicSetUnder(int indic, bool under) {
    send(SCI_INDICSETUNDER, indic, under);
}

bool ScintillaEdit::indicUnder(int indic) const {
    return send(SCI_INDICGETUNDER, indic, 0);
}

void ScintillaEdit::setWhitespaceFore(bool useSetting, int fore) {
    send(SCI_SETWHITESPACEFORE, useSetting, fore);
}

void ScintillaEdit::setWhitespaceBack(bool useSetting, int back) {
    send(SCI_SETWHITESPACEBACK, useSetting, back);
}

void ScintillaEdit::setWhitespaceSize(int size) {
    send(SCI_SETWHITESPACESIZE, size, 0);
}

int ScintillaEdit::whitespaceSize() const {
    return send(SCI_GETWHITESPACESIZE, 0, 0);
}

void ScintillaEdit::setStyleBits(int bits) {
    send(SCI_SETSTYLEBITS, bits, 0);
}

int ScintillaEdit::styleBits() const {
    return send(SCI_GETSTYLEBITS, 0, 0);
}

void ScintillaEdit::setLineState(int line, int state) {
    send(SCI_SETLINESTATE, line, state);
}

int ScintillaEdit::lineState(int line) const {
    return send(SCI_GETLINESTATE, line, 0);
}

int ScintillaEdit::maxLineState() const {
    return send(SCI_GETMAXLINESTATE, 0, 0);
}

bool ScintillaEdit::caretLineVisible() const {
    return send(SCI_GETCARETLINEVISIBLE, 0, 0);
}

void ScintillaEdit::setCaretLineVisible(bool show) {
    send(SCI_SETCARETLINEVISIBLE, show, 0);
}

int ScintillaEdit::caretLineBack() const {
    return send(SCI_GETCARETLINEBACK, 0, 0);
}

void ScintillaEdit::setCaretLineBack(int back) {
    send(SCI_SETCARETLINEBACK, back, 0);
}

void ScintillaEdit::styleSetChangeable(int style, bool changeable) {
    send(SCI_STYLESETCHANGEABLE, style, changeable);
}

void ScintillaEdit::autoCShow(int lenEntered, const char * itemList) {
    send(SCI_AUTOCSHOW, lenEntered, (sptr_t)itemList);
}

void ScintillaEdit::autoCCancel() {
    send(SCI_AUTOCCANCEL, 0, 0);
}

bool ScintillaEdit::autoCActive() {
    return send(SCI_AUTOCACTIVE, 0, 0);
}

int ScintillaEdit::autoCPosStart() {
    return send(SCI_AUTOCPOSSTART, 0, 0);
}

void ScintillaEdit::autoCComplete() {
    send(SCI_AUTOCCOMPLETE, 0, 0);
}

void ScintillaEdit::autoCStops(const char * characterSet) {
    send(SCI_AUTOCSTOPS, 0, (sptr_t)characterSet);
}

void ScintillaEdit::autoCSetSeparator(int separatorCharacter) {
    send(SCI_AUTOCSETSEPARATOR, separatorCharacter, 0);
}

int ScintillaEdit::autoCSeparator() const {
    return send(SCI_AUTOCGETSEPARATOR, 0, 0);
}

void ScintillaEdit::autoCSelect(const char * text) {
    send(SCI_AUTOCSELECT, 0, (sptr_t)text);
}

void ScintillaEdit::autoCSetCancelAtStart(bool cancel) {
    send(SCI_AUTOCSETCANCELATSTART, cancel, 0);
}

bool ScintillaEdit::autoCCancelAtStart() const {
    return send(SCI_AUTOCGETCANCELATSTART, 0, 0);
}

void ScintillaEdit::autoCSetFillUps(const char * characterSet) {
    send(SCI_AUTOCSETFILLUPS, 0, (sptr_t)characterSet);
}

void ScintillaEdit::autoCSetChooseSingle(bool chooseSingle) {
    send(SCI_AUTOCSETCHOOSESINGLE, chooseSingle, 0);
}

bool ScintillaEdit::autoCChooseSingle() const {
    return send(SCI_AUTOCGETCHOOSESINGLE, 0, 0);
}

void ScintillaEdit::autoCSetIgnoreCase(bool ignoreCase) {
    send(SCI_AUTOCSETIGNORECASE, ignoreCase, 0);
}

bool ScintillaEdit::autoCIgnoreCase() const {
    return send(SCI_AUTOCGETIGNORECASE, 0, 0);
}

void ScintillaEdit::userListShow(int listType, const char * itemList) {
    send(SCI_USERLISTSHOW, listType, (sptr_t)itemList);
}

void ScintillaEdit::autoCSetAutoHide(bool autoHide) {
    send(SCI_AUTOCSETAUTOHIDE, autoHide, 0);
}

bool ScintillaEdit::autoCAutoHide() const {
    return send(SCI_AUTOCGETAUTOHIDE, 0, 0);
}

void ScintillaEdit::autoCSetDropRestOfWord(bool dropRestOfWord) {
    send(SCI_AUTOCSETDROPRESTOFWORD, dropRestOfWord, 0);
}

bool ScintillaEdit::autoCDropRestOfWord() const {
    return send(SCI_AUTOCGETDROPRESTOFWORD, 0, 0);
}

void ScintillaEdit::registerImage(int type, const char * xpmData) {
    send(SCI_REGISTERIMAGE, type, (sptr_t)xpmData);
}

void ScintillaEdit::clearRegisteredImages() {
    send(SCI_CLEARREGISTEREDIMAGES, 0, 0);
}

int ScintillaEdit::autoCTypeSeparator() const {
    return send(SCI_AUTOCGETTYPESEPARATOR, 0, 0);
}

void ScintillaEdit::autoCSetTypeSeparator(int separatorCharacter) {
    send(SCI_AUTOCSETTYPESEPARATOR, separatorCharacter, 0);
}

void ScintillaEdit::autoCSetMaxWidth(int characterCount) {
    send(SCI_AUTOCSETMAXWIDTH, characterCount, 0);
}

int ScintillaEdit::autoCMaxWidth() const {
    return send(SCI_AUTOCGETMAXWIDTH, 0, 0);
}

void ScintillaEdit::autoCSetMaxHeight(int rowCount) {
    send(SCI_AUTOCSETMAXHEIGHT, rowCount, 0);
}

int ScintillaEdit::autoCMaxHeight() const {
    return send(SCI_AUTOCGETMAXHEIGHT, 0, 0);
}

void ScintillaEdit::setIndent(int indentSize) {
    send(SCI_SETINDENT, indentSize, 0);
}

int ScintillaEdit::indent() const {
    return send(SCI_GETINDENT, 0, 0);
}

void ScintillaEdit::setUseTabs(bool useTabs) {
    send(SCI_SETUSETABS, useTabs, 0);
}

bool ScintillaEdit::useTabs() const {
    return send(SCI_GETUSETABS, 0, 0);
}

void ScintillaEdit::setLineIndentation(int line, int indentSize) {
    send(SCI_SETLINEINDENTATION, line, indentSize);
}

int ScintillaEdit::lineIndentation(int line) const {
    return send(SCI_GETLINEINDENTATION, line, 0);
}

int ScintillaEdit::lineIndentPosition(int line) const {
    return send(SCI_GETLINEINDENTPOSITION, line, 0);
}

int ScintillaEdit::column(int pos) const {
    return send(SCI_GETCOLUMN, pos, 0);
}

int ScintillaEdit::countCharacters(int startPos, int endPos) {
    return send(SCI_COUNTCHARACTERS, startPos, endPos);
}

void ScintillaEdit::setHScrollBar(bool show) {
    send(SCI_SETHSCROLLBAR, show, 0);
}

bool ScintillaEdit::hScrollBar() const {
    return send(SCI_GETHSCROLLBAR, 0, 0);
}

void ScintillaEdit::setIndentationGuides(int indentView) {
    send(SCI_SETINDENTATIONGUIDES, indentView, 0);
}

int ScintillaEdit::indentationGuides() const {
    return send(SCI_GETINDENTATIONGUIDES, 0, 0);
}

void ScintillaEdit::setHighlightGuide(int column) {
    send(SCI_SETHIGHLIGHTGUIDE, column, 0);
}

int ScintillaEdit::highlightGuide() const {
    return send(SCI_GETHIGHLIGHTGUIDE, 0, 0);
}

int ScintillaEdit::lineEndPosition(int line) const {
    return send(SCI_GETLINEENDPOSITION, line, 0);
}

int ScintillaEdit::codePage() const {
    return send(SCI_GETCODEPAGE, 0, 0);
}

int ScintillaEdit::caretFore() const {
    return send(SCI_GETCARETFORE, 0, 0);
}

bool ScintillaEdit::readOnly() const {
    return send(SCI_GETREADONLY, 0, 0);
}

void ScintillaEdit::setCurrentPos(int pos) {
    send(SCI_SETCURRENTPOS, pos, 0);
}

void ScintillaEdit::setSelectionStart(int pos) {
    send(SCI_SETSELECTIONSTART, pos, 0);
}

int ScintillaEdit::selectionStart() const {
    return send(SCI_GETSELECTIONSTART, 0, 0);
}

void ScintillaEdit::setSelectionEnd(int pos) {
    send(SCI_SETSELECTIONEND, pos, 0);
}

int ScintillaEdit::selectionEnd() const {
    return send(SCI_GETSELECTIONEND, 0, 0);
}

void ScintillaEdit::setEmptySelection(int pos) {
    send(SCI_SETEMPTYSELECTION, pos, 0);
}

void ScintillaEdit::setPrintMagnification(int magnification) {
    send(SCI_SETPRINTMAGNIFICATION, magnification, 0);
}

int ScintillaEdit::printMagnification() const {
    return send(SCI_GETPRINTMAGNIFICATION, 0, 0);
}

void ScintillaEdit::setPrintColourMode(int mode) {
    send(SCI_SETPRINTCOLOURMODE, mode, 0);
}

int ScintillaEdit::printColourMode() const {
    return send(SCI_GETPRINTCOLOURMODE, 0, 0);
}

int ScintillaEdit::firstVisibleLine() const {
    return send(SCI_GETFIRSTVISIBLELINE, 0, 0);
}

QByteArray ScintillaEdit::getLine(int line) {
    return TextReturner(SCI_GETLINE, line);
}

int ScintillaEdit::lineCount() const {
    return send(SCI_GETLINECOUNT, 0, 0);
}

void ScintillaEdit::setMarginLeft(int pixelWidth) {
    send(SCI_SETMARGINLEFT, 0, pixelWidth);
}

int ScintillaEdit::marginLeft() const {
    return send(SCI_GETMARGINLEFT, 0, 0);
}

void ScintillaEdit::setMarginRight(int pixelWidth) {
    send(SCI_SETMARGINRIGHT, 0, pixelWidth);
}

int ScintillaEdit::marginRight() const {
    return send(SCI_GETMARGINRIGHT, 0, 0);
}

bool ScintillaEdit::modify() const {
    return send(SCI_GETMODIFY, 0, 0);
}

void ScintillaEdit::setSel(int start, int end) {
    send(SCI_SETSEL, start, end);
}

QByteArray ScintillaEdit::getSelText() {
    return TextReturner(SCI_GETSELTEXT, 0);
}

void ScintillaEdit::hideSelection(bool normal) {
    send(SCI_HIDESELECTION, normal, 0);
}

int ScintillaEdit::pointXFromPosition(int pos) {
    return send(SCI_POINTXFROMPOSITION, 0, pos);
}

int ScintillaEdit::pointYFromPosition(int pos) {
    return send(SCI_POINTYFROMPOSITION, 0, pos);
}

int ScintillaEdit::lineFromPosition(int pos) {
    return send(SCI_LINEFROMPOSITION, pos, 0);
}

int ScintillaEdit::positionFromLine(int line) {
    return send(SCI_POSITIONFROMLINE, line, 0);
}

void ScintillaEdit::lineScroll(int columns, int lines) {
    send(SCI_LINESCROLL, columns, lines);
}

void ScintillaEdit::scrollCaret() {
    send(SCI_SCROLLCARET, 0, 0);
}

void ScintillaEdit::replaceSel(const char * text) {
    send(SCI_REPLACESEL, 0, (sptr_t)text);
}

void ScintillaEdit::setReadOnly(bool readOnly) {
    send(SCI_SETREADONLY, readOnly, 0);
}

void ScintillaEdit::null() {
    send(SCI_NULL, 0, 0);
}

bool ScintillaEdit::canPaste() {
    return send(SCI_CANPASTE, 0, 0);
}

bool ScintillaEdit::canUndo() {
    return send(SCI_CANUNDO, 0, 0);
}

void ScintillaEdit::emptyUndoBuffer() {
    send(SCI_EMPTYUNDOBUFFER, 0, 0);
}

void ScintillaEdit::undo() {
    send(SCI_UNDO, 0, 0);
}

void ScintillaEdit::cut() {
    send(SCI_CUT, 0, 0);
}

void ScintillaEdit::copy() {
    send(SCI_COPY, 0, 0);
}

void ScintillaEdit::paste() {
    send(SCI_PASTE, 0, 0);
}

void ScintillaEdit::clear() {
    send(SCI_CLEAR, 0, 0);
}

void ScintillaEdit::setText(const char * text) {
    send(SCI_SETTEXT, 0, (sptr_t)text);
}

QByteArray ScintillaEdit::getText(int length) {
    return TextReturner(SCI_GETTEXT, length);
}

int ScintillaEdit::textLength() const {
    return send(SCI_GETTEXTLENGTH, 0, 0);
}

int ScintillaEdit::directFunction() const {
    return send(SCI_GETDIRECTFUNCTION, 0, 0);
}

int ScintillaEdit::directPointer() const {
    return send(SCI_GETDIRECTPOINTER, 0, 0);
}

void ScintillaEdit::setOvertype(bool overtype) {
    send(SCI_SETOVERTYPE, overtype, 0);
}

bool ScintillaEdit::overtype() const {
    return send(SCI_GETOVERTYPE, 0, 0);
}

void ScintillaEdit::setCaretWidth(int pixelWidth) {
    send(SCI_SETCARETWIDTH, pixelWidth, 0);
}

int ScintillaEdit::caretWidth() const {
    return send(SCI_GETCARETWIDTH, 0, 0);
}

void ScintillaEdit::setTargetStart(int pos) {
    send(SCI_SETTARGETSTART, pos, 0);
}

int ScintillaEdit::targetStart() const {
    return send(SCI_GETTARGETSTART, 0, 0);
}

void ScintillaEdit::setTargetEnd(int pos) {
    send(SCI_SETTARGETEND, pos, 0);
}

int ScintillaEdit::targetEnd() const {
    return send(SCI_GETTARGETEND, 0, 0);
}

int ScintillaEdit::replaceTarget(int length, const char * text) {
    return send(SCI_REPLACETARGET, length, (sptr_t)text);
}

int ScintillaEdit::replaceTargetRE(int length, const char * text) {
    return send(SCI_REPLACETARGETRE, length, (sptr_t)text);
}

int ScintillaEdit::searchInTarget(int length, const char * text) {
    return send(SCI_SEARCHINTARGET, length, (sptr_t)text);
}

void ScintillaEdit::setSearchFlags(int flags) {
    send(SCI_SETSEARCHFLAGS, flags, 0);
}

int ScintillaEdit::searchFlags() const {
    return send(SCI_GETSEARCHFLAGS, 0, 0);
}

void ScintillaEdit::callTipShow(int pos, const char * definition) {
    send(SCI_CALLTIPSHOW, pos, (sptr_t)definition);
}

void ScintillaEdit::callTipCancel() {
    send(SCI_CALLTIPCANCEL, 0, 0);
}

bool ScintillaEdit::callTipActive() {
    return send(SCI_CALLTIPACTIVE, 0, 0);
}

int ScintillaEdit::callTipPosStart() {
    return send(SCI_CALLTIPPOSSTART, 0, 0);
}

void ScintillaEdit::callTipSetHlt(int start, int end) {
    send(SCI_CALLTIPSETHLT, start, end);
}

void ScintillaEdit::callTipSetBack(int back) {
    send(SCI_CALLTIPSETBACK, back, 0);
}

void ScintillaEdit::callTipSetFore(int fore) {
    send(SCI_CALLTIPSETFORE, fore, 0);
}

void ScintillaEdit::callTipSetForeHlt(int fore) {
    send(SCI_CALLTIPSETFOREHLT, fore, 0);
}

void ScintillaEdit::callTipUseStyle(int tabSize) {
    send(SCI_CALLTIPUSESTYLE, tabSize, 0);
}

void ScintillaEdit::callTipSetPosition(bool above) {
    send(SCI_CALLTIPSETPOSITION, above, 0);
}

int ScintillaEdit::visibleFromDocLine(int line) {
    return send(SCI_VISIBLEFROMDOCLINE, line, 0);
}

int ScintillaEdit::docLineFromVisible(int lineDisplay) {
    return send(SCI_DOCLINEFROMVISIBLE, lineDisplay, 0);
}

int ScintillaEdit::wrapCount(int line) {
    return send(SCI_WRAPCOUNT, line, 0);
}

void ScintillaEdit::setFoldLevel(int line, int level) {
    send(SCI_SETFOLDLEVEL, line, level);
}

int ScintillaEdit::foldLevel(int line) const {
    return send(SCI_GETFOLDLEVEL, line, 0);
}

int ScintillaEdit::lastChild(int line, int level) const {
    return send(SCI_GETLASTCHILD, line, level);
}

int ScintillaEdit::foldParent(int line) const {
    return send(SCI_GETFOLDPARENT, line, 0);
}

void ScintillaEdit::showLines(int lineStart, int lineEnd) {
    send(SCI_SHOWLINES, lineStart, lineEnd);
}

void ScintillaEdit::hideLines(int lineStart, int lineEnd) {
    send(SCI_HIDELINES, lineStart, lineEnd);
}

bool ScintillaEdit::lineVisible(int line) const {
    return send(SCI_GETLINEVISIBLE, line, 0);
}

bool ScintillaEdit::allLinesVisible() const {
    return send(SCI_GETALLLINESVISIBLE, 0, 0);
}

void ScintillaEdit::setFoldExpanded(int line, bool expanded) {
    send(SCI_SETFOLDEXPANDED, line, expanded);
}

bool ScintillaEdit::foldExpanded(int line) const {
    return send(SCI_GETFOLDEXPANDED, line, 0);
}

void ScintillaEdit::toggleFold(int line) {
    send(SCI_TOGGLEFOLD, line, 0);
}

void ScintillaEdit::ensureVisible(int line) {
    send(SCI_ENSUREVISIBLE, line, 0);
}

void ScintillaEdit::setFoldFlags(int flags) {
    send(SCI_SETFOLDFLAGS, flags, 0);
}

void ScintillaEdit::ensureVisibleEnforcePolicy(int line) {
    send(SCI_ENSUREVISIBLEENFORCEPOLICY, line, 0);
}

void ScintillaEdit::setTabIndents(bool tabIndents) {
    send(SCI_SETTABINDENTS, tabIndents, 0);
}

bool ScintillaEdit::tabIndents() const {
    return send(SCI_GETTABINDENTS, 0, 0);
}

void ScintillaEdit::setBackSpaceUnIndents(bool bsUnIndents) {
    send(SCI_SETBACKSPACEUNINDENTS, bsUnIndents, 0);
}

bool ScintillaEdit::backSpaceUnIndents() const {
    return send(SCI_GETBACKSPACEUNINDENTS, 0, 0);
}

void ScintillaEdit::setMouseDwellTime(int periodMilliseconds) {
    send(SCI_SETMOUSEDWELLTIME, periodMilliseconds, 0);
}

int ScintillaEdit::mouseDwellTime() const {
    return send(SCI_GETMOUSEDWELLTIME, 0, 0);
}

int ScintillaEdit::wordStartPosition(int pos, bool onlyWordCharacters) {
    return send(SCI_WORDSTARTPOSITION, pos, onlyWordCharacters);
}

int ScintillaEdit::wordEndPosition(int pos, bool onlyWordCharacters) {
    return send(SCI_WORDENDPOSITION, pos, onlyWordCharacters);
}

void ScintillaEdit::setWrapMode(int mode) {
    send(SCI_SETWRAPMODE, mode, 0);
}

int ScintillaEdit::wrapMode() const {
    return send(SCI_GETWRAPMODE, 0, 0);
}

void ScintillaEdit::setWrapVisualFlags(int wrapVisualFlags) {
    send(SCI_SETWRAPVISUALFLAGS, wrapVisualFlags, 0);
}

int ScintillaEdit::wrapVisualFlags() const {
    return send(SCI_GETWRAPVISUALFLAGS, 0, 0);
}

void ScintillaEdit::setWrapVisualFlagsLocation(int wrapVisualFlagsLocation) {
    send(SCI_SETWRAPVISUALFLAGSLOCATION, wrapVisualFlagsLocation, 0);
}

int ScintillaEdit::wrapVisualFlagsLocation() const {
    return send(SCI_GETWRAPVISUALFLAGSLOCATION, 0, 0);
}

void ScintillaEdit::setWrapStartIndent(int indent) {
    send(SCI_SETWRAPSTARTINDENT, indent, 0);
}

int ScintillaEdit::wrapStartIndent() const {
    return send(SCI_GETWRAPSTARTINDENT, 0, 0);
}

void ScintillaEdit::setWrapIndentMode(int mode) {
    send(SCI_SETWRAPINDENTMODE, mode, 0);
}

int ScintillaEdit::wrapIndentMode() const {
    return send(SCI_GETWRAPINDENTMODE, 0, 0);
}

void ScintillaEdit::setLayoutCache(int mode) {
    send(SCI_SETLAYOUTCACHE, mode, 0);
}

int ScintillaEdit::layoutCache() const {
    return send(SCI_GETLAYOUTCACHE, 0, 0);
}

void ScintillaEdit::setScrollWidth(int pixelWidth) {
    send(SCI_SETSCROLLWIDTH, pixelWidth, 0);
}

int ScintillaEdit::scrollWidth() const {
    return send(SCI_GETSCROLLWIDTH, 0, 0);
}

void ScintillaEdit::setScrollWidthTracking(bool tracking) {
    send(SCI_SETSCROLLWIDTHTRACKING, tracking, 0);
}

bool ScintillaEdit::scrollWidthTracking() const {
    return send(SCI_GETSCROLLWIDTHTRACKING, 0, 0);
}

int ScintillaEdit::textWidth(int style, const char * text) {
    return send(SCI_TEXTWIDTH, style, (sptr_t)text);
}

void ScintillaEdit::setEndAtLastLine(bool endAtLastLine) {
    send(SCI_SETENDATLASTLINE, endAtLastLine, 0);
}

bool ScintillaEdit::endAtLastLine() const {
    return send(SCI_GETENDATLASTLINE, 0, 0);
}

int ScintillaEdit::textHeight(int line) {
    return send(SCI_TEXTHEIGHT, line, 0);
}

void ScintillaEdit::setVScrollBar(bool show) {
    send(SCI_SETVSCROLLBAR, show, 0);
}

bool ScintillaEdit::vScrollBar() const {
    return send(SCI_GETVSCROLLBAR, 0, 0);
}

void ScintillaEdit::appendText(int length, const char * text) {
    send(SCI_APPENDTEXT, length, (sptr_t)text);
}

bool ScintillaEdit::twoPhaseDraw() const {
    return send(SCI_GETTWOPHASEDRAW, 0, 0);
}

void ScintillaEdit::setTwoPhaseDraw(bool twoPhase) {
    send(SCI_SETTWOPHASEDRAW, twoPhase, 0);
}

void ScintillaEdit::setFontQuality(int fontQuality) {
    send(SCI_SETFONTQUALITY, fontQuality, 0);
}

int ScintillaEdit::fontQuality() const {
    return send(SCI_GETFONTQUALITY, 0, 0);
}

void ScintillaEdit::setFirstVisibleLine(int lineDisplay) {
    send(SCI_SETFIRSTVISIBLELINE, lineDisplay, 0);
}

void ScintillaEdit::setMultiPaste(int multiPaste) {
    send(SCI_SETMULTIPASTE, multiPaste, 0);
}

int ScintillaEdit::multiPaste() const {
    return send(SCI_GETMULTIPASTE, 0, 0);
}

QByteArray ScintillaEdit::getTag(int tagNumber) {
    return TextReturner(SCI_GETTAG, tagNumber);
}

void ScintillaEdit::targetFromSelection() {
    send(SCI_TARGETFROMSELECTION, 0, 0);
}

void ScintillaEdit::linesJoin() {
    send(SCI_LINESJOIN, 0, 0);
}

void ScintillaEdit::linesSplit(int pixelWidth) {
    send(SCI_LINESSPLIT, pixelWidth, 0);
}

void ScintillaEdit::setFoldMarginColour(bool useSetting, int back) {
    send(SCI_SETFOLDMARGINCOLOUR, useSetting, back);
}

void ScintillaEdit::setFoldMarginHiColour(bool useSetting, int fore) {
    send(SCI_SETFOLDMARGINHICOLOUR, useSetting, fore);
}

void ScintillaEdit::lineDown() {
    send(SCI_LINEDOWN, 0, 0);
}

void ScintillaEdit::lineDownExtend() {
    send(SCI_LINEDOWNEXTEND, 0, 0);
}

void ScintillaEdit::lineUp() {
    send(SCI_LINEUP, 0, 0);
}

void ScintillaEdit::lineUpExtend() {
    send(SCI_LINEUPEXTEND, 0, 0);
}

void ScintillaEdit::charLeft() {
    send(SCI_CHARLEFT, 0, 0);
}

void ScintillaEdit::charLeftExtend() {
    send(SCI_CHARLEFTEXTEND, 0, 0);
}

void ScintillaEdit::charRight() {
    send(SCI_CHARRIGHT, 0, 0);
}

void ScintillaEdit::charRightExtend() {
    send(SCI_CHARRIGHTEXTEND, 0, 0);
}

void ScintillaEdit::wordLeft() {
    send(SCI_WORDLEFT, 0, 0);
}

void ScintillaEdit::wordLeftExtend() {
    send(SCI_WORDLEFTEXTEND, 0, 0);
}

void ScintillaEdit::wordRight() {
    send(SCI_WORDRIGHT, 0, 0);
}

void ScintillaEdit::wordRightExtend() {
    send(SCI_WORDRIGHTEXTEND, 0, 0);
}

void ScintillaEdit::home() {
    send(SCI_HOME, 0, 0);
}

void ScintillaEdit::homeExtend() {
    send(SCI_HOMEEXTEND, 0, 0);
}

void ScintillaEdit::lineEnd() {
    send(SCI_LINEEND, 0, 0);
}

void ScintillaEdit::lineEndExtend() {
    send(SCI_LINEENDEXTEND, 0, 0);
}

void ScintillaEdit::documentStart() {
    send(SCI_DOCUMENTSTART, 0, 0);
}

void ScintillaEdit::documentStartExtend() {
    send(SCI_DOCUMENTSTARTEXTEND, 0, 0);
}

void ScintillaEdit::documentEnd() {
    send(SCI_DOCUMENTEND, 0, 0);
}

void ScintillaEdit::documentEndExtend() {
    send(SCI_DOCUMENTENDEXTEND, 0, 0);
}

void ScintillaEdit::pageUp() {
    send(SCI_PAGEUP, 0, 0);
}

void ScintillaEdit::pageUpExtend() {
    send(SCI_PAGEUPEXTEND, 0, 0);
}

void ScintillaEdit::pageDown() {
    send(SCI_PAGEDOWN, 0, 0);
}

void ScintillaEdit::pageDownExtend() {
    send(SCI_PAGEDOWNEXTEND, 0, 0);
}

void ScintillaEdit::editToggleOvertype() {
    send(SCI_EDITTOGGLEOVERTYPE, 0, 0);
}

void ScintillaEdit::cancel() {
    send(SCI_CANCEL, 0, 0);
}

void ScintillaEdit::deleteBack() {
    send(SCI_DELETEBACK, 0, 0);
}

void ScintillaEdit::tab() {
    send(SCI_TAB, 0, 0);
}

void ScintillaEdit::backTab() {
    send(SCI_BACKTAB, 0, 0);
}

void ScintillaEdit::newLine() {
    send(SCI_NEWLINE, 0, 0);
}

void ScintillaEdit::formFeed() {
    send(SCI_FORMFEED, 0, 0);
}

void ScintillaEdit::vCHome() {
    send(SCI_VCHOME, 0, 0);
}

void ScintillaEdit::vCHomeExtend() {
    send(SCI_VCHOMEEXTEND, 0, 0);
}

void ScintillaEdit::zoomIn() {
    send(SCI_ZOOMIN, 0, 0);
}

void ScintillaEdit::zoomOut() {
    send(SCI_ZOOMOUT, 0, 0);
}

void ScintillaEdit::delWordLeft() {
    send(SCI_DELWORDLEFT, 0, 0);
}

void ScintillaEdit::delWordRight() {
    send(SCI_DELWORDRIGHT, 0, 0);
}

void ScintillaEdit::delWordRightEnd() {
    send(SCI_DELWORDRIGHTEND, 0, 0);
}

void ScintillaEdit::lineCut() {
    send(SCI_LINECUT, 0, 0);
}

void ScintillaEdit::lineDelete() {
    send(SCI_LINEDELETE, 0, 0);
}

void ScintillaEdit::lineTranspose() {
    send(SCI_LINETRANSPOSE, 0, 0);
}

void ScintillaEdit::lineDuplicate() {
    send(SCI_LINEDUPLICATE, 0, 0);
}

void ScintillaEdit::lowerCase() {
    send(SCI_LOWERCASE, 0, 0);
}

void ScintillaEdit::upperCase() {
    send(SCI_UPPERCASE, 0, 0);
}

void ScintillaEdit::lineScrollDown() {
    send(SCI_LINESCROLLDOWN, 0, 0);
}

void ScintillaEdit::lineScrollUp() {
    send(SCI_LINESCROLLUP, 0, 0);
}

void ScintillaEdit::deleteBackNotLine() {
    send(SCI_DELETEBACKNOTLINE, 0, 0);
}

void ScintillaEdit::homeDisplay() {
    send(SCI_HOMEDISPLAY, 0, 0);
}

void ScintillaEdit::homeDisplayExtend() {
    send(SCI_HOMEDISPLAYEXTEND, 0, 0);
}

void ScintillaEdit::lineEndDisplay() {
    send(SCI_LINEENDDISPLAY, 0, 0);
}

void ScintillaEdit::lineEndDisplayExtend() {
    send(SCI_LINEENDDISPLAYEXTEND, 0, 0);
}

void ScintillaEdit::homeWrap() {
    send(SCI_HOMEWRAP, 0, 0);
}

void ScintillaEdit::homeWrapExtend() {
    send(SCI_HOMEWRAPEXTEND, 0, 0);
}

void ScintillaEdit::lineEndWrap() {
    send(SCI_LINEENDWRAP, 0, 0);
}

void ScintillaEdit::lineEndWrapExtend() {
    send(SCI_LINEENDWRAPEXTEND, 0, 0);
}

void ScintillaEdit::vCHomeWrap() {
    send(SCI_VCHOMEWRAP, 0, 0);
}

void ScintillaEdit::vCHomeWrapExtend() {
    send(SCI_VCHOMEWRAPEXTEND, 0, 0);
}

void ScintillaEdit::lineCopy() {
    send(SCI_LINECOPY, 0, 0);
}

void ScintillaEdit::moveCaretInsideView() {
    send(SCI_MOVECARETINSIDEVIEW, 0, 0);
}

int ScintillaEdit::lineLength(int line) {
    return send(SCI_LINELENGTH, line, 0);
}

void ScintillaEdit::braceHighlight(int pos1, int pos2) {
    send(SCI_BRACEHIGHLIGHT, pos1, pos2);
}

void ScintillaEdit::braceHighlightIndicator(bool useBraceHighlightIndicator, int indicator) {
    send(SCI_BRACEHIGHLIGHTINDICATOR, useBraceHighlightIndicator, indicator);
}

void ScintillaEdit::braceBadLight(int pos) {
    send(SCI_BRACEBADLIGHT, pos, 0);
}

void ScintillaEdit::braceBadLightIndicator(bool useBraceBadLightIndicator, int indicator) {
    send(SCI_BRACEBADLIGHTINDICATOR, useBraceBadLightIndicator, indicator);
}

int ScintillaEdit::braceMatch(int pos) {
    return send(SCI_BRACEMATCH, pos, 0);
}

bool ScintillaEdit::viewEOL() const {
    return send(SCI_GETVIEWEOL, 0, 0);
}

void ScintillaEdit::setViewEOL(bool visible) {
    send(SCI_SETVIEWEOL, visible, 0);
}

int ScintillaEdit::docPointer() const {
    return send(SCI_GETDOCPOINTER, 0, 0);
}

void ScintillaEdit::setDocPointer(int pointer) {
    send(SCI_SETDOCPOINTER, 0, pointer);
}

void ScintillaEdit::setModEventMask(int mask) {
    send(SCI_SETMODEVENTMASK, mask, 0);
}

int ScintillaEdit::edgeColumn() const {
    return send(SCI_GETEDGECOLUMN, 0, 0);
}

void ScintillaEdit::setEdgeColumn(int column) {
    send(SCI_SETEDGECOLUMN, column, 0);
}

int ScintillaEdit::edgeMode() const {
    return send(SCI_GETEDGEMODE, 0, 0);
}

void ScintillaEdit::setEdgeMode(int mode) {
    send(SCI_SETEDGEMODE, mode, 0);
}

int ScintillaEdit::edgeColour() const {
    return send(SCI_GETEDGECOLOUR, 0, 0);
}

void ScintillaEdit::setEdgeColour(int edgeColour) {
    send(SCI_SETEDGECOLOUR, edgeColour, 0);
}

void ScintillaEdit::searchAnchor() {
    send(SCI_SEARCHANCHOR, 0, 0);
}

int ScintillaEdit::searchNext(int flags, const char * text) {
    return send(SCI_SEARCHNEXT, flags, (sptr_t)text);
}

int ScintillaEdit::searchPrev(int flags, const char * text) {
    return send(SCI_SEARCHPREV, flags, (sptr_t)text);
}

int ScintillaEdit::linesOnScreen() const {
    return send(SCI_LINESONSCREEN, 0, 0);
}

void ScintillaEdit::usePopUp(bool allowPopUp) {
    send(SCI_USEPOPUP, allowPopUp, 0);
}

bool ScintillaEdit::selectionIsRectangle() const {
    return send(SCI_SELECTIONISRECTANGLE, 0, 0);
}

void ScintillaEdit::setZoom(int zoom) {
    send(SCI_SETZOOM, zoom, 0);
}

int ScintillaEdit::zoom() const {
    return send(SCI_GETZOOM, 0, 0);
}

int ScintillaEdit::createDocument() {
    return send(SCI_CREATEDOCUMENT, 0, 0);
}

void ScintillaEdit::addRefDocument(int doc) {
    send(SCI_ADDREFDOCUMENT, 0, doc);
}

void ScintillaEdit::releaseDocument(int doc) {
    send(SCI_RELEASEDOCUMENT, 0, doc);
}

int ScintillaEdit::modEventMask() const {
    return send(SCI_GETMODEVENTMASK, 0, 0);
}

void ScintillaEdit::setFocus(bool focus) {
    send(SCI_SETFOCUS, focus, 0);
}

bool ScintillaEdit::focus() const {
    return send(SCI_GETFOCUS, 0, 0);
}

void ScintillaEdit::setStatus(int statusCode) {
    send(SCI_SETSTATUS, statusCode, 0);
}

int ScintillaEdit::status() const {
    return send(SCI_GETSTATUS, 0, 0);
}

void ScintillaEdit::setMouseDownCaptures(bool captures) {
    send(SCI_SETMOUSEDOWNCAPTURES, captures, 0);
}

bool ScintillaEdit::mouseDownCaptures() const {
    return send(SCI_GETMOUSEDOWNCAPTURES, 0, 0);
}

void ScintillaEdit::setCursor(int cursorType) {
    send(SCI_SETCURSOR, cursorType, 0);
}

int ScintillaEdit::cursor() const {
    return send(SCI_GETCURSOR, 0, 0);
}

void ScintillaEdit::setControlCharSymbol(int symbol) {
    send(SCI_SETCONTROLCHARSYMBOL, symbol, 0);
}

int ScintillaEdit::controlCharSymbol() const {
    return send(SCI_GETCONTROLCHARSYMBOL, 0, 0);
}

void ScintillaEdit::wordPartLeft() {
    send(SCI_WORDPARTLEFT, 0, 0);
}

void ScintillaEdit::wordPartLeftExtend() {
    send(SCI_WORDPARTLEFTEXTEND, 0, 0);
}

void ScintillaEdit::wordPartRight() {
    send(SCI_WORDPARTRIGHT, 0, 0);
}

void ScintillaEdit::wordPartRightExtend() {
    send(SCI_WORDPARTRIGHTEXTEND, 0, 0);
}

void ScintillaEdit::setVisiblePolicy(int visiblePolicy, int visibleSlop) {
    send(SCI_SETVISIBLEPOLICY, visiblePolicy, visibleSlop);
}

void ScintillaEdit::delLineLeft() {
    send(SCI_DELLINELEFT, 0, 0);
}

void ScintillaEdit::delLineRight() {
    send(SCI_DELLINERIGHT, 0, 0);
}

void ScintillaEdit::setXOffset(int newOffset) {
    send(SCI_SETXOFFSET, newOffset, 0);
}

int ScintillaEdit::xOffset() const {
    return send(SCI_GETXOFFSET, 0, 0);
}

void ScintillaEdit::chooseCaretX() {
    send(SCI_CHOOSECARETX, 0, 0);
}

void ScintillaEdit::grabFocus() {
    send(SCI_GRABFOCUS, 0, 0);
}

void ScintillaEdit::setXCaretPolicy(int caretPolicy, int caretSlop) {
    send(SCI_SETXCARETPOLICY, caretPolicy, caretSlop);
}

void ScintillaEdit::setYCaretPolicy(int caretPolicy, int caretSlop) {
    send(SCI_SETYCARETPOLICY, caretPolicy, caretSlop);
}

void ScintillaEdit::setPrintWrapMode(int mode) {
    send(SCI_SETPRINTWRAPMODE, mode, 0);
}

int ScintillaEdit::printWrapMode() const {
    return send(SCI_GETPRINTWRAPMODE, 0, 0);
}

void ScintillaEdit::setHotspotActiveFore(bool useSetting, int fore) {
    send(SCI_SETHOTSPOTACTIVEFORE, useSetting, fore);
}

int ScintillaEdit::hotspotActiveFore() const {
    return send(SCI_GETHOTSPOTACTIVEFORE, 0, 0);
}

void ScintillaEdit::setHotspotActiveBack(bool useSetting, int back) {
    send(SCI_SETHOTSPOTACTIVEBACK, useSetting, back);
}

int ScintillaEdit::hotspotActiveBack() const {
    return send(SCI_GETHOTSPOTACTIVEBACK, 0, 0);
}

void ScintillaEdit::setHotspotActiveUnderline(bool underline) {
    send(SCI_SETHOTSPOTACTIVEUNDERLINE, underline, 0);
}

bool ScintillaEdit::hotspotActiveUnderline() const {
    return send(SCI_GETHOTSPOTACTIVEUNDERLINE, 0, 0);
}

void ScintillaEdit::setHotspotSingleLine(bool singleLine) {
    send(SCI_SETHOTSPOTSINGLELINE, singleLine, 0);
}

bool ScintillaEdit::hotspotSingleLine() const {
    return send(SCI_GETHOTSPOTSINGLELINE, 0, 0);
}

void ScintillaEdit::paraDown() {
    send(SCI_PARADOWN, 0, 0);
}

void ScintillaEdit::paraDownExtend() {
    send(SCI_PARADOWNEXTEND, 0, 0);
}

void ScintillaEdit::paraUp() {
    send(SCI_PARAUP, 0, 0);
}

void ScintillaEdit::paraUpExtend() {
    send(SCI_PARAUPEXTEND, 0, 0);
}

int ScintillaEdit::positionBefore(int pos) {
    return send(SCI_POSITIONBEFORE, pos, 0);
}

int ScintillaEdit::positionAfter(int pos) {
    return send(SCI_POSITIONAFTER, pos, 0);
}

void ScintillaEdit::copyRange(int start, int end) {
    send(SCI_COPYRANGE, start, end);
}

void ScintillaEdit::copyText(int length, const char * text) {
    send(SCI_COPYTEXT, length, (sptr_t)text);
}

void ScintillaEdit::setSelectionMode(int mode) {
    send(SCI_SETSELECTIONMODE, mode, 0);
}

int ScintillaEdit::selectionMode() const {
    return send(SCI_GETSELECTIONMODE, 0, 0);
}

int ScintillaEdit::getLineSelStartPosition(int line) {
    return send(SCI_GETLINESELSTARTPOSITION, line, 0);
}

int ScintillaEdit::getLineSelEndPosition(int line) {
    return send(SCI_GETLINESELENDPOSITION, line, 0);
}

void ScintillaEdit::lineDownRectExtend() {
    send(SCI_LINEDOWNRECTEXTEND, 0, 0);
}

void ScintillaEdit::lineUpRectExtend() {
    send(SCI_LINEUPRECTEXTEND, 0, 0);
}

void ScintillaEdit::charLeftRectExtend() {
    send(SCI_CHARLEFTRECTEXTEND, 0, 0);
}

void ScintillaEdit::charRightRectExtend() {
    send(SCI_CHARRIGHTRECTEXTEND, 0, 0);
}

void ScintillaEdit::homeRectExtend() {
    send(SCI_HOMERECTEXTEND, 0, 0);
}

void ScintillaEdit::vCHomeRectExtend() {
    send(SCI_VCHOMERECTEXTEND, 0, 0);
}

void ScintillaEdit::lineEndRectExtend() {
    send(SCI_LINEENDRECTEXTEND, 0, 0);
}

void ScintillaEdit::pageUpRectExtend() {
    send(SCI_PAGEUPRECTEXTEND, 0, 0);
}

void ScintillaEdit::pageDownRectExtend() {
    send(SCI_PAGEDOWNRECTEXTEND, 0, 0);
}

void ScintillaEdit::stutteredPageUp() {
    send(SCI_STUTTEREDPAGEUP, 0, 0);
}

void ScintillaEdit::stutteredPageUpExtend() {
    send(SCI_STUTTEREDPAGEUPEXTEND, 0, 0);
}

void ScintillaEdit::stutteredPageDown() {
    send(SCI_STUTTEREDPAGEDOWN, 0, 0);
}

void ScintillaEdit::stutteredPageDownExtend() {
    send(SCI_STUTTEREDPAGEDOWNEXTEND, 0, 0);
}

void ScintillaEdit::wordLeftEnd() {
    send(SCI_WORDLEFTEND, 0, 0);
}

void ScintillaEdit::wordLeftEndExtend() {
    send(SCI_WORDLEFTENDEXTEND, 0, 0);
}

void ScintillaEdit::wordRightEnd() {
    send(SCI_WORDRIGHTEND, 0, 0);
}

void ScintillaEdit::wordRightEndExtend() {
    send(SCI_WORDRIGHTENDEXTEND, 0, 0);
}

void ScintillaEdit::setWhitespaceChars(const char * characters) {
    send(SCI_SETWHITESPACECHARS, 0, (sptr_t)characters);
}

void ScintillaEdit::setCharsDefault() {
    send(SCI_SETCHARSDEFAULT, 0, 0);
}

int ScintillaEdit::autoCGetCurrent() {
    return send(SCI_AUTOCGETCURRENT, 0, 0);
}

QByteArray ScintillaEdit::autoCGetCurrentText() {
    return TextReturner(SCI_AUTOCGETCURRENTTEXT, 0);
}

void ScintillaEdit::autoCSetCaseInsensitiveBehaviour(int behaviour) {
    send(SCI_AUTOCSETCASEINSENSITIVEBEHAVIOUR, behaviour, 0);
}

int ScintillaEdit::autoCCaseInsensitiveBehaviour() const {
    return send(SCI_AUTOCGETCASEINSENSITIVEBEHAVIOUR, 0, 0);
}

void ScintillaEdit::allocate(int bytes) {
    send(SCI_ALLOCATE, bytes, 0);
}

QByteArray ScintillaEdit::targetAsUTF8() {
    return TextReturner(SCI_TARGETASUTF8, 0);
}

void ScintillaEdit::setLengthForEncode(int bytes) {
    send(SCI_SETLENGTHFORENCODE, bytes, 0);
}

QByteArray ScintillaEdit::encodedFromUTF8(const char * utf8) {
    return TextReturner(SCI_ENCODEDFROMUTF8, (uptr_t)utf8);
}

int ScintillaEdit::findColumn(int line, int column) {
    return send(SCI_FINDCOLUMN, line, column);
}

int ScintillaEdit::caretSticky() const {
    return send(SCI_GETCARETSTICKY, 0, 0);
}

void ScintillaEdit::setCaretSticky(int useCaretStickyBehaviour) {
    send(SCI_SETCARETSTICKY, useCaretStickyBehaviour, 0);
}

void ScintillaEdit::toggleCaretSticky() {
    send(SCI_TOGGLECARETSTICKY, 0, 0);
}

void ScintillaEdit::setPasteConvertEndings(bool convert) {
    send(SCI_SETPASTECONVERTENDINGS, convert, 0);
}

bool ScintillaEdit::pasteConvertEndings() const {
    return send(SCI_GETPASTECONVERTENDINGS, 0, 0);
}

void ScintillaEdit::selectionDuplicate() {
    send(SCI_SELECTIONDUPLICATE, 0, 0);
}

void ScintillaEdit::setCaretLineBackAlpha(int alpha) {
    send(SCI_SETCARETLINEBACKALPHA, alpha, 0);
}

int ScintillaEdit::caretLineBackAlpha() const {
    return send(SCI_GETCARETLINEBACKALPHA, 0, 0);
}

void ScintillaEdit::setCaretStyle(int caretStyle) {
    send(SCI_SETCARETSTYLE, caretStyle, 0);
}

int ScintillaEdit::caretStyle() const {
    return send(SCI_GETCARETSTYLE, 0, 0);
}

void ScintillaEdit::setIndicatorCurrent(int indicator) {
    send(SCI_SETINDICATORCURRENT, indicator, 0);
}

int ScintillaEdit::indicatorCurrent() const {
    return send(SCI_GETINDICATORCURRENT, 0, 0);
}

void ScintillaEdit::setIndicatorValue(int value) {
    send(SCI_SETINDICATORVALUE, value, 0);
}

int ScintillaEdit::indicatorValue() const {
    return send(SCI_GETINDICATORVALUE, 0, 0);
}

void ScintillaEdit::indicatorFillRange(int position, int fillLength) {
    send(SCI_INDICATORFILLRANGE, position, fillLength);
}

void ScintillaEdit::indicatorClearRange(int position, int clearLength) {
    send(SCI_INDICATORCLEARRANGE, position, clearLength);
}

int ScintillaEdit::indicatorAllOnFor(int position) {
    return send(SCI_INDICATORALLONFOR, position, 0);
}

int ScintillaEdit::indicatorValueAt(int indicator, int position) {
    return send(SCI_INDICATORVALUEAT, indicator, position);
}

int ScintillaEdit::indicatorStart(int indicator, int position) {
    return send(SCI_INDICATORSTART, indicator, position);
}

int ScintillaEdit::indicatorEnd(int indicator, int position) {
    return send(SCI_INDICATOREND, indicator, position);
}

void ScintillaEdit::setPositionCache(int size) {
    send(SCI_SETPOSITIONCACHE, size, 0);
}

int ScintillaEdit::positionCache() const {
    return send(SCI_GETPOSITIONCACHE, 0, 0);
}

void ScintillaEdit::copyAllowLine() {
    send(SCI_COPYALLOWLINE, 0, 0);
}

int ScintillaEdit::characterPointer() const {
    return send(SCI_GETCHARACTERPOINTER, 0, 0);
}

int ScintillaEdit::rangePointer(int position, int rangeLength) const {
    return send(SCI_GETRANGEPOINTER, position, rangeLength);
}

int ScintillaEdit::gapPosition() const {
    return send(SCI_GETGAPPOSITION, 0, 0);
}

void ScintillaEdit::setKeysUnicode(bool keysUnicode) {
    send(SCI_SETKEYSUNICODE, keysUnicode, 0);
}

bool ScintillaEdit::keysUnicode() const {
    return send(SCI_GETKEYSUNICODE, 0, 0);
}

void ScintillaEdit::indicSetAlpha(int indicator, int alpha) {
    send(SCI_INDICSETALPHA, indicator, alpha);
}

int ScintillaEdit::indicAlpha(int indicator) const {
    return send(SCI_INDICGETALPHA, indicator, 0);
}

void ScintillaEdit::indicSetOutlineAlpha(int indicator, int alpha) {
    send(SCI_INDICSETOUTLINEALPHA, indicator, alpha);
}

int ScintillaEdit::indicOutlineAlpha(int indicator) const {
    return send(SCI_INDICGETOUTLINEALPHA, indicator, 0);
}

void ScintillaEdit::setExtraAscent(int extraAscent) {
    send(SCI_SETEXTRAASCENT, extraAscent, 0);
}

int ScintillaEdit::extraAscent() const {
    return send(SCI_GETEXTRAASCENT, 0, 0);
}

void ScintillaEdit::setExtraDescent(int extraDescent) {
    send(SCI_SETEXTRADESCENT, extraDescent, 0);
}

int ScintillaEdit::extraDescent() const {
    return send(SCI_GETEXTRADESCENT, 0, 0);
}

int ScintillaEdit::markerSymbolDefined(int markerNumber) {
    return send(SCI_MARKERSYMBOLDEFINED, markerNumber, 0);
}

void ScintillaEdit::marginSetText(int line, const char * text) {
    send(SCI_MARGINSETTEXT, line, (sptr_t)text);
}

QByteArray ScintillaEdit::marginText(int line) const {
    return TextReturner(SCI_MARGINGETTEXT, line);
}

void ScintillaEdit::marginSetStyle(int line, int style) {
    send(SCI_MARGINSETSTYLE, line, style);
}

int ScintillaEdit::marginStyle(int line) const {
    return send(SCI_MARGINGETSTYLE, line, 0);
}

void ScintillaEdit::marginSetStyles(int line, const char * styles) {
    send(SCI_MARGINSETSTYLES, line, (sptr_t)styles);
}

QByteArray ScintillaEdit::marginStyles(int line) const {
    return TextReturner(SCI_MARGINGETSTYLES, line);
}

void ScintillaEdit::marginTextClearAll() {
    send(SCI_MARGINTEXTCLEARALL, 0, 0);
}

void ScintillaEdit::marginSetStyleOffset(int style) {
    send(SCI_MARGINSETSTYLEOFFSET, style, 0);
}

int ScintillaEdit::marginStyleOffset() const {
    return send(SCI_MARGINGETSTYLEOFFSET, 0, 0);
}

void ScintillaEdit::setMarginOptions(int marginOptions) {
    send(SCI_SETMARGINOPTIONS, marginOptions, 0);
}

int ScintillaEdit::marginOptions() const {
    return send(SCI_GETMARGINOPTIONS, 0, 0);
}

void ScintillaEdit::annotationSetText(int line, const char * text) {
    send(SCI_ANNOTATIONSETTEXT, line, (sptr_t)text);
}

QByteArray ScintillaEdit::annotationText(int line) const {
    return TextReturner(SCI_ANNOTATIONGETTEXT, line);
}

void ScintillaEdit::annotationSetStyle(int line, int style) {
    send(SCI_ANNOTATIONSETSTYLE, line, style);
}

int ScintillaEdit::annotationStyle(int line) const {
    return send(SCI_ANNOTATIONGETSTYLE, line, 0);
}

void ScintillaEdit::annotationSetStyles(int line, const char * styles) {
    send(SCI_ANNOTATIONSETSTYLES, line, (sptr_t)styles);
}

QByteArray ScintillaEdit::annotationStyles(int line) const {
    return TextReturner(SCI_ANNOTATIONGETSTYLES, line);
}

int ScintillaEdit::annotationLines(int line) const {
    return send(SCI_ANNOTATIONGETLINES, line, 0);
}

void ScintillaEdit::annotationClearAll() {
    send(SCI_ANNOTATIONCLEARALL, 0, 0);
}

void ScintillaEdit::annotationSetVisible(int visible) {
    send(SCI_ANNOTATIONSETVISIBLE, visible, 0);
}

int ScintillaEdit::annotationVisible() const {
    return send(SCI_ANNOTATIONGETVISIBLE, 0, 0);
}

void ScintillaEdit::annotationSetStyleOffset(int style) {
    send(SCI_ANNOTATIONSETSTYLEOFFSET, style, 0);
}

int ScintillaEdit::annotationStyleOffset() const {
    return send(SCI_ANNOTATIONGETSTYLEOFFSET, 0, 0);
}

void ScintillaEdit::addUndoAction(int token, int flags) {
    send(SCI_ADDUNDOACTION, token, flags);
}

int ScintillaEdit::charPositionFromPoint(int x, int y) {
    return send(SCI_CHARPOSITIONFROMPOINT, x, y);
}

int ScintillaEdit::charPositionFromPointClose(int x, int y) {
    return send(SCI_CHARPOSITIONFROMPOINTCLOSE, x, y);
}

void ScintillaEdit::setMultipleSelection(bool multipleSelection) {
    send(SCI_SETMULTIPLESELECTION, multipleSelection, 0);
}

bool ScintillaEdit::multipleSelection() const {
    return send(SCI_GETMULTIPLESELECTION, 0, 0);
}

void ScintillaEdit::setAdditionalSelectionTyping(bool additionalSelectionTyping) {
    send(SCI_SETADDITIONALSELECTIONTYPING, additionalSelectionTyping, 0);
}

bool ScintillaEdit::additionalSelectionTyping() const {
    return send(SCI_GETADDITIONALSELECTIONTYPING, 0, 0);
}

void ScintillaEdit::setAdditionalCaretsBlink(bool additionalCaretsBlink) {
    send(SCI_SETADDITIONALCARETSBLINK, additionalCaretsBlink, 0);
}

bool ScintillaEdit::additionalCaretsBlink() const {
    return send(SCI_GETADDITIONALCARETSBLINK, 0, 0);
}

void ScintillaEdit::setAdditionalCaretsVisible(bool additionalCaretsBlink) {
    send(SCI_SETADDITIONALCARETSVISIBLE, additionalCaretsBlink, 0);
}

bool ScintillaEdit::additionalCaretsVisible() const {
    return send(SCI_GETADDITIONALCARETSVISIBLE, 0, 0);
}

int ScintillaEdit::selections() const {
    return send(SCI_GETSELECTIONS, 0, 0);
}

void ScintillaEdit::clearSelections() {
    send(SCI_CLEARSELECTIONS, 0, 0);
}

int ScintillaEdit::setSelection(int caret, int anchor) {
    return send(SCI_SETSELECTION, caret, anchor);
}

int ScintillaEdit::addSelection(int caret, int anchor) {
    return send(SCI_ADDSELECTION, caret, anchor);
}

void ScintillaEdit::setMainSelection(int selection) {
    send(SCI_SETMAINSELECTION, selection, 0);
}

int ScintillaEdit::mainSelection() const {
    return send(SCI_GETMAINSELECTION, 0, 0);
}

void ScintillaEdit::setSelectionNCaret(int selection, int pos) {
    send(SCI_SETSELECTIONNCARET, selection, pos);
}

int ScintillaEdit::selectionNCaret(int selection) const {
    return send(SCI_GETSELECTIONNCARET, selection, 0);
}

void ScintillaEdit::setSelectionNAnchor(int selection, int posAnchor) {
    send(SCI_SETSELECTIONNANCHOR, selection, posAnchor);
}

int ScintillaEdit::selectionNAnchor(int selection) const {
    return send(SCI_GETSELECTIONNANCHOR, selection, 0);
}

void ScintillaEdit::setSelectionNCaretVirtualSpace(int selection, int space) {
    send(SCI_SETSELECTIONNCARETVIRTUALSPACE, selection, space);
}

int ScintillaEdit::selectionNCaretVirtualSpace(int selection) const {
    return send(SCI_GETSELECTIONNCARETVIRTUALSPACE, selection, 0);
}

void ScintillaEdit::setSelectionNAnchorVirtualSpace(int selection, int space) {
    send(SCI_SETSELECTIONNANCHORVIRTUALSPACE, selection, space);
}

int ScintillaEdit::selectionNAnchorVirtualSpace(int selection) const {
    return send(SCI_GETSELECTIONNANCHORVIRTUALSPACE, selection, 0);
}

void ScintillaEdit::setSelectionNStart(int selection, int pos) {
    send(SCI_SETSELECTIONNSTART, selection, pos);
}

int ScintillaEdit::selectionNStart(int selection) const {
    return send(SCI_GETSELECTIONNSTART, selection, 0);
}

void ScintillaEdit::setSelectionNEnd(int selection, int pos) {
    send(SCI_SETSELECTIONNEND, selection, pos);
}

int ScintillaEdit::selectionNEnd(int selection) const {
    return send(SCI_GETSELECTIONNEND, selection, 0);
}

void ScintillaEdit::setRectangularSelectionCaret(int pos) {
    send(SCI_SETRECTANGULARSELECTIONCARET, pos, 0);
}

int ScintillaEdit::rectangularSelectionCaret() const {
    return send(SCI_GETRECTANGULARSELECTIONCARET, 0, 0);
}

void ScintillaEdit::setRectangularSelectionAnchor(int posAnchor) {
    send(SCI_SETRECTANGULARSELECTIONANCHOR, posAnchor, 0);
}

int ScintillaEdit::rectangularSelectionAnchor() const {
    return send(SCI_GETRECTANGULARSELECTIONANCHOR, 0, 0);
}

void ScintillaEdit::setRectangularSelectionCaretVirtualSpace(int space) {
    send(SCI_SETRECTANGULARSELECTIONCARETVIRTUALSPACE, space, 0);
}

int ScintillaEdit::rectangularSelectionCaretVirtualSpace() const {
    return send(SCI_GETRECTANGULARSELECTIONCARETVIRTUALSPACE, 0, 0);
}

void ScintillaEdit::setRectangularSelectionAnchorVirtualSpace(int space) {
    send(SCI_SETRECTANGULARSELECTIONANCHORVIRTUALSPACE, space, 0);
}

int ScintillaEdit::rectangularSelectionAnchorVirtualSpace() const {
    return send(SCI_GETRECTANGULARSELECTIONANCHORVIRTUALSPACE, 0, 0);
}

void ScintillaEdit::setVirtualSpaceOptions(int virtualSpaceOptions) {
    send(SCI_SETVIRTUALSPACEOPTIONS, virtualSpaceOptions, 0);
}

int ScintillaEdit::virtualSpaceOptions() const {
    return send(SCI_GETVIRTUALSPACEOPTIONS, 0, 0);
}

void ScintillaEdit::setRectangularSelectionModifier(int modifier) {
    send(SCI_SETRECTANGULARSELECTIONMODIFIER, modifier, 0);
}

int ScintillaEdit::rectangularSelectionModifier() const {
    return send(SCI_GETRECTANGULARSELECTIONMODIFIER, 0, 0);
}

void ScintillaEdit::setAdditionalSelFore(int fore) {
    send(SCI_SETADDITIONALSELFORE, fore, 0);
}

void ScintillaEdit::setAdditionalSelBack(int back) {
    send(SCI_SETADDITIONALSELBACK, back, 0);
}

void ScintillaEdit::setAdditionalSelAlpha(int alpha) {
    send(SCI_SETADDITIONALSELALPHA, alpha, 0);
}

int ScintillaEdit::additionalSelAlpha() const {
    return send(SCI_GETADDITIONALSELALPHA, 0, 0);
}

void ScintillaEdit::setAdditionalCaretFore(int fore) {
    send(SCI_SETADDITIONALCARETFORE, fore, 0);
}

int ScintillaEdit::additionalCaretFore() const {
    return send(SCI_GETADDITIONALCARETFORE, 0, 0);
}

void ScintillaEdit::rotateSelection() {
    send(SCI_ROTATESELECTION, 0, 0);
}

void ScintillaEdit::swapMainAnchorCaret() {
    send(SCI_SWAPMAINANCHORCARET, 0, 0);
}

int ScintillaEdit::changeLexerState(int start, int end) {
    return send(SCI_CHANGELEXERSTATE, start, end);
}

int ScintillaEdit::contractedFoldNext(int lineStart) {
    return send(SCI_CONTRACTEDFOLDNEXT, lineStart, 0);
}

void ScintillaEdit::verticalCentreCaret() {
    send(SCI_VERTICALCENTRECARET, 0, 0);
}

void ScintillaEdit::moveSelectedLinesUp() {
    send(SCI_MOVESELECTEDLINESUP, 0, 0);
}

void ScintillaEdit::moveSelectedLinesDown() {
    send(SCI_MOVESELECTEDLINESDOWN, 0, 0);
}

void ScintillaEdit::setIdentifier(int identifier) {
    send(SCI_SETIDENTIFIER, identifier, 0);
}

int ScintillaEdit::identifier() const {
    return send(SCI_GETIDENTIFIER, 0, 0);
}

void ScintillaEdit::rGBAImageSetWidth(int width) {
    send(SCI_RGBAIMAGESETWIDTH, width, 0);
}

void ScintillaEdit::rGBAImageSetHeight(int height) {
    send(SCI_RGBAIMAGESETHEIGHT, height, 0);
}

void ScintillaEdit::markerDefineRGBAImage(int markerNumber, const char * pixels) {
    send(SCI_MARKERDEFINERGBAIMAGE, markerNumber, (sptr_t)pixels);
}

void ScintillaEdit::registerRGBAImage(int type, const char * pixels) {
    send(SCI_REGISTERRGBAIMAGE, type, (sptr_t)pixels);
}

void ScintillaEdit::scrollToStart() {
    send(SCI_SCROLLTOSTART, 0, 0);
}

void ScintillaEdit::scrollToEnd() {
    send(SCI_SCROLLTOEND, 0, 0);
}

void ScintillaEdit::setTechnology(int technology) {
    send(SCI_SETTECHNOLOGY, technology, 0);
}

int ScintillaEdit::technology() const {
    return send(SCI_GETTECHNOLOGY, 0, 0);
}

int ScintillaEdit::createLoader(int bytes) {
    return send(SCI_CREATELOADER, bytes, 0);
}

void ScintillaEdit::findIndicatorShow(int start, int end) {
    send(SCI_FINDINDICATORSHOW, start, end);
}

void ScintillaEdit::findIndicatorFlash(int start, int end) {
    send(SCI_FINDINDICATORFLASH, start, end);
}

void ScintillaEdit::findIndicatorHide() {
    send(SCI_FINDINDICATORHIDE, 0, 0);
}

void ScintillaEdit::startRecord() {
    send(SCI_STARTRECORD, 0, 0);
}

void ScintillaEdit::stopRecord() {
    send(SCI_STOPRECORD, 0, 0);
}

void ScintillaEdit::setLexer(int lexer) {
    send(SCI_SETLEXER, lexer, 0);
}

int ScintillaEdit::lexer() const {
    return send(SCI_GETLEXER, 0, 0);
}

void ScintillaEdit::colourise(int start, int end) {
    send(SCI_COLOURISE, start, end);
}

void ScintillaEdit::setProperty(const char * key, const char * value) {
    send(SCI_SETPROPERTY, (uptr_t)key, (sptr_t)value);
}

void ScintillaEdit::setKeyWords(int keywordSet, const char * keyWords) {
    send(SCI_SETKEYWORDS, keywordSet, (sptr_t)keyWords);
}

void ScintillaEdit::setLexerLanguage(const char * language) {
    send(SCI_SETLEXERLANGUAGE, 0, (sptr_t)language);
}

void ScintillaEdit::loadLexerLibrary(const char * path) {
    send(SCI_LOADLEXERLIBRARY, 0, (sptr_t)path);
}

QByteArray ScintillaEdit::getProperty(const char * key) {
    return TextReturner(SCI_GETPROPERTY, (uptr_t)key);
}

QByteArray ScintillaEdit::getPropertyExpanded(const char * key) {
    return TextReturner(SCI_GETPROPERTYEXPANDED, (uptr_t)key);
}

int ScintillaEdit::propertyInt(const char * key) const {
    return send(SCI_GETPROPERTYINT, (uptr_t)key, 0);
}

int ScintillaEdit::styleBitsNeeded() const {
    return send(SCI_GETSTYLEBITSNEEDED, 0, 0);
}

QByteArray ScintillaEdit::lexerLanguage() const {
    return TextReturner(SCI_GETLEXERLANGUAGE, 0);
}

int ScintillaEdit::privateLexerCall(int operation, int pointer) {
    return send(SCI_PRIVATELEXERCALL, operation, pointer);
}

QByteArray ScintillaEdit::propertyNames() {
    return TextReturner(SCI_PROPERTYNAMES, 0);
}

int ScintillaEdit::propertyType(const char * name) {
    return send(SCI_PROPERTYTYPE, (uptr_t)name, 0);
}

QByteArray ScintillaEdit::describeProperty(const char * name) {
    return TextReturner(SCI_DESCRIBEPROPERTY, (uptr_t)name);
}

QByteArray ScintillaEdit::describeKeyWordSets() {
    return TextReturner(SCI_DESCRIBEKEYWORDSETS, 0);
}

/* --Autogenerated -- end of section automatically generated from Scintilla.iface */
