#include "openssl.h"

/* {{{ PKCS7 S/MIME functions */

/* {{{ proto bool openssl_pkcs7_sign(string infile, string outfile, mixed signcert, mixed signkey, array headers [, long flags [, string extracertsfilename]])
   Signs the MIME message in the file named infile with signcert/signkey and output the result to file name outfile. headers lists plain text headers to exclude from the signed portion of the message, and should include to, from and subject as a minimum */

LUA_FUNCTION(openssl_pkcs7_sign)
{
	X509 * cert = NULL;
	EVP_PKEY * privkey = NULL;
	long flags = PKCS7_DETACHED;
	PKCS7 * p7 = NULL;
	BIO * infile = NULL, * outfile = NULL;
	STACK_OF(X509) *others = NULL;
	long  keyresource = -1;
	const char * infilename;
	const char * outfilename;
	const char * extracertsfilename = NULL;
	int headers = 5;
	int top = lua_gettop(L);
	int ret = 0;

	infilename = luaL_checkstring(L,1);
	outfilename = luaL_checkstring(L,2);
	cert = CHECK_OBJECT(3,X509,"openssl.x509");
	privkey = CHECK_OBJECT(4,EVP_PKEY,"openssl.evp_pkey");
	headers = 5;
	if(top>5)
		flags = luaL_checkint(L,6);
	if(top>6)
		extracertsfilename = luaL_checkstring(L,7);

	if (extracertsfilename) {
		others = load_all_certs_from_file(extracertsfilename);
		if (others == NULL) { 
			goto clean_exit;
		}
	}

	infile = BIO_new_file(infilename, "r");
	if (infile == NULL) {
		luaL_error(L,"error opening input file %s!", infilename);
		goto clean_exit;
	}

	outfile = BIO_new_file(outfilename, "w");
	if (outfile == NULL) {
		luaL_error(L,"error opening output file %s!", outfilename);
		goto clean_exit;
	}

	p7 = PKCS7_sign(cert, privkey, others, infile, flags);
	if (p7 == NULL) {
		luaL_error(L,"error creating PKCS7 structure!");
		goto clean_exit;
	}

	(void)BIO_reset(infile);

	/* tack on extra headers */
	/* table is in the stack at index 't' */
	lua_pushnil(L);  /* first key */
	while (lua_next(L, headers) != 0) {
		/* uses 'key' (at index -2) and 'value' (at index -1) */
		//printf("%s - %s\n",lua_typename(L, lua_type(L, -2)), lua_typename(L, lua_type(L, -1)));
		const char *idx = lua_tostring(L,-2);
		const char *val = luaL_checkstring(L,-1);

		BIO_printf(outfile, "%s: %s\n", idx, val);

		/* removes 'value'; keeps 'key' for next iteration */
		lua_pop(L, 1);
	}

	/* write the signed data */
	ret = SMIME_write_PKCS7(outfile, p7, infile, flags);


clean_exit:
	PKCS7_free(p7);
	BIO_free(infile);
	BIO_free(outfile);
	if (others) {
		sk_X509_pop_free(others, X509_free);
	}
	if (privkey && keyresource == -1) {
		EVP_PKEY_free(privkey);
	}
	lua_pushboolean(L,ret);
	return 1;
}
/* }}} */


/* {{{ proto bool openssl.pkcs7_verify(string filename, long flags [, string signerscerts [, array cainfo [, string extracerts [, string content]]]])
   Verifys that the data block is intact, the signer is who they say they are, and returns the CERTs of the signers */
LUA_FUNCTION(openssl_pkcs7_verify)
{
	X509_STORE * store = NULL;
	STACK_OF(X509) *cainfo = NULL;
	STACK_OF(X509) *signers= NULL;
	STACK_OF(X509) *others = NULL;
	PKCS7 * p7 = NULL;
	BIO * in = NULL, * datain = NULL, * dataout = NULL;
	long flags = 0;
	const char * filename;
	const char * extracerts = NULL; int extracerts_len = 0;
	const char * signersfilename = NULL; int signersfilename_len = 0;
	const char * datafilename = NULL; int datafilename_len = 0;
	int ret;
	int top = lua_gettop(L);
	
	filename = luaL_checkstring(L,1);
	flags = luaL_checkinteger(L,2);
	if(top>2)
		signersfilename = luaL_optstring(L,3,NULL);
	if(top>3)
		cainfo = CHECK_OBJECT(4,STACK_OF(X509),"openssl.stack_of_x509");
	if(top>5)
		extracerts = luaL_optstring(L,6,NULL);
	if(top>6)
		datafilename = luaL_optstring(L,7,NULL);

	if (extracerts) {
		others = load_all_certs_from_file(extracerts);
		if (others == NULL) {
			goto clean_exit;
		}
	}

	flags = flags & ~PKCS7_DETACHED;
	store = setup_verify(cainfo);

	if (!store) {
		goto clean_exit;
	}

	in = BIO_new_file(filename, (flags & PKCS7_BINARY) ? "rb" : "r");
	if (in == NULL) {
		goto clean_exit;
	}
	p7 = SMIME_read_PKCS7(in, &datain);
	if (p7 == NULL) {
#if DEBUG_SMIME
		zend_printf("SMIME_read_PKCS7 failed\n");
#endif
		goto clean_exit;
	}

	if (datafilename) {
		dataout = BIO_new_file(datafilename, "w");
		if (dataout == NULL) {
			goto clean_exit;
		}
	}
#if DEBUG_SMIME
	zend_printf("Calling PKCS7 verify\n");
#endif

	if (PKCS7_verify(p7, others, store, datain, dataout, flags)) {
		ret = 1;
		if (signersfilename) {
			BIO *certout;
				
			certout = BIO_new_file(signersfilename, "w");
			if (certout) {
				int i;
				signers = PKCS7_get0_signers(p7, NULL, flags);

				for(i = 0; i < sk_X509_num(signers); i++) {
					PEM_write_bio_X509(certout, sk_X509_value(signers, i));
				}
				BIO_free(certout);
				openssl_sk_X509_free(signers);
			} else {
				luaL_error(L,"signature OK, but cannot open %s for writing", signersfilename);
			}
		}
		goto clean_exit;
	} else {
		ret = 0;
	}
clean_exit:
	X509_STORE_free(store);
	BIO_free(datain);
	BIO_free(in);
	BIO_free(dataout);
	PKCS7_free(p7);
	openssl_sk_X509_free(others);
	lua_pushboolean(L,ret);
	return 1;
}
/* }}} */


/* {{{ proto bool openssl_pkcs7_decrypt(string infilename, string outfilename, mixed recipcert [, mixed recipkey])
   Decrypts the S/MIME message in the file name infilename and output the results to the file name outfilename.  recipcert is a CERT for one of the recipients. recipkey specifies the private key matching recipcert, if recipcert does not include the key */

LUA_FUNCTION(openssl_pkcs7_decrypt)
{
	X509 * cert = NULL;
	EVP_PKEY * key = NULL;

	BIO * in = NULL, * out = NULL, * datain = NULL;
	PKCS7 * p7 = NULL;
	const char * infilename;
	const char * outfilename;
	int top = lua_gettop(L);
	int ret = 0;

	infilename = luaL_checkstring(L,1);
	outfilename = luaL_checkstring(L,2);
	cert = CHECK_OBJECT(3,X509,"openssl.x509");
	key = lua_isnil(L,4)?NULL: CHECK_OBJECT(4,EVP_PKEY,"openssl.evp_pkey");

	in = BIO_new_file(infilename, "r");
	if (in == NULL) {
		goto clean_exit;
	}
	out = BIO_new_file(outfilename, "w");
	if (out == NULL) {
		goto clean_exit;
	}

	p7 = SMIME_read_PKCS7(in, &datain);

	if (p7 == NULL) {
		goto clean_exit;
	}
	if (PKCS7_decrypt(p7, key, cert, out, PKCS7_DETACHED)) { 
		ret = 1;
	}
clean_exit:
	PKCS7_free(p7);
	BIO_free(datain);
	BIO_free(in);
	BIO_free(out);

	lua_pushboolean(L,ret);
	return 1;
}
/* }}} */

/* {{{ proto bool openssl.pkcs7_encrypt(string infile, string outfile, mixed recipcerts, array headers [, long flags [, long cipher]])
   Encrypts the message in the file named infile with the certificates in recipcerts and output the result to the file named outfile */
LUA_FUNCTION(openssl_pkcs7_encrypt)
{
	STACK_OF(X509) * recipcerts = NULL;
	BIO * infile = NULL, * outfile = NULL;
	long flags = 0;
	PKCS7 * p7 = NULL;
	const EVP_CIPHER *cipher = EVP_get_cipherbynid(OPENSSL_CIPHER_DEFAULT);
	const char * infilename = NULL;
	const char * outfilename = NULL;
	int ret = 0;
	int headers;
	int top = lua_gettop(L);

	infilename = luaL_checkstring(L,1);
	outfilename = luaL_checkstring(L,1);
	recipcerts = CHECK_OBJECT(3,STACK_OF(X509),"openssl.stack_of_x509");
	headers = 4;
	if (top>4)
		flags = luaL_checkinteger(L,5);
	if(top>5)
		cipher = CHECK_OBJECT(6,EVP_CIPHER,"openssl.evp_cipher");

	infile = BIO_new_file(infilename, "r");
	if (infile == NULL) {
		goto clean_exit;
	}

	outfile = BIO_new_file(outfilename, "w");
	if (outfile == NULL) { 
		goto clean_exit;
	}

	recipcerts = sk_X509_new_null();

	/* sanity check the cipher */
	if (cipher == NULL) {
		/* shouldn't happen */
		luaL_error(L, "Failed to get cipher");
	}

	p7 = PKCS7_encrypt(recipcerts, infile, (EVP_CIPHER*)cipher, flags);

	if (p7 == NULL) {
		goto clean_exit;
	}

	/* tack on extra headers */
	/* table is in the stack at index 't' */
	lua_pushnil(L);  /* first key */
	while (lua_next(L, headers) != 0) {
		/* uses 'key' (at index -2) and 'value' (at index -1) */
		//printf("%s - %s\n",lua_typename(L, lua_type(L, -2)), lua_typename(L, lua_type(L, -1)));
		const char *idx = lua_tostring(L,-2);
		const char *val = luaL_checkstring(L,-1);

		BIO_printf(outfile, "%s: %s\n", idx, val);

		/* removes 'value'; keeps 'key' for next iteration */
		lua_pop(L, 1);
	}


	(void)BIO_reset(infile);

	/* write the encrypted data */
	ret = SMIME_write_PKCS7(outfile, p7, infile, flags);

clean_exit:
	PKCS7_free(p7);
	BIO_free(infile);
	BIO_free(outfile);
	if (recipcerts) {
		sk_X509_pop_free(recipcerts, X509_free);
	}
	lua_pushboolean(L,ret);
	return 1;
}
/* }}} */

/* }}} */
